
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017cb0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036a4  08017e80  08017e80  00018e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b524  0801b524  0001d210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801b524  0801b524  0001c524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b52c  0801b52c  0001d210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b52c  0801b52c  0001c52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b530  0801b530  0001c530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  0801b534  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000d0  0801b604  0001d0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000170  0801b6a4  0001d170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00011e80  20000210  0801b744  0001d210  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20012090  0801b744  0001e090  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001d210  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004279b  00000000  00000000  0001d240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008f84  00000000  00000000  0005f9db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000037a0  00000000  00000000  00068960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002b68  00000000  00000000  0006c100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037bd9  00000000  00000000  0006ec68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004b16b  00000000  00000000  000a6841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012e04b  00000000  00000000  000f19ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0021f9f7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f620  00000000  00000000  0021fa3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  0022f05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017e68 	.word	0x08017e68

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	08017e68 	.word	0x08017e68

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <CommandSender_Send>:
#include <stddef.h>
#include <string.h>
#include <stdio.h>

void CommandSender_Send(const char* command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (command != NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d051      	beq.n	80006be <CommandSender_Send+0xb2>
        int len = strlen(command);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe02 	bl	8000224 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
        
        // 전송할 명령어를 명확히 로깅 (특수 문자도 표시)
        LOG_INFO("📤 TX: '%s' (%d bytes)", command, len);
 8000624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4929      	ldr	r1, [pc, #164]	@ (80006d0 <CommandSender_Send+0xc4>)
 800062a:	2001      	movs	r0, #1
 800062c:	f004 fcee 	bl	800500c <LOGGER_SendFormatted>
        
        // 헥스 덤프도 표시 (처음 20바이트까지)
        if (len > 0) {
 8000630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000632:	2b00      	cmp	r3, #0
 8000634:	dd2c      	ble.n	8000690 <CommandSender_Send+0x84>
            char hex_dump[64] = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f016 fcca 	bl	8016fd8 <memset>
            int dump_len = (len > 20) ? 20 : len;
 8000644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000646:	2b14      	cmp	r3, #20
 8000648:	bfa8      	it	ge
 800064a:	2314      	movge	r3, #20
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < dump_len; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
 8000652:	e012      	b.n	800067a <CommandSender_Send+0x6e>
                snprintf(hex_dump + i*3, 4, "%02X ", (unsigned char)command[i]);
 8000654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	1898      	adds	r0, r3, r2
 8000664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <CommandSender_Send+0xc8>)
 800066e:	2104      	movs	r1, #4
 8000670:	f016 fbda 	bl	8016e28 <sniprintf>
            for (int i = 0; i < dump_len; i++) {
 8000674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000676:	3301      	adds	r3, #1
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
 800067a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800067c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800067e:	429a      	cmp	r2, r3
 8000680:	dbe8      	blt.n	8000654 <CommandSender_Send+0x48>
            }
            LOG_DEBUG("[CommandSender] Hex: %s", hex_dump);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	461a      	mov	r2, r3
 8000688:	4913      	ldr	r1, [pc, #76]	@ (80006d8 <CommandSender_Send+0xcc>)
 800068a:	2000      	movs	r0, #0
 800068c:	f004 fcbe 	bl	800500c <LOGGER_SendFormatted>
        }
        
        UartStatus status = UART_Send(command);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f004 fdd5 	bl	8005240 <UART_Send>
 8000696:	4603      	mov	r3, r0
 8000698:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        
        if (status == UART_STATUS_OK) {
 800069c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d104      	bne.n	80006ae <CommandSender_Send+0xa2>
            LOG_DEBUG("[CommandSender] ✓ Command sent successfully");
 80006a4:	490d      	ldr	r1, [pc, #52]	@ (80006dc <CommandSender_Send+0xd0>)
 80006a6:	2000      	movs	r0, #0
 80006a8:	f004 fcb0 	bl	800500c <LOGGER_SendFormatted>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
        }
    } else {
        LOG_WARN("[CommandSender] Attempted to send NULL command");
    }
}
 80006ac:	e00b      	b.n	80006c6 <CommandSender_Send+0xba>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
 80006ae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006b2:	461a      	mov	r2, r3
 80006b4:	490a      	ldr	r1, [pc, #40]	@ (80006e0 <CommandSender_Send+0xd4>)
 80006b6:	2003      	movs	r0, #3
 80006b8:	f004 fca8 	bl	800500c <LOGGER_SendFormatted>
}
 80006bc:	e003      	b.n	80006c6 <CommandSender_Send+0xba>
        LOG_WARN("[CommandSender] Attempted to send NULL command");
 80006be:	4909      	ldr	r1, [pc, #36]	@ (80006e4 <CommandSender_Send+0xd8>)
 80006c0:	2002      	movs	r0, #2
 80006c2:	f004 fca3 	bl	800500c <LOGGER_SendFormatted>
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	@ 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	08017e80 	.word	0x08017e80
 80006d4:	08017e9c 	.word	0x08017e9c
 80006d8:	08017ea4 	.word	0x08017ea4
 80006dc:	08017ebc 	.word	0x08017ebc
 80006e0:	08017eec 	.word	0x08017eec
 80006e4:	08017f24 	.word	0x08017f24

080006e8 <get_state_name>:
};

const int LORA_DEFAULT_INIT_COMMANDS_COUNT = sizeof(LORA_DEFAULT_INIT_COMMANDS) / sizeof(LORA_DEFAULT_INIT_COMMANDS[0]);

// 상태 이름을 문자열로 변환하는 헬퍼 함수
static const char* get_state_name(LoraState state) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b0a      	cmp	r3, #10
 80006f6:	d82f      	bhi.n	8000758 <get_state_name+0x70>
 80006f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <get_state_name+0x18>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	0800072d 	.word	0x0800072d
 8000704:	08000731 	.word	0x08000731
 8000708:	08000735 	.word	0x08000735
 800070c:	08000739 	.word	0x08000739
 8000710:	0800073d 	.word	0x0800073d
 8000714:	08000741 	.word	0x08000741
 8000718:	08000745 	.word	0x08000745
 800071c:	08000749 	.word	0x08000749
 8000720:	0800074d 	.word	0x0800074d
 8000724:	08000751 	.word	0x08000751
 8000728:	08000755 	.word	0x08000755
        case LORA_STATE_INIT: return "INIT";
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <get_state_name+0x80>)
 800072e:	e014      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_CMD: return "SEND_CMD";
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <get_state_name+0x84>)
 8000732:	e012      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_OK: return "WAIT_OK";
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <get_state_name+0x88>)
 8000736:	e010      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_JOIN: return "SEND_JOIN";
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <get_state_name+0x8c>)
 800073a:	e00e      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_JOIN_OK: return "WAIT_JOIN_OK";
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <get_state_name+0x90>)
 800073e:	e00c      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_PERIODIC: return "SEND_PERIODIC";
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <get_state_name+0x94>)
 8000742:	e00a      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_RESPONSE: return "WAIT_SEND_RESPONSE";
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <get_state_name+0x98>)
 8000746:	e008      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_INTERVAL: return "WAIT_SEND_INTERVAL";
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <get_state_name+0x9c>)
 800074a:	e006      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_JOIN_RETRY: return "JOIN_RETRY";
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <get_state_name+0xa0>)
 800074e:	e004      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_DONE: return "DONE";
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <get_state_name+0xa4>)
 8000752:	e002      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_ERROR: return "ERROR";
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <get_state_name+0xa8>)
 8000756:	e000      	b.n	800075a <get_state_name+0x72>
        default: return "UNKNOWN";
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <get_state_name+0xac>)
    }
}
 800075a:	4618      	mov	r0, r3
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	08017f90 	.word	0x08017f90
 800076c:	08017f98 	.word	0x08017f98
 8000770:	08017fa4 	.word	0x08017fa4
 8000774:	08017fac 	.word	0x08017fac
 8000778:	08017fb8 	.word	0x08017fb8
 800077c:	08017fc8 	.word	0x08017fc8
 8000780:	08017fd8 	.word	0x08017fd8
 8000784:	08017fec 	.word	0x08017fec
 8000788:	08018000 	.word	0x08018000
 800078c:	0801800c 	.word	0x0801800c
 8000790:	08018014 	.word	0x08018014
 8000794:	0801801c 	.word	0x0801801c

08000798 <LoraStarter_InitWithDefaults>:
    UART_Connect(port);
    LOG_INFO("[LoRa] UART connected to %s", port);
}

void LoraStarter_InitWithDefaults(LoraStarterContext* ctx, const char* send_message)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d032      	beq.n	800080e <LoraStarter_InitWithDefaults+0x76>
    
    ctx->state = LORA_STATE_INIT;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
    ctx->cmd_index = 0;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
    ctx->commands = LORA_DEFAULT_INIT_COMMANDS;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a18      	ldr	r2, [pc, #96]	@ (8000818 <LoraStarter_InitWithDefaults+0x80>)
 80007b8:	609a      	str	r2, [r3, #8]
    ctx->num_commands = LORA_DEFAULT_INIT_COMMANDS_COUNT;
 80007ba:	2205      	movs	r2, #5
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	60da      	str	r2, [r3, #12]
    ctx->send_message = (send_message != NULL) ? send_message : "TEST";
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <LoraStarter_InitWithDefaults+0x32>
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	e000      	b.n	80007cc <LoraStarter_InitWithDefaults+0x34>
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <LoraStarter_InitWithDefaults+0x84>)
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	61d3      	str	r3, [r2, #28]
    ctx->max_retry_count = 3;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2203      	movs	r2, #3
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->send_interval_ms = 300000;  // 5분 간격
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a11      	ldr	r2, [pc, #68]	@ (8000820 <LoraStarter_InitWithDefaults+0x88>)
 80007da:	615a      	str	r2, [r3, #20]
    ctx->last_send_time = 0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
    ctx->send_count = 0;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
    ctx->error_count = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
    ctx->last_retry_time = 0;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->retry_delay_ms = 1000;  // 1초 초기 지연
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    LOG_INFO("[LoRa] Initialized with defaults - Commands: %d, Message: %s", 
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	68da      	ldr	r2, [r3, #12]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	4907      	ldr	r1, [pc, #28]	@ (8000824 <LoraStarter_InitWithDefaults+0x8c>)
 8000806:	2001      	movs	r0, #1
 8000808:	f004 fc00 	bl	800500c <LOGGER_SendFormatted>
 800080c:	e000      	b.n	8000810 <LoraStarter_InitWithDefaults+0x78>
    if (ctx == NULL) return;
 800080e:	bf00      	nop
             ctx->num_commands, ctx->send_message);
}
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000000 	.word	0x20000000
 800081c:	08018040 	.word	0x08018040
 8000820:	000493e0 	.word	0x000493e0
 8000824:	08018048 	.word	0x08018048

08000828 <LoraStarter_Process>:

void LoraStarter_Process(LoraStarterContext* ctx, const char* uart_rx)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b0bf      	sub	sp, #252	@ 0xfc
 800082c:	af02      	add	r7, sp, #8
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	f000 8289 	beq.w	8000d4c <LoraStarter_Process+0x524>

    LoraState old_state = ctx->state;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb

    switch(ctx->state) {
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b08      	cmp	r3, #8
 8000848:	f200 8261 	bhi.w	8000d0e <LoraStarter_Process+0x4e6>
 800084c:	a201      	add	r2, pc, #4	@ (adr r2, 8000854 <LoraStarter_Process+0x2c>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000879 	.word	0x08000879
 8000858:	080008c7 	.word	0x080008c7
 800085c:	0800091d 	.word	0x0800091d
 8000860:	080009d7 	.word	0x080009d7
 8000864:	080009ed 	.word	0x080009ed
 8000868:	08000a3b 	.word	0x08000a3b
 800086c:	08000af9 	.word	0x08000af9
 8000870:	08000c35 	.word	0x08000c35
 8000874:	08000c9b 	.word	0x08000c9b
        case LORA_STATE_INIT:
            ctx->cmd_index = 0;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
            ctx->error_count = 0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
            ctx->state = LORA_STATE_SEND_CMD;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
            // 기본값 설정
            if (ctx->max_retry_count == 0) ctx->max_retry_count = 0; // 0이면 무제한
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800088e:	2b00      	cmp	r3, #0
 8000890:	d102      	bne.n	8000898 <LoraStarter_Process+0x70>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24
            if (ctx->send_message == NULL) ctx->send_message = "Hello";
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <LoraStarter_Process+0x7e>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4aaa      	ldr	r2, [pc, #680]	@ (8000b4c <LoraStarter_Process+0x324>)
 80008a4:	61da      	str	r2, [r3, #28]
            ctx->last_retry_time = 0;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	@ 0x28
            ctx->retry_delay_ms = 1000; // 초기 재시도 지연: 1초
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
            LOG_INFO("[LoRa] Initialized with message: %s, max_retries: %d", 
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	69da      	ldr	r2, [r3, #28]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008bc:	49a4      	ldr	r1, [pc, #656]	@ (8000b50 <LoraStarter_Process+0x328>)
 80008be:	2001      	movs	r0, #1
 80008c0:	f004 fba4 	bl	800500c <LOGGER_SendFormatted>
                    ctx->send_message, ctx->max_retry_count);
            break;
 80008c4:	e22a      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_SEND_CMD:
            if (ctx->cmd_index < ctx->num_commands) {
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	da20      	bge.n	8000914 <LoraStarter_Process+0xec>
                LOG_DEBUG("[LoRa] Sending command %d/%d: %s", 
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	1c59      	adds	r1, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68d8      	ldr	r0, [r3, #12]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689a      	ldr	r2, [r3, #8]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4413      	add	r3, r2
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	4603      	mov	r3, r0
 80008ee:	460a      	mov	r2, r1
 80008f0:	4998      	ldr	r1, [pc, #608]	@ (8000b54 <LoraStarter_Process+0x32c>)
 80008f2:	2000      	movs	r0, #0
 80008f4:	f004 fb8a 	bl	800500c <LOGGER_SendFormatted>
                         ctx->cmd_index + 1, ctx->num_commands, ctx->commands[ctx->cmd_index]);
                CommandSender_Send(ctx->commands[ctx->cmd_index]);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fe80 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_OK;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2202      	movs	r2, #2
 8000910:	701a      	strb	r2, [r3, #0]
            } else {
                ctx->state = LORA_STATE_SEND_JOIN;
            }
            break;
 8000912:	e203      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                ctx->state = LORA_STATE_SEND_JOIN;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2203      	movs	r2, #3
 8000918:	701a      	strb	r2, [r3, #0]
            break;
 800091a:	e1ff      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_WAIT_OK:
            if (uart_rx) {
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 81f7 	beq.w	8000d12 <LoraStarter_Process+0x4ea>
                if (is_response_ok(uart_rx)) {
 8000924:	6838      	ldr	r0, [r7, #0]
 8000926:	f000 fa31 	bl	8000d8c <is_response_ok>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d010      	beq.n	8000952 <LoraStarter_Process+0x12a>
                    LOG_DEBUG("[LoRa] Command %d OK received", ctx->cmd_index + 1);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	3301      	adds	r3, #1
 8000936:	461a      	mov	r2, r3
 8000938:	4987      	ldr	r1, [pc, #540]	@ (8000b58 <LoraStarter_Process+0x330>)
 800093a:	2000      	movs	r0, #0
 800093c:	f004 fb66 	bl	800500c <LOGGER_SendFormatted>
                    ctx->cmd_index++;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	605a      	str	r2, [r3, #4]
                    ctx->state = LORA_STATE_SEND_CMD;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 에러 카운터 리셋
                        ctx->state = LORA_STATE_SEND_CMD;
                    }
                }
            }
            break;
 8000950:	e1df      	b.n	8000d12 <LoraStarter_Process+0x4ea>
                } else if (strstr(uart_rx, "ERROR") || strstr(uart_rx, "AT_COMMAND_NOT_FOUND")) {
 8000952:	4982      	ldr	r1, [pc, #520]	@ (8000b5c <LoraStarter_Process+0x334>)
 8000954:	6838      	ldr	r0, [r7, #0]
 8000956:	f016 fb5a 	bl	801700e <strstr>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d107      	bne.n	8000970 <LoraStarter_Process+0x148>
 8000960:	497f      	ldr	r1, [pc, #508]	@ (8000b60 <LoraStarter_Process+0x338>)
 8000962:	6838      	ldr	r0, [r7, #0]
 8000964:	f016 fb53 	bl	801700e <strstr>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	f000 81d1 	beq.w	8000d12 <LoraStarter_Process+0x4ea>
                    LOG_WARN("[LoRa] Command %d failed: %s", ctx->cmd_index + 1, uart_rx);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	497a      	ldr	r1, [pc, #488]	@ (8000b64 <LoraStarter_Process+0x33c>)
 800097a:	2002      	movs	r0, #2
 800097c:	f004 fb46 	bl	800500c <LOGGER_SendFormatted>
                    ctx->error_count++;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6a1b      	ldr	r3, [r3, #32]
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	621a      	str	r2, [r3, #32]
                    if (ctx->error_count < 3) {
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	2b02      	cmp	r3, #2
 8000990:	dc0d      	bgt.n	80009ae <LoraStarter_Process+0x186>
                        LOG_INFO("[LoRa] Retrying command %d (attempt %d/3)", ctx->cmd_index + 1, ctx->error_count + 1);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6a1b      	ldr	r3, [r3, #32]
 800099c:	3301      	adds	r3, #1
 800099e:	4972      	ldr	r1, [pc, #456]	@ (8000b68 <LoraStarter_Process+0x340>)
 80009a0:	2001      	movs	r0, #1
 80009a2:	f004 fb33 	bl	800500c <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_CMD; // 같은 명령 재시도
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
            break;
 80009ac:	e1b1      	b.n	8000d12 <LoraStarter_Process+0x4ea>
                        LOG_WARN("[LoRa] Command %d failed after 3 attempts, skipping to next", ctx->cmd_index + 1);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	461a      	mov	r2, r3
 80009b6:	496d      	ldr	r1, [pc, #436]	@ (8000b6c <LoraStarter_Process+0x344>)
 80009b8:	2002      	movs	r0, #2
 80009ba:	f004 fb27 	bl	800500c <LOGGER_SendFormatted>
                        ctx->cmd_index++; // 다음 명령으로 건너뛰기
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	605a      	str	r2, [r3, #4]
                        ctx->error_count = 0; // 에러 카운터 리셋
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
                        ctx->state = LORA_STATE_SEND_CMD;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
            break;
 80009d4:	e19d      	b.n	8000d12 <LoraStarter_Process+0x4ea>
        case LORA_STATE_SEND_JOIN:
            LORA_LOG_JOIN_ATTEMPT();
 80009d6:	4966      	ldr	r1, [pc, #408]	@ (8000b70 <LoraStarter_Process+0x348>)
 80009d8:	2002      	movs	r0, #2
 80009da:	f004 fb17 	bl	800500c <LOGGER_SendFormatted>
            CommandSender_Send("AT+JOIN\r\n");
 80009de:	4865      	ldr	r0, [pc, #404]	@ (8000b74 <LoraStarter_Process+0x34c>)
 80009e0:	f7ff fe14 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_JOIN_OK;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2204      	movs	r2, #4
 80009e8:	701a      	strb	r2, [r3, #0]
            break;
 80009ea:	e197      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_WAIT_JOIN_OK:
            if (uart_rx && is_join_response_ok(uart_rx)) {
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 8191 	beq.w	8000d16 <LoraStarter_Process+0x4ee>
 80009f4:	6838      	ldr	r0, [r7, #0]
 80009f6:	f000 fa31 	bl	8000e5c <is_join_response_ok>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	f000 818a 	beq.w	8000d16 <LoraStarter_Process+0x4ee>
                LORA_LOG_JOIN_SUCCESS();
 8000a02:	495d      	ldr	r1, [pc, #372]	@ (8000b78 <LoraStarter_Process+0x350>)
 8000a04:	2002      	movs	r0, #2
 8000a06:	f004 fb01 	bl	800500c <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_SEND_PERIODIC;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2205      	movs	r2, #5
 8000a0e:	701a      	strb	r2, [r3, #0]
                ctx->send_count = 0;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
                ctx->error_count = 0; // JOIN 성공 시 에러 카운터 리셋
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
                ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->last_retry_time = 0; // 재시도 시간 리셋
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	@ 0x28
                LOG_WARN("[LoRa] 🚀 PERIODIC SEND STARTED with message: %s", ctx->send_message);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4952      	ldr	r1, [pc, #328]	@ (8000b7c <LoraStarter_Process+0x354>)
 8000a32:	2002      	movs	r0, #2
 8000a34:	f004 faea 	bl	800500c <LOGGER_SendFormatted>
            }
            break;
 8000a38:	e16d      	b.n	8000d16 <LoraStarter_Process+0x4ee>
        case LORA_STATE_SEND_PERIODIC:
            {
                char send_cmd[128];
                char hex_data[64];
                const char* message = (ctx->send_message != NULL) ? ctx->send_message : "Hello";
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d002      	beq.n	8000a48 <LoraStarter_Process+0x220>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	e000      	b.n	8000a4a <LoraStarter_Process+0x222>
 8000a48:	4b40      	ldr	r3, [pc, #256]	@ (8000b4c <LoraStarter_Process+0x324>)
 8000a4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                
                // 문자열을 헥사 문자열로 변환
                int len = strlen(message);
 8000a4e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8000a52:	f7ff fbe7 	bl	8000224 <strlen>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a62:	e014      	b.n	8000a8e <LoraStarter_Process+0x266>
                    sprintf(&hex_data[i*2], "%02X", (unsigned char)message[i]);
 8000a64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	f107 020c 	add.w	r2, r7, #12
 8000a6e:	18d0      	adds	r0, r2, r3
 8000a70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a74:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000a78:	4413      	add	r3, r2
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4940      	ldr	r1, [pc, #256]	@ (8000b80 <LoraStarter_Process+0x358>)
 8000a80:	f016 fa08 	bl	8016e94 <siprintf>
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000a84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a88:	3301      	adds	r3, #1
 8000a8a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a8e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000a92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a96:	429a      	cmp	r2, r3
 8000a98:	da03      	bge.n	8000aa2 <LoraStarter_Process+0x27a>
 8000a9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a9e:	2b1e      	cmp	r3, #30
 8000aa0:	dde0      	ble.n	8000a64 <LoraStarter_Process+0x23c>
                }
                hex_data[len*2] = '\0';
 8000aa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	33f0      	adds	r3, #240	@ 0xf0
 8000aaa:	443b      	add	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	f803 2ce4 	strb.w	r2, [r3, #-228]
                
                snprintf(send_cmd, sizeof(send_cmd), "AT+SEND=1:%s\r\n", hex_data);
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000aba:	4a32      	ldr	r2, [pc, #200]	@ (8000b84 <LoraStarter_Process+0x35c>)
 8000abc:	2180      	movs	r1, #128	@ 0x80
 8000abe:	f016 f9b3 	bl	8016e28 <sniprintf>
                LORA_LOG_SEND_ATTEMPT(message);
 8000ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000ac6:	4930      	ldr	r1, [pc, #192]	@ (8000b88 <LoraStarter_Process+0x360>)
 8000ac8:	2002      	movs	r0, #2
 8000aca:	f004 fa9f 	bl	800500c <LOGGER_SendFormatted>
                CommandSender_Send(send_cmd);
 8000ace:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fd9a 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_SEND_RESPONSE;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2206      	movs	r2, #6
 8000adc:	701a      	strb	r2, [r3, #0]
                ctx->send_count++;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	619a      	str	r2, [r3, #24]
                LOG_DEBUG("[LoRa] Send count: %d", ctx->send_count);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4927      	ldr	r1, [pc, #156]	@ (8000b8c <LoraStarter_Process+0x364>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f004 fa8b 	bl	800500c <LOGGER_SendFormatted>
            }
            break;
 8000af6:	e111      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_WAIT_SEND_RESPONSE:
            if (uart_rx) {
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 810d 	beq.w	8000d1a <LoraStarter_Process+0x4f2>
                ResponseType response_type = ResponseHandler_ParseSendResponse(uart_rx);
 8000b00:	6838      	ldr	r0, [r7, #0]
 8000b02:	f000 fa2f 	bl	8000f64 <ResponseHandler_ParseSendResponse>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
                switch(response_type) {
 8000b0c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d03f      	beq.n	8000b94 <LoraStarter_Process+0x36c>
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	f300 8086 	bgt.w	8000c26 <LoraStarter_Process+0x3fe>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <LoraStarter_Process+0x2fc>
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d04c      	beq.n	8000bbc <LoraStarter_Process+0x394>
 8000b22:	e080      	b.n	8000c26 <LoraStarter_Process+0x3fe>
                    case RESPONSE_OK:
                        LORA_LOG_SEND_SUCCESS();
 8000b24:	491a      	ldr	r1, [pc, #104]	@ (8000b90 <LoraStarter_Process+0x368>)
 8000b26:	2002      	movs	r0, #2
 8000b28:	f004 fa70 	bl	800500c <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2207      	movs	r2, #7
 8000b30:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000b40:	f004 f9f6 	bl	8004f30 <TIME_GetCurrentMs>
 8000b44:	4602      	mov	r2, r0
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	611a      	str	r2, [r3, #16]
                        break;
 8000b4a:	e072      	b.n	8000c32 <LoraStarter_Process+0x40a>
 8000b4c:	08018088 	.word	0x08018088
 8000b50:	08018090 	.word	0x08018090
 8000b54:	080180c8 	.word	0x080180c8
 8000b58:	080180ec 	.word	0x080180ec
 8000b5c:	08018014 	.word	0x08018014
 8000b60:	0801810c 	.word	0x0801810c
 8000b64:	08018124 	.word	0x08018124
 8000b68:	08018144 	.word	0x08018144
 8000b6c:	08018170 	.word	0x08018170
 8000b70:	080181ac 	.word	0x080181ac
 8000b74:	080181d0 	.word	0x080181d0
 8000b78:	080181dc 	.word	0x080181dc
 8000b7c:	080181f8 	.word	0x080181f8
 8000b80:	0801822c 	.word	0x0801822c
 8000b84:	08018234 	.word	0x08018234
 8000b88:	08018244 	.word	0x08018244
 8000b8c:	08018264 	.word	0x08018264
 8000b90:	0801827c 	.word	0x0801827c
                    case RESPONSE_TIMEOUT:
                        LOG_WARN("[LoRa] SEND timeout");
 8000b94:	496f      	ldr	r1, [pc, #444]	@ (8000d54 <LoraStarter_Process+0x52c>)
 8000b96:	2002      	movs	r0, #2
 8000b98:	f004 fa38 	bl	800500c <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bae:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000bb0:	f004 f9be 	bl	8004f30 <TIME_GetCurrentMs>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	611a      	str	r2, [r3, #16]
                        break;
 8000bba:	e03a      	b.n	8000c32 <LoraStarter_Process+0x40a>
                    case RESPONSE_ERROR:
                        LORA_LOG_SEND_FAILED("Network error");
 8000bbc:	4a66      	ldr	r2, [pc, #408]	@ (8000d58 <LoraStarter_Process+0x530>)
 8000bbe:	4967      	ldr	r1, [pc, #412]	@ (8000d5c <LoraStarter_Process+0x534>)
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	f004 fa23 	bl	800500c <LOGGER_SendFormatted>
                        ctx->error_count++;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a1b      	ldr	r3, [r3, #32]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	621a      	str	r2, [r3, #32]
                        LORA_LOG_ERROR_COUNT(ctx->error_count);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4962      	ldr	r1, [pc, #392]	@ (8000d60 <LoraStarter_Process+0x538>)
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f004 fa17 	bl	800500c <LOGGER_SendFormatted>
                        // 무제한 재시도 (max_retry_count가 0이거나 아직 제한에 도달하지 않은 경우)
                        if (ctx->max_retry_count == 0 || ctx->error_count < ctx->max_retry_count) {
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d005      	beq.n	8000bf2 <LoraStarter_Process+0x3ca>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a1a      	ldr	r2, [r3, #32]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	da11      	bge.n	8000c16 <LoraStarter_Process+0x3ee>
                            LORA_LOG_RETRY_ATTEMPT(ctx->error_count, ctx->max_retry_count);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a1a      	ldr	r2, [r3, #32]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <LoraStarter_Process+0x3dc>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c02:	e000      	b.n	8000c06 <LoraStarter_Process+0x3de>
 8000c04:	4b57      	ldr	r3, [pc, #348]	@ (8000d64 <LoraStarter_Process+0x53c>)
 8000c06:	4958      	ldr	r1, [pc, #352]	@ (8000d68 <LoraStarter_Process+0x540>)
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f004 f9ff 	bl	800500c <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_JOIN_RETRY; // JOIN 재시도
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2208      	movs	r2, #8
 8000c12:	701a      	strb	r2, [r3, #0]
                        } else {
                            LORA_LOG_MAX_RETRIES_REACHED();
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
                        }
                        break;
 8000c14:	e00d      	b.n	8000c32 <LoraStarter_Process+0x40a>
                            LORA_LOG_MAX_RETRIES_REACHED();
 8000c16:	4955      	ldr	r1, [pc, #340]	@ (8000d6c <LoraStarter_Process+0x544>)
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f004 f9f7 	bl	800500c <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	220a      	movs	r2, #10
 8000c22:	701a      	strb	r2, [r3, #0]
                        break;
 8000c24:	e005      	b.n	8000c32 <LoraStarter_Process+0x40a>
                    default:
                        // 알 수 없는 응답은 무시하고 계속 대기
                        LOG_DEBUG("[LoRa] Unknown response: %s", uart_rx);
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	4951      	ldr	r1, [pc, #324]	@ (8000d70 <LoraStarter_Process+0x548>)
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f004 f9ee 	bl	800500c <LOGGER_SendFormatted>
                        break;
 8000c30:	bf00      	nop
                }
            }
            break;
 8000c32:	e072      	b.n	8000d1a <LoraStarter_Process+0x4f2>
        case LORA_STATE_WAIT_SEND_INTERVAL:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c34:	f004 f97c 	bl	8004f30 <TIME_GetCurrentMs>
 8000c38:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
                uint32_t interval_ms = (ctx->send_interval_ms > 0) ? ctx->send_interval_ms : 30000; // 기본값 30초
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d002      	beq.n	8000c4a <LoraStarter_Process+0x422>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	e001      	b.n	8000c4e <LoraStarter_Process+0x426>
 8000c4a:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                
                if ((current_time - ctx->last_send_time) >= interval_ms) {
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d809      	bhi.n	8000c78 <LoraStarter_Process+0x450>
                    LOG_DEBUG("[LoRa] Send interval passed (%u ms), ready for next send", interval_ms);
 8000c64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c68:	4942      	ldr	r1, [pc, #264]	@ (8000d74 <LoraStarter_Process+0x54c>)
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f004 f9ce 	bl	800500c <LOGGER_SendFormatted>
                    ctx->state = LORA_STATE_SEND_PERIODIC;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2205      	movs	r2, #5
 8000c74:	701a      	strb	r2, [r3, #0]
                    // 아직 대기 시간이 남았으므로 상태 유지
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
                }
            }
            break;
 8000c76:	e051      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	691a      	ldr	r2, [r3, #16]
 8000c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c86:	4413      	add	r3, r2
 8000c88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
 8000c8c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000c90:	4939      	ldr	r1, [pc, #228]	@ (8000d78 <LoraStarter_Process+0x550>)
 8000c92:	2000      	movs	r0, #0
 8000c94:	f004 f9ba 	bl	800500c <LOGGER_SendFormatted>
            break;
 8000c98:	e040      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_JOIN_RETRY:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c9a:	f004 f949 	bl	8004f30 <TIME_GetCurrentMs>
 8000c9e:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
                
                if (ctx->last_retry_time == 0) {
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10b      	bne.n	8000cc2 <LoraStarter_Process+0x49a>
                    // 첫 재시도: 바로 SEND_JOIN
                    LOG_DEBUG("[LoRa] First JOIN retry");
 8000caa:	4934      	ldr	r1, [pc, #208]	@ (8000d7c <LoraStarter_Process+0x554>)
 8000cac:	2000      	movs	r0, #0
 8000cae:	f004 f9ad 	bl	800500c <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cb8:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	701a      	strb	r2, [r3, #0]
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
                             ctx->retry_delay_ms - (current_time - ctx->last_retry_time));
                    // 아무것도 하지 않음
                }
            }
            break;
 8000cc0:	e02c      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                } else if ((current_time - ctx->last_retry_time) >= ctx->retry_delay_ms) {
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cca:	1ad2      	subs	r2, r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d30e      	bcc.n	8000cf2 <LoraStarter_Process+0x4ca>
                    LOG_DEBUG("[LoRa] JOIN retry after %lu ms delay", ctx->retry_delay_ms);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4929      	ldr	r1, [pc, #164]	@ (8000d80 <LoraStarter_Process+0x558>)
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f004 f995 	bl	800500c <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000ce8:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2203      	movs	r2, #3
 8000cee:	701a      	strb	r2, [r3, #0]
            break;
 8000cf0:	e014      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cfe:	1acb      	subs	r3, r1, r3
 8000d00:	4413      	add	r3, r2
 8000d02:	461a      	mov	r2, r3
 8000d04:	491f      	ldr	r1, [pc, #124]	@ (8000d84 <LoraStarter_Process+0x55c>)
 8000d06:	2000      	movs	r0, #0
 8000d08:	f004 f980 	bl	800500c <LOGGER_SendFormatted>
            break;
 8000d0c:	e006      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_DONE:
        case LORA_STATE_ERROR:
        default:
            // 이미 완료된 상태이므로 아무것도 하지 않음
            break;
 8000d0e:	bf00      	nop
 8000d10:	e004      	b.n	8000d1c <LoraStarter_Process+0x4f4>
            break;
 8000d12:	bf00      	nop
 8000d14:	e002      	b.n	8000d1c <LoraStarter_Process+0x4f4>
            break;
 8000d16:	bf00      	nop
 8000d18:	e000      	b.n	8000d1c <LoraStarter_Process+0x4f4>
            break;
 8000d1a:	bf00      	nop
    }

    // 상태 변경 로깅
    if (old_state != ctx->state) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d012      	beq.n	8000d4e <LoraStarter_Process+0x526>
        LORA_LOG_STATE_CHANGE(get_state_name(old_state), get_state_name(ctx->state));
 8000d28:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fcdb 	bl	80006e8 <get_state_name>
 8000d32:	4604      	mov	r4, r0
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fcd5 	bl	80006e8 <get_state_name>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4622      	mov	r2, r4
 8000d42:	4911      	ldr	r1, [pc, #68]	@ (8000d88 <LoraStarter_Process+0x560>)
 8000d44:	2000      	movs	r0, #0
 8000d46:	f004 f961 	bl	800500c <LOGGER_SendFormatted>
 8000d4a:	e000      	b.n	8000d4e <LoraStarter_Process+0x526>
    if (ctx == NULL) return;
 8000d4c:	bf00      	nop
    }
}
 8000d4e:	37f4      	adds	r7, #244	@ 0xf4
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd90      	pop	{r4, r7, pc}
 8000d54:	08018298 	.word	0x08018298
 8000d58:	080182ac 	.word	0x080182ac
 8000d5c:	080182bc 	.word	0x080182bc
 8000d60:	080182d4 	.word	0x080182d4
 8000d64:	080182ec 	.word	0x080182ec
 8000d68:	080182f0 	.word	0x080182f0
 8000d6c:	0801830c 	.word	0x0801830c
 8000d70:	08018330 	.word	0x08018330
 8000d74:	0801834c 	.word	0x0801834c
 8000d78:	08018388 	.word	0x08018388
 8000d7c:	080183bc 	.word	0x080183bc
 8000d80:	080183d4 	.word	0x080183d4
 8000d84:	080183fc 	.word	0x080183fc
 8000d88:	08018430 	.word	0x08018430

08000d8c <is_response_ok>:
#include "ResponseHandler.h"
#include "logger.h"
#include <string.h>

bool is_response_ok(const char* response)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d105      	bne.n	8000da6 <is_response_ok+0x1a>
        LOG_DEBUG("[ResponseHandler] is_response_ok: NULL response");
 8000d9a:	4925      	ldr	r1, [pc, #148]	@ (8000e30 <is_response_ok+0xa4>)
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f004 f935 	bl	800500c <LOGGER_SendFormatted>
        return false;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e03f      	b.n	8000e26 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking OK response: '%s'", response);
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	4922      	ldr	r1, [pc, #136]	@ (8000e34 <is_response_ok+0xa8>)
 8000daa:	2000      	movs	r0, #0
 8000dac:	f004 f92e 	bl	800500c <LOGGER_SendFormatted>
    
    // OK 또는 OK\r\n, OK\n 등 허용
    if (strcmp(response, "OK") == 0) {
 8000db0:	4921      	ldr	r1, [pc, #132]	@ (8000e38 <is_response_ok+0xac>)
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff fa2c 	bl	8000210 <strcmp>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d105      	bne.n	8000dca <is_response_ok+0x3e>
        LOG_DEBUG("[ResponseHandler] OK response confirmed");
 8000dbe:	491f      	ldr	r1, [pc, #124]	@ (8000e3c <is_response_ok+0xb0>)
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f004 f923 	bl	800500c <LOGGER_SendFormatted>
        return true;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e02d      	b.n	8000e26 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\r\n") == 0) {
 8000dca:	491d      	ldr	r1, [pc, #116]	@ (8000e40 <is_response_ok+0xb4>)
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fa1f 	bl	8000210 <strcmp>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d105      	bne.n	8000de4 <is_response_ok+0x58>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with CRLF)");
 8000dd8:	491a      	ldr	r1, [pc, #104]	@ (8000e44 <is_response_ok+0xb8>)
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f004 f916 	bl	800500c <LOGGER_SendFormatted>
        return true;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e020      	b.n	8000e26 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\n") == 0) {
 8000de4:	4918      	ldr	r1, [pc, #96]	@ (8000e48 <is_response_ok+0xbc>)
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff fa12 	bl	8000210 <strcmp>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d105      	bne.n	8000dfe <is_response_ok+0x72>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with LF)");
 8000df2:	4916      	ldr	r1, [pc, #88]	@ (8000e4c <is_response_ok+0xc0>)
 8000df4:	2000      	movs	r0, #0
 8000df6:	f004 f909 	bl	800500c <LOGGER_SendFormatted>
        return true;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e013      	b.n	8000e26 <is_response_ok+0x9a>
    }
    
    // AT+VER 버전 응답도 성공으로 간주 (RUI_로 시작하는 응답)
    if (strstr(response, "RUI_") != NULL) {
 8000dfe:	4914      	ldr	r1, [pc, #80]	@ (8000e50 <is_response_ok+0xc4>)
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f016 f904 	bl	801700e <strstr>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d006      	beq.n	8000e1a <is_response_ok+0x8e>
        LOG_DEBUG("[ResponseHandler] Version response confirmed: %s", response);
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	4911      	ldr	r1, [pc, #68]	@ (8000e54 <is_response_ok+0xc8>)
 8000e10:	2000      	movs	r0, #0
 8000e12:	f004 f8fb 	bl	800500c <LOGGER_SendFormatted>
        return true;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e005      	b.n	8000e26 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Not an OK response: '%s'", response);
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	490e      	ldr	r1, [pc, #56]	@ (8000e58 <is_response_ok+0xcc>)
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f004 f8f4 	bl	800500c <LOGGER_SendFormatted>
    return false;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	08018450 	.word	0x08018450
 8000e34:	08018480 	.word	0x08018480
 8000e38:	080184b0 	.word	0x080184b0
 8000e3c:	080184b4 	.word	0x080184b4
 8000e40:	080184dc 	.word	0x080184dc
 8000e44:	080184e4 	.word	0x080184e4
 8000e48:	08018518 	.word	0x08018518
 8000e4c:	0801851c 	.word	0x0801851c
 8000e50:	08018550 	.word	0x08018550
 8000e54:	08018558 	.word	0x08018558
 8000e58:	0801858c 	.word	0x0801858c

08000e5c <is_join_response_ok>:

bool is_join_response_ok(const char* response)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000e68:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000e6c:	6018      	str	r0, [r3, #0]
    if (response == NULL) {
 8000e6e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000e72:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d105      	bne.n	8000e88 <is_join_response_ok+0x2c>
        LOG_DEBUG("[ResponseHandler] is_join_response_ok: NULL response");
 8000e7c:	4934      	ldr	r1, [pc, #208]	@ (8000f50 <is_join_response_ok+0xf4>)
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f004 f8c4 	bl	800500c <LOGGER_SendFormatted>
        return false;
 8000e84:	2300      	movs	r3, #0
 8000e86:	e05e      	b.n	8000f46 <is_join_response_ok+0xea>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking JOIN response: '%s'", response);
 8000e88:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000e8c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	4930      	ldr	r1, [pc, #192]	@ (8000f54 <is_join_response_ok+0xf8>)
 8000e94:	2000      	movs	r0, #0
 8000e96:	f004 f8b9 	bl	800500c <LOGGER_SendFormatted>
    
    // 개행 문자 제거하여 비교
    char clean_response[512];
    strncpy(clean_response, response, sizeof(clean_response) - 1);
 8000e9a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000e9e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000ea2:	f107 0008 	add.w	r0, r7, #8
 8000ea6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000eaa:	6819      	ldr	r1, [r3, #0]
 8000eac:	f016 f89c 	bl	8016fe8 <strncpy>
    clean_response[sizeof(clean_response) - 1] = '\0';
 8000eb0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000eb4:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    
    // 개행 문자 제거
    char* pos = clean_response;
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000ec6:	e013      	b.n	8000ef0 <is_join_response_ok+0x94>
        if (*pos == '\r' || *pos == '\n') {
 8000ec8:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b0d      	cmp	r3, #13
 8000ed0:	d004      	beq.n	8000edc <is_join_response_ok+0x80>
 8000ed2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b0a      	cmp	r3, #10
 8000eda:	d104      	bne.n	8000ee6 <is_join_response_ok+0x8a>
            *pos = '\0';
 8000edc:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
            break;
 8000ee4:	e009      	b.n	8000efa <is_join_response_ok+0x9e>
        }
        pos++;
 8000ee6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000eea:	3301      	adds	r3, #1
 8000eec:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000ef0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1e6      	bne.n	8000ec8 <is_join_response_ok+0x6c>
    }
    
    bool result = (strcmp(clean_response, "+EVT:JOINED") == 0);
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	4916      	ldr	r1, [pc, #88]	@ (8000f58 <is_join_response_ok+0xfc>)
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff f985 	bl	8000210 <strcmp>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	bf0c      	ite	eq
 8000f0c:	2301      	moveq	r3, #1
 8000f0e:	2300      	movne	r3, #0
 8000f10:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    
    if (result) {
 8000f14:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d009      	beq.n	8000f30 <is_join_response_ok+0xd4>
        LOG_WARN("[ResponseHandler] ✅ JOIN SUCCESS: %s", response);
 8000f1c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f20:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	490d      	ldr	r1, [pc, #52]	@ (8000f5c <is_join_response_ok+0x100>)
 8000f28:	2002      	movs	r0, #2
 8000f2a:	f004 f86f 	bl	800500c <LOGGER_SendFormatted>
 8000f2e:	e008      	b.n	8000f42 <is_join_response_ok+0xe6>
    } else {
        LOG_DEBUG("[ResponseHandler] Not a JOIN response: '%s'", response);
 8000f30:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f34:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	4909      	ldr	r1, [pc, #36]	@ (8000f60 <is_join_response_ok+0x104>)
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f004 f865 	bl	800500c <LOGGER_SendFormatted>
    }
    
    return result;
 8000f42:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	080185b8 	.word	0x080185b8
 8000f54:	080185f0 	.word	0x080185f0
 8000f58:	08018620 	.word	0x08018620
 8000f5c:	0801862c 	.word	0x0801862c
 8000f60:	08018654 	.word	0x08018654

08000f64 <ResponseHandler_ParseSendResponse>:

ResponseType ResponseHandler_ParseSendResponse(const char* response)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d105      	bne.n	8000f7e <ResponseHandler_ParseSendResponse+0x1a>
        LOG_DEBUG("[ResponseHandler] ParseSendResponse: NULL response");
 8000f72:	491e      	ldr	r1, [pc, #120]	@ (8000fec <ResponseHandler_ParseSendResponse+0x88>)
 8000f74:	2000      	movs	r0, #0
 8000f76:	f004 f849 	bl	800500c <LOGGER_SendFormatted>
        return RESPONSE_UNKNOWN;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e031      	b.n	8000fe2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing SEND response: '%s'", response);
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	491b      	ldr	r1, [pc, #108]	@ (8000ff0 <ResponseHandler_ParseSendResponse+0x8c>)
 8000f82:	2000      	movs	r0, #0
 8000f84:	f004 f842 	bl	800500c <LOGGER_SendFormatted>
    
    if (strstr(response, "+EVT:SEND_CONFIRMED_OK") != NULL) {
 8000f88:	491a      	ldr	r1, [pc, #104]	@ (8000ff4 <ResponseHandler_ParseSendResponse+0x90>)
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f016 f83f 	bl	801700e <strstr>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d005      	beq.n	8000fa2 <ResponseHandler_ParseSendResponse+0x3e>
        LOG_WARN("[ResponseHandler] ✅ SEND SUCCESS: CONFIRMED_OK");
 8000f96:	4918      	ldr	r1, [pc, #96]	@ (8000ff8 <ResponseHandler_ParseSendResponse+0x94>)
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f004 f837 	bl	800500c <LOGGER_SendFormatted>
        return RESPONSE_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e01f      	b.n	8000fe2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strstr(response, "+EVT:SEND_CONFIRMED_FAILED") != NULL) {
 8000fa2:	4916      	ldr	r1, [pc, #88]	@ (8000ffc <ResponseHandler_ParseSendResponse+0x98>)
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f016 f832 	bl	801700e <strstr>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d005      	beq.n	8000fbc <ResponseHandler_ParseSendResponse+0x58>
        LOG_WARN("[ResponseHandler] SEND response: CONFIRMED_FAILED");
 8000fb0:	4913      	ldr	r1, [pc, #76]	@ (8001000 <ResponseHandler_ParseSendResponse+0x9c>)
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f004 f82a 	bl	800500c <LOGGER_SendFormatted>
        return RESPONSE_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e012      	b.n	8000fe2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strcmp(response, "TIMEOUT") == 0) {
 8000fbc:	4911      	ldr	r1, [pc, #68]	@ (8001004 <ResponseHandler_ParseSendResponse+0xa0>)
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff f926 	bl	8000210 <strcmp>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d105      	bne.n	8000fd6 <ResponseHandler_ParseSendResponse+0x72>
        LOG_WARN("[ResponseHandler] SEND response: TIMEOUT");
 8000fca:	490f      	ldr	r1, [pc, #60]	@ (8001008 <ResponseHandler_ParseSendResponse+0xa4>)
 8000fcc:	2002      	movs	r0, #2
 8000fce:	f004 f81d 	bl	800500c <LOGGER_SendFormatted>
        return RESPONSE_TIMEOUT;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e005      	b.n	8000fe2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Unknown SEND response: '%s'", response);
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	490c      	ldr	r1, [pc, #48]	@ (800100c <ResponseHandler_ParseSendResponse+0xa8>)
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f004 f816 	bl	800500c <LOGGER_SendFormatted>
    return RESPONSE_UNKNOWN;
 8000fe0:	2303      	movs	r3, #3
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	08018680 	.word	0x08018680
 8000ff0:	080186b4 	.word	0x080186b4
 8000ff4:	080186e4 	.word	0x080186e4
 8000ff8:	080186fc 	.word	0x080186fc
 8000ffc:	08018730 	.word	0x08018730
 8001000:	0801874c 	.word	0x0801874c
 8001004:	08018780 	.word	0x08018780
 8001008:	08018788 	.word	0x08018788
 800100c:	080187b4 	.word	0x080187b4

08001010 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001016:	4b1b      	ldr	r3, [pc, #108]	@ (8001084 <SCB_CleanInvalidateDCache+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800101e:	f3bf 8f4f 	dsb	sy
}
 8001022:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001024:	4b17      	ldr	r3, [pc, #92]	@ (8001084 <SCB_CleanInvalidateDCache+0x74>)
 8001026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800102a:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	0b5b      	lsrs	r3, r3, #13
 8001030:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001034:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	08db      	lsrs	r3, r3, #3
 800103a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800103e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	015a      	lsls	r2, r3, #5
 8001044:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001048:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800104e:	490d      	ldr	r1, [pc, #52]	@ (8001084 <SCB_CleanInvalidateDCache+0x74>)
 8001050:	4313      	orrs	r3, r2
 8001052:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1e5a      	subs	r2, r3, #1
 800105a:	60ba      	str	r2, [r7, #8]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1ef      	bne.n	8001040 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	1e5a      	subs	r2, r3, #1
 8001064:	60fa      	str	r2, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1e5      	bne.n	8001036 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800106a:	f3bf 8f4f 	dsb	sy
}
 800106e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001070:	f3bf 8f6f 	isb	sy
}
 8001074:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <SDStorage_Init>:
static int _create_log_directory(void);
static int _generate_log_filename(char* filename, size_t max_len);
// static uint32_t _get_current_timestamp(void); - unused function removed

int SDStorage_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af02      	add	r7, sp, #8
#ifdef STM32F746xx
    // STM32 환경: FatFs 초기화 및 진단
    LOG_INFO("[SDStorage] Starting SD card initialization...");
 800108e:	49af      	ldr	r1, [pc, #700]	@ (800134c <SDStorage_Init+0x2c4>)
 8001090:	2001      	movs	r0, #1
 8001092:	f003 ffbb 	bl	800500c <LOGGER_SendFormatted>
    
    // 1. 하드웨어 상태 진단 및 TRANSFER 상태까지 대기
    extern SD_HandleTypeDef hsd1;
    HAL_SD_CardStateTypeDef card_state = HAL_SD_GetCardState(&hsd1);
 8001096:	48ae      	ldr	r0, [pc, #696]	@ (8001350 <SDStorage_Init+0x2c8>)
 8001098:	f00b fe72 	bl	800cd80 <HAL_SD_GetCardState>
 800109c:	6178      	str	r0, [r7, #20]
    LOG_INFO("[SDStorage] Initial SD card state: %d", card_state);
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	49ac      	ldr	r1, [pc, #688]	@ (8001354 <SDStorage_Init+0x2cc>)
 80010a2:	2001      	movs	r0, #1
 80010a4:	f003 ffb2 	bl	800500c <LOGGER_SendFormatted>
    
    // SD 카드가 TRANSFER 상태가 될 때까지 대기 (성공 프로젝트 패턴)
    int wait_count = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
    while (card_state != HAL_SD_CARD_TRANSFER && wait_count < 50) {  // 최대 5초 대기
 80010ac:	e010      	b.n	80010d0 <SDStorage_Init+0x48>
        LOG_INFO("[SDStorage] Waiting for SD card TRANSFER state... (attempt %d)", wait_count + 1);
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	3301      	adds	r3, #1
 80010b2:	461a      	mov	r2, r3
 80010b4:	49a8      	ldr	r1, [pc, #672]	@ (8001358 <SDStorage_Init+0x2d0>)
 80010b6:	2001      	movs	r0, #1
 80010b8:	f003 ffa8 	bl	800500c <LOGGER_SendFormatted>
        HAL_Delay(100);
 80010bc:	2064      	movs	r0, #100	@ 0x64
 80010be:	f004 fd7b 	bl	8005bb8 <HAL_Delay>
        card_state = HAL_SD_GetCardState(&hsd1);
 80010c2:	48a3      	ldr	r0, [pc, #652]	@ (8001350 <SDStorage_Init+0x2c8>)
 80010c4:	f00b fe5c 	bl	800cd80 <HAL_SD_GetCardState>
 80010c8:	6178      	str	r0, [r7, #20]
        wait_count++;
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	3301      	adds	r3, #1
 80010ce:	613b      	str	r3, [r7, #16]
    while (card_state != HAL_SD_CARD_TRANSFER && wait_count < 50) {  // 최대 5초 대기
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	d002      	beq.n	80010dc <SDStorage_Init+0x54>
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	2b31      	cmp	r3, #49	@ 0x31
 80010da:	dde8      	ble.n	80010ae <SDStorage_Init+0x26>
    }
    
    if (card_state == HAL_SD_CARD_TRANSFER) {
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	2b04      	cmp	r3, #4
 80010e0:	d128      	bne.n	8001134 <SDStorage_Init+0xac>
        LOG_INFO("[SDStorage] ✅ SD card reached TRANSFER state successfully");
 80010e2:	499e      	ldr	r1, [pc, #632]	@ (800135c <SDStorage_Init+0x2d4>)
 80010e4:	2001      	movs	r0, #1
 80010e6:	f003 ff91 	bl	800500c <LOGGER_SendFormatted>
        
        // SDMMC 에러 코드 상세 체크 (성공 프로젝트 패턴)
        if (hsd1.ErrorCode != HAL_SD_ERROR_NONE) {
 80010ea:	4b99      	ldr	r3, [pc, #612]	@ (8001350 <SDStorage_Init+0x2c8>)
 80010ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d02f      	beq.n	8001152 <SDStorage_Init+0xca>
            LOG_WARN("[SDStorage] SDMMC ErrorCode detected: 0x%08X", hsd1.ErrorCode);
 80010f2:	4b97      	ldr	r3, [pc, #604]	@ (8001350 <SDStorage_Init+0x2c8>)
 80010f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010f6:	461a      	mov	r2, r3
 80010f8:	4999      	ldr	r1, [pc, #612]	@ (8001360 <SDStorage_Init+0x2d8>)
 80010fa:	2002      	movs	r0, #2
 80010fc:	f003 ff86 	bl	800500c <LOGGER_SendFormatted>
            
            if (hsd1.ErrorCode & SDMMC_ERROR_TX_UNDERRUN) {
 8001100:	4b93      	ldr	r3, [pc, #588]	@ (8001350 <SDStorage_Init+0x2c8>)
 8001102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001104:	f003 0310 	and.w	r3, r3, #16
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <SDStorage_Init+0x8c>
                LOG_WARN("[SDStorage] TX_UNDERRUN detected - clock may be too fast");
 800110c:	4995      	ldr	r1, [pc, #596]	@ (8001364 <SDStorage_Init+0x2dc>)
 800110e:	2002      	movs	r0, #2
 8001110:	f003 ff7c 	bl	800500c <LOGGER_SendFormatted>
            }
            if (hsd1.ErrorCode & SDMMC_ERROR_DATA_CRC_FAIL) {
 8001114:	4b8e      	ldr	r3, [pc, #568]	@ (8001350 <SDStorage_Init+0x2c8>)
 8001116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <SDStorage_Init+0xa4>
                LOG_WARN("[SDStorage] CRC_FAIL detected - cache issue possible");
 8001120:	4991      	ldr	r1, [pc, #580]	@ (8001368 <SDStorage_Init+0x2e0>)
 8001122:	2002      	movs	r0, #2
 8001124:	f003 ff72 	bl	800500c <LOGGER_SendFormatted>
                SCB_CleanInvalidateDCache();
 8001128:	f7ff ff72 	bl	8001010 <SCB_CleanInvalidateDCache>
            }
            
            // 에러 코드 클리어
            hsd1.ErrorCode = HAL_SD_ERROR_NONE;
 800112c:	4b88      	ldr	r3, [pc, #544]	@ (8001350 <SDStorage_Init+0x2c8>)
 800112e:	2200      	movs	r2, #0
 8001130:	639a      	str	r2, [r3, #56]	@ 0x38
 8001132:	e00e      	b.n	8001152 <SDStorage_Init+0xca>
        }
    } else {
        LOG_ERROR("[SDStorage] ❌ SD card failed to reach TRANSFER state (state: %d)", card_state);
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	498d      	ldr	r1, [pc, #564]	@ (800136c <SDStorage_Init+0x2e4>)
 8001138:	2003      	movs	r0, #3
 800113a:	f003 ff67 	bl	800500c <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] SDMMC ErrorCode: 0x%08X", hsd1.ErrorCode);
 800113e:	4b84      	ldr	r3, [pc, #528]	@ (8001350 <SDStorage_Init+0x2c8>)
 8001140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001142:	461a      	mov	r2, r3
 8001144:	498a      	ldr	r1, [pc, #552]	@ (8001370 <SDStorage_Init+0x2e8>)
 8001146:	2003      	movs	r0, #3
 8001148:	f003 ff60 	bl	800500c <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	e199      	b.n	8001486 <SDStorage_Init+0x3fe>
    }
    
    DSTATUS disk_status = disk_initialize(0);
 8001152:	2000      	movs	r0, #0
 8001154:	f010 f9de 	bl	8011514 <disk_initialize>
 8001158:	4603      	mov	r3, r0
 800115a:	71fb      	strb	r3, [r7, #7]
    LOG_INFO("[SDStorage] disk_initialize result: 0x%02X", disk_status);
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	461a      	mov	r2, r3
 8001160:	4984      	ldr	r1, [pc, #528]	@ (8001374 <SDStorage_Init+0x2ec>)
 8001162:	2001      	movs	r0, #1
 8001164:	f003 ff52 	bl	800500c <LOGGER_SendFormatted>
    
    // disk_initialize 실패 시 조기 종료 (블로킹 방지)
    if (disk_status != 0) {
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00a      	beq.n	8001184 <SDStorage_Init+0xfc>
        LOG_ERROR("[SDStorage] disk_initialize failed - SD card not ready");
 800116e:	4982      	ldr	r1, [pc, #520]	@ (8001378 <SDStorage_Init+0x2f0>)
 8001170:	2003      	movs	r0, #3
 8001172:	f003 ff4b 	bl	800500c <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] Possible causes: write-protected, bad card, or BSP/HAL conflict");
 8001176:	4981      	ldr	r1, [pc, #516]	@ (800137c <SDStorage_Init+0x2f4>)
 8001178:	2003      	movs	r0, #3
 800117a:	f003 ff47 	bl	800500c <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	e180      	b.n	8001486 <SDStorage_Init+0x3fe>
    }
    
    // 2. 파일시스템 마운트 시도 (지연 마운트로 변경 - 블로킹 방지)
    LOG_INFO("[SDStorage] Using deferred mount (flag=0) to avoid blocking...");
 8001184:	497e      	ldr	r1, [pc, #504]	@ (8001380 <SDStorage_Init+0x2f8>)
 8001186:	2001      	movs	r0, #1
 8001188:	f003 ff40 	bl	800500c <LOGGER_SendFormatted>
    
    // f_mount 호출 전에 충분한 지연 (SD 카드 안정화)
    #ifdef STM32F746xx
    LOG_INFO("[SDStorage] Waiting for SD card stabilization (500ms)...");
 800118c:	497d      	ldr	r1, [pc, #500]	@ (8001384 <SDStorage_Init+0x2fc>)
 800118e:	2001      	movs	r0, #1
 8001190:	f003 ff3c 	bl	800500c <LOGGER_SendFormatted>
    HAL_Delay(500);
 8001194:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001198:	f004 fd0e 	bl	8005bb8 <HAL_Delay>
    #endif
    
    // f_mount 블로킹 문제 - 완전 우회 시도
    LOG_WARN("[SDStorage] f_mount consistently blocks despite all fixes");
 800119c:	497a      	ldr	r1, [pc, #488]	@ (8001388 <SDStorage_Init+0x300>)
 800119e:	2002      	movs	r0, #2
 80011a0:	f003 ff34 	bl	800500c <LOGGER_SendFormatted>
    LOG_INFO("[SDStorage] Attempting direct file operations without f_mount...");
 80011a4:	4979      	ldr	r1, [pc, #484]	@ (800138c <SDStorage_Init+0x304>)
 80011a6:	2001      	movs	r0, #1
 80011a8:	f003 ff30 	bl	800500c <LOGGER_SendFormatted>
    LOG_INFO("[SDStorage] Some FatFs implementations support auto-mount on first file access");
 80011ac:	4978      	ldr	r1, [pc, #480]	@ (8001390 <SDStorage_Init+0x308>)
 80011ae:	2001      	movs	r0, #1
 80011b0:	f003 ff2c 	bl	800500c <LOGGER_SendFormatted>
    
    // f_mount 여러 번 재시도 (성공 프로젝트 패턴)
    LOG_INFO("[SDStorage] Attempting f_mount with retry logic...");
 80011b4:	4977      	ldr	r1, [pc, #476]	@ (8001394 <SDStorage_Init+0x30c>)
 80011b6:	2001      	movs	r0, #1
 80011b8:	f003 ff28 	bl	800500c <LOGGER_SendFormatted>
    FRESULT mount_result = FR_DISK_ERR;  // 초기값
 80011bc:	2301      	movs	r3, #1
 80011be:	73fb      	strb	r3, [r7, #15]
    
    for (int retry = 0; retry < 3; retry++) {
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	e035      	b.n	8001232 <SDStorage_Init+0x1aa>
        LOG_INFO("[SDStorage] f_mount attempt %d/3...", retry + 1);
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	3301      	adds	r3, #1
 80011ca:	461a      	mov	r2, r3
 80011cc:	4972      	ldr	r1, [pc, #456]	@ (8001398 <SDStorage_Init+0x310>)
 80011ce:	2001      	movs	r0, #1
 80011d0:	f003 ff1c 	bl	800500c <LOGGER_SendFormatted>
        mount_result = f_mount(&SDFatFS, SDPath, 1);  // 즉시 마운트
 80011d4:	2201      	movs	r2, #1
 80011d6:	4971      	ldr	r1, [pc, #452]	@ (800139c <SDStorage_Init+0x314>)
 80011d8:	4871      	ldr	r0, [pc, #452]	@ (80013a0 <SDStorage_Init+0x318>)
 80011da:	f011 febd 	bl	8012f58 <f_mount>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]
        LOG_INFO("[SDStorage] f_mount result: %d", mount_result);
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	461a      	mov	r2, r3
 80011e6:	496f      	ldr	r1, [pc, #444]	@ (80013a4 <SDStorage_Init+0x31c>)
 80011e8:	2001      	movs	r0, #1
 80011ea:	f003 ff0f 	bl	800500c <LOGGER_SendFormatted>
        
        if (mount_result == FR_OK) {
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d107      	bne.n	8001204 <SDStorage_Init+0x17c>
            LOG_INFO("[SDStorage] ✅ f_mount successful on attempt %d", retry + 1);
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	3301      	adds	r3, #1
 80011f8:	461a      	mov	r2, r3
 80011fa:	496b      	ldr	r1, [pc, #428]	@ (80013a8 <SDStorage_Init+0x320>)
 80011fc:	2001      	movs	r0, #1
 80011fe:	f003 ff05 	bl	800500c <LOGGER_SendFormatted>
            break;
 8001202:	e019      	b.n	8001238 <SDStorage_Init+0x1b0>
        } else {
            LOG_WARN("[SDStorage] f_mount failed on attempt %d, retrying in 1000ms...", retry + 1);
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	3301      	adds	r3, #1
 8001208:	461a      	mov	r2, r3
 800120a:	4968      	ldr	r1, [pc, #416]	@ (80013ac <SDStorage_Init+0x324>)
 800120c:	2002      	movs	r0, #2
 800120e:	f003 fefd 	bl	800500c <LOGGER_SendFormatted>
            if (retry < 2) {  // 마지막 시도가 아니면 대기
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	2b01      	cmp	r3, #1
 8001216:	dc09      	bgt.n	800122c <SDStorage_Init+0x1a4>
                // STM32F7 D-Cache 클리어 (성공 프로젝트 패턴)
                LOG_INFO("[SDStorage] Clearing D-Cache for STM32F7 compatibility...");
 8001218:	4965      	ldr	r1, [pc, #404]	@ (80013b0 <SDStorage_Init+0x328>)
 800121a:	2001      	movs	r0, #1
 800121c:	f003 fef6 	bl	800500c <LOGGER_SendFormatted>
                SCB_CleanInvalidateDCache();
 8001220:	f7ff fef6 	bl	8001010 <SCB_CleanInvalidateDCache>
                HAL_Delay(1000);
 8001224:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001228:	f004 fcc6 	bl	8005bb8 <HAL_Delay>
    for (int retry = 0; retry < 3; retry++) {
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	3301      	adds	r3, #1
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	2b02      	cmp	r3, #2
 8001236:	ddc6      	ble.n	80011c6 <SDStorage_Init+0x13e>
            }
        }
    }
    
    // 즉시 마운트 성공 시 쓰기 준비 완료
    if (mount_result == FR_OK) {
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d103      	bne.n	8001246 <SDStorage_Init+0x1be>
        LOG_INFO("[SDStorage] Immediate mount successful - SD ready for write operations");
 800123e:	495d      	ldr	r1, [pc, #372]	@ (80013b4 <SDStorage_Init+0x32c>)
 8001240:	2001      	movs	r0, #1
 8001242:	f003 fee3 	bl	800500c <LOGGER_SendFormatted>
    }
    
    if (mount_result != FR_OK) {
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 80f8 	beq.w	800143e <SDStorage_Init+0x3b6>
        LOG_WARN("[SDStorage] f_mount failed with result: %d", mount_result);
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	461a      	mov	r2, r3
 8001252:	4959      	ldr	r1, [pc, #356]	@ (80013b8 <SDStorage_Init+0x330>)
 8001254:	2002      	movs	r0, #2
 8001256:	f003 fed9 	bl	800500c <LOGGER_SendFormatted>
        
        // SD 카드가 이미 포맷되어 있다면 f_mkfs 시도하지 않고 다른 접근법 사용
        if (mount_result == FR_DISK_ERR) {
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d12f      	bne.n	80012c0 <SDStorage_Init+0x238>
            LOG_WARN("[SDStorage] FR_DISK_ERR detected - SD card may be formatted but incompatible");
 8001260:	4956      	ldr	r1, [pc, #344]	@ (80013bc <SDStorage_Init+0x334>)
 8001262:	2002      	movs	r0, #2
 8001264:	f003 fed2 	bl	800500c <LOGGER_SendFormatted>
            LOG_INFO("[SDStorage] Skipping f_mkfs since SD card is already FAT32 formatted");
 8001268:	4955      	ldr	r1, [pc, #340]	@ (80013c0 <SDStorage_Init+0x338>)
 800126a:	2001      	movs	r0, #1
 800126c:	f003 fece 	bl	800500c <LOGGER_SendFormatted>
            LOG_INFO("[SDStorage] Trying alternative mount approach...");
 8001270:	4954      	ldr	r1, [pc, #336]	@ (80013c4 <SDStorage_Init+0x33c>)
 8001272:	2001      	movs	r0, #1
 8001274:	f003 feca 	bl	800500c <LOGGER_SendFormatted>
            
            // 다른 마운트 방식 시도 (지연 마운트)
            LOG_INFO("[SDStorage] Attempting deferred mount (flag=0)...");
 8001278:	4953      	ldr	r1, [pc, #332]	@ (80013c8 <SDStorage_Init+0x340>)
 800127a:	2001      	movs	r0, #1
 800127c:	f003 fec6 	bl	800500c <LOGGER_SendFormatted>
            mount_result = f_mount(&SDFatFS, SDPath, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	4946      	ldr	r1, [pc, #280]	@ (800139c <SDStorage_Init+0x314>)
 8001284:	4846      	ldr	r0, [pc, #280]	@ (80013a0 <SDStorage_Init+0x318>)
 8001286:	f011 fe67 	bl	8012f58 <f_mount>
 800128a:	4603      	mov	r3, r0
 800128c:	73fb      	strb	r3, [r7, #15]
            LOG_INFO("[SDStorage] Deferred mount result: %d", mount_result);
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	461a      	mov	r2, r3
 8001292:	494e      	ldr	r1, [pc, #312]	@ (80013cc <SDStorage_Init+0x344>)
 8001294:	2001      	movs	r0, #1
 8001296:	f003 feb9 	bl	800500c <LOGGER_SendFormatted>
            
            if (mount_result == FR_OK) {
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d104      	bne.n	80012aa <SDStorage_Init+0x222>
                LOG_INFO("[SDStorage] Deferred mount successful!");
 80012a0:	494b      	ldr	r1, [pc, #300]	@ (80013d0 <SDStorage_Init+0x348>)
 80012a2:	2001      	movs	r0, #1
 80012a4:	f003 feb2 	bl	800500c <LOGGER_SendFormatted>
 80012a8:	e0c9      	b.n	800143e <SDStorage_Init+0x3b6>
            } else {
                LOG_ERROR("[SDStorage] Both immediate and deferred mount failed");
 80012aa:	494a      	ldr	r1, [pc, #296]	@ (80013d4 <SDStorage_Init+0x34c>)
 80012ac:	2003      	movs	r0, #3
 80012ae:	f003 fead 	bl	800500c <LOGGER_SendFormatted>
                LOG_ERROR("[SDStorage] SD card may have hardware compatibility issues");
 80012b2:	4949      	ldr	r1, [pc, #292]	@ (80013d8 <SDStorage_Init+0x350>)
 80012b4:	2003      	movs	r0, #3
 80012b6:	f003 fea9 	bl	800500c <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
 80012be:	e0e2      	b.n	8001486 <SDStorage_Init+0x3fe>
            }
        }
        else if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d003      	beq.n	80012ce <SDStorage_Init+0x246>
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	2b0d      	cmp	r3, #13
 80012ca:	f040 80ae 	bne.w	800142a <SDStorage_Init+0x3a2>
            // 작업 버퍼 할당 (전역 또는 스택)
            static BYTE work[_MAX_SS];
            
            // 실제 f_mkfs 시도
            LOG_INFO("[SDStorage] Attempting to create filesystem with f_mkfs...");
 80012ce:	4943      	ldr	r1, [pc, #268]	@ (80013dc <SDStorage_Init+0x354>)
 80012d0:	2001      	movs	r0, #1
 80012d2:	f003 fe9b 	bl	800500c <LOGGER_SendFormatted>
            FRESULT mkfs_result = f_mkfs(SDPath, FM_ANY, 0, work, sizeof(work));
 80012d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	4b40      	ldr	r3, [pc, #256]	@ (80013e0 <SDStorage_Init+0x358>)
 80012de:	2200      	movs	r2, #0
 80012e0:	2107      	movs	r1, #7
 80012e2:	482e      	ldr	r0, [pc, #184]	@ (800139c <SDStorage_Init+0x314>)
 80012e4:	f012 fb5c 	bl	80139a0 <f_mkfs>
 80012e8:	4603      	mov	r3, r0
 80012ea:	71bb      	strb	r3, [r7, #6]
            LOG_INFO("[SDStorage] f_mkfs(FM_ANY) result: %d", mkfs_result);
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	461a      	mov	r2, r3
 80012f0:	493c      	ldr	r1, [pc, #240]	@ (80013e4 <SDStorage_Init+0x35c>)
 80012f2:	2001      	movs	r0, #1
 80012f4:	f003 fe8a 	bl	800500c <LOGGER_SendFormatted>
            
            if (mkfs_result != FR_OK) {
 80012f8:	79bb      	ldrb	r3, [r7, #6]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d07c      	beq.n	80013f8 <SDStorage_Init+0x370>
                // FAT32로 다시 시도
                LOG_INFO("[SDStorage] Retrying with explicit FAT32 format...");
 80012fe:	493a      	ldr	r1, [pc, #232]	@ (80013e8 <SDStorage_Init+0x360>)
 8001300:	2001      	movs	r0, #1
 8001302:	f003 fe83 	bl	800500c <LOGGER_SendFormatted>
                mkfs_result = f_mkfs(SDPath, FM_FAT32, 4096, work, sizeof(work));
 8001306:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	4b34      	ldr	r3, [pc, #208]	@ (80013e0 <SDStorage_Init+0x358>)
 800130e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001312:	2102      	movs	r1, #2
 8001314:	4821      	ldr	r0, [pc, #132]	@ (800139c <SDStorage_Init+0x314>)
 8001316:	f012 fb43 	bl	80139a0 <f_mkfs>
 800131a:	4603      	mov	r3, r0
 800131c:	71bb      	strb	r3, [r7, #6]
                LOG_INFO("[SDStorage] f_mkfs(FM_FAT32) result: %d", mkfs_result);
 800131e:	79bb      	ldrb	r3, [r7, #6]
 8001320:	461a      	mov	r2, r3
 8001322:	4932      	ldr	r1, [pc, #200]	@ (80013ec <SDStorage_Init+0x364>)
 8001324:	2001      	movs	r0, #1
 8001326:	f003 fe71 	bl	800500c <LOGGER_SendFormatted>
                
                if (mkfs_result != FR_OK) {
 800132a:	79bb      	ldrb	r3, [r7, #6]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d063      	beq.n	80013f8 <SDStorage_Init+0x370>
                    LOG_ERROR("[SDStorage] File system creation failed: %d", mkfs_result);
 8001330:	79bb      	ldrb	r3, [r7, #6]
 8001332:	461a      	mov	r2, r3
 8001334:	492e      	ldr	r1, [pc, #184]	@ (80013f0 <SDStorage_Init+0x368>)
 8001336:	2003      	movs	r0, #3
 8001338:	f003 fe68 	bl	800500c <LOGGER_SendFormatted>
                    LOG_ERROR("[SDStorage] Possible SD card hardware issue - try different card");
 800133c:	492d      	ldr	r1, [pc, #180]	@ (80013f4 <SDStorage_Init+0x36c>)
 800133e:	2003      	movs	r0, #3
 8001340:	f003 fe64 	bl	800500c <LOGGER_SendFormatted>
                    return SDSTORAGE_ERROR;
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	e09d      	b.n	8001486 <SDStorage_Init+0x3fe>
 800134a:	bf00      	nop
 800134c:	080187e4 	.word	0x080187e4
 8001350:	20000e70 	.word	0x20000e70
 8001354:	08018814 	.word	0x08018814
 8001358:	0801883c 	.word	0x0801883c
 800135c:	0801887c 	.word	0x0801887c
 8001360:	080188b8 	.word	0x080188b8
 8001364:	080188e8 	.word	0x080188e8
 8001368:	08018924 	.word	0x08018924
 800136c:	0801895c 	.word	0x0801895c
 8001370:	080189a0 	.word	0x080189a0
 8001374:	080189c4 	.word	0x080189c4
 8001378:	080189f0 	.word	0x080189f0
 800137c:	08018a28 	.word	0x08018a28
 8001380:	08018a74 	.word	0x08018a74
 8001384:	08018ab4 	.word	0x08018ab4
 8001388:	08018af0 	.word	0x08018af0
 800138c:	08018b2c 	.word	0x08018b2c
 8001390:	08018b70 	.word	0x08018b70
 8001394:	08018bc0 	.word	0x08018bc0
 8001398:	08018bf4 	.word	0x08018bf4
 800139c:	200017ac 	.word	0x200017ac
 80013a0:	200017b0 	.word	0x200017b0
 80013a4:	08018c18 	.word	0x08018c18
 80013a8:	08018c38 	.word	0x08018c38
 80013ac:	08018c6c 	.word	0x08018c6c
 80013b0:	08018cac 	.word	0x08018cac
 80013b4:	08018ce8 	.word	0x08018ce8
 80013b8:	08018d30 	.word	0x08018d30
 80013bc:	08018d5c 	.word	0x08018d5c
 80013c0:	08018dac 	.word	0x08018dac
 80013c4:	08018df4 	.word	0x08018df4
 80013c8:	08018e28 	.word	0x08018e28
 80013cc:	08018e5c 	.word	0x08018e5c
 80013d0:	08018e84 	.word	0x08018e84
 80013d4:	08018eac 	.word	0x08018eac
 80013d8:	08018ee4 	.word	0x08018ee4
 80013dc:	08018f20 	.word	0x08018f20
 80013e0:	2000056c 	.word	0x2000056c
 80013e4:	08018f5c 	.word	0x08018f5c
 80013e8:	08018f84 	.word	0x08018f84
 80013ec:	08018fb8 	.word	0x08018fb8
 80013f0:	08018fe0 	.word	0x08018fe0
 80013f4:	0801900c 	.word	0x0801900c
                }
            }
            
            // 파일시스템 생성 후 재마운트 시도
            mount_result = f_mount(&SDFatFS, SDPath, 1);
 80013f8:	2201      	movs	r2, #1
 80013fa:	4925      	ldr	r1, [pc, #148]	@ (8001490 <SDStorage_Init+0x408>)
 80013fc:	4825      	ldr	r0, [pc, #148]	@ (8001494 <SDStorage_Init+0x40c>)
 80013fe:	f011 fdab 	bl	8012f58 <f_mount>
 8001402:	4603      	mov	r3, r0
 8001404:	73fb      	strb	r3, [r7, #15]
            LOG_INFO("[SDStorage] Re-mount after mkfs result: %d", mount_result);
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	461a      	mov	r2, r3
 800140a:	4923      	ldr	r1, [pc, #140]	@ (8001498 <SDStorage_Init+0x410>)
 800140c:	2001      	movs	r0, #1
 800140e:	f003 fdfd 	bl	800500c <LOGGER_SendFormatted>
            
            if (mount_result != FR_OK) {
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d011      	beq.n	800143c <SDStorage_Init+0x3b4>
                LOG_ERROR("[SDStorage] Re-mount failed after mkfs: %d", mount_result);
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	461a      	mov	r2, r3
 800141c:	491f      	ldr	r1, [pc, #124]	@ (800149c <SDStorage_Init+0x414>)
 800141e:	2003      	movs	r0, #3
 8001420:	f003 fdf4 	bl	800500c <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 8001424:	f04f 33ff 	mov.w	r3, #4294967295
 8001428:	e02d      	b.n	8001486 <SDStorage_Init+0x3fe>
            }
        } else {
            LOG_ERROR("[SDStorage] Mount failed with unrecoverable error: %d", mount_result);
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	461a      	mov	r2, r3
 800142e:	491c      	ldr	r1, [pc, #112]	@ (80014a0 <SDStorage_Init+0x418>)
 8001430:	2003      	movs	r0, #3
 8001432:	f003 fdeb 	bl	800500c <LOGGER_SendFormatted>
            return SDSTORAGE_ERROR;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	e024      	b.n	8001486 <SDStorage_Init+0x3fe>
        else if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 800143c:	bf00      	nop
        }
    }
    
    LOG_INFO("[SDStorage] File system mount successful");
 800143e:	4919      	ldr	r1, [pc, #100]	@ (80014a4 <SDStorage_Init+0x41c>)
 8001440:	2001      	movs	r0, #1
 8001442:	f003 fde3 	bl	800500c <LOGGER_SendFormatted>
#endif

    // FatFs 마운트 성공 확인됨
    
    // 디렉토리 생성 시도
    LOG_INFO("[SDStorage] Creating log directory...");
 8001446:	4918      	ldr	r1, [pc, #96]	@ (80014a8 <SDStorage_Init+0x420>)
 8001448:	2001      	movs	r0, #1
 800144a:	f003 fddf 	bl	800500c <LOGGER_SendFormatted>
    int dir_result = _create_log_directory();
 800144e:	f000 f9f5 	bl	800183c <_create_log_directory>
 8001452:	6038      	str	r0, [r7, #0]
    g_directory_available = (dir_result == SDSTORAGE_OK);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	bf0c      	ite	eq
 800145a:	2301      	moveq	r3, #1
 800145c:	2300      	movne	r3, #0
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <SDStorage_Init+0x424>)
 8001462:	701a      	strb	r2, [r3, #0]
    
    g_sd_ready = true;
 8001464:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <SDStorage_Init+0x428>)
 8001466:	2201      	movs	r2, #1
 8001468:	701a      	strb	r2, [r3, #0]
    g_current_log_size = 0;
 800146a:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <SDStorage_Init+0x42c>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
    memset(g_current_log_file, 0, sizeof(g_current_log_file));
 8001470:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001474:	2100      	movs	r1, #0
 8001476:	4810      	ldr	r0, [pc, #64]	@ (80014b8 <SDStorage_Init+0x430>)
 8001478:	f015 fdae 	bl	8016fd8 <memset>
    
    LOG_INFO("[SDStorage] Initialization completed successfully");
 800147c:	490f      	ldr	r1, [pc, #60]	@ (80014bc <SDStorage_Init+0x434>)
 800147e:	2001      	movs	r0, #1
 8001480:	f003 fdc4 	bl	800500c <LOGGER_SendFormatted>
    return SDSTORAGE_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200017ac 	.word	0x200017ac
 8001494:	200017b0 	.word	0x200017b0
 8001498:	08019050 	.word	0x08019050
 800149c:	0801907c 	.word	0x0801907c
 80014a0:	080190a8 	.word	0x080190a8
 80014a4:	080190e0 	.word	0x080190e0
 80014a8:	0801910c 	.word	0x0801910c
 80014ac:	20000334 	.word	0x20000334
 80014b0:	2000022c 	.word	0x2000022c
 80014b4:	20000330 	.word	0x20000330
 80014b8:	20000230 	.word	0x20000230
 80014bc:	08019134 	.word	0x08019134

080014c0 <SDStorage_WriteLog>:

int SDStorage_WriteLog(const void* data, size_t size)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
    if (!g_sd_ready) {
 80014ca:	4b6e      	ldr	r3, [pc, #440]	@ (8001684 <SDStorage_WriteLog+0x1c4>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	f083 0301 	eor.w	r3, r3, #1
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <SDStorage_WriteLog+0x1e>
        return SDSTORAGE_NOT_READY;
 80014d8:	f06f 0301 	mvn.w	r3, #1
 80014dc:	e0cd      	b.n	800167a <SDStorage_WriteLog+0x1ba>
    }
    
    if (data == NULL || size == 0) {
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <SDStorage_WriteLog+0x2a>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d102      	bne.n	80014f0 <SDStorage_WriteLog+0x30>
        return SDSTORAGE_INVALID_PARAM;
 80014ea:	f06f 0304 	mvn.w	r3, #4
 80014ee:	e0c4      	b.n	800167a <SDStorage_WriteLog+0x1ba>
    }
    
    // 새 로그 파일이 필요한 경우 생성
    if (strlen(g_current_log_file) == 0 || 
 80014f0:	4b65      	ldr	r3, [pc, #404]	@ (8001688 <SDStorage_WriteLog+0x1c8>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d006      	beq.n	8001506 <SDStorage_WriteLog+0x46>
        g_current_log_size + size > SDSTORAGE_MAX_LOG_SIZE) {
 80014f8:	4b64      	ldr	r3, [pc, #400]	@ (800168c <SDStorage_WriteLog+0x1cc>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	4413      	add	r3, r2
    if (strlen(g_current_log_file) == 0 || 
 8001500:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001504:	d907      	bls.n	8001516 <SDStorage_WriteLog+0x56>
        if (SDStorage_CreateNewLogFile() != SDSTORAGE_OK) {
 8001506:	f000 f8e7 	bl	80016d8 <SDStorage_CreateNewLogFile>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <SDStorage_WriteLog+0x56>
            return SDSTORAGE_FILE_ERROR;
 8001510:	f06f 0302 	mvn.w	r3, #2
 8001514:	e0b1      	b.n	800167a <SDStorage_WriteLog+0x1ba>
        }
    }

#ifdef STM32F746xx
    // STM32 환경: FatFs 파일 쓰기
    if (!g_file_open) {
 8001516:	4b5e      	ldr	r3, [pc, #376]	@ (8001690 <SDStorage_WriteLog+0x1d0>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	f083 0301 	eor.w	r3, r3, #1
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	d031      	beq.n	8001588 <SDStorage_WriteLog+0xc8>
        // 파일이 닫혀있는 경우에만 새로 열기 (보통 첫 번째 호출)
        if (strlen(g_current_log_file) == 0) {
 8001524:	4b58      	ldr	r3, [pc, #352]	@ (8001688 <SDStorage_WriteLog+0x1c8>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10e      	bne.n	800154a <SDStorage_WriteLog+0x8a>
            if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 800152c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001530:	4855      	ldr	r0, [pc, #340]	@ (8001688 <SDStorage_WriteLog+0x1c8>)
 8001532:	f000 f9e5 	bl	8001900 <_generate_log_filename>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <SDStorage_WriteLog+0x8a>
                LOG_ERROR("[SDStorage] Failed to generate log filename");
 800153c:	4955      	ldr	r1, [pc, #340]	@ (8001694 <SDStorage_WriteLog+0x1d4>)
 800153e:	2003      	movs	r0, #3
 8001540:	f003 fd64 	bl	800500c <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 8001544:	f04f 33ff 	mov.w	r3, #4294967295
 8001548:	e097      	b.n	800167a <SDStorage_WriteLog+0x1ba>
            }
        }
        
        // FatFs f_open 시도 (파일이 없으면 생성, 있으면 덮어쓰기)
        FRESULT open_result = f_open(&g_log_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 800154a:	220a      	movs	r2, #10
 800154c:	494e      	ldr	r1, [pc, #312]	@ (8001688 <SDStorage_WriteLog+0x1c8>)
 800154e:	4852      	ldr	r0, [pc, #328]	@ (8001698 <SDStorage_WriteLog+0x1d8>)
 8001550:	f011 fd48 	bl	8012fe4 <f_open>
 8001554:	4603      	mov	r3, r0
 8001556:	75fb      	strb	r3, [r7, #23]
        
        if (open_result == FR_OK) {
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d108      	bne.n	8001570 <SDStorage_WriteLog+0xb0>
            g_file_open = true;
 800155e:	4b4c      	ldr	r3, [pc, #304]	@ (8001690 <SDStorage_WriteLog+0x1d0>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
            LOG_DEBUG("[SDStorage] Log file opened for continuous logging: %s", g_current_log_file);
 8001564:	4a48      	ldr	r2, [pc, #288]	@ (8001688 <SDStorage_WriteLog+0x1c8>)
 8001566:	494d      	ldr	r1, [pc, #308]	@ (800169c <SDStorage_WriteLog+0x1dc>)
 8001568:	2000      	movs	r0, #0
 800156a:	f003 fd4f 	bl	800500c <LOGGER_SendFormatted>
 800156e:	e00b      	b.n	8001588 <SDStorage_WriteLog+0xc8>
        } else {
            LOG_ERROR("[SDStorage] f_open failed: %d - SD logging disabled", open_result);
 8001570:	7dfb      	ldrb	r3, [r7, #23]
 8001572:	461a      	mov	r2, r3
 8001574:	494a      	ldr	r1, [pc, #296]	@ (80016a0 <SDStorage_WriteLog+0x1e0>)
 8001576:	2003      	movs	r0, #3
 8001578:	f003 fd48 	bl	800500c <LOGGER_SendFormatted>
            g_file_open = false;
 800157c:	4b44      	ldr	r3, [pc, #272]	@ (8001690 <SDStorage_WriteLog+0x1d0>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
            return SDSTORAGE_FILE_ERROR;
 8001582:	f06f 0302 	mvn.w	r3, #2
 8001586:	e078      	b.n	800167a <SDStorage_WriteLog+0x1ba>
        }
    }
    
    if (g_file_open) {
 8001588:	4b41      	ldr	r3, [pc, #260]	@ (8001690 <SDStorage_WriteLog+0x1d0>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d04d      	beq.n	800162c <SDStorage_WriteLog+0x16c>
        // FatFs 파일 쓰기 (Windows 호환) - 줄바꿈 자동 추가
        UINT bytes_written;
        
        // 원본 데이터 쓰기
        FRESULT write_result = f_write(&g_log_file, data, size, &bytes_written);
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	483f      	ldr	r0, [pc, #252]	@ (8001698 <SDStorage_WriteLog+0x1d8>)
 800159a:	f011 fedd 	bl	8013358 <f_write>
 800159e:	4603      	mov	r3, r0
 80015a0:	75bb      	strb	r3, [r7, #22]
        
        if (write_result == FR_OK && bytes_written == size) {
 80015a2:	7dbb      	ldrb	r3, [r7, #22]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d127      	bne.n	80015f8 <SDStorage_WriteLog+0x138>
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d123      	bne.n	80015f8 <SDStorage_WriteLog+0x138>
            // 줄바꿈 추가 (Windows 호환을 위해 \r\n 사용)
            UINT newline_written;
            FRESULT newline_result = f_write(&g_log_file, "\r\n", 2, &newline_written);
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	2202      	movs	r2, #2
 80015b6:	493b      	ldr	r1, [pc, #236]	@ (80016a4 <SDStorage_WriteLog+0x1e4>)
 80015b8:	4837      	ldr	r0, [pc, #220]	@ (8001698 <SDStorage_WriteLog+0x1d8>)
 80015ba:	f011 fecd 	bl	8013358 <f_write>
 80015be:	4603      	mov	r3, r0
 80015c0:	757b      	strb	r3, [r7, #21]
            
            if (newline_result == FR_OK) {
 80015c2:	7d7b      	ldrb	r3, [r7, #21]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d109      	bne.n	80015dc <SDStorage_WriteLog+0x11c>
                g_current_log_size += bytes_written + newline_written;
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	441a      	add	r2, r3
 80015ce:	4b2f      	ldr	r3, [pc, #188]	@ (800168c <SDStorage_WriteLog+0x1cc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a2d      	ldr	r2, [pc, #180]	@ (800168c <SDStorage_WriteLog+0x1cc>)
 80015d6:	6013      	str	r3, [r2, #0]
                return SDSTORAGE_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	e04e      	b.n	800167a <SDStorage_WriteLog+0x1ba>
            } else {
                LOG_WARN("[SDStorage] Newline write failed: %d", newline_result);
 80015dc:	7d7b      	ldrb	r3, [r7, #21]
 80015de:	461a      	mov	r2, r3
 80015e0:	4931      	ldr	r1, [pc, #196]	@ (80016a8 <SDStorage_WriteLog+0x1e8>)
 80015e2:	2002      	movs	r0, #2
 80015e4:	f003 fd12 	bl	800500c <LOGGER_SendFormatted>
                g_current_log_size += bytes_written;  // 원본 데이터는 성공했으므로 카운트
 80015e8:	4b28      	ldr	r3, [pc, #160]	@ (800168c <SDStorage_WriteLog+0x1cc>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a26      	ldr	r2, [pc, #152]	@ (800168c <SDStorage_WriteLog+0x1cc>)
 80015f2:	6013      	str	r3, [r2, #0]
                return SDSTORAGE_OK;  // 원본 데이터 쓰기는 성공했으므로 OK 반환
 80015f4:	2300      	movs	r3, #0
 80015f6:	e040      	b.n	800167a <SDStorage_WriteLog+0x1ba>
            }
        } else {
            if (write_result != FR_OK) {
 80015f8:	7dbb      	ldrb	r3, [r7, #22]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d009      	beq.n	8001612 <SDStorage_WriteLog+0x152>
                LOG_ERROR("[SDStorage] f_write failed: %d - SD logging disabled", write_result);
 80015fe:	7dbb      	ldrb	r3, [r7, #22]
 8001600:	461a      	mov	r2, r3
 8001602:	492a      	ldr	r1, [pc, #168]	@ (80016ac <SDStorage_WriteLog+0x1ec>)
 8001604:	2003      	movs	r0, #3
 8001606:	f003 fd01 	bl	800500c <LOGGER_SendFormatted>
                g_file_open = false;
 800160a:	4b21      	ldr	r3, [pc, #132]	@ (8001690 <SDStorage_WriteLog+0x1d0>)
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
 8001610:	e00c      	b.n	800162c <SDStorage_WriteLog+0x16c>
            } else if (bytes_written != size) {
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d008      	beq.n	800162c <SDStorage_WriteLog+0x16c>
                LOG_WARN("[SDStorage] Partial write: %d/%d bytes", bytes_written, size);
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	4924      	ldr	r1, [pc, #144]	@ (80016b0 <SDStorage_WriteLog+0x1f0>)
 8001620:	2002      	movs	r0, #2
 8001622:	f003 fcf3 	bl	800500c <LOGGER_SendFormatted>
                return SDSTORAGE_DISK_FULL;
 8001626:	f06f 0303 	mvn.w	r3, #3
 800162a:	e026      	b.n	800167a <SDStorage_WriteLog+0x1ba>
            }
        }
    }
    
    if (!g_file_open) {
 800162c:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <SDStorage_WriteLog+0x1d0>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	f083 0301 	eor.w	r3, r3, #1
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00a      	beq.n	8001650 <SDStorage_WriteLog+0x190>
        // FatFs 파일이 열리지 않은 경우 - 에러 반환
        LOG_ERROR("[SDStorage] File not open and FatFs f_open failed");
 800163a:	491e      	ldr	r1, [pc, #120]	@ (80016b4 <SDStorage_WriteLog+0x1f4>)
 800163c:	2003      	movs	r0, #3
 800163e:	f003 fce5 	bl	800500c <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] Cannot write log data - SD logging unavailable");
 8001642:	491d      	ldr	r1, [pc, #116]	@ (80016b8 <SDStorage_WriteLog+0x1f8>)
 8001644:	2003      	movs	r0, #3
 8001646:	f003 fce1 	bl	800500c <LOGGER_SendFormatted>
        return SDSTORAGE_FILE_ERROR;
 800164a:	f06f 0302 	mvn.w	r3, #2
 800164e:	e014      	b.n	800167a <SDStorage_WriteLog+0x1ba>
    }
    
    // 즉시 플러시하여 데이터 안정성 확보
    FRESULT sync_result = f_sync(&g_log_file);
 8001650:	4811      	ldr	r0, [pc, #68]	@ (8001698 <SDStorage_WriteLog+0x1d8>)
 8001652:	f011 fff6 	bl	8013642 <f_sync>
 8001656:	4603      	mov	r3, r0
 8001658:	753b      	strb	r3, [r7, #20]
    if (sync_result != FR_OK) {
 800165a:	7d3b      	ldrb	r3, [r7, #20]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <SDStorage_WriteLog+0x1ac>
        LOG_WARN("[SDStorage] f_sync failed: %d", sync_result);
 8001660:	7d3b      	ldrb	r3, [r7, #20]
 8001662:	461a      	mov	r2, r3
 8001664:	4915      	ldr	r1, [pc, #84]	@ (80016bc <SDStorage_WriteLog+0x1fc>)
 8001666:	2002      	movs	r0, #2
 8001668:	f003 fcd0 	bl	800500c <LOGGER_SendFormatted>
#else
    // PC/테스트 환경: 파일 I/O 시뮬레이션 (항상 성공)
    // 실제 파일 쓰기 없이 성공으로 처리
#endif

    g_current_log_size += size;
 800166c:	4b07      	ldr	r3, [pc, #28]	@ (800168c <SDStorage_WriteLog+0x1cc>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	4413      	add	r3, r2
 8001674:	4a05      	ldr	r2, [pc, #20]	@ (800168c <SDStorage_WriteLog+0x1cc>)
 8001676:	6013      	str	r3, [r2, #0]
    return SDSTORAGE_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000022c 	.word	0x2000022c
 8001688:	20000230 	.word	0x20000230
 800168c:	20000330 	.word	0x20000330
 8001690:	20000568 	.word	0x20000568
 8001694:	08019168 	.word	0x08019168
 8001698:	20000338 	.word	0x20000338
 800169c:	08019194 	.word	0x08019194
 80016a0:	080191cc 	.word	0x080191cc
 80016a4:	08019200 	.word	0x08019200
 80016a8:	08019204 	.word	0x08019204
 80016ac:	0801922c 	.word	0x0801922c
 80016b0:	08019264 	.word	0x08019264
 80016b4:	0801928c 	.word	0x0801928c
 80016b8:	080192c0 	.word	0x080192c0
 80016bc:	080192fc 	.word	0x080192fc

080016c0 <SDStorage_IsReady>:

bool SDStorage_IsReady(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
    return g_sd_ready;
 80016c4:	4b03      	ldr	r3, [pc, #12]	@ (80016d4 <SDStorage_IsReady+0x14>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	2000022c 	.word	0x2000022c

080016d8 <SDStorage_CreateNewLogFile>:
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
    }
}

int SDStorage_CreateNewLogFile(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
    if (!g_sd_ready) {
 80016de:	4b46      	ldr	r3, [pc, #280]	@ (80017f8 <SDStorage_CreateNewLogFile+0x120>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	f083 0301 	eor.w	r3, r3, #1
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d002      	beq.n	80016f2 <SDStorage_CreateNewLogFile+0x1a>
        return SDSTORAGE_NOT_READY;
 80016ec:	f06f 0301 	mvn.w	r3, #1
 80016f0:	e07e      	b.n	80017f0 <SDStorage_CreateNewLogFile+0x118>
    }
    
    // 이전 파일이 열려있다면 닫기
#ifdef STM32F746xx
    if (g_file_open) {
 80016f2:	4b42      	ldr	r3, [pc, #264]	@ (80017fc <SDStorage_CreateNewLogFile+0x124>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d005      	beq.n	8001706 <SDStorage_CreateNewLogFile+0x2e>
        f_close(&g_log_file);
 80016fa:	4841      	ldr	r0, [pc, #260]	@ (8001800 <SDStorage_CreateNewLogFile+0x128>)
 80016fc:	f012 f81f 	bl	801373e <f_close>
        g_file_open = false;
 8001700:	4b3e      	ldr	r3, [pc, #248]	@ (80017fc <SDStorage_CreateNewLogFile+0x124>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
        g_log_file = NULL;
    }
#endif
    
    // 새 파일명 생성
    if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 8001706:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800170a:	483e      	ldr	r0, [pc, #248]	@ (8001804 <SDStorage_CreateNewLogFile+0x12c>)
 800170c:	f000 f8f8 	bl	8001900 <_generate_log_filename>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <SDStorage_CreateNewLogFile+0x44>
        return SDSTORAGE_ERROR;
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
 800171a:	e069      	b.n	80017f0 <SDStorage_CreateNewLogFile+0x118>
    }
    
    // 파일 생성 확인 (SD 쓰기 문제로 인한 블로킹 방지)
#ifdef STM32F746xx
    LOG_INFO("[SDStorage] Attempting to create log file: %s", g_current_log_file);
 800171c:	4a39      	ldr	r2, [pc, #228]	@ (8001804 <SDStorage_CreateNewLogFile+0x12c>)
 800171e:	493a      	ldr	r1, [pc, #232]	@ (8001808 <SDStorage_CreateNewLogFile+0x130>)
 8001720:	2001      	movs	r0, #1
 8001722:	f003 fc73 	bl	800500c <LOGGER_SendFormatted>
    
    // FatFs 파일 객체 초기화
    memset(&g_log_file, 0, sizeof(g_log_file));
 8001726:	f44f 720c 	mov.w	r2, #560	@ 0x230
 800172a:	2100      	movs	r1, #0
 800172c:	4834      	ldr	r0, [pc, #208]	@ (8001800 <SDStorage_CreateNewLogFile+0x128>)
 800172e:	f015 fc53 	bl	8016fd8 <memset>
    
    // SD 카드 상태 재확인
    DSTATUS current_disk_status = disk_status(0);
 8001732:	2000      	movs	r0, #0
 8001734:	f00f fed4 	bl	80114e0 <disk_status>
 8001738:	4603      	mov	r3, r0
 800173a:	71fb      	strb	r3, [r7, #7]
    LOG_INFO("[SDStorage] Current disk status: 0x%02X", current_disk_status);
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	461a      	mov	r2, r3
 8001740:	4932      	ldr	r1, [pc, #200]	@ (800180c <SDStorage_CreateNewLogFile+0x134>)
 8001742:	2001      	movs	r0, #1
 8001744:	f003 fc62 	bl	800500c <LOGGER_SendFormatted>
    
    // 실제 파일 생성 시도 (에러 상세 분석)
    LOG_INFO("[SDStorage] Attempting to create new log file: %s", g_current_log_file);
 8001748:	4a2e      	ldr	r2, [pc, #184]	@ (8001804 <SDStorage_CreateNewLogFile+0x12c>)
 800174a:	4931      	ldr	r1, [pc, #196]	@ (8001810 <SDStorage_CreateNewLogFile+0x138>)
 800174c:	2001      	movs	r0, #1
 800174e:	f003 fc5d 	bl	800500c <LOGGER_SendFormatted>
    FRESULT open_result = f_open(&g_log_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 8001752:	220a      	movs	r2, #10
 8001754:	492b      	ldr	r1, [pc, #172]	@ (8001804 <SDStorage_CreateNewLogFile+0x12c>)
 8001756:	482a      	ldr	r0, [pc, #168]	@ (8001800 <SDStorage_CreateNewLogFile+0x128>)
 8001758:	f011 fc44 	bl	8012fe4 <f_open>
 800175c:	4603      	mov	r3, r0
 800175e:	71bb      	strb	r3, [r7, #6]
    LOG_INFO("[SDStorage] f_open result: %d", open_result);
 8001760:	79bb      	ldrb	r3, [r7, #6]
 8001762:	461a      	mov	r2, r3
 8001764:	492b      	ldr	r1, [pc, #172]	@ (8001814 <SDStorage_CreateNewLogFile+0x13c>)
 8001766:	2001      	movs	r0, #1
 8001768:	f003 fc50 	bl	800500c <LOGGER_SendFormatted>
    
    if (open_result != FR_OK) {
 800176c:	79bb      	ldrb	r3, [r7, #6]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d02f      	beq.n	80017d2 <SDStorage_CreateNewLogFile+0xfa>
        LOG_ERROR("[SDStorage] f_open failed: %d", open_result);
 8001772:	79bb      	ldrb	r3, [r7, #6]
 8001774:	461a      	mov	r2, r3
 8001776:	4928      	ldr	r1, [pc, #160]	@ (8001818 <SDStorage_CreateNewLogFile+0x140>)
 8001778:	2003      	movs	r0, #3
 800177a:	f003 fc47 	bl	800500c <LOGGER_SendFormatted>
        
        // 상세 에러 분석
        switch (open_result) {
 800177e:	79bb      	ldrb	r3, [r7, #6]
 8001780:	2b10      	cmp	r3, #16
 8001782:	d006      	beq.n	8001792 <SDStorage_CreateNewLogFile+0xba>
 8001784:	2b10      	cmp	r3, #16
 8001786:	dc13      	bgt.n	80017b0 <SDStorage_CreateNewLogFile+0xd8>
 8001788:	2b03      	cmp	r3, #3
 800178a:	d00c      	beq.n	80017a6 <SDStorage_CreateNewLogFile+0xce>
 800178c:	2b09      	cmp	r3, #9
 800178e:	d005      	beq.n	800179c <SDStorage_CreateNewLogFile+0xc4>
 8001790:	e00e      	b.n	80017b0 <SDStorage_CreateNewLogFile+0xd8>
            case 16: // FR_INVALID_OBJECT
                LOG_ERROR("[SDStorage] FR_INVALID_OBJECT - File object initialization issue");
 8001792:	4922      	ldr	r1, [pc, #136]	@ (800181c <SDStorage_CreateNewLogFile+0x144>)
 8001794:	2003      	movs	r0, #3
 8001796:	f003 fc39 	bl	800500c <LOGGER_SendFormatted>
                break;
 800179a:	e010      	b.n	80017be <SDStorage_CreateNewLogFile+0xe6>
            case 9: // FR_WRITE_PROTECTED  
                LOG_ERROR("[SDStorage] FR_WRITE_PROTECTED - SD card is write protected");
 800179c:	4920      	ldr	r1, [pc, #128]	@ (8001820 <SDStorage_CreateNewLogFile+0x148>)
 800179e:	2003      	movs	r0, #3
 80017a0:	f003 fc34 	bl	800500c <LOGGER_SendFormatted>
                break;
 80017a4:	e00b      	b.n	80017be <SDStorage_CreateNewLogFile+0xe6>
            case 3: // FR_NOT_READY
                LOG_ERROR("[SDStorage] FR_NOT_READY - Disk not ready");
 80017a6:	491f      	ldr	r1, [pc, #124]	@ (8001824 <SDStorage_CreateNewLogFile+0x14c>)
 80017a8:	2003      	movs	r0, #3
 80017aa:	f003 fc2f 	bl	800500c <LOGGER_SendFormatted>
                break;
 80017ae:	e006      	b.n	80017be <SDStorage_CreateNewLogFile+0xe6>
            default:
                LOG_ERROR("[SDStorage] Unknown f_open error: %d", open_result);
 80017b0:	79bb      	ldrb	r3, [r7, #6]
 80017b2:	461a      	mov	r2, r3
 80017b4:	491c      	ldr	r1, [pc, #112]	@ (8001828 <SDStorage_CreateNewLogFile+0x150>)
 80017b6:	2003      	movs	r0, #3
 80017b8:	f003 fc28 	bl	800500c <LOGGER_SendFormatted>
                break;
 80017bc:	bf00      	nop
        }
        
        LOG_WARN("[SDStorage] Disabling SD logging due to file creation failure");
 80017be:	491b      	ldr	r1, [pc, #108]	@ (800182c <SDStorage_CreateNewLogFile+0x154>)
 80017c0:	2002      	movs	r0, #2
 80017c2:	f003 fc23 	bl	800500c <LOGGER_SendFormatted>
        g_sd_ready = false;  // SD 로깅 비활성화
 80017c6:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <SDStorage_CreateNewLogFile+0x120>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
        return SDSTORAGE_FILE_ERROR;
 80017cc:	f06f 0302 	mvn.w	r3, #2
 80017d0:	e00e      	b.n	80017f0 <SDStorage_CreateNewLogFile+0x118>
    }
    
    LOG_INFO("[SDStorage] File created successfully, keeping open for logging");
 80017d2:	4917      	ldr	r1, [pc, #92]	@ (8001830 <SDStorage_CreateNewLogFile+0x158>)
 80017d4:	2001      	movs	r0, #1
 80017d6:	f003 fc19 	bl	800500c <LOGGER_SendFormatted>
    g_file_open = true;  // 파일을 열어둔 상태로 유지
 80017da:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <SDStorage_CreateNewLogFile+0x124>)
 80017dc:	2201      	movs	r2, #1
 80017de:	701a      	strb	r2, [r3, #0]
    LOG_INFO("[SDStorage] File ready for immediate logging");
 80017e0:	4914      	ldr	r1, [pc, #80]	@ (8001834 <SDStorage_CreateNewLogFile+0x15c>)
 80017e2:	2001      	movs	r0, #1
 80017e4:	f003 fc12 	bl	800500c <LOGGER_SendFormatted>
#else
    // PC/테스트 환경: 파일 생성 시뮬레이션 (항상 성공)
    LOG_INFO("[SDStorage] Test environment - file creation simulated");
#endif
    
    g_current_log_size = 0;
 80017e8:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <SDStorage_CreateNewLogFile+0x160>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
    return SDSTORAGE_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	2000022c 	.word	0x2000022c
 80017fc:	20000568 	.word	0x20000568
 8001800:	20000338 	.word	0x20000338
 8001804:	20000230 	.word	0x20000230
 8001808:	0801931c 	.word	0x0801931c
 800180c:	0801934c 	.word	0x0801934c
 8001810:	08019374 	.word	0x08019374
 8001814:	080193a8 	.word	0x080193a8
 8001818:	080193c8 	.word	0x080193c8
 800181c:	080193e8 	.word	0x080193e8
 8001820:	0801942c 	.word	0x0801942c
 8001824:	08019468 	.word	0x08019468
 8001828:	08019494 	.word	0x08019494
 800182c:	080194bc 	.word	0x080194bc
 8001830:	080194fc 	.word	0x080194fc
 8001834:	0801953c 	.word	0x0801953c
 8001838:	20000330 	.word	0x20000330

0800183c <_create_log_directory>:
    return g_current_log_size;
}

// 내부 함수 구현
static int _create_log_directory(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    // FatFs가 이미 정상 동작하므로 HAL 테스트 불필요
    
    // f_mkdir 전에 볼륨 상태 재확인 (에러 6 방지)
    LOG_INFO("[SDStorage] Verifying volume state before f_mkdir...");
 8001842:	4924      	ldr	r1, [pc, #144]	@ (80018d4 <_create_log_directory+0x98>)
 8001844:	2001      	movs	r0, #1
 8001846:	f003 fbe1 	bl	800500c <LOGGER_SendFormatted>
    
    // 볼륨 재마운트 시도 (상태 안정화)
    FRESULT remount_result = f_mount(&SDFatFS, SDPath, 1);
 800184a:	2201      	movs	r2, #1
 800184c:	4922      	ldr	r1, [pc, #136]	@ (80018d8 <_create_log_directory+0x9c>)
 800184e:	4823      	ldr	r0, [pc, #140]	@ (80018dc <_create_log_directory+0xa0>)
 8001850:	f011 fb82 	bl	8012f58 <f_mount>
 8001854:	4603      	mov	r3, r0
 8001856:	71bb      	strb	r3, [r7, #6]
    LOG_INFO("[SDStorage] Volume re-mount result: %d", remount_result);
 8001858:	79bb      	ldrb	r3, [r7, #6]
 800185a:	461a      	mov	r2, r3
 800185c:	4920      	ldr	r1, [pc, #128]	@ (80018e0 <_create_log_directory+0xa4>)
 800185e:	2001      	movs	r0, #1
 8001860:	f003 fbd4 	bl	800500c <LOGGER_SendFormatted>
    
    FRESULT mkdir_result = FR_NOT_ENABLED;  // 초기값 설정
 8001864:	230c      	movs	r3, #12
 8001866:	71fb      	strb	r3, [r7, #7]
    
    if (remount_result == FR_OK) {
 8001868:	79bb      	ldrb	r3, [r7, #6]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10f      	bne.n	800188e <_create_log_directory+0x52>
        LOG_INFO("[SDStorage] Volume ready - attempting f_mkdir...");
 800186e:	491d      	ldr	r1, [pc, #116]	@ (80018e4 <_create_log_directory+0xa8>)
 8001870:	2001      	movs	r0, #1
 8001872:	f003 fbcb 	bl	800500c <LOGGER_SendFormatted>
        mkdir_result = f_mkdir("lora_logs");
 8001876:	481c      	ldr	r0, [pc, #112]	@ (80018e8 <_create_log_directory+0xac>)
 8001878:	f011 ff8b 	bl	8013792 <f_mkdir>
 800187c:	4603      	mov	r3, r0
 800187e:	71fb      	strb	r3, [r7, #7]
        LOG_INFO("[SDStorage] f_mkdir result: %d", mkdir_result);
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	461a      	mov	r2, r3
 8001884:	4919      	ldr	r1, [pc, #100]	@ (80018ec <_create_log_directory+0xb0>)
 8001886:	2001      	movs	r0, #1
 8001888:	f003 fbc0 	bl	800500c <LOGGER_SendFormatted>
 800188c:	e005      	b.n	800189a <_create_log_directory+0x5e>
    } else {
        LOG_ERROR("[SDStorage] Volume re-mount failed: %d", remount_result);
 800188e:	79bb      	ldrb	r3, [r7, #6]
 8001890:	461a      	mov	r2, r3
 8001892:	4917      	ldr	r1, [pc, #92]	@ (80018f0 <_create_log_directory+0xb4>)
 8001894:	2003      	movs	r0, #3
 8001896:	f003 fbb9 	bl	800500c <LOGGER_SendFormatted>
    }
    
    // FR_EXIST(9)는 이미 존재함을 의미하므로 성공으로 처리
    if (mkdir_result == FR_OK || mkdir_result == FR_EXIST) {
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <_create_log_directory+0x6a>
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	d105      	bne.n	80018b2 <_create_log_directory+0x76>
        LOG_INFO("[SDStorage] Directory ready (created or already exists)");
 80018a6:	4913      	ldr	r1, [pc, #76]	@ (80018f4 <_create_log_directory+0xb8>)
 80018a8:	2001      	movs	r0, #1
 80018aa:	f003 fbaf 	bl	800500c <LOGGER_SendFormatted>
        return SDSTORAGE_OK;  // 디렉토리 성공
 80018ae:	2300      	movs	r3, #0
 80018b0:	e00b      	b.n	80018ca <_create_log_directory+0x8e>
    } else {
        LOG_ERROR("[SDStorage] f_mkdir failed: %d - FatFs level problem", mkdir_result);
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	461a      	mov	r2, r3
 80018b6:	4910      	ldr	r1, [pc, #64]	@ (80018f8 <_create_log_directory+0xbc>)
 80018b8:	2003      	movs	r0, #3
 80018ba:	f003 fba7 	bl	800500c <LOGGER_SendFormatted>
        LOG_INFO("[SDStorage] Will try direct file creation without directory");
 80018be:	490f      	ldr	r1, [pc, #60]	@ (80018fc <_create_log_directory+0xc0>)
 80018c0:	2001      	movs	r0, #1
 80018c2:	f003 fba3 	bl	800500c <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;  // 디렉토리 실패
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
#else
    // PC: mkdir 시뮬레이션 (테스트에서는 성공으로 가정)
    LOG_INFO("[SDStorage] Test environment - directory creation simulated");
    return SDSTORAGE_OK;
#endif
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	0801956c 	.word	0x0801956c
 80018d8:	200017ac 	.word	0x200017ac
 80018dc:	200017b0 	.word	0x200017b0
 80018e0:	080195a4 	.word	0x080195a4
 80018e4:	080195cc 	.word	0x080195cc
 80018e8:	08019600 	.word	0x08019600
 80018ec:	0801960c 	.word	0x0801960c
 80018f0:	0801962c 	.word	0x0801962c
 80018f4:	08019654 	.word	0x08019654
 80018f8:	0801968c 	.word	0x0801968c
 80018fc:	080196c4 	.word	0x080196c4

08001900 <_generate_log_filename>:

static int _generate_log_filename(char* filename, size_t max_len)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	f5ad 7d52 	sub.w	sp, sp, #840	@ 0x348
 8001906:	af00      	add	r7, sp, #0
 8001908:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 800190c:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001910:	6018      	str	r0, [r3, #0]
 8001912:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001916:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 800191a:	6019      	str	r1, [r3, #0]
    // 8.3 형식 파일명 생성 - 기존 파일 확인하여 중복 방지
    static int file_counter = 0;  // 0부터 시작하여 첫 번째 호출에서 1로 설정
    
    // 첫 번째 호출에서만 기존 파일 확인
    if (file_counter == 0) {
 800191c:	4b48      	ldr	r3, [pc, #288]	@ (8001a40 <_generate_log_filename+0x140>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d14a      	bne.n	80019ba <_generate_log_filename+0xba>
        file_counter = 1;
 8001924:	4b46      	ldr	r3, [pc, #280]	@ (8001a40 <_generate_log_filename+0x140>)
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]
        
        // 기존 파일들 확인하여 다음 번호 찾기
        for (int i = 1; i <= 9999; i++) {
 800192a:	2301      	movs	r3, #1
 800192c:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8001930:	e034      	b.n	800199c <_generate_log_filename+0x9c>
            char test_filename[256];
            FIL test_file;
            
            if (g_directory_available) {
 8001932:	4b44      	ldr	r3, [pc, #272]	@ (8001a44 <_generate_log_filename+0x144>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d009      	beq.n	800194e <_generate_log_filename+0x4e>
                snprintf(test_filename, sizeof(test_filename), "lora_logs/LORA%04d.TXT", i);
 800193a:	f107 000c 	add.w	r0, r7, #12
 800193e:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8001942:	4a41      	ldr	r2, [pc, #260]	@ (8001a48 <_generate_log_filename+0x148>)
 8001944:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001948:	f015 fa6e 	bl	8016e28 <sniprintf>
 800194c:	e008      	b.n	8001960 <_generate_log_filename+0x60>
            } else {
                snprintf(test_filename, sizeof(test_filename), "LORA%04d.TXT", i);
 800194e:	f107 000c 	add.w	r0, r7, #12
 8001952:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8001956:	4a3d      	ldr	r2, [pc, #244]	@ (8001a4c <_generate_log_filename+0x14c>)
 8001958:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800195c:	f015 fa64 	bl	8016e28 <sniprintf>
            }
            
            // 파일이 존재하는지 확인
            FRESULT test_result = f_open(&test_file, test_filename, FA_READ);
 8001960:	f107 010c 	add.w	r1, r7, #12
 8001964:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001968:	2201      	movs	r2, #1
 800196a:	4618      	mov	r0, r3
 800196c:	f011 fb3a 	bl	8012fe4 <f_open>
 8001970:	4603      	mov	r3, r0
 8001972:	f887 333f 	strb.w	r3, [r7, #831]	@ 0x33f
            if (test_result == FR_OK) {
 8001976:	f897 333f 	ldrb.w	r3, [r7, #831]	@ 0x33f
 800197a:	2b00      	cmp	r3, #0
 800197c:	d115      	bne.n	80019aa <_generate_log_filename+0xaa>
                f_close(&test_file);
 800197e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001982:	4618      	mov	r0, r3
 8001984:	f011 fedb 	bl	801373e <f_close>
                file_counter = i + 1;  // 다음 번호로 설정
 8001988:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 800198c:	3301      	adds	r3, #1
 800198e:	4a2c      	ldr	r2, [pc, #176]	@ (8001a40 <_generate_log_filename+0x140>)
 8001990:	6013      	str	r3, [r2, #0]
        for (int i = 1; i <= 9999; i++) {
 8001992:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8001996:	3301      	adds	r3, #1
 8001998:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 800199c:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80019a0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80019a4:	4293      	cmp	r3, r2
 80019a6:	ddc4      	ble.n	8001932 <_generate_log_filename+0x32>
 80019a8:	e000      	b.n	80019ac <_generate_log_filename+0xac>
            } else {
                break;  // 파일이 없으면 현재 번호 사용
 80019aa:	bf00      	nop
            }
        }
        
        LOG_DEBUG("[SDStorage] Auto-detected next log file number: %d", file_counter);
 80019ac:	4b24      	ldr	r3, [pc, #144]	@ (8001a40 <_generate_log_filename+0x140>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4927      	ldr	r1, [pc, #156]	@ (8001a50 <_generate_log_filename+0x150>)
 80019b4:	2000      	movs	r0, #0
 80019b6:	f003 fb29 	bl	800500c <LOGGER_SendFormatted>
    }
    
    // 디렉토리 사용 가능 여부에 따라 경로 결정
    int result;
    if (g_directory_available) {
 80019ba:	4b22      	ldr	r3, [pc, #136]	@ (8001a44 <_generate_log_filename+0x144>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d011      	beq.n	80019e6 <_generate_log_filename+0xe6>
        // lora_logs 디렉토리에 파일 생성 (TXT 형식)
        result = snprintf(filename, max_len, "lora_logs/LORA%04d.TXT", file_counter);
 80019c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a40 <_generate_log_filename+0x140>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f507 7252 	add.w	r2, r7, #840	@ 0x348
 80019ca:	f5a2 7152 	sub.w	r1, r2, #840	@ 0x348
 80019ce:	f507 7252 	add.w	r2, r7, #840	@ 0x348
 80019d2:	f5a2 7051 	sub.w	r0, r2, #836	@ 0x344
 80019d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a48 <_generate_log_filename+0x148>)
 80019d8:	6809      	ldr	r1, [r1, #0]
 80019da:	6800      	ldr	r0, [r0, #0]
 80019dc:	f015 fa24 	bl	8016e28 <sniprintf>
 80019e0:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 80019e4:	e010      	b.n	8001a08 <_generate_log_filename+0x108>
    } else {
        // 루트 디렉토리에 파일 생성 (TXT 형식)
        result = snprintf(filename, max_len, "LORA%04d.TXT", file_counter);
 80019e6:	4b16      	ldr	r3, [pc, #88]	@ (8001a40 <_generate_log_filename+0x140>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f507 7252 	add.w	r2, r7, #840	@ 0x348
 80019ee:	f5a2 7152 	sub.w	r1, r2, #840	@ 0x348
 80019f2:	f507 7252 	add.w	r2, r7, #840	@ 0x348
 80019f6:	f5a2 7051 	sub.w	r0, r2, #836	@ 0x344
 80019fa:	4a14      	ldr	r2, [pc, #80]	@ (8001a4c <_generate_log_filename+0x14c>)
 80019fc:	6809      	ldr	r1, [r1, #0]
 80019fe:	6800      	ldr	r0, [r0, #0]
 8001a00:	f015 fa12 	bl	8016e28 <sniprintf>
 8001a04:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
    }
    
    file_counter++;
 8001a08:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <_generate_log_filename+0x140>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a40 <_generate_log_filename+0x140>)
 8001a10:	6013      	str	r3, [r2, #0]
    
    if (result < 0 || (size_t)result >= max_len) {
 8001a12:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	db08      	blt.n	8001a2c <_generate_log_filename+0x12c>
 8001a1a:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8001a1e:	f507 7252 	add.w	r2, r7, #840	@ 0x348
 8001a22:	f5a2 7252 	sub.w	r2, r2, #840	@ 0x348
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d802      	bhi.n	8001a32 <_generate_log_filename+0x132>
        return SDSTORAGE_ERROR;
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a30:	e000      	b.n	8001a34 <_generate_log_filename+0x134>
    }
    
    return SDSTORAGE_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	f507 7752 	add.w	r7, r7, #840	@ 0x348
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000076c 	.word	0x2000076c
 8001a44:	20000334 	.word	0x20000334
 8001a48:	08019700 	.word	0x08019700
 8001a4c:	08019718 	.word	0x08019718
 8001a50:	08019728 	.word	0x08019728

08001a54 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4a07      	ldr	r2, [pc, #28]	@ (8001ab4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	4a06      	ldr	r2, [pc, #24]	@ (8001ab8 <vApplicationGetIdleTaskMemory+0x30>)
 8001a9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2280      	movs	r2, #128	@ 0x80
 8001aa4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000770 	.word	0x20000770
 8001ab8:	200007c8 	.word	0x200007c8

08001abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001abc:	b5b0      	push	{r4, r5, r7, lr}
 8001abe:	b09a      	sub	sp, #104	@ 0x68
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // 리셋 카운터 추가
  static uint32_t reset_count = 0;
  reset_count++;
 8001ac2:	4b96      	ldr	r3, [pc, #600]	@ (8001d1c <main+0x260>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	4a94      	ldr	r2, [pc, #592]	@ (8001d1c <main+0x260>)
 8001aca:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001acc:	f004 f847 	bl	8005b5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ad0:	f000 f966 	bl	8001da0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001ad4:	f000 f9d6 	bl	8001e84 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ad8:	f001 f998 	bl	8002e0c <MX_GPIO_Init>
  MX_DMA_Init();  // DMA는 UART보다 먼저 초기화
 8001adc:	f001 ff8a 	bl	80039f4 <MX_DMA_Init>
  MX_USART6_DMA_Init();  // USART6 DMA 초기화 (UART보다 먼저)
 8001ae0:	f001 ffae 	bl	8003a40 <MX_USART6_DMA_Init>
  MX_ADC3_Init();
 8001ae4:	f000 fa00 	bl	8001ee8 <MX_ADC3_Init>
  MX_CRC_Init();
 8001ae8:	f000 fa50 	bl	8001f8c <MX_CRC_Init>
  MX_DCMI_Init();
 8001aec:	f000 fa70 	bl	8001fd0 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001af0:	f000 faa2 	bl	8002038 <MX_DMA2D_Init>
  MX_ETH_Init();
 8001af4:	f000 fad2 	bl	800209c <MX_ETH_Init>
  MX_FMC_Init();
 8001af8:	f001 f938 	bl	8002d6c <MX_FMC_Init>
  MX_I2C1_Init();
 8001afc:	f000 fb1c 	bl	8002138 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001b00:	f000 fb5a 	bl	80021b8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001b04:	f000 fb98 	bl	8002238 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001b08:	f000 fc18 	bl	800233c <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001b0c:	f000 fc42 	bl	8002394 <MX_RTC_Init>
  MX_SAI2_Init();
 8001b10:	f000 fce4 	bl	80024dc <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001b14:	f000 fd8a 	bl	800262c <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001b18:	f000 fdae 	bl	8002678 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8001b1c:	f000 fddc 	bl	80026d8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001b20:	f000 fe18 	bl	8002754 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b24:	f000 fec2 	bl	80028ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b28:	f000 ff36 	bl	8002998 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001b2c:	f000 ffac 	bl	8002a88 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001b30:	f001 f822 	bl	8002b78 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001b34:	f001 f874 	bl	8002c20 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001b38:	f001 f8b8 	bl	8002cac <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001b3c:	f001 f8e6 	bl	8002d0c <MX_USART6_UART_Init>
  
  // UART 초기화 후 DMA 핸들 다시 연결 (HAL_UART_Init에서 리셋될 수 있음)
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8001b40:	4b77      	ldr	r3, [pc, #476]	@ (8001d20 <main+0x264>)
 8001b42:	4a78      	ldr	r2, [pc, #480]	@ (8001d24 <main+0x268>)
 8001b44:	675a      	str	r2, [r3, #116]	@ 0x74
 8001b46:	4b77      	ldr	r3, [pc, #476]	@ (8001d24 <main+0x268>)
 8001b48:	4a75      	ldr	r2, [pc, #468]	@ (8001d20 <main+0x264>)
 8001b4a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  // UART IDLE 인터럽트 활성화 (DMA 기반 수신을 위해)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8001b4c:	4b74      	ldr	r3, [pc, #464]	@ (8001d20 <main+0x264>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4b73      	ldr	r3, [pc, #460]	@ (8001d20 <main+0x264>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0210 	orr.w	r2, r2, #16
 8001b5a:	601a      	str	r2, [r3, #0]
  MX_FATFS_Init();
 8001b5c:	f00f f9ce 	bl	8010efc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  
  // Logger 초기화 (터미널 출력만 사용)
  LOGGER_Connect("STM32", 0);
 8001b60:	2100      	movs	r1, #0
 8001b62:	4871      	ldr	r0, [pc, #452]	@ (8001d28 <main+0x26c>)
 8001b64:	f003 f9f2 	bl	8004f4c <LOGGER_Connect>
  
  // 리셋 원인 확인
  LOG_INFO("=== SYSTEM START (Reset #%lu) ===", reset_count);
 8001b68:	4b6c      	ldr	r3, [pc, #432]	@ (8001d1c <main+0x260>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	496f      	ldr	r1, [pc, #444]	@ (8001d2c <main+0x270>)
 8001b70:	2001      	movs	r0, #1
 8001b72:	f003 fa4b 	bl	800500c <LOGGER_SendFormatted>
  
  // RCC 리셋 플래그 확인
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) LOG_WARN("Reset: BOR (Brown-out)");
 8001b76:	4b6e      	ldr	r3, [pc, #440]	@ (8001d30 <main+0x274>)
 8001b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <main+0xce>
 8001b82:	496c      	ldr	r1, [pc, #432]	@ (8001d34 <main+0x278>)
 8001b84:	2002      	movs	r0, #2
 8001b86:	f003 fa41 	bl	800500c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) LOG_WARN("Reset: PIN (External)");
 8001b8a:	4b69      	ldr	r3, [pc, #420]	@ (8001d30 <main+0x274>)
 8001b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <main+0xe2>
 8001b96:	4968      	ldr	r1, [pc, #416]	@ (8001d38 <main+0x27c>)
 8001b98:	2002      	movs	r0, #2
 8001b9a:	f003 fa37 	bl	800500c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) LOG_WARN("Reset: POR (Power-on)");
 8001b9e:	4b64      	ldr	r3, [pc, #400]	@ (8001d30 <main+0x274>)
 8001ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ba2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <main+0xf6>
 8001baa:	4964      	ldr	r1, [pc, #400]	@ (8001d3c <main+0x280>)
 8001bac:	2002      	movs	r0, #2
 8001bae:	f003 fa2d 	bl	800500c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) LOG_WARN("Reset: SOFTWARE");
 8001bb2:	4b5f      	ldr	r3, [pc, #380]	@ (8001d30 <main+0x274>)
 8001bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <main+0x10a>
 8001bbe:	4960      	ldr	r1, [pc, #384]	@ (8001d40 <main+0x284>)
 8001bc0:	2002      	movs	r0, #2
 8001bc2:	f003 fa23 	bl	800500c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) LOG_WARN("Reset: IWDG (Watchdog)");
 8001bc6:	4b5a      	ldr	r3, [pc, #360]	@ (8001d30 <main+0x274>)
 8001bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <main+0x11e>
 8001bd2:	495c      	ldr	r1, [pc, #368]	@ (8001d44 <main+0x288>)
 8001bd4:	2002      	movs	r0, #2
 8001bd6:	f003 fa19 	bl	800500c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) LOG_WARN("Reset: WWDG (Window Watchdog)");
 8001bda:	4b55      	ldr	r3, [pc, #340]	@ (8001d30 <main+0x274>)
 8001bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bde:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <main+0x132>
 8001be6:	4958      	ldr	r1, [pc, #352]	@ (8001d48 <main+0x28c>)
 8001be8:	2002      	movs	r0, #2
 8001bea:	f003 fa0f 	bl	800500c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) LOG_WARN("Reset: LPWR (Low Power)");
 8001bee:	4b50      	ldr	r3, [pc, #320]	@ (8001d30 <main+0x274>)
 8001bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	da03      	bge.n	8001bfe <main+0x142>
 8001bf6:	4955      	ldr	r1, [pc, #340]	@ (8001d4c <main+0x290>)
 8001bf8:	2002      	movs	r0, #2
 8001bfa:	f003 fa07 	bl	800500c <LOGGER_SendFormatted>
  
  // 플래그 클리어
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8001bfe:	4b4c      	ldr	r3, [pc, #304]	@ (8001d30 <main+0x274>)
 8001c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c02:	4a4b      	ldr	r2, [pc, #300]	@ (8001d30 <main+0x274>)
 8001c04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c08:	6753      	str	r3, [r2, #116]	@ 0x74
  
  // ===== 하드웨어 초기화만 main()에서 수행 =====
  
  // SD카드 초기화는 FreeRTOS 태스크에서 수행 (커널 시작 후)
  LOG_INFO("🔄 SD card initialization will be performed in FreeRTOS task");
 8001c0a:	4951      	ldr	r1, [pc, #324]	@ (8001d50 <main+0x294>)
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f003 f9fd 	bl	800500c <LOGGER_SendFormatted>
  g_sd_initialization_result = -1;  // 초기화 안됨 상태
 8001c12:	4b50      	ldr	r3, [pc, #320]	@ (8001d54 <main+0x298>)
 8001c14:	f04f 32ff 	mov.w	r2, #4294967295
 8001c18:	601a      	str	r2, [r3, #0]
  
  // UART6 DMA 초기화 건너뛰기 (이미 main 초기화에서 완료됨)
  LOG_INFO("📤 UART DMA already initialized in main() - skipping");
 8001c1a:	494f      	ldr	r1, [pc, #316]	@ (8001d58 <main+0x29c>)
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f003 f9f5 	bl	800500c <LOGGER_SendFormatted>
  
  // IDLE 인터럽트만 활성화 (메시지 끝 감지용)
  LOG_INFO("📤 Enabling UART IDLE interrupt...");
 8001c22:	494e      	ldr	r1, [pc, #312]	@ (8001d5c <main+0x2a0>)
 8001c24:	2001      	movs	r0, #1
 8001c26:	f003 f9f1 	bl	800500c <LOGGER_SendFormatted>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d20 <main+0x264>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b3b      	ldr	r3, [pc, #236]	@ (8001d20 <main+0x264>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0210 	orr.w	r2, r2, #16
 8001c38:	601a      	str	r2, [r3, #0]
  LOG_INFO("✅ UART setup completed");
 8001c3a:	4949      	ldr	r1, [pc, #292]	@ (8001d60 <main+0x2a4>)
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	f003 f9e5 	bl	800500c <LOGGER_SendFormatted>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  // SD 로깅 큐 생성 (안전성 체크 포함)
  LOG_INFO("📤 Creating SD logging queue (size: %d, item: %d bytes)", 
 8001c42:	2388      	movs	r3, #136	@ 0x88
 8001c44:	220a      	movs	r2, #10
 8001c46:	4947      	ldr	r1, [pc, #284]	@ (8001d64 <main+0x2a8>)
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f003 f9df 	bl	800500c <LOGGER_SendFormatted>
           SD_LOG_QUEUE_SIZE, sizeof(SDLogEntry_t));
  
  osMessageQDef(sdLogQueue, SD_LOG_QUEUE_SIZE, SDLogEntry_t);
 8001c4e:	4b46      	ldr	r3, [pc, #280]	@ (8001d68 <main+0x2ac>)
 8001c50:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001c54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  sdLogQueueHandle = osMessageCreate(osMessageQ(sdLogQueue), NULL);
 8001c5a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f012 fbd1 	bl	8014408 <osMessageCreate>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4a40      	ldr	r2, [pc, #256]	@ (8001d6c <main+0x2b0>)
 8001c6a:	6013      	str	r3, [r2, #0]
  
  if (sdLogQueueHandle == NULL) {
 8001c6c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d6c <main+0x2b0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d104      	bne.n	8001c7e <main+0x1c2>
    LOG_ERROR("❌ SD logging queue creation FAILED - insufficient memory");
 8001c74:	493e      	ldr	r1, [pc, #248]	@ (8001d70 <main+0x2b4>)
 8001c76:	2003      	movs	r0, #3
 8001c78:	f003 f9c8 	bl	800500c <LOGGER_SendFormatted>
 8001c7c:	e003      	b.n	8001c86 <main+0x1ca>
  } else {
    LOG_INFO("✅ SD logging queue created successfully");
 8001c7e:	493d      	ldr	r1, [pc, #244]	@ (8001d74 <main+0x2b8>)
 8001c80:	2001      	movs	r0, #1
 8001c82:	f003 f9c3 	bl	800500c <LOGGER_SendFormatted>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 8192);
 8001c86:	4b3c      	ldr	r3, [pc, #240]	@ (8001d78 <main+0x2bc>)
 8001c88:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001c8c:	461d      	mov	r5, r3
 8001c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001c9a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f012 fb51 	bl	8014348 <osThreadCreate>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4a34      	ldr	r2, [pc, #208]	@ (8001d7c <main+0x2c0>)
 8001caa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* 수신 태스크 활성화 - LoRa 통신을 위해 필수 */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 4096);
 8001cac:	4b34      	ldr	r3, [pc, #208]	@ (8001d80 <main+0x2c4>)
 8001cae:	f107 0420 	add.w	r4, r7, #32
 8001cb2:	461d      	mov	r5, r3
 8001cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 8001cc0:	f107 0320 	add.w	r3, r7, #32
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f012 fb3e 	bl	8014348 <osThreadCreate>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4a2d      	ldr	r2, [pc, #180]	@ (8001d84 <main+0x2c8>)
 8001cd0:	6013      	str	r3, [r2, #0]
  LOG_INFO("📤 Receive Task enabled for LoRa communication");
 8001cd2:	492d      	ldr	r1, [pc, #180]	@ (8001d88 <main+0x2cc>)
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	f003 f999 	bl	800500c <LOGGER_SendFormatted>
  
  /* SD 로깅 태스크 활성화 - SD 카드 로깅을 위해 */
  osThreadDef(sdLoggingTask, StartSDLoggingTask, osPriorityLow, 0, 4096);
 8001cda:	4b2c      	ldr	r3, [pc, #176]	@ (8001d8c <main+0x2d0>)
 8001cdc:	1d3c      	adds	r4, r7, #4
 8001cde:	461d      	mov	r5, r3
 8001ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ce8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sdLoggingTaskHandle = osThreadCreate(osThread(sdLoggingTask), NULL);
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f012 fb29 	bl	8014348 <osThreadCreate>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4a25      	ldr	r2, [pc, #148]	@ (8001d90 <main+0x2d4>)
 8001cfa:	6013      	str	r3, [r2, #0]
  LOG_INFO("📤 SD Logging Task enabled");
 8001cfc:	4925      	ldr	r1, [pc, #148]	@ (8001d94 <main+0x2d8>)
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f003 f984 	bl	800500c <LOGGER_SendFormatted>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  LOG_INFO("🚀 Starting FreeRTOS scheduler...");
 8001d04:	4924      	ldr	r1, [pc, #144]	@ (8001d98 <main+0x2dc>)
 8001d06:	2001      	movs	r0, #1
 8001d08:	f003 f980 	bl	800500c <LOGGER_SendFormatted>
  osKernelStart();
 8001d0c:	f012 faf9 	bl	8014302 <osKernelStart>
  
  // 이 부분은 절대 실행되면 안됨 (스케줄러가 제어를 가져가야 함)
  LOG_ERROR("❌ FATAL: Scheduler failed to start - system halted");
 8001d10:	4922      	ldr	r1, [pc, #136]	@ (8001d9c <main+0x2e0>)
 8001d12:	2003      	movs	r0, #3
 8001d14:	f003 f97a 	bl	800500c <LOGGER_SendFormatted>

  /* We should never get here as control is now taken by the scheduler */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d18:	bf00      	nop
 8001d1a:	e7fd      	b.n	8001d18 <main+0x25c>
 8001d1c:	2000152c 	.word	0x2000152c
 8001d20:	200011f4 	.word	0x200011f4
 8001d24:	200014cc 	.word	0x200014cc
 8001d28:	0801975c 	.word	0x0801975c
 8001d2c:	08019764 	.word	0x08019764
 8001d30:	40023800 	.word	0x40023800
 8001d34:	08019788 	.word	0x08019788
 8001d38:	080197a0 	.word	0x080197a0
 8001d3c:	080197b8 	.word	0x080197b8
 8001d40:	080197d0 	.word	0x080197d0
 8001d44:	080197e0 	.word	0x080197e0
 8001d48:	080197f8 	.word	0x080197f8
 8001d4c:	08019818 	.word	0x08019818
 8001d50:	08019830 	.word	0x08019830
 8001d54:	20000014 	.word	0x20000014
 8001d58:	08019870 	.word	0x08019870
 8001d5c:	080198a8 	.word	0x080198a8
 8001d60:	080198d0 	.word	0x080198d0
 8001d64:	080198ec 	.word	0x080198ec
 8001d68:	08019a40 	.word	0x08019a40
 8001d6c:	200012bc 	.word	0x200012bc
 8001d70:	08019928 	.word	0x08019928
 8001d74:	08019964 	.word	0x08019964
 8001d78:	08019a5c 	.word	0x08019a5c
 8001d7c:	200012b0 	.word	0x200012b0
 8001d80:	08019a84 	.word	0x08019a84
 8001d84:	200012b4 	.word	0x200012b4
 8001d88:	08019990 	.word	0x08019990
 8001d8c:	08019ab0 	.word	0x08019ab0
 8001d90:	200012b8 	.word	0x200012b8
 8001d94:	080199c4 	.word	0x080199c4
 8001d98:	080199e4 	.word	0x080199e4
 8001d9c:	08019a08 	.word	0x08019a08

08001da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b094      	sub	sp, #80	@ 0x50
 8001da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da6:	f107 0320 	add.w	r3, r7, #32
 8001daa:	2230      	movs	r2, #48	@ 0x30
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f015 f912 	bl	8016fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001dc4:	f008 f962 	bl	800a08c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e7c <SystemClock_Config+0xdc>)
 8001dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dcc:	4a2b      	ldr	r2, [pc, #172]	@ (8001e7c <SystemClock_Config+0xdc>)
 8001dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd4:	4b29      	ldr	r3, [pc, #164]	@ (8001e7c <SystemClock_Config+0xdc>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de0:	4b27      	ldr	r3, [pc, #156]	@ (8001e80 <SystemClock_Config+0xe0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a26      	ldr	r2, [pc, #152]	@ (8001e80 <SystemClock_Config+0xe0>)
 8001de6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b24      	ldr	r3, [pc, #144]	@ (8001e80 <SystemClock_Config+0xe0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001df8:	2309      	movs	r3, #9
 8001dfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dfc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e00:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e02:	2301      	movs	r3, #1
 8001e04:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e06:	2302      	movs	r3, #2
 8001e08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e0a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e10:	2319      	movs	r3, #25
 8001e12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001e14:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001e18:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001e1e:	2309      	movs	r3, #9
 8001e20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e22:	f107 0320 	add.w	r3, r7, #32
 8001e26:	4618      	mov	r0, r3
 8001e28:	f008 fa52 	bl	800a2d0 <HAL_RCC_OscConfig>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001e32:	f001 fdd9 	bl	80039e8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e36:	f008 f939 	bl	800a0ac <HAL_PWREx_EnableOverDrive>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001e40:	f001 fdd2 	bl	80039e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e44:	230f      	movs	r3, #15
 8001e46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e50:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	2106      	movs	r1, #6
 8001e62:	4618      	mov	r0, r3
 8001e64:	f008 fcd8 	bl	800a818 <HAL_RCC_ClockConfig>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001e6e:	f001 fdbb 	bl	80039e8 <Error_Handler>
  }
}
 8001e72:	bf00      	nop
 8001e74:	3750      	adds	r7, #80	@ 0x50
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40007000 	.word	0x40007000

08001e84 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b0a2      	sub	sp, #136	@ 0x88
 8001e88:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	2284      	movs	r2, #132	@ 0x84
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f015 f8a1 	bl	8016fd8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8001e96:	4b13      	ldr	r3, [pc, #76]	@ (8001ee4 <PeriphCommonClock_Config+0x60>)
 8001e98:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001e9a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001e9e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001ea0:	2305      	movs	r3, #5
 8001ea2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001eac:	2301      	movs	r3, #1
 8001eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001eb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eb4:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001eba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001ebe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f008 febc 	bl	800ac48 <HAL_RCCEx_PeriphCLKConfig>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001ed6:	f001 fd87 	bl	80039e8 <Error_Handler>
  }
}
 8001eda:	bf00      	nop
 8001edc:	3788      	adds	r7, #136	@ 0x88
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	00b00008 	.word	0x00b00008

08001ee8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001eee:	463b      	mov	r3, r7
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001efa:	4b21      	ldr	r3, [pc, #132]	@ (8001f80 <MX_ADC3_Init+0x98>)
 8001efc:	4a21      	ldr	r2, [pc, #132]	@ (8001f84 <MX_ADC3_Init+0x9c>)
 8001efe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f00:	4b1f      	ldr	r3, [pc, #124]	@ (8001f80 <MX_ADC3_Init+0x98>)
 8001f02:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f06:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001f08:	4b1d      	ldr	r3, [pc, #116]	@ (8001f80 <MX_ADC3_Init+0x98>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f80 <MX_ADC3_Init+0x98>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001f14:	4b1a      	ldr	r3, [pc, #104]	@ (8001f80 <MX_ADC3_Init+0x98>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001f1a:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <MX_ADC3_Init+0x98>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f22:	4b17      	ldr	r3, [pc, #92]	@ (8001f80 <MX_ADC3_Init+0x98>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f28:	4b15      	ldr	r3, [pc, #84]	@ (8001f80 <MX_ADC3_Init+0x98>)
 8001f2a:	4a17      	ldr	r2, [pc, #92]	@ (8001f88 <MX_ADC3_Init+0xa0>)
 8001f2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f2e:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <MX_ADC3_Init+0x98>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001f34:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <MX_ADC3_Init+0x98>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001f3a:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <MX_ADC3_Init+0x98>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f42:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <MX_ADC3_Init+0x98>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001f48:	480d      	ldr	r0, [pc, #52]	@ (8001f80 <MX_ADC3_Init+0x98>)
 8001f4a:	f003 fe59 	bl	8005c00 <HAL_ADC_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001f54:	f001 fd48 	bl	80039e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001f58:	2304      	movs	r3, #4
 8001f5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001f64:	463b      	mov	r3, r7
 8001f66:	4619      	mov	r1, r3
 8001f68:	4805      	ldr	r0, [pc, #20]	@ (8001f80 <MX_ADC3_Init+0x98>)
 8001f6a:	f003 fe8d 	bl	8005c88 <HAL_ADC_ConfigChannel>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001f74:	f001 fd38 	bl	80039e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000a00 	.word	0x20000a00
 8001f84:	40012200 	.word	0x40012200
 8001f88:	0f000001 	.word	0x0f000001

08001f8c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001f90:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc8 <MX_CRC_Init+0x3c>)
 8001f92:	4a0e      	ldr	r2, [pc, #56]	@ (8001fcc <MX_CRC_Init+0x40>)
 8001f94:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001f96:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc8 <MX_CRC_Init+0x3c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc8 <MX_CRC_Init+0x3c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001fa2:	4b09      	ldr	r3, [pc, #36]	@ (8001fc8 <MX_CRC_Init+0x3c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001fa8:	4b07      	ldr	r3, [pc, #28]	@ (8001fc8 <MX_CRC_Init+0x3c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001fae:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <MX_CRC_Init+0x3c>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001fb4:	4804      	ldr	r0, [pc, #16]	@ (8001fc8 <MX_CRC_Init+0x3c>)
 8001fb6:	f004 f99d 	bl	80062f4 <HAL_CRC_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001fc0:	f001 fd12 	bl	80039e8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000a48 	.word	0x20000a48
 8001fcc:	40023000 	.word	0x40023000

08001fd0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001fd4:	4b16      	ldr	r3, [pc, #88]	@ (8002030 <MX_DCMI_Init+0x60>)
 8001fd6:	4a17      	ldr	r2, [pc, #92]	@ (8002034 <MX_DCMI_Init+0x64>)
 8001fd8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001fda:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <MX_DCMI_Init+0x60>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001fe0:	4b13      	ldr	r3, [pc, #76]	@ (8002030 <MX_DCMI_Init+0x60>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001fe6:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <MX_DCMI_Init+0x60>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001fec:	4b10      	ldr	r3, [pc, #64]	@ (8002030 <MX_DCMI_Init+0x60>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8002030 <MX_DCMI_Init+0x60>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8002030 <MX_DCMI_Init+0x60>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <MX_DCMI_Init+0x60>)
 8002000:	2200      	movs	r2, #0
 8002002:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8002004:	4b0a      	ldr	r3, [pc, #40]	@ (8002030 <MX_DCMI_Init+0x60>)
 8002006:	2200      	movs	r2, #0
 8002008:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800200a:	4b09      	ldr	r3, [pc, #36]	@ (8002030 <MX_DCMI_Init+0x60>)
 800200c:	2200      	movs	r2, #0
 800200e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002010:	4b07      	ldr	r3, [pc, #28]	@ (8002030 <MX_DCMI_Init+0x60>)
 8002012:	2200      	movs	r2, #0
 8002014:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8002016:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <MX_DCMI_Init+0x60>)
 8002018:	2200      	movs	r2, #0
 800201a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800201c:	4804      	ldr	r0, [pc, #16]	@ (8002030 <MX_DCMI_Init+0x60>)
 800201e:	f004 fa5b 	bl	80064d8 <HAL_DCMI_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8002028:	f001 fcde 	bl	80039e8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000a6c 	.word	0x20000a6c
 8002034:	50050000 	.word	0x50050000

08002038 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800203c:	4b15      	ldr	r3, [pc, #84]	@ (8002094 <MX_DMA2D_Init+0x5c>)
 800203e:	4a16      	ldr	r2, [pc, #88]	@ (8002098 <MX_DMA2D_Init+0x60>)
 8002040:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8002042:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <MX_DMA2D_Init+0x5c>)
 8002044:	2200      	movs	r2, #0
 8002046:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8002048:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <MX_DMA2D_Init+0x5c>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800204e:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <MX_DMA2D_Init+0x5c>)
 8002050:	2200      	movs	r2, #0
 8002052:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002054:	4b0f      	ldr	r3, [pc, #60]	@ (8002094 <MX_DMA2D_Init+0x5c>)
 8002056:	2200      	movs	r2, #0
 8002058:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800205a:	4b0e      	ldr	r3, [pc, #56]	@ (8002094 <MX_DMA2D_Init+0x5c>)
 800205c:	2200      	movs	r2, #0
 800205e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002060:	4b0c      	ldr	r3, [pc, #48]	@ (8002094 <MX_DMA2D_Init+0x5c>)
 8002062:	2200      	movs	r2, #0
 8002064:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8002066:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <MX_DMA2D_Init+0x5c>)
 8002068:	2200      	movs	r2, #0
 800206a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800206c:	4809      	ldr	r0, [pc, #36]	@ (8002094 <MX_DMA2D_Init+0x5c>)
 800206e:	f004 ff21 	bl	8006eb4 <HAL_DMA2D_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8002078:	f001 fcb6 	bl	80039e8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800207c:	2101      	movs	r1, #1
 800207e:	4805      	ldr	r0, [pc, #20]	@ (8002094 <MX_DMA2D_Init+0x5c>)
 8002080:	f005 f872 	bl	8007168 <HAL_DMA2D_ConfigLayer>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800208a:	f001 fcad 	bl	80039e8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000abc 	.word	0x20000abc
 8002098:	4002b000 	.word	0x4002b000

0800209c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80020a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002120 <MX_ETH_Init+0x84>)
 80020a2:	4a20      	ldr	r2, [pc, #128]	@ (8002124 <MX_ETH_Init+0x88>)
 80020a4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80020a6:	4b20      	ldr	r3, [pc, #128]	@ (8002128 <MX_ETH_Init+0x8c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80020ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002128 <MX_ETH_Init+0x8c>)
 80020ae:	2280      	movs	r2, #128	@ 0x80
 80020b0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80020b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002128 <MX_ETH_Init+0x8c>)
 80020b4:	22e1      	movs	r2, #225	@ 0xe1
 80020b6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002128 <MX_ETH_Init+0x8c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80020be:	4b1a      	ldr	r3, [pc, #104]	@ (8002128 <MX_ETH_Init+0x8c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80020c4:	4b18      	ldr	r3, [pc, #96]	@ (8002128 <MX_ETH_Init+0x8c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80020ca:	4b15      	ldr	r3, [pc, #84]	@ (8002120 <MX_ETH_Init+0x84>)
 80020cc:	4a16      	ldr	r2, [pc, #88]	@ (8002128 <MX_ETH_Init+0x8c>)
 80020ce:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80020d0:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <MX_ETH_Init+0x84>)
 80020d2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80020d6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80020d8:	4b11      	ldr	r3, [pc, #68]	@ (8002120 <MX_ETH_Init+0x84>)
 80020da:	4a14      	ldr	r2, [pc, #80]	@ (800212c <MX_ETH_Init+0x90>)
 80020dc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80020de:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <MX_ETH_Init+0x84>)
 80020e0:	4a13      	ldr	r2, [pc, #76]	@ (8002130 <MX_ETH_Init+0x94>)
 80020e2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80020e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002120 <MX_ETH_Init+0x84>)
 80020e6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80020ea:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80020ec:	480c      	ldr	r0, [pc, #48]	@ (8002120 <MX_ETH_Init+0x84>)
 80020ee:	f005 f8cd 	bl	800728c <HAL_ETH_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80020f8:	f001 fc76 	bl	80039e8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80020fc:	2238      	movs	r2, #56	@ 0x38
 80020fe:	2100      	movs	r1, #0
 8002100:	480c      	ldr	r0, [pc, #48]	@ (8002134 <MX_ETH_Init+0x98>)
 8002102:	f014 ff69 	bl	8016fd8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002106:	4b0b      	ldr	r3, [pc, #44]	@ (8002134 <MX_ETH_Init+0x98>)
 8002108:	2221      	movs	r2, #33	@ 0x21
 800210a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800210c:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <MX_ETH_Init+0x98>)
 800210e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8002112:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002114:	4b07      	ldr	r3, [pc, #28]	@ (8002134 <MX_ETH_Init+0x98>)
 8002116:	2200      	movs	r2, #0
 8002118:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000afc 	.word	0x20000afc
 8002124:	40028000 	.word	0x40028000
 8002128:	20001530 	.word	0x20001530
 800212c:	20000170 	.word	0x20000170
 8002130:	200000d0 	.word	0x200000d0
 8002134:	200009c8 	.word	0x200009c8

08002138 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800213c:	4b1b      	ldr	r3, [pc, #108]	@ (80021ac <MX_I2C1_Init+0x74>)
 800213e:	4a1c      	ldr	r2, [pc, #112]	@ (80021b0 <MX_I2C1_Init+0x78>)
 8002140:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8002142:	4b1a      	ldr	r3, [pc, #104]	@ (80021ac <MX_I2C1_Init+0x74>)
 8002144:	4a1b      	ldr	r2, [pc, #108]	@ (80021b4 <MX_I2C1_Init+0x7c>)
 8002146:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002148:	4b18      	ldr	r3, [pc, #96]	@ (80021ac <MX_I2C1_Init+0x74>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800214e:	4b17      	ldr	r3, [pc, #92]	@ (80021ac <MX_I2C1_Init+0x74>)
 8002150:	2201      	movs	r2, #1
 8002152:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002154:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <MX_I2C1_Init+0x74>)
 8002156:	2200      	movs	r2, #0
 8002158:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800215a:	4b14      	ldr	r3, [pc, #80]	@ (80021ac <MX_I2C1_Init+0x74>)
 800215c:	2200      	movs	r2, #0
 800215e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002160:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <MX_I2C1_Init+0x74>)
 8002162:	2200      	movs	r2, #0
 8002164:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002166:	4b11      	ldr	r3, [pc, #68]	@ (80021ac <MX_I2C1_Init+0x74>)
 8002168:	2200      	movs	r2, #0
 800216a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800216c:	4b0f      	ldr	r3, [pc, #60]	@ (80021ac <MX_I2C1_Init+0x74>)
 800216e:	2200      	movs	r2, #0
 8002170:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002172:	480e      	ldr	r0, [pc, #56]	@ (80021ac <MX_I2C1_Init+0x74>)
 8002174:	f007 fb44 	bl	8009800 <HAL_I2C_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800217e:	f001 fc33 	bl	80039e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002182:	2100      	movs	r1, #0
 8002184:	4809      	ldr	r0, [pc, #36]	@ (80021ac <MX_I2C1_Init+0x74>)
 8002186:	f007 fbd7 	bl	8009938 <HAL_I2CEx_ConfigAnalogFilter>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002190:	f001 fc2a 	bl	80039e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002194:	2100      	movs	r1, #0
 8002196:	4805      	ldr	r0, [pc, #20]	@ (80021ac <MX_I2C1_Init+0x74>)
 8002198:	f007 fc19 	bl	80099ce <HAL_I2CEx_ConfigDigitalFilter>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80021a2:	f001 fc21 	bl	80039e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000bac 	.word	0x20000bac
 80021b0:	40005400 	.word	0x40005400
 80021b4:	00c0eaff 	.word	0x00c0eaff

080021b8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80021bc:	4b1b      	ldr	r3, [pc, #108]	@ (800222c <MX_I2C3_Init+0x74>)
 80021be:	4a1c      	ldr	r2, [pc, #112]	@ (8002230 <MX_I2C3_Init+0x78>)
 80021c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80021c2:	4b1a      	ldr	r3, [pc, #104]	@ (800222c <MX_I2C3_Init+0x74>)
 80021c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002234 <MX_I2C3_Init+0x7c>)
 80021c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80021c8:	4b18      	ldr	r3, [pc, #96]	@ (800222c <MX_I2C3_Init+0x74>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021ce:	4b17      	ldr	r3, [pc, #92]	@ (800222c <MX_I2C3_Init+0x74>)
 80021d0:	2201      	movs	r2, #1
 80021d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021d4:	4b15      	ldr	r3, [pc, #84]	@ (800222c <MX_I2C3_Init+0x74>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80021da:	4b14      	ldr	r3, [pc, #80]	@ (800222c <MX_I2C3_Init+0x74>)
 80021dc:	2200      	movs	r2, #0
 80021de:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021e0:	4b12      	ldr	r3, [pc, #72]	@ (800222c <MX_I2C3_Init+0x74>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021e6:	4b11      	ldr	r3, [pc, #68]	@ (800222c <MX_I2C3_Init+0x74>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ec:	4b0f      	ldr	r3, [pc, #60]	@ (800222c <MX_I2C3_Init+0x74>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80021f2:	480e      	ldr	r0, [pc, #56]	@ (800222c <MX_I2C3_Init+0x74>)
 80021f4:	f007 fb04 	bl	8009800 <HAL_I2C_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80021fe:	f001 fbf3 	bl	80039e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002202:	2100      	movs	r1, #0
 8002204:	4809      	ldr	r0, [pc, #36]	@ (800222c <MX_I2C3_Init+0x74>)
 8002206:	f007 fb97 	bl	8009938 <HAL_I2CEx_ConfigAnalogFilter>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002210:	f001 fbea 	bl	80039e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002214:	2100      	movs	r1, #0
 8002216:	4805      	ldr	r0, [pc, #20]	@ (800222c <MX_I2C3_Init+0x74>)
 8002218:	f007 fbd9 	bl	80099ce <HAL_I2CEx_ConfigDigitalFilter>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002222:	f001 fbe1 	bl	80039e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000c00 	.word	0x20000c00
 8002230:	40005c00 	.word	0x40005c00
 8002234:	00c0eaff 	.word	0x00c0eaff

08002238 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08e      	sub	sp, #56	@ 0x38
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800223e:	1d3b      	adds	r3, r7, #4
 8002240:	2234      	movs	r2, #52	@ 0x34
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f014 fec7 	bl	8016fd8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800224a:	4b3a      	ldr	r3, [pc, #232]	@ (8002334 <MX_LTDC_Init+0xfc>)
 800224c:	4a3a      	ldr	r2, [pc, #232]	@ (8002338 <MX_LTDC_Init+0x100>)
 800224e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002250:	4b38      	ldr	r3, [pc, #224]	@ (8002334 <MX_LTDC_Init+0xfc>)
 8002252:	2200      	movs	r2, #0
 8002254:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002256:	4b37      	ldr	r3, [pc, #220]	@ (8002334 <MX_LTDC_Init+0xfc>)
 8002258:	2200      	movs	r2, #0
 800225a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800225c:	4b35      	ldr	r3, [pc, #212]	@ (8002334 <MX_LTDC_Init+0xfc>)
 800225e:	2200      	movs	r2, #0
 8002260:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002262:	4b34      	ldr	r3, [pc, #208]	@ (8002334 <MX_LTDC_Init+0xfc>)
 8002264:	2200      	movs	r2, #0
 8002266:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8002268:	4b32      	ldr	r3, [pc, #200]	@ (8002334 <MX_LTDC_Init+0xfc>)
 800226a:	2228      	movs	r2, #40	@ 0x28
 800226c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800226e:	4b31      	ldr	r3, [pc, #196]	@ (8002334 <MX_LTDC_Init+0xfc>)
 8002270:	2209      	movs	r2, #9
 8002272:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8002274:	4b2f      	ldr	r3, [pc, #188]	@ (8002334 <MX_LTDC_Init+0xfc>)
 8002276:	2235      	movs	r2, #53	@ 0x35
 8002278:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800227a:	4b2e      	ldr	r3, [pc, #184]	@ (8002334 <MX_LTDC_Init+0xfc>)
 800227c:	220b      	movs	r2, #11
 800227e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8002280:	4b2c      	ldr	r3, [pc, #176]	@ (8002334 <MX_LTDC_Init+0xfc>)
 8002282:	f240 2215 	movw	r2, #533	@ 0x215
 8002286:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8002288:	4b2a      	ldr	r3, [pc, #168]	@ (8002334 <MX_LTDC_Init+0xfc>)
 800228a:	f240 121b 	movw	r2, #283	@ 0x11b
 800228e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8002290:	4b28      	ldr	r3, [pc, #160]	@ (8002334 <MX_LTDC_Init+0xfc>)
 8002292:	f240 2235 	movw	r2, #565	@ 0x235
 8002296:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8002298:	4b26      	ldr	r3, [pc, #152]	@ (8002334 <MX_LTDC_Init+0xfc>)
 800229a:	f240 121d 	movw	r2, #285	@ 0x11d
 800229e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80022a0:	4b24      	ldr	r3, [pc, #144]	@ (8002334 <MX_LTDC_Init+0xfc>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80022a8:	4b22      	ldr	r3, [pc, #136]	@ (8002334 <MX_LTDC_Init+0xfc>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80022b0:	4b20      	ldr	r3, [pc, #128]	@ (8002334 <MX_LTDC_Init+0xfc>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80022b8:	481e      	ldr	r0, [pc, #120]	@ (8002334 <MX_LTDC_Init+0xfc>)
 80022ba:	f007 fbd4 	bl	8009a66 <HAL_LTDC_Init>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80022c4:	f001 fb90 	bl	80039e8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80022cc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80022d0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80022d6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80022da:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80022dc:	2302      	movs	r3, #2
 80022de:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80022e0:	23ff      	movs	r3, #255	@ 0xff
 80022e2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80022e8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80022ec:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80022ee:	2307      	movs	r3, #7
 80022f0:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80022f2:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80022f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 80022f8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80022fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 80022fe:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002302:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	2200      	movs	r2, #0
 800231a:	4619      	mov	r1, r3
 800231c:	4805      	ldr	r0, [pc, #20]	@ (8002334 <MX_LTDC_Init+0xfc>)
 800231e:	f007 fd01 	bl	8009d24 <HAL_LTDC_ConfigLayer>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8002328:	f001 fb5e 	bl	80039e8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800232c:	bf00      	nop
 800232e:	3738      	adds	r7, #56	@ 0x38
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000c54 	.word	0x20000c54
 8002338:	40016800 	.word	0x40016800

0800233c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002340:	4b12      	ldr	r3, [pc, #72]	@ (800238c <MX_QUADSPI_Init+0x50>)
 8002342:	4a13      	ldr	r2, [pc, #76]	@ (8002390 <MX_QUADSPI_Init+0x54>)
 8002344:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8002346:	4b11      	ldr	r3, [pc, #68]	@ (800238c <MX_QUADSPI_Init+0x50>)
 8002348:	2201      	movs	r2, #1
 800234a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800234c:	4b0f      	ldr	r3, [pc, #60]	@ (800238c <MX_QUADSPI_Init+0x50>)
 800234e:	2204      	movs	r2, #4
 8002350:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002352:	4b0e      	ldr	r3, [pc, #56]	@ (800238c <MX_QUADSPI_Init+0x50>)
 8002354:	2210      	movs	r2, #16
 8002356:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8002358:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <MX_QUADSPI_Init+0x50>)
 800235a:	2218      	movs	r2, #24
 800235c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800235e:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <MX_QUADSPI_Init+0x50>)
 8002360:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8002364:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002366:	4b09      	ldr	r3, [pc, #36]	@ (800238c <MX_QUADSPI_Init+0x50>)
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800236c:	4b07      	ldr	r3, [pc, #28]	@ (800238c <MX_QUADSPI_Init+0x50>)
 800236e:	2200      	movs	r2, #0
 8002370:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002372:	4b06      	ldr	r3, [pc, #24]	@ (800238c <MX_QUADSPI_Init+0x50>)
 8002374:	2200      	movs	r2, #0
 8002376:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002378:	4804      	ldr	r0, [pc, #16]	@ (800238c <MX_QUADSPI_Init+0x50>)
 800237a:	f007 fee7 	bl	800a14c <HAL_QSPI_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8002384:	f001 fb30 	bl	80039e8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000cfc 	.word	0x20000cfc
 8002390:	a0001000 	.word	0xa0001000

08002394 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b090      	sub	sp, #64	@ 0x40
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800239a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]
 80023a6:	60da      	str	r2, [r3, #12]
 80023a8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80023aa:	2300      	movs	r3, #0
 80023ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80023ae:	463b      	mov	r3, r7
 80023b0:	2228      	movs	r2, #40	@ 0x28
 80023b2:	2100      	movs	r1, #0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f014 fe0f 	bl	8016fd8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80023ba:	4b46      	ldr	r3, [pc, #280]	@ (80024d4 <MX_RTC_Init+0x140>)
 80023bc:	4a46      	ldr	r2, [pc, #280]	@ (80024d8 <MX_RTC_Init+0x144>)
 80023be:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80023c0:	4b44      	ldr	r3, [pc, #272]	@ (80024d4 <MX_RTC_Init+0x140>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80023c6:	4b43      	ldr	r3, [pc, #268]	@ (80024d4 <MX_RTC_Init+0x140>)
 80023c8:	227f      	movs	r2, #127	@ 0x7f
 80023ca:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80023cc:	4b41      	ldr	r3, [pc, #260]	@ (80024d4 <MX_RTC_Init+0x140>)
 80023ce:	22ff      	movs	r2, #255	@ 0xff
 80023d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80023d2:	4b40      	ldr	r3, [pc, #256]	@ (80024d4 <MX_RTC_Init+0x140>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80023d8:	4b3e      	ldr	r3, [pc, #248]	@ (80024d4 <MX_RTC_Init+0x140>)
 80023da:	2200      	movs	r2, #0
 80023dc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80023de:	4b3d      	ldr	r3, [pc, #244]	@ (80024d4 <MX_RTC_Init+0x140>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80023e4:	483b      	ldr	r0, [pc, #236]	@ (80024d4 <MX_RTC_Init+0x140>)
 80023e6:	f009 f95f 	bl	800b6a8 <HAL_RTC_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80023f0:	f001 fafa 	bl	80039e8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8002400:	2300      	movs	r3, #0
 8002402:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002406:	2300      	movs	r3, #0
 8002408:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800240e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002412:	2201      	movs	r2, #1
 8002414:	4619      	mov	r1, r3
 8002416:	482f      	ldr	r0, [pc, #188]	@ (80024d4 <MX_RTC_Init+0x140>)
 8002418:	f009 f9c8 	bl	800b7ac <HAL_RTC_SetTime>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002422:	f001 fae1 	bl	80039e8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002426:	2301      	movs	r3, #1
 8002428:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800242c:	2301      	movs	r3, #1
 800242e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8002432:	2301      	movs	r3, #1
 8002434:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8002438:	2300      	movs	r3, #0
 800243a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800243e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002442:	2201      	movs	r2, #1
 8002444:	4619      	mov	r1, r3
 8002446:	4823      	ldr	r0, [pc, #140]	@ (80024d4 <MX_RTC_Init+0x140>)
 8002448:	f009 fa4a 	bl	800b8e0 <HAL_RTC_SetDate>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002452:	f001 fac9 	bl	80039e8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002456:	2300      	movs	r3, #0
 8002458:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800245a:	2300      	movs	r3, #0
 800245c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800245e:	2300      	movs	r3, #0
 8002460:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002462:	2300      	movs	r3, #0
 8002464:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002472:	2300      	movs	r3, #0
 8002474:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800247a:	2301      	movs	r3, #1
 800247c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002480:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002484:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002486:	463b      	mov	r3, r7
 8002488:	2201      	movs	r2, #1
 800248a:	4619      	mov	r1, r3
 800248c:	4811      	ldr	r0, [pc, #68]	@ (80024d4 <MX_RTC_Init+0x140>)
 800248e:	f009 faab 	bl	800b9e8 <HAL_RTC_SetAlarm>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002498:	f001 faa6 	bl	80039e8 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800249c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80024a2:	463b      	mov	r3, r7
 80024a4:	2201      	movs	r2, #1
 80024a6:	4619      	mov	r1, r3
 80024a8:	480a      	ldr	r0, [pc, #40]	@ (80024d4 <MX_RTC_Init+0x140>)
 80024aa:	f009 fa9d 	bl	800b9e8 <HAL_RTC_SetAlarm>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 80024b4:	f001 fa98 	bl	80039e8 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80024b8:	2202      	movs	r2, #2
 80024ba:	2100      	movs	r1, #0
 80024bc:	4805      	ldr	r0, [pc, #20]	@ (80024d4 <MX_RTC_Init+0x140>)
 80024be:	f009 fc5d 	bl	800bd7c <HAL_RTCEx_SetTimeStamp>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_RTC_Init+0x138>
  {
    Error_Handler();
 80024c8:	f001 fa8e 	bl	80039e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80024cc:	bf00      	nop
 80024ce:	3740      	adds	r7, #64	@ 0x40
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20000d48 	.word	0x20000d48
 80024d8:	40002800 	.word	0x40002800

080024dc <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80024e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002618 <MX_SAI2_Init+0x13c>)
 80024e2:	4a4e      	ldr	r2, [pc, #312]	@ (800261c <MX_SAI2_Init+0x140>)
 80024e4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80024e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002618 <MX_SAI2_Init+0x13c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80024ec:	4b4a      	ldr	r3, [pc, #296]	@ (8002618 <MX_SAI2_Init+0x13c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80024f2:	4b49      	ldr	r3, [pc, #292]	@ (8002618 <MX_SAI2_Init+0x13c>)
 80024f4:	2240      	movs	r2, #64	@ 0x40
 80024f6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80024f8:	4b47      	ldr	r3, [pc, #284]	@ (8002618 <MX_SAI2_Init+0x13c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80024fe:	4b46      	ldr	r3, [pc, #280]	@ (8002618 <MX_SAI2_Init+0x13c>)
 8002500:	2200      	movs	r2, #0
 8002502:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8002504:	4b44      	ldr	r3, [pc, #272]	@ (8002618 <MX_SAI2_Init+0x13c>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800250a:	4b43      	ldr	r3, [pc, #268]	@ (8002618 <MX_SAI2_Init+0x13c>)
 800250c:	2200      	movs	r2, #0
 800250e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002510:	4b41      	ldr	r3, [pc, #260]	@ (8002618 <MX_SAI2_Init+0x13c>)
 8002512:	2200      	movs	r2, #0
 8002514:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002516:	4b40      	ldr	r3, [pc, #256]	@ (8002618 <MX_SAI2_Init+0x13c>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800251c:	4b3e      	ldr	r3, [pc, #248]	@ (8002618 <MX_SAI2_Init+0x13c>)
 800251e:	4a40      	ldr	r2, [pc, #256]	@ (8002620 <MX_SAI2_Init+0x144>)
 8002520:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002522:	4b3d      	ldr	r3, [pc, #244]	@ (8002618 <MX_SAI2_Init+0x13c>)
 8002524:	2200      	movs	r2, #0
 8002526:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002528:	4b3b      	ldr	r3, [pc, #236]	@ (8002618 <MX_SAI2_Init+0x13c>)
 800252a:	2200      	movs	r2, #0
 800252c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800252e:	4b3a      	ldr	r3, [pc, #232]	@ (8002618 <MX_SAI2_Init+0x13c>)
 8002530:	2200      	movs	r2, #0
 8002532:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002534:	4b38      	ldr	r3, [pc, #224]	@ (8002618 <MX_SAI2_Init+0x13c>)
 8002536:	2200      	movs	r2, #0
 8002538:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800253a:	4b37      	ldr	r3, [pc, #220]	@ (8002618 <MX_SAI2_Init+0x13c>)
 800253c:	2208      	movs	r2, #8
 800253e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8002540:	4b35      	ldr	r3, [pc, #212]	@ (8002618 <MX_SAI2_Init+0x13c>)
 8002542:	2201      	movs	r2, #1
 8002544:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002546:	4b34      	ldr	r3, [pc, #208]	@ (8002618 <MX_SAI2_Init+0x13c>)
 8002548:	2200      	movs	r2, #0
 800254a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800254c:	4b32      	ldr	r3, [pc, #200]	@ (8002618 <MX_SAI2_Init+0x13c>)
 800254e:	2200      	movs	r2, #0
 8002550:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002552:	4b31      	ldr	r3, [pc, #196]	@ (8002618 <MX_SAI2_Init+0x13c>)
 8002554:	2200      	movs	r2, #0
 8002556:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8002558:	4b2f      	ldr	r3, [pc, #188]	@ (8002618 <MX_SAI2_Init+0x13c>)
 800255a:	2200      	movs	r2, #0
 800255c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800255e:	4b2e      	ldr	r3, [pc, #184]	@ (8002618 <MX_SAI2_Init+0x13c>)
 8002560:	2200      	movs	r2, #0
 8002562:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8002564:	4b2c      	ldr	r3, [pc, #176]	@ (8002618 <MX_SAI2_Init+0x13c>)
 8002566:	2201      	movs	r2, #1
 8002568:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800256a:	4b2b      	ldr	r3, [pc, #172]	@ (8002618 <MX_SAI2_Init+0x13c>)
 800256c:	2200      	movs	r2, #0
 800256e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8002570:	4829      	ldr	r0, [pc, #164]	@ (8002618 <MX_SAI2_Init+0x13c>)
 8002572:	f009 fc6b 	bl	800be4c <HAL_SAI_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 800257c:	f001 fa34 	bl	80039e8 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8002580:	4b28      	ldr	r3, [pc, #160]	@ (8002624 <MX_SAI2_Init+0x148>)
 8002582:	4a29      	ldr	r2, [pc, #164]	@ (8002628 <MX_SAI2_Init+0x14c>)
 8002584:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002586:	4b27      	ldr	r3, [pc, #156]	@ (8002624 <MX_SAI2_Init+0x148>)
 8002588:	2200      	movs	r2, #0
 800258a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800258c:	4b25      	ldr	r3, [pc, #148]	@ (8002624 <MX_SAI2_Init+0x148>)
 800258e:	2203      	movs	r2, #3
 8002590:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8002592:	4b24      	ldr	r3, [pc, #144]	@ (8002624 <MX_SAI2_Init+0x148>)
 8002594:	2240      	movs	r2, #64	@ 0x40
 8002596:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002598:	4b22      	ldr	r3, [pc, #136]	@ (8002624 <MX_SAI2_Init+0x148>)
 800259a:	2200      	movs	r2, #0
 800259c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800259e:	4b21      	ldr	r3, [pc, #132]	@ (8002624 <MX_SAI2_Init+0x148>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80025a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002624 <MX_SAI2_Init+0x148>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80025aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002624 <MX_SAI2_Init+0x148>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80025b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002624 <MX_SAI2_Init+0x148>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80025b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002624 <MX_SAI2_Init+0x148>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80025bc:	4b19      	ldr	r3, [pc, #100]	@ (8002624 <MX_SAI2_Init+0x148>)
 80025be:	2200      	movs	r2, #0
 80025c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80025c2:	4b18      	ldr	r3, [pc, #96]	@ (8002624 <MX_SAI2_Init+0x148>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80025c8:	4b16      	ldr	r3, [pc, #88]	@ (8002624 <MX_SAI2_Init+0x148>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80025ce:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <MX_SAI2_Init+0x148>)
 80025d0:	2208      	movs	r2, #8
 80025d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80025d4:	4b13      	ldr	r3, [pc, #76]	@ (8002624 <MX_SAI2_Init+0x148>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80025da:	4b12      	ldr	r3, [pc, #72]	@ (8002624 <MX_SAI2_Init+0x148>)
 80025dc:	2200      	movs	r2, #0
 80025de:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80025e0:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <MX_SAI2_Init+0x148>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80025e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002624 <MX_SAI2_Init+0x148>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80025ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002624 <MX_SAI2_Init+0x148>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80025f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002624 <MX_SAI2_Init+0x148>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80025f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002624 <MX_SAI2_Init+0x148>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80025fe:	4b09      	ldr	r3, [pc, #36]	@ (8002624 <MX_SAI2_Init+0x148>)
 8002600:	2200      	movs	r2, #0
 8002602:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8002604:	4807      	ldr	r0, [pc, #28]	@ (8002624 <MX_SAI2_Init+0x148>)
 8002606:	f009 fc21 	bl	800be4c <HAL_SAI_Init>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8002610:	f001 f9ea 	bl	80039e8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000d68 	.word	0x20000d68
 800261c:	40015c04 	.word	0x40015c04
 8002620:	0002ee00 	.word	0x0002ee00
 8002624:	20000dec 	.word	0x20000dec
 8002628:	40015c24 	.word	0x40015c24

0800262c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002630:	4b0f      	ldr	r3, [pc, #60]	@ (8002670 <MX_SDMMC1_SD_Init+0x44>)
 8002632:	4a10      	ldr	r2, [pc, #64]	@ (8002674 <MX_SDMMC1_SD_Init+0x48>)
 8002634:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002636:	4b0e      	ldr	r3, [pc, #56]	@ (8002670 <MX_SDMMC1_SD_Init+0x44>)
 8002638:	2200      	movs	r2, #0
 800263a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800263c:	4b0c      	ldr	r3, [pc, #48]	@ (8002670 <MX_SDMMC1_SD_Init+0x44>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002642:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <MX_SDMMC1_SD_Init+0x44>)
 8002644:	2200      	movs	r2, #0
 8002646:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;  // ST 커뮤니티 가이드: 1-bit 모드로 변경
 8002648:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <MX_SDMMC1_SD_Init+0x44>)
 800264a:	2200      	movs	r2, #0
 800264c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;  // 하드웨어 플로우 컨트롤 활성화 (안정성 향상)
 800264e:	4b08      	ldr	r3, [pc, #32]	@ (8002670 <MX_SDMMC1_SD_Init+0x44>)
 8002650:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002654:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 8;  // 클럭 분주비 증가 (2→8, STM32F7 안정화 권장값)
 8002656:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <MX_SDMMC1_SD_Init+0x44>)
 8002658:	2208      	movs	r2, #8
 800265a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  
  // Initialize SD card with HAL
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800265c:	4804      	ldr	r0, [pc, #16]	@ (8002670 <MX_SDMMC1_SD_Init+0x44>)
 800265e:	f009 fdab 	bl	800c1b8 <HAL_SD_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8002668:	f001 f9be 	bl	80039e8 <Error_Handler>
  }

  /* USER CODE END SDMMC1_Init 2 */

}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20000e70 	.word	0x20000e70
 8002674:	40012c00 	.word	0x40012c00

08002678 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 800267c:	4b15      	ldr	r3, [pc, #84]	@ (80026d4 <MX_SPDIFRX_Init+0x5c>)
 800267e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002682:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8002684:	4b13      	ldr	r3, [pc, #76]	@ (80026d4 <MX_SPDIFRX_Init+0x5c>)
 8002686:	2200      	movs	r2, #0
 8002688:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800268a:	4b12      	ldr	r3, [pc, #72]	@ (80026d4 <MX_SPDIFRX_Init+0x5c>)
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8002690:	4b10      	ldr	r3, [pc, #64]	@ (80026d4 <MX_SPDIFRX_Init+0x5c>)
 8002692:	2200      	movs	r2, #0
 8002694:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8002696:	4b0f      	ldr	r3, [pc, #60]	@ (80026d4 <MX_SPDIFRX_Init+0x5c>)
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 800269c:	4b0d      	ldr	r3, [pc, #52]	@ (80026d4 <MX_SPDIFRX_Init+0x5c>)
 800269e:	2200      	movs	r2, #0
 80026a0:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80026a2:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <MX_SPDIFRX_Init+0x5c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80026a8:	4b0a      	ldr	r3, [pc, #40]	@ (80026d4 <MX_SPDIFRX_Init+0x5c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80026ae:	4b09      	ldr	r3, [pc, #36]	@ (80026d4 <MX_SPDIFRX_Init+0x5c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80026b4:	4b07      	ldr	r3, [pc, #28]	@ (80026d4 <MX_SPDIFRX_Init+0x5c>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80026ba:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <MX_SPDIFRX_Init+0x5c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80026c0:	4804      	ldr	r0, [pc, #16]	@ (80026d4 <MX_SPDIFRX_Init+0x5c>)
 80026c2:	f00a fd35 	bl	800d130 <HAL_SPDIFRX_Init>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80026cc:	f001 f98c 	bl	80039e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80026d0:	bf00      	nop
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	20000ef4 	.word	0x20000ef4

080026d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80026dc:	4b1b      	ldr	r3, [pc, #108]	@ (800274c <MX_SPI2_Init+0x74>)
 80026de:	4a1c      	ldr	r2, [pc, #112]	@ (8002750 <MX_SPI2_Init+0x78>)
 80026e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80026e2:	4b1a      	ldr	r3, [pc, #104]	@ (800274c <MX_SPI2_Init+0x74>)
 80026e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80026e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80026ea:	4b18      	ldr	r3, [pc, #96]	@ (800274c <MX_SPI2_Init+0x74>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80026f0:	4b16      	ldr	r3, [pc, #88]	@ (800274c <MX_SPI2_Init+0x74>)
 80026f2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80026f6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026f8:	4b14      	ldr	r3, [pc, #80]	@ (800274c <MX_SPI2_Init+0x74>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026fe:	4b13      	ldr	r3, [pc, #76]	@ (800274c <MX_SPI2_Init+0x74>)
 8002700:	2200      	movs	r2, #0
 8002702:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002704:	4b11      	ldr	r3, [pc, #68]	@ (800274c <MX_SPI2_Init+0x74>)
 8002706:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800270a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800270c:	4b0f      	ldr	r3, [pc, #60]	@ (800274c <MX_SPI2_Init+0x74>)
 800270e:	2200      	movs	r2, #0
 8002710:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002712:	4b0e      	ldr	r3, [pc, #56]	@ (800274c <MX_SPI2_Init+0x74>)
 8002714:	2200      	movs	r2, #0
 8002716:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002718:	4b0c      	ldr	r3, [pc, #48]	@ (800274c <MX_SPI2_Init+0x74>)
 800271a:	2200      	movs	r2, #0
 800271c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800271e:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <MX_SPI2_Init+0x74>)
 8002720:	2200      	movs	r2, #0
 8002722:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002724:	4b09      	ldr	r3, [pc, #36]	@ (800274c <MX_SPI2_Init+0x74>)
 8002726:	2207      	movs	r2, #7
 8002728:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800272a:	4b08      	ldr	r3, [pc, #32]	@ (800274c <MX_SPI2_Init+0x74>)
 800272c:	2200      	movs	r2, #0
 800272e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002730:	4b06      	ldr	r3, [pc, #24]	@ (800274c <MX_SPI2_Init+0x74>)
 8002732:	2208      	movs	r2, #8
 8002734:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002736:	4805      	ldr	r0, [pc, #20]	@ (800274c <MX_SPI2_Init+0x74>)
 8002738:	f00a fd56 	bl	800d1e8 <HAL_SPI_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002742:	f001 f951 	bl	80039e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000f40 	.word	0x20000f40
 8002750:	40003800 	.word	0x40003800

08002754 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b09a      	sub	sp, #104	@ 0x68
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800275a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	609a      	str	r2, [r3, #8]
 8002766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002768:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002774:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
 8002784:	615a      	str	r2, [r3, #20]
 8002786:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	222c      	movs	r2, #44	@ 0x2c
 800278c:	2100      	movs	r1, #0
 800278e:	4618      	mov	r0, r3
 8002790:	f014 fc22 	bl	8016fd8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002794:	4b43      	ldr	r3, [pc, #268]	@ (80028a4 <MX_TIM1_Init+0x150>)
 8002796:	4a44      	ldr	r2, [pc, #272]	@ (80028a8 <MX_TIM1_Init+0x154>)
 8002798:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800279a:	4b42      	ldr	r3, [pc, #264]	@ (80028a4 <MX_TIM1_Init+0x150>)
 800279c:	2200      	movs	r2, #0
 800279e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a0:	4b40      	ldr	r3, [pc, #256]	@ (80028a4 <MX_TIM1_Init+0x150>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80027a6:	4b3f      	ldr	r3, [pc, #252]	@ (80028a4 <MX_TIM1_Init+0x150>)
 80027a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ae:	4b3d      	ldr	r3, [pc, #244]	@ (80028a4 <MX_TIM1_Init+0x150>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027b4:	4b3b      	ldr	r3, [pc, #236]	@ (80028a4 <MX_TIM1_Init+0x150>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ba:	4b3a      	ldr	r3, [pc, #232]	@ (80028a4 <MX_TIM1_Init+0x150>)
 80027bc:	2200      	movs	r2, #0
 80027be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027c0:	4838      	ldr	r0, [pc, #224]	@ (80028a4 <MX_TIM1_Init+0x150>)
 80027c2:	f00a fdbc 	bl	800d33e <HAL_TIM_Base_Init>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80027cc:	f001 f90c 	bl	80039e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027d6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80027da:	4619      	mov	r1, r3
 80027dc:	4831      	ldr	r0, [pc, #196]	@ (80028a4 <MX_TIM1_Init+0x150>)
 80027de:	f00b f8ef 	bl	800d9c0 <HAL_TIM_ConfigClockSource>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80027e8:	f001 f8fe 	bl	80039e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80027ec:	482d      	ldr	r0, [pc, #180]	@ (80028a4 <MX_TIM1_Init+0x150>)
 80027ee:	f00a fe75 	bl	800d4dc <HAL_TIM_PWM_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80027f8:	f001 f8f6 	bl	80039e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027fc:	2300      	movs	r3, #0
 80027fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002800:	2300      	movs	r3, #0
 8002802:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002804:	2300      	movs	r3, #0
 8002806:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002808:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800280c:	4619      	mov	r1, r3
 800280e:	4825      	ldr	r0, [pc, #148]	@ (80028a4 <MX_TIM1_Init+0x150>)
 8002810:	f00b fd66 	bl	800e2e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800281a:	f001 f8e5 	bl	80039e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800281e:	2360      	movs	r3, #96	@ 0x60
 8002820:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002826:	2300      	movs	r3, #0
 8002828:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800282a:	2300      	movs	r3, #0
 800282c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800282e:	2300      	movs	r3, #0
 8002830:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002832:	2300      	movs	r3, #0
 8002834:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002836:	2300      	movs	r3, #0
 8002838:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800283a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800283e:	2200      	movs	r2, #0
 8002840:	4619      	mov	r1, r3
 8002842:	4818      	ldr	r0, [pc, #96]	@ (80028a4 <MX_TIM1_Init+0x150>)
 8002844:	f00a ffa8 	bl	800d798 <HAL_TIM_PWM_ConfigChannel>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800284e:	f001 f8cb 	bl	80039e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002852:	2300      	movs	r3, #0
 8002854:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002856:	2300      	movs	r3, #0
 8002858:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002866:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800286a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002870:	2300      	movs	r3, #0
 8002872:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002874:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800287e:	2300      	movs	r3, #0
 8002880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	4619      	mov	r1, r3
 8002886:	4807      	ldr	r0, [pc, #28]	@ (80028a4 <MX_TIM1_Init+0x150>)
 8002888:	f00b fdb8 	bl	800e3fc <HAL_TIMEx_ConfigBreakDeadTime>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002892:	f001 f8a9 	bl	80039e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002896:	4803      	ldr	r0, [pc, #12]	@ (80028a4 <MX_TIM1_Init+0x150>)
 8002898:	f001 ff1a 	bl	80046d0 <HAL_TIM_MspPostInit>

}
 800289c:	bf00      	nop
 800289e:	3768      	adds	r7, #104	@ 0x68
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20000fa4 	.word	0x20000fa4
 80028a8:	40010000 	.word	0x40010000

080028ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08e      	sub	sp, #56	@ 0x38
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	609a      	str	r2, [r3, #8]
 80028be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c0:	f107 031c 	add.w	r3, r7, #28
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028cc:	463b      	mov	r3, r7
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	609a      	str	r2, [r3, #8]
 80028d6:	60da      	str	r2, [r3, #12]
 80028d8:	611a      	str	r2, [r3, #16]
 80028da:	615a      	str	r2, [r3, #20]
 80028dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028de:	4b2d      	ldr	r3, [pc, #180]	@ (8002994 <MX_TIM2_Init+0xe8>)
 80028e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80028e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80028e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002994 <MX_TIM2_Init+0xe8>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ec:	4b29      	ldr	r3, [pc, #164]	@ (8002994 <MX_TIM2_Init+0xe8>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80028f2:	4b28      	ldr	r3, [pc, #160]	@ (8002994 <MX_TIM2_Init+0xe8>)
 80028f4:	f04f 32ff 	mov.w	r2, #4294967295
 80028f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028fa:	4b26      	ldr	r3, [pc, #152]	@ (8002994 <MX_TIM2_Init+0xe8>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002900:	4b24      	ldr	r3, [pc, #144]	@ (8002994 <MX_TIM2_Init+0xe8>)
 8002902:	2200      	movs	r2, #0
 8002904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002906:	4823      	ldr	r0, [pc, #140]	@ (8002994 <MX_TIM2_Init+0xe8>)
 8002908:	f00a fd19 	bl	800d33e <HAL_TIM_Base_Init>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002912:	f001 f869 	bl	80039e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002916:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800291a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800291c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002920:	4619      	mov	r1, r3
 8002922:	481c      	ldr	r0, [pc, #112]	@ (8002994 <MX_TIM2_Init+0xe8>)
 8002924:	f00b f84c 	bl	800d9c0 <HAL_TIM_ConfigClockSource>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800292e:	f001 f85b 	bl	80039e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002932:	4818      	ldr	r0, [pc, #96]	@ (8002994 <MX_TIM2_Init+0xe8>)
 8002934:	f00a fdd2 	bl	800d4dc <HAL_TIM_PWM_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800293e:	f001 f853 	bl	80039e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002946:	2300      	movs	r3, #0
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800294a:	f107 031c 	add.w	r3, r7, #28
 800294e:	4619      	mov	r1, r3
 8002950:	4810      	ldr	r0, [pc, #64]	@ (8002994 <MX_TIM2_Init+0xe8>)
 8002952:	f00b fcc5 	bl	800e2e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800295c:	f001 f844 	bl	80039e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002960:	2360      	movs	r3, #96	@ 0x60
 8002962:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002968:	2300      	movs	r3, #0
 800296a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800296c:	2300      	movs	r3, #0
 800296e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002970:	463b      	mov	r3, r7
 8002972:	2200      	movs	r2, #0
 8002974:	4619      	mov	r1, r3
 8002976:	4807      	ldr	r0, [pc, #28]	@ (8002994 <MX_TIM2_Init+0xe8>)
 8002978:	f00a ff0e 	bl	800d798 <HAL_TIM_PWM_ConfigChannel>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002982:	f001 f831 	bl	80039e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002986:	4803      	ldr	r0, [pc, #12]	@ (8002994 <MX_TIM2_Init+0xe8>)
 8002988:	f001 fea2 	bl	80046d0 <HAL_TIM_MspPostInit>

}
 800298c:	bf00      	nop
 800298e:	3738      	adds	r7, #56	@ 0x38
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000ff0 	.word	0x20000ff0

08002998 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08e      	sub	sp, #56	@ 0x38
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800299e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	609a      	str	r2, [r3, #8]
 80029aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ac:	f107 031c 	add.w	r3, r7, #28
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029b8:	463b      	mov	r3, r7
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	609a      	str	r2, [r3, #8]
 80029c2:	60da      	str	r2, [r3, #12]
 80029c4:	611a      	str	r2, [r3, #16]
 80029c6:	615a      	str	r2, [r3, #20]
 80029c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002a80 <MX_TIM3_Init+0xe8>)
 80029cc:	4a2d      	ldr	r2, [pc, #180]	@ (8002a84 <MX_TIM3_Init+0xec>)
 80029ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80029d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a80 <MX_TIM3_Init+0xe8>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a80 <MX_TIM3_Init+0xe8>)
 80029d8:	2200      	movs	r2, #0
 80029da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80029dc:	4b28      	ldr	r3, [pc, #160]	@ (8002a80 <MX_TIM3_Init+0xe8>)
 80029de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e4:	4b26      	ldr	r3, [pc, #152]	@ (8002a80 <MX_TIM3_Init+0xe8>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ea:	4b25      	ldr	r3, [pc, #148]	@ (8002a80 <MX_TIM3_Init+0xe8>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029f0:	4823      	ldr	r0, [pc, #140]	@ (8002a80 <MX_TIM3_Init+0xe8>)
 80029f2:	f00a fca4 	bl	800d33e <HAL_TIM_Base_Init>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80029fc:	f000 fff4 	bl	80039e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	481c      	ldr	r0, [pc, #112]	@ (8002a80 <MX_TIM3_Init+0xe8>)
 8002a0e:	f00a ffd7 	bl	800d9c0 <HAL_TIM_ConfigClockSource>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002a18:	f000 ffe6 	bl	80039e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a1c:	4818      	ldr	r0, [pc, #96]	@ (8002a80 <MX_TIM3_Init+0xe8>)
 8002a1e:	f00a fd5d 	bl	800d4dc <HAL_TIM_PWM_Init>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002a28:	f000 ffde 	bl	80039e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a34:	f107 031c 	add.w	r3, r7, #28
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4811      	ldr	r0, [pc, #68]	@ (8002a80 <MX_TIM3_Init+0xe8>)
 8002a3c:	f00b fc50 	bl	800e2e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002a46:	f000 ffcf 	bl	80039e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a4a:	2360      	movs	r3, #96	@ 0x60
 8002a4c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a5a:	463b      	mov	r3, r7
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4807      	ldr	r0, [pc, #28]	@ (8002a80 <MX_TIM3_Init+0xe8>)
 8002a62:	f00a fe99 	bl	800d798 <HAL_TIM_PWM_ConfigChannel>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002a6c:	f000 ffbc 	bl	80039e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a70:	4803      	ldr	r0, [pc, #12]	@ (8002a80 <MX_TIM3_Init+0xe8>)
 8002a72:	f001 fe2d 	bl	80046d0 <HAL_TIM_MspPostInit>

}
 8002a76:	bf00      	nop
 8002a78:	3738      	adds	r7, #56	@ 0x38
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	2000103c 	.word	0x2000103c
 8002a84:	40000400 	.word	0x40000400

08002a88 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08e      	sub	sp, #56	@ 0x38
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	609a      	str	r2, [r3, #8]
 8002a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a9c:	f107 031c 	add.w	r3, r7, #28
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aa8:	463b      	mov	r3, r7
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	60da      	str	r2, [r3, #12]
 8002ab4:	611a      	str	r2, [r3, #16]
 8002ab6:	615a      	str	r2, [r3, #20]
 8002ab8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002aba:	4b2d      	ldr	r3, [pc, #180]	@ (8002b70 <MX_TIM5_Init+0xe8>)
 8002abc:	4a2d      	ldr	r2, [pc, #180]	@ (8002b74 <MX_TIM5_Init+0xec>)
 8002abe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8002b70 <MX_TIM5_Init+0xe8>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8002b70 <MX_TIM5_Init+0xe8>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002acc:	4b28      	ldr	r3, [pc, #160]	@ (8002b70 <MX_TIM5_Init+0xe8>)
 8002ace:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ad4:	4b26      	ldr	r3, [pc, #152]	@ (8002b70 <MX_TIM5_Init+0xe8>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ada:	4b25      	ldr	r3, [pc, #148]	@ (8002b70 <MX_TIM5_Init+0xe8>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002ae0:	4823      	ldr	r0, [pc, #140]	@ (8002b70 <MX_TIM5_Init+0xe8>)
 8002ae2:	f00a fc2c 	bl	800d33e <HAL_TIM_Base_Init>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002aec:	f000 ff7c 	bl	80039e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002af0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002af4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002af6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002afa:	4619      	mov	r1, r3
 8002afc:	481c      	ldr	r0, [pc, #112]	@ (8002b70 <MX_TIM5_Init+0xe8>)
 8002afe:	f00a ff5f 	bl	800d9c0 <HAL_TIM_ConfigClockSource>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002b08:	f000 ff6e 	bl	80039e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002b0c:	4818      	ldr	r0, [pc, #96]	@ (8002b70 <MX_TIM5_Init+0xe8>)
 8002b0e:	f00a fce5 	bl	800d4dc <HAL_TIM_PWM_Init>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002b18:	f000 ff66 	bl	80039e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b24:	f107 031c 	add.w	r3, r7, #28
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4811      	ldr	r0, [pc, #68]	@ (8002b70 <MX_TIM5_Init+0xe8>)
 8002b2c:	f00b fbd8 	bl	800e2e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002b36:	f000 ff57 	bl	80039e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b3a:	2360      	movs	r3, #96	@ 0x60
 8002b3c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b4a:	463b      	mov	r3, r7
 8002b4c:	220c      	movs	r2, #12
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4807      	ldr	r0, [pc, #28]	@ (8002b70 <MX_TIM5_Init+0xe8>)
 8002b52:	f00a fe21 	bl	800d798 <HAL_TIM_PWM_ConfigChannel>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002b5c:	f000 ff44 	bl	80039e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002b60:	4803      	ldr	r0, [pc, #12]	@ (8002b70 <MX_TIM5_Init+0xe8>)
 8002b62:	f001 fdb5 	bl	80046d0 <HAL_TIM_MspPostInit>

}
 8002b66:	bf00      	nop
 8002b68:	3738      	adds	r7, #56	@ 0x38
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20001088 	.word	0x20001088
 8002b74:	40000c00 	.word	0x40000c00

08002b78 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b7e:	f107 0310 	add.w	r3, r7, #16
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	605a      	str	r2, [r3, #4]
 8002b88:	609a      	str	r2, [r3, #8]
 8002b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b8c:	1d3b      	adds	r3, r7, #4
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	605a      	str	r2, [r3, #4]
 8002b94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002b96:	4b20      	ldr	r3, [pc, #128]	@ (8002c18 <MX_TIM8_Init+0xa0>)
 8002b98:	4a20      	ldr	r2, [pc, #128]	@ (8002c1c <MX_TIM8_Init+0xa4>)
 8002b9a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002c18 <MX_TIM8_Init+0xa0>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c18 <MX_TIM8_Init+0xa0>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c18 <MX_TIM8_Init+0xa0>)
 8002baa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bae:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bb0:	4b19      	ldr	r3, [pc, #100]	@ (8002c18 <MX_TIM8_Init+0xa0>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002bb6:	4b18      	ldr	r3, [pc, #96]	@ (8002c18 <MX_TIM8_Init+0xa0>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bbc:	4b16      	ldr	r3, [pc, #88]	@ (8002c18 <MX_TIM8_Init+0xa0>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002bc2:	4815      	ldr	r0, [pc, #84]	@ (8002c18 <MX_TIM8_Init+0xa0>)
 8002bc4:	f00a fbbb 	bl	800d33e <HAL_TIM_Base_Init>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002bce:	f000 ff0b 	bl	80039e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002bd8:	f107 0310 	add.w	r3, r7, #16
 8002bdc:	4619      	mov	r1, r3
 8002bde:	480e      	ldr	r0, [pc, #56]	@ (8002c18 <MX_TIM8_Init+0xa0>)
 8002be0:	f00a feee 	bl	800d9c0 <HAL_TIM_ConfigClockSource>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002bea:	f000 fefd 	bl	80039e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002bfa:	1d3b      	adds	r3, r7, #4
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4806      	ldr	r0, [pc, #24]	@ (8002c18 <MX_TIM8_Init+0xa0>)
 8002c00:	f00b fb6e 	bl	800e2e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002c0a:	f000 feed 	bl	80039e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002c0e:	bf00      	nop
 8002c10:	3720      	adds	r7, #32
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200010d4 	.word	0x200010d4
 8002c1c:	40010400 	.word	0x40010400

08002c20 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c26:	1d3b      	adds	r3, r7, #4
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]
 8002c34:	615a      	str	r2, [r3, #20]
 8002c36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002c38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca4 <MX_TIM12_Init+0x84>)
 8002c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ca8 <MX_TIM12_Init+0x88>)
 8002c3c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002c3e:	4b19      	ldr	r3, [pc, #100]	@ (8002ca4 <MX_TIM12_Init+0x84>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c44:	4b17      	ldr	r3, [pc, #92]	@ (8002ca4 <MX_TIM12_Init+0x84>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002c4a:	4b16      	ldr	r3, [pc, #88]	@ (8002ca4 <MX_TIM12_Init+0x84>)
 8002c4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c50:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c52:	4b14      	ldr	r3, [pc, #80]	@ (8002ca4 <MX_TIM12_Init+0x84>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c58:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <MX_TIM12_Init+0x84>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002c5e:	4811      	ldr	r0, [pc, #68]	@ (8002ca4 <MX_TIM12_Init+0x84>)
 8002c60:	f00a fc3c 	bl	800d4dc <HAL_TIM_PWM_Init>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002c6a:	f000 febd 	bl	80039e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c6e:	2360      	movs	r3, #96	@ 0x60
 8002c70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c7e:	1d3b      	adds	r3, r7, #4
 8002c80:	2200      	movs	r2, #0
 8002c82:	4619      	mov	r1, r3
 8002c84:	4807      	ldr	r0, [pc, #28]	@ (8002ca4 <MX_TIM12_Init+0x84>)
 8002c86:	f00a fd87 	bl	800d798 <HAL_TIM_PWM_ConfigChannel>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002c90:	f000 feaa 	bl	80039e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002c94:	4803      	ldr	r0, [pc, #12]	@ (8002ca4 <MX_TIM12_Init+0x84>)
 8002c96:	f001 fd1b 	bl	80046d0 <HAL_TIM_MspPostInit>

}
 8002c9a:	bf00      	nop
 8002c9c:	3720      	adds	r7, #32
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20001120 	.word	0x20001120
 8002ca8:	40001800 	.word	0x40001800

08002cac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cb0:	4b14      	ldr	r3, [pc, #80]	@ (8002d04 <MX_USART1_UART_Init+0x58>)
 8002cb2:	4a15      	ldr	r2, [pc, #84]	@ (8002d08 <MX_USART1_UART_Init+0x5c>)
 8002cb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cb6:	4b13      	ldr	r3, [pc, #76]	@ (8002d04 <MX_USART1_UART_Init+0x58>)
 8002cb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cbe:	4b11      	ldr	r3, [pc, #68]	@ (8002d04 <MX_USART1_UART_Init+0x58>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d04 <MX_USART1_UART_Init+0x58>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cca:	4b0e      	ldr	r3, [pc, #56]	@ (8002d04 <MX_USART1_UART_Init+0x58>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d04 <MX_USART1_UART_Init+0x58>)
 8002cd2:	220c      	movs	r2, #12
 8002cd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8002d04 <MX_USART1_UART_Init+0x58>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cdc:	4b09      	ldr	r3, [pc, #36]	@ (8002d04 <MX_USART1_UART_Init+0x58>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ce2:	4b08      	ldr	r3, [pc, #32]	@ (8002d04 <MX_USART1_UART_Init+0x58>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ce8:	4b06      	ldr	r3, [pc, #24]	@ (8002d04 <MX_USART1_UART_Init+0x58>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cee:	4805      	ldr	r0, [pc, #20]	@ (8002d04 <MX_USART1_UART_Init+0x58>)
 8002cf0:	f00b fc20 	bl	800e534 <HAL_UART_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002cfa:	f000 fe75 	bl	80039e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	2000116c 	.word	0x2000116c
 8002d08:	40011000 	.word	0x40011000

08002d0c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002d10:	4b14      	ldr	r3, [pc, #80]	@ (8002d64 <MX_USART6_UART_Init+0x58>)
 8002d12:	4a15      	ldr	r2, [pc, #84]	@ (8002d68 <MX_USART6_UART_Init+0x5c>)
 8002d14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002d16:	4b13      	ldr	r3, [pc, #76]	@ (8002d64 <MX_USART6_UART_Init+0x58>)
 8002d18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002d1e:	4b11      	ldr	r3, [pc, #68]	@ (8002d64 <MX_USART6_UART_Init+0x58>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002d24:	4b0f      	ldr	r3, [pc, #60]	@ (8002d64 <MX_USART6_UART_Init+0x58>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d64 <MX_USART6_UART_Init+0x58>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002d30:	4b0c      	ldr	r3, [pc, #48]	@ (8002d64 <MX_USART6_UART_Init+0x58>)
 8002d32:	220c      	movs	r2, #12
 8002d34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d36:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <MX_USART6_UART_Init+0x58>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d3c:	4b09      	ldr	r3, [pc, #36]	@ (8002d64 <MX_USART6_UART_Init+0x58>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d42:	4b08      	ldr	r3, [pc, #32]	@ (8002d64 <MX_USART6_UART_Init+0x58>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d48:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <MX_USART6_UART_Init+0x58>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002d4e:	4805      	ldr	r0, [pc, #20]	@ (8002d64 <MX_USART6_UART_Init+0x58>)
 8002d50:	f00b fbf0 	bl	800e534 <HAL_UART_Init>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002d5a:	f000 fe45 	bl	80039e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	200011f4 	.word	0x200011f4
 8002d68:	40011400 	.word	0x40011400

08002d6c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002d72:	1d3b      	adds	r3, r7, #4
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
 8002d80:	615a      	str	r2, [r3, #20]
 8002d82:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002d84:	4b1f      	ldr	r3, [pc, #124]	@ (8002e04 <MX_FMC_Init+0x98>)
 8002d86:	4a20      	ldr	r2, [pc, #128]	@ (8002e08 <MX_FMC_Init+0x9c>)
 8002d88:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e04 <MX_FMC_Init+0x98>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002d90:	4b1c      	ldr	r3, [pc, #112]	@ (8002e04 <MX_FMC_Init+0x98>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002d96:	4b1b      	ldr	r3, [pc, #108]	@ (8002e04 <MX_FMC_Init+0x98>)
 8002d98:	2204      	movs	r2, #4
 8002d9a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002d9c:	4b19      	ldr	r3, [pc, #100]	@ (8002e04 <MX_FMC_Init+0x98>)
 8002d9e:	2210      	movs	r2, #16
 8002da0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002da2:	4b18      	ldr	r3, [pc, #96]	@ (8002e04 <MX_FMC_Init+0x98>)
 8002da4:	2240      	movs	r2, #64	@ 0x40
 8002da6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002da8:	4b16      	ldr	r3, [pc, #88]	@ (8002e04 <MX_FMC_Init+0x98>)
 8002daa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002dae:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002db0:	4b14      	ldr	r3, [pc, #80]	@ (8002e04 <MX_FMC_Init+0x98>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002db6:	4b13      	ldr	r3, [pc, #76]	@ (8002e04 <MX_FMC_Init+0x98>)
 8002db8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002dbc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002dbe:	4b11      	ldr	r3, [pc, #68]	@ (8002e04 <MX_FMC_Init+0x98>)
 8002dc0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002dc4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002e04 <MX_FMC_Init+0x98>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002dd0:	2307      	movs	r3, #7
 8002dd2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002dd4:	2304      	movs	r3, #4
 8002dd6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002dd8:	2307      	movs	r3, #7
 8002dda:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002de0:	2302      	movs	r3, #2
 8002de2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002de4:	2302      	movs	r3, #2
 8002de6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002de8:	1d3b      	adds	r3, r7, #4
 8002dea:	4619      	mov	r1, r3
 8002dec:	4805      	ldr	r0, [pc, #20]	@ (8002e04 <MX_FMC_Init+0x98>)
 8002dee:	f00a f96b 	bl	800d0c8 <HAL_SDRAM_Init>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002df8:	f000 fdf6 	bl	80039e8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002dfc:	bf00      	nop
 8002dfe:	3720      	adds	r7, #32
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	2000127c 	.word	0x2000127c
 8002e08:	a0000140 	.word	0xa0000140

08002e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b090      	sub	sp, #64	@ 0x40
 8002e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	609a      	str	r2, [r3, #8]
 8002e1e:	60da      	str	r2, [r3, #12]
 8002e20:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e22:	4bb0      	ldr	r3, [pc, #704]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	4aaf      	ldr	r2, [pc, #700]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002e28:	f043 0310 	orr.w	r3, r3, #16
 8002e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e2e:	4bad      	ldr	r3, [pc, #692]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	f003 0310 	and.w	r3, r3, #16
 8002e36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e3a:	4baa      	ldr	r3, [pc, #680]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3e:	4aa9      	ldr	r2, [pc, #676]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e46:	4ba7      	ldr	r3, [pc, #668]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e52:	4ba4      	ldr	r3, [pc, #656]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e56:	4aa3      	ldr	r2, [pc, #652]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002e58:	f043 0302 	orr.w	r3, r3, #2
 8002e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e5e:	4ba1      	ldr	r3, [pc, #644]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	623b      	str	r3, [r7, #32]
 8002e68:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e6a:	4b9e      	ldr	r3, [pc, #632]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	4a9d      	ldr	r2, [pc, #628]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002e70:	f043 0308 	orr.w	r3, r3, #8
 8002e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e76:	4b9b      	ldr	r3, [pc, #620]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	61fb      	str	r3, [r7, #28]
 8002e80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e82:	4b98      	ldr	r3, [pc, #608]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e86:	4a97      	ldr	r2, [pc, #604]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002e88:	f043 0304 	orr.w	r3, r3, #4
 8002e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e8e:	4b95      	ldr	r3, [pc, #596]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	61bb      	str	r3, [r7, #24]
 8002e98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9a:	4b92      	ldr	r3, [pc, #584]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	4a91      	ldr	r2, [pc, #580]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea6:	4b8f      	ldr	r3, [pc, #572]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002eb2:	4b8c      	ldr	r3, [pc, #560]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	4a8b      	ldr	r2, [pc, #556]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002eb8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ebe:	4b89      	ldr	r3, [pc, #548]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002eca:	4b86      	ldr	r3, [pc, #536]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	4a85      	ldr	r2, [pc, #532]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed6:	4b83      	ldr	r3, [pc, #524]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002ee2:	4b80      	ldr	r3, [pc, #512]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	4a7f      	ldr	r2, [pc, #508]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002ee8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eee:	4b7d      	ldr	r3, [pc, #500]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef6:	60bb      	str	r3, [r7, #8]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002efa:	4b7a      	ldr	r3, [pc, #488]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efe:	4a79      	ldr	r2, [pc, #484]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002f00:	f043 0320 	orr.w	r3, r3, #32
 8002f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f06:	4b77      	ldr	r3, [pc, #476]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	f003 0320 	and.w	r3, r3, #32
 8002f0e:	607b      	str	r3, [r7, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f12:	4b74      	ldr	r3, [pc, #464]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	4a73      	ldr	r2, [pc, #460]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f1e:	4b71      	ldr	r3, [pc, #452]	@ (80030e4 <MX_GPIO_Init+0x2d8>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	2120      	movs	r1, #32
 8002f2e:	486e      	ldr	r0, [pc, #440]	@ (80030e8 <MX_GPIO_Init+0x2dc>)
 8002f30:	f004 fea6 	bl	8007c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002f34:	2200      	movs	r2, #0
 8002f36:	210c      	movs	r1, #12
 8002f38:	486c      	ldr	r0, [pc, #432]	@ (80030ec <MX_GPIO_Init+0x2e0>)
 8002f3a:	f004 fea1 	bl	8007c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002f3e:	2201      	movs	r2, #1
 8002f40:	2108      	movs	r1, #8
 8002f42:	486b      	ldr	r0, [pc, #428]	@ (80030f0 <MX_GPIO_Init+0x2e4>)
 8002f44:	f004 fe9c 	bl	8007c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002f4e:	4867      	ldr	r0, [pc, #412]	@ (80030ec <MX_GPIO_Init+0x2e0>)
 8002f50:	f004 fe96 	bl	8007c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002f54:	2200      	movs	r2, #0
 8002f56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f5a:	4866      	ldr	r0, [pc, #408]	@ (80030f4 <MX_GPIO_Init+0x2e8>)
 8002f5c:	f004 fe90 	bl	8007c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002f60:	2200      	movs	r2, #0
 8002f62:	21c8      	movs	r1, #200	@ 0xc8
 8002f64:	4864      	ldr	r0, [pc, #400]	@ (80030f8 <MX_GPIO_Init+0x2ec>)
 8002f66:	f004 fe8b 	bl	8007c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002f76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	485f      	ldr	r0, [pc, #380]	@ (80030fc <MX_GPIO_Init+0x2f0>)
 8002f7e:	f004 fcd3 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002f82:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8002f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f90:	2303      	movs	r3, #3
 8002f92:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002f94:	230a      	movs	r3, #10
 8002f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4858      	ldr	r0, [pc, #352]	@ (8003100 <MX_GPIO_Init+0x2f4>)
 8002fa0:	f004 fcc2 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002fa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002faa:	2300      	movs	r3, #0
 8002fac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002fb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4852      	ldr	r0, [pc, #328]	@ (8003104 <MX_GPIO_Init+0x2f8>)
 8002fba:	f004 fcb5 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002fbe:	2340      	movs	r3, #64	@ 0x40
 8002fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002fc2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002fc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002fcc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4845      	ldr	r0, [pc, #276]	@ (80030e8 <MX_GPIO_Init+0x2dc>)
 8002fd4:	f004 fca8 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002fd8:	2320      	movs	r3, #32
 8002fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002fe8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fec:	4619      	mov	r1, r3
 8002fee:	483e      	ldr	r0, [pc, #248]	@ (80030e8 <MX_GPIO_Init+0x2dc>)
 8002ff0:	f004 fc9a 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8002ff4:	f241 030c 	movw	r3, #4108	@ 0x100c
 8002ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003002:	2300      	movs	r3, #0
 8003004:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003006:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800300a:	4619      	mov	r1, r3
 800300c:	4837      	ldr	r0, [pc, #220]	@ (80030ec <MX_GPIO_Init+0x2e0>)
 800300e:	f004 fc8b 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8003012:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003018:	2300      	movs	r3, #0
 800301a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8003020:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003024:	4619      	mov	r1, r3
 8003026:	4838      	ldr	r0, [pc, #224]	@ (8003108 <MX_GPIO_Init+0x2fc>)
 8003028:	f004 fc7e 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800302c:	2308      	movs	r3, #8
 800302e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003030:	2301      	movs	r3, #1
 8003032:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003038:	2300      	movs	r3, #0
 800303a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800303c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003040:	4619      	mov	r1, r3
 8003042:	482b      	ldr	r0, [pc, #172]	@ (80030f0 <MX_GPIO_Init+0x2e4>)
 8003044:	f004 fc70 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003048:	2310      	movs	r3, #16
 800304a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800304c:	2300      	movs	r3, #0
 800304e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003054:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003058:	4619      	mov	r1, r3
 800305a:	4823      	ldr	r0, [pc, #140]	@ (80030e8 <MX_GPIO_Init+0x2dc>)
 800305c:	f004 fc64 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8003060:	f248 0304 	movw	r3, #32772	@ 0x8004
 8003064:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003066:	2300      	movs	r3, #0
 8003068:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800306e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003072:	4619      	mov	r1, r3
 8003074:	481f      	ldr	r0, [pc, #124]	@ (80030f4 <MX_GPIO_Init+0x2e8>)
 8003076:	f004 fc57 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800307a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800307e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003080:	2301      	movs	r3, #1
 8003082:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003088:	2300      	movs	r3, #0
 800308a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800308c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003090:	4619      	mov	r1, r3
 8003092:	4818      	ldr	r0, [pc, #96]	@ (80030f4 <MX_GPIO_Init+0x2e8>)
 8003094:	f004 fc48 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8003098:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800309c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800309e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80030a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80030a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030ac:	4619      	mov	r1, r3
 80030ae:	480f      	ldr	r0, [pc, #60]	@ (80030ec <MX_GPIO_Init+0x2e0>)
 80030b0:	f004 fc3a 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80030b4:	2310      	movs	r3, #16
 80030b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b8:	2302      	movs	r3, #2
 80030ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c0:	2303      	movs	r3, #3
 80030c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80030c4:	230a      	movs	r3, #10
 80030c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80030c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030cc:	4619      	mov	r1, r3
 80030ce:	4809      	ldr	r0, [pc, #36]	@ (80030f4 <MX_GPIO_Init+0x2e8>)
 80030d0:	f004 fc2a 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80030d4:	23c8      	movs	r3, #200	@ 0xc8
 80030d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d8:	2301      	movs	r3, #1
 80030da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	637b      	str	r3, [r7, #52]	@ 0x34
 80030e0:	e014      	b.n	800310c <MX_GPIO_Init+0x300>
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40020c00 	.word	0x40020c00
 80030ec:	40022000 	.word	0x40022000
 80030f0:	40022800 	.word	0x40022800
 80030f4:	40021c00 	.word	0x40021c00
 80030f8:	40021800 	.word	0x40021800
 80030fc:	40021000 	.word	0x40021000
 8003100:	40020400 	.word	0x40020400
 8003104:	40022400 	.word	0x40022400
 8003108:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310c:	2300      	movs	r3, #0
 800310e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003110:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003114:	4619      	mov	r1, r3
 8003116:	4819      	ldr	r0, [pc, #100]	@ (800317c <MX_GPIO_Init+0x370>)
 8003118:	f004 fc06 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800311c:	2305      	movs	r3, #5
 800311e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003120:	2302      	movs	r3, #2
 8003122:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003128:	2303      	movs	r3, #3
 800312a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800312c:	230a      	movs	r3, #10
 800312e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003130:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003134:	4619      	mov	r1, r3
 8003136:	4812      	ldr	r0, [pc, #72]	@ (8003180 <MX_GPIO_Init+0x374>)
 8003138:	f004 fbf6 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800313c:	2304      	movs	r3, #4
 800313e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003140:	2300      	movs	r3, #0
 8003142:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	2300      	movs	r3, #0
 8003146:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8003148:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800314c:	4619      	mov	r1, r3
 800314e:	480b      	ldr	r0, [pc, #44]	@ (800317c <MX_GPIO_Init+0x370>)
 8003150:	f004 fbea 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8003154:	2328      	movs	r3, #40	@ 0x28
 8003156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003158:	2302      	movs	r3, #2
 800315a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315c:	2300      	movs	r3, #0
 800315e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003160:	2303      	movs	r3, #3
 8003162:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003164:	230a      	movs	r3, #10
 8003166:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003168:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800316c:	4619      	mov	r1, r3
 800316e:	4805      	ldr	r0, [pc, #20]	@ (8003184 <MX_GPIO_Init+0x378>)
 8003170:	f004 fbda 	bl	8007928 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003174:	bf00      	nop
 8003176:	3740      	adds	r7, #64	@ 0x40
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40021800 	.word	0x40021800
 8003180:	40020800 	.word	0x40020800
 8003184:	40020000 	.word	0x40020000

08003188 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b096      	sub	sp, #88	@ 0x58
 800318c:	af02      	add	r7, sp, #8
 800318e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST - 임시 비활성화 (SD 카드 테스트용) */
  LOG_WARN("USB Host initialization temporarily disabled to avoid RTOS task conflicts");
 8003190:	49b6      	ldr	r1, [pc, #728]	@ (800346c <StartDefaultTask+0x2e4>)
 8003192:	2002      	movs	r0, #2
 8003194:	f001 ff3a 	bl	800500c <LOGGER_SendFormatted>
  LOG_INFO("This eliminates USBH_Thread vs defaultTask priority conflicts");
 8003198:	49b5      	ldr	r1, [pc, #724]	@ (8003470 <StartDefaultTask+0x2e8>)
 800319a:	2001      	movs	r0, #1
 800319c:	f001 ff36 	bl	800500c <LOGGER_SendFormatted>
  // MX_USB_HOST_Init();  // SD 카드 테스트 완료 후 재활성화 예정
  /* USER CODE BEGIN 5 */
  
  // SD Card 초기화는 이미 main()에서 우선 완료됨
  LOG_INFO("📋 SD card initialization completed in main() - checking status...");
 80031a0:	49b4      	ldr	r1, [pc, #720]	@ (8003474 <StartDefaultTask+0x2ec>)
 80031a2:	2001      	movs	r0, #1
 80031a4:	f001 ff32 	bl	800500c <LOGGER_SendFormatted>
  
  LOG_INFO("=== STM32F746G-DISCO UART6 Test Started ===");
 80031a8:	49b3      	ldr	r1, [pc, #716]	@ (8003478 <StartDefaultTask+0x2f0>)
 80031aa:	2001      	movs	r0, #1
 80031ac:	f001 ff2e 	bl	800500c <LOGGER_SendFormatted>
  LOG_INFO("System Clock: %lu MHz", SystemCoreClock / 1000000);
 80031b0:	4bb2      	ldr	r3, [pc, #712]	@ (800347c <StartDefaultTask+0x2f4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4ab2      	ldr	r2, [pc, #712]	@ (8003480 <StartDefaultTask+0x2f8>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	0c9b      	lsrs	r3, r3, #18
 80031bc:	461a      	mov	r2, r3
 80031be:	49b1      	ldr	r1, [pc, #708]	@ (8003484 <StartDefaultTask+0x2fc>)
 80031c0:	2001      	movs	r0, #1
 80031c2:	f001 ff23 	bl	800500c <LOGGER_SendFormatted>
  LOG_INFO("UART6 Configuration: 115200 baud, 8N1");
 80031c6:	49b0      	ldr	r1, [pc, #704]	@ (8003488 <StartDefaultTask+0x300>)
 80031c8:	2001      	movs	r0, #1
 80031ca:	f001 ff1f 	bl	800500c <LOGGER_SendFormatted>
  LOG_INFO("📌 CRITICAL: For loopback test, connect PC6(TX) to PC7(RX) with a wire!");
 80031ce:	49af      	ldr	r1, [pc, #700]	@ (800348c <StartDefaultTask+0x304>)
 80031d0:	2001      	movs	r0, #1
 80031d2:	f001 ff1b 	bl	800500c <LOGGER_SendFormatted>
  LOG_INFO("📌 UART6 Pins: PC6(TX) = Arduino D1, PC7(RX) = Arduino D0");
 80031d6:	49ae      	ldr	r1, [pc, #696]	@ (8003490 <StartDefaultTask+0x308>)
 80031d8:	2001      	movs	r0, #1
 80031da:	f001 ff17 	bl	800500c <LOGGER_SendFormatted>
  
  // SD 카드 기본 기능 테스트 (Default Task에서 수행)
  LOG_INFO("📤 [TX_TASK] Starting SD card basic functionality test...");
 80031de:	49ad      	ldr	r1, [pc, #692]	@ (8003494 <StartDefaultTask+0x30c>)
 80031e0:	2001      	movs	r0, #1
 80031e2:	f001 ff13 	bl	800500c <LOGGER_SendFormatted>
  
  // SD 초기화 시도
  LOG_INFO("📤 [TX_TASK] Attempting SD card initialization...");
 80031e6:	49ac      	ldr	r1, [pc, #688]	@ (8003498 <StartDefaultTask+0x310>)
 80031e8:	2001      	movs	r0, #1
 80031ea:	f001 ff0f 	bl	800500c <LOGGER_SendFormatted>
  g_sd_initialization_result = SDStorage_Init();
 80031ee:	f7fd ff4b 	bl	8001088 <SDStorage_Init>
 80031f2:	4603      	mov	r3, r0
 80031f4:	4aa9      	ldr	r2, [pc, #676]	@ (800349c <StartDefaultTask+0x314>)
 80031f6:	6013      	str	r3, [r2, #0]
  
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 80031f8:	4ba8      	ldr	r3, [pc, #672]	@ (800349c <StartDefaultTask+0x314>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d124      	bne.n	800324a <StartDefaultTask+0xc2>
    LOG_INFO("✅ [TX_TASK] SD card initialization SUCCESS");
 8003200:	49a7      	ldr	r1, [pc, #668]	@ (80034a0 <StartDefaultTask+0x318>)
 8003202:	2001      	movs	r0, #1
 8003204:	f001 ff02 	bl	800500c <LOGGER_SendFormatted>
    
    // 기본 쓰기 테스트
    LOG_INFO("📤 [TX_TASK] Testing SD card write operation...");
 8003208:	49a6      	ldr	r1, [pc, #664]	@ (80034a4 <StartDefaultTask+0x31c>)
 800320a:	2001      	movs	r0, #1
 800320c:	f001 fefe 	bl	800500c <LOGGER_SendFormatted>
    const char* test_message = "SD Card Test - Hello World from FreeRTOS!\n";
 8003210:	4ba5      	ldr	r3, [pc, #660]	@ (80034a8 <StartDefaultTask+0x320>)
 8003212:	647b      	str	r3, [r7, #68]	@ 0x44
    int write_result = SDStorage_WriteLog(test_message, strlen(test_message));
 8003214:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003216:	f7fd f805 	bl	8000224 <strlen>
 800321a:	4603      	mov	r3, r0
 800321c:	4619      	mov	r1, r3
 800321e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003220:	f7fe f94e 	bl	80014c0 <SDStorage_WriteLog>
 8003224:	6438      	str	r0, [r7, #64]	@ 0x40
    
    if (write_result == SDSTORAGE_OK) {
 8003226:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003228:	2b00      	cmp	r3, #0
 800322a:	d108      	bne.n	800323e <StartDefaultTask+0xb6>
      LOG_INFO("✅ [TX_TASK] SD card write operation SUCCESS");
 800322c:	499f      	ldr	r1, [pc, #636]	@ (80034ac <StartDefaultTask+0x324>)
 800322e:	2001      	movs	r0, #1
 8003230:	f001 feec 	bl	800500c <LOGGER_SendFormatted>
      LOG_INFO("🎉 [TX_TASK] SD card functionality confirmed - ready for long-term logging");
 8003234:	499e      	ldr	r1, [pc, #632]	@ (80034b0 <StartDefaultTask+0x328>)
 8003236:	2001      	movs	r0, #1
 8003238:	f001 fee8 	bl	800500c <LOGGER_SendFormatted>
 800323c:	e010      	b.n	8003260 <StartDefaultTask+0xd8>
    } else {
      LOG_ERROR("❌ [TX_TASK] SD card write operation FAILED (code: %d)", write_result);
 800323e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003240:	499c      	ldr	r1, [pc, #624]	@ (80034b4 <StartDefaultTask+0x32c>)
 8003242:	2003      	movs	r0, #3
 8003244:	f001 fee2 	bl	800500c <LOGGER_SendFormatted>
 8003248:	e00a      	b.n	8003260 <StartDefaultTask+0xd8>
    }
  } else {
    LOG_ERROR("❌ [TX_TASK] SD card initialization FAILED (code: %d)", g_sd_initialization_result);
 800324a:	4b94      	ldr	r3, [pc, #592]	@ (800349c <StartDefaultTask+0x314>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	4999      	ldr	r1, [pc, #612]	@ (80034b8 <StartDefaultTask+0x330>)
 8003252:	2003      	movs	r0, #3
 8003254:	f001 feda 	bl	800500c <LOGGER_SendFormatted>
    LOG_INFO("📺 [TX_TASK] Continuing with terminal-only logging");
 8003258:	4998      	ldr	r1, [pc, #608]	@ (80034bc <StartDefaultTask+0x334>)
 800325a:	2001      	movs	r0, #1
 800325c:	f001 fed6 	bl	800500c <LOGGER_SendFormatted>
  }

  // SD 테스트 건너뛰고 바로 LoRa 시작
  
  LOG_INFO("📤 [TX_TASK] Starting LoRa initialization and JOIN...");
 8003260:	4997      	ldr	r1, [pc, #604]	@ (80034c0 <StartDefaultTask+0x338>)
 8003262:	2001      	movs	r0, #1
 8003264:	f001 fed2 	bl	800500c <LOGGER_SendFormatted>
  
  // UART 연결 (LoRa 통신을 위해 필수)
  LOG_INFO("📤 [TX_TASK] Connecting to UART for LoRa communication...");
 8003268:	4996      	ldr	r1, [pc, #600]	@ (80034c4 <StartDefaultTask+0x33c>)
 800326a:	2001      	movs	r0, #1
 800326c:	f001 fece 	bl	800500c <LOGGER_SendFormatted>
  UartStatus uart_status = UART_Connect("UART6");
 8003270:	4895      	ldr	r0, [pc, #596]	@ (80034c8 <StartDefaultTask+0x340>)
 8003272:	f001 ffad 	bl	80051d0 <UART_Connect>
 8003276:	4603      	mov	r3, r0
 8003278:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (uart_status == UART_STATUS_OK) {
 800327c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003280:	2b00      	cmp	r3, #0
 8003282:	d104      	bne.n	800328e <StartDefaultTask+0x106>
    LOG_INFO("✅ [TX_TASK] UART connection successful");
 8003284:	4991      	ldr	r1, [pc, #580]	@ (80034cc <StartDefaultTask+0x344>)
 8003286:	2001      	movs	r0, #1
 8003288:	f001 fec0 	bl	800500c <LOGGER_SendFormatted>
 800328c:	e006      	b.n	800329c <StartDefaultTask+0x114>
  } else {
    LOG_ERROR("❌ [TX_TASK] UART connection failed (status: %d)", uart_status);
 800328e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003292:	461a      	mov	r2, r3
 8003294:	498e      	ldr	r1, [pc, #568]	@ (80034d0 <StartDefaultTask+0x348>)
 8003296:	2003      	movs	r0, #3
 8003298:	f001 feb8 	bl	800500c <LOGGER_SendFormatted>
  }
  
  LOG_INFO("📤 [TX_TASK] Waiting for LoRa module boot-up (5 seconds - optimized for long-term test)...");
 800329c:	498d      	ldr	r1, [pc, #564]	@ (80034d4 <StartDefaultTask+0x34c>)
 800329e:	2001      	movs	r0, #1
 80032a0:	f001 feb4 	bl	800500c <LOGGER_SendFormatted>
  osDelay(5000); // 5초 대기 (장기 테스트를 위해 단축)
 80032a4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80032a8:	f011 f89a 	bl	80143e0 <osDelay>
  
  // LoraStarter 컨텍스트 초기화 (TDD 검증된 기본 설정 사용)
  LoraStarterContext lora_ctx;
  LoraStarter_InitWithDefaults(&lora_ctx, "TEST");
 80032ac:	f107 030c 	add.w	r3, r7, #12
 80032b0:	4989      	ldr	r1, [pc, #548]	@ (80034d8 <StartDefaultTask+0x350>)
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd fa70 	bl	8000798 <LoraStarter_InitWithDefaults>
  
  LOG_INFO("=== LoRa Initialization ===");
 80032b8:	4988      	ldr	r1, [pc, #544]	@ (80034dc <StartDefaultTask+0x354>)
 80032ba:	2001      	movs	r0, #1
 80032bc:	f001 fea6 	bl	800500c <LOGGER_SendFormatted>
  LOG_INFO("📤 Commands: %d, Message: %s, Max retries: %d", 
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	460b      	mov	r3, r1
 80032ca:	4985      	ldr	r1, [pc, #532]	@ (80034e0 <StartDefaultTask+0x358>)
 80032cc:	2001      	movs	r0, #1
 80032ce:	f001 fe9d 	bl	800500c <LOGGER_SendFormatted>
           lora_ctx.num_commands, lora_ctx.send_message, lora_ctx.max_retry_count);
           
  // SD 카드 로깅 설정 (간단한 방식)
  extern int g_sd_initialization_result; // main()에서 설정된 SD 결과
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 80032d2:	4b72      	ldr	r3, [pc, #456]	@ (800349c <StartDefaultTask+0x314>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d104      	bne.n	80032e4 <StartDefaultTask+0x15c>
    LOG_INFO("🗂️ LoRa logs will be saved to SD card: lora_logs/");
 80032da:	4982      	ldr	r1, [pc, #520]	@ (80034e4 <StartDefaultTask+0x35c>)
 80032dc:	2001      	movs	r0, #1
 80032de:	f001 fe95 	bl	800500c <LOGGER_SendFormatted>
 80032e2:	e003      	b.n	80032ec <StartDefaultTask+0x164>
  } else {
    LOG_INFO("📺 LoRa logs will be displayed on terminal only (SD not available)");
 80032e4:	4980      	ldr	r1, [pc, #512]	@ (80034e8 <StartDefaultTask+0x360>)
 80032e6:	2001      	movs	r0, #1
 80032e8:	f001 fe90 	bl	800500c <LOGGER_SendFormatted>
  }
  
  // LoRa 로깅 모드 설정 (터미널에서 모든 로그를 보기 위해 INFO 레벨 유지)
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 80032ec:	4b6b      	ldr	r3, [pc, #428]	@ (800349c <StartDefaultTask+0x314>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <StartDefaultTask+0x182>
    LOGGER_SetMode(LOGGER_MODE_DUAL);  // 터미널 + SD 동시 출력
 80032f4:	2002      	movs	r0, #2
 80032f6:	f001 fe65 	bl	8004fc4 <LOGGER_SetMode>
    LOGGER_SetFilterLevel(LOG_LEVEL_INFO);  // 터미널에서 모든 로그 확인 가능
 80032fa:	2001      	movs	r0, #1
 80032fc:	f001 fe52 	bl	8004fa4 <LOGGER_SetFilterLevel>
    LOG_WARN("✅ LoRa logging mode: DUAL (Terminal + SD), INFO level for debugging");
 8003300:	497a      	ldr	r1, [pc, #488]	@ (80034ec <StartDefaultTask+0x364>)
 8003302:	2002      	movs	r0, #2
 8003304:	f001 fe82 	bl	800500c <LOGGER_SendFormatted>
 8003308:	e009      	b.n	800331e <StartDefaultTask+0x196>
  } else {
    LOGGER_SetMode(LOGGER_MODE_TERMINAL_ONLY);
 800330a:	2000      	movs	r0, #0
 800330c:	f001 fe5a 	bl	8004fc4 <LOGGER_SetMode>
    LOGGER_SetFilterLevel(LOG_LEVEL_INFO);
 8003310:	2001      	movs	r0, #1
 8003312:	f001 fe47 	bl	8004fa4 <LOGGER_SetFilterLevel>
    LOG_INFO("📺 LoRa logging mode: Terminal only");
 8003316:	4976      	ldr	r1, [pc, #472]	@ (80034f0 <StartDefaultTask+0x368>)
 8003318:	2001      	movs	r0, #1
 800331a:	f001 fe77 	bl	800500c <LOGGER_SendFormatted>
  }
  
  // LoRa 프로세스 루프 (초기화 → JOIN → 주기적 전송)
  LOG_INFO("📤 [TX_TASK] Starting LoRa process loop...");
 800331e:	4975      	ldr	r1, [pc, #468]	@ (80034f4 <StartDefaultTask+0x36c>)
 8003320:	2001      	movs	r0, #1
 8003322:	f001 fe73 	bl	800500c <LOGGER_SendFormatted>
  
  for(;;)
  {
    // 수신된 응답이 있으면 LoraStarter에 전달
    const char* rx_data = NULL;
 8003326:	2300      	movs	r3, #0
 8003328:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (lora_new_response) {
 800332a:	4b73      	ldr	r3, [pc, #460]	@ (80034f8 <StartDefaultTask+0x370>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d004      	beq.n	800333e <StartDefaultTask+0x1b6>
      rx_data = lora_rx_response;
 8003334:	4b71      	ldr	r3, [pc, #452]	@ (80034fc <StartDefaultTask+0x374>)
 8003336:	64fb      	str	r3, [r7, #76]	@ 0x4c
      lora_new_response = false; // 플래그 클리어
 8003338:	4b6f      	ldr	r3, [pc, #444]	@ (80034f8 <StartDefaultTask+0x370>)
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
      // 응답 처리 - 로그는 ResponseHandler에서 이미 출력됨
    }
    
    // LoraStarter 프로세스 실행
    LoraStarter_Process(&lora_ctx, rx_data);
 800333e:	f107 030c 	add.w	r3, r7, #12
 8003342:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003344:	4618      	mov	r0, r3
 8003346:	f7fd fa6f 	bl	8000828 <LoraStarter_Process>
    
    // 상태별 처리 간격 및 디버깅 (중요한 상태만)
    static int last_state = -1;
    if (lora_ctx.state != last_state) {
 800334a:	7b3b      	ldrb	r3, [r7, #12]
 800334c:	461a      	mov	r2, r3
 800334e:	4b6c      	ldr	r3, [pc, #432]	@ (8003500 <StartDefaultTask+0x378>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d01a      	beq.n	800338c <StartDefaultTask+0x204>
      // JOIN, SEND, ERROR 등 중요한 상태 변경만 로그 출력
      if (lora_ctx.state == LORA_STATE_SEND_JOIN || 
 8003356:	7b3b      	ldrb	r3, [r7, #12]
 8003358:	2b03      	cmp	r3, #3
 800335a:	d008      	beq.n	800336e <StartDefaultTask+0x1e6>
          lora_ctx.state == LORA_STATE_SEND_PERIODIC ||
 800335c:	7b3b      	ldrb	r3, [r7, #12]
      if (lora_ctx.state == LORA_STATE_SEND_JOIN || 
 800335e:	2b05      	cmp	r3, #5
 8003360:	d005      	beq.n	800336e <StartDefaultTask+0x1e6>
          lora_ctx.state == LORA_STATE_DONE ||
 8003362:	7b3b      	ldrb	r3, [r7, #12]
          lora_ctx.state == LORA_STATE_SEND_PERIODIC ||
 8003364:	2b09      	cmp	r3, #9
 8003366:	d002      	beq.n	800336e <StartDefaultTask+0x1e6>
          lora_ctx.state == LORA_STATE_ERROR) {
 8003368:	7b3b      	ldrb	r3, [r7, #12]
          lora_ctx.state == LORA_STATE_DONE ||
 800336a:	2b0a      	cmp	r3, #10
 800336c:	d10a      	bne.n	8003384 <StartDefaultTask+0x1fc>
        LOG_INFO("[TX_TASK] ⚙️ LoRa State: %d, cmd_index: %d/%d", 
 800336e:	7b3b      	ldrb	r3, [r7, #12]
 8003370:	4619      	mov	r1, r3
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	4613      	mov	r3, r2
 800337a:	460a      	mov	r2, r1
 800337c:	4961      	ldr	r1, [pc, #388]	@ (8003504 <StartDefaultTask+0x37c>)
 800337e:	2001      	movs	r0, #1
 8003380:	f001 fe44 	bl	800500c <LOGGER_SendFormatted>
                  lora_ctx.state, lora_ctx.cmd_index, lora_ctx.num_commands);
      }
      last_state = lora_ctx.state;
 8003384:	7b3b      	ldrb	r3, [r7, #12]
 8003386:	461a      	mov	r2, r3
 8003388:	4b5d      	ldr	r3, [pc, #372]	@ (8003500 <StartDefaultTask+0x378>)
 800338a:	601a      	str	r2, [r3, #0]
    }
    
    switch(lora_ctx.state) {
 800338c:	7b3b      	ldrb	r3, [r7, #12]
 800338e:	2b0a      	cmp	r3, #10
 8003390:	d855      	bhi.n	800343e <StartDefaultTask+0x2b6>
 8003392:	a201      	add	r2, pc, #4	@ (adr r2, 8003398 <StartDefaultTask+0x210>)
 8003394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003398:	080033c5 	.word	0x080033c5
 800339c:	080033cf 	.word	0x080033cf
 80033a0:	080033e7 	.word	0x080033e7
 80033a4:	080033f1 	.word	0x080033f1
 80033a8:	080033fb 	.word	0x080033fb
 80033ac:	080033f1 	.word	0x080033f1
 80033b0:	080033fb 	.word	0x080033fb
 80033b4:	08003405 	.word	0x08003405
 80033b8:	0800340f 	.word	0x0800340f
 80033bc:	08003419 	.word	0x08003419
 80033c0:	08003419 	.word	0x08003419
      case LORA_STATE_INIT:
        osDelay(500); // 초기화 상태는 빠르게
 80033c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80033c8:	f011 f80a 	bl	80143e0 <osDelay>
        break;
 80033cc:	e03c      	b.n	8003448 <StartDefaultTask+0x2c0>
      case LORA_STATE_SEND_CMD:
        LOG_INFO("[TX_TASK] 📤 Sending command %d/%d", 
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	494c      	ldr	r1, [pc, #304]	@ (8003508 <StartDefaultTask+0x380>)
 80033d6:	2001      	movs	r0, #1
 80033d8:	f001 fe18 	bl	800500c <LOGGER_SendFormatted>
                lora_ctx.cmd_index + 1, lora_ctx.num_commands);
        osDelay(1000); // 명령어 전송 후 1초 대기
 80033dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80033e0:	f010 fffe 	bl	80143e0 <osDelay>
        break;
 80033e4:	e030      	b.n	8003448 <StartDefaultTask+0x2c0>
      case LORA_STATE_WAIT_OK:
        // OK 응답 대기 중 - 조용히 대기
        osDelay(2000); // OK 응답 대기 중 2초 간격
 80033e6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80033ea:	f010 fff9 	bl	80143e0 <osDelay>
        break;
 80033ee:	e02b      	b.n	8003448 <StartDefaultTask+0x2c0>
      case LORA_STATE_SEND_JOIN:
      case LORA_STATE_SEND_PERIODIC:
        osDelay(2000); // JOIN/SEND 명령어 전송 후 2초 대기
 80033f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80033f4:	f010 fff4 	bl	80143e0 <osDelay>
        break;
 80033f8:	e026      	b.n	8003448 <StartDefaultTask+0x2c0>
      case LORA_STATE_WAIT_JOIN_OK:
      case LORA_STATE_WAIT_SEND_RESPONSE:
        osDelay(3000); // JOIN/SEND 응답 대기 중 3초 간격
 80033fa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80033fe:	f010 ffef 	bl	80143e0 <osDelay>
        break;
 8003402:	e021      	b.n	8003448 <StartDefaultTask+0x2c0>
      case LORA_STATE_WAIT_SEND_INTERVAL:
        // 주기적 전송 대기 중 - 로그 출력 없이 조용히 대기
        osDelay(5000); // 주기적 전송 대기 중 5초 간격으로 체크
 8003404:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003408:	f010 ffea 	bl	80143e0 <osDelay>
        break;
 800340c:	e01c      	b.n	8003448 <StartDefaultTask+0x2c0>
      case LORA_STATE_JOIN_RETRY:
        osDelay(5000); // 재시도 대기 5초
 800340e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003412:	f010 ffe5 	bl	80143e0 <osDelay>
        break;
 8003416:	e017      	b.n	8003448 <StartDefaultTask+0x2c0>
      case LORA_STATE_DONE:
      case LORA_STATE_ERROR:
        LOG_INFO("📤 [TX_TASK] LoRa process completed with state: %s", 
 8003418:	7b3b      	ldrb	r3, [r7, #12]
 800341a:	2b09      	cmp	r3, #9
 800341c:	d101      	bne.n	8003422 <StartDefaultTask+0x29a>
 800341e:	4b3b      	ldr	r3, [pc, #236]	@ (800350c <StartDefaultTask+0x384>)
 8003420:	e000      	b.n	8003424 <StartDefaultTask+0x29c>
 8003422:	4b3b      	ldr	r3, [pc, #236]	@ (8003510 <StartDefaultTask+0x388>)
 8003424:	461a      	mov	r2, r3
 8003426:	493b      	ldr	r1, [pc, #236]	@ (8003514 <StartDefaultTask+0x38c>)
 8003428:	2001      	movs	r0, #1
 800342a:	f001 fdef 	bl	800500c <LOGGER_SendFormatted>
                lora_ctx.state == LORA_STATE_DONE ? "DONE" : "ERROR");
        goto idle_loop;
 800342e:	bf00      	nop
    }
  }

idle_loop:
  /* Infinite idle loop */
  LOG_INFO("📤 [TX_TASK] Entering idle mode...");
 8003430:	4939      	ldr	r1, [pc, #228]	@ (8003518 <StartDefaultTask+0x390>)
 8003432:	2001      	movs	r0, #1
 8003434:	f001 fdea 	bl	800500c <LOGGER_SendFormatted>
  uint32_t idle_counter = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800343c:	e005      	b.n	800344a <StartDefaultTask+0x2c2>
        osDelay(1000);
 800343e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003442:	f010 ffcd 	bl	80143e0 <osDelay>
        break;
 8003446:	bf00      	nop
  {
 8003448:	e76d      	b.n	8003326 <StartDefaultTask+0x19e>
  
  for(;;)
  {
    // 30초마다 idle 상태 표시
    osDelay(30000);
 800344a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800344e:	f010 ffc7 	bl	80143e0 <osDelay>
    idle_counter++;
 8003452:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003454:	3301      	adds	r3, #1
 8003456:	64bb      	str	r3, [r7, #72]	@ 0x48
    LOG_INFO("📤 [TX_TASK] Idle mode: %lu minutes elapsed", idle_counter / 2);
 8003458:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800345a:	085b      	lsrs	r3, r3, #1
 800345c:	461a      	mov	r2, r3
 800345e:	492f      	ldr	r1, [pc, #188]	@ (800351c <StartDefaultTask+0x394>)
 8003460:	2001      	movs	r0, #1
 8003462:	f001 fdd3 	bl	800500c <LOGGER_SendFormatted>
    osDelay(30000);
 8003466:	bf00      	nop
 8003468:	e7ef      	b.n	800344a <StartDefaultTask+0x2c2>
 800346a:	bf00      	nop
 800346c:	08019acc 	.word	0x08019acc
 8003470:	08019b18 	.word	0x08019b18
 8003474:	08019b58 	.word	0x08019b58
 8003478:	08019ba0 	.word	0x08019ba0
 800347c:	2000001c 	.word	0x2000001c
 8003480:	431bde83 	.word	0x431bde83
 8003484:	08019bcc 	.word	0x08019bcc
 8003488:	08019be4 	.word	0x08019be4
 800348c:	08019c0c 	.word	0x08019c0c
 8003490:	08019c58 	.word	0x08019c58
 8003494:	08019c94 	.word	0x08019c94
 8003498:	08019cd0 	.word	0x08019cd0
 800349c:	20000014 	.word	0x20000014
 80034a0:	08019d04 	.word	0x08019d04
 80034a4:	08019d34 	.word	0x08019d34
 80034a8:	08019d68 	.word	0x08019d68
 80034ac:	08019d94 	.word	0x08019d94
 80034b0:	08019dc4 	.word	0x08019dc4
 80034b4:	08019e14 	.word	0x08019e14
 80034b8:	08019e4c 	.word	0x08019e4c
 80034bc:	08019e84 	.word	0x08019e84
 80034c0:	08019ebc 	.word	0x08019ebc
 80034c4:	08019ef4 	.word	0x08019ef4
 80034c8:	08019f30 	.word	0x08019f30
 80034cc:	08019f38 	.word	0x08019f38
 80034d0:	08019f64 	.word	0x08019f64
 80034d4:	08019f98 	.word	0x08019f98
 80034d8:	08019ff8 	.word	0x08019ff8
 80034dc:	0801a000 	.word	0x0801a000
 80034e0:	0801a01c 	.word	0x0801a01c
 80034e4:	0801a04c 	.word	0x0801a04c
 80034e8:	0801a084 	.word	0x0801a084
 80034ec:	0801a0cc 	.word	0x0801a0cc
 80034f0:	0801a114 	.word	0x0801a114
 80034f4:	0801a13c 	.word	0x0801a13c
 80034f8:	200014c8 	.word	0x200014c8
 80034fc:	200012c8 	.word	0x200012c8
 8003500:	20000018 	.word	0x20000018
 8003504:	0801a16c 	.word	0x0801a16c
 8003508:	0801a1a0 	.word	0x0801a1a0
 800350c:	0801a1c8 	.word	0x0801a1c8
 8003510:	0801a1d0 	.word	0x0801a1d0
 8003514:	0801a1d8 	.word	0x0801a1d8
 8003518:	0801a210 	.word	0x0801a210
 800351c:	0801a238 	.word	0x0801a238

08003520 <StartSDLoggingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSDLoggingTask */
void StartSDLoggingTask(void const * argument)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b0b2      	sub	sp, #200	@ 0xc8
 8003524:	af02      	add	r7, sp, #8
 8003526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSDLoggingTask */
  LOG_INFO("=== SD Logging Task Started ===");
 8003528:	4971      	ldr	r1, [pc, #452]	@ (80036f0 <StartSDLoggingTask+0x1d0>)
 800352a:	2001      	movs	r0, #1
 800352c:	f001 fd6e 	bl	800500c <LOGGER_SendFormatted>
  
  // 시스템 안정화 대기 (다른 태스크들 먼저 시작)
  osDelay(3000);
 8003530:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003534:	f010 ff54 	bl	80143e0 <osDelay>
  
  // SD 초기화 시도 (타임아웃 있는 안전한 방식)
  LOG_INFO("[SD_TASK] 🔄 Attempting SD card initialization...");
 8003538:	496e      	ldr	r1, [pc, #440]	@ (80036f4 <StartSDLoggingTask+0x1d4>)
 800353a:	2001      	movs	r0, #1
 800353c:	f001 fd66 	bl	800500c <LOGGER_SendFormatted>
  
  // 단계별 안전한 SD 초기화
  int init_attempts = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  const int MAX_INIT_ATTEMPTS = 3;
 8003546:	2303      	movs	r3, #3
 8003548:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  
  for (init_attempts = 0; init_attempts < MAX_INIT_ATTEMPTS; init_attempts++) {
 800354c:	2300      	movs	r3, #0
 800354e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003552:	e054      	b.n	80035fe <StartSDLoggingTask+0xde>
    LOG_INFO("[SD_TASK] Initialization attempt %d/%d", init_attempts + 1, MAX_INIT_ATTEMPTS);
 8003554:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800355e:	4966      	ldr	r1, [pc, #408]	@ (80036f8 <StartSDLoggingTask+0x1d8>)
 8003560:	2001      	movs	r0, #1
 8003562:	f001 fd53 	bl	800500c <LOGGER_SendFormatted>
    
    // SDStorage_Init을 타임아웃과 함께 호출
    uint32_t init_start_time = HAL_GetTick();
 8003566:	f002 fb1b 	bl	8005ba0 <HAL_GetTick>
 800356a:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
    const uint32_t INIT_TIMEOUT_MS = 10000;  // 10초 타임아웃
 800356e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003572:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    
    // TODO: 실제로는 별도 태스크에서 SDStorage_Init 호출하고 여기서는 폴링
    // 현재는 간단히 직접 호출하되 타임아웃 체크
    int init_result = SDStorage_Init();
 8003576:	f7fd fd87 	bl	8001088 <SDStorage_Init>
 800357a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    uint32_t init_duration = HAL_GetTick() - init_start_time;
 800357e:	f002 fb0f 	bl	8005ba0 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    
    LOG_INFO("[SD_TASK] Init attempt %d took %lu ms, result: %d", 
 800358e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800359e:	4957      	ldr	r1, [pc, #348]	@ (80036fc <StartSDLoggingTask+0x1dc>)
 80035a0:	2001      	movs	r0, #1
 80035a2:	f001 fd33 	bl	800500c <LOGGER_SendFormatted>
             init_attempts + 1, init_duration, init_result);
    
    if (init_result == SDSTORAGE_OK) {
 80035a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10a      	bne.n	80035c4 <StartSDLoggingTask+0xa4>
      LOG_INFO("[SD_TASK] ✅ SD initialization successful!");
 80035ae:	4954      	ldr	r1, [pc, #336]	@ (8003700 <StartSDLoggingTask+0x1e0>)
 80035b0:	2001      	movs	r0, #1
 80035b2:	f001 fd2b 	bl	800500c <LOGGER_SendFormatted>
      g_sd_initialization_result = SDSTORAGE_OK;
 80035b6:	4b53      	ldr	r3, [pc, #332]	@ (8003704 <StartSDLoggingTask+0x1e4>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
      g_sd_logging_active = true;
 80035bc:	4b52      	ldr	r3, [pc, #328]	@ (8003708 <StartSDLoggingTask+0x1e8>)
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
      break;
 80035c2:	e022      	b.n	800360a <StartSDLoggingTask+0xea>
    } else {
      LOG_WARN("[SD_TASK] ⚠️ SD init attempt %d failed (code: %d)", 
 80035c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035ce:	494f      	ldr	r1, [pc, #316]	@ (800370c <StartSDLoggingTask+0x1ec>)
 80035d0:	2002      	movs	r0, #2
 80035d2:	f001 fd1b 	bl	800500c <LOGGER_SendFormatted>
               init_attempts + 1, init_result);
      
      if (init_attempts < MAX_INIT_ATTEMPTS - 1) {
 80035d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80035da:	3b01      	subs	r3, #1
 80035dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80035e0:	429a      	cmp	r2, r3
 80035e2:	da07      	bge.n	80035f4 <StartSDLoggingTask+0xd4>
        LOG_INFO("[SD_TASK] Waiting 5 seconds before retry...");
 80035e4:	494a      	ldr	r1, [pc, #296]	@ (8003710 <StartSDLoggingTask+0x1f0>)
 80035e6:	2001      	movs	r0, #1
 80035e8:	f001 fd10 	bl	800500c <LOGGER_SendFormatted>
        osDelay(5000);
 80035ec:	f241 3088 	movw	r0, #5000	@ 0x1388
 80035f0:	f010 fef6 	bl	80143e0 <osDelay>
  for (init_attempts = 0; init_attempts < MAX_INIT_ATTEMPTS; init_attempts++) {
 80035f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80035f8:	3301      	adds	r3, #1
 80035fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80035fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003602:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003606:	429a      	cmp	r2, r3
 8003608:	dba4      	blt.n	8003554 <StartSDLoggingTask+0x34>
      }
    }
  }
  
  if (!g_sd_logging_active) {
 800360a:	4b3f      	ldr	r3, [pc, #252]	@ (8003708 <StartSDLoggingTask+0x1e8>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	f083 0301 	eor.w	r3, r3, #1
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00c      	beq.n	8003632 <StartSDLoggingTask+0x112>
    LOG_ERROR("[SD_TASK] ❌ All SD initialization attempts failed");
 8003618:	493e      	ldr	r1, [pc, #248]	@ (8003714 <StartSDLoggingTask+0x1f4>)
 800361a:	2003      	movs	r0, #3
 800361c:	f001 fcf6 	bl	800500c <LOGGER_SendFormatted>
    LOG_INFO("[SD_TASK] Continuing with terminal-only logging");
 8003620:	493d      	ldr	r1, [pc, #244]	@ (8003718 <StartSDLoggingTask+0x1f8>)
 8003622:	2001      	movs	r0, #1
 8003624:	f001 fcf2 	bl	800500c <LOGGER_SendFormatted>
    
    // SD 실패해도 태스크는 계속 실행 (나중에 재시도 가능)
    for(;;) {
      osDelay(60000);  // 1분마다 재시도 체크 (향후 확장)
 8003628:	f64e 2060 	movw	r0, #60000	@ 0xea60
 800362c:	f010 fed8 	bl	80143e0 <osDelay>
 8003630:	e7fa      	b.n	8003628 <StartSDLoggingTask+0x108>
    }
  }
  
  LOG_INFO("[SD_TASK] 🗂️ SD logging queue processing started");
 8003632:	493a      	ldr	r1, [pc, #232]	@ (800371c <StartSDLoggingTask+0x1fc>)
 8003634:	2001      	movs	r0, #1
 8003636:	f001 fce9 	bl	800500c <LOGGER_SendFormatted>
  
  // SD 로그 큐 처리 메인 루프
  for(;;)
  {
    SDLogEntry_t log_entry;
    osEvent event = osMessageGet(sdLogQueueHandle, 1000);  // 1초 타임아웃
 800363a:	4b39      	ldr	r3, [pc, #228]	@ (8003720 <StartSDLoggingTask+0x200>)
 800363c:	6819      	ldr	r1, [r3, #0]
 800363e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8003642:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003646:	4618      	mov	r0, r3
 8003648:	f010 ff46 	bl	80144d8 <osMessageGet>
    
    if (event.status == osEventMessage) {
 800364c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003650:	2b10      	cmp	r3, #16
 8003652:	d12d      	bne.n	80036b0 <StartSDLoggingTask+0x190>
      // 큐에서 로그 엔트리 수신
      log_entry = *((SDLogEntry_t*)event.value.p);
 8003654:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003658:	f107 0308 	add.w	r3, r7, #8
 800365c:	4611      	mov	r1, r2
 800365e:	2288      	movs	r2, #136	@ 0x88
 8003660:	4618      	mov	r0, r3
 8003662:	f013 fd6e 	bl	8017142 <memcpy>
      
      // SD에 안전하게 쓰기 (타임아웃 포함)
      uint32_t write_start = HAL_GetTick();
 8003666:	f002 fa9b 	bl	8005ba0 <HAL_GetTick>
 800366a:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
      int write_result = SDStorage_WriteLog(log_entry.message, log_entry.length);
 800366e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003672:	f107 0308 	add.w	r3, r7, #8
 8003676:	4611      	mov	r1, r2
 8003678:	4618      	mov	r0, r3
 800367a:	f7fd ff21 	bl	80014c0 <SDStorage_WriteLog>
 800367e:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
      uint32_t write_duration = HAL_GetTick() - write_start;
 8003682:	f002 fa8d 	bl	8005ba0 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
      
      if (write_result != SDSTORAGE_OK) {
 8003692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <StartSDLoggingTask+0x190>
        // SD 쓰기 실패 - 터미널에만 에러 출력 (무한루프 방지)
        printf("[SD_TASK] Write failed (duration: %lu ms, result: %d)\n", 
 800369a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800369e:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80036a2:	4820      	ldr	r0, [pc, #128]	@ (8003724 <StartSDLoggingTask+0x204>)
 80036a4:	f013 fbae 	bl	8016e04 <iprintf>
               write_duration, write_result);
        
        // SD 쓰기 실패 시 잠시 대기 후 재시도 여부 결정
        osDelay(1000);
 80036a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80036ac:	f010 fe98 	bl	80143e0 <osDelay>
      }
    }
    
    // 주기적으로 SD 상태 체크 (1분마다)
    static uint32_t status_check_counter = 0;
    status_check_counter++;
 80036b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003728 <StartSDLoggingTask+0x208>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3301      	adds	r3, #1
 80036b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003728 <StartSDLoggingTask+0x208>)
 80036b8:	6013      	str	r3, [r2, #0]
    if (status_check_counter % 60 == 0) {  // 60초마다
 80036ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003728 <StartSDLoggingTask+0x208>)
 80036bc:	6819      	ldr	r1, [r3, #0]
 80036be:	4b1b      	ldr	r3, [pc, #108]	@ (800372c <StartSDLoggingTask+0x20c>)
 80036c0:	fba3 2301 	umull	r2, r3, r3, r1
 80036c4:	095a      	lsrs	r2, r3, #5
 80036c6:	4613      	mov	r3, r2
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	1aca      	subs	r2, r1, r3
 80036d0:	2a00      	cmp	r2, #0
 80036d2:	d108      	bne.n	80036e6 <StartSDLoggingTask+0x1c6>
      if (SDStorage_IsReady()) {
 80036d4:	f7fd fff4 	bl	80016c0 <SDStorage_IsReady>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d103      	bne.n	80036e6 <StartSDLoggingTask+0x1c6>
        // SD 상태 정상
      } else {
        // SD 상태 이상 - 재초기화 시도 (향후 확장)
        LOG_WARN("[SD_TASK] SD card appears disconnected - monitoring");
 80036de:	4914      	ldr	r1, [pc, #80]	@ (8003730 <StartSDLoggingTask+0x210>)
 80036e0:	2002      	movs	r0, #2
 80036e2:	f001 fc93 	bl	800500c <LOGGER_SendFormatted>
      }
    }
    
    osDelay(50);  // CPU 부하 방지
 80036e6:	2032      	movs	r0, #50	@ 0x32
 80036e8:	f010 fe7a 	bl	80143e0 <osDelay>
  {
 80036ec:	e7a5      	b.n	800363a <StartSDLoggingTask+0x11a>
 80036ee:	bf00      	nop
 80036f0:	0801a268 	.word	0x0801a268
 80036f4:	0801a288 	.word	0x0801a288
 80036f8:	0801a2bc 	.word	0x0801a2bc
 80036fc:	0801a2e4 	.word	0x0801a2e4
 8003700:	0801a318 	.word	0x0801a318
 8003704:	20000014 	.word	0x20000014
 8003708:	200012c0 	.word	0x200012c0
 800370c:	0801a344 	.word	0x0801a344
 8003710:	0801a37c 	.word	0x0801a37c
 8003714:	0801a3a8 	.word	0x0801a3a8
 8003718:	0801a3dc 	.word	0x0801a3dc
 800371c:	0801a40c 	.word	0x0801a40c
 8003720:	200012bc 	.word	0x200012bc
 8003724:	0801a444 	.word	0x0801a444
 8003728:	20001538 	.word	0x20001538
 800372c:	88888889 	.word	0x88888889
 8003730:	0801a47c 	.word	0x0801a47c

08003734 <StartReceiveTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800373a:	af02      	add	r7, sp, #8
 800373c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003740:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003744:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartReceiveTask */
  LOG_INFO("=== DMA-based Receive Task Started ===");
 8003746:	498c      	ldr	r1, [pc, #560]	@ (8003978 <StartReceiveTask+0x244>)
 8003748:	2001      	movs	r0, #1
 800374a:	f001 fc5f 	bl	800500c <LOGGER_SendFormatted>
  
  // UART 초기화 대기
  osDelay(2000);
 800374e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003752:	f010 fe45 	bl	80143e0 <osDelay>
  
  // TDD 모듈들을 사용한 DMA 기반 수신 태스크
  char local_buffer[512];
  int local_bytes_received = 0;
 8003756:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800375a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
  
  for(;;)
  {
    // TDD UART 모듈을 통한 DMA 기반 수신 체크
    UartStatus status = UART_Receive(local_buffer, sizeof(local_buffer), &local_bytes_received);
 8003762:	f107 0208 	add.w	r2, r7, #8
 8003766:	f107 030c 	add.w	r3, r7, #12
 800376a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800376e:	4618      	mov	r0, r3
 8003770:	f001 fdaa 	bl	80052c8 <UART_Receive>
 8003774:	4603      	mov	r3, r0
 8003776:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    
    // 디버깅용: 수신 상태 체크 (에러 상태일 때만)
    static uint32_t debug_counter = 0;
    debug_counter++;
 800377a:	4b80      	ldr	r3, [pc, #512]	@ (800397c <StartReceiveTask+0x248>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	3301      	adds	r3, #1
 8003780:	4a7e      	ldr	r2, [pc, #504]	@ (800397c <StartReceiveTask+0x248>)
 8003782:	6013      	str	r3, [r2, #0]
    if (debug_counter % 1200 == 0 && status != UART_STATUS_TIMEOUT) {  // 1분마다, 타임아웃 제외
 8003784:	4b7d      	ldr	r3, [pc, #500]	@ (800397c <StartReceiveTask+0x248>)
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	4b7d      	ldr	r3, [pc, #500]	@ (8003980 <StartReceiveTask+0x24c>)
 800378a:	fba3 1302 	umull	r1, r3, r3, r2
 800378e:	09db      	lsrs	r3, r3, #7
 8003790:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8003794:	fb01 f303 	mul.w	r3, r1, r3
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d116      	bne.n	80037cc <StartReceiveTask+0x98>
 800379e:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d012      	beq.n	80037cc <StartReceiveTask+0x98>
      LOG_DEBUG("[RX_TASK] Status check #%lu: status=%d, bytes=%d", 
 80037a6:	4b75      	ldr	r3, [pc, #468]	@ (800397c <StartReceiveTask+0x248>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a75      	ldr	r2, [pc, #468]	@ (8003980 <StartReceiveTask+0x24c>)
 80037ac:	fba2 2303 	umull	r2, r3, r2, r3
 80037b0:	09da      	lsrs	r2, r3, #7
 80037b2:	f897 120e 	ldrb.w	r1, [r7, #526]	@ 0x20e
 80037b6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80037ba:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	460b      	mov	r3, r1
 80037c4:	496f      	ldr	r1, [pc, #444]	@ (8003984 <StartReceiveTask+0x250>)
 80037c6:	2000      	movs	r0, #0
 80037c8:	f001 fc20 	bl	800500c <LOGGER_SendFormatted>
               debug_counter / 1200, status, local_bytes_received);
    }
    
    if (status == UART_STATUS_OK && local_bytes_received > 0) {
 80037cc:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f040 80cc 	bne.w	800396e <StartReceiveTask+0x23a>
 80037d6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80037da:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f340 80c4 	ble.w	800396e <StartReceiveTask+0x23a>
      // 수신 완료 - 간단한 수신 로그 + ResponseHandler 분석
      LOG_INFO("📥 RECV: '%.30s%s' (%d bytes)", 
 80037e6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80037ea:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b1e      	cmp	r3, #30
 80037f2:	dd01      	ble.n	80037f8 <StartReceiveTask+0xc4>
 80037f4:	4964      	ldr	r1, [pc, #400]	@ (8003988 <StartReceiveTask+0x254>)
 80037f6:	e000      	b.n	80037fa <StartReceiveTask+0xc6>
 80037f8:	4964      	ldr	r1, [pc, #400]	@ (800398c <StartReceiveTask+0x258>)
 80037fa:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80037fe:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f107 020c 	add.w	r2, r7, #12
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	460b      	mov	r3, r1
 800380c:	4960      	ldr	r1, [pc, #384]	@ (8003990 <StartReceiveTask+0x25c>)
 800380e:	2001      	movs	r0, #1
 8003810:	f001 fbfc 	bl	800500c <LOGGER_SendFormatted>
               local_buffer, 
               (local_bytes_received > 30) ? "..." : "", 
               local_bytes_received);
      
      // 기본적인 응답 타입 체크 (ResponseHandler에서 상세 로그 출력)
      if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8003814:	f107 030c 	add.w	r3, r7, #12
 8003818:	495e      	ldr	r1, [pc, #376]	@ (8003994 <StartReceiveTask+0x260>)
 800381a:	4618      	mov	r0, r3
 800381c:	f013 fbf7 	bl	801700e <strstr>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d004      	beq.n	8003830 <StartReceiveTask+0xfc>
        LOG_WARN("✅ JOIN CONFIRMED - Network joined successfully");
 8003826:	495c      	ldr	r1, [pc, #368]	@ (8003998 <StartReceiveTask+0x264>)
 8003828:	2002      	movs	r0, #2
 800382a:	f001 fbef 	bl	800500c <LOGGER_SendFormatted>
 800382e:	e00c      	b.n	800384a <StartReceiveTask+0x116>
      } else if (strstr(local_buffer, "RAKwireless") != NULL) {
 8003830:	f107 030c 	add.w	r3, r7, #12
 8003834:	4959      	ldr	r1, [pc, #356]	@ (800399c <StartReceiveTask+0x268>)
 8003836:	4618      	mov	r0, r3
 8003838:	f013 fbe9 	bl	801700e <strstr>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <StartReceiveTask+0x116>
        LOG_DEBUG("📡 LoRa module boot message (ignored)");
 8003842:	4957      	ldr	r1, [pc, #348]	@ (80039a0 <StartReceiveTask+0x26c>)
 8003844:	2000      	movs	r0, #0
 8003846:	f001 fbe1 	bl	800500c <LOGGER_SendFormatted>
      }
      // 나머지 응답 분석은 아래 필터링 로직에서 한 번만 처리
      
      // 전역 변수에 복사 (다른 태스크에서 사용 가능)
      memcpy(rx_buffer, local_buffer, local_bytes_received);
 800384a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800384e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	f107 030c 	add.w	r3, r7, #12
 800385a:	4619      	mov	r1, r3
 800385c:	4851      	ldr	r0, [pc, #324]	@ (80039a4 <StartReceiveTask+0x270>)
 800385e:	f013 fc70 	bl	8017142 <memcpy>
      rx_bytes_received = local_bytes_received;
 8003862:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003866:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a4e      	ldr	r2, [pc, #312]	@ (80039a8 <StartReceiveTask+0x274>)
 800386e:	6013      	str	r3, [r2, #0]
      
      // LoRa 상태 머신에 전달할 응답만 필터링
      bool is_lora_command_response = false;
 8003870:	2300      	movs	r3, #0
 8003872:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
      
      if (is_response_ok(local_buffer)) {
 8003876:	f107 030c 	add.w	r3, r7, #12
 800387a:	4618      	mov	r0, r3
 800387c:	f7fd fa86 	bl	8000d8c <is_response_ok>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <StartReceiveTask+0x15a>
        // OK 응답 - LoRa 명령에 대한 응답
        is_lora_command_response = true;
 8003886:	2301      	movs	r3, #1
 8003888:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 800388c:	e03f      	b.n	800390e <StartReceiveTask+0x1da>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 800388e:	f107 030c 	add.w	r3, r7, #12
 8003892:	4940      	ldr	r1, [pc, #256]	@ (8003994 <StartReceiveTask+0x260>)
 8003894:	4618      	mov	r0, r3
 8003896:	f013 fbba 	bl	801700e <strstr>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <StartReceiveTask+0x174>
        // JOIN 성공 응답
        is_lora_command_response = true;
 80038a0:	2301      	movs	r3, #1
 80038a2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 80038a6:	e032      	b.n	800390e <StartReceiveTask+0x1da>
      } else if (strstr(local_buffer, "+EVT:") != NULL) {
 80038a8:	f107 030c 	add.w	r3, r7, #12
 80038ac:	493f      	ldr	r1, [pc, #252]	@ (80039ac <StartReceiveTask+0x278>)
 80038ae:	4618      	mov	r0, r3
 80038b0:	f013 fbad 	bl	801700e <strstr>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <StartReceiveTask+0x18e>
        // 기타 LoRa 이벤트 응답들
        is_lora_command_response = true;
 80038ba:	2301      	movs	r3, #1
 80038bc:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 80038c0:	e025      	b.n	800390e <StartReceiveTask+0x1da>
      } else if (strstr(local_buffer, "RAKwireless") != NULL || strstr(local_buffer, "ORAKwireless") != NULL) {
 80038c2:	f107 030c 	add.w	r3, r7, #12
 80038c6:	4935      	ldr	r1, [pc, #212]	@ (800399c <StartReceiveTask+0x268>)
 80038c8:	4618      	mov	r0, r3
 80038ca:	f013 fba0 	bl	801700e <strstr>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d108      	bne.n	80038e6 <StartReceiveTask+0x1b2>
 80038d4:	f107 030c 	add.w	r3, r7, #12
 80038d8:	4935      	ldr	r1, [pc, #212]	@ (80039b0 <StartReceiveTask+0x27c>)
 80038da:	4618      	mov	r0, r3
 80038dc:	f013 fb97 	bl	801700e <strstr>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d004      	beq.n	80038f0 <StartReceiveTask+0x1bc>
        // 부트 메시지 - LoRa 상태 머신에 전달하지 않음
        LOG_DEBUG("[RX_TASK] Boot message filtered out from LoRa state machine");
 80038e6:	4933      	ldr	r1, [pc, #204]	@ (80039b4 <StartReceiveTask+0x280>)
 80038e8:	2000      	movs	r0, #0
 80038ea:	f001 fb8f 	bl	800500c <LOGGER_SendFormatted>
 80038ee:	e00e      	b.n	800390e <StartReceiveTask+0x1da>
      } else {
        // 기타 응답들 (ERROR, TIMEOUT 등)
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 80038f0:	f107 030c 	add.w	r3, r7, #12
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fd fb35 	bl	8000f64 <ResponseHandler_ParseSendResponse>
 80038fa:	4603      	mov	r3, r0
 80038fc:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
        if (response_type != RESPONSE_UNKNOWN) {
 8003900:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 8003904:	2b03      	cmp	r3, #3
 8003906:	d002      	beq.n	800390e <StartReceiveTask+0x1da>
          is_lora_command_response = true;
 8003908:	2301      	movs	r3, #1
 800390a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
        }
      }
      
      // LoRa 명령 응답만 전역 변수에 복사
      if (is_lora_command_response) {
 800390e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8003912:	2b00      	cmp	r3, #0
 8003914:	d01d      	beq.n	8003952 <StartReceiveTask+0x21e>
        memcpy(lora_rx_response, local_buffer, local_bytes_received);
 8003916:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800391a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	461a      	mov	r2, r3
 8003922:	f107 030c 	add.w	r3, r7, #12
 8003926:	4619      	mov	r1, r3
 8003928:	4823      	ldr	r0, [pc, #140]	@ (80039b8 <StartReceiveTask+0x284>)
 800392a:	f013 fc0a 	bl	8017142 <memcpy>
        lora_rx_response[local_bytes_received] = '\0';
 800392e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003932:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1f      	ldr	r2, [pc, #124]	@ (80039b8 <StartReceiveTask+0x284>)
 800393a:	2100      	movs	r1, #0
 800393c:	54d1      	strb	r1, [r2, r3]
        lora_new_response = true;
 800393e:	4b1f      	ldr	r3, [pc, #124]	@ (80039bc <StartReceiveTask+0x288>)
 8003940:	2201      	movs	r2, #1
 8003942:	701a      	strb	r2, [r3, #0]
        LOG_DEBUG("[RX_TASK] LoRa response forwarded to state machine: %.20s...", local_buffer);
 8003944:	f107 030c 	add.w	r3, r7, #12
 8003948:	461a      	mov	r2, r3
 800394a:	491d      	ldr	r1, [pc, #116]	@ (80039c0 <StartReceiveTask+0x28c>)
 800394c:	2000      	movs	r0, #0
 800394e:	f001 fb5d 	bl	800500c <LOGGER_SendFormatted>
      }
      
      // 버퍼 클리어
      memset(local_buffer, 0, sizeof(local_buffer));
 8003952:	f107 030c 	add.w	r3, r7, #12
 8003956:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800395a:	2100      	movs	r1, #0
 800395c:	4618      	mov	r0, r3
 800395e:	f013 fb3b 	bl	8016fd8 <memset>
      local_bytes_received = 0;
 8003962:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003966:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
    }
    
    // DMA 기반이므로 긴 지연으로 CPU 사용률 감소
    osDelay(50);  // 50ms 지연 (DMA가 백그라운드에서 처리하므로 빠른 폴링 불필요)
 800396e:	2032      	movs	r0, #50	@ 0x32
 8003970:	f010 fd36 	bl	80143e0 <osDelay>
  {
 8003974:	e6f5      	b.n	8003762 <StartReceiveTask+0x2e>
 8003976:	bf00      	nop
 8003978:	0801a4b0 	.word	0x0801a4b0
 800397c:	2000153c 	.word	0x2000153c
 8003980:	1b4e81b5 	.word	0x1b4e81b5
 8003984:	0801a4d8 	.word	0x0801a4d8
 8003988:	0801a50c 	.word	0x0801a50c
 800398c:	0801a510 	.word	0x0801a510
 8003990:	0801a514 	.word	0x0801a514
 8003994:	0801a534 	.word	0x0801a534
 8003998:	0801a540 	.word	0x0801a540
 800399c:	0801a574 	.word	0x0801a574
 80039a0:	0801a580 	.word	0x0801a580
 80039a4:	200015a0 	.word	0x200015a0
 80039a8:	200012c4 	.word	0x200012c4
 80039ac:	0801a5a8 	.word	0x0801a5a8
 80039b0:	0801a5b0 	.word	0x0801a5b0
 80039b4:	0801a5c0 	.word	0x0801a5c0
 80039b8:	200012c8 	.word	0x200012c8
 80039bc:	200014c8 	.word	0x200014c8
 80039c0:	0801a5fc 	.word	0x0801a5fc

080039c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a04      	ldr	r2, [pc, #16]	@ (80039e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d101      	bne.n	80039da <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80039d6:	f002 f8cf 	bl	8005b78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40001000 	.word	0x40001000

080039e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80039ec:	b672      	cpsid	i
}
 80039ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039f0:	bf00      	nop
 80039f2:	e7fd      	b.n	80039f0 <Error_Handler+0x8>

080039f4 <MX_DMA_Init>:
  * @brief DMA Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80039fa:	4b10      	ldr	r3, [pc, #64]	@ (8003a3c <MX_DMA_Init+0x48>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fe:	4a0f      	ldr	r2, [pc, #60]	@ (8003a3c <MX_DMA_Init+0x48>)
 8003a00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a06:	4b0d      	ldr	r3, [pc, #52]	@ (8003a3c <MX_DMA_Init+0x48>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a0e:	607b      	str	r3, [r7, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration - USART6_RX */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003a12:	2200      	movs	r2, #0
 8003a14:	2105      	movs	r1, #5
 8003a16:	2039      	movs	r0, #57	@ 0x39
 8003a18:	f002 fc42 	bl	80062a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003a1c:	2039      	movs	r0, #57	@ 0x39
 8003a1e:	f002 fc5b 	bl	80062d8 <HAL_NVIC_EnableIRQ>
  
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003a22:	2200      	movs	r2, #0
 8003a24:	2105      	movs	r1, #5
 8003a26:	2047      	movs	r0, #71	@ 0x47
 8003a28:	f002 fc3a 	bl	80062a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003a2c:	2047      	movs	r0, #71	@ 0x47
 8003a2e:	f002 fc53 	bl	80062d8 <HAL_NVIC_EnableIRQ>
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40023800 	.word	0x40023800

08003a40 <MX_USART6_DMA_Init>:
  * @brief DMA2 Stream1 DMA configuration for USART6 RX
  * @param None
  * @retval None
  */
void MX_USART6_DMA_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
  // DMA 이미 초기화되었는지 체크
  if (hdma_usart6_rx.Instance != NULL) {
 8003a46:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac0 <MX_USART6_DMA_Init+0x80>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d133      	bne.n	8003ab6 <MX_USART6_DMA_Init+0x76>
    return; // 이미 초기화됨
  }
  
  /* Configure DMA for USART6 RX */
  hdma_usart6_rx.Instance = DMA2_Stream1;
 8003a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ac0 <MX_USART6_DMA_Init+0x80>)
 8003a50:	4a1c      	ldr	r2, [pc, #112]	@ (8003ac4 <MX_USART6_DMA_Init+0x84>)
 8003a52:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003a54:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac0 <MX_USART6_DMA_Init+0x80>)
 8003a56:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003a5a:	605a      	str	r2, [r3, #4]
  hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a5c:	4b18      	ldr	r3, [pc, #96]	@ (8003ac0 <MX_USART6_DMA_Init+0x80>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	609a      	str	r2, [r3, #8]
  hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a62:	4b17      	ldr	r3, [pc, #92]	@ (8003ac0 <MX_USART6_DMA_Init+0x80>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	60da      	str	r2, [r3, #12]
  hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a68:	4b15      	ldr	r3, [pc, #84]	@ (8003ac0 <MX_USART6_DMA_Init+0x80>)
 8003a6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a6e:	611a      	str	r2, [r3, #16]
  hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a70:	4b13      	ldr	r3, [pc, #76]	@ (8003ac0 <MX_USART6_DMA_Init+0x80>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	615a      	str	r2, [r3, #20]
  hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a76:	4b12      	ldr	r3, [pc, #72]	@ (8003ac0 <MX_USART6_DMA_Init+0x80>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	619a      	str	r2, [r3, #24]
  hdma_usart6_rx.Init.Mode = DMA_NORMAL;    // 일반 모드로 변경
 8003a7c:	4b10      	ldr	r3, [pc, #64]	@ (8003ac0 <MX_USART6_DMA_Init+0x80>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	61da      	str	r2, [r3, #28]
  hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003a82:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac0 <MX_USART6_DMA_Init+0x80>)
 8003a84:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a88:	621a      	str	r2, [r3, #32]
  hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac0 <MX_USART6_DMA_Init+0x80>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	625a      	str	r2, [r3, #36]	@ 0x24
  
  HAL_StatusTypeDef dma_result = HAL_DMA_Init(&hdma_usart6_rx);
 8003a90:	480b      	ldr	r0, [pc, #44]	@ (8003ac0 <MX_USART6_DMA_Init+0x80>)
 8003a92:	f002 fd9b 	bl	80065cc <HAL_DMA_Init>
 8003a96:	4603      	mov	r3, r0
 8003a98:	71fb      	strb	r3, [r7, #7]
  if (dma_result != HAL_OK)
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <MX_USART6_DMA_Init+0x68>
  {
    // 에러 처리하되 Error_Handler() 호출하지 않음 (시스템 중단 방지)
    hdma_usart6_rx.Instance = NULL; // 실패 표시
 8003aa0:	4b07      	ldr	r3, [pc, #28]	@ (8003ac0 <MX_USART6_DMA_Init+0x80>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
    return;
 8003aa6:	e007      	b.n	8003ab8 <MX_USART6_DMA_Init+0x78>
  }

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8003aa8:	4b07      	ldr	r3, [pc, #28]	@ (8003ac8 <MX_USART6_DMA_Init+0x88>)
 8003aaa:	4a05      	ldr	r2, [pc, #20]	@ (8003ac0 <MX_USART6_DMA_Init+0x80>)
 8003aac:	675a      	str	r2, [r3, #116]	@ 0x74
 8003aae:	4b04      	ldr	r3, [pc, #16]	@ (8003ac0 <MX_USART6_DMA_Init+0x80>)
 8003ab0:	4a05      	ldr	r2, [pc, #20]	@ (8003ac8 <MX_USART6_DMA_Init+0x88>)
 8003ab2:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ab4:	e000      	b.n	8003ab8 <MX_USART6_DMA_Init+0x78>
    return; // 이미 초기화됨
 8003ab6:	bf00      	nop
}
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	200014cc 	.word	0x200014cc
 8003ac4:	40026428 	.word	0x40026428
 8003ac8:	200011f4 	.word	0x200011f4

08003acc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ad2:	4b11      	ldr	r3, [pc, #68]	@ (8003b18 <HAL_MspInit+0x4c>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	4a10      	ldr	r2, [pc, #64]	@ (8003b18 <HAL_MspInit+0x4c>)
 8003ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ade:	4b0e      	ldr	r3, [pc, #56]	@ (8003b18 <HAL_MspInit+0x4c>)
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae6:	607b      	str	r3, [r7, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aea:	4b0b      	ldr	r3, [pc, #44]	@ (8003b18 <HAL_MspInit+0x4c>)
 8003aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aee:	4a0a      	ldr	r2, [pc, #40]	@ (8003b18 <HAL_MspInit+0x4c>)
 8003af0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003af6:	4b08      	ldr	r3, [pc, #32]	@ (8003b18 <HAL_MspInit+0x4c>)
 8003af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b02:	2200      	movs	r2, #0
 8003b04:	210f      	movs	r1, #15
 8003b06:	f06f 0001 	mvn.w	r0, #1
 8003b0a:	f002 fbc9 	bl	80062a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40023800 	.word	0x40023800

08003b1c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08a      	sub	sp, #40	@ 0x28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b24:	f107 0314 	add.w	r3, r7, #20
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	605a      	str	r2, [r3, #4]
 8003b2e:	609a      	str	r2, [r3, #8]
 8003b30:	60da      	str	r2, [r3, #12]
 8003b32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a21      	ldr	r2, [pc, #132]	@ (8003bc0 <HAL_ADC_MspInit+0xa4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d13c      	bne.n	8003bb8 <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003b3e:	4b21      	ldr	r3, [pc, #132]	@ (8003bc4 <HAL_ADC_MspInit+0xa8>)
 8003b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b42:	4a20      	ldr	r2, [pc, #128]	@ (8003bc4 <HAL_ADC_MspInit+0xa8>)
 8003b44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc4 <HAL_ADC_MspInit+0xa8>)
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b56:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc4 <HAL_ADC_MspInit+0xa8>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8003bc4 <HAL_ADC_MspInit+0xa8>)
 8003b5c:	f043 0320 	orr.w	r3, r3, #32
 8003b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b62:	4b18      	ldr	r3, [pc, #96]	@ (8003bc4 <HAL_ADC_MspInit+0xa8>)
 8003b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6e:	4b15      	ldr	r3, [pc, #84]	@ (8003bc4 <HAL_ADC_MspInit+0xa8>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b72:	4a14      	ldr	r2, [pc, #80]	@ (8003bc4 <HAL_ADC_MspInit+0xa8>)
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b7a:	4b12      	ldr	r3, [pc, #72]	@ (8003bc4 <HAL_ADC_MspInit+0xa8>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8003b86:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8003b8a:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b94:	f107 0314 	add.w	r3, r7, #20
 8003b98:	4619      	mov	r1, r3
 8003b9a:	480b      	ldr	r0, [pc, #44]	@ (8003bc8 <HAL_ADC_MspInit+0xac>)
 8003b9c:	f003 fec4 	bl	8007928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8003bac:	f107 0314 	add.w	r3, r7, #20
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4806      	ldr	r0, [pc, #24]	@ (8003bcc <HAL_ADC_MspInit+0xb0>)
 8003bb4:	f003 feb8 	bl	8007928 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 8003bb8:	bf00      	nop
 8003bba:	3728      	adds	r7, #40	@ 0x28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40012200 	.word	0x40012200
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40021400 	.word	0x40021400
 8003bcc:	40020000 	.word	0x40020000

08003bd0 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8003c08 <HAL_CRC_MspInit+0x38>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d10b      	bne.n	8003bfa <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003be2:	4b0a      	ldr	r3, [pc, #40]	@ (8003c0c <HAL_CRC_MspInit+0x3c>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be6:	4a09      	ldr	r2, [pc, #36]	@ (8003c0c <HAL_CRC_MspInit+0x3c>)
 8003be8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bee:	4b07      	ldr	r3, [pc, #28]	@ (8003c0c <HAL_CRC_MspInit+0x3c>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40023000 	.word	0x40023000
 8003c0c:	40023800 	.word	0x40023800

08003c10 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08e      	sub	sp, #56	@ 0x38
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	609a      	str	r2, [r3, #8]
 8003c24:	60da      	str	r2, [r3, #12]
 8003c26:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a50      	ldr	r2, [pc, #320]	@ (8003d70 <HAL_DCMI_MspInit+0x160>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	f040 809a 	bne.w	8003d68 <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8003c34:	4b4f      	ldr	r3, [pc, #316]	@ (8003d74 <HAL_DCMI_MspInit+0x164>)
 8003c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c38:	4a4e      	ldr	r2, [pc, #312]	@ (8003d74 <HAL_DCMI_MspInit+0x164>)
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	6353      	str	r3, [r2, #52]	@ 0x34
 8003c40:	4b4c      	ldr	r3, [pc, #304]	@ (8003d74 <HAL_DCMI_MspInit+0x164>)
 8003c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	623b      	str	r3, [r7, #32]
 8003c4a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c4c:	4b49      	ldr	r3, [pc, #292]	@ (8003d74 <HAL_DCMI_MspInit+0x164>)
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c50:	4a48      	ldr	r2, [pc, #288]	@ (8003d74 <HAL_DCMI_MspInit+0x164>)
 8003c52:	f043 0310 	orr.w	r3, r3, #16
 8003c56:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c58:	4b46      	ldr	r3, [pc, #280]	@ (8003d74 <HAL_DCMI_MspInit+0x164>)
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	61fb      	str	r3, [r7, #28]
 8003c62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c64:	4b43      	ldr	r3, [pc, #268]	@ (8003d74 <HAL_DCMI_MspInit+0x164>)
 8003c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c68:	4a42      	ldr	r2, [pc, #264]	@ (8003d74 <HAL_DCMI_MspInit+0x164>)
 8003c6a:	f043 0308 	orr.w	r3, r3, #8
 8003c6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c70:	4b40      	ldr	r3, [pc, #256]	@ (8003d74 <HAL_DCMI_MspInit+0x164>)
 8003c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c7c:	4b3d      	ldr	r3, [pc, #244]	@ (8003d74 <HAL_DCMI_MspInit+0x164>)
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c80:	4a3c      	ldr	r2, [pc, #240]	@ (8003d74 <HAL_DCMI_MspInit+0x164>)
 8003c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c86:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c88:	4b3a      	ldr	r3, [pc, #232]	@ (8003d74 <HAL_DCMI_MspInit+0x164>)
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c94:	4b37      	ldr	r3, [pc, #220]	@ (8003d74 <HAL_DCMI_MspInit+0x164>)
 8003c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c98:	4a36      	ldr	r2, [pc, #216]	@ (8003d74 <HAL_DCMI_MspInit+0x164>)
 8003c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ca0:	4b34      	ldr	r3, [pc, #208]	@ (8003d74 <HAL_DCMI_MspInit+0x164>)
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cac:	4b31      	ldr	r3, [pc, #196]	@ (8003d74 <HAL_DCMI_MspInit+0x164>)
 8003cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb0:	4a30      	ldr	r2, [pc, #192]	@ (8003d74 <HAL_DCMI_MspInit+0x164>)
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8003d74 <HAL_DCMI_MspInit+0x164>)
 8003cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8003cc4:	2360      	movs	r3, #96	@ 0x60
 8003cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003cd4:	230d      	movs	r3, #13
 8003cd6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003cd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4826      	ldr	r0, [pc, #152]	@ (8003d78 <HAL_DCMI_MspInit+0x168>)
 8003ce0:	f003 fe22 	bl	8007928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8003ce4:	2308      	movs	r3, #8
 8003ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003cf4:	230d      	movs	r3, #13
 8003cf6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8003cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	481f      	ldr	r0, [pc, #124]	@ (8003d7c <HAL_DCMI_MspInit+0x16c>)
 8003d00:	f003 fe12 	bl	8007928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8003d04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d12:	2300      	movs	r3, #0
 8003d14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003d16:	230d      	movs	r3, #13
 8003d18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8003d1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4817      	ldr	r0, [pc, #92]	@ (8003d80 <HAL_DCMI_MspInit+0x170>)
 8003d22:	f003 fe01 	bl	8007928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8003d26:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8003d2a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d34:	2300      	movs	r3, #0
 8003d36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003d38:	230d      	movs	r3, #13
 8003d3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003d3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d40:	4619      	mov	r1, r3
 8003d42:	4810      	ldr	r0, [pc, #64]	@ (8003d84 <HAL_DCMI_MspInit+0x174>)
 8003d44:	f003 fdf0 	bl	8007928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8003d48:	2350      	movs	r3, #80	@ 0x50
 8003d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d50:	2300      	movs	r3, #0
 8003d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d54:	2300      	movs	r3, #0
 8003d56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003d58:	230d      	movs	r3, #13
 8003d5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d60:	4619      	mov	r1, r3
 8003d62:	4809      	ldr	r0, [pc, #36]	@ (8003d88 <HAL_DCMI_MspInit+0x178>)
 8003d64:	f003 fde0 	bl	8007928 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8003d68:	bf00      	nop
 8003d6a:	3738      	adds	r7, #56	@ 0x38
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	50050000 	.word	0x50050000
 8003d74:	40023800 	.word	0x40023800
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	40020c00 	.word	0x40020c00
 8003d80:	40021800 	.word	0x40021800
 8003d84:	40021c00 	.word	0x40021c00
 8003d88:	40020000 	.word	0x40020000

08003d8c <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a0d      	ldr	r2, [pc, #52]	@ (8003dd0 <HAL_DMA2D_MspInit+0x44>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d113      	bne.n	8003dc6 <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd4 <HAL_DMA2D_MspInit+0x48>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da2:	4a0c      	ldr	r2, [pc, #48]	@ (8003dd4 <HAL_DMA2D_MspInit+0x48>)
 8003da4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003daa:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd4 <HAL_DMA2D_MspInit+0x48>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003db6:	2200      	movs	r2, #0
 8003db8:	2105      	movs	r1, #5
 8003dba:	205a      	movs	r0, #90	@ 0x5a
 8003dbc:	f002 fa70 	bl	80062a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003dc0:	205a      	movs	r0, #90	@ 0x5a
 8003dc2:	f002 fa89 	bl	80062d8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8003dc6:	bf00      	nop
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	4002b000 	.word	0x4002b000
 8003dd4:	40023800 	.word	0x40023800

08003dd8 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08e      	sub	sp, #56	@ 0x38
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	605a      	str	r2, [r3, #4]
 8003dea:	609a      	str	r2, [r3, #8]
 8003dec:	60da      	str	r2, [r3, #12]
 8003dee:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a3f      	ldr	r2, [pc, #252]	@ (8003ef4 <HAL_ETH_MspInit+0x11c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d178      	bne.n	8003eec <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003dfa:	4b3f      	ldr	r3, [pc, #252]	@ (8003ef8 <HAL_ETH_MspInit+0x120>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfe:	4a3e      	ldr	r2, [pc, #248]	@ (8003ef8 <HAL_ETH_MspInit+0x120>)
 8003e00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e06:	4b3c      	ldr	r3, [pc, #240]	@ (8003ef8 <HAL_ETH_MspInit+0x120>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e0e:	623b      	str	r3, [r7, #32]
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	4b39      	ldr	r3, [pc, #228]	@ (8003ef8 <HAL_ETH_MspInit+0x120>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e16:	4a38      	ldr	r2, [pc, #224]	@ (8003ef8 <HAL_ETH_MspInit+0x120>)
 8003e18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e1e:	4b36      	ldr	r3, [pc, #216]	@ (8003ef8 <HAL_ETH_MspInit+0x120>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e22:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e26:	61fb      	str	r3, [r7, #28]
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	4b33      	ldr	r3, [pc, #204]	@ (8003ef8 <HAL_ETH_MspInit+0x120>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2e:	4a32      	ldr	r2, [pc, #200]	@ (8003ef8 <HAL_ETH_MspInit+0x120>)
 8003e30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e36:	4b30      	ldr	r3, [pc, #192]	@ (8003ef8 <HAL_ETH_MspInit+0x120>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e3e:	61bb      	str	r3, [r7, #24]
 8003e40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e42:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef8 <HAL_ETH_MspInit+0x120>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e46:	4a2c      	ldr	r2, [pc, #176]	@ (8003ef8 <HAL_ETH_MspInit+0x120>)
 8003e48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ef8 <HAL_ETH_MspInit+0x120>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e5a:	4b27      	ldr	r3, [pc, #156]	@ (8003ef8 <HAL_ETH_MspInit+0x120>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5e:	4a26      	ldr	r2, [pc, #152]	@ (8003ef8 <HAL_ETH_MspInit+0x120>)
 8003e60:	f043 0304 	orr.w	r3, r3, #4
 8003e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e66:	4b24      	ldr	r3, [pc, #144]	@ (8003ef8 <HAL_ETH_MspInit+0x120>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e72:	4b21      	ldr	r3, [pc, #132]	@ (8003ef8 <HAL_ETH_MspInit+0x120>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e76:	4a20      	ldr	r2, [pc, #128]	@ (8003ef8 <HAL_ETH_MspInit+0x120>)
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ef8 <HAL_ETH_MspInit+0x120>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8003e8a:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8003e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e90:	2302      	movs	r3, #2
 8003e92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e94:	2300      	movs	r3, #0
 8003e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e9c:	230b      	movs	r3, #11
 8003e9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003ea0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4815      	ldr	r0, [pc, #84]	@ (8003efc <HAL_ETH_MspInit+0x124>)
 8003ea8:	f003 fd3e 	bl	8007928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003eac:	2332      	movs	r3, #50	@ 0x32
 8003eae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ebc:	230b      	movs	r3, #11
 8003ebe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	480e      	ldr	r0, [pc, #56]	@ (8003f00 <HAL_ETH_MspInit+0x128>)
 8003ec8:	f003 fd2e 	bl	8007928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003ecc:	2386      	movs	r3, #134	@ 0x86
 8003ece:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003edc:	230b      	movs	r3, #11
 8003ede:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4807      	ldr	r0, [pc, #28]	@ (8003f04 <HAL_ETH_MspInit+0x12c>)
 8003ee8:	f003 fd1e 	bl	8007928 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8003eec:	bf00      	nop
 8003eee:	3738      	adds	r7, #56	@ 0x38
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40028000 	.word	0x40028000
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	40021800 	.word	0x40021800
 8003f00:	40020800 	.word	0x40020800
 8003f04:	40020000 	.word	0x40020000

08003f08 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b0ac      	sub	sp, #176	@ 0xb0
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f10:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	605a      	str	r2, [r3, #4]
 8003f1a:	609a      	str	r2, [r3, #8]
 8003f1c:	60da      	str	r2, [r3, #12]
 8003f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f20:	f107 0318 	add.w	r3, r7, #24
 8003f24:	2284      	movs	r2, #132	@ 0x84
 8003f26:	2100      	movs	r1, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f013 f855 	bl	8016fd8 <memset>
  if(hi2c->Instance==I2C1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a44      	ldr	r2, [pc, #272]	@ (8004044 <HAL_I2C_MspInit+0x13c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d13d      	bne.n	8003fb4 <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003f38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f3c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f42:	f107 0318 	add.w	r3, r7, #24
 8003f46:	4618      	mov	r0, r3
 8003f48:	f006 fe7e 	bl	800ac48 <HAL_RCCEx_PeriphCLKConfig>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003f52:	f7ff fd49 	bl	80039e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f56:	4b3c      	ldr	r3, [pc, #240]	@ (8004048 <HAL_I2C_MspInit+0x140>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5a:	4a3b      	ldr	r2, [pc, #236]	@ (8004048 <HAL_I2C_MspInit+0x140>)
 8003f5c:	f043 0302 	orr.w	r3, r3, #2
 8003f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f62:	4b39      	ldr	r3, [pc, #228]	@ (8004048 <HAL_I2C_MspInit+0x140>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003f6e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003f72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f76:	2312      	movs	r3, #18
 8003f78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f88:	2304      	movs	r3, #4
 8003f8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f8e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003f92:	4619      	mov	r1, r3
 8003f94:	482d      	ldr	r0, [pc, #180]	@ (800404c <HAL_I2C_MspInit+0x144>)
 8003f96:	f003 fcc7 	bl	8007928 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f9a:	4b2b      	ldr	r3, [pc, #172]	@ (8004048 <HAL_I2C_MspInit+0x140>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9e:	4a2a      	ldr	r2, [pc, #168]	@ (8004048 <HAL_I2C_MspInit+0x140>)
 8003fa0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fa6:	4b28      	ldr	r3, [pc, #160]	@ (8004048 <HAL_I2C_MspInit+0x140>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003faa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003fb2:	e042      	b.n	800403a <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a25      	ldr	r2, [pc, #148]	@ (8004050 <HAL_I2C_MspInit+0x148>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d13d      	bne.n	800403a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003fbe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003fc2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fca:	f107 0318 	add.w	r3, r7, #24
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f006 fe3a 	bl	800ac48 <HAL_RCCEx_PeriphCLKConfig>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8003fda:	f7ff fd05 	bl	80039e8 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fde:	4b1a      	ldr	r3, [pc, #104]	@ (8004048 <HAL_I2C_MspInit+0x140>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe2:	4a19      	ldr	r2, [pc, #100]	@ (8004048 <HAL_I2C_MspInit+0x140>)
 8003fe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fea:	4b17      	ldr	r3, [pc, #92]	@ (8004048 <HAL_I2C_MspInit+0x140>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003ff6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003ffa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ffe:	2312      	movs	r3, #18
 8004000:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004004:	2301      	movs	r3, #1
 8004006:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800400a:	2303      	movs	r3, #3
 800400c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004010:	2304      	movs	r3, #4
 8004012:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004016:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800401a:	4619      	mov	r1, r3
 800401c:	480d      	ldr	r0, [pc, #52]	@ (8004054 <HAL_I2C_MspInit+0x14c>)
 800401e:	f003 fc83 	bl	8007928 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004022:	4b09      	ldr	r3, [pc, #36]	@ (8004048 <HAL_I2C_MspInit+0x140>)
 8004024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004026:	4a08      	ldr	r2, [pc, #32]	@ (8004048 <HAL_I2C_MspInit+0x140>)
 8004028:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800402c:	6413      	str	r3, [r2, #64]	@ 0x40
 800402e:	4b06      	ldr	r3, [pc, #24]	@ (8004048 <HAL_I2C_MspInit+0x140>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004036:	60bb      	str	r3, [r7, #8]
 8004038:	68bb      	ldr	r3, [r7, #8]
}
 800403a:	bf00      	nop
 800403c:	37b0      	adds	r7, #176	@ 0xb0
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40005400 	.word	0x40005400
 8004048:	40023800 	.word	0x40023800
 800404c:	40020400 	.word	0x40020400
 8004050:	40005c00 	.word	0x40005c00
 8004054:	40021c00 	.word	0x40021c00

08004058 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08e      	sub	sp, #56	@ 0x38
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004060:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	609a      	str	r2, [r3, #8]
 800406c:	60da      	str	r2, [r3, #12]
 800406e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a55      	ldr	r2, [pc, #340]	@ (80041cc <HAL_LTDC_MspInit+0x174>)
 8004076:	4293      	cmp	r3, r2
 8004078:	f040 80a3 	bne.w	80041c2 <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800407c:	4b54      	ldr	r3, [pc, #336]	@ (80041d0 <HAL_LTDC_MspInit+0x178>)
 800407e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004080:	4a53      	ldr	r2, [pc, #332]	@ (80041d0 <HAL_LTDC_MspInit+0x178>)
 8004082:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004086:	6453      	str	r3, [r2, #68]	@ 0x44
 8004088:	4b51      	ldr	r3, [pc, #324]	@ (80041d0 <HAL_LTDC_MspInit+0x178>)
 800408a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004090:	623b      	str	r3, [r7, #32]
 8004092:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004094:	4b4e      	ldr	r3, [pc, #312]	@ (80041d0 <HAL_LTDC_MspInit+0x178>)
 8004096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004098:	4a4d      	ldr	r2, [pc, #308]	@ (80041d0 <HAL_LTDC_MspInit+0x178>)
 800409a:	f043 0310 	orr.w	r3, r3, #16
 800409e:	6313      	str	r3, [r2, #48]	@ 0x30
 80040a0:	4b4b      	ldr	r3, [pc, #300]	@ (80041d0 <HAL_LTDC_MspInit+0x178>)
 80040a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80040ac:	4b48      	ldr	r3, [pc, #288]	@ (80041d0 <HAL_LTDC_MspInit+0x178>)
 80040ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b0:	4a47      	ldr	r2, [pc, #284]	@ (80041d0 <HAL_LTDC_MspInit+0x178>)
 80040b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80040b8:	4b45      	ldr	r3, [pc, #276]	@ (80041d0 <HAL_LTDC_MspInit+0x178>)
 80040ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80040c4:	4b42      	ldr	r3, [pc, #264]	@ (80041d0 <HAL_LTDC_MspInit+0x178>)
 80040c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c8:	4a41      	ldr	r2, [pc, #260]	@ (80041d0 <HAL_LTDC_MspInit+0x178>)
 80040ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80040d0:	4b3f      	ldr	r3, [pc, #252]	@ (80041d0 <HAL_LTDC_MspInit+0x178>)
 80040d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80040dc:	4b3c      	ldr	r3, [pc, #240]	@ (80041d0 <HAL_LTDC_MspInit+0x178>)
 80040de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e0:	4a3b      	ldr	r2, [pc, #236]	@ (80041d0 <HAL_LTDC_MspInit+0x178>)
 80040e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80040e8:	4b39      	ldr	r3, [pc, #228]	@ (80041d0 <HAL_LTDC_MspInit+0x178>)
 80040ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80040f4:	4b36      	ldr	r3, [pc, #216]	@ (80041d0 <HAL_LTDC_MspInit+0x178>)
 80040f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f8:	4a35      	ldr	r2, [pc, #212]	@ (80041d0 <HAL_LTDC_MspInit+0x178>)
 80040fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8004100:	4b33      	ldr	r3, [pc, #204]	@ (80041d0 <HAL_LTDC_MspInit+0x178>)
 8004102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800410c:	2310      	movs	r3, #16
 800410e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004110:	2302      	movs	r3, #2
 8004112:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004114:	2300      	movs	r3, #0
 8004116:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004118:	2300      	movs	r3, #0
 800411a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800411c:	230e      	movs	r3, #14
 800411e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004120:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004124:	4619      	mov	r1, r3
 8004126:	482b      	ldr	r0, [pc, #172]	@ (80041d4 <HAL_LTDC_MspInit+0x17c>)
 8004128:	f003 fbfe 	bl	8007928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800412c:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8004130:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004132:	2302      	movs	r3, #2
 8004134:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004136:	2300      	movs	r3, #0
 8004138:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800413a:	2300      	movs	r3, #0
 800413c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800413e:	230e      	movs	r3, #14
 8004140:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004146:	4619      	mov	r1, r3
 8004148:	4823      	ldr	r0, [pc, #140]	@ (80041d8 <HAL_LTDC_MspInit+0x180>)
 800414a:	f003 fbed 	bl	8007928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800414e:	23f7      	movs	r3, #247	@ 0xf7
 8004150:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004152:	2302      	movs	r3, #2
 8004154:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004156:	2300      	movs	r3, #0
 8004158:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800415a:	2300      	movs	r3, #0
 800415c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800415e:	230e      	movs	r3, #14
 8004160:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8004162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004166:	4619      	mov	r1, r3
 8004168:	481c      	ldr	r0, [pc, #112]	@ (80041dc <HAL_LTDC_MspInit+0x184>)
 800416a:	f003 fbdd 	bl	8007928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800416e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004172:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004174:	2302      	movs	r3, #2
 8004176:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004178:	2300      	movs	r3, #0
 800417a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800417c:	2300      	movs	r3, #0
 800417e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004180:	2309      	movs	r3, #9
 8004182:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8004184:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004188:	4619      	mov	r1, r3
 800418a:	4815      	ldr	r0, [pc, #84]	@ (80041e0 <HAL_LTDC_MspInit+0x188>)
 800418c:	f003 fbcc 	bl	8007928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004190:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8004194:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004196:	2302      	movs	r3, #2
 8004198:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419a:	2300      	movs	r3, #0
 800419c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800419e:	2300      	movs	r3, #0
 80041a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80041a2:	230e      	movs	r3, #14
 80041a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80041a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041aa:	4619      	mov	r1, r3
 80041ac:	480d      	ldr	r0, [pc, #52]	@ (80041e4 <HAL_LTDC_MspInit+0x18c>)
 80041ae:	f003 fbbb 	bl	8007928 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80041b2:	2200      	movs	r2, #0
 80041b4:	2105      	movs	r1, #5
 80041b6:	2058      	movs	r0, #88	@ 0x58
 80041b8:	f002 f872 	bl	80062a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80041bc:	2058      	movs	r0, #88	@ 0x58
 80041be:	f002 f88b 	bl	80062d8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 80041c2:	bf00      	nop
 80041c4:	3738      	adds	r7, #56	@ 0x38
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	40016800 	.word	0x40016800
 80041d0:	40023800 	.word	0x40023800
 80041d4:	40021000 	.word	0x40021000
 80041d8:	40022400 	.word	0x40022400
 80041dc:	40022800 	.word	0x40022800
 80041e0:	40021800 	.word	0x40021800
 80041e4:	40022000 	.word	0x40022000

080041e8 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08c      	sub	sp, #48	@ 0x30
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f0:	f107 031c 	add.w	r3, r7, #28
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	609a      	str	r2, [r3, #8]
 80041fc:	60da      	str	r2, [r3, #12]
 80041fe:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a3b      	ldr	r2, [pc, #236]	@ (80042f4 <HAL_QSPI_MspInit+0x10c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d170      	bne.n	80042ec <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800420a:	4b3b      	ldr	r3, [pc, #236]	@ (80042f8 <HAL_QSPI_MspInit+0x110>)
 800420c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420e:	4a3a      	ldr	r2, [pc, #232]	@ (80042f8 <HAL_QSPI_MspInit+0x110>)
 8004210:	f043 0302 	orr.w	r3, r3, #2
 8004214:	6393      	str	r3, [r2, #56]	@ 0x38
 8004216:	4b38      	ldr	r3, [pc, #224]	@ (80042f8 <HAL_QSPI_MspInit+0x110>)
 8004218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	61bb      	str	r3, [r7, #24]
 8004220:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004222:	4b35      	ldr	r3, [pc, #212]	@ (80042f8 <HAL_QSPI_MspInit+0x110>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004226:	4a34      	ldr	r2, [pc, #208]	@ (80042f8 <HAL_QSPI_MspInit+0x110>)
 8004228:	f043 0310 	orr.w	r3, r3, #16
 800422c:	6313      	str	r3, [r2, #48]	@ 0x30
 800422e:	4b32      	ldr	r3, [pc, #200]	@ (80042f8 <HAL_QSPI_MspInit+0x110>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004232:	f003 0310 	and.w	r3, r3, #16
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800423a:	4b2f      	ldr	r3, [pc, #188]	@ (80042f8 <HAL_QSPI_MspInit+0x110>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423e:	4a2e      	ldr	r2, [pc, #184]	@ (80042f8 <HAL_QSPI_MspInit+0x110>)
 8004240:	f043 0302 	orr.w	r3, r3, #2
 8004244:	6313      	str	r3, [r2, #48]	@ 0x30
 8004246:	4b2c      	ldr	r3, [pc, #176]	@ (80042f8 <HAL_QSPI_MspInit+0x110>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004252:	4b29      	ldr	r3, [pc, #164]	@ (80042f8 <HAL_QSPI_MspInit+0x110>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004256:	4a28      	ldr	r2, [pc, #160]	@ (80042f8 <HAL_QSPI_MspInit+0x110>)
 8004258:	f043 0308 	orr.w	r3, r3, #8
 800425c:	6313      	str	r3, [r2, #48]	@ 0x30
 800425e:	4b26      	ldr	r3, [pc, #152]	@ (80042f8 <HAL_QSPI_MspInit+0x110>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800426a:	2304      	movs	r3, #4
 800426c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800426e:	2302      	movs	r3, #2
 8004270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004272:	2300      	movs	r3, #0
 8004274:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004276:	2303      	movs	r3, #3
 8004278:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800427a:	2309      	movs	r3, #9
 800427c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800427e:	f107 031c 	add.w	r3, r7, #28
 8004282:	4619      	mov	r1, r3
 8004284:	481d      	ldr	r0, [pc, #116]	@ (80042fc <HAL_QSPI_MspInit+0x114>)
 8004286:	f003 fb4f 	bl	8007928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800428a:	2340      	movs	r3, #64	@ 0x40
 800428c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800428e:	2302      	movs	r3, #2
 8004290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004292:	2300      	movs	r3, #0
 8004294:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004296:	2303      	movs	r3, #3
 8004298:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800429a:	230a      	movs	r3, #10
 800429c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800429e:	f107 031c 	add.w	r3, r7, #28
 80042a2:	4619      	mov	r1, r3
 80042a4:	4816      	ldr	r0, [pc, #88]	@ (8004300 <HAL_QSPI_MspInit+0x118>)
 80042a6:	f003 fb3f 	bl	8007928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80042aa:	2304      	movs	r3, #4
 80042ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ae:	2302      	movs	r3, #2
 80042b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042b6:	2303      	movs	r3, #3
 80042b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80042ba:	2309      	movs	r3, #9
 80042bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042be:	f107 031c 	add.w	r3, r7, #28
 80042c2:	4619      	mov	r1, r3
 80042c4:	480e      	ldr	r0, [pc, #56]	@ (8004300 <HAL_QSPI_MspInit+0x118>)
 80042c6:	f003 fb2f 	bl	8007928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80042ca:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80042ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d0:	2302      	movs	r3, #2
 80042d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042d8:	2303      	movs	r3, #3
 80042da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80042dc:	2309      	movs	r3, #9
 80042de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80042e0:	f107 031c 	add.w	r3, r7, #28
 80042e4:	4619      	mov	r1, r3
 80042e6:	4807      	ldr	r0, [pc, #28]	@ (8004304 <HAL_QSPI_MspInit+0x11c>)
 80042e8:	f003 fb1e 	bl	8007928 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80042ec:	bf00      	nop
 80042ee:	3730      	adds	r7, #48	@ 0x30
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	a0001000 	.word	0xa0001000
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40021000 	.word	0x40021000
 8004300:	40020400 	.word	0x40020400
 8004304:	40020c00 	.word	0x40020c00

08004308 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b0a4      	sub	sp, #144	@ 0x90
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004310:	f107 030c 	add.w	r3, r7, #12
 8004314:	2284      	movs	r2, #132	@ 0x84
 8004316:	2100      	movs	r1, #0
 8004318:	4618      	mov	r0, r3
 800431a:	f012 fe5d 	bl	8016fd8 <memset>
  if(hrtc->Instance==RTC)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a0e      	ldr	r2, [pc, #56]	@ (800435c <HAL_RTC_MspInit+0x54>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d114      	bne.n	8004352 <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004328:	2320      	movs	r3, #32
 800432a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800432c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004330:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004332:	f107 030c 	add.w	r3, r7, #12
 8004336:	4618      	mov	r0, r3
 8004338:	f006 fc86 	bl	800ac48 <HAL_RCCEx_PeriphCLKConfig>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004342:	f7ff fb51 	bl	80039e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004346:	4b06      	ldr	r3, [pc, #24]	@ (8004360 <HAL_RTC_MspInit+0x58>)
 8004348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434a:	4a05      	ldr	r2, [pc, #20]	@ (8004360 <HAL_RTC_MspInit+0x58>)
 800434c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004350:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8004352:	bf00      	nop
 8004354:	3790      	adds	r7, #144	@ 0x90
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40002800 	.word	0x40002800
 8004360:	40023800 	.word	0x40023800

08004364 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b08a      	sub	sp, #40	@ 0x28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800436c:	f107 0314 	add.w	r3, r7, #20
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	605a      	str	r2, [r3, #4]
 8004376:	609a      	str	r2, [r3, #8]
 8004378:	60da      	str	r2, [r3, #12]
 800437a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a25      	ldr	r2, [pc, #148]	@ (8004418 <HAL_SD_MspInit+0xb4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d144      	bne.n	8004410 <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004386:	4b25      	ldr	r3, [pc, #148]	@ (800441c <HAL_SD_MspInit+0xb8>)
 8004388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438a:	4a24      	ldr	r2, [pc, #144]	@ (800441c <HAL_SD_MspInit+0xb8>)
 800438c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004390:	6453      	str	r3, [r2, #68]	@ 0x44
 8004392:	4b22      	ldr	r3, [pc, #136]	@ (800441c <HAL_SD_MspInit+0xb8>)
 8004394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004396:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800439e:	4b1f      	ldr	r3, [pc, #124]	@ (800441c <HAL_SD_MspInit+0xb8>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a2:	4a1e      	ldr	r2, [pc, #120]	@ (800441c <HAL_SD_MspInit+0xb8>)
 80043a4:	f043 0304 	orr.w	r3, r3, #4
 80043a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043aa:	4b1c      	ldr	r3, [pc, #112]	@ (800441c <HAL_SD_MspInit+0xb8>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80043b6:	4b19      	ldr	r3, [pc, #100]	@ (800441c <HAL_SD_MspInit+0xb8>)
 80043b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ba:	4a18      	ldr	r2, [pc, #96]	@ (800441c <HAL_SD_MspInit+0xb8>)
 80043bc:	f043 0308 	orr.w	r3, r3, #8
 80043c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043c2:	4b16      	ldr	r3, [pc, #88]	@ (800441c <HAL_SD_MspInit+0xb8>)
 80043c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80043ce:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80043d2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d4:	2302      	movs	r3, #2
 80043d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d8:	2300      	movs	r3, #0
 80043da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043dc:	2303      	movs	r3, #3
 80043de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80043e0:	230c      	movs	r3, #12
 80043e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043e4:	f107 0314 	add.w	r3, r7, #20
 80043e8:	4619      	mov	r1, r3
 80043ea:	480d      	ldr	r0, [pc, #52]	@ (8004420 <HAL_SD_MspInit+0xbc>)
 80043ec:	f003 fa9c 	bl	8007928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80043f0:	2304      	movs	r3, #4
 80043f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f4:	2302      	movs	r3, #2
 80043f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043fc:	2303      	movs	r3, #3
 80043fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004400:	230c      	movs	r3, #12
 8004402:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8004404:	f107 0314 	add.w	r3, r7, #20
 8004408:	4619      	mov	r1, r3
 800440a:	4806      	ldr	r0, [pc, #24]	@ (8004424 <HAL_SD_MspInit+0xc0>)
 800440c:	f003 fa8c 	bl	8007928 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8004410:	bf00      	nop
 8004412:	3728      	adds	r7, #40	@ 0x28
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40012c00 	.word	0x40012c00
 800441c:	40023800 	.word	0x40023800
 8004420:	40020800 	.word	0x40020800
 8004424:	40020c00 	.word	0x40020c00

08004428 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b0aa      	sub	sp, #168	@ 0xa8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004430:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	605a      	str	r2, [r3, #4]
 800443a:	609a      	str	r2, [r3, #8]
 800443c:	60da      	str	r2, [r3, #12]
 800443e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004440:	f107 0310 	add.w	r3, r7, #16
 8004444:	2284      	movs	r2, #132	@ 0x84
 8004446:	2100      	movs	r1, #0
 8004448:	4618      	mov	r0, r3
 800444a:	f012 fdc5 	bl	8016fd8 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8004456:	d143      	bne.n	80044e0 <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8004458:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800445c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800445e:	2364      	movs	r3, #100	@ 0x64
 8004460:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8004462:	2302      	movs	r3, #2
 8004464:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8004466:	2302      	movs	r3, #2
 8004468:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800446a:	2302      	movs	r3, #2
 800446c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800446e:	2301      	movs	r3, #1
 8004470:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004472:	f107 0310 	add.w	r3, r7, #16
 8004476:	4618      	mov	r0, r3
 8004478:	f006 fbe6 	bl	800ac48 <HAL_RCCEx_PeriphCLKConfig>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8004482:	f7ff fab1 	bl	80039e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8004486:	4b18      	ldr	r3, [pc, #96]	@ (80044e8 <HAL_SPDIFRX_MspInit+0xc0>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448a:	4a17      	ldr	r2, [pc, #92]	@ (80044e8 <HAL_SPDIFRX_MspInit+0xc0>)
 800448c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004490:	6413      	str	r3, [r2, #64]	@ 0x40
 8004492:	4b15      	ldr	r3, [pc, #84]	@ (80044e8 <HAL_SPDIFRX_MspInit+0xc0>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004496:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800449e:	4b12      	ldr	r3, [pc, #72]	@ (80044e8 <HAL_SPDIFRX_MspInit+0xc0>)
 80044a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a2:	4a11      	ldr	r2, [pc, #68]	@ (80044e8 <HAL_SPDIFRX_MspInit+0xc0>)
 80044a4:	f043 0308 	orr.w	r3, r3, #8
 80044a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80044aa:	4b0f      	ldr	r3, [pc, #60]	@ (80044e8 <HAL_SPDIFRX_MspInit+0xc0>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	60bb      	str	r3, [r7, #8]
 80044b4:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80044b6:	2380      	movs	r3, #128	@ 0x80
 80044b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044bc:	2302      	movs	r3, #2
 80044be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c8:	2300      	movs	r3, #0
 80044ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80044ce:	2308      	movs	r3, #8
 80044d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80044d4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80044d8:	4619      	mov	r1, r3
 80044da:	4804      	ldr	r0, [pc, #16]	@ (80044ec <HAL_SPDIFRX_MspInit+0xc4>)
 80044dc:	f003 fa24 	bl	8007928 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 80044e0:	bf00      	nop
 80044e2:	37a8      	adds	r7, #168	@ 0xa8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40023800 	.word	0x40023800
 80044ec:	40020c00 	.word	0x40020c00

080044f0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08a      	sub	sp, #40	@ 0x28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044f8:	f107 0314 	add.w	r3, r7, #20
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	605a      	str	r2, [r3, #4]
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	60da      	str	r2, [r3, #12]
 8004506:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a25      	ldr	r2, [pc, #148]	@ (80045a4 <HAL_SPI_MspInit+0xb4>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d144      	bne.n	800459c <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004512:	4b25      	ldr	r3, [pc, #148]	@ (80045a8 <HAL_SPI_MspInit+0xb8>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004516:	4a24      	ldr	r2, [pc, #144]	@ (80045a8 <HAL_SPI_MspInit+0xb8>)
 8004518:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800451c:	6413      	str	r3, [r2, #64]	@ 0x40
 800451e:	4b22      	ldr	r3, [pc, #136]	@ (80045a8 <HAL_SPI_MspInit+0xb8>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004526:	613b      	str	r3, [r7, #16]
 8004528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800452a:	4b1f      	ldr	r3, [pc, #124]	@ (80045a8 <HAL_SPI_MspInit+0xb8>)
 800452c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452e:	4a1e      	ldr	r2, [pc, #120]	@ (80045a8 <HAL_SPI_MspInit+0xb8>)
 8004530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004534:	6313      	str	r3, [r2, #48]	@ 0x30
 8004536:	4b1c      	ldr	r3, [pc, #112]	@ (80045a8 <HAL_SPI_MspInit+0xb8>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004542:	4b19      	ldr	r3, [pc, #100]	@ (80045a8 <HAL_SPI_MspInit+0xb8>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004546:	4a18      	ldr	r2, [pc, #96]	@ (80045a8 <HAL_SPI_MspInit+0xb8>)
 8004548:	f043 0302 	orr.w	r3, r3, #2
 800454c:	6313      	str	r3, [r2, #48]	@ 0x30
 800454e:	4b16      	ldr	r3, [pc, #88]	@ (80045a8 <HAL_SPI_MspInit+0xb8>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	60bb      	str	r3, [r7, #8]
 8004558:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800455a:	2302      	movs	r3, #2
 800455c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455e:	2302      	movs	r3, #2
 8004560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004566:	2300      	movs	r3, #0
 8004568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800456a:	2305      	movs	r3, #5
 800456c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800456e:	f107 0314 	add.w	r3, r7, #20
 8004572:	4619      	mov	r1, r3
 8004574:	480d      	ldr	r0, [pc, #52]	@ (80045ac <HAL_SPI_MspInit+0xbc>)
 8004576:	f003 f9d7 	bl	8007928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800457a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800457e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004580:	2302      	movs	r3, #2
 8004582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004584:	2300      	movs	r3, #0
 8004586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004588:	2300      	movs	r3, #0
 800458a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800458c:	2305      	movs	r3, #5
 800458e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004590:	f107 0314 	add.w	r3, r7, #20
 8004594:	4619      	mov	r1, r3
 8004596:	4806      	ldr	r0, [pc, #24]	@ (80045b0 <HAL_SPI_MspInit+0xc0>)
 8004598:	f003 f9c6 	bl	8007928 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 800459c:	bf00      	nop
 800459e:	3728      	adds	r7, #40	@ 0x28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40003800 	.word	0x40003800
 80045a8:	40023800 	.word	0x40023800
 80045ac:	40022000 	.word	0x40022000
 80045b0:	40020400 	.word	0x40020400

080045b4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b089      	sub	sp, #36	@ 0x24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a2e      	ldr	r2, [pc, #184]	@ (800467c <HAL_TIM_Base_MspInit+0xc8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d10c      	bne.n	80045e0 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045c6:	4b2e      	ldr	r3, [pc, #184]	@ (8004680 <HAL_TIM_Base_MspInit+0xcc>)
 80045c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ca:	4a2d      	ldr	r2, [pc, #180]	@ (8004680 <HAL_TIM_Base_MspInit+0xcc>)
 80045cc:	f043 0301 	orr.w	r3, r3, #1
 80045d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80045d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004680 <HAL_TIM_Base_MspInit+0xcc>)
 80045d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	61fb      	str	r3, [r7, #28]
 80045dc:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 80045de:	e046      	b.n	800466e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045e8:	d10c      	bne.n	8004604 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045ea:	4b25      	ldr	r3, [pc, #148]	@ (8004680 <HAL_TIM_Base_MspInit+0xcc>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	4a24      	ldr	r2, [pc, #144]	@ (8004680 <HAL_TIM_Base_MspInit+0xcc>)
 80045f0:	f043 0301 	orr.w	r3, r3, #1
 80045f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80045f6:	4b22      	ldr	r3, [pc, #136]	@ (8004680 <HAL_TIM_Base_MspInit+0xcc>)
 80045f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	61bb      	str	r3, [r7, #24]
 8004600:	69bb      	ldr	r3, [r7, #24]
}
 8004602:	e034      	b.n	800466e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1e      	ldr	r2, [pc, #120]	@ (8004684 <HAL_TIM_Base_MspInit+0xd0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d10c      	bne.n	8004628 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800460e:	4b1c      	ldr	r3, [pc, #112]	@ (8004680 <HAL_TIM_Base_MspInit+0xcc>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004612:	4a1b      	ldr	r2, [pc, #108]	@ (8004680 <HAL_TIM_Base_MspInit+0xcc>)
 8004614:	f043 0302 	orr.w	r3, r3, #2
 8004618:	6413      	str	r3, [r2, #64]	@ 0x40
 800461a:	4b19      	ldr	r3, [pc, #100]	@ (8004680 <HAL_TIM_Base_MspInit+0xcc>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	697b      	ldr	r3, [r7, #20]
}
 8004626:	e022      	b.n	800466e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a16      	ldr	r2, [pc, #88]	@ (8004688 <HAL_TIM_Base_MspInit+0xd4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d10c      	bne.n	800464c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004632:	4b13      	ldr	r3, [pc, #76]	@ (8004680 <HAL_TIM_Base_MspInit+0xcc>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004636:	4a12      	ldr	r2, [pc, #72]	@ (8004680 <HAL_TIM_Base_MspInit+0xcc>)
 8004638:	f043 0308 	orr.w	r3, r3, #8
 800463c:	6413      	str	r3, [r2, #64]	@ 0x40
 800463e:	4b10      	ldr	r3, [pc, #64]	@ (8004680 <HAL_TIM_Base_MspInit+0xcc>)
 8004640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	693b      	ldr	r3, [r7, #16]
}
 800464a:	e010      	b.n	800466e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a0e      	ldr	r2, [pc, #56]	@ (800468c <HAL_TIM_Base_MspInit+0xd8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d10b      	bne.n	800466e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004656:	4b0a      	ldr	r3, [pc, #40]	@ (8004680 <HAL_TIM_Base_MspInit+0xcc>)
 8004658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465a:	4a09      	ldr	r2, [pc, #36]	@ (8004680 <HAL_TIM_Base_MspInit+0xcc>)
 800465c:	f043 0302 	orr.w	r3, r3, #2
 8004660:	6453      	str	r3, [r2, #68]	@ 0x44
 8004662:	4b07      	ldr	r3, [pc, #28]	@ (8004680 <HAL_TIM_Base_MspInit+0xcc>)
 8004664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	68fb      	ldr	r3, [r7, #12]
}
 800466e:	bf00      	nop
 8004670:	3724      	adds	r7, #36	@ 0x24
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40010000 	.word	0x40010000
 8004680:	40023800 	.word	0x40023800
 8004684:	40000400 	.word	0x40000400
 8004688:	40000c00 	.word	0x40000c00
 800468c:	40010400 	.word	0x40010400

08004690 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a0a      	ldr	r2, [pc, #40]	@ (80046c8 <HAL_TIM_PWM_MspInit+0x38>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d10b      	bne.n	80046ba <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80046a2:	4b0a      	ldr	r3, [pc, #40]	@ (80046cc <HAL_TIM_PWM_MspInit+0x3c>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a6:	4a09      	ldr	r2, [pc, #36]	@ (80046cc <HAL_TIM_PWM_MspInit+0x3c>)
 80046a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80046ae:	4b07      	ldr	r3, [pc, #28]	@ (80046cc <HAL_TIM_PWM_MspInit+0x3c>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 80046ba:	bf00      	nop
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40001800 	.word	0x40001800
 80046cc:	40023800 	.word	0x40023800

080046d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08c      	sub	sp, #48	@ 0x30
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d8:	f107 031c 	add.w	r3, r7, #28
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	605a      	str	r2, [r3, #4]
 80046e2:	609a      	str	r2, [r3, #8]
 80046e4:	60da      	str	r2, [r3, #12]
 80046e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a56      	ldr	r2, [pc, #344]	@ (8004848 <HAL_TIM_MspPostInit+0x178>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d11d      	bne.n	800472e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f2:	4b56      	ldr	r3, [pc, #344]	@ (800484c <HAL_TIM_MspPostInit+0x17c>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f6:	4a55      	ldr	r2, [pc, #340]	@ (800484c <HAL_TIM_MspPostInit+0x17c>)
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80046fe:	4b53      	ldr	r3, [pc, #332]	@ (800484c <HAL_TIM_MspPostInit+0x17c>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	61bb      	str	r3, [r7, #24]
 8004708:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800470a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800470e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004710:	2302      	movs	r3, #2
 8004712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004714:	2300      	movs	r3, #0
 8004716:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004718:	2300      	movs	r3, #0
 800471a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800471c:	2301      	movs	r3, #1
 800471e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8004720:	f107 031c 	add.w	r3, r7, #28
 8004724:	4619      	mov	r1, r3
 8004726:	484a      	ldr	r0, [pc, #296]	@ (8004850 <HAL_TIM_MspPostInit+0x180>)
 8004728:	f003 f8fe 	bl	8007928 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800472c:	e087      	b.n	800483e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004736:	d11d      	bne.n	8004774 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004738:	4b44      	ldr	r3, [pc, #272]	@ (800484c <HAL_TIM_MspPostInit+0x17c>)
 800473a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473c:	4a43      	ldr	r2, [pc, #268]	@ (800484c <HAL_TIM_MspPostInit+0x17c>)
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	6313      	str	r3, [r2, #48]	@ 0x30
 8004744:	4b41      	ldr	r3, [pc, #260]	@ (800484c <HAL_TIM_MspPostInit+0x17c>)
 8004746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8004750:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004756:	2302      	movs	r3, #2
 8004758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475a:	2300      	movs	r3, #0
 800475c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800475e:	2300      	movs	r3, #0
 8004760:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004762:	2301      	movs	r3, #1
 8004764:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8004766:	f107 031c 	add.w	r3, r7, #28
 800476a:	4619      	mov	r1, r3
 800476c:	4838      	ldr	r0, [pc, #224]	@ (8004850 <HAL_TIM_MspPostInit+0x180>)
 800476e:	f003 f8db 	bl	8007928 <HAL_GPIO_Init>
}
 8004772:	e064      	b.n	800483e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a36      	ldr	r2, [pc, #216]	@ (8004854 <HAL_TIM_MspPostInit+0x184>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d11c      	bne.n	80047b8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800477e:	4b33      	ldr	r3, [pc, #204]	@ (800484c <HAL_TIM_MspPostInit+0x17c>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004782:	4a32      	ldr	r2, [pc, #200]	@ (800484c <HAL_TIM_MspPostInit+0x17c>)
 8004784:	f043 0302 	orr.w	r3, r3, #2
 8004788:	6313      	str	r3, [r2, #48]	@ 0x30
 800478a:	4b30      	ldr	r3, [pc, #192]	@ (800484c <HAL_TIM_MspPostInit+0x17c>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8004796:	2310      	movs	r3, #16
 8004798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479a:	2302      	movs	r3, #2
 800479c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047a2:	2300      	movs	r3, #0
 80047a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80047a6:	2302      	movs	r3, #2
 80047a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80047aa:	f107 031c 	add.w	r3, r7, #28
 80047ae:	4619      	mov	r1, r3
 80047b0:	4829      	ldr	r0, [pc, #164]	@ (8004858 <HAL_TIM_MspPostInit+0x188>)
 80047b2:	f003 f8b9 	bl	8007928 <HAL_GPIO_Init>
}
 80047b6:	e042      	b.n	800483e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a27      	ldr	r2, [pc, #156]	@ (800485c <HAL_TIM_MspPostInit+0x18c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d11c      	bne.n	80047fc <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80047c2:	4b22      	ldr	r3, [pc, #136]	@ (800484c <HAL_TIM_MspPostInit+0x17c>)
 80047c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c6:	4a21      	ldr	r2, [pc, #132]	@ (800484c <HAL_TIM_MspPostInit+0x17c>)
 80047c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80047ce:	4b1f      	ldr	r3, [pc, #124]	@ (800484c <HAL_TIM_MspPostInit+0x17c>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80047da:	2301      	movs	r3, #1
 80047dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047de:	2302      	movs	r3, #2
 80047e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e2:	2300      	movs	r3, #0
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e6:	2300      	movs	r3, #0
 80047e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80047ea:	2302      	movs	r3, #2
 80047ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80047ee:	f107 031c 	add.w	r3, r7, #28
 80047f2:	4619      	mov	r1, r3
 80047f4:	481a      	ldr	r0, [pc, #104]	@ (8004860 <HAL_TIM_MspPostInit+0x190>)
 80047f6:	f003 f897 	bl	8007928 <HAL_GPIO_Init>
}
 80047fa:	e020      	b.n	800483e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a18      	ldr	r2, [pc, #96]	@ (8004864 <HAL_TIM_MspPostInit+0x194>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d11b      	bne.n	800483e <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004806:	4b11      	ldr	r3, [pc, #68]	@ (800484c <HAL_TIM_MspPostInit+0x17c>)
 8004808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480a:	4a10      	ldr	r2, [pc, #64]	@ (800484c <HAL_TIM_MspPostInit+0x17c>)
 800480c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004810:	6313      	str	r3, [r2, #48]	@ 0x30
 8004812:	4b0e      	ldr	r3, [pc, #56]	@ (800484c <HAL_TIM_MspPostInit+0x17c>)
 8004814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800481a:	60bb      	str	r3, [r7, #8]
 800481c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800481e:	2340      	movs	r3, #64	@ 0x40
 8004820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004822:	2302      	movs	r3, #2
 8004824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004826:	2300      	movs	r3, #0
 8004828:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800482a:	2300      	movs	r3, #0
 800482c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800482e:	2309      	movs	r3, #9
 8004830:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8004832:	f107 031c 	add.w	r3, r7, #28
 8004836:	4619      	mov	r1, r3
 8004838:	480b      	ldr	r0, [pc, #44]	@ (8004868 <HAL_TIM_MspPostInit+0x198>)
 800483a:	f003 f875 	bl	8007928 <HAL_GPIO_Init>
}
 800483e:	bf00      	nop
 8004840:	3730      	adds	r7, #48	@ 0x30
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40010000 	.word	0x40010000
 800484c:	40023800 	.word	0x40023800
 8004850:	40020000 	.word	0x40020000
 8004854:	40000400 	.word	0x40000400
 8004858:	40020400 	.word	0x40020400
 800485c:	40000c00 	.word	0x40000c00
 8004860:	40022000 	.word	0x40022000
 8004864:	40001800 	.word	0x40001800
 8004868:	40021c00 	.word	0x40021c00

0800486c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b0ae      	sub	sp, #184	@ 0xb8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004874:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	605a      	str	r2, [r3, #4]
 800487e:	609a      	str	r2, [r3, #8]
 8004880:	60da      	str	r2, [r3, #12]
 8004882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004884:	f107 0320 	add.w	r3, r7, #32
 8004888:	2284      	movs	r2, #132	@ 0x84
 800488a:	2100      	movs	r1, #0
 800488c:	4618      	mov	r0, r3
 800488e:	f012 fba3 	bl	8016fd8 <memset>
  if(huart->Instance==USART1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a53      	ldr	r2, [pc, #332]	@ (80049e4 <HAL_UART_MspInit+0x178>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d15d      	bne.n	8004958 <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800489c:	2340      	movs	r3, #64	@ 0x40
 800489e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80048a0:	2300      	movs	r3, #0
 80048a2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048a4:	f107 0320 	add.w	r3, r7, #32
 80048a8:	4618      	mov	r0, r3
 80048aa:	f006 f9cd 	bl	800ac48 <HAL_RCCEx_PeriphCLKConfig>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80048b4:	f7ff f898 	bl	80039e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048b8:	4b4b      	ldr	r3, [pc, #300]	@ (80049e8 <HAL_UART_MspInit+0x17c>)
 80048ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048bc:	4a4a      	ldr	r2, [pc, #296]	@ (80049e8 <HAL_UART_MspInit+0x17c>)
 80048be:	f043 0310 	orr.w	r3, r3, #16
 80048c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80048c4:	4b48      	ldr	r3, [pc, #288]	@ (80049e8 <HAL_UART_MspInit+0x17c>)
 80048c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048d0:	4b45      	ldr	r3, [pc, #276]	@ (80049e8 <HAL_UART_MspInit+0x17c>)
 80048d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d4:	4a44      	ldr	r2, [pc, #272]	@ (80049e8 <HAL_UART_MspInit+0x17c>)
 80048d6:	f043 0302 	orr.w	r3, r3, #2
 80048da:	6313      	str	r3, [r2, #48]	@ 0x30
 80048dc:	4b42      	ldr	r3, [pc, #264]	@ (80049e8 <HAL_UART_MspInit+0x17c>)
 80048de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	61bb      	str	r3, [r7, #24]
 80048e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048e8:	4b3f      	ldr	r3, [pc, #252]	@ (80049e8 <HAL_UART_MspInit+0x17c>)
 80048ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ec:	4a3e      	ldr	r2, [pc, #248]	@ (80049e8 <HAL_UART_MspInit+0x17c>)
 80048ee:	f043 0301 	orr.w	r3, r3, #1
 80048f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80048f4:	4b3c      	ldr	r3, [pc, #240]	@ (80049e8 <HAL_UART_MspInit+0x17c>)
 80048f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004900:	2380      	movs	r3, #128	@ 0x80
 8004902:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004906:	2302      	movs	r3, #2
 8004908:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490c:	2300      	movs	r3, #0
 800490e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004912:	2300      	movs	r3, #0
 8004914:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004918:	2307      	movs	r3, #7
 800491a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800491e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004922:	4619      	mov	r1, r3
 8004924:	4831      	ldr	r0, [pc, #196]	@ (80049ec <HAL_UART_MspInit+0x180>)
 8004926:	f002 ffff 	bl	8007928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800492a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800492e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004932:	2302      	movs	r3, #2
 8004934:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004938:	2300      	movs	r3, #0
 800493a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800493e:	2300      	movs	r3, #0
 8004940:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004944:	2307      	movs	r3, #7
 8004946:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800494a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800494e:	4619      	mov	r1, r3
 8004950:	4827      	ldr	r0, [pc, #156]	@ (80049f0 <HAL_UART_MspInit+0x184>)
 8004952:	f002 ffe9 	bl	8007928 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8004956:	e040      	b.n	80049da <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a25      	ldr	r2, [pc, #148]	@ (80049f4 <HAL_UART_MspInit+0x188>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d13b      	bne.n	80049da <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004962:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004966:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004968:	2300      	movs	r3, #0
 800496a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800496c:	f107 0320 	add.w	r3, r7, #32
 8004970:	4618      	mov	r0, r3
 8004972:	f006 f969 	bl	800ac48 <HAL_RCCEx_PeriphCLKConfig>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <HAL_UART_MspInit+0x114>
      Error_Handler();
 800497c:	f7ff f834 	bl	80039e8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004980:	4b19      	ldr	r3, [pc, #100]	@ (80049e8 <HAL_UART_MspInit+0x17c>)
 8004982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004984:	4a18      	ldr	r2, [pc, #96]	@ (80049e8 <HAL_UART_MspInit+0x17c>)
 8004986:	f043 0320 	orr.w	r3, r3, #32
 800498a:	6453      	str	r3, [r2, #68]	@ 0x44
 800498c:	4b16      	ldr	r3, [pc, #88]	@ (80049e8 <HAL_UART_MspInit+0x17c>)
 800498e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004990:	f003 0320 	and.w	r3, r3, #32
 8004994:	613b      	str	r3, [r7, #16]
 8004996:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004998:	4b13      	ldr	r3, [pc, #76]	@ (80049e8 <HAL_UART_MspInit+0x17c>)
 800499a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499c:	4a12      	ldr	r2, [pc, #72]	@ (80049e8 <HAL_UART_MspInit+0x17c>)
 800499e:	f043 0304 	orr.w	r3, r3, #4
 80049a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80049a4:	4b10      	ldr	r3, [pc, #64]	@ (80049e8 <HAL_UART_MspInit+0x17c>)
 80049a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80049b0:	23c0      	movs	r3, #192	@ 0xc0
 80049b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b6:	2302      	movs	r3, #2
 80049b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049bc:	2300      	movs	r3, #0
 80049be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049c2:	2303      	movs	r3, #3
 80049c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80049c8:	2308      	movs	r3, #8
 80049ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049ce:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80049d2:	4619      	mov	r1, r3
 80049d4:	4808      	ldr	r0, [pc, #32]	@ (80049f8 <HAL_UART_MspInit+0x18c>)
 80049d6:	f002 ffa7 	bl	8007928 <HAL_GPIO_Init>
}
 80049da:	bf00      	nop
 80049dc:	37b8      	adds	r7, #184	@ 0xb8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40011000 	.word	0x40011000
 80049e8:	40023800 	.word	0x40023800
 80049ec:	40020400 	.word	0x40020400
 80049f0:	40020000 	.word	0x40020000
 80049f4:	40011400 	.word	0x40011400
 80049f8:	40020800 	.word	0x40020800

080049fc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004a02:	1d3b      	adds	r3, r7, #4
 8004a04:	2200      	movs	r2, #0
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	605a      	str	r2, [r3, #4]
 8004a0a:	609a      	str	r2, [r3, #8]
 8004a0c:	60da      	str	r2, [r3, #12]
 8004a0e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004a10:	4b3a      	ldr	r3, [pc, #232]	@ (8004afc <HAL_FMC_MspInit+0x100>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d16d      	bne.n	8004af4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8004a18:	4b38      	ldr	r3, [pc, #224]	@ (8004afc <HAL_FMC_MspInit+0x100>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004a1e:	4b38      	ldr	r3, [pc, #224]	@ (8004b00 <HAL_FMC_MspInit+0x104>)
 8004a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a22:	4a37      	ldr	r2, [pc, #220]	@ (8004b00 <HAL_FMC_MspInit+0x104>)
 8004a24:	f043 0301 	orr.w	r3, r3, #1
 8004a28:	6393      	str	r3, [r2, #56]	@ 0x38
 8004a2a:	4b35      	ldr	r3, [pc, #212]	@ (8004b00 <HAL_FMC_MspInit+0x104>)
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8004a36:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004a3a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a44:	2303      	movs	r3, #3
 8004a46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004a48:	230c      	movs	r3, #12
 8004a4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a4c:	1d3b      	adds	r3, r7, #4
 8004a4e:	4619      	mov	r1, r3
 8004a50:	482c      	ldr	r0, [pc, #176]	@ (8004b04 <HAL_FMC_MspInit+0x108>)
 8004a52:	f002 ff69 	bl	8007928 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8004a56:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004a5a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a64:	2303      	movs	r3, #3
 8004a66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004a68:	230c      	movs	r3, #12
 8004a6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004a6c:	1d3b      	adds	r3, r7, #4
 8004a6e:	4619      	mov	r1, r3
 8004a70:	4825      	ldr	r0, [pc, #148]	@ (8004b08 <HAL_FMC_MspInit+0x10c>)
 8004a72:	f002 ff59 	bl	8007928 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8004a76:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004a7a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a84:	2303      	movs	r3, #3
 8004a86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004a88:	230c      	movs	r3, #12
 8004a8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a8c:	1d3b      	adds	r3, r7, #4
 8004a8e:	4619      	mov	r1, r3
 8004a90:	481e      	ldr	r0, [pc, #120]	@ (8004b0c <HAL_FMC_MspInit+0x110>)
 8004a92:	f002 ff49 	bl	8007928 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8004a96:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004a9a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004aa8:	230c      	movs	r3, #12
 8004aaa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004aac:	1d3b      	adds	r3, r7, #4
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4817      	ldr	r0, [pc, #92]	@ (8004b10 <HAL_FMC_MspInit+0x114>)
 8004ab2:	f002 ff39 	bl	8007928 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8004ab6:	2328      	movs	r3, #40	@ 0x28
 8004ab8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aba:	2302      	movs	r3, #2
 8004abc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004ac6:	230c      	movs	r3, #12
 8004ac8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004aca:	1d3b      	adds	r3, r7, #4
 8004acc:	4619      	mov	r1, r3
 8004ace:	4811      	ldr	r0, [pc, #68]	@ (8004b14 <HAL_FMC_MspInit+0x118>)
 8004ad0:	f002 ff2a 	bl	8007928 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad8:	2302      	movs	r3, #2
 8004ada:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004adc:	2300      	movs	r3, #0
 8004ade:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004ae4:	230c      	movs	r3, #12
 8004ae6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8004ae8:	1d3b      	adds	r3, r7, #4
 8004aea:	4619      	mov	r1, r3
 8004aec:	480a      	ldr	r0, [pc, #40]	@ (8004b18 <HAL_FMC_MspInit+0x11c>)
 8004aee:	f002 ff1b 	bl	8007928 <HAL_GPIO_Init>
 8004af2:	e000      	b.n	8004af6 <HAL_FMC_MspInit+0xfa>
    return;
 8004af4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	20001540 	.word	0x20001540
 8004b00:	40023800 	.word	0x40023800
 8004b04:	40021000 	.word	0x40021000
 8004b08:	40021800 	.word	0x40021800
 8004b0c:	40020c00 	.word	0x40020c00
 8004b10:	40021400 	.word	0x40021400
 8004b14:	40021c00 	.word	0x40021c00
 8004b18:	40020800 	.word	0x40020800

08004b1c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004b24:	f7ff ff6a 	bl	80049fc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004b28:	bf00      	nop
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08a      	sub	sp, #40	@ 0x28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a2b      	ldr	r2, [pc, #172]	@ (8004bec <HAL_SAI_MspInit+0xbc>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d124      	bne.n	8004b8c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8004b42:	4b2b      	ldr	r3, [pc, #172]	@ (8004bf0 <HAL_SAI_MspInit+0xc0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10b      	bne.n	8004b62 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8004bf4 <HAL_SAI_MspInit+0xc4>)
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b4e:	4a29      	ldr	r2, [pc, #164]	@ (8004bf4 <HAL_SAI_MspInit+0xc4>)
 8004b50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b54:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b56:	4b27      	ldr	r3, [pc, #156]	@ (8004bf4 <HAL_SAI_MspInit+0xc4>)
 8004b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b5e:	613b      	str	r3, [r7, #16]
 8004b60:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8004b62:	4b23      	ldr	r3, [pc, #140]	@ (8004bf0 <HAL_SAI_MspInit+0xc0>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3301      	adds	r3, #1
 8004b68:	4a21      	ldr	r2, [pc, #132]	@ (8004bf0 <HAL_SAI_MspInit+0xc0>)
 8004b6a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8004b6c:	23f0      	movs	r3, #240	@ 0xf0
 8004b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b70:	2302      	movs	r3, #2
 8004b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b74:	2300      	movs	r3, #0
 8004b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004b7c:	230a      	movs	r3, #10
 8004b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004b80:	f107 0314 	add.w	r3, r7, #20
 8004b84:	4619      	mov	r1, r3
 8004b86:	481c      	ldr	r0, [pc, #112]	@ (8004bf8 <HAL_SAI_MspInit+0xc8>)
 8004b88:	f002 fece 	bl	8007928 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1a      	ldr	r2, [pc, #104]	@ (8004bfc <HAL_SAI_MspInit+0xcc>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d125      	bne.n	8004be2 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8004b96:	4b16      	ldr	r3, [pc, #88]	@ (8004bf0 <HAL_SAI_MspInit+0xc0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10b      	bne.n	8004bb6 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004b9e:	4b15      	ldr	r3, [pc, #84]	@ (8004bf4 <HAL_SAI_MspInit+0xc4>)
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba2:	4a14      	ldr	r2, [pc, #80]	@ (8004bf4 <HAL_SAI_MspInit+0xc4>)
 8004ba4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ba8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004baa:	4b12      	ldr	r3, [pc, #72]	@ (8004bf4 <HAL_SAI_MspInit+0xc4>)
 8004bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8004bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf0 <HAL_SAI_MspInit+0xc0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8004bf0 <HAL_SAI_MspInit+0xc0>)
 8004bbe:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8004bc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004bd2:	230a      	movs	r3, #10
 8004bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8004bd6:	f107 0314 	add.w	r3, r7, #20
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4808      	ldr	r0, [pc, #32]	@ (8004c00 <HAL_SAI_MspInit+0xd0>)
 8004bde:	f002 fea3 	bl	8007928 <HAL_GPIO_Init>

    }
}
 8004be2:	bf00      	nop
 8004be4:	3728      	adds	r7, #40	@ 0x28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40015c04 	.word	0x40015c04
 8004bf0:	20001544 	.word	0x20001544
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	40022000 	.word	0x40022000
 8004bfc:	40015c24 	.word	0x40015c24
 8004c00:	40021800 	.word	0x40021800

08004c04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08e      	sub	sp, #56	@ 0x38
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004c14:	4b33      	ldr	r3, [pc, #204]	@ (8004ce4 <HAL_InitTick+0xe0>)
 8004c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c18:	4a32      	ldr	r2, [pc, #200]	@ (8004ce4 <HAL_InitTick+0xe0>)
 8004c1a:	f043 0310 	orr.w	r3, r3, #16
 8004c1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c20:	4b30      	ldr	r3, [pc, #192]	@ (8004ce4 <HAL_InitTick+0xe0>)
 8004c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c24:	f003 0310 	and.w	r3, r3, #16
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004c2c:	f107 0210 	add.w	r2, r7, #16
 8004c30:	f107 0314 	add.w	r3, r7, #20
 8004c34:	4611      	mov	r1, r2
 8004c36:	4618      	mov	r0, r3
 8004c38:	f005 ffd4 	bl	800abe4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d103      	bne.n	8004c4e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004c46:	f005 ffa5 	bl	800ab94 <HAL_RCC_GetPCLK1Freq>
 8004c4a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004c4c:	e004      	b.n	8004c58 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004c4e:	f005 ffa1 	bl	800ab94 <HAL_RCC_GetPCLK1Freq>
 8004c52:	4603      	mov	r3, r0
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c5a:	4a23      	ldr	r2, [pc, #140]	@ (8004ce8 <HAL_InitTick+0xe4>)
 8004c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c60:	0c9b      	lsrs	r3, r3, #18
 8004c62:	3b01      	subs	r3, #1
 8004c64:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004c66:	4b21      	ldr	r3, [pc, #132]	@ (8004cec <HAL_InitTick+0xe8>)
 8004c68:	4a21      	ldr	r2, [pc, #132]	@ (8004cf0 <HAL_InitTick+0xec>)
 8004c6a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8004cec <HAL_InitTick+0xe8>)
 8004c6e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004c72:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004c74:	4a1d      	ldr	r2, [pc, #116]	@ (8004cec <HAL_InitTick+0xe8>)
 8004c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c78:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8004cec <HAL_InitTick+0xe8>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c80:	4b1a      	ldr	r3, [pc, #104]	@ (8004cec <HAL_InitTick+0xe8>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c86:	4b19      	ldr	r3, [pc, #100]	@ (8004cec <HAL_InitTick+0xe8>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004c8c:	4817      	ldr	r0, [pc, #92]	@ (8004cec <HAL_InitTick+0xe8>)
 8004c8e:	f008 fb56 	bl	800d33e <HAL_TIM_Base_Init>
 8004c92:	4603      	mov	r3, r0
 8004c94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004c98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d11b      	bne.n	8004cd8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004ca0:	4812      	ldr	r0, [pc, #72]	@ (8004cec <HAL_InitTick+0xe8>)
 8004ca2:	f008 fba3 	bl	800d3ec <HAL_TIM_Base_Start_IT>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004cac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d111      	bne.n	8004cd8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004cb4:	2036      	movs	r0, #54	@ 0x36
 8004cb6:	f001 fb0f 	bl	80062d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b0f      	cmp	r3, #15
 8004cbe:	d808      	bhi.n	8004cd2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	2036      	movs	r0, #54	@ 0x36
 8004cc6:	f001 faeb 	bl	80062a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004cca:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf4 <HAL_InitTick+0xf0>)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	e002      	b.n	8004cd8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004cd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3738      	adds	r7, #56	@ 0x38
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	431bde83 	.word	0x431bde83
 8004cec:	20001548 	.word	0x20001548
 8004cf0:	40001000 	.word	0x40001000
 8004cf4:	20000068 	.word	0x20000068

08004cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004cfc:	bf00      	nop
 8004cfe:	e7fd      	b.n	8004cfc <NMI_Handler+0x4>

08004d00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d04:	bf00      	nop
 8004d06:	e7fd      	b.n	8004d04 <HardFault_Handler+0x4>

08004d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d0c:	bf00      	nop
 8004d0e:	e7fd      	b.n	8004d0c <MemManage_Handler+0x4>

08004d10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d14:	bf00      	nop
 8004d16:	e7fd      	b.n	8004d14 <BusFault_Handler+0x4>

08004d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d1c:	bf00      	nop
 8004d1e:	e7fd      	b.n	8004d1c <UsageFault_Handler+0x4>

08004d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d24:	bf00      	nop
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
	...

08004d30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004d34:	4802      	ldr	r0, [pc, #8]	@ (8004d40 <TIM6_DAC_IRQHandler+0x10>)
 8004d36:	f008 fc28 	bl	800d58a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004d3a:	bf00      	nop
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20001548 	.word	0x20001548

08004d44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004d48:	4802      	ldr	r0, [pc, #8]	@ (8004d54 <OTG_FS_IRQHandler+0x10>)
 8004d4a:	f002 ffb2 	bl	8007cb2 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004d4e:	bf00      	nop
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20011b64 	.word	0x20011b64

08004d58 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004d5c:	4802      	ldr	r0, [pc, #8]	@ (8004d68 <LTDC_IRQHandler+0x10>)
 8004d5e:	f004 ff1f 	bl	8009ba0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004d62:	bf00      	nop
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20000c54 	.word	0x20000c54

08004d6c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004d70:	4802      	ldr	r0, [pc, #8]	@ (8004d7c <DMA2D_IRQHandler+0x10>)
 8004d72:	f002 f8e9 	bl	8006f48 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004d76:	bf00      	nop
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000abc 	.word	0x20000abc

08004d80 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt (USART6_RX).
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004d84:	4802      	ldr	r0, [pc, #8]	@ (8004d90 <DMA2_Stream1_IRQHandler+0x10>)
 8004d86:	f001 fe1f 	bl	80069c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004d8a:	bf00      	nop
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	200014cc 	.word	0x200014cc

08004d94 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  
  // IDLE 인터럽트 체크 (메시지 끝 감지)
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 8004d98:	4b09      	ldr	r3, [pc, #36]	@ (8004dc0 <USART6_IRQHandler+0x2c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f003 0310 	and.w	r3, r3, #16
 8004da2:	2b10      	cmp	r3, #16
 8004da4:	d106      	bne.n	8004db4 <USART6_IRQHandler+0x20>
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);  // IDLE 플래그 클리어
 8004da6:	4b06      	ldr	r3, [pc, #24]	@ (8004dc0 <USART6_IRQHandler+0x2c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2210      	movs	r2, #16
 8004dac:	621a      	str	r2, [r3, #32]
    
    // 외부 함수 호출
    extern void USER_UART_IDLECallback(UART_HandleTypeDef *huart);
    USER_UART_IDLECallback(&huart6);
 8004dae:	4804      	ldr	r0, [pc, #16]	@ (8004dc0 <USART6_IRQHandler+0x2c>)
 8004db0:	f000 fe18 	bl	80059e4 <USER_UART_IDLECallback>
  }

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004db4:	4802      	ldr	r0, [pc, #8]	@ (8004dc0 <USART6_IRQHandler+0x2c>)
 8004db6:	f009 fe33 	bl	800ea20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004dba:	bf00      	nop
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	200011f4 	.word	0x200011f4

08004dc4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	e00a      	b.n	8004dec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004dd6:	f3af 8000 	nop.w
 8004dda:	4601      	mov	r1, r0
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	60ba      	str	r2, [r7, #8]
 8004de2:	b2ca      	uxtb	r2, r1
 8004de4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	3301      	adds	r3, #1
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	dbf0      	blt.n	8004dd6 <_read+0x12>
  }

  return len;
 8004df4:	687b      	ldr	r3, [r7, #4]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b086      	sub	sp, #24
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	60f8      	str	r0, [r7, #12]
 8004e06:	60b9      	str	r1, [r7, #8]
 8004e08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	617b      	str	r3, [r7, #20]
 8004e0e:	e009      	b.n	8004e24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	60ba      	str	r2, [r7, #8]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	3301      	adds	r3, #1
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	dbf1      	blt.n	8004e10 <_write+0x12>
  }
  return len;
 8004e2c:	687b      	ldr	r3, [r7, #4]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <_close>:

int _close(int file)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004e3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004e5e:	605a      	str	r2, [r3, #4]
  return 0;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <_isatty>:

int _isatty(int file)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004e76:	2301      	movs	r3, #1
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
	...

08004ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ea8:	4a14      	ldr	r2, [pc, #80]	@ (8004efc <_sbrk+0x5c>)
 8004eaa:	4b15      	ldr	r3, [pc, #84]	@ (8004f00 <_sbrk+0x60>)
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004eb4:	4b13      	ldr	r3, [pc, #76]	@ (8004f04 <_sbrk+0x64>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d102      	bne.n	8004ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ebc:	4b11      	ldr	r3, [pc, #68]	@ (8004f04 <_sbrk+0x64>)
 8004ebe:	4a12      	ldr	r2, [pc, #72]	@ (8004f08 <_sbrk+0x68>)
 8004ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ec2:	4b10      	ldr	r3, [pc, #64]	@ (8004f04 <_sbrk+0x64>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4413      	add	r3, r2
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d207      	bcs.n	8004ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ed0:	f012 f90a 	bl	80170e8 <__errno>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	220c      	movs	r2, #12
 8004ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004eda:	f04f 33ff 	mov.w	r3, #4294967295
 8004ede:	e009      	b.n	8004ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ee0:	4b08      	ldr	r3, [pc, #32]	@ (8004f04 <_sbrk+0x64>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ee6:	4b07      	ldr	r3, [pc, #28]	@ (8004f04 <_sbrk+0x64>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4413      	add	r3, r2
 8004eee:	4a05      	ldr	r2, [pc, #20]	@ (8004f04 <_sbrk+0x64>)
 8004ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	20050000 	.word	0x20050000
 8004f00:	00000400 	.word	0x00000400
 8004f04:	20001594 	.word	0x20001594
 8004f08:	20012090 	.word	0x20012090

08004f0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f10:	4b06      	ldr	r3, [pc, #24]	@ (8004f2c <SystemInit+0x20>)
 8004f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f16:	4a05      	ldr	r2, [pc, #20]	@ (8004f2c <SystemInit+0x20>)
 8004f18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f20:	bf00      	nop
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	e000ed00 	.word	0xe000ed00

08004f30 <TIME_GetCurrentMs>:
// ============================================================================
// 기본 시간 함수
// ============================================================================

uint32_t TIME_GetCurrentMs(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
    return TIME_Platform_GetCurrentMs();
 8004f34:	f000 f803 	bl	8004f3e <TIME_Platform_GetCurrentMs>
 8004f38:	4603      	mov	r3, r0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <TIME_Platform_GetCurrentMs>:
#include "time.h"
#include "stm32f7xx_hal.h"

// STM32용 플랫폼 함수들
uint32_t TIME_Platform_GetCurrentMs(void)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // HAL_GetTick()은 1ms 단위로 시간을 반환
 8004f42:	f000 fe2d 	bl	8005ba0 <HAL_GetTick>
 8004f46:	4603      	mov	r3, r0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d102      	bne.n	8004f62 <LOGGER_Connect+0x16>
 8004f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f60:	e016      	b.n	8004f90 <LOGGER_Connect+0x44>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 8004f62:	223f      	movs	r2, #63	@ 0x3f
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	480c      	ldr	r0, [pc, #48]	@ (8004f98 <LOGGER_Connect+0x4c>)
 8004f68:	f012 f83e 	bl	8016fe8 <strncpy>
    current_config.server_port = port;
 8004f6c:	4a0b      	ldr	r2, [pc, #44]	@ (8004f9c <LOGGER_Connect+0x50>)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 8004f72:	6839      	ldr	r1, [r7, #0]
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f8ef 	bl	8005158 <LOGGER_Platform_Connect>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	73fb      	strb	r3, [r7, #15]
    if (status == LOGGER_STATUS_OK) {
 8004f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d102      	bne.n	8004f8c <LOGGER_Connect+0x40>
        logger_connected = true;
 8004f86:	4b06      	ldr	r3, [pc, #24]	@ (8004fa0 <LOGGER_Connect+0x54>)
 8004f88:	2201      	movs	r2, #1
 8004f8a:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8004f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	20000023 	.word	0x20000023
 8004f9c:	20000020 	.word	0x20000020
 8004fa0:	20001598 	.word	0x20001598

08004fa4 <LOGGER_SetFilterLevel>:
bool LOGGER_IsConnected(void) {
    return logger_connected;
}

// Logger 제어 함수들
void LOGGER_SetFilterLevel(LogLevel min_level) {
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	4603      	mov	r3, r0
 8004fac:	71fb      	strb	r3, [r7, #7]
    filter_level = min_level;
 8004fae:	4a04      	ldr	r2, [pc, #16]	@ (8004fc0 <LOGGER_SetFilterLevel+0x1c>)
 8004fb0:	79fb      	ldrb	r3, [r7, #7]
 8004fb2:	7013      	strb	r3, [r2, #0]
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	2000159a 	.word	0x2000159a

08004fc4 <LOGGER_SetMode>:

void LOGGER_SetMode(LoggerMode_t mode) {
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	71fb      	strb	r3, [r7, #7]
    current_mode = mode;
 8004fce:	4a0d      	ldr	r2, [pc, #52]	@ (8005004 <LOGGER_SetMode+0x40>)
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	7013      	strb	r3, [r2, #0]
    
    // 모드에 따른 연결 상태 설정
    if (mode == LOGGER_MODE_TERMINAL_ONLY) {
 8004fd4:	79fb      	ldrb	r3, [r7, #7]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <LOGGER_SetMode+0x1e>
        logger_connected = true;  // 터미널은 항상 연결됨
 8004fda:	4b0b      	ldr	r3, [pc, #44]	@ (8005008 <LOGGER_SetMode+0x44>)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	701a      	strb	r2, [r3, #0]
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
        // SD 백엔드 사용 시 SDStorage 연결 상태에 따라 결정
        logger_connected = SDStorage_IsReady();
    }
}
 8004fe0:	e00b      	b.n	8004ffa <LOGGER_SetMode+0x36>
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
 8004fe2:	79fb      	ldrb	r3, [r7, #7]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d002      	beq.n	8004fee <LOGGER_SetMode+0x2a>
 8004fe8:	79fb      	ldrb	r3, [r7, #7]
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d105      	bne.n	8004ffa <LOGGER_SetMode+0x36>
        logger_connected = SDStorage_IsReady();
 8004fee:	f7fc fb67 	bl	80016c0 <SDStorage_IsReady>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	4b04      	ldr	r3, [pc, #16]	@ (8005008 <LOGGER_SetMode+0x44>)
 8004ff8:	701a      	strb	r2, [r3, #0]
}
 8004ffa:	bf00      	nop
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20001599 	.word	0x20001599
 8005008:	20001598 	.word	0x20001598

0800500c <LOGGER_SendFormatted>:

LoggerMode_t LOGGER_GetMode(void) {
    return current_mode;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 800500c:	b40e      	push	{r1, r2, r3}
 800500e:	b590      	push	{r4, r7, lr}
 8005010:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8005014:	af00      	add	r7, sp, #0
 8005016:	4602      	mov	r2, r0
 8005018:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800501c:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8005020:	701a      	strb	r2, [r3, #0]
    // 필터 레벨 체크
    if (level < filter_level) return;
 8005022:	4b48      	ldr	r3, [pc, #288]	@ (8005144 <LOGGER_SendFormatted+0x138>)
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800502a:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 800502e:	7812      	ldrb	r2, [r2, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d379      	bcc.n	8005128 <LOGGER_SendFormatted+0x11c>
    if (level < current_config.level) return;
 8005034:	4b44      	ldr	r3, [pc, #272]	@ (8005148 <LOGGER_SendFormatted+0x13c>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800503c:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 8005040:	7812      	ldrb	r2, [r2, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d372      	bcc.n	800512c <LOGGER_SendFormatted+0x120>
    
    char buffer[512];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 8005046:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800504a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800504e:	4a3f      	ldr	r2, [pc, #252]	@ (800514c <LOGGER_SendFormatted+0x140>)
 8005050:	461c      	mov	r4, r3
 8005052:	4613      	mov	r3, r2
 8005054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005056:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 레벨 문자열 추가
    int offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 800505a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800505e:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8005062:	781a      	ldrb	r2, [r3, #0]
 8005064:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005068:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800506c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005070:	f107 001c 	add.w	r0, r7, #28
 8005074:	4a36      	ldr	r2, [pc, #216]	@ (8005150 <LOGGER_SendFormatted+0x144>)
 8005076:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800507a:	f011 fed5 	bl	8016e28 <sniprintf>
 800507e:	f8c7 021c 	str.w	r0, [r7, #540]	@ 0x21c
    
    // 가변 인수 처리
    va_list args;
    va_start(args, format);
 8005082:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8005086:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800508a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800508e:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, sizeof(buffer) - offset, format, args);
 8005090:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005094:	f107 021c 	add.w	r2, r7, #28
 8005098:	18d0      	adds	r0, r2, r3
 800509a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800509e:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 80050a2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050a6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 80050b0:	f011 ff84 	bl	8016fbc <vsniprintf>
    va_end(args);
    
    // 모드에 따른 출력 처리
    switch (current_mode) {
 80050b4:	4b27      	ldr	r3, [pc, #156]	@ (8005154 <LOGGER_SendFormatted+0x148>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d01e      	beq.n	80050fa <LOGGER_SendFormatted+0xee>
 80050bc:	2b02      	cmp	r3, #2
 80050be:	dc3a      	bgt.n	8005136 <LOGGER_SendFormatted+0x12a>
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <LOGGER_SendFormatted+0xbe>
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d006      	beq.n	80050d6 <LOGGER_SendFormatted+0xca>
 80050c8:	e035      	b.n	8005136 <LOGGER_SendFormatted+0x12a>
        case LOGGER_MODE_TERMINAL_ONLY:
            LOGGER_Platform_Send(buffer);
 80050ca:	f107 031c 	add.w	r3, r7, #28
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 f84e 	bl	8005170 <LOGGER_Platform_Send>
            break;
 80050d4:	e02f      	b.n	8005136 <LOGGER_SendFormatted+0x12a>
            
        case LOGGER_MODE_SD_ONLY:
            if (SDStorage_IsReady()) {
 80050d6:	f7fc faf3 	bl	80016c0 <SDStorage_IsReady>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d027      	beq.n	8005130 <LOGGER_SendFormatted+0x124>
                SDStorage_WriteLog(buffer, strlen(buffer));
 80050e0:	f107 031c 	add.w	r3, r7, #28
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fb f89d 	bl	8000224 <strlen>
 80050ea:	4602      	mov	r2, r0
 80050ec:	f107 031c 	add.w	r3, r7, #28
 80050f0:	4611      	mov	r1, r2
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fc f9e4 	bl	80014c0 <SDStorage_WriteLog>
            }
            break;
 80050f8:	e01a      	b.n	8005130 <LOGGER_SendFormatted+0x124>
            
        case LOGGER_MODE_DUAL:
            // 터미널 출력 (실시간)
            LOGGER_Platform_Send(buffer);
 80050fa:	f107 031c 	add.w	r3, r7, #28
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 f836 	bl	8005170 <LOGGER_Platform_Send>
            // SD 출력 (에러 무시)
            if (SDStorage_IsReady()) {
 8005104:	f7fc fadc 	bl	80016c0 <SDStorage_IsReady>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d012      	beq.n	8005134 <LOGGER_SendFormatted+0x128>
                SDStorage_WriteLog(buffer, strlen(buffer));
 800510e:	f107 031c 	add.w	r3, r7, #28
 8005112:	4618      	mov	r0, r3
 8005114:	f7fb f886 	bl	8000224 <strlen>
 8005118:	4602      	mov	r2, r0
 800511a:	f107 031c 	add.w	r3, r7, #28
 800511e:	4611      	mov	r1, r2
 8005120:	4618      	mov	r0, r3
 8005122:	f7fc f9cd 	bl	80014c0 <SDStorage_WriteLog>
            }
            break;
 8005126:	e005      	b.n	8005134 <LOGGER_SendFormatted+0x128>
    if (level < filter_level) return;
 8005128:	bf00      	nop
 800512a:	e004      	b.n	8005136 <LOGGER_SendFormatted+0x12a>
    if (level < current_config.level) return;
 800512c:	bf00      	nop
 800512e:	e002      	b.n	8005136 <LOGGER_SendFormatted+0x12a>
            break;
 8005130:	bf00      	nop
 8005132:	e000      	b.n	8005136 <LOGGER_SendFormatted+0x12a>
            break;
 8005134:	bf00      	nop
    }
}
 8005136:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 800513a:	46bd      	mov	sp, r7
 800513c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005140:	b003      	add	sp, #12
 8005142:	4770      	bx	lr
 8005144:	2000159a 	.word	0x2000159a
 8005148:	20000020 	.word	0x20000020
 800514c:	0801a668 	.word	0x0801a668
 8005150:	0801a678 	.word	0x0801a678
 8005154:	20001599 	.word	0x20001599

08005158 <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d102      	bne.n	8005184 <LOGGER_Platform_Send+0x14>
 800517e:	f04f 33ff 	mov.w	r3, #4294967295
 8005182:	e01c      	b.n	80051be <LOGGER_Platform_Send+0x4e>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7fb f84d 	bl	8000224 <strlen>
 800518a:	4603      	mov	r3, r0
 800518c:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	dd12      	ble.n	80051ba <LOGGER_Platform_Send+0x4a>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	b29a      	uxth	r2, r3
 8005198:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	480a      	ldr	r0, [pc, #40]	@ (80051c8 <LOGGER_Platform_Send+0x58>)
 80051a0:	f009 fa16 	bl	800e5d0 <HAL_UART_Transmit>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d107      	bne.n	80051ba <LOGGER_Platform_Send+0x4a>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 80051aa:	2364      	movs	r3, #100	@ 0x64
 80051ac:	2202      	movs	r2, #2
 80051ae:	4907      	ldr	r1, [pc, #28]	@ (80051cc <LOGGER_Platform_Send+0x5c>)
 80051b0:	4805      	ldr	r0, [pc, #20]	@ (80051c8 <LOGGER_Platform_Send+0x58>)
 80051b2:	f009 fa0d 	bl	800e5d0 <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	e001      	b.n	80051be <LOGGER_Platform_Send+0x4e>
        }
    }
    return LOGGER_STATUS_ERROR;
 80051ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	2000116c 	.word	0x2000116c
 80051cc:	0801a67c 	.word	0x0801a67c

080051d0 <UART_Connect>:
    .timeout_ms = UART_DEFAULT_TIMEOUT_MS
};

// 공통 함수들 (테스트와 실제 빌드 모두에서 사용)
UartStatus UART_Connect(const char* port)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
    if (port == NULL) {
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d105      	bne.n	80051ea <UART_Connect+0x1a>
        LOG_ERROR("[UART] Connect failed: NULL port");
 80051de:	4913      	ldr	r1, [pc, #76]	@ (800522c <UART_Connect+0x5c>)
 80051e0:	2003      	movs	r0, #3
 80051e2:	f7ff ff13 	bl	800500c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e01c      	b.n	8005224 <UART_Connect+0x54>
    }

    LOG_INFO("[UART] Connecting to %s", port);
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	4910      	ldr	r1, [pc, #64]	@ (8005230 <UART_Connect+0x60>)
 80051ee:	2001      	movs	r0, #1
 80051f0:	f7ff ff0c 	bl	800500c <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Connect(port);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f8ef 	bl	80053d8 <UART_Platform_Connect>
 80051fa:	4603      	mov	r3, r0
 80051fc:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d108      	bne.n	8005216 <UART_Connect+0x46>
        uart_connected = true;
 8005204:	4b0b      	ldr	r3, [pc, #44]	@ (8005234 <UART_Connect+0x64>)
 8005206:	2201      	movs	r2, #1
 8005208:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART] Successfully connected to %s", port);
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	490a      	ldr	r1, [pc, #40]	@ (8005238 <UART_Connect+0x68>)
 800520e:	2001      	movs	r0, #1
 8005210:	f7ff fefc 	bl	800500c <LOGGER_SendFormatted>
 8005214:	e005      	b.n	8005222 <UART_Connect+0x52>
    } else {
        LOG_ERROR("[UART] Failed to connect to %s (status: %d)", port, status);
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	4908      	ldr	r1, [pc, #32]	@ (800523c <UART_Connect+0x6c>)
 800521c:	2003      	movs	r0, #3
 800521e:	f7ff fef5 	bl	800500c <LOGGER_SendFormatted>
    }

    return status;
 8005222:	7bfb      	ldrb	r3, [r7, #15]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	0801a680 	.word	0x0801a680
 8005230:	0801a6a4 	.word	0x0801a6a4
 8005234:	2000159b 	.word	0x2000159b
 8005238:	0801a6bc 	.word	0x0801a6bc
 800523c:	0801a6e0 	.word	0x0801a6e0

08005240 <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 8005248:	4b19      	ldr	r3, [pc, #100]	@ (80052b0 <UART_Send+0x70>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	f083 0301 	eor.w	r3, r3, #1
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d005      	beq.n	8005262 <UART_Send+0x22>
        LOG_ERROR("[UART] Send failed: not connected");
 8005256:	4917      	ldr	r1, [pc, #92]	@ (80052b4 <UART_Send+0x74>)
 8005258:	2003      	movs	r0, #3
 800525a:	f7ff fed7 	bl	800500c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e022      	b.n	80052a8 <UART_Send+0x68>
    }

    if (data == NULL) {
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d105      	bne.n	8005274 <UART_Send+0x34>
        LOG_ERROR("[UART] Send failed: NULL data");
 8005268:	4913      	ldr	r1, [pc, #76]	@ (80052b8 <UART_Send+0x78>)
 800526a:	2003      	movs	r0, #3
 800526c:	f7ff fece 	bl	800500c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e019      	b.n	80052a8 <UART_Send+0x68>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	4911      	ldr	r1, [pc, #68]	@ (80052bc <UART_Send+0x7c>)
 8005278:	2000      	movs	r0, #0
 800527a:	f7ff fec7 	bl	800500c <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f992 	bl	80055a8 <UART_Platform_Send>
 8005284:	4603      	mov	r3, r0
 8005286:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8005288:	7bfb      	ldrb	r3, [r7, #15]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d105      	bne.n	800529a <UART_Send+0x5a>
        LOG_DEBUG("[UART] Send successful: %s", data);
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	490b      	ldr	r1, [pc, #44]	@ (80052c0 <UART_Send+0x80>)
 8005292:	2000      	movs	r0, #0
 8005294:	f7ff feba 	bl	800500c <LOGGER_SendFormatted>
 8005298:	e005      	b.n	80052a6 <UART_Send+0x66>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 800529a:	7bfb      	ldrb	r3, [r7, #15]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	4909      	ldr	r1, [pc, #36]	@ (80052c4 <UART_Send+0x84>)
 80052a0:	2003      	movs	r0, #3
 80052a2:	f7ff feb3 	bl	800500c <LOGGER_SendFormatted>
    }

    return status;
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	2000159b 	.word	0x2000159b
 80052b4:	0801a70c 	.word	0x0801a70c
 80052b8:	0801a730 	.word	0x0801a730
 80052bc:	0801a750 	.word	0x0801a750
 80052c0:	0801a768 	.word	0x0801a768
 80052c4:	0801a784 	.word	0x0801a784

080052c8 <UART_Receive>:

UartStatus UART_Receive(char* buffer, int buffer_size, int* bytes_received)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
    if (!uart_connected) {
 80052d4:	4b22      	ldr	r3, [pc, #136]	@ (8005360 <UART_Receive+0x98>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	f083 0301 	eor.w	r3, r3, #1
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d005      	beq.n	80052ee <UART_Receive+0x26>
        LOG_ERROR("[UART] Receive failed: not connected");
 80052e2:	4920      	ldr	r1, [pc, #128]	@ (8005364 <UART_Receive+0x9c>)
 80052e4:	2003      	movs	r0, #3
 80052e6:	f7ff fe91 	bl	800500c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e034      	b.n	8005358 <UART_Receive+0x90>
    }

    if (buffer == NULL || buffer_size <= 0 || bytes_received == NULL) {
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d005      	beq.n	8005300 <UART_Receive+0x38>
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	dd02      	ble.n	8005300 <UART_Receive+0x38>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d105      	bne.n	800530c <UART_Receive+0x44>
        LOG_ERROR("[UART] Receive failed: invalid parameters");
 8005300:	4919      	ldr	r1, [pc, #100]	@ (8005368 <UART_Receive+0xa0>)
 8005302:	2003      	movs	r0, #3
 8005304:	f7ff fe82 	bl	800500c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e025      	b.n	8005358 <UART_Receive+0x90>
    }

    LOG_DEBUG("[UART] Receiving data (buffer_size: %d)", buffer_size);
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	4917      	ldr	r1, [pc, #92]	@ (800536c <UART_Receive+0xa4>)
 8005310:	2000      	movs	r0, #0
 8005312:	f7ff fe7b 	bl	800500c <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Receive(buffer, buffer_size, bytes_received);
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	68b9      	ldr	r1, [r7, #8]
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 f980 	bl	8005620 <UART_Platform_Receive>
 8005320:	4603      	mov	r3, r0
 8005322:	75fb      	strb	r3, [r7, #23]

    if (status == UART_STATUS_OK) {
 8005324:	7dfb      	ldrb	r3, [r7, #23]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d107      	bne.n	800533a <UART_Receive+0x72>
        LOG_DEBUG("[UART] Received %d bytes: %s", *bytes_received, buffer);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	490f      	ldr	r1, [pc, #60]	@ (8005370 <UART_Receive+0xa8>)
 8005332:	2000      	movs	r0, #0
 8005334:	f7ff fe6a 	bl	800500c <LOGGER_SendFormatted>
 8005338:	e00d      	b.n	8005356 <UART_Receive+0x8e>
    } else if (status == UART_STATUS_TIMEOUT) {
 800533a:	7dfb      	ldrb	r3, [r7, #23]
 800533c:	2b02      	cmp	r3, #2
 800533e:	d104      	bne.n	800534a <UART_Receive+0x82>
        LOG_DEBUG("[UART] Receive timeout");
 8005340:	490c      	ldr	r1, [pc, #48]	@ (8005374 <UART_Receive+0xac>)
 8005342:	2000      	movs	r0, #0
 8005344:	f7ff fe62 	bl	800500c <LOGGER_SendFormatted>
 8005348:	e005      	b.n	8005356 <UART_Receive+0x8e>
    } else {
        LOG_ERROR("[UART] Receive failed (status: %d)", status);
 800534a:	7dfb      	ldrb	r3, [r7, #23]
 800534c:	461a      	mov	r2, r3
 800534e:	490a      	ldr	r1, [pc, #40]	@ (8005378 <UART_Receive+0xb0>)
 8005350:	2003      	movs	r0, #3
 8005352:	f7ff fe5b 	bl	800500c <LOGGER_SendFormatted>
    }

    return status;
 8005356:	7dfb      	ldrb	r3, [r7, #23]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	2000159b 	.word	0x2000159b
 8005364:	0801a7a8 	.word	0x0801a7a8
 8005368:	0801a7d0 	.word	0x0801a7d0
 800536c:	0801a7fc 	.word	0x0801a7fc
 8005370:	0801a824 	.word	0x0801a824
 8005374:	0801a844 	.word	0x0801a844
 8005378:	0801a85c 	.word	0x0801a85c

0800537c <flush_rx_buffer>:
// 내부 상태 변수들
static bool uart_initialized = false;
static bool dma_receiving = false;

// 수신 버퍼 플러시 함수
static void flush_rx_buffer(void) {
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
    uint8_t dummy;
    int flush_count = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	607b      	str	r3, [r7, #4]
    
    // 방법 1: 직접 레지스터 체크로 기존 데이터 클리어
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8005386:	e007      	b.n	8005398 <flush_rx_buffer+0x1c>
        dummy = (uint8_t)(huart6.Instance->RDR & 0xFF);
 8005388:	4b12      	ldr	r3, [pc, #72]	@ (80053d4 <flush_rx_buffer+0x58>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538e:	b2db      	uxtb	r3, r3
 8005390:	70fb      	strb	r3, [r7, #3]
        flush_count++;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	3301      	adds	r3, #1
 8005396:	607b      	str	r3, [r7, #4]
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8005398:	4b0e      	ldr	r3, [pc, #56]	@ (80053d4 <flush_rx_buffer+0x58>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d106      	bne.n	80053b4 <flush_rx_buffer+0x38>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b63      	cmp	r3, #99	@ 0x63
 80053aa:	dded      	ble.n	8005388 <flush_rx_buffer+0xc>
    }
    
    // 방법 2: HAL로 남은 데이터 클리어 (타임아웃 1ms)
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 80053ac:	e002      	b.n	80053b4 <flush_rx_buffer+0x38>
        flush_count++;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3301      	adds	r3, #1
 80053b2:	607b      	str	r3, [r7, #4]
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 80053b4:	1cf9      	adds	r1, r7, #3
 80053b6:	2301      	movs	r3, #1
 80053b8:	2201      	movs	r2, #1
 80053ba:	4806      	ldr	r0, [pc, #24]	@ (80053d4 <flush_rx_buffer+0x58>)
 80053bc:	f009 f991 	bl	800e6e2 <HAL_UART_Receive>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d102      	bne.n	80053cc <flush_rx_buffer+0x50>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b63      	cmp	r3, #99	@ 0x63
 80053ca:	ddf0      	ble.n	80053ae <flush_rx_buffer+0x32>
    }
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	200011f4 	.word	0x200011f4

080053d8 <UART_Platform_Connect>:

UartStatus UART_Platform_Connect(const char* port) {
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
    // STM32에서는 이미 HAL_UART_Init()이 실행됨
    uart_initialized = true;
 80053e0:	4b5b      	ldr	r3, [pc, #364]	@ (8005550 <UART_Platform_Connect+0x178>)
 80053e2:	2201      	movs	r2, #1
 80053e4:	701a      	strb	r2, [r3, #0]
    
    // UART 상태 체크 및 리셋
    LOG_INFO("[UART_STM32] UART gState: %d, RxState: %d", 
 80053e6:	4b5b      	ldr	r3, [pc, #364]	@ (8005554 <UART_Platform_Connect+0x17c>)
 80053e8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80053ea:	4b5a      	ldr	r3, [pc, #360]	@ (8005554 <UART_Platform_Connect+0x17c>)
 80053ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053f0:	4959      	ldr	r1, [pc, #356]	@ (8005558 <UART_Platform_Connect+0x180>)
 80053f2:	2001      	movs	r0, #1
 80053f4:	f7ff fe0a 	bl	800500c <LOGGER_SendFormatted>
             huart6.gState, huart6.RxState);
    
    // DMA 핸들 연결 상태 확인
    if (huart6.hdmarx != NULL) {
 80053f8:	4b56      	ldr	r3, [pc, #344]	@ (8005554 <UART_Platform_Connect+0x17c>)
 80053fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00e      	beq.n	800541e <UART_Platform_Connect+0x46>
        LOG_INFO("[UART_STM32] DMA RX handle is connected");
 8005400:	4956      	ldr	r1, [pc, #344]	@ (800555c <UART_Platform_Connect+0x184>)
 8005402:	2001      	movs	r0, #1
 8005404:	f7ff fe02 	bl	800500c <LOGGER_SendFormatted>
        LOG_INFO("[UART_STM32] DMA State: %d", huart6.hdmarx->State);
 8005408:	4b52      	ldr	r3, [pc, #328]	@ (8005554 <UART_Platform_Connect+0x17c>)
 800540a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800540c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005410:	b2db      	uxtb	r3, r3
 8005412:	461a      	mov	r2, r3
 8005414:	4952      	ldr	r1, [pc, #328]	@ (8005560 <UART_Platform_Connect+0x188>)
 8005416:	2001      	movs	r0, #1
 8005418:	f7ff fdf8 	bl	800500c <LOGGER_SendFormatted>
 800541c:	e018      	b.n	8005450 <UART_Platform_Connect+0x78>
    } else {
        LOG_ERROR("[UART_STM32] DMA RX handle is NULL - DMA not initialized!");
 800541e:	4951      	ldr	r1, [pc, #324]	@ (8005564 <UART_Platform_Connect+0x18c>)
 8005420:	2003      	movs	r0, #3
 8005422:	f7ff fdf3 	bl	800500c <LOGGER_SendFormatted>
        
        // DMA 핸들 강제 연결 시도
        extern DMA_HandleTypeDef hdma_usart6_rx;
        __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8005426:	4b4b      	ldr	r3, [pc, #300]	@ (8005554 <UART_Platform_Connect+0x17c>)
 8005428:	4a4f      	ldr	r2, [pc, #316]	@ (8005568 <UART_Platform_Connect+0x190>)
 800542a:	675a      	str	r2, [r3, #116]	@ 0x74
 800542c:	4b4e      	ldr	r3, [pc, #312]	@ (8005568 <UART_Platform_Connect+0x190>)
 800542e:	4a49      	ldr	r2, [pc, #292]	@ (8005554 <UART_Platform_Connect+0x17c>)
 8005430:	639a      	str	r2, [r3, #56]	@ 0x38
        
        if (huart6.hdmarx != NULL) {
 8005432:	4b48      	ldr	r3, [pc, #288]	@ (8005554 <UART_Platform_Connect+0x17c>)
 8005434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005436:	2b00      	cmp	r3, #0
 8005438:	d004      	beq.n	8005444 <UART_Platform_Connect+0x6c>
            LOG_INFO("[UART_STM32] DMA RX handle manually linked");
 800543a:	494c      	ldr	r1, [pc, #304]	@ (800556c <UART_Platform_Connect+0x194>)
 800543c:	2001      	movs	r0, #1
 800543e:	f7ff fde5 	bl	800500c <LOGGER_SendFormatted>
 8005442:	e005      	b.n	8005450 <UART_Platform_Connect+0x78>
        } else {
            LOG_ERROR("[UART_STM32] Failed to link DMA RX handle");
 8005444:	494a      	ldr	r1, [pc, #296]	@ (8005570 <UART_Platform_Connect+0x198>)
 8005446:	2003      	movs	r0, #3
 8005448:	f7ff fde0 	bl	800500c <LOGGER_SendFormatted>
            return UART_STATUS_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e07a      	b.n	8005546 <UART_Platform_Connect+0x16e>
        }
    }
    
    // 이전에 시작된 DMA 작업이 있으면 중지
    if (dma_receiving) {
 8005450:	4b48      	ldr	r3, [pc, #288]	@ (8005574 <UART_Platform_Connect+0x19c>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d009      	beq.n	800546c <UART_Platform_Connect+0x94>
        HAL_UART_DMAStop(&huart6);
 8005458:	483e      	ldr	r0, [pc, #248]	@ (8005554 <UART_Platform_Connect+0x17c>)
 800545a:	f009 fa4e 	bl	800e8fa <HAL_UART_DMAStop>
        dma_receiving = false;
 800545e:	4b45      	ldr	r3, [pc, #276]	@ (8005574 <UART_Platform_Connect+0x19c>)
 8005460:	2200      	movs	r2, #0
 8005462:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] Previous DMA reception stopped");
 8005464:	4944      	ldr	r1, [pc, #272]	@ (8005578 <UART_Platform_Connect+0x1a0>)
 8005466:	2001      	movs	r0, #1
 8005468:	f7ff fdd0 	bl	800500c <LOGGER_SendFormatted>
    }
    
    // UART 상태를 READY로 강제 설정
    huart6.gState = HAL_UART_STATE_READY;
 800546c:	4b39      	ldr	r3, [pc, #228]	@ (8005554 <UART_Platform_Connect+0x17c>)
 800546e:	2220      	movs	r2, #32
 8005470:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart6.RxState = HAL_UART_STATE_READY;
 8005472:	4b38      	ldr	r3, [pc, #224]	@ (8005554 <UART_Platform_Connect+0x17c>)
 8005474:	2220      	movs	r2, #32
 8005476:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    
    // DMA 상태도 READY로 설정
    if (huart6.hdmarx != NULL) {
 800547a:	4b36      	ldr	r3, [pc, #216]	@ (8005554 <UART_Platform_Connect+0x17c>)
 800547c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800547e:	2b00      	cmp	r3, #0
 8005480:	d026      	beq.n	80054d0 <UART_Platform_Connect+0xf8>
        // DMA 재초기화 (기존 상태 문제 해결)
        if (huart6.hdmarx->State != HAL_DMA_STATE_READY) {
 8005482:	4b34      	ldr	r3, [pc, #208]	@ (8005554 <UART_Platform_Connect+0x17c>)
 8005484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005486:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b01      	cmp	r3, #1
 800548e:	d01a      	beq.n	80054c6 <UART_Platform_Connect+0xee>
            LOG_INFO("[UART_STM32] DMA not ready, reinitializing...");
 8005490:	493a      	ldr	r1, [pc, #232]	@ (800557c <UART_Platform_Connect+0x1a4>)
 8005492:	2001      	movs	r0, #1
 8005494:	f7ff fdba 	bl	800500c <LOGGER_SendFormatted>
            HAL_DMA_DeInit(huart6.hdmarx);
 8005498:	4b2e      	ldr	r3, [pc, #184]	@ (8005554 <UART_Platform_Connect+0x17c>)
 800549a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800549c:	4618      	mov	r0, r3
 800549e:	f001 f943 	bl	8006728 <HAL_DMA_DeInit>
            if (HAL_DMA_Init(huart6.hdmarx) != HAL_OK) {
 80054a2:	4b2c      	ldr	r3, [pc, #176]	@ (8005554 <UART_Platform_Connect+0x17c>)
 80054a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054a6:	4618      	mov	r0, r3
 80054a8:	f001 f890 	bl	80065cc <HAL_DMA_Init>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <UART_Platform_Connect+0xe6>
                LOG_ERROR("[UART_STM32] DMA reinitialization failed");
 80054b2:	4933      	ldr	r1, [pc, #204]	@ (8005580 <UART_Platform_Connect+0x1a8>)
 80054b4:	2003      	movs	r0, #3
 80054b6:	f7ff fda9 	bl	800500c <LOGGER_SendFormatted>
                return UART_STATUS_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e043      	b.n	8005546 <UART_Platform_Connect+0x16e>
            }
            LOG_INFO("[UART_STM32] DMA reinitialized successfully");
 80054be:	4931      	ldr	r1, [pc, #196]	@ (8005584 <UART_Platform_Connect+0x1ac>)
 80054c0:	2001      	movs	r0, #1
 80054c2:	f7ff fda3 	bl	800500c <LOGGER_SendFormatted>
        }
        huart6.hdmarx->State = HAL_DMA_STATE_READY;
 80054c6:	4b23      	ldr	r3, [pc, #140]	@ (8005554 <UART_Platform_Connect+0x17c>)
 80054c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 초기 버퍼 플러시
    flush_rx_buffer();
 80054d0:	f7ff ff54 	bl	800537c <flush_rx_buffer>
    
    // DMA 기반 연속 수신 시작
    uart_rx_complete_flag = 0;
 80054d4:	4b2c      	ldr	r3, [pc, #176]	@ (8005588 <UART_Platform_Connect+0x1b0>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	701a      	strb	r2, [r3, #0]
    uart_rx_error_flag = 0;
 80054da:	4b2c      	ldr	r3, [pc, #176]	@ (800558c <UART_Platform_Connect+0x1b4>)
 80054dc:	2200      	movs	r2, #0
 80054de:	701a      	strb	r2, [r3, #0]
    uart_rx_length = 0;
 80054e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005590 <UART_Platform_Connect+0x1b8>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	801a      	strh	r2, [r3, #0]
    
    // DMA 수신 버퍼 클리어
    memset(rx_buffer, 0, sizeof(rx_buffer));
 80054e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054ea:	2100      	movs	r1, #0
 80054ec:	4829      	ldr	r0, [pc, #164]	@ (8005594 <UART_Platform_Connect+0x1bc>)
 80054ee:	f011 fd73 	bl	8016fd8 <memset>
    
    LOG_INFO("[UART_STM32] Starting DMA reception...");
 80054f2:	4929      	ldr	r1, [pc, #164]	@ (8005598 <UART_Platform_Connect+0x1c0>)
 80054f4:	2001      	movs	r0, #1
 80054f6:	f7ff fd89 	bl	800500c <LOGGER_SendFormatted>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 80054fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054fe:	4925      	ldr	r1, [pc, #148]	@ (8005594 <UART_Platform_Connect+0x1bc>)
 8005500:	4814      	ldr	r0, [pc, #80]	@ (8005554 <UART_Platform_Connect+0x17c>)
 8005502:	f009 f9b6 	bl	800e872 <HAL_UART_Receive_DMA>
 8005506:	4603      	mov	r3, r0
 8005508:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 800550a:	7bfb      	ldrb	r3, [r7, #15]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10a      	bne.n	8005526 <UART_Platform_Connect+0x14e>
        dma_receiving = true;
 8005510:	4b18      	ldr	r3, [pc, #96]	@ (8005574 <UART_Platform_Connect+0x19c>)
 8005512:	2201      	movs	r2, #1
 8005514:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] ✓ DMA continuous reception started (buffer size: %d)", sizeof(rx_buffer));
 8005516:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800551a:	4920      	ldr	r1, [pc, #128]	@ (800559c <UART_Platform_Connect+0x1c4>)
 800551c:	2001      	movs	r0, #1
 800551e:	f7ff fd75 	bl	800500c <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
                  huart6.gState, huart6.RxState);
        return UART_STATUS_ERROR;
    }
    
    return UART_STATUS_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	e00f      	b.n	8005546 <UART_Platform_Connect+0x16e>
        LOG_ERROR("[UART_STM32] ✗ Failed to start DMA reception (status: %d)", status);
 8005526:	7bfb      	ldrb	r3, [r7, #15]
 8005528:	461a      	mov	r2, r3
 800552a:	491d      	ldr	r1, [pc, #116]	@ (80055a0 <UART_Platform_Connect+0x1c8>)
 800552c:	2003      	movs	r0, #3
 800552e:	f7ff fd6d 	bl	800500c <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
 8005532:	4b08      	ldr	r3, [pc, #32]	@ (8005554 <UART_Platform_Connect+0x17c>)
 8005534:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005536:	4b07      	ldr	r3, [pc, #28]	@ (8005554 <UART_Platform_Connect+0x17c>)
 8005538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800553c:	4919      	ldr	r1, [pc, #100]	@ (80055a4 <UART_Platform_Connect+0x1cc>)
 800553e:	2003      	movs	r0, #3
 8005540:	f7ff fd64 	bl	800500c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005544:	2301      	movs	r3, #1
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	200017a0 	.word	0x200017a0
 8005554:	200011f4 	.word	0x200011f4
 8005558:	0801aa58 	.word	0x0801aa58
 800555c:	0801aa84 	.word	0x0801aa84
 8005560:	0801aaac 	.word	0x0801aaac
 8005564:	0801aac8 	.word	0x0801aac8
 8005568:	200014cc 	.word	0x200014cc
 800556c:	0801ab04 	.word	0x0801ab04
 8005570:	0801ab30 	.word	0x0801ab30
 8005574:	200017a1 	.word	0x200017a1
 8005578:	0801ab5c 	.word	0x0801ab5c
 800557c:	0801ab88 	.word	0x0801ab88
 8005580:	0801abb8 	.word	0x0801abb8
 8005584:	0801abe4 	.word	0x0801abe4
 8005588:	2000159c 	.word	0x2000159c
 800558c:	2000159d 	.word	0x2000159d
 8005590:	2000159e 	.word	0x2000159e
 8005594:	200015a0 	.word	0x200015a0
 8005598:	0801ac10 	.word	0x0801ac10
 800559c:	0801ac38 	.word	0x0801ac38
 80055a0:	0801ac7c 	.word	0x0801ac7c
 80055a4:	0801acb8 	.word	0x0801acb8

080055a8 <UART_Platform_Send>:
    uart_initialized = false;
    
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d006      	beq.n	80055c4 <UART_Platform_Send+0x1c>
 80055b6:	4b17      	ldr	r3, [pc, #92]	@ (8005614 <UART_Platform_Send+0x6c>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	f083 0301 	eor.w	r3, r3, #1
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <UART_Platform_Send+0x20>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e021      	b.n	800560c <UART_Platform_Send+0x64>
    
    int len = strlen(data);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7fa fe2b 	bl	8000224 <strlen>
 80055ce:	4603      	mov	r3, r0
 80055d0:	60fb      	str	r3, [r7, #12]
    if (len == 0) return UART_STATUS_OK;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <UART_Platform_Send+0x34>
 80055d8:	2300      	movs	r3, #0
 80055da:	e017      	b.n	800560c <UART_Platform_Send+0x64>
    
    // 송신 전 수신 버퍼 플러시 (깨끗한 상태에서 시작)
    flush_rx_buffer();
 80055dc:	f7ff fece 	bl	800537c <flush_rx_buffer>
    
    // 단순한 송신
    HAL_StatusTypeDef tx_status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	480b      	ldr	r0, [pc, #44]	@ (8005618 <UART_Platform_Send+0x70>)
 80055ec:	f008 fff0 	bl	800e5d0 <HAL_UART_Transmit>
 80055f0:	4603      	mov	r3, r0
 80055f2:	72fb      	strb	r3, [r7, #11]
    
    if (tx_status == HAL_OK) {
 80055f4:	7afb      	ldrb	r3, [r7, #11]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <UART_Platform_Send+0x56>
        return UART_STATUS_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	e006      	b.n	800560c <UART_Platform_Send+0x64>
    } else {
        LOG_ERROR("[UART_STM32] ✗ Transmission failed (HAL status: %d)", tx_status);
 80055fe:	7afb      	ldrb	r3, [r7, #11]
 8005600:	461a      	mov	r2, r3
 8005602:	4906      	ldr	r1, [pc, #24]	@ (800561c <UART_Platform_Send+0x74>)
 8005604:	2003      	movs	r0, #3
 8005606:	f7ff fd01 	bl	800500c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 800560a:	2301      	movs	r3, #1
    }
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	200017a0 	.word	0x200017a0
 8005618:	200011f4 	.word	0x200011f4
 800561c:	0801ad18 	.word	0x0801ad18

08005620 <UART_Platform_Receive>:

UartStatus UART_Platform_Receive(char* buffer, int buffer_size, int* bytes_received) {
 8005620:	b580      	push	{r7, lr}
 8005622:	b08a      	sub	sp, #40	@ 0x28
 8005624:	af02      	add	r7, sp, #8
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || bytes_received == NULL || !uart_initialized) {
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d009      	beq.n	8005646 <UART_Platform_Receive+0x26>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d006      	beq.n	8005646 <UART_Platform_Receive+0x26>
 8005638:	4b74      	ldr	r3, [pc, #464]	@ (800580c <UART_Platform_Receive+0x1ec>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	f083 0301 	eor.w	r3, r3, #1
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <UART_Platform_Receive+0x2a>
        return UART_STATUS_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e0dc      	b.n	8005804 <UART_Platform_Receive+0x1e4>
    }
    
    if (buffer_size <= 0) {
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	dc04      	bgt.n	800565a <UART_Platform_Receive+0x3a>
        *bytes_received = 0;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
        return UART_STATUS_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e0d4      	b.n	8005804 <UART_Platform_Receive+0x1e4>
    }
    
    *bytes_received = 0;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	601a      	str	r2, [r3, #0]
    
    // DMA 수신이 시작되지 않았으면 에러
    if (!dma_receiving) {
 8005660:	4b6b      	ldr	r3, [pc, #428]	@ (8005810 <UART_Platform_Receive+0x1f0>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	f083 0301 	eor.w	r3, r3, #1
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <UART_Platform_Receive+0x52>
        return UART_STATUS_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e0c8      	b.n	8005804 <UART_Platform_Receive+0x1e4>
    }
    
    // 에러 체크
    if (uart_rx_error_flag) {
 8005672:	4b68      	ldr	r3, [pc, #416]	@ (8005814 <UART_Platform_Receive+0x1f4>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d008      	beq.n	800568e <UART_Platform_Receive+0x6e>
        uart_rx_error_flag = 0;  // 플래그 클리어
 800567c:	4b65      	ldr	r3, [pc, #404]	@ (8005814 <UART_Platform_Receive+0x1f4>)
 800567e:	2200      	movs	r2, #0
 8005680:	701a      	strb	r2, [r3, #0]
        LOG_WARN("[UART_STM32] ⚠ DMA reception error occurred");
 8005682:	4965      	ldr	r1, [pc, #404]	@ (8005818 <UART_Platform_Receive+0x1f8>)
 8005684:	2002      	movs	r0, #2
 8005686:	f7ff fcc1 	bl	800500c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e0ba      	b.n	8005804 <UART_Platform_Receive+0x1e4>
    }
    
    // DMA 수신 완료 체크
    if (uart_rx_complete_flag) {
 800568e:	4b63      	ldr	r3, [pc, #396]	@ (800581c <UART_Platform_Receive+0x1fc>)
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 80b4 	beq.w	8005802 <UART_Platform_Receive+0x1e2>
        uart_rx_complete_flag = 0;  // 플래그 클리어
 800569a:	4b60      	ldr	r3, [pc, #384]	@ (800581c <UART_Platform_Receive+0x1fc>)
 800569c:	2200      	movs	r2, #0
 800569e:	701a      	strb	r2, [r3, #0]
        
        // 실제 수신된 바이트 수 확인
        uint16_t received_length = uart_rx_length;
 80056a0:	4b5f      	ldr	r3, [pc, #380]	@ (8005820 <UART_Platform_Receive+0x200>)
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	837b      	strh	r3, [r7, #26]
        LOG_DEBUG("[UART_STM32] DMA received %d bytes", received_length);
 80056a6:	8b7b      	ldrh	r3, [r7, #26]
 80056a8:	461a      	mov	r2, r3
 80056aa:	495e      	ldr	r1, [pc, #376]	@ (8005824 <UART_Platform_Receive+0x204>)
 80056ac:	2000      	movs	r0, #0
 80056ae:	f7ff fcad 	bl	800500c <LOGGER_SendFormatted>
        
        if (received_length > 0 && received_length <= buffer_size - 1) {
 80056b2:	8b7b      	ldrh	r3, [r7, #26]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 809e 	beq.w	80057f6 <UART_Platform_Receive+0x1d6>
 80056ba:	8b7b      	ldrh	r3, [r7, #26]
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	429a      	cmp	r2, r3
 80056c0:	f340 8099 	ble.w	80057f6 <UART_Platform_Receive+0x1d6>
            // 데이터 복사
            memcpy(buffer, rx_buffer, received_length);
 80056c4:	8b7b      	ldrh	r3, [r7, #26]
 80056c6:	461a      	mov	r2, r3
 80056c8:	4957      	ldr	r1, [pc, #348]	@ (8005828 <UART_Platform_Receive+0x208>)
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f011 fd39 	bl	8017142 <memcpy>
            buffer[received_length] = '\0';  // null terminate
 80056d0:	8b7b      	ldrh	r3, [r7, #26]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4413      	add	r3, r2
 80056d6:	2200      	movs	r2, #0
 80056d8:	701a      	strb	r2, [r3, #0]
            *bytes_received = received_length;
 80056da:	8b7a      	ldrh	r2, [r7, #26]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	601a      	str	r2, [r3, #0]
            
            // 수신된 데이터 로그 (간단하게)
            LOG_DEBUG("[UART_STM32] Received data (%d bytes): '%s'", received_length, buffer);
 80056e0:	8b7a      	ldrh	r2, [r7, #26]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4951      	ldr	r1, [pc, #324]	@ (800582c <UART_Platform_Receive+0x20c>)
 80056e6:	2000      	movs	r0, #0
 80056e8:	f7ff fc90 	bl	800500c <LOGGER_SendFormatted>
            
            // 새로운 수신을 위해 DMA 완전 리셋 후 재시작
            memset(rx_buffer, 0, sizeof(rx_buffer));
 80056ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056f0:	2100      	movs	r1, #0
 80056f2:	484d      	ldr	r0, [pc, #308]	@ (8005828 <UART_Platform_Receive+0x208>)
 80056f4:	f011 fc70 	bl	8016fd8 <memset>
            
            // 1. DMA 완전 정지
            HAL_UART_DMAStop(&huart6);
 80056f8:	484d      	ldr	r0, [pc, #308]	@ (8005830 <UART_Platform_Receive+0x210>)
 80056fa:	f009 f8fe 	bl	800e8fa <HAL_UART_DMAStop>
            
            // 2. 모든 UART 에러 플래그 클리어
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_PEF);
 80056fe:	4b4c      	ldr	r3, [pc, #304]	@ (8005830 <UART_Platform_Receive+0x210>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2201      	movs	r2, #1
 8005704:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_FEF);
 8005706:	4b4a      	ldr	r3, [pc, #296]	@ (8005830 <UART_Platform_Receive+0x210>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2202      	movs	r2, #2
 800570c:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_NEF);
 800570e:	4b48      	ldr	r3, [pc, #288]	@ (8005830 <UART_Platform_Receive+0x210>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2204      	movs	r2, #4
 8005714:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_OREF);
 8005716:	4b46      	ldr	r3, [pc, #280]	@ (8005830 <UART_Platform_Receive+0x210>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2208      	movs	r2, #8
 800571c:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_IDLEF);
 800571e:	4b44      	ldr	r3, [pc, #272]	@ (8005830 <UART_Platform_Receive+0x210>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2210      	movs	r2, #16
 8005724:	621a      	str	r2, [r3, #32]
            
            // 3. DMA 스트림이 완전히 정지될 때까지 대기
            if (huart6.hdmarx != NULL) {
 8005726:	4b42      	ldr	r3, [pc, #264]	@ (8005830 <UART_Platform_Receive+0x210>)
 8005728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800572a:	2b00      	cmp	r3, #0
 800572c:	d025      	beq.n	800577a <UART_Platform_Receive+0x15a>
                int timeout = 1000;
 800572e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005732:	61fb      	str	r3, [r7, #28]
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8005734:	e00b      	b.n	800574e <UART_Platform_Receive+0x12e>
                    timeout--;
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	3b01      	subs	r3, #1
 800573a:	61fb      	str	r3, [r7, #28]
                    for(volatile int i = 0; i < 100; i++); // 짧은 지연
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	e002      	b.n	8005748 <UART_Platform_Receive+0x128>
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	3301      	adds	r3, #1
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	2b63      	cmp	r3, #99	@ 0x63
 800574c:	ddf9      	ble.n	8005742 <UART_Platform_Receive+0x122>
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 800574e:	4b38      	ldr	r3, [pc, #224]	@ (8005830 <UART_Platform_Receive+0x210>)
 8005750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005752:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	d002      	beq.n	8005762 <UART_Platform_Receive+0x142>
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	2b00      	cmp	r3, #0
 8005760:	dce9      	bgt.n	8005736 <UART_Platform_Receive+0x116>
                }
                
                if (timeout == 0) {
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d108      	bne.n	800577a <UART_Platform_Receive+0x15a>
                    LOG_WARN("[UART_STM32] DMA did not reach READY state, forcing reset");
 8005768:	4932      	ldr	r1, [pc, #200]	@ (8005834 <UART_Platform_Receive+0x214>)
 800576a:	2002      	movs	r0, #2
 800576c:	f7ff fc4e 	bl	800500c <LOGGER_SendFormatted>
                    huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8005770:	4b2f      	ldr	r3, [pc, #188]	@ (8005830 <UART_Platform_Receive+0x210>)
 8005772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                }
            }
            
            // 4. UART 상태 리셋 (DMA 완전 정지 후)
            huart6.RxState = HAL_UART_STATE_READY;
 800577a:	4b2d      	ldr	r3, [pc, #180]	@ (8005830 <UART_Platform_Receive+0x210>)
 800577c:	2220      	movs	r2, #32
 800577e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            huart6.gState = HAL_UART_STATE_READY;
 8005782:	4b2b      	ldr	r3, [pc, #172]	@ (8005830 <UART_Platform_Receive+0x210>)
 8005784:	2220      	movs	r2, #32
 8005786:	67da      	str	r2, [r3, #124]	@ 0x7c
            
            // 5. 충분한 지연 후 재시작
            for(volatile int i = 0; i < 10000; i++); // 더 긴 지연
 8005788:	2300      	movs	r3, #0
 800578a:	613b      	str	r3, [r7, #16]
 800578c:	e002      	b.n	8005794 <UART_Platform_Receive+0x174>
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	3301      	adds	r3, #1
 8005792:	613b      	str	r3, [r7, #16]
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f242 720f 	movw	r2, #9999	@ 0x270f
 800579a:	4293      	cmp	r3, r2
 800579c:	ddf7      	ble.n	800578e <UART_Platform_Receive+0x16e>
            
            // 6. DMA 재시작
            HAL_StatusTypeDef restart_status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 800579e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057a2:	4921      	ldr	r1, [pc, #132]	@ (8005828 <UART_Platform_Receive+0x208>)
 80057a4:	4822      	ldr	r0, [pc, #136]	@ (8005830 <UART_Platform_Receive+0x210>)
 80057a6:	f009 f864 	bl	800e872 <HAL_UART_Receive_DMA>
 80057aa:	4603      	mov	r3, r0
 80057ac:	767b      	strb	r3, [r7, #25]
            if (restart_status == HAL_OK) {
 80057ae:	7e7b      	ldrb	r3, [r7, #25]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d104      	bne.n	80057be <UART_Platform_Receive+0x19e>
                LOG_DEBUG("[UART_STM32] DMA restarted for next reception");
 80057b4:	4920      	ldr	r1, [pc, #128]	@ (8005838 <UART_Platform_Receive+0x218>)
 80057b6:	2000      	movs	r0, #0
 80057b8:	f7ff fc28 	bl	800500c <LOGGER_SendFormatted>
 80057bc:	e019      	b.n	80057f2 <UART_Platform_Receive+0x1d2>
            } else {
                LOG_WARN("[UART_STM32] DMA restart failed (status: %d), UART state: g=%d rx=%d", 
 80057be:	7e7a      	ldrb	r2, [r7, #25]
 80057c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005830 <UART_Platform_Receive+0x210>)
 80057c2:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 80057c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005830 <UART_Platform_Receive+0x210>)
 80057c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	460b      	mov	r3, r1
 80057ce:	491b      	ldr	r1, [pc, #108]	@ (800583c <UART_Platform_Receive+0x21c>)
 80057d0:	2002      	movs	r0, #2
 80057d2:	f7ff fc1b 	bl	800500c <LOGGER_SendFormatted>
                        restart_status, huart6.gState, huart6.RxState);
                if (huart6.hdmarx != NULL) {
 80057d6:	4b16      	ldr	r3, [pc, #88]	@ (8005830 <UART_Platform_Receive+0x210>)
 80057d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d009      	beq.n	80057f2 <UART_Platform_Receive+0x1d2>
                    LOG_WARN("[UART_STM32] DMA state: %d", huart6.hdmarx->State);
 80057de:	4b14      	ldr	r3, [pc, #80]	@ (8005830 <UART_Platform_Receive+0x210>)
 80057e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	461a      	mov	r2, r3
 80057ea:	4915      	ldr	r1, [pc, #84]	@ (8005840 <UART_Platform_Receive+0x220>)
 80057ec:	2002      	movs	r0, #2
 80057ee:	f7ff fc0d 	bl	800500c <LOGGER_SendFormatted>
                }
            }
            
            return UART_STATUS_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	e006      	b.n	8005804 <UART_Platform_Receive+0x1e4>
        } else {
            LOG_WARN("[UART_STM32] Invalid received length: %d (buffer size: %d)", received_length, buffer_size);
 80057f6:	8b7a      	ldrh	r2, [r7, #26]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	4912      	ldr	r1, [pc, #72]	@ (8005844 <UART_Platform_Receive+0x224>)
 80057fc:	2002      	movs	r0, #2
 80057fe:	f7ff fc05 	bl	800500c <LOGGER_SendFormatted>
        }
    }
    
    // 수신된 데이터 없음
    return UART_STATUS_TIMEOUT;
 8005802:	2302      	movs	r3, #2
}
 8005804:	4618      	mov	r0, r3
 8005806:	3720      	adds	r7, #32
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	200017a0 	.word	0x200017a0
 8005810:	200017a1 	.word	0x200017a1
 8005814:	2000159d 	.word	0x2000159d
 8005818:	0801ad50 	.word	0x0801ad50
 800581c:	2000159c 	.word	0x2000159c
 8005820:	2000159e 	.word	0x2000159e
 8005824:	0801ad80 	.word	0x0801ad80
 8005828:	200015a0 	.word	0x200015a0
 800582c:	0801ada4 	.word	0x0801ada4
 8005830:	200011f4 	.word	0x200011f4
 8005834:	0801add0 	.word	0x0801add0
 8005838:	0801ae0c 	.word	0x0801ae0c
 800583c:	0801ae3c 	.word	0x0801ae3c
 8005840:	0801ae84 	.word	0x0801ae84
 8005844:	0801aea0 	.word	0x0801aea0

08005848 <HAL_UART_RxCpltCallback>:
// ============================================================================
// HAL UART 콜백 함수들 - main.c에서 이동됨
// ============================================================================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a0a      	ldr	r2, [pc, #40]	@ (8005880 <HAL_UART_RxCpltCallback+0x38>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d10e      	bne.n	8005878 <HAL_UART_RxCpltCallback+0x30>
  {
    // DMA 수신 완료 (전체 버퍼) - 거의 발생하지 않음
    uart_rx_complete_flag = 1;
 800585a:	4b0a      	ldr	r3, [pc, #40]	@ (8005884 <HAL_UART_RxCpltCallback+0x3c>)
 800585c:	2201      	movs	r2, #1
 800585e:	701a      	strb	r2, [r3, #0]
    uart_rx_length = sizeof(rx_buffer);
 8005860:	4b09      	ldr	r3, [pc, #36]	@ (8005888 <HAL_UART_RxCpltCallback+0x40>)
 8005862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005866:	801a      	strh	r2, [r3, #0]
    LOG_DEBUG("[DMA] RxCpltCallback: Full buffer received (%d bytes)", uart_rx_length);
 8005868:	4b07      	ldr	r3, [pc, #28]	@ (8005888 <HAL_UART_RxCpltCallback+0x40>)
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	461a      	mov	r2, r3
 8005870:	4906      	ldr	r1, [pc, #24]	@ (800588c <HAL_UART_RxCpltCallback+0x44>)
 8005872:	2000      	movs	r0, #0
 8005874:	f7ff fbca 	bl	800500c <LOGGER_SendFormatted>
  }
}
 8005878:	bf00      	nop
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40011400 	.word	0x40011400
 8005884:	2000159c 	.word	0x2000159c
 8005888:	2000159e 	.word	0x2000159e
 800588c:	0801aedc 	.word	0x0801aedc

08005890 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a05      	ldr	r2, [pc, #20]	@ (80058b4 <HAL_UART_RxHalfCpltCallback+0x24>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d103      	bne.n	80058aa <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    // DMA 수신 절반 완료 - NORMAL 모드에서는 처리하지 않음 (IDLE 인터럽트가 처리)
    LOG_WARN("[DMA] RxHalfCpltCallback: Half buffer reached but ignoring in NORMAL mode");
 80058a2:	4905      	ldr	r1, [pc, #20]	@ (80058b8 <HAL_UART_RxHalfCpltCallback+0x28>)
 80058a4:	2002      	movs	r0, #2
 80058a6:	f7ff fbb1 	bl	800500c <LOGGER_SendFormatted>
    // uart_rx_complete_flag는 설정하지 않음 - IDLE 인터럽트에서만 설정
  }
}
 80058aa:	bf00      	nop
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	40011400 	.word	0x40011400
 80058b8:	0801af14 	.word	0x0801af14

080058bc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a3c      	ldr	r2, [pc, #240]	@ (80059bc <HAL_UART_ErrorCallback+0x100>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d171      	bne.n	80059b2 <HAL_UART_ErrorCallback+0xf6>
  {
    // UART 에러 발생
    uart_rx_error_flag = 1;
 80058ce:	4b3c      	ldr	r3, [pc, #240]	@ (80059c0 <HAL_UART_ErrorCallback+0x104>)
 80058d0:	2201      	movs	r2, #1
 80058d2:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[DMA] ErrorCallback: UART error occurred");
 80058d4:	493b      	ldr	r1, [pc, #236]	@ (80059c4 <HAL_UART_ErrorCallback+0x108>)
 80058d6:	2002      	movs	r0, #2
 80058d8:	f7ff fb98 	bl	800500c <LOGGER_SendFormatted>
    
    // 모든 에러 플래그 클리어
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b08      	cmp	r3, #8
 80058e8:	d107      	bne.n	80058fa <HAL_UART_ErrorCallback+0x3e>
      __HAL_UART_CLEAR_OREFLAG(huart);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2208      	movs	r2, #8
 80058f0:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Overrun error cleared");
 80058f2:	4935      	ldr	r1, [pc, #212]	@ (80059c8 <HAL_UART_ErrorCallback+0x10c>)
 80058f4:	2002      	movs	r0, #2
 80058f6:	f7ff fb89 	bl	800500c <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b04      	cmp	r3, #4
 8005906:	d107      	bne.n	8005918 <HAL_UART_ErrorCallback+0x5c>
      __HAL_UART_CLEAR_NEFLAG(huart);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2204      	movs	r2, #4
 800590e:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Noise error cleared");
 8005910:	492e      	ldr	r1, [pc, #184]	@ (80059cc <HAL_UART_ErrorCallback+0x110>)
 8005912:	2002      	movs	r0, #2
 8005914:	f7ff fb7a 	bl	800500c <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) {
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b02      	cmp	r3, #2
 8005924:	d107      	bne.n	8005936 <HAL_UART_ErrorCallback+0x7a>
      __HAL_UART_CLEAR_FEFLAG(huart);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2202      	movs	r2, #2
 800592c:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Frame error cleared");
 800592e:	4928      	ldr	r1, [pc, #160]	@ (80059d0 <HAL_UART_ErrorCallback+0x114>)
 8005930:	2002      	movs	r0, #2
 8005932:	f7ff fb6b 	bl	800500c <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) {
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b01      	cmp	r3, #1
 8005942:	d107      	bne.n	8005954 <HAL_UART_ErrorCallback+0x98>
      __HAL_UART_CLEAR_PEFLAG(huart);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2201      	movs	r2, #1
 800594a:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Parity error cleared");
 800594c:	4921      	ldr	r1, [pc, #132]	@ (80059d4 <HAL_UART_ErrorCallback+0x118>)
 800594e:	2002      	movs	r0, #2
 8005950:	f7ff fb5c 	bl	800500c <LOGGER_SendFormatted>
    }
    
    // UART와 DMA 상태 강제 리셋
    HAL_UART_DMAStop(huart);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f008 ffd0 	bl	800e8fa <HAL_UART_DMAStop>
    huart->gState = HAL_UART_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (huart->hdmarx != NULL) {
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800596c:	2b00      	cmp	r3, #0
 800596e:	d004      	beq.n	800597a <HAL_UART_ErrorCallback+0xbe>
      huart->hdmarx->State = HAL_DMA_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 버퍼 클리어 후 DMA 재시작 (일반 모드)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 800597a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800597e:	2100      	movs	r1, #0
 8005980:	4815      	ldr	r0, [pc, #84]	@ (80059d8 <HAL_UART_ErrorCallback+0x11c>)
 8005982:	f011 fb29 	bl	8016fd8 <memset>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8005986:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800598a:	4913      	ldr	r1, [pc, #76]	@ (80059d8 <HAL_UART_ErrorCallback+0x11c>)
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f008 ff70 	bl	800e872 <HAL_UART_Receive_DMA>
 8005992:	4603      	mov	r3, r0
 8005994:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8005996:	7bfb      	ldrb	r3, [r7, #15]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d104      	bne.n	80059a6 <HAL_UART_ErrorCallback+0xea>
      LOG_INFO("[DMA] Error recovery: DMA restarted successfully");
 800599c:	490f      	ldr	r1, [pc, #60]	@ (80059dc <HAL_UART_ErrorCallback+0x120>)
 800599e:	2001      	movs	r0, #1
 80059a0:	f7ff fb34 	bl	800500c <LOGGER_SendFormatted>
    } else {
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
    }
  }
}
 80059a4:	e005      	b.n	80059b2 <HAL_UART_ErrorCallback+0xf6>
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
 80059a8:	461a      	mov	r2, r3
 80059aa:	490d      	ldr	r1, [pc, #52]	@ (80059e0 <HAL_UART_ErrorCallback+0x124>)
 80059ac:	2003      	movs	r0, #3
 80059ae:	f7ff fb2d 	bl	800500c <LOGGER_SendFormatted>
}
 80059b2:	bf00      	nop
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	40011400 	.word	0x40011400
 80059c0:	2000159d 	.word	0x2000159d
 80059c4:	0801af60 	.word	0x0801af60
 80059c8:	0801af8c 	.word	0x0801af8c
 80059cc:	0801afa8 	.word	0x0801afa8
 80059d0:	0801afc4 	.word	0x0801afc4
 80059d4:	0801afe0 	.word	0x0801afe0
 80059d8:	200015a0 	.word	0x200015a0
 80059dc:	0801affc 	.word	0x0801affc
 80059e0:	0801b030 	.word	0x0801b030

080059e4 <USER_UART_IDLECallback>:

// UART IDLE 인터럽트 콜백 (메시지 끝 감지)
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a3e      	ldr	r2, [pc, #248]	@ (8005aec <USER_UART_IDLECallback+0x108>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d175      	bne.n	8005ae2 <USER_UART_IDLECallback+0xfe>
  {
    // UART 에러 상태 체크
    uint32_t error_flags = 0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) error_flags |= 0x01;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	f003 0308 	and.w	r3, r3, #8
 8005a04:	2b08      	cmp	r3, #8
 8005a06:	d103      	bne.n	8005a10 <USER_UART_IDLECallback+0x2c>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f043 0301 	orr.w	r3, r3, #1
 8005a0e:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) error_flags |= 0x02;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d103      	bne.n	8005a26 <USER_UART_IDLECallback+0x42>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f043 0302 	orr.w	r3, r3, #2
 8005a24:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) error_flags |= 0x04;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b04      	cmp	r3, #4
 8005a32:	d103      	bne.n	8005a3c <USER_UART_IDLECallback+0x58>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f043 0304 	orr.w	r3, r3, #4
 8005a3a:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) error_flags |= 0x08;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d103      	bne.n	8005a52 <USER_UART_IDLECallback+0x6e>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f043 0308 	orr.w	r3, r3, #8
 8005a50:	60fb      	str	r3, [r7, #12]
    
    // IDLE 감지 - 메시지 끝
    uint16_t remaining = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	817b      	strh	r3, [r7, #10]
    uart_rx_length = sizeof(rx_buffer) - remaining;
 8005a5c:	897b      	ldrh	r3, [r7, #10]
 8005a5e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	4b22      	ldr	r3, [pc, #136]	@ (8005af0 <USER_UART_IDLECallback+0x10c>)
 8005a66:	801a      	strh	r2, [r3, #0]
    
    if (uart_rx_length > 0) {
 8005a68:	4b21      	ldr	r3, [pc, #132]	@ (8005af0 <USER_UART_IDLECallback+0x10c>)
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d033      	beq.n	8005ada <USER_UART_IDLECallback+0xf6>
      uart_rx_complete_flag = 1;
 8005a72:	4b20      	ldr	r3, [pc, #128]	@ (8005af4 <USER_UART_IDLECallback+0x110>)
 8005a74:	2201      	movs	r2, #1
 8005a76:	701a      	strb	r2, [r3, #0]
      if (error_flags != 0) {
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d009      	beq.n	8005a92 <USER_UART_IDLECallback+0xae>
        LOG_WARN("[DMA] IDLE detected: %d bytes received (UART errors: 0x%02lX)", uart_rx_length, error_flags);
 8005a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8005af0 <USER_UART_IDLECallback+0x10c>)
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	461a      	mov	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	491b      	ldr	r1, [pc, #108]	@ (8005af8 <USER_UART_IDLECallback+0x114>)
 8005a8a:	2002      	movs	r0, #2
 8005a8c:	f7ff fabe 	bl	800500c <LOGGER_SendFormatted>
 8005a90:	e007      	b.n	8005aa2 <USER_UART_IDLECallback+0xbe>
      } else {
        LOG_DEBUG("[DMA] IDLE detected: %d bytes received", uart_rx_length);
 8005a92:	4b17      	ldr	r3, [pc, #92]	@ (8005af0 <USER_UART_IDLECallback+0x10c>)
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	461a      	mov	r2, r3
 8005a9a:	4918      	ldr	r1, [pc, #96]	@ (8005afc <USER_UART_IDLECallback+0x118>)
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	f7ff fab5 	bl	800500c <LOGGER_SendFormatted>
      }
      
      // 첫 몇 바이트 확인 (디버깅용)
      if (uart_rx_length >= 4) {
 8005aa2:	4b13      	ldr	r3, [pc, #76]	@ (8005af0 <USER_UART_IDLECallback+0x10c>)
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2b03      	cmp	r3, #3
 8005aaa:	d912      	bls.n	8005ad2 <USER_UART_IDLECallback+0xee>
        LOG_DEBUG("[DMA] First 4 bytes: %02X %02X %02X %02X", 
 8005aac:	4b14      	ldr	r3, [pc, #80]	@ (8005b00 <USER_UART_IDLECallback+0x11c>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4b13      	ldr	r3, [pc, #76]	@ (8005b00 <USER_UART_IDLECallback+0x11c>)
 8005ab4:	785b      	ldrb	r3, [r3, #1]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	4b11      	ldr	r3, [pc, #68]	@ (8005b00 <USER_UART_IDLECallback+0x11c>)
 8005aba:	789b      	ldrb	r3, [r3, #2]
 8005abc:	461a      	mov	r2, r3
 8005abe:	4b10      	ldr	r3, [pc, #64]	@ (8005b00 <USER_UART_IDLECallback+0x11c>)
 8005ac0:	78db      	ldrb	r3, [r3, #3]
 8005ac2:	9301      	str	r3, [sp, #4]
 8005ac4:	9200      	str	r2, [sp, #0]
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	460a      	mov	r2, r1
 8005aca:	490e      	ldr	r1, [pc, #56]	@ (8005b04 <USER_UART_IDLECallback+0x120>)
 8005acc:	2000      	movs	r0, #0
 8005ace:	f7ff fa9d 	bl	800500c <LOGGER_SendFormatted>
                  rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
      }
      
      // DMA 중지 (일반 모드에서는 자동으로 완료됨)
      HAL_UART_DMAStop(huart);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f008 ff11 	bl	800e8fa <HAL_UART_DMAStop>
      // 다음 수신을 위해 즉시 재시작하지 않음 - uart_stm32.c에서 처리
    } else {
      LOG_DEBUG("[DMA] IDLE detected but no data");
    }
  }
}
 8005ad8:	e003      	b.n	8005ae2 <USER_UART_IDLECallback+0xfe>
      LOG_DEBUG("[DMA] IDLE detected but no data");
 8005ada:	490b      	ldr	r1, [pc, #44]	@ (8005b08 <USER_UART_IDLECallback+0x124>)
 8005adc:	2000      	movs	r0, #0
 8005ade:	f7ff fa95 	bl	800500c <LOGGER_SendFormatted>
}
 8005ae2:	bf00      	nop
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40011400 	.word	0x40011400
 8005af0:	2000159e 	.word	0x2000159e
 8005af4:	2000159c 	.word	0x2000159c
 8005af8:	0801b068 	.word	0x0801b068
 8005afc:	0801b0a8 	.word	0x0801b0a8
 8005b00:	200015a0 	.word	0x200015a0
 8005b04:	0801b0d0 	.word	0x0801b0d0
 8005b08:	0801b0fc 	.word	0x0801b0fc

08005b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005b0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005b44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005b10:	f7ff f9fc 	bl	8004f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005b14:	480c      	ldr	r0, [pc, #48]	@ (8005b48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005b16:	490d      	ldr	r1, [pc, #52]	@ (8005b4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005b18:	4a0d      	ldr	r2, [pc, #52]	@ (8005b50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b1c:	e002      	b.n	8005b24 <LoopCopyDataInit>

08005b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b22:	3304      	adds	r3, #4

08005b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b28:	d3f9      	bcc.n	8005b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8005b54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005b2c:	4c0a      	ldr	r4, [pc, #40]	@ (8005b58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b30:	e001      	b.n	8005b36 <LoopFillZerobss>

08005b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b34:	3204      	adds	r2, #4

08005b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b38:	d3fb      	bcc.n	8005b32 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005b3a:	f011 fadb 	bl	80170f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b3e:	f7fb ffbd 	bl	8001abc <main>
  bx  lr    
 8005b42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005b44:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b4c:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8005b50:	0801b534 	.word	0x0801b534
  ldr r2, =_sbss
 8005b54:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8005b58:	20012090 	.word	0x20012090

08005b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b5c:	e7fe      	b.n	8005b5c <ADC_IRQHandler>

08005b5e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b62:	2003      	movs	r0, #3
 8005b64:	f000 fb91 	bl	800628a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b68:	2000      	movs	r0, #0
 8005b6a:	f7ff f84b 	bl	8004c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b6e:	f7fd ffad 	bl	8003acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b7c:	4b06      	ldr	r3, [pc, #24]	@ (8005b98 <HAL_IncTick+0x20>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	461a      	mov	r2, r3
 8005b82:	4b06      	ldr	r3, [pc, #24]	@ (8005b9c <HAL_IncTick+0x24>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4413      	add	r3, r2
 8005b88:	4a04      	ldr	r2, [pc, #16]	@ (8005b9c <HAL_IncTick+0x24>)
 8005b8a:	6013      	str	r3, [r2, #0]
}
 8005b8c:	bf00      	nop
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	2000006c 	.word	0x2000006c
 8005b9c:	200017a4 	.word	0x200017a4

08005ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8005ba4:	4b03      	ldr	r3, [pc, #12]	@ (8005bb4 <HAL_GetTick+0x14>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	200017a4 	.word	0x200017a4

08005bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005bc0:	f7ff ffee 	bl	8005ba0 <HAL_GetTick>
 8005bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd0:	d005      	beq.n	8005bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bfc <HAL_Delay+0x44>)
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4413      	add	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005bde:	bf00      	nop
 8005be0:	f7ff ffde 	bl	8005ba0 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d8f7      	bhi.n	8005be0 <HAL_Delay+0x28>
  {
  }
}
 8005bf0:	bf00      	nop
 8005bf2:	bf00      	nop
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	2000006c 	.word	0x2000006c

08005c00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e031      	b.n	8005c7a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d109      	bne.n	8005c32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7fd ff7c 	bl	8003b1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c36:	f003 0310 	and.w	r3, r3, #16
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d116      	bne.n	8005c6c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c42:	4b10      	ldr	r3, [pc, #64]	@ (8005c84 <HAL_ADC_Init+0x84>)
 8005c44:	4013      	ands	r3, r2
 8005c46:	f043 0202 	orr.w	r2, r3, #2
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f974 	bl	8005f3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5e:	f023 0303 	bic.w	r3, r3, #3
 8005c62:	f043 0201 	orr.w	r2, r3, #1
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c6a:	e001      	b.n	8005c70 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	ffffeefd 	.word	0xffffeefd

08005c88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d101      	bne.n	8005ca4 <HAL_ADC_ConfigChannel+0x1c>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	e13a      	b.n	8005f1a <HAL_ADC_ConfigChannel+0x292>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b09      	cmp	r3, #9
 8005cb2:	d93a      	bls.n	8005d2a <HAL_ADC_ConfigChannel+0xa2>
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cbc:	d035      	beq.n	8005d2a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68d9      	ldr	r1, [r3, #12]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	461a      	mov	r2, r3
 8005ccc:	4613      	mov	r3, r2
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	4413      	add	r3, r2
 8005cd2:	3b1e      	subs	r3, #30
 8005cd4:	2207      	movs	r2, #7
 8005cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cda:	43da      	mvns	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	400a      	ands	r2, r1
 8005ce2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a8f      	ldr	r2, [pc, #572]	@ (8005f28 <HAL_ADC_ConfigChannel+0x2a0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d10a      	bne.n	8005d04 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68d9      	ldr	r1, [r3, #12]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	061a      	lsls	r2, r3, #24
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d02:	e039      	b.n	8005d78 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68d9      	ldr	r1, [r3, #12]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	689a      	ldr	r2, [r3, #8]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	4618      	mov	r0, r3
 8005d16:	4603      	mov	r3, r0
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	4403      	add	r3, r0
 8005d1c:	3b1e      	subs	r3, #30
 8005d1e:	409a      	lsls	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d28:	e026      	b.n	8005d78 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6919      	ldr	r1, [r3, #16]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	461a      	mov	r2, r3
 8005d38:	4613      	mov	r3, r2
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f003 031f 	and.w	r3, r3, #31
 8005d42:	2207      	movs	r2, #7
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	43da      	mvns	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	400a      	ands	r2, r1
 8005d50:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6919      	ldr	r1, [r3, #16]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	4618      	mov	r0, r3
 8005d64:	4603      	mov	r3, r0
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	4403      	add	r3, r0
 8005d6a:	f003 031f 	and.w	r3, r3, #31
 8005d6e:	409a      	lsls	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	2b06      	cmp	r3, #6
 8005d7e:	d824      	bhi.n	8005dca <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	3b05      	subs	r3, #5
 8005d92:	221f      	movs	r2, #31
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	43da      	mvns	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	400a      	ands	r2, r1
 8005da0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	4618      	mov	r0, r3
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	4613      	mov	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	3b05      	subs	r3, #5
 8005dbc:	fa00 f203 	lsl.w	r2, r0, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	635a      	str	r2, [r3, #52]	@ 0x34
 8005dc8:	e04c      	b.n	8005e64 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2b0c      	cmp	r3, #12
 8005dd0:	d824      	bhi.n	8005e1c <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	3b23      	subs	r3, #35	@ 0x23
 8005de4:	221f      	movs	r2, #31
 8005de6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dea:	43da      	mvns	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	400a      	ands	r2, r1
 8005df2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	4618      	mov	r0, r3
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	4613      	mov	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	3b23      	subs	r3, #35	@ 0x23
 8005e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e1a:	e023      	b.n	8005e64 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	4613      	mov	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	3b41      	subs	r3, #65	@ 0x41
 8005e2e:	221f      	movs	r2, #31
 8005e30:	fa02 f303 	lsl.w	r3, r2, r3
 8005e34:	43da      	mvns	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	400a      	ands	r2, r1
 8005e3c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	4613      	mov	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	3b41      	subs	r3, #65	@ 0x41
 8005e58:	fa00 f203 	lsl.w	r2, r0, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a30      	ldr	r2, [pc, #192]	@ (8005f2c <HAL_ADC_ConfigChannel+0x2a4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d10a      	bne.n	8005e84 <HAL_ADC_ConfigChannel+0x1fc>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e76:	d105      	bne.n	8005e84 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005e78:	4b2d      	ldr	r3, [pc, #180]	@ (8005f30 <HAL_ADC_ConfigChannel+0x2a8>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	4a2c      	ldr	r2, [pc, #176]	@ (8005f30 <HAL_ADC_ConfigChannel+0x2a8>)
 8005e7e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005e82:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a28      	ldr	r2, [pc, #160]	@ (8005f2c <HAL_ADC_ConfigChannel+0x2a4>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d10f      	bne.n	8005eae <HAL_ADC_ConfigChannel+0x226>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b12      	cmp	r3, #18
 8005e94:	d10b      	bne.n	8005eae <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005e96:	4b26      	ldr	r3, [pc, #152]	@ (8005f30 <HAL_ADC_ConfigChannel+0x2a8>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	4a25      	ldr	r2, [pc, #148]	@ (8005f30 <HAL_ADC_ConfigChannel+0x2a8>)
 8005e9c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005ea0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005ea2:	4b23      	ldr	r3, [pc, #140]	@ (8005f30 <HAL_ADC_ConfigChannel+0x2a8>)
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	4a22      	ldr	r2, [pc, #136]	@ (8005f30 <HAL_ADC_ConfigChannel+0x2a8>)
 8005ea8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005eac:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8005f2c <HAL_ADC_ConfigChannel+0x2a4>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d12b      	bne.n	8005f10 <HAL_ADC_ConfigChannel+0x288>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1a      	ldr	r2, [pc, #104]	@ (8005f28 <HAL_ADC_ConfigChannel+0x2a0>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d003      	beq.n	8005eca <HAL_ADC_ConfigChannel+0x242>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b11      	cmp	r3, #17
 8005ec8:	d122      	bne.n	8005f10 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005eca:	4b19      	ldr	r3, [pc, #100]	@ (8005f30 <HAL_ADC_ConfigChannel+0x2a8>)
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	4a18      	ldr	r2, [pc, #96]	@ (8005f30 <HAL_ADC_ConfigChannel+0x2a8>)
 8005ed0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005ed4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005ed6:	4b16      	ldr	r3, [pc, #88]	@ (8005f30 <HAL_ADC_ConfigChannel+0x2a8>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	4a15      	ldr	r2, [pc, #84]	@ (8005f30 <HAL_ADC_ConfigChannel+0x2a8>)
 8005edc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005ee0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a10      	ldr	r2, [pc, #64]	@ (8005f28 <HAL_ADC_ConfigChannel+0x2a0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d111      	bne.n	8005f10 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005eec:	4b11      	ldr	r3, [pc, #68]	@ (8005f34 <HAL_ADC_ConfigChannel+0x2ac>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a11      	ldr	r2, [pc, #68]	@ (8005f38 <HAL_ADC_ConfigChannel+0x2b0>)
 8005ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef6:	0c9a      	lsrs	r2, r3, #18
 8005ef8:	4613      	mov	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005f02:	e002      	b.n	8005f0a <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1f9      	bne.n	8005f04 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	10000012 	.word	0x10000012
 8005f2c:	40012000 	.word	0x40012000
 8005f30:	40012300 	.word	0x40012300
 8005f34:	2000001c 	.word	0x2000001c
 8005f38:	431bde83 	.word	0x431bde83

08005f3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005f44:	4b78      	ldr	r3, [pc, #480]	@ (8006128 <ADC_Init+0x1ec>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	4a77      	ldr	r2, [pc, #476]	@ (8006128 <ADC_Init+0x1ec>)
 8005f4a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005f4e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005f50:	4b75      	ldr	r3, [pc, #468]	@ (8006128 <ADC_Init+0x1ec>)
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	4973      	ldr	r1, [pc, #460]	@ (8006128 <ADC_Init+0x1ec>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6859      	ldr	r1, [r3, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	021a      	lsls	r2, r3, #8
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005f90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6859      	ldr	r1, [r3, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005fb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6899      	ldr	r1, [r3, #8]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fca:	4a58      	ldr	r2, [pc, #352]	@ (800612c <ADC_Init+0x1f0>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d022      	beq.n	8006016 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005fde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6899      	ldr	r1, [r3, #8]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006000:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6899      	ldr	r1, [r3, #8]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	609a      	str	r2, [r3, #8]
 8006014:	e00f      	b.n	8006036 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006024:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006034:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0202 	bic.w	r2, r2, #2
 8006044:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6899      	ldr	r1, [r3, #8]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	005a      	lsls	r2, r3, #1
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d01b      	beq.n	800609c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006072:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006082:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6859      	ldr	r1, [r3, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608e:	3b01      	subs	r3, #1
 8006090:	035a      	lsls	r2, r3, #13
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	605a      	str	r2, [r3, #4]
 800609a:	e007      	b.n	80060ac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80060ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	051a      	lsls	r2, r3, #20
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80060e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6899      	ldr	r1, [r3, #8]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80060ee:	025a      	lsls	r2, r3, #9
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006106:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6899      	ldr	r1, [r3, #8]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	029a      	lsls	r2, r3, #10
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	609a      	str	r2, [r3, #8]
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	40012300 	.word	0x40012300
 800612c:	0f000001 	.word	0x0f000001

08006130 <__NVIC_SetPriorityGrouping>:
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f003 0307 	and.w	r3, r3, #7
 800613e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006140:	4b0b      	ldr	r3, [pc, #44]	@ (8006170 <__NVIC_SetPriorityGrouping+0x40>)
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800614c:	4013      	ands	r3, r2
 800614e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006158:	4b06      	ldr	r3, [pc, #24]	@ (8006174 <__NVIC_SetPriorityGrouping+0x44>)
 800615a:	4313      	orrs	r3, r2
 800615c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800615e:	4a04      	ldr	r2, [pc, #16]	@ (8006170 <__NVIC_SetPriorityGrouping+0x40>)
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	60d3      	str	r3, [r2, #12]
}
 8006164:	bf00      	nop
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	e000ed00 	.word	0xe000ed00
 8006174:	05fa0000 	.word	0x05fa0000

08006178 <__NVIC_GetPriorityGrouping>:
{
 8006178:	b480      	push	{r7}
 800617a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800617c:	4b04      	ldr	r3, [pc, #16]	@ (8006190 <__NVIC_GetPriorityGrouping+0x18>)
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	0a1b      	lsrs	r3, r3, #8
 8006182:	f003 0307 	and.w	r3, r3, #7
}
 8006186:	4618      	mov	r0, r3
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	e000ed00 	.word	0xe000ed00

08006194 <__NVIC_EnableIRQ>:
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	4603      	mov	r3, r0
 800619c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800619e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	db0b      	blt.n	80061be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061a6:	79fb      	ldrb	r3, [r7, #7]
 80061a8:	f003 021f 	and.w	r2, r3, #31
 80061ac:	4907      	ldr	r1, [pc, #28]	@ (80061cc <__NVIC_EnableIRQ+0x38>)
 80061ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061b2:	095b      	lsrs	r3, r3, #5
 80061b4:	2001      	movs	r0, #1
 80061b6:	fa00 f202 	lsl.w	r2, r0, r2
 80061ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80061be:	bf00      	nop
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	e000e100 	.word	0xe000e100

080061d0 <__NVIC_SetPriority>:
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	4603      	mov	r3, r0
 80061d8:	6039      	str	r1, [r7, #0]
 80061da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	db0a      	blt.n	80061fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	490c      	ldr	r1, [pc, #48]	@ (800621c <__NVIC_SetPriority+0x4c>)
 80061ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ee:	0112      	lsls	r2, r2, #4
 80061f0:	b2d2      	uxtb	r2, r2
 80061f2:	440b      	add	r3, r1
 80061f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80061f8:	e00a      	b.n	8006210 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	4908      	ldr	r1, [pc, #32]	@ (8006220 <__NVIC_SetPriority+0x50>)
 8006200:	79fb      	ldrb	r3, [r7, #7]
 8006202:	f003 030f 	and.w	r3, r3, #15
 8006206:	3b04      	subs	r3, #4
 8006208:	0112      	lsls	r2, r2, #4
 800620a:	b2d2      	uxtb	r2, r2
 800620c:	440b      	add	r3, r1
 800620e:	761a      	strb	r2, [r3, #24]
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	e000e100 	.word	0xe000e100
 8006220:	e000ed00 	.word	0xe000ed00

08006224 <NVIC_EncodePriority>:
{
 8006224:	b480      	push	{r7}
 8006226:	b089      	sub	sp, #36	@ 0x24
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f003 0307 	and.w	r3, r3, #7
 8006236:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	f1c3 0307 	rsb	r3, r3, #7
 800623e:	2b04      	cmp	r3, #4
 8006240:	bf28      	it	cs
 8006242:	2304      	movcs	r3, #4
 8006244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	3304      	adds	r3, #4
 800624a:	2b06      	cmp	r3, #6
 800624c:	d902      	bls.n	8006254 <NVIC_EncodePriority+0x30>
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	3b03      	subs	r3, #3
 8006252:	e000      	b.n	8006256 <NVIC_EncodePriority+0x32>
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006258:	f04f 32ff 	mov.w	r2, #4294967295
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	fa02 f303 	lsl.w	r3, r2, r3
 8006262:	43da      	mvns	r2, r3
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	401a      	ands	r2, r3
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800626c:	f04f 31ff 	mov.w	r1, #4294967295
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	fa01 f303 	lsl.w	r3, r1, r3
 8006276:	43d9      	mvns	r1, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800627c:	4313      	orrs	r3, r2
}
 800627e:	4618      	mov	r0, r3
 8006280:	3724      	adds	r7, #36	@ 0x24
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b082      	sub	sp, #8
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7ff ff4c 	bl	8006130 <__NVIC_SetPriorityGrouping>
}
 8006298:	bf00      	nop
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80062ae:	2300      	movs	r3, #0
 80062b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80062b2:	f7ff ff61 	bl	8006178 <__NVIC_GetPriorityGrouping>
 80062b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	6978      	ldr	r0, [r7, #20]
 80062be:	f7ff ffb1 	bl	8006224 <NVIC_EncodePriority>
 80062c2:	4602      	mov	r2, r0
 80062c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062c8:	4611      	mov	r1, r2
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff ff80 	bl	80061d0 <__NVIC_SetPriority>
}
 80062d0:	bf00      	nop
 80062d2:	3718      	adds	r7, #24
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	4603      	mov	r3, r0
 80062e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff ff54 	bl	8006194 <__NVIC_EnableIRQ>
}
 80062ec:	bf00      	nop
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e054      	b.n	80063b0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	7f5b      	ldrb	r3, [r3, #29]
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	d105      	bne.n	800631c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7fd fc5a 	bl	8003bd0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	791b      	ldrb	r3, [r3, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10c      	bne.n	8006344 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a22      	ldr	r2, [pc, #136]	@ (80063b8 <HAL_CRC_Init+0xc4>)
 8006330:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0218 	bic.w	r2, r2, #24
 8006340:	609a      	str	r2, [r3, #8]
 8006342:	e00c      	b.n	800635e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6899      	ldr	r1, [r3, #8]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	461a      	mov	r2, r3
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f834 	bl	80063bc <HAL_CRCEx_Polynomial_Set>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e028      	b.n	80063b0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	795b      	ldrb	r3, [r3, #5]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d105      	bne.n	8006372 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f04f 32ff 	mov.w	r2, #4294967295
 800636e:	611a      	str	r2, [r3, #16]
 8006370:	e004      	b.n	800637c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	6912      	ldr	r2, [r2, #16]
 800637a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	695a      	ldr	r2, [r3, #20]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	699a      	ldr	r2, [r3, #24]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	04c11db7 	.word	0x04c11db7

080063bc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063c8:	2300      	movs	r3, #0
 80063ca:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80063cc:	231f      	movs	r3, #31
 80063ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d102      	bne.n	80063e0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	75fb      	strb	r3, [r7, #23]
 80063de:	e063      	b.n	80064a8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80063e0:	bf00      	nop
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1e5a      	subs	r2, r3, #1
 80063e6:	613a      	str	r2, [r7, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d009      	beq.n	8006400 <HAL_CRCEx_Polynomial_Set+0x44>
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f003 031f 	and.w	r3, r3, #31
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	fa22 f303 	lsr.w	r3, r2, r3
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d0f0      	beq.n	80063e2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b18      	cmp	r3, #24
 8006404:	d846      	bhi.n	8006494 <HAL_CRCEx_Polynomial_Set+0xd8>
 8006406:	a201      	add	r2, pc, #4	@ (adr r2, 800640c <HAL_CRCEx_Polynomial_Set+0x50>)
 8006408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640c:	0800649b 	.word	0x0800649b
 8006410:	08006495 	.word	0x08006495
 8006414:	08006495 	.word	0x08006495
 8006418:	08006495 	.word	0x08006495
 800641c:	08006495 	.word	0x08006495
 8006420:	08006495 	.word	0x08006495
 8006424:	08006495 	.word	0x08006495
 8006428:	08006495 	.word	0x08006495
 800642c:	08006489 	.word	0x08006489
 8006430:	08006495 	.word	0x08006495
 8006434:	08006495 	.word	0x08006495
 8006438:	08006495 	.word	0x08006495
 800643c:	08006495 	.word	0x08006495
 8006440:	08006495 	.word	0x08006495
 8006444:	08006495 	.word	0x08006495
 8006448:	08006495 	.word	0x08006495
 800644c:	0800647d 	.word	0x0800647d
 8006450:	08006495 	.word	0x08006495
 8006454:	08006495 	.word	0x08006495
 8006458:	08006495 	.word	0x08006495
 800645c:	08006495 	.word	0x08006495
 8006460:	08006495 	.word	0x08006495
 8006464:	08006495 	.word	0x08006495
 8006468:	08006495 	.word	0x08006495
 800646c:	08006471 	.word	0x08006471
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	2b06      	cmp	r3, #6
 8006474:	d913      	bls.n	800649e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800647a:	e010      	b.n	800649e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	2b07      	cmp	r3, #7
 8006480:	d90f      	bls.n	80064a2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006486:	e00c      	b.n	80064a2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	2b0f      	cmp	r3, #15
 800648c:	d90b      	bls.n	80064a6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006492:	e008      	b.n	80064a6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	75fb      	strb	r3, [r7, #23]
        break;
 8006498:	e006      	b.n	80064a8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800649a:	bf00      	nop
 800649c:	e004      	b.n	80064a8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800649e:	bf00      	nop
 80064a0:	e002      	b.n	80064a8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80064a2:	bf00      	nop
 80064a4:	e000      	b.n	80064a8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80064a6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10d      	bne.n	80064ca <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f023 0118 	bic.w	r1, r3, #24
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80064ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	371c      	adds	r7, #28
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e069      	b.n	80065be <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d102      	bne.n	80064fc <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7fd fb8a 	bl	8003c10 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6819      	ldr	r1, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	4b2a      	ldr	r3, [pc, #168]	@ (80065c8 <HAL_DCMI_Init+0xf0>)
 800651e:	400b      	ands	r3, r1
 8006520:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6819      	ldr	r1, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006536:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006542:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800654e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006554:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800655a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006560:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006566:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	2b10      	cmp	r3, #16
 8006576:	d112      	bne.n	800659e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	7f1b      	ldrb	r3, [r3, #28]
 800657c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	7f5b      	ldrb	r3, [r3, #29]
 8006582:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006584:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	7f9b      	ldrb	r3, [r3, #30]
 800658a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800658c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	7fdb      	ldrb	r3, [r3, #31]
 8006594:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800659a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800659c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f042 021e 	orr.w	r2, r2, #30
 80065ac:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	ffe0f007 	.word	0xffe0f007

080065cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80065d8:	f7ff fae2 	bl	8005ba0 <HAL_GetTick>
 80065dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d101      	bne.n	80065e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e099      	b.n	800671c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 0201 	bic.w	r2, r2, #1
 8006606:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006608:	e00f      	b.n	800662a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800660a:	f7ff fac9 	bl	8005ba0 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b05      	cmp	r3, #5
 8006616:	d908      	bls.n	800662a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2220      	movs	r2, #32
 800661c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2203      	movs	r2, #3
 8006622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e078      	b.n	800671c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1e8      	bne.n	800660a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	4b38      	ldr	r3, [pc, #224]	@ (8006724 <HAL_DMA_Init+0x158>)
 8006644:	4013      	ands	r3, r2
 8006646:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006656:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800666e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	4313      	orrs	r3, r2
 800667a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006680:	2b04      	cmp	r3, #4
 8006682:	d107      	bne.n	8006694 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668c:	4313      	orrs	r3, r2
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	4313      	orrs	r3, r2
 8006692:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f023 0307 	bic.w	r3, r3, #7
 80066aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	d117      	bne.n	80066ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00e      	beq.n	80066ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fb73 	bl	8006dbc <DMA_CheckFifoParam>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d008      	beq.n	80066ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2240      	movs	r2, #64	@ 0x40
 80066e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80066ea:	2301      	movs	r3, #1
 80066ec:	e016      	b.n	800671c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fb2a 	bl	8006d50 <DMA_CalcBaseAndBitshift>
 80066fc:	4603      	mov	r3, r0
 80066fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006704:	223f      	movs	r2, #63	@ 0x3f
 8006706:	409a      	lsls	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	f010803f 	.word	0xf010803f

08006728 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e050      	b.n	80067dc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b02      	cmp	r3, #2
 8006744:	d101      	bne.n	800674a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006746:	2302      	movs	r3, #2
 8006748:	e048      	b.n	80067dc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 0201 	bic.w	r2, r2, #1
 8006758:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2200      	movs	r2, #0
 8006760:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2200      	movs	r2, #0
 8006768:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2200      	movs	r2, #0
 8006770:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2200      	movs	r2, #0
 8006778:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2200      	movs	r2, #0
 8006780:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2221      	movs	r2, #33	@ 0x21
 8006788:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fae0 	bl	8006d50 <DMA_CalcBaseAndBitshift>
 8006790:	4603      	mov	r3, r0
 8006792:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006798:	223f      	movs	r2, #63	@ 0x3f
 800679a:	409a      	lsls	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006802:	2b01      	cmp	r3, #1
 8006804:	d101      	bne.n	800680a <HAL_DMA_Start_IT+0x26>
 8006806:	2302      	movs	r3, #2
 8006808:	e048      	b.n	800689c <HAL_DMA_Start_IT+0xb8>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b01      	cmp	r3, #1
 800681c:	d137      	bne.n	800688e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2202      	movs	r2, #2
 8006822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	68b9      	ldr	r1, [r7, #8]
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 fa5e 	bl	8006cf4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800683c:	223f      	movs	r2, #63	@ 0x3f
 800683e:	409a      	lsls	r2, r3
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f042 0216 	orr.w	r2, r2, #22
 8006852:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	695a      	ldr	r2, [r3, #20]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006862:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006868:	2b00      	cmp	r3, #0
 800686a:	d007      	beq.n	800687c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f042 0208 	orr.w	r2, r2, #8
 800687a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0201 	orr.w	r2, r2, #1
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	e005      	b.n	800689a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006896:	2302      	movs	r3, #2
 8006898:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800689a:	7dfb      	ldrb	r3, [r7, #23]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80068b2:	f7ff f975 	bl	8005ba0 <HAL_GetTick>
 80068b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d008      	beq.n	80068d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2280      	movs	r2, #128	@ 0x80
 80068c8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e052      	b.n	800697c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 0216 	bic.w	r2, r2, #22
 80068e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	695a      	ldr	r2, [r3, #20]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80068f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d103      	bne.n	8006906 <HAL_DMA_Abort+0x62>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006902:	2b00      	cmp	r3, #0
 8006904:	d007      	beq.n	8006916 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0208 	bic.w	r2, r2, #8
 8006914:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f022 0201 	bic.w	r2, r2, #1
 8006924:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006926:	e013      	b.n	8006950 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006928:	f7ff f93a 	bl	8005ba0 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b05      	cmp	r3, #5
 8006934:	d90c      	bls.n	8006950 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2220      	movs	r2, #32
 800693a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2203      	movs	r2, #3
 8006940:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e015      	b.n	800697c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1e4      	bne.n	8006928 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006962:	223f      	movs	r2, #63	@ 0x3f
 8006964:	409a      	lsls	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b02      	cmp	r3, #2
 8006996:	d004      	beq.n	80069a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2280      	movs	r2, #128	@ 0x80
 800699c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e00c      	b.n	80069bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2205      	movs	r2, #5
 80069a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f022 0201 	bic.w	r2, r2, #1
 80069b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80069d0:	2300      	movs	r3, #0
 80069d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80069d4:	4b8e      	ldr	r3, [pc, #568]	@ (8006c10 <HAL_DMA_IRQHandler+0x248>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a8e      	ldr	r2, [pc, #568]	@ (8006c14 <HAL_DMA_IRQHandler+0x24c>)
 80069da:	fba2 2303 	umull	r2, r3, r2, r3
 80069de:	0a9b      	lsrs	r3, r3, #10
 80069e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069f2:	2208      	movs	r2, #8
 80069f4:	409a      	lsls	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4013      	ands	r3, r2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d01a      	beq.n	8006a34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d013      	beq.n	8006a34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0204 	bic.w	r2, r2, #4
 8006a1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a20:	2208      	movs	r2, #8
 8006a22:	409a      	lsls	r2, r3
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a2c:	f043 0201 	orr.w	r2, r3, #1
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a38:	2201      	movs	r2, #1
 8006a3a:	409a      	lsls	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4013      	ands	r3, r2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d012      	beq.n	8006a6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00b      	beq.n	8006a6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a56:	2201      	movs	r2, #1
 8006a58:	409a      	lsls	r2, r3
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a62:	f043 0202 	orr.w	r2, r3, #2
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a6e:	2204      	movs	r2, #4
 8006a70:	409a      	lsls	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	4013      	ands	r3, r2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d012      	beq.n	8006aa0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0302 	and.w	r3, r3, #2
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00b      	beq.n	8006aa0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a8c:	2204      	movs	r2, #4
 8006a8e:	409a      	lsls	r2, r3
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a98:	f043 0204 	orr.w	r2, r3, #4
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aa4:	2210      	movs	r2, #16
 8006aa6:	409a      	lsls	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d043      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0308 	and.w	r3, r3, #8
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d03c      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ac2:	2210      	movs	r2, #16
 8006ac4:	409a      	lsls	r2, r3
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d018      	beq.n	8006b0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d108      	bne.n	8006af8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d024      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	4798      	blx	r3
 8006af6:	e01f      	b.n	8006b38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d01b      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	4798      	blx	r3
 8006b08:	e016      	b.n	8006b38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d107      	bne.n	8006b28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f022 0208 	bic.w	r2, r2, #8
 8006b26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d003      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	409a      	lsls	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	4013      	ands	r3, r2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 808f 	beq.w	8006c68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0310 	and.w	r3, r3, #16
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 8087 	beq.w	8006c68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b5e:	2220      	movs	r2, #32
 8006b60:	409a      	lsls	r2, r3
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b05      	cmp	r3, #5
 8006b70:	d136      	bne.n	8006be0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 0216 	bic.w	r2, r2, #22
 8006b80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	695a      	ldr	r2, [r3, #20]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d103      	bne.n	8006ba2 <HAL_DMA_IRQHandler+0x1da>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d007      	beq.n	8006bb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 0208 	bic.w	r2, r2, #8
 8006bb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bb6:	223f      	movs	r2, #63	@ 0x3f
 8006bb8:	409a      	lsls	r2, r3
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d07e      	beq.n	8006cd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	4798      	blx	r3
        }
        return;
 8006bde:	e079      	b.n	8006cd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d01d      	beq.n	8006c2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10d      	bne.n	8006c18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d031      	beq.n	8006c68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	4798      	blx	r3
 8006c0c:	e02c      	b.n	8006c68 <HAL_DMA_IRQHandler+0x2a0>
 8006c0e:	bf00      	nop
 8006c10:	2000001c 	.word	0x2000001c
 8006c14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d023      	beq.n	8006c68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	4798      	blx	r3
 8006c28:	e01e      	b.n	8006c68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10f      	bne.n	8006c58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f022 0210 	bic.w	r2, r2, #16
 8006c46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d003      	beq.n	8006c68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d032      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d022      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2205      	movs	r2, #5
 8006c80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0201 	bic.w	r2, r2, #1
 8006c92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	3301      	adds	r3, #1
 8006c98:	60bb      	str	r3, [r7, #8]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d307      	bcc.n	8006cb0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1f2      	bne.n	8006c94 <HAL_DMA_IRQHandler+0x2cc>
 8006cae:	e000      	b.n	8006cb2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006cb0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d005      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	4798      	blx	r3
 8006cd2:	e000      	b.n	8006cd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006cd4:	bf00      	nop
    }
  }
}
 8006cd6:	3718      	adds	r7, #24
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006d10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	2b40      	cmp	r3, #64	@ 0x40
 8006d20:	d108      	bne.n	8006d34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006d32:	e007      	b.n	8006d44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	60da      	str	r2, [r3, #12]
}
 8006d44:	bf00      	nop
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	3b10      	subs	r3, #16
 8006d60:	4a13      	ldr	r2, [pc, #76]	@ (8006db0 <DMA_CalcBaseAndBitshift+0x60>)
 8006d62:	fba2 2303 	umull	r2, r3, r2, r3
 8006d66:	091b      	lsrs	r3, r3, #4
 8006d68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006d6a:	4a12      	ldr	r2, [pc, #72]	@ (8006db4 <DMA_CalcBaseAndBitshift+0x64>)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4413      	add	r3, r2
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	d908      	bls.n	8006d90 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	4b0c      	ldr	r3, [pc, #48]	@ (8006db8 <DMA_CalcBaseAndBitshift+0x68>)
 8006d86:	4013      	ands	r3, r2
 8006d88:	1d1a      	adds	r2, r3, #4
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	659a      	str	r2, [r3, #88]	@ 0x58
 8006d8e:	e006      	b.n	8006d9e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	461a      	mov	r2, r3
 8006d96:	4b08      	ldr	r3, [pc, #32]	@ (8006db8 <DMA_CalcBaseAndBitshift+0x68>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3714      	adds	r7, #20
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	aaaaaaab 	.word	0xaaaaaaab
 8006db4:	0801b434 	.word	0x0801b434
 8006db8:	fffffc00 	.word	0xfffffc00

08006dbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d11f      	bne.n	8006e16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b03      	cmp	r3, #3
 8006dda:	d856      	bhi.n	8006e8a <DMA_CheckFifoParam+0xce>
 8006ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8006de4 <DMA_CheckFifoParam+0x28>)
 8006dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de2:	bf00      	nop
 8006de4:	08006df5 	.word	0x08006df5
 8006de8:	08006e07 	.word	0x08006e07
 8006dec:	08006df5 	.word	0x08006df5
 8006df0:	08006e8b 	.word	0x08006e8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d046      	beq.n	8006e8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e04:	e043      	b.n	8006e8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006e0e:	d140      	bne.n	8006e92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e14:	e03d      	b.n	8006e92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e1e:	d121      	bne.n	8006e64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d837      	bhi.n	8006e96 <DMA_CheckFifoParam+0xda>
 8006e26:	a201      	add	r2, pc, #4	@ (adr r2, 8006e2c <DMA_CheckFifoParam+0x70>)
 8006e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2c:	08006e3d 	.word	0x08006e3d
 8006e30:	08006e43 	.word	0x08006e43
 8006e34:	08006e3d 	.word	0x08006e3d
 8006e38:	08006e55 	.word	0x08006e55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e40:	e030      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d025      	beq.n	8006e9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e52:	e022      	b.n	8006e9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e58:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006e5c:	d11f      	bne.n	8006e9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006e62:	e01c      	b.n	8006e9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d903      	bls.n	8006e72 <DMA_CheckFifoParam+0xb6>
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2b03      	cmp	r3, #3
 8006e6e:	d003      	beq.n	8006e78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006e70:	e018      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	73fb      	strb	r3, [r7, #15]
      break;
 8006e76:	e015      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00e      	beq.n	8006ea2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	73fb      	strb	r3, [r7, #15]
      break;
 8006e88:	e00b      	b.n	8006ea2 <DMA_CheckFifoParam+0xe6>
      break;
 8006e8a:	bf00      	nop
 8006e8c:	e00a      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8006e8e:	bf00      	nop
 8006e90:	e008      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8006e92:	bf00      	nop
 8006e94:	e006      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8006e96:	bf00      	nop
 8006e98:	e004      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8006e9a:	bf00      	nop
 8006e9c:	e002      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
      break;   
 8006e9e:	bf00      	nop
 8006ea0:	e000      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8006ea2:	bf00      	nop
    }
  } 
  
  return status; 
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop

08006eb4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e039      	b.n	8006f3a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d106      	bne.n	8006ee0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7fc ff56 	bl	8003d8c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f04:	f023 0107 	bic.w	r1, r3, #7
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	689a      	ldr	r2, [r3, #8]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	430a      	orrs	r2, r1
 8006f12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f44 <HAL_DMA2D_Init+0x90>)
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	68d1      	ldr	r1, [r2, #12]
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	6812      	ldr	r2, [r2, #0]
 8006f26:	430b      	orrs	r3, r1
 8006f28:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	ffffc000 	.word	0xffffc000

08006f48 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d026      	beq.n	8006fb8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d021      	beq.n	8006fb8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f82:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f88:	f043 0201 	orr.w	r2, r3, #1
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2201      	movs	r2, #1
 8006f96:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2204      	movs	r2, #4
 8006f9c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d003      	beq.n	8006fb8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f003 0320 	and.w	r3, r3, #32
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d026      	beq.n	8007010 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d021      	beq.n	8007010 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006fda:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe8:	f043 0202 	orr.w	r2, r3, #2
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2204      	movs	r2, #4
 8006ff4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f003 0308 	and.w	r3, r3, #8
 8007016:	2b00      	cmp	r3, #0
 8007018:	d026      	beq.n	8007068 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007020:	2b00      	cmp	r3, #0
 8007022:	d021      	beq.n	8007068 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007032:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2208      	movs	r2, #8
 800703a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007040:	f043 0204 	orr.w	r2, r3, #4
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2204      	movs	r2, #4
 800704c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d003      	beq.n	8007068 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f003 0304 	and.w	r3, r3, #4
 800706e:	2b00      	cmp	r3, #0
 8007070:	d013      	beq.n	800709a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00e      	beq.n	800709a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800708a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2204      	movs	r2, #4
 8007092:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 f853 	bl	8007140 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d024      	beq.n	80070ee <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d01f      	beq.n	80070ee <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80070bc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2202      	movs	r2, #2
 80070c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f003 0310 	and.w	r3, r3, #16
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d01f      	beq.n	8007138 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d01a      	beq.n	8007138 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007110:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2210      	movs	r2, #16
 8007118:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f80e 	bl	8007154 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007138:	bf00      	nop
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007180:	2b01      	cmp	r3, #1
 8007182:	d101      	bne.n	8007188 <HAL_DMA2D_ConfigLayer+0x20>
 8007184:	2302      	movs	r3, #2
 8007186:	e079      	b.n	800727c <HAL_DMA2D_ConfigLayer+0x114>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	011b      	lsls	r3, r3, #4
 800719c:	3318      	adds	r3, #24
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	4413      	add	r3, r2
 80071a2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	041b      	lsls	r3, r3, #16
 80071ae:	4313      	orrs	r3, r2
 80071b0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80071b2:	4b35      	ldr	r3, [pc, #212]	@ (8007288 <HAL_DMA2D_ConfigLayer+0x120>)
 80071b4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	2b0a      	cmp	r3, #10
 80071bc:	d003      	beq.n	80071c6 <HAL_DMA2D_ConfigLayer+0x5e>
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	2b09      	cmp	r3, #9
 80071c4:	d107      	bne.n	80071d6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	617b      	str	r3, [r7, #20]
 80071d4:	e005      	b.n	80071e2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	061b      	lsls	r3, r3, #24
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	4313      	orrs	r3, r2
 80071e0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d120      	bne.n	800722a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	43db      	mvns	r3, r3
 80071f2:	ea02 0103 	and.w	r1, r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	6812      	ldr	r2, [r2, #0]
 8007208:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	2b0a      	cmp	r3, #10
 8007210:	d003      	beq.n	800721a <HAL_DMA2D_ConfigLayer+0xb2>
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	2b09      	cmp	r3, #9
 8007218:	d127      	bne.n	800726a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	68da      	ldr	r2, [r3, #12]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8007226:	629a      	str	r2, [r3, #40]	@ 0x28
 8007228:	e01f      	b.n	800726a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69da      	ldr	r2, [r3, #28]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	43db      	mvns	r3, r3
 8007234:	ea02 0103 	and.w	r1, r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	430a      	orrs	r2, r1
 8007240:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	6812      	ldr	r2, [r2, #0]
 800724a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	2b0a      	cmp	r3, #10
 8007252:	d003      	beq.n	800725c <HAL_DMA2D_ConfigLayer+0xf4>
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	2b09      	cmp	r3, #9
 800725a:	d106      	bne.n	800726a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	68da      	ldr	r2, [r3, #12]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8007268:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	371c      	adds	r7, #28
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	ff03000f 	.word	0xff03000f

0800728c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e086      	b.n	80073ac <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d106      	bne.n	80072b6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2220      	movs	r2, #32
 80072ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7fc fd91 	bl	8003dd8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072b6:	4b3f      	ldr	r3, [pc, #252]	@ (80073b4 <HAL_ETH_Init+0x128>)
 80072b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ba:	4a3e      	ldr	r2, [pc, #248]	@ (80073b4 <HAL_ETH_Init+0x128>)
 80072bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80072c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80072c2:	4b3c      	ldr	r3, [pc, #240]	@ (80073b4 <HAL_ETH_Init+0x128>)
 80072c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072ca:	60bb      	str	r3, [r7, #8]
 80072cc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80072ce:	4b3a      	ldr	r3, [pc, #232]	@ (80073b8 <HAL_ETH_Init+0x12c>)
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	4a39      	ldr	r2, [pc, #228]	@ (80073b8 <HAL_ETH_Init+0x12c>)
 80072d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80072d8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80072da:	4b37      	ldr	r3, [pc, #220]	@ (80073b8 <HAL_ETH_Init+0x12c>)
 80072dc:	685a      	ldr	r2, [r3, #4]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	4935      	ldr	r1, [pc, #212]	@ (80073b8 <HAL_ETH_Init+0x12c>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80072e8:	4b33      	ldr	r3, [pc, #204]	@ (80073b8 <HAL_ETH_Init+0x12c>)
 80072ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	6812      	ldr	r2, [r2, #0]
 80072fa:	f043 0301 	orr.w	r3, r3, #1
 80072fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007302:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007304:	f7fe fc4c 	bl	8005ba0 <HAL_GetTick>
 8007308:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800730a:	e011      	b.n	8007330 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800730c:	f7fe fc48 	bl	8005ba0 <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800731a:	d909      	bls.n	8007330 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2204      	movs	r2, #4
 8007320:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	22e0      	movs	r2, #224	@ 0xe0
 8007328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e03d      	b.n	80073ac <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e4      	bne.n	800730c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f97a 	bl	800763c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fa25 	bl	8007798 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fa7b 	bl	800784a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	461a      	mov	r2, r3
 800735a:	2100      	movs	r1, #0
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f9e3 	bl	8007728 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8007370:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	4b0f      	ldr	r3, [pc, #60]	@ (80073bc <HAL_ETH_Init+0x130>)
 8007380:	430b      	orrs	r3, r1
 8007382:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8007396:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2210      	movs	r2, #16
 80073a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	40023800 	.word	0x40023800
 80073b8:	40013800 	.word	0x40013800
 80073bc:	00020060 	.word	0x00020060

080073c0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	4b53      	ldr	r3, [pc, #332]	@ (8007524 <ETH_SetMACConfig+0x164>)
 80073d6:	4013      	ands	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	7b9b      	ldrb	r3, [r3, #14]
 80073de:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	7c12      	ldrb	r2, [r2, #16]
 80073e4:	2a00      	cmp	r2, #0
 80073e6:	d102      	bne.n	80073ee <ETH_SetMACConfig+0x2e>
 80073e8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80073ec:	e000      	b.n	80073f0 <ETH_SetMACConfig+0x30>
 80073ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80073f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	7c52      	ldrb	r2, [r2, #17]
 80073f6:	2a00      	cmp	r2, #0
 80073f8:	d102      	bne.n	8007400 <ETH_SetMACConfig+0x40>
 80073fa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80073fe:	e000      	b.n	8007402 <ETH_SetMACConfig+0x42>
 8007400:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007402:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007408:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	7fdb      	ldrb	r3, [r3, #31]
 800740e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8007410:	431a      	orrs	r2, r3
                        macconf->Speed |
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007416:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	7f92      	ldrb	r2, [r2, #30]
 800741c:	2a00      	cmp	r2, #0
 800741e:	d102      	bne.n	8007426 <ETH_SetMACConfig+0x66>
 8007420:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007424:	e000      	b.n	8007428 <ETH_SetMACConfig+0x68>
 8007426:	2200      	movs	r2, #0
                        macconf->Speed |
 8007428:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	7f1b      	ldrb	r3, [r3, #28]
 800742e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007430:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007436:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	791b      	ldrb	r3, [r3, #4]
 800743c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800743e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007446:	2a00      	cmp	r2, #0
 8007448:	d102      	bne.n	8007450 <ETH_SetMACConfig+0x90>
 800744a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800744e:	e000      	b.n	8007452 <ETH_SetMACConfig+0x92>
 8007450:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007452:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	7bdb      	ldrb	r3, [r3, #15]
 8007458:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800745a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007460:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007468:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800746a:	4313      	orrs	r3, r2
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	4313      	orrs	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007482:	2001      	movs	r0, #1
 8007484:	f7fe fb98 	bl	8005bb8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800749e:	4013      	ands	r3, r2
 80074a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074a6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80074a8:	683a      	ldr	r2, [r7, #0]
 80074aa:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80074ae:	2a00      	cmp	r2, #0
 80074b0:	d101      	bne.n	80074b6 <ETH_SetMACConfig+0xf6>
 80074b2:	2280      	movs	r2, #128	@ 0x80
 80074b4:	e000      	b.n	80074b8 <ETH_SetMACConfig+0xf8>
 80074b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80074b8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80074be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80074c0:	683a      	ldr	r2, [r7, #0]
 80074c2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80074c6:	2a01      	cmp	r2, #1
 80074c8:	d101      	bne.n	80074ce <ETH_SetMACConfig+0x10e>
 80074ca:	2208      	movs	r2, #8
 80074cc:	e000      	b.n	80074d0 <ETH_SetMACConfig+0x110>
 80074ce:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80074d0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80074d8:	2a01      	cmp	r2, #1
 80074da:	d101      	bne.n	80074e0 <ETH_SetMACConfig+0x120>
 80074dc:	2204      	movs	r2, #4
 80074de:	e000      	b.n	80074e2 <ETH_SetMACConfig+0x122>
 80074e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80074e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80074e4:	683a      	ldr	r2, [r7, #0]
 80074e6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80074ea:	2a01      	cmp	r2, #1
 80074ec:	d101      	bne.n	80074f2 <ETH_SetMACConfig+0x132>
 80074ee:	2202      	movs	r2, #2
 80074f0:	e000      	b.n	80074f4 <ETH_SetMACConfig+0x134>
 80074f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80074f4:	4313      	orrs	r3, r2
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800750c:	2001      	movs	r0, #1
 800750e:	f7fe fb53 	bl	8005bb8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	619a      	str	r2, [r3, #24]
}
 800751a:	bf00      	nop
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	fd20810f 	.word	0xfd20810f

08007528 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	4b3d      	ldr	r3, [pc, #244]	@ (8007638 <ETH_SetDMAConfig+0x110>)
 8007542:	4013      	ands	r3, r2
 8007544:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	7b1b      	ldrb	r3, [r3, #12]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d102      	bne.n	8007554 <ETH_SetDMAConfig+0x2c>
 800754e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007552:	e000      	b.n	8007556 <ETH_SetDMAConfig+0x2e>
 8007554:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	7b5b      	ldrb	r3, [r3, #13]
 800755a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800755c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	7f52      	ldrb	r2, [r2, #29]
 8007562:	2a00      	cmp	r2, #0
 8007564:	d102      	bne.n	800756c <ETH_SetDMAConfig+0x44>
 8007566:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800756a:	e000      	b.n	800756e <ETH_SetDMAConfig+0x46>
 800756c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800756e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	7b9b      	ldrb	r3, [r3, #14]
 8007574:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007576:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800757c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	7f1b      	ldrb	r3, [r3, #28]
 8007582:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8007584:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	7f9b      	ldrb	r3, [r3, #30]
 800758a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800758c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007592:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800759a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800759c:	4313      	orrs	r3, r2
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075ac:	461a      	mov	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80075be:	2001      	movs	r0, #1
 80075c0:	f7fe fafa 	bl	8005bb8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075cc:	461a      	mov	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	791b      	ldrb	r3, [r3, #4]
 80075d6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80075dc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80075e2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80075e8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80075f0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80075f2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80075fa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007600:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	6812      	ldr	r2, [r2, #0]
 8007606:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800760a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800760e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800761c:	2001      	movs	r0, #1
 800761e:	f7fe facb 	bl	8005bb8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800762a:	461a      	mov	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6013      	str	r3, [r2, #0]
}
 8007630:	bf00      	nop
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	f8de3f23 	.word	0xf8de3f23

0800763c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b0a6      	sub	sp, #152	@ 0x98
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8007644:	2301      	movs	r3, #1
 8007646:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800764a:	2301      	movs	r3, #1
 800764c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8007650:	2300      	movs	r3, #0
 8007652:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007654:	2300      	movs	r3, #0
 8007656:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800765a:	2301      	movs	r3, #1
 800765c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8007660:	2300      	movs	r3, #0
 8007662:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8007666:	2301      	movs	r3, #1
 8007668:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800766c:	2301      	movs	r3, #1
 800766e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8007672:	2300      	movs	r3, #0
 8007674:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8007678:	2300      	movs	r3, #0
 800767a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800767e:	2300      	movs	r3, #0
 8007680:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8007682:	2300      	movs	r3, #0
 8007684:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8007688:	2300      	movs	r3, #0
 800768a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800768c:	2300      	movs	r3, #0
 800768e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8007692:	2300      	movs	r3, #0
 8007694:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007698:	2300      	movs	r3, #0
 800769a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800769e:	2300      	movs	r3, #0
 80076a0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80076a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80076a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80076aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80076ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80076b0:	2300      	movs	r3, #0
 80076b2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80076b6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f7ff fe7f 	bl	80073c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80076c2:	2301      	movs	r3, #1
 80076c4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80076c6:	2301      	movs	r3, #1
 80076c8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80076ca:	2301      	movs	r3, #1
 80076cc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80076d0:	2301      	movs	r3, #1
 80076d2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80076d4:	2300      	movs	r3, #0
 80076d6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80076d8:	2300      	movs	r3, #0
 80076da:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80076de:	2300      	movs	r3, #0
 80076e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80076e4:	2300      	movs	r3, #0
 80076e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80076e8:	2301      	movs	r3, #1
 80076ea:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80076ee:	2301      	movs	r3, #1
 80076f0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80076f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80076f6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80076f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80076fc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80076fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007702:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8007704:	2301      	movs	r3, #1
 8007706:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800770a:	2300      	movs	r3, #0
 800770c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800770e:	2300      	movs	r3, #0
 8007710:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007712:	f107 0308 	add.w	r3, r7, #8
 8007716:	4619      	mov	r1, r3
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7ff ff05 	bl	8007528 <ETH_SetDMAConfig>
}
 800771e:	bf00      	nop
 8007720:	3798      	adds	r7, #152	@ 0x98
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8007728:	b480      	push	{r7}
 800772a:	b087      	sub	sp, #28
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	3305      	adds	r3, #5
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	021b      	lsls	r3, r3, #8
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	3204      	adds	r2, #4
 8007740:	7812      	ldrb	r2, [r2, #0]
 8007742:	4313      	orrs	r3, r2
 8007744:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	4b11      	ldr	r3, [pc, #68]	@ (8007790 <ETH_MACAddressConfig+0x68>)
 800774a:	4413      	add	r3, r2
 800774c:	461a      	mov	r2, r3
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	3303      	adds	r3, #3
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	061a      	lsls	r2, r3, #24
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	3302      	adds	r3, #2
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	041b      	lsls	r3, r3, #16
 8007762:	431a      	orrs	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3301      	adds	r3, #1
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	021b      	lsls	r3, r3, #8
 800776c:	4313      	orrs	r3, r2
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	7812      	ldrb	r2, [r2, #0]
 8007772:	4313      	orrs	r3, r2
 8007774:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	4b06      	ldr	r3, [pc, #24]	@ (8007794 <ETH_MACAddressConfig+0x6c>)
 800777a:	4413      	add	r3, r2
 800777c:	461a      	mov	r2, r3
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	6013      	str	r3, [r2, #0]
}
 8007782:	bf00      	nop
 8007784:	371c      	adds	r7, #28
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	40028040 	.word	0x40028040
 8007794:	40028044 	.word	0x40028044

08007798 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80077a0:	2300      	movs	r3, #0
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	e03e      	b.n	8007824 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68d9      	ldr	r1, [r3, #12]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	4613      	mov	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4413      	add	r3, r2
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	440b      	add	r3, r1
 80077b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2200      	movs	r2, #0
 80077bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2200      	movs	r2, #0
 80077c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2200      	movs	r2, #0
 80077c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	2200      	movs	r2, #0
 80077ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80077d0:	68b9      	ldr	r1, [r7, #8]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	3206      	adds	r2, #6
 80077d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d80c      	bhi.n	8007808 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68d9      	ldr	r1, [r3, #12]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	1c5a      	adds	r2, r3, #1
 80077f6:	4613      	mov	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	00db      	lsls	r3, r3, #3
 80077fe:	440b      	add	r3, r1
 8007800:	461a      	mov	r2, r3
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	60da      	str	r2, [r3, #12]
 8007806:	e004      	b.n	8007812 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	461a      	mov	r2, r3
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	3301      	adds	r3, #1
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b03      	cmp	r3, #3
 8007828:	d9bd      	bls.n	80077a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68da      	ldr	r2, [r3, #12]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800783c:	611a      	str	r2, [r3, #16]
}
 800783e:	bf00      	nop
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800784a:	b480      	push	{r7}
 800784c:	b085      	sub	sp, #20
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007852:	2300      	movs	r3, #0
 8007854:	60fb      	str	r3, [r7, #12]
 8007856:	e048      	b.n	80078ea <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6919      	ldr	r1, [r3, #16]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	4613      	mov	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	4413      	add	r3, r2
 8007864:	00db      	lsls	r3, r3, #3
 8007866:	440b      	add	r3, r1
 8007868:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	2200      	movs	r2, #0
 800786e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	2200      	movs	r2, #0
 8007874:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	2200      	movs	r2, #0
 800787a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2200      	movs	r2, #0
 8007880:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	2200      	movs	r2, #0
 8007886:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2200      	movs	r2, #0
 800788c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007894:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80078ae:	68b9      	ldr	r1, [r7, #8]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	3212      	adds	r2, #18
 80078b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d80c      	bhi.n	80078da <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6919      	ldr	r1, [r3, #16]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	1c5a      	adds	r2, r3, #1
 80078c8:	4613      	mov	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	440b      	add	r3, r1
 80078d2:	461a      	mov	r2, r3
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	60da      	str	r2, [r3, #12]
 80078d8:	e004      	b.n	80078e4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	461a      	mov	r2, r3
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	3301      	adds	r3, #1
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d9b3      	bls.n	8007858 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	691a      	ldr	r2, [r3, #16]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800791a:	60da      	str	r2, [r3, #12]
}
 800791c:	bf00      	nop
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007928:	b480      	push	{r7}
 800792a:	b089      	sub	sp, #36	@ 0x24
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007932:	2300      	movs	r3, #0
 8007934:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007936:	2300      	movs	r3, #0
 8007938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800793a:	2300      	movs	r3, #0
 800793c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800793e:	2300      	movs	r3, #0
 8007940:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8007942:	2300      	movs	r3, #0
 8007944:	61fb      	str	r3, [r7, #28]
 8007946:	e175      	b.n	8007c34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007948:	2201      	movs	r2, #1
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	fa02 f303 	lsl.w	r3, r2, r3
 8007950:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	4013      	ands	r3, r2
 800795a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	429a      	cmp	r2, r3
 8007962:	f040 8164 	bne.w	8007c2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f003 0303 	and.w	r3, r3, #3
 800796e:	2b01      	cmp	r3, #1
 8007970:	d005      	beq.n	800797e <HAL_GPIO_Init+0x56>
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f003 0303 	and.w	r3, r3, #3
 800797a:	2b02      	cmp	r3, #2
 800797c:	d130      	bne.n	80079e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	005b      	lsls	r3, r3, #1
 8007988:	2203      	movs	r2, #3
 800798a:	fa02 f303 	lsl.w	r3, r2, r3
 800798e:	43db      	mvns	r3, r3
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	4013      	ands	r3, r2
 8007994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	68da      	ldr	r2, [r3, #12]
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	005b      	lsls	r3, r3, #1
 800799e:	fa02 f303 	lsl.w	r3, r2, r3
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	69ba      	ldr	r2, [r7, #24]
 80079ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80079b4:	2201      	movs	r2, #1
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	fa02 f303 	lsl.w	r3, r2, r3
 80079bc:	43db      	mvns	r3, r3
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	4013      	ands	r3, r2
 80079c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	091b      	lsrs	r3, r3, #4
 80079ca:	f003 0201 	and.w	r2, r3, #1
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	fa02 f303 	lsl.w	r3, r2, r3
 80079d4:	69ba      	ldr	r2, [r7, #24]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f003 0303 	and.w	r3, r3, #3
 80079e8:	2b03      	cmp	r3, #3
 80079ea:	d017      	beq.n	8007a1c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	005b      	lsls	r3, r3, #1
 80079f6:	2203      	movs	r2, #3
 80079f8:	fa02 f303 	lsl.w	r3, r2, r3
 80079fc:	43db      	mvns	r3, r3
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	4013      	ands	r3, r2
 8007a02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	689a      	ldr	r2, [r3, #8]
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	005b      	lsls	r3, r3, #1
 8007a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a10:	69ba      	ldr	r2, [r7, #24]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f003 0303 	and.w	r3, r3, #3
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d123      	bne.n	8007a70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	08da      	lsrs	r2, r3, #3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	3208      	adds	r2, #8
 8007a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	f003 0307 	and.w	r3, r3, #7
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	220f      	movs	r2, #15
 8007a40:	fa02 f303 	lsl.w	r3, r2, r3
 8007a44:	43db      	mvns	r3, r3
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	4013      	ands	r3, r2
 8007a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	691a      	ldr	r2, [r3, #16]
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	f003 0307 	and.w	r3, r3, #7
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	fa02 f303 	lsl.w	r3, r2, r3
 8007a5c:	69ba      	ldr	r2, [r7, #24]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	08da      	lsrs	r2, r3, #3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	3208      	adds	r2, #8
 8007a6a:	69b9      	ldr	r1, [r7, #24]
 8007a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	005b      	lsls	r3, r3, #1
 8007a7a:	2203      	movs	r2, #3
 8007a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a80:	43db      	mvns	r3, r3
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	4013      	ands	r3, r2
 8007a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	f003 0203 	and.w	r2, r3, #3
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	005b      	lsls	r3, r3, #1
 8007a94:	fa02 f303 	lsl.w	r3, r2, r3
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	69ba      	ldr	r2, [r7, #24]
 8007aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 80be 	beq.w	8007c2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ab2:	4b66      	ldr	r3, [pc, #408]	@ (8007c4c <HAL_GPIO_Init+0x324>)
 8007ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ab6:	4a65      	ldr	r2, [pc, #404]	@ (8007c4c <HAL_GPIO_Init+0x324>)
 8007ab8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8007abe:	4b63      	ldr	r3, [pc, #396]	@ (8007c4c <HAL_GPIO_Init+0x324>)
 8007ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ac6:	60fb      	str	r3, [r7, #12]
 8007ac8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007aca:	4a61      	ldr	r2, [pc, #388]	@ (8007c50 <HAL_GPIO_Init+0x328>)
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	089b      	lsrs	r3, r3, #2
 8007ad0:	3302      	adds	r3, #2
 8007ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	f003 0303 	and.w	r3, r3, #3
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	220f      	movs	r2, #15
 8007ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae6:	43db      	mvns	r3, r3
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	4013      	ands	r3, r2
 8007aec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a58      	ldr	r2, [pc, #352]	@ (8007c54 <HAL_GPIO_Init+0x32c>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d037      	beq.n	8007b66 <HAL_GPIO_Init+0x23e>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a57      	ldr	r2, [pc, #348]	@ (8007c58 <HAL_GPIO_Init+0x330>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d031      	beq.n	8007b62 <HAL_GPIO_Init+0x23a>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a56      	ldr	r2, [pc, #344]	@ (8007c5c <HAL_GPIO_Init+0x334>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d02b      	beq.n	8007b5e <HAL_GPIO_Init+0x236>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a55      	ldr	r2, [pc, #340]	@ (8007c60 <HAL_GPIO_Init+0x338>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d025      	beq.n	8007b5a <HAL_GPIO_Init+0x232>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a54      	ldr	r2, [pc, #336]	@ (8007c64 <HAL_GPIO_Init+0x33c>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d01f      	beq.n	8007b56 <HAL_GPIO_Init+0x22e>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a53      	ldr	r2, [pc, #332]	@ (8007c68 <HAL_GPIO_Init+0x340>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d019      	beq.n	8007b52 <HAL_GPIO_Init+0x22a>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a52      	ldr	r2, [pc, #328]	@ (8007c6c <HAL_GPIO_Init+0x344>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d013      	beq.n	8007b4e <HAL_GPIO_Init+0x226>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a51      	ldr	r2, [pc, #324]	@ (8007c70 <HAL_GPIO_Init+0x348>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d00d      	beq.n	8007b4a <HAL_GPIO_Init+0x222>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a50      	ldr	r2, [pc, #320]	@ (8007c74 <HAL_GPIO_Init+0x34c>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d007      	beq.n	8007b46 <HAL_GPIO_Init+0x21e>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a4f      	ldr	r2, [pc, #316]	@ (8007c78 <HAL_GPIO_Init+0x350>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d101      	bne.n	8007b42 <HAL_GPIO_Init+0x21a>
 8007b3e:	2309      	movs	r3, #9
 8007b40:	e012      	b.n	8007b68 <HAL_GPIO_Init+0x240>
 8007b42:	230a      	movs	r3, #10
 8007b44:	e010      	b.n	8007b68 <HAL_GPIO_Init+0x240>
 8007b46:	2308      	movs	r3, #8
 8007b48:	e00e      	b.n	8007b68 <HAL_GPIO_Init+0x240>
 8007b4a:	2307      	movs	r3, #7
 8007b4c:	e00c      	b.n	8007b68 <HAL_GPIO_Init+0x240>
 8007b4e:	2306      	movs	r3, #6
 8007b50:	e00a      	b.n	8007b68 <HAL_GPIO_Init+0x240>
 8007b52:	2305      	movs	r3, #5
 8007b54:	e008      	b.n	8007b68 <HAL_GPIO_Init+0x240>
 8007b56:	2304      	movs	r3, #4
 8007b58:	e006      	b.n	8007b68 <HAL_GPIO_Init+0x240>
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e004      	b.n	8007b68 <HAL_GPIO_Init+0x240>
 8007b5e:	2302      	movs	r3, #2
 8007b60:	e002      	b.n	8007b68 <HAL_GPIO_Init+0x240>
 8007b62:	2301      	movs	r3, #1
 8007b64:	e000      	b.n	8007b68 <HAL_GPIO_Init+0x240>
 8007b66:	2300      	movs	r3, #0
 8007b68:	69fa      	ldr	r2, [r7, #28]
 8007b6a:	f002 0203 	and.w	r2, r2, #3
 8007b6e:	0092      	lsls	r2, r2, #2
 8007b70:	4093      	lsls	r3, r2
 8007b72:	69ba      	ldr	r2, [r7, #24]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007b78:	4935      	ldr	r1, [pc, #212]	@ (8007c50 <HAL_GPIO_Init+0x328>)
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	089b      	lsrs	r3, r3, #2
 8007b7e:	3302      	adds	r3, #2
 8007b80:	69ba      	ldr	r2, [r7, #24]
 8007b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007b86:	4b3d      	ldr	r3, [pc, #244]	@ (8007c7c <HAL_GPIO_Init+0x354>)
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	43db      	mvns	r3, r3
 8007b90:	69ba      	ldr	r2, [r7, #24]
 8007b92:	4013      	ands	r3, r2
 8007b94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d003      	beq.n	8007baa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007baa:	4a34      	ldr	r2, [pc, #208]	@ (8007c7c <HAL_GPIO_Init+0x354>)
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007bb0:	4b32      	ldr	r3, [pc, #200]	@ (8007c7c <HAL_GPIO_Init+0x354>)
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	43db      	mvns	r3, r3
 8007bba:	69ba      	ldr	r2, [r7, #24]
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d003      	beq.n	8007bd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007bd4:	4a29      	ldr	r2, [pc, #164]	@ (8007c7c <HAL_GPIO_Init+0x354>)
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007bda:	4b28      	ldr	r3, [pc, #160]	@ (8007c7c <HAL_GPIO_Init+0x354>)
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	43db      	mvns	r3, r3
 8007be4:	69ba      	ldr	r2, [r7, #24]
 8007be6:	4013      	ands	r3, r2
 8007be8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8007c7c <HAL_GPIO_Init+0x354>)
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c04:	4b1d      	ldr	r3, [pc, #116]	@ (8007c7c <HAL_GPIO_Init+0x354>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	43db      	mvns	r3, r3
 8007c0e:	69ba      	ldr	r2, [r7, #24]
 8007c10:	4013      	ands	r3, r2
 8007c12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d003      	beq.n	8007c28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007c20:	69ba      	ldr	r2, [r7, #24]
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007c28:	4a14      	ldr	r2, [pc, #80]	@ (8007c7c <HAL_GPIO_Init+0x354>)
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	3301      	adds	r3, #1
 8007c32:	61fb      	str	r3, [r7, #28]
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	2b0f      	cmp	r3, #15
 8007c38:	f67f ae86 	bls.w	8007948 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	3724      	adds	r7, #36	@ 0x24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	40023800 	.word	0x40023800
 8007c50:	40013800 	.word	0x40013800
 8007c54:	40020000 	.word	0x40020000
 8007c58:	40020400 	.word	0x40020400
 8007c5c:	40020800 	.word	0x40020800
 8007c60:	40020c00 	.word	0x40020c00
 8007c64:	40021000 	.word	0x40021000
 8007c68:	40021400 	.word	0x40021400
 8007c6c:	40021800 	.word	0x40021800
 8007c70:	40021c00 	.word	0x40021c00
 8007c74:	40022000 	.word	0x40022000
 8007c78:	40022400 	.word	0x40022400
 8007c7c:	40013c00 	.word	0x40013c00

08007c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	807b      	strh	r3, [r7, #2]
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c90:	787b      	ldrb	r3, [r7, #1]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d003      	beq.n	8007c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c96:	887a      	ldrh	r2, [r7, #2]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007c9c:	e003      	b.n	8007ca6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007c9e:	887b      	ldrh	r3, [r7, #2]
 8007ca0:	041a      	lsls	r2, r3, #16
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	619a      	str	r2, [r3, #24]
}
 8007ca6:	bf00      	nop
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b086      	sub	sp, #24
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f008 ff09 	bl	8010ae0 <USB_GetMode>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	f040 80fb 	bne.w	8007ecc <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f008 fecc 	bl	8010a78 <USB_ReadInterrupts>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 80f1 	beq.w	8007eca <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4618      	mov	r0, r3
 8007cee:	f008 fec3 	bl	8010a78 <USB_ReadInterrupts>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007cf8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007cfc:	d104      	bne.n	8007d08 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8007d06:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f008 feb3 	bl	8010a78 <USB_ReadInterrupts>
 8007d12:	4603      	mov	r3, r0
 8007d14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d1c:	d104      	bne.n	8007d28 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007d26:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f008 fea3 	bl	8010a78 <USB_ReadInterrupts>
 8007d32:	4603      	mov	r3, r0
 8007d34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007d38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d3c:	d104      	bne.n	8007d48 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007d46:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f008 fe93 	bl	8010a78 <USB_ReadInterrupts>
 8007d52:	4603      	mov	r3, r0
 8007d54:	f003 0302 	and.w	r3, r3, #2
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d103      	bne.n	8007d64 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2202      	movs	r2, #2
 8007d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f008 fe85 	bl	8010a78 <USB_ReadInterrupts>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d78:	d120      	bne.n	8007dbc <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007d82:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d113      	bne.n	8007dbc <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8007d94:	2110      	movs	r1, #16
 8007d96:	6938      	ldr	r0, [r7, #16]
 8007d98:	f008 fdb6 	bl	8010908 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8007d9c:	6938      	ldr	r0, [r7, #16]
 8007d9e:	f008 fde5 	bl	801096c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	7a5b      	ldrb	r3, [r3, #9]
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d105      	bne.n	8007db6 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2101      	movs	r1, #1
 8007db0:	4618      	mov	r0, r3
 8007db2:	f008 fea3 	bl	8010afc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f00e fe30 	bl	8016a1c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f008 fe59 	bl	8010a78 <USB_ReadInterrupts>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007dcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007dd0:	d102      	bne.n	8007dd8 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f001 fca1 	bl	800971a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f008 fe4b 	bl	8010a78 <USB_ReadInterrupts>
 8007de2:	4603      	mov	r3, r0
 8007de4:	f003 0308 	and.w	r3, r3, #8
 8007de8:	2b08      	cmp	r3, #8
 8007dea:	d106      	bne.n	8007dfa <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f00e fdf9 	bl	80169e4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2208      	movs	r2, #8
 8007df8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f008 fe3a 	bl	8010a78 <USB_ReadInterrupts>
 8007e04:	4603      	mov	r3, r0
 8007e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e0e:	d139      	bne.n	8007e84 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f008 feae 	bl	8010b76 <USB_HC_ReadInterrupt>
 8007e1a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	617b      	str	r3, [r7, #20]
 8007e20:	e025      	b.n	8007e6e <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f003 030f 	and.w	r3, r3, #15
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d018      	beq.n	8007e68 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	015a      	lsls	r2, r3, #5
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e4c:	d106      	bne.n	8007e5c <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 f859 	bl	8007f0c <HCD_HC_IN_IRQHandler>
 8007e5a:	e005      	b.n	8007e68 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	4619      	mov	r1, r3
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 febb 	bl	8008bde <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	617b      	str	r3, [r7, #20]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	795b      	ldrb	r3, [r3, #5]
 8007e72:	461a      	mov	r2, r3
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d3d3      	bcc.n	8007e22 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007e82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f008 fdf5 	bl	8010a78 <USB_ReadInterrupts>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	f003 0310 	and.w	r3, r3, #16
 8007e94:	2b10      	cmp	r3, #16
 8007e96:	d101      	bne.n	8007e9c <HAL_HCD_IRQHandler+0x1ea>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e000      	b.n	8007e9e <HAL_HCD_IRQHandler+0x1ec>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d014      	beq.n	8007ecc <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	699a      	ldr	r2, [r3, #24]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f022 0210 	bic.w	r2, r2, #16
 8007eb0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f001 fb52 	bl	800955c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	699a      	ldr	r2, [r3, #24]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f042 0210 	orr.w	r2, r2, #16
 8007ec6:	619a      	str	r2, [r3, #24]
 8007ec8:	e000      	b.n	8007ecc <HAL_HCD_IRQHandler+0x21a>
      return;
 8007eca:	bf00      	nop
    }
  }
}
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b082      	sub	sp, #8
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d101      	bne.n	8007ee8 <HAL_HCD_Stop+0x16>
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	e00d      	b.n	8007f04 <HAL_HCD_Stop+0x32>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f008 ff6f 	bl	8010dd8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3708      	adds	r7, #8
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	460b      	mov	r3, r1
 8007f16:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	78fa      	ldrb	r2, [r7, #3]
 8007f28:	4611      	mov	r1, r2
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f008 fdb7 	bl	8010a9e <USB_ReadChInterrupts>
 8007f30:	4603      	mov	r3, r0
 8007f32:	f003 0304 	and.w	r3, r3, #4
 8007f36:	2b04      	cmp	r3, #4
 8007f38:	d11a      	bne.n	8007f70 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8007f3a:	78fb      	ldrb	r3, [r7, #3]
 8007f3c:	015a      	lsls	r2, r3, #5
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	4413      	add	r3, r2
 8007f42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f46:	461a      	mov	r2, r3
 8007f48:	2304      	movs	r3, #4
 8007f4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007f4c:	78fa      	ldrb	r2, [r7, #3]
 8007f4e:	6879      	ldr	r1, [r7, #4]
 8007f50:	4613      	mov	r3, r2
 8007f52:	011b      	lsls	r3, r3, #4
 8007f54:	1a9b      	subs	r3, r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	440b      	add	r3, r1
 8007f5a:	334d      	adds	r3, #77	@ 0x4d
 8007f5c:	2207      	movs	r2, #7
 8007f5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	78fa      	ldrb	r2, [r7, #3]
 8007f66:	4611      	mov	r1, r2
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f008 fe15 	bl	8010b98 <USB_HC_Halt>
 8007f6e:	e09e      	b.n	80080ae <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	78fa      	ldrb	r2, [r7, #3]
 8007f76:	4611      	mov	r1, r2
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f008 fd90 	bl	8010a9e <USB_ReadChInterrupts>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f88:	d11b      	bne.n	8007fc2 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8007f8a:	78fb      	ldrb	r3, [r7, #3]
 8007f8c:	015a      	lsls	r2, r3, #5
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	4413      	add	r3, r2
 8007f92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f96:	461a      	mov	r2, r3
 8007f98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007f9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8007f9e:	78fa      	ldrb	r2, [r7, #3]
 8007fa0:	6879      	ldr	r1, [r7, #4]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	011b      	lsls	r3, r3, #4
 8007fa6:	1a9b      	subs	r3, r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	440b      	add	r3, r1
 8007fac:	334d      	adds	r3, #77	@ 0x4d
 8007fae:	2208      	movs	r2, #8
 8007fb0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	78fa      	ldrb	r2, [r7, #3]
 8007fb8:	4611      	mov	r1, r2
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f008 fdec 	bl	8010b98 <USB_HC_Halt>
 8007fc0:	e075      	b.n	80080ae <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	78fa      	ldrb	r2, [r7, #3]
 8007fc8:	4611      	mov	r1, r2
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f008 fd67 	bl	8010a9e <USB_ReadChInterrupts>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	f003 0308 	and.w	r3, r3, #8
 8007fd6:	2b08      	cmp	r3, #8
 8007fd8:	d11a      	bne.n	8008010 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8007fda:	78fb      	ldrb	r3, [r7, #3]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	2308      	movs	r3, #8
 8007fea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8007fec:	78fa      	ldrb	r2, [r7, #3]
 8007fee:	6879      	ldr	r1, [r7, #4]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	011b      	lsls	r3, r3, #4
 8007ff4:	1a9b      	subs	r3, r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	440b      	add	r3, r1
 8007ffa:	334d      	adds	r3, #77	@ 0x4d
 8007ffc:	2206      	movs	r2, #6
 8007ffe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	78fa      	ldrb	r2, [r7, #3]
 8008006:	4611      	mov	r1, r2
 8008008:	4618      	mov	r0, r3
 800800a:	f008 fdc5 	bl	8010b98 <USB_HC_Halt>
 800800e:	e04e      	b.n	80080ae <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	78fa      	ldrb	r2, [r7, #3]
 8008016:	4611      	mov	r1, r2
 8008018:	4618      	mov	r0, r3
 800801a:	f008 fd40 	bl	8010a9e <USB_ReadChInterrupts>
 800801e:	4603      	mov	r3, r0
 8008020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008028:	d11b      	bne.n	8008062 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800802a:	78fb      	ldrb	r3, [r7, #3]
 800802c:	015a      	lsls	r2, r3, #5
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	4413      	add	r3, r2
 8008032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008036:	461a      	mov	r2, r3
 8008038:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800803c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800803e:	78fa      	ldrb	r2, [r7, #3]
 8008040:	6879      	ldr	r1, [r7, #4]
 8008042:	4613      	mov	r3, r2
 8008044:	011b      	lsls	r3, r3, #4
 8008046:	1a9b      	subs	r3, r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	440b      	add	r3, r1
 800804c:	334d      	adds	r3, #77	@ 0x4d
 800804e:	2209      	movs	r2, #9
 8008050:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	78fa      	ldrb	r2, [r7, #3]
 8008058:	4611      	mov	r1, r2
 800805a:	4618      	mov	r0, r3
 800805c:	f008 fd9c 	bl	8010b98 <USB_HC_Halt>
 8008060:	e025      	b.n	80080ae <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	78fa      	ldrb	r2, [r7, #3]
 8008068:	4611      	mov	r1, r2
 800806a:	4618      	mov	r0, r3
 800806c:	f008 fd17 	bl	8010a9e <USB_ReadChInterrupts>
 8008070:	4603      	mov	r3, r0
 8008072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008076:	2b80      	cmp	r3, #128	@ 0x80
 8008078:	d119      	bne.n	80080ae <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800807a:	78fb      	ldrb	r3, [r7, #3]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	4413      	add	r3, r2
 8008082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008086:	461a      	mov	r2, r3
 8008088:	2380      	movs	r3, #128	@ 0x80
 800808a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800808c:	78fa      	ldrb	r2, [r7, #3]
 800808e:	6879      	ldr	r1, [r7, #4]
 8008090:	4613      	mov	r3, r2
 8008092:	011b      	lsls	r3, r3, #4
 8008094:	1a9b      	subs	r3, r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	440b      	add	r3, r1
 800809a:	334d      	adds	r3, #77	@ 0x4d
 800809c:	2207      	movs	r2, #7
 800809e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	78fa      	ldrb	r2, [r7, #3]
 80080a6:	4611      	mov	r1, r2
 80080a8:	4618      	mov	r0, r3
 80080aa:	f008 fd75 	bl	8010b98 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	78fa      	ldrb	r2, [r7, #3]
 80080b4:	4611      	mov	r1, r2
 80080b6:	4618      	mov	r0, r3
 80080b8:	f008 fcf1 	bl	8010a9e <USB_ReadChInterrupts>
 80080bc:	4603      	mov	r3, r0
 80080be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080c6:	d112      	bne.n	80080ee <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	78fa      	ldrb	r2, [r7, #3]
 80080ce:	4611      	mov	r1, r2
 80080d0:	4618      	mov	r0, r3
 80080d2:	f008 fd61 	bl	8010b98 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80080d6:	78fb      	ldrb	r3, [r7, #3]
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080e2:	461a      	mov	r2, r3
 80080e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80080e8:	6093      	str	r3, [r2, #8]
 80080ea:	f000 bd75 	b.w	8008bd8 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	78fa      	ldrb	r2, [r7, #3]
 80080f4:	4611      	mov	r1, r2
 80080f6:	4618      	mov	r0, r3
 80080f8:	f008 fcd1 	bl	8010a9e <USB_ReadChInterrupts>
 80080fc:	4603      	mov	r3, r0
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	2b01      	cmp	r3, #1
 8008104:	f040 8128 	bne.w	8008358 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008108:	78fb      	ldrb	r3, [r7, #3]
 800810a:	015a      	lsls	r2, r3, #5
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	4413      	add	r3, r2
 8008110:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008114:	461a      	mov	r2, r3
 8008116:	2320      	movs	r3, #32
 8008118:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800811a:	78fa      	ldrb	r2, [r7, #3]
 800811c:	6879      	ldr	r1, [r7, #4]
 800811e:	4613      	mov	r3, r2
 8008120:	011b      	lsls	r3, r3, #4
 8008122:	1a9b      	subs	r3, r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	440b      	add	r3, r1
 8008128:	331b      	adds	r3, #27
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d119      	bne.n	8008164 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008130:	78fa      	ldrb	r2, [r7, #3]
 8008132:	6879      	ldr	r1, [r7, #4]
 8008134:	4613      	mov	r3, r2
 8008136:	011b      	lsls	r3, r3, #4
 8008138:	1a9b      	subs	r3, r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	440b      	add	r3, r1
 800813e:	331b      	adds	r3, #27
 8008140:	2200      	movs	r2, #0
 8008142:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008144:	78fb      	ldrb	r3, [r7, #3]
 8008146:	015a      	lsls	r2, r3, #5
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	4413      	add	r3, r2
 800814c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	78fa      	ldrb	r2, [r7, #3]
 8008154:	0151      	lsls	r1, r2, #5
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	440a      	add	r2, r1
 800815a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800815e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008162:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	799b      	ldrb	r3, [r3, #6]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d01b      	beq.n	80081a4 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800816c:	78fa      	ldrb	r2, [r7, #3]
 800816e:	6879      	ldr	r1, [r7, #4]
 8008170:	4613      	mov	r3, r2
 8008172:	011b      	lsls	r3, r3, #4
 8008174:	1a9b      	subs	r3, r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	440b      	add	r3, r1
 800817a:	3330      	adds	r3, #48	@ 0x30
 800817c:	6819      	ldr	r1, [r3, #0]
 800817e:	78fb      	ldrb	r3, [r7, #3]
 8008180:	015a      	lsls	r2, r3, #5
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	4413      	add	r3, r2
 8008186:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008190:	78fa      	ldrb	r2, [r7, #3]
 8008192:	1ac9      	subs	r1, r1, r3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	4613      	mov	r3, r2
 8008198:	011b      	lsls	r3, r3, #4
 800819a:	1a9b      	subs	r3, r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4403      	add	r3, r0
 80081a0:	3338      	adds	r3, #56	@ 0x38
 80081a2:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80081a4:	78fa      	ldrb	r2, [r7, #3]
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	4613      	mov	r3, r2
 80081aa:	011b      	lsls	r3, r3, #4
 80081ac:	1a9b      	subs	r3, r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	440b      	add	r3, r1
 80081b2:	334d      	adds	r3, #77	@ 0x4d
 80081b4:	2201      	movs	r2, #1
 80081b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80081b8:	78fa      	ldrb	r2, [r7, #3]
 80081ba:	6879      	ldr	r1, [r7, #4]
 80081bc:	4613      	mov	r3, r2
 80081be:	011b      	lsls	r3, r3, #4
 80081c0:	1a9b      	subs	r3, r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	440b      	add	r3, r1
 80081c6:	3344      	adds	r3, #68	@ 0x44
 80081c8:	2200      	movs	r2, #0
 80081ca:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80081cc:	78fb      	ldrb	r3, [r7, #3]
 80081ce:	015a      	lsls	r2, r3, #5
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	4413      	add	r3, r2
 80081d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081d8:	461a      	mov	r2, r3
 80081da:	2301      	movs	r3, #1
 80081dc:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80081de:	78fa      	ldrb	r2, [r7, #3]
 80081e0:	6879      	ldr	r1, [r7, #4]
 80081e2:	4613      	mov	r3, r2
 80081e4:	011b      	lsls	r3, r3, #4
 80081e6:	1a9b      	subs	r3, r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	440b      	add	r3, r1
 80081ec:	3326      	adds	r3, #38	@ 0x26
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00a      	beq.n	800820a <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80081f4:	78fa      	ldrb	r2, [r7, #3]
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	4613      	mov	r3, r2
 80081fa:	011b      	lsls	r3, r3, #4
 80081fc:	1a9b      	subs	r3, r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	440b      	add	r3, r1
 8008202:	3326      	adds	r3, #38	@ 0x26
 8008204:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008206:	2b02      	cmp	r3, #2
 8008208:	d110      	bne.n	800822c <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	78fa      	ldrb	r2, [r7, #3]
 8008210:	4611      	mov	r1, r2
 8008212:	4618      	mov	r0, r3
 8008214:	f008 fcc0 	bl	8010b98 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008218:	78fb      	ldrb	r3, [r7, #3]
 800821a:	015a      	lsls	r2, r3, #5
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	4413      	add	r3, r2
 8008220:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008224:	461a      	mov	r2, r3
 8008226:	2310      	movs	r3, #16
 8008228:	6093      	str	r3, [r2, #8]
 800822a:	e03d      	b.n	80082a8 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800822c:	78fa      	ldrb	r2, [r7, #3]
 800822e:	6879      	ldr	r1, [r7, #4]
 8008230:	4613      	mov	r3, r2
 8008232:	011b      	lsls	r3, r3, #4
 8008234:	1a9b      	subs	r3, r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	440b      	add	r3, r1
 800823a:	3326      	adds	r3, #38	@ 0x26
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	2b03      	cmp	r3, #3
 8008240:	d00a      	beq.n	8008258 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8008242:	78fa      	ldrb	r2, [r7, #3]
 8008244:	6879      	ldr	r1, [r7, #4]
 8008246:	4613      	mov	r3, r2
 8008248:	011b      	lsls	r3, r3, #4
 800824a:	1a9b      	subs	r3, r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	440b      	add	r3, r1
 8008250:	3326      	adds	r3, #38	@ 0x26
 8008252:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8008254:	2b01      	cmp	r3, #1
 8008256:	d127      	bne.n	80082a8 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008258:	78fb      	ldrb	r3, [r7, #3]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	4413      	add	r3, r2
 8008260:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	78fa      	ldrb	r2, [r7, #3]
 8008268:	0151      	lsls	r1, r2, #5
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	440a      	add	r2, r1
 800826e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008272:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008276:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008278:	78fa      	ldrb	r2, [r7, #3]
 800827a:	6879      	ldr	r1, [r7, #4]
 800827c:	4613      	mov	r3, r2
 800827e:	011b      	lsls	r3, r3, #4
 8008280:	1a9b      	subs	r3, r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	440b      	add	r3, r1
 8008286:	334c      	adds	r3, #76	@ 0x4c
 8008288:	2201      	movs	r2, #1
 800828a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800828c:	78fa      	ldrb	r2, [r7, #3]
 800828e:	6879      	ldr	r1, [r7, #4]
 8008290:	4613      	mov	r3, r2
 8008292:	011b      	lsls	r3, r3, #4
 8008294:	1a9b      	subs	r3, r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	440b      	add	r3, r1
 800829a:	334c      	adds	r3, #76	@ 0x4c
 800829c:	781a      	ldrb	r2, [r3, #0]
 800829e:	78fb      	ldrb	r3, [r7, #3]
 80082a0:	4619      	mov	r1, r3
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f00e fbc8 	bl	8016a38 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	799b      	ldrb	r3, [r3, #6]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d13b      	bne.n	8008328 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80082b0:	78fa      	ldrb	r2, [r7, #3]
 80082b2:	6879      	ldr	r1, [r7, #4]
 80082b4:	4613      	mov	r3, r2
 80082b6:	011b      	lsls	r3, r3, #4
 80082b8:	1a9b      	subs	r3, r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	440b      	add	r3, r1
 80082be:	3338      	adds	r3, #56	@ 0x38
 80082c0:	6819      	ldr	r1, [r3, #0]
 80082c2:	78fa      	ldrb	r2, [r7, #3]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	4613      	mov	r3, r2
 80082c8:	011b      	lsls	r3, r3, #4
 80082ca:	1a9b      	subs	r3, r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4403      	add	r3, r0
 80082d0:	3328      	adds	r3, #40	@ 0x28
 80082d2:	881b      	ldrh	r3, [r3, #0]
 80082d4:	440b      	add	r3, r1
 80082d6:	1e59      	subs	r1, r3, #1
 80082d8:	78fa      	ldrb	r2, [r7, #3]
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	4613      	mov	r3, r2
 80082de:	011b      	lsls	r3, r3, #4
 80082e0:	1a9b      	subs	r3, r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4403      	add	r3, r0
 80082e6:	3328      	adds	r3, #40	@ 0x28
 80082e8:	881b      	ldrh	r3, [r3, #0]
 80082ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80082ee:	f003 0301 	and.w	r3, r3, #1
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f000 8470 	beq.w	8008bd8 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80082f8:	78fa      	ldrb	r2, [r7, #3]
 80082fa:	6879      	ldr	r1, [r7, #4]
 80082fc:	4613      	mov	r3, r2
 80082fe:	011b      	lsls	r3, r3, #4
 8008300:	1a9b      	subs	r3, r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	440b      	add	r3, r1
 8008306:	333c      	adds	r3, #60	@ 0x3c
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	78fa      	ldrb	r2, [r7, #3]
 800830c:	f083 0301 	eor.w	r3, r3, #1
 8008310:	b2d8      	uxtb	r0, r3
 8008312:	6879      	ldr	r1, [r7, #4]
 8008314:	4613      	mov	r3, r2
 8008316:	011b      	lsls	r3, r3, #4
 8008318:	1a9b      	subs	r3, r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	440b      	add	r3, r1
 800831e:	333c      	adds	r3, #60	@ 0x3c
 8008320:	4602      	mov	r2, r0
 8008322:	701a      	strb	r2, [r3, #0]
 8008324:	f000 bc58 	b.w	8008bd8 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8008328:	78fa      	ldrb	r2, [r7, #3]
 800832a:	6879      	ldr	r1, [r7, #4]
 800832c:	4613      	mov	r3, r2
 800832e:	011b      	lsls	r3, r3, #4
 8008330:	1a9b      	subs	r3, r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	440b      	add	r3, r1
 8008336:	333c      	adds	r3, #60	@ 0x3c
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	78fa      	ldrb	r2, [r7, #3]
 800833c:	f083 0301 	eor.w	r3, r3, #1
 8008340:	b2d8      	uxtb	r0, r3
 8008342:	6879      	ldr	r1, [r7, #4]
 8008344:	4613      	mov	r3, r2
 8008346:	011b      	lsls	r3, r3, #4
 8008348:	1a9b      	subs	r3, r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	440b      	add	r3, r1
 800834e:	333c      	adds	r3, #60	@ 0x3c
 8008350:	4602      	mov	r2, r0
 8008352:	701a      	strb	r2, [r3, #0]
 8008354:	f000 bc40 	b.w	8008bd8 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	78fa      	ldrb	r2, [r7, #3]
 800835e:	4611      	mov	r1, r2
 8008360:	4618      	mov	r0, r3
 8008362:	f008 fb9c 	bl	8010a9e <USB_ReadChInterrupts>
 8008366:	4603      	mov	r3, r0
 8008368:	f003 0320 	and.w	r3, r3, #32
 800836c:	2b20      	cmp	r3, #32
 800836e:	d131      	bne.n	80083d4 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008370:	78fb      	ldrb	r3, [r7, #3]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	4413      	add	r3, r2
 8008378:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800837c:	461a      	mov	r2, r3
 800837e:	2320      	movs	r3, #32
 8008380:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8008382:	78fa      	ldrb	r2, [r7, #3]
 8008384:	6879      	ldr	r1, [r7, #4]
 8008386:	4613      	mov	r3, r2
 8008388:	011b      	lsls	r3, r3, #4
 800838a:	1a9b      	subs	r3, r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	440b      	add	r3, r1
 8008390:	331a      	adds	r3, #26
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	2b01      	cmp	r3, #1
 8008396:	f040 841f 	bne.w	8008bd8 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800839a:	78fa      	ldrb	r2, [r7, #3]
 800839c:	6879      	ldr	r1, [r7, #4]
 800839e:	4613      	mov	r3, r2
 80083a0:	011b      	lsls	r3, r3, #4
 80083a2:	1a9b      	subs	r3, r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	440b      	add	r3, r1
 80083a8:	331b      	adds	r3, #27
 80083aa:	2201      	movs	r2, #1
 80083ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80083ae:	78fa      	ldrb	r2, [r7, #3]
 80083b0:	6879      	ldr	r1, [r7, #4]
 80083b2:	4613      	mov	r3, r2
 80083b4:	011b      	lsls	r3, r3, #4
 80083b6:	1a9b      	subs	r3, r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	440b      	add	r3, r1
 80083bc:	334d      	adds	r3, #77	@ 0x4d
 80083be:	2203      	movs	r2, #3
 80083c0:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	78fa      	ldrb	r2, [r7, #3]
 80083c8:	4611      	mov	r1, r2
 80083ca:	4618      	mov	r0, r3
 80083cc:	f008 fbe4 	bl	8010b98 <USB_HC_Halt>
 80083d0:	f000 bc02 	b.w	8008bd8 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	78fa      	ldrb	r2, [r7, #3]
 80083da:	4611      	mov	r1, r2
 80083dc:	4618      	mov	r0, r3
 80083de:	f008 fb5e 	bl	8010a9e <USB_ReadChInterrupts>
 80083e2:	4603      	mov	r3, r0
 80083e4:	f003 0302 	and.w	r3, r3, #2
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	f040 8305 	bne.w	80089f8 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80083ee:	78fb      	ldrb	r3, [r7, #3]
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083fa:	461a      	mov	r2, r3
 80083fc:	2302      	movs	r3, #2
 80083fe:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8008400:	78fa      	ldrb	r2, [r7, #3]
 8008402:	6879      	ldr	r1, [r7, #4]
 8008404:	4613      	mov	r3, r2
 8008406:	011b      	lsls	r3, r3, #4
 8008408:	1a9b      	subs	r3, r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	440b      	add	r3, r1
 800840e:	334d      	adds	r3, #77	@ 0x4d
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d114      	bne.n	8008440 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008416:	78fa      	ldrb	r2, [r7, #3]
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	4613      	mov	r3, r2
 800841c:	011b      	lsls	r3, r3, #4
 800841e:	1a9b      	subs	r3, r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	440b      	add	r3, r1
 8008424:	334d      	adds	r3, #77	@ 0x4d
 8008426:	2202      	movs	r2, #2
 8008428:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800842a:	78fa      	ldrb	r2, [r7, #3]
 800842c:	6879      	ldr	r1, [r7, #4]
 800842e:	4613      	mov	r3, r2
 8008430:	011b      	lsls	r3, r3, #4
 8008432:	1a9b      	subs	r3, r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	440b      	add	r3, r1
 8008438:	334c      	adds	r3, #76	@ 0x4c
 800843a:	2201      	movs	r2, #1
 800843c:	701a      	strb	r2, [r3, #0]
 800843e:	e2cc      	b.n	80089da <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8008440:	78fa      	ldrb	r2, [r7, #3]
 8008442:	6879      	ldr	r1, [r7, #4]
 8008444:	4613      	mov	r3, r2
 8008446:	011b      	lsls	r3, r3, #4
 8008448:	1a9b      	subs	r3, r3, r2
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	440b      	add	r3, r1
 800844e:	334d      	adds	r3, #77	@ 0x4d
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	2b06      	cmp	r3, #6
 8008454:	d114      	bne.n	8008480 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008456:	78fa      	ldrb	r2, [r7, #3]
 8008458:	6879      	ldr	r1, [r7, #4]
 800845a:	4613      	mov	r3, r2
 800845c:	011b      	lsls	r3, r3, #4
 800845e:	1a9b      	subs	r3, r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	440b      	add	r3, r1
 8008464:	334d      	adds	r3, #77	@ 0x4d
 8008466:	2202      	movs	r2, #2
 8008468:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800846a:	78fa      	ldrb	r2, [r7, #3]
 800846c:	6879      	ldr	r1, [r7, #4]
 800846e:	4613      	mov	r3, r2
 8008470:	011b      	lsls	r3, r3, #4
 8008472:	1a9b      	subs	r3, r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	440b      	add	r3, r1
 8008478:	334c      	adds	r3, #76	@ 0x4c
 800847a:	2205      	movs	r2, #5
 800847c:	701a      	strb	r2, [r3, #0]
 800847e:	e2ac      	b.n	80089da <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008480:	78fa      	ldrb	r2, [r7, #3]
 8008482:	6879      	ldr	r1, [r7, #4]
 8008484:	4613      	mov	r3, r2
 8008486:	011b      	lsls	r3, r3, #4
 8008488:	1a9b      	subs	r3, r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	440b      	add	r3, r1
 800848e:	334d      	adds	r3, #77	@ 0x4d
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	2b07      	cmp	r3, #7
 8008494:	d00b      	beq.n	80084ae <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8008496:	78fa      	ldrb	r2, [r7, #3]
 8008498:	6879      	ldr	r1, [r7, #4]
 800849a:	4613      	mov	r3, r2
 800849c:	011b      	lsls	r3, r3, #4
 800849e:	1a9b      	subs	r3, r3, r2
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	440b      	add	r3, r1
 80084a4:	334d      	adds	r3, #77	@ 0x4d
 80084a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80084a8:	2b09      	cmp	r3, #9
 80084aa:	f040 80a6 	bne.w	80085fa <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80084ae:	78fa      	ldrb	r2, [r7, #3]
 80084b0:	6879      	ldr	r1, [r7, #4]
 80084b2:	4613      	mov	r3, r2
 80084b4:	011b      	lsls	r3, r3, #4
 80084b6:	1a9b      	subs	r3, r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	440b      	add	r3, r1
 80084bc:	334d      	adds	r3, #77	@ 0x4d
 80084be:	2202      	movs	r2, #2
 80084c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80084c2:	78fa      	ldrb	r2, [r7, #3]
 80084c4:	6879      	ldr	r1, [r7, #4]
 80084c6:	4613      	mov	r3, r2
 80084c8:	011b      	lsls	r3, r3, #4
 80084ca:	1a9b      	subs	r3, r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	440b      	add	r3, r1
 80084d0:	3344      	adds	r3, #68	@ 0x44
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	1c59      	adds	r1, r3, #1
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	4613      	mov	r3, r2
 80084da:	011b      	lsls	r3, r3, #4
 80084dc:	1a9b      	subs	r3, r3, r2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4403      	add	r3, r0
 80084e2:	3344      	adds	r3, #68	@ 0x44
 80084e4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80084e6:	78fa      	ldrb	r2, [r7, #3]
 80084e8:	6879      	ldr	r1, [r7, #4]
 80084ea:	4613      	mov	r3, r2
 80084ec:	011b      	lsls	r3, r3, #4
 80084ee:	1a9b      	subs	r3, r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	440b      	add	r3, r1
 80084f4:	3344      	adds	r3, #68	@ 0x44
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d943      	bls.n	8008584 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80084fc:	78fa      	ldrb	r2, [r7, #3]
 80084fe:	6879      	ldr	r1, [r7, #4]
 8008500:	4613      	mov	r3, r2
 8008502:	011b      	lsls	r3, r3, #4
 8008504:	1a9b      	subs	r3, r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	440b      	add	r3, r1
 800850a:	3344      	adds	r3, #68	@ 0x44
 800850c:	2200      	movs	r2, #0
 800850e:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8008510:	78fa      	ldrb	r2, [r7, #3]
 8008512:	6879      	ldr	r1, [r7, #4]
 8008514:	4613      	mov	r3, r2
 8008516:	011b      	lsls	r3, r3, #4
 8008518:	1a9b      	subs	r3, r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	440b      	add	r3, r1
 800851e:	331a      	adds	r3, #26
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d123      	bne.n	800856e <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8008526:	78fa      	ldrb	r2, [r7, #3]
 8008528:	6879      	ldr	r1, [r7, #4]
 800852a:	4613      	mov	r3, r2
 800852c:	011b      	lsls	r3, r3, #4
 800852e:	1a9b      	subs	r3, r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	440b      	add	r3, r1
 8008534:	331b      	adds	r3, #27
 8008536:	2200      	movs	r2, #0
 8008538:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800853a:	78fa      	ldrb	r2, [r7, #3]
 800853c:	6879      	ldr	r1, [r7, #4]
 800853e:	4613      	mov	r3, r2
 8008540:	011b      	lsls	r3, r3, #4
 8008542:	1a9b      	subs	r3, r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	440b      	add	r3, r1
 8008548:	331c      	adds	r3, #28
 800854a:	2200      	movs	r2, #0
 800854c:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800854e:	78fb      	ldrb	r3, [r7, #3]
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	4413      	add	r3, r2
 8008556:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	78fa      	ldrb	r2, [r7, #3]
 800855e:	0151      	lsls	r1, r2, #5
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	440a      	add	r2, r1
 8008564:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008568:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800856c:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800856e:	78fa      	ldrb	r2, [r7, #3]
 8008570:	6879      	ldr	r1, [r7, #4]
 8008572:	4613      	mov	r3, r2
 8008574:	011b      	lsls	r3, r3, #4
 8008576:	1a9b      	subs	r3, r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	440b      	add	r3, r1
 800857c:	334c      	adds	r3, #76	@ 0x4c
 800857e:	2204      	movs	r2, #4
 8008580:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008582:	e229      	b.n	80089d8 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008584:	78fa      	ldrb	r2, [r7, #3]
 8008586:	6879      	ldr	r1, [r7, #4]
 8008588:	4613      	mov	r3, r2
 800858a:	011b      	lsls	r3, r3, #4
 800858c:	1a9b      	subs	r3, r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	440b      	add	r3, r1
 8008592:	334c      	adds	r3, #76	@ 0x4c
 8008594:	2202      	movs	r2, #2
 8008596:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008598:	78fa      	ldrb	r2, [r7, #3]
 800859a:	6879      	ldr	r1, [r7, #4]
 800859c:	4613      	mov	r3, r2
 800859e:	011b      	lsls	r3, r3, #4
 80085a0:	1a9b      	subs	r3, r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	440b      	add	r3, r1
 80085a6:	3326      	adds	r3, #38	@ 0x26
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00b      	beq.n	80085c6 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80085ae:	78fa      	ldrb	r2, [r7, #3]
 80085b0:	6879      	ldr	r1, [r7, #4]
 80085b2:	4613      	mov	r3, r2
 80085b4:	011b      	lsls	r3, r3, #4
 80085b6:	1a9b      	subs	r3, r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	440b      	add	r3, r1
 80085bc:	3326      	adds	r3, #38	@ 0x26
 80085be:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	f040 8209 	bne.w	80089d8 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80085c6:	78fb      	ldrb	r3, [r7, #3]
 80085c8:	015a      	lsls	r2, r3, #5
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80085dc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80085e4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80085e6:	78fb      	ldrb	r3, [r7, #3]
 80085e8:	015a      	lsls	r2, r3, #5
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	4413      	add	r3, r2
 80085ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085f2:	461a      	mov	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80085f8:	e1ee      	b.n	80089d8 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80085fa:	78fa      	ldrb	r2, [r7, #3]
 80085fc:	6879      	ldr	r1, [r7, #4]
 80085fe:	4613      	mov	r3, r2
 8008600:	011b      	lsls	r3, r3, #4
 8008602:	1a9b      	subs	r3, r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	440b      	add	r3, r1
 8008608:	334d      	adds	r3, #77	@ 0x4d
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	2b05      	cmp	r3, #5
 800860e:	f040 80c8 	bne.w	80087a2 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008612:	78fa      	ldrb	r2, [r7, #3]
 8008614:	6879      	ldr	r1, [r7, #4]
 8008616:	4613      	mov	r3, r2
 8008618:	011b      	lsls	r3, r3, #4
 800861a:	1a9b      	subs	r3, r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	440b      	add	r3, r1
 8008620:	334d      	adds	r3, #77	@ 0x4d
 8008622:	2202      	movs	r2, #2
 8008624:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008626:	78fa      	ldrb	r2, [r7, #3]
 8008628:	6879      	ldr	r1, [r7, #4]
 800862a:	4613      	mov	r3, r2
 800862c:	011b      	lsls	r3, r3, #4
 800862e:	1a9b      	subs	r3, r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	440b      	add	r3, r1
 8008634:	331b      	adds	r3, #27
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	2b01      	cmp	r3, #1
 800863a:	f040 81ce 	bne.w	80089da <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800863e:	78fa      	ldrb	r2, [r7, #3]
 8008640:	6879      	ldr	r1, [r7, #4]
 8008642:	4613      	mov	r3, r2
 8008644:	011b      	lsls	r3, r3, #4
 8008646:	1a9b      	subs	r3, r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	440b      	add	r3, r1
 800864c:	3326      	adds	r3, #38	@ 0x26
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	2b03      	cmp	r3, #3
 8008652:	d16b      	bne.n	800872c <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8008654:	78fa      	ldrb	r2, [r7, #3]
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	4613      	mov	r3, r2
 800865a:	011b      	lsls	r3, r3, #4
 800865c:	1a9b      	subs	r3, r3, r2
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	440b      	add	r3, r1
 8008662:	3348      	adds	r3, #72	@ 0x48
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	1c59      	adds	r1, r3, #1
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	4613      	mov	r3, r2
 800866c:	011b      	lsls	r3, r3, #4
 800866e:	1a9b      	subs	r3, r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4403      	add	r3, r0
 8008674:	3348      	adds	r3, #72	@ 0x48
 8008676:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8008678:	78fa      	ldrb	r2, [r7, #3]
 800867a:	6879      	ldr	r1, [r7, #4]
 800867c:	4613      	mov	r3, r2
 800867e:	011b      	lsls	r3, r3, #4
 8008680:	1a9b      	subs	r3, r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	440b      	add	r3, r1
 8008686:	3348      	adds	r3, #72	@ 0x48
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b02      	cmp	r3, #2
 800868c:	d943      	bls.n	8008716 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800868e:	78fa      	ldrb	r2, [r7, #3]
 8008690:	6879      	ldr	r1, [r7, #4]
 8008692:	4613      	mov	r3, r2
 8008694:	011b      	lsls	r3, r3, #4
 8008696:	1a9b      	subs	r3, r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	440b      	add	r3, r1
 800869c:	3348      	adds	r3, #72	@ 0x48
 800869e:	2200      	movs	r2, #0
 80086a0:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80086a2:	78fa      	ldrb	r2, [r7, #3]
 80086a4:	6879      	ldr	r1, [r7, #4]
 80086a6:	4613      	mov	r3, r2
 80086a8:	011b      	lsls	r3, r3, #4
 80086aa:	1a9b      	subs	r3, r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	440b      	add	r3, r1
 80086b0:	331b      	adds	r3, #27
 80086b2:	2200      	movs	r2, #0
 80086b4:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80086b6:	78fa      	ldrb	r2, [r7, #3]
 80086b8:	6879      	ldr	r1, [r7, #4]
 80086ba:	4613      	mov	r3, r2
 80086bc:	011b      	lsls	r3, r3, #4
 80086be:	1a9b      	subs	r3, r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	440b      	add	r3, r1
 80086c4:	3344      	adds	r3, #68	@ 0x44
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d809      	bhi.n	80086e0 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80086cc:	78fa      	ldrb	r2, [r7, #3]
 80086ce:	6879      	ldr	r1, [r7, #4]
 80086d0:	4613      	mov	r3, r2
 80086d2:	011b      	lsls	r3, r3, #4
 80086d4:	1a9b      	subs	r3, r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	440b      	add	r3, r1
 80086da:	331c      	adds	r3, #28
 80086dc:	2201      	movs	r2, #1
 80086de:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80086e0:	78fb      	ldrb	r3, [r7, #3]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	78fa      	ldrb	r2, [r7, #3]
 80086f0:	0151      	lsls	r1, r2, #5
 80086f2:	693a      	ldr	r2, [r7, #16]
 80086f4:	440a      	add	r2, r1
 80086f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086fe:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8008700:	78fa      	ldrb	r2, [r7, #3]
 8008702:	6879      	ldr	r1, [r7, #4]
 8008704:	4613      	mov	r3, r2
 8008706:	011b      	lsls	r3, r3, #4
 8008708:	1a9b      	subs	r3, r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	440b      	add	r3, r1
 800870e:	334c      	adds	r3, #76	@ 0x4c
 8008710:	2204      	movs	r2, #4
 8008712:	701a      	strb	r2, [r3, #0]
 8008714:	e014      	b.n	8008740 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008716:	78fa      	ldrb	r2, [r7, #3]
 8008718:	6879      	ldr	r1, [r7, #4]
 800871a:	4613      	mov	r3, r2
 800871c:	011b      	lsls	r3, r3, #4
 800871e:	1a9b      	subs	r3, r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	440b      	add	r3, r1
 8008724:	334c      	adds	r3, #76	@ 0x4c
 8008726:	2202      	movs	r2, #2
 8008728:	701a      	strb	r2, [r3, #0]
 800872a:	e009      	b.n	8008740 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800872c:	78fa      	ldrb	r2, [r7, #3]
 800872e:	6879      	ldr	r1, [r7, #4]
 8008730:	4613      	mov	r3, r2
 8008732:	011b      	lsls	r3, r3, #4
 8008734:	1a9b      	subs	r3, r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	440b      	add	r3, r1
 800873a:	334c      	adds	r3, #76	@ 0x4c
 800873c:	2202      	movs	r2, #2
 800873e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008740:	78fa      	ldrb	r2, [r7, #3]
 8008742:	6879      	ldr	r1, [r7, #4]
 8008744:	4613      	mov	r3, r2
 8008746:	011b      	lsls	r3, r3, #4
 8008748:	1a9b      	subs	r3, r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	440b      	add	r3, r1
 800874e:	3326      	adds	r3, #38	@ 0x26
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00b      	beq.n	800876e <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008756:	78fa      	ldrb	r2, [r7, #3]
 8008758:	6879      	ldr	r1, [r7, #4]
 800875a:	4613      	mov	r3, r2
 800875c:	011b      	lsls	r3, r3, #4
 800875e:	1a9b      	subs	r3, r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	440b      	add	r3, r1
 8008764:	3326      	adds	r3, #38	@ 0x26
 8008766:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008768:	2b02      	cmp	r3, #2
 800876a:	f040 8136 	bne.w	80089da <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800876e:	78fb      	ldrb	r3, [r7, #3]
 8008770:	015a      	lsls	r2, r3, #5
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	4413      	add	r3, r2
 8008776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008784:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800878c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800878e:	78fb      	ldrb	r3, [r7, #3]
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	4413      	add	r3, r2
 8008796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800879a:	461a      	mov	r2, r3
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6013      	str	r3, [r2, #0]
 80087a0:	e11b      	b.n	80089da <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80087a2:	78fa      	ldrb	r2, [r7, #3]
 80087a4:	6879      	ldr	r1, [r7, #4]
 80087a6:	4613      	mov	r3, r2
 80087a8:	011b      	lsls	r3, r3, #4
 80087aa:	1a9b      	subs	r3, r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	440b      	add	r3, r1
 80087b0:	334d      	adds	r3, #77	@ 0x4d
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	2b03      	cmp	r3, #3
 80087b6:	f040 8081 	bne.w	80088bc <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80087ba:	78fa      	ldrb	r2, [r7, #3]
 80087bc:	6879      	ldr	r1, [r7, #4]
 80087be:	4613      	mov	r3, r2
 80087c0:	011b      	lsls	r3, r3, #4
 80087c2:	1a9b      	subs	r3, r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	440b      	add	r3, r1
 80087c8:	334d      	adds	r3, #77	@ 0x4d
 80087ca:	2202      	movs	r2, #2
 80087cc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80087ce:	78fa      	ldrb	r2, [r7, #3]
 80087d0:	6879      	ldr	r1, [r7, #4]
 80087d2:	4613      	mov	r3, r2
 80087d4:	011b      	lsls	r3, r3, #4
 80087d6:	1a9b      	subs	r3, r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	440b      	add	r3, r1
 80087dc:	331b      	adds	r3, #27
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	f040 80fa 	bne.w	80089da <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80087e6:	78fa      	ldrb	r2, [r7, #3]
 80087e8:	6879      	ldr	r1, [r7, #4]
 80087ea:	4613      	mov	r3, r2
 80087ec:	011b      	lsls	r3, r3, #4
 80087ee:	1a9b      	subs	r3, r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	440b      	add	r3, r1
 80087f4:	334c      	adds	r3, #76	@ 0x4c
 80087f6:	2202      	movs	r2, #2
 80087f8:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80087fa:	78fb      	ldrb	r3, [r7, #3]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	4413      	add	r3, r2
 8008802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	78fa      	ldrb	r2, [r7, #3]
 800880a:	0151      	lsls	r1, r2, #5
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	440a      	add	r2, r1
 8008810:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008818:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800881a:	78fb      	ldrb	r3, [r7, #3]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	4413      	add	r3, r2
 8008822:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	78fa      	ldrb	r2, [r7, #3]
 800882a:	0151      	lsls	r1, r2, #5
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	440a      	add	r2, r1
 8008830:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008838:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800883a:	78fb      	ldrb	r3, [r7, #3]
 800883c:	015a      	lsls	r2, r3, #5
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	4413      	add	r3, r2
 8008842:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	78fa      	ldrb	r2, [r7, #3]
 800884a:	0151      	lsls	r1, r2, #5
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	440a      	add	r2, r1
 8008850:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008854:	f023 0320 	bic.w	r3, r3, #32
 8008858:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800885a:	78fa      	ldrb	r2, [r7, #3]
 800885c:	6879      	ldr	r1, [r7, #4]
 800885e:	4613      	mov	r3, r2
 8008860:	011b      	lsls	r3, r3, #4
 8008862:	1a9b      	subs	r3, r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	440b      	add	r3, r1
 8008868:	3326      	adds	r3, #38	@ 0x26
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00b      	beq.n	8008888 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008870:	78fa      	ldrb	r2, [r7, #3]
 8008872:	6879      	ldr	r1, [r7, #4]
 8008874:	4613      	mov	r3, r2
 8008876:	011b      	lsls	r3, r3, #4
 8008878:	1a9b      	subs	r3, r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	440b      	add	r3, r1
 800887e:	3326      	adds	r3, #38	@ 0x26
 8008880:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008882:	2b02      	cmp	r3, #2
 8008884:	f040 80a9 	bne.w	80089da <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8008888:	78fb      	ldrb	r3, [r7, #3]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	4413      	add	r3, r2
 8008890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800889e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80088a6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80088a8:	78fb      	ldrb	r3, [r7, #3]
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088b4:	461a      	mov	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6013      	str	r3, [r2, #0]
 80088ba:	e08e      	b.n	80089da <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80088bc:	78fa      	ldrb	r2, [r7, #3]
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	4613      	mov	r3, r2
 80088c2:	011b      	lsls	r3, r3, #4
 80088c4:	1a9b      	subs	r3, r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	440b      	add	r3, r1
 80088ca:	334d      	adds	r3, #77	@ 0x4d
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	2b04      	cmp	r3, #4
 80088d0:	d143      	bne.n	800895a <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80088d2:	78fa      	ldrb	r2, [r7, #3]
 80088d4:	6879      	ldr	r1, [r7, #4]
 80088d6:	4613      	mov	r3, r2
 80088d8:	011b      	lsls	r3, r3, #4
 80088da:	1a9b      	subs	r3, r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	440b      	add	r3, r1
 80088e0:	334d      	adds	r3, #77	@ 0x4d
 80088e2:	2202      	movs	r2, #2
 80088e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80088e6:	78fa      	ldrb	r2, [r7, #3]
 80088e8:	6879      	ldr	r1, [r7, #4]
 80088ea:	4613      	mov	r3, r2
 80088ec:	011b      	lsls	r3, r3, #4
 80088ee:	1a9b      	subs	r3, r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	440b      	add	r3, r1
 80088f4:	334c      	adds	r3, #76	@ 0x4c
 80088f6:	2202      	movs	r2, #2
 80088f8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80088fa:	78fa      	ldrb	r2, [r7, #3]
 80088fc:	6879      	ldr	r1, [r7, #4]
 80088fe:	4613      	mov	r3, r2
 8008900:	011b      	lsls	r3, r3, #4
 8008902:	1a9b      	subs	r3, r3, r2
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	440b      	add	r3, r1
 8008908:	3326      	adds	r3, #38	@ 0x26
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00a      	beq.n	8008926 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008910:	78fa      	ldrb	r2, [r7, #3]
 8008912:	6879      	ldr	r1, [r7, #4]
 8008914:	4613      	mov	r3, r2
 8008916:	011b      	lsls	r3, r3, #4
 8008918:	1a9b      	subs	r3, r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	440b      	add	r3, r1
 800891e:	3326      	adds	r3, #38	@ 0x26
 8008920:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008922:	2b02      	cmp	r3, #2
 8008924:	d159      	bne.n	80089da <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008926:	78fb      	ldrb	r3, [r7, #3]
 8008928:	015a      	lsls	r2, r3, #5
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	4413      	add	r3, r2
 800892e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800893c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008944:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008946:	78fb      	ldrb	r3, [r7, #3]
 8008948:	015a      	lsls	r2, r3, #5
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	4413      	add	r3, r2
 800894e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008952:	461a      	mov	r2, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6013      	str	r3, [r2, #0]
 8008958:	e03f      	b.n	80089da <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800895a:	78fa      	ldrb	r2, [r7, #3]
 800895c:	6879      	ldr	r1, [r7, #4]
 800895e:	4613      	mov	r3, r2
 8008960:	011b      	lsls	r3, r3, #4
 8008962:	1a9b      	subs	r3, r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	440b      	add	r3, r1
 8008968:	334d      	adds	r3, #77	@ 0x4d
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	2b08      	cmp	r3, #8
 800896e:	d126      	bne.n	80089be <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008970:	78fa      	ldrb	r2, [r7, #3]
 8008972:	6879      	ldr	r1, [r7, #4]
 8008974:	4613      	mov	r3, r2
 8008976:	011b      	lsls	r3, r3, #4
 8008978:	1a9b      	subs	r3, r3, r2
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	440b      	add	r3, r1
 800897e:	334d      	adds	r3, #77	@ 0x4d
 8008980:	2202      	movs	r2, #2
 8008982:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8008984:	78fa      	ldrb	r2, [r7, #3]
 8008986:	6879      	ldr	r1, [r7, #4]
 8008988:	4613      	mov	r3, r2
 800898a:	011b      	lsls	r3, r3, #4
 800898c:	1a9b      	subs	r3, r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	440b      	add	r3, r1
 8008992:	3344      	adds	r3, #68	@ 0x44
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	1c59      	adds	r1, r3, #1
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	4613      	mov	r3, r2
 800899c:	011b      	lsls	r3, r3, #4
 800899e:	1a9b      	subs	r3, r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4403      	add	r3, r0
 80089a4:	3344      	adds	r3, #68	@ 0x44
 80089a6:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80089a8:	78fa      	ldrb	r2, [r7, #3]
 80089aa:	6879      	ldr	r1, [r7, #4]
 80089ac:	4613      	mov	r3, r2
 80089ae:	011b      	lsls	r3, r3, #4
 80089b0:	1a9b      	subs	r3, r3, r2
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	440b      	add	r3, r1
 80089b6:	334c      	adds	r3, #76	@ 0x4c
 80089b8:	2204      	movs	r2, #4
 80089ba:	701a      	strb	r2, [r3, #0]
 80089bc:	e00d      	b.n	80089da <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80089be:	78fa      	ldrb	r2, [r7, #3]
 80089c0:	6879      	ldr	r1, [r7, #4]
 80089c2:	4613      	mov	r3, r2
 80089c4:	011b      	lsls	r3, r3, #4
 80089c6:	1a9b      	subs	r3, r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	440b      	add	r3, r1
 80089cc:	334d      	adds	r3, #77	@ 0x4d
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	f000 8100 	beq.w	8008bd6 <HCD_HC_IN_IRQHandler+0xcca>
 80089d6:	e000      	b.n	80089da <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80089d8:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80089da:	78fa      	ldrb	r2, [r7, #3]
 80089dc:	6879      	ldr	r1, [r7, #4]
 80089de:	4613      	mov	r3, r2
 80089e0:	011b      	lsls	r3, r3, #4
 80089e2:	1a9b      	subs	r3, r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	440b      	add	r3, r1
 80089e8:	334c      	adds	r3, #76	@ 0x4c
 80089ea:	781a      	ldrb	r2, [r3, #0]
 80089ec:	78fb      	ldrb	r3, [r7, #3]
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f00e f821 	bl	8016a38 <HAL_HCD_HC_NotifyURBChange_Callback>
 80089f6:	e0ef      	b.n	8008bd8 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	78fa      	ldrb	r2, [r7, #3]
 80089fe:	4611      	mov	r1, r2
 8008a00:	4618      	mov	r0, r3
 8008a02:	f008 f84c 	bl	8010a9e <USB_ReadChInterrupts>
 8008a06:	4603      	mov	r3, r0
 8008a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a0c:	2b40      	cmp	r3, #64	@ 0x40
 8008a0e:	d12f      	bne.n	8008a70 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008a10:	78fb      	ldrb	r3, [r7, #3]
 8008a12:	015a      	lsls	r2, r3, #5
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	4413      	add	r3, r2
 8008a18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	2340      	movs	r3, #64	@ 0x40
 8008a20:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8008a22:	78fa      	ldrb	r2, [r7, #3]
 8008a24:	6879      	ldr	r1, [r7, #4]
 8008a26:	4613      	mov	r3, r2
 8008a28:	011b      	lsls	r3, r3, #4
 8008a2a:	1a9b      	subs	r3, r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	440b      	add	r3, r1
 8008a30:	334d      	adds	r3, #77	@ 0x4d
 8008a32:	2205      	movs	r2, #5
 8008a34:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8008a36:	78fa      	ldrb	r2, [r7, #3]
 8008a38:	6879      	ldr	r1, [r7, #4]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	011b      	lsls	r3, r3, #4
 8008a3e:	1a9b      	subs	r3, r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	440b      	add	r3, r1
 8008a44:	331a      	adds	r3, #26
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d109      	bne.n	8008a60 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008a4c:	78fa      	ldrb	r2, [r7, #3]
 8008a4e:	6879      	ldr	r1, [r7, #4]
 8008a50:	4613      	mov	r3, r2
 8008a52:	011b      	lsls	r3, r3, #4
 8008a54:	1a9b      	subs	r3, r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	440b      	add	r3, r1
 8008a5a:	3344      	adds	r3, #68	@ 0x44
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	78fa      	ldrb	r2, [r7, #3]
 8008a66:	4611      	mov	r1, r2
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f008 f895 	bl	8010b98 <USB_HC_Halt>
 8008a6e:	e0b3      	b.n	8008bd8 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	78fa      	ldrb	r2, [r7, #3]
 8008a76:	4611      	mov	r1, r2
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f008 f810 	bl	8010a9e <USB_ReadChInterrupts>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	f003 0310 	and.w	r3, r3, #16
 8008a84:	2b10      	cmp	r3, #16
 8008a86:	f040 80a7 	bne.w	8008bd8 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008a8a:	78fa      	ldrb	r2, [r7, #3]
 8008a8c:	6879      	ldr	r1, [r7, #4]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	011b      	lsls	r3, r3, #4
 8008a92:	1a9b      	subs	r3, r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	440b      	add	r3, r1
 8008a98:	3326      	adds	r3, #38	@ 0x26
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	2b03      	cmp	r3, #3
 8008a9e:	d11b      	bne.n	8008ad8 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008aa0:	78fa      	ldrb	r2, [r7, #3]
 8008aa2:	6879      	ldr	r1, [r7, #4]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	011b      	lsls	r3, r3, #4
 8008aa8:	1a9b      	subs	r3, r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	440b      	add	r3, r1
 8008aae:	3344      	adds	r3, #68	@ 0x44
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8008ab4:	78fa      	ldrb	r2, [r7, #3]
 8008ab6:	6879      	ldr	r1, [r7, #4]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	011b      	lsls	r3, r3, #4
 8008abc:	1a9b      	subs	r3, r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	440b      	add	r3, r1
 8008ac2:	334d      	adds	r3, #77	@ 0x4d
 8008ac4:	2204      	movs	r2, #4
 8008ac6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	78fa      	ldrb	r2, [r7, #3]
 8008ace:	4611      	mov	r1, r2
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f008 f861 	bl	8010b98 <USB_HC_Halt>
 8008ad6:	e03f      	b.n	8008b58 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008ad8:	78fa      	ldrb	r2, [r7, #3]
 8008ada:	6879      	ldr	r1, [r7, #4]
 8008adc:	4613      	mov	r3, r2
 8008ade:	011b      	lsls	r3, r3, #4
 8008ae0:	1a9b      	subs	r3, r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	440b      	add	r3, r1
 8008ae6:	3326      	adds	r3, #38	@ 0x26
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00a      	beq.n	8008b04 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008aee:	78fa      	ldrb	r2, [r7, #3]
 8008af0:	6879      	ldr	r1, [r7, #4]
 8008af2:	4613      	mov	r3, r2
 8008af4:	011b      	lsls	r3, r3, #4
 8008af6:	1a9b      	subs	r3, r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	440b      	add	r3, r1
 8008afc:	3326      	adds	r3, #38	@ 0x26
 8008afe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d129      	bne.n	8008b58 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008b04:	78fa      	ldrb	r2, [r7, #3]
 8008b06:	6879      	ldr	r1, [r7, #4]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	011b      	lsls	r3, r3, #4
 8008b0c:	1a9b      	subs	r3, r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	440b      	add	r3, r1
 8008b12:	3344      	adds	r3, #68	@ 0x44
 8008b14:	2200      	movs	r2, #0
 8008b16:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	799b      	ldrb	r3, [r3, #6]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00a      	beq.n	8008b36 <HCD_HC_IN_IRQHandler+0xc2a>
 8008b20:	78fa      	ldrb	r2, [r7, #3]
 8008b22:	6879      	ldr	r1, [r7, #4]
 8008b24:	4613      	mov	r3, r2
 8008b26:	011b      	lsls	r3, r3, #4
 8008b28:	1a9b      	subs	r3, r3, r2
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	440b      	add	r3, r1
 8008b2e:	331b      	adds	r3, #27
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d110      	bne.n	8008b58 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8008b36:	78fa      	ldrb	r2, [r7, #3]
 8008b38:	6879      	ldr	r1, [r7, #4]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	011b      	lsls	r3, r3, #4
 8008b3e:	1a9b      	subs	r3, r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	440b      	add	r3, r1
 8008b44:	334d      	adds	r3, #77	@ 0x4d
 8008b46:	2204      	movs	r2, #4
 8008b48:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	78fa      	ldrb	r2, [r7, #3]
 8008b50:	4611      	mov	r1, r2
 8008b52:	4618      	mov	r0, r3
 8008b54:	f008 f820 	bl	8010b98 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8008b58:	78fa      	ldrb	r2, [r7, #3]
 8008b5a:	6879      	ldr	r1, [r7, #4]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	011b      	lsls	r3, r3, #4
 8008b60:	1a9b      	subs	r3, r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	440b      	add	r3, r1
 8008b66:	331b      	adds	r3, #27
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d129      	bne.n	8008bc2 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008b6e:	78fa      	ldrb	r2, [r7, #3]
 8008b70:	6879      	ldr	r1, [r7, #4]
 8008b72:	4613      	mov	r3, r2
 8008b74:	011b      	lsls	r3, r3, #4
 8008b76:	1a9b      	subs	r3, r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	440b      	add	r3, r1
 8008b7c:	331b      	adds	r3, #27
 8008b7e:	2200      	movs	r2, #0
 8008b80:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008b82:	78fb      	ldrb	r3, [r7, #3]
 8008b84:	015a      	lsls	r2, r3, #5
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	4413      	add	r3, r2
 8008b8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	78fa      	ldrb	r2, [r7, #3]
 8008b92:	0151      	lsls	r1, r2, #5
 8008b94:	693a      	ldr	r2, [r7, #16]
 8008b96:	440a      	add	r2, r1
 8008b98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ba0:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8008ba2:	78fb      	ldrb	r3, [r7, #3]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	78fa      	ldrb	r2, [r7, #3]
 8008bb2:	0151      	lsls	r1, r2, #5
 8008bb4:	693a      	ldr	r2, [r7, #16]
 8008bb6:	440a      	add	r2, r1
 8008bb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bbc:	f043 0320 	orr.w	r3, r3, #32
 8008bc0:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008bc2:	78fb      	ldrb	r3, [r7, #3]
 8008bc4:	015a      	lsls	r2, r3, #5
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	4413      	add	r3, r2
 8008bca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bce:	461a      	mov	r2, r3
 8008bd0:	2310      	movs	r3, #16
 8008bd2:	6093      	str	r3, [r2, #8]
 8008bd4:	e000      	b.n	8008bd8 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8008bd6:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8008bd8:	3718      	adds	r7, #24
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b086      	sub	sp, #24
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
 8008be6:	460b      	mov	r3, r1
 8008be8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	78fa      	ldrb	r2, [r7, #3]
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f007 ff4e 	bl	8010a9e <USB_ReadChInterrupts>
 8008c02:	4603      	mov	r3, r0
 8008c04:	f003 0304 	and.w	r3, r3, #4
 8008c08:	2b04      	cmp	r3, #4
 8008c0a:	d11b      	bne.n	8008c44 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8008c0c:	78fb      	ldrb	r3, [r7, #3]
 8008c0e:	015a      	lsls	r2, r3, #5
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	4413      	add	r3, r2
 8008c14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c18:	461a      	mov	r2, r3
 8008c1a:	2304      	movs	r3, #4
 8008c1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008c1e:	78fa      	ldrb	r2, [r7, #3]
 8008c20:	6879      	ldr	r1, [r7, #4]
 8008c22:	4613      	mov	r3, r2
 8008c24:	011b      	lsls	r3, r3, #4
 8008c26:	1a9b      	subs	r3, r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	440b      	add	r3, r1
 8008c2c:	334d      	adds	r3, #77	@ 0x4d
 8008c2e:	2207      	movs	r2, #7
 8008c30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	78fa      	ldrb	r2, [r7, #3]
 8008c38:	4611      	mov	r1, r2
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f007 ffac 	bl	8010b98 <USB_HC_Halt>
 8008c40:	f000 bc89 	b.w	8009556 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	78fa      	ldrb	r2, [r7, #3]
 8008c4a:	4611      	mov	r1, r2
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f007 ff26 	bl	8010a9e <USB_ReadChInterrupts>
 8008c52:	4603      	mov	r3, r0
 8008c54:	f003 0320 	and.w	r3, r3, #32
 8008c58:	2b20      	cmp	r3, #32
 8008c5a:	f040 8082 	bne.w	8008d62 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008c5e:	78fb      	ldrb	r3, [r7, #3]
 8008c60:	015a      	lsls	r2, r3, #5
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	4413      	add	r3, r2
 8008c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	2320      	movs	r3, #32
 8008c6e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8008c70:	78fa      	ldrb	r2, [r7, #3]
 8008c72:	6879      	ldr	r1, [r7, #4]
 8008c74:	4613      	mov	r3, r2
 8008c76:	011b      	lsls	r3, r3, #4
 8008c78:	1a9b      	subs	r3, r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	440b      	add	r3, r1
 8008c7e:	3319      	adds	r3, #25
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d124      	bne.n	8008cd0 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8008c86:	78fa      	ldrb	r2, [r7, #3]
 8008c88:	6879      	ldr	r1, [r7, #4]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	011b      	lsls	r3, r3, #4
 8008c8e:	1a9b      	subs	r3, r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	440b      	add	r3, r1
 8008c94:	3319      	adds	r3, #25
 8008c96:	2200      	movs	r2, #0
 8008c98:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008c9a:	78fa      	ldrb	r2, [r7, #3]
 8008c9c:	6879      	ldr	r1, [r7, #4]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	011b      	lsls	r3, r3, #4
 8008ca2:	1a9b      	subs	r3, r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	440b      	add	r3, r1
 8008ca8:	334c      	adds	r3, #76	@ 0x4c
 8008caa:	2202      	movs	r2, #2
 8008cac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8008cae:	78fa      	ldrb	r2, [r7, #3]
 8008cb0:	6879      	ldr	r1, [r7, #4]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	011b      	lsls	r3, r3, #4
 8008cb6:	1a9b      	subs	r3, r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	440b      	add	r3, r1
 8008cbc:	334d      	adds	r3, #77	@ 0x4d
 8008cbe:	2203      	movs	r2, #3
 8008cc0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	78fa      	ldrb	r2, [r7, #3]
 8008cc8:	4611      	mov	r1, r2
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f007 ff64 	bl	8010b98 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8008cd0:	78fa      	ldrb	r2, [r7, #3]
 8008cd2:	6879      	ldr	r1, [r7, #4]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	011b      	lsls	r3, r3, #4
 8008cd8:	1a9b      	subs	r3, r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	440b      	add	r3, r1
 8008cde:	331a      	adds	r3, #26
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	f040 8437 	bne.w	8009556 <HCD_HC_OUT_IRQHandler+0x978>
 8008ce8:	78fa      	ldrb	r2, [r7, #3]
 8008cea:	6879      	ldr	r1, [r7, #4]
 8008cec:	4613      	mov	r3, r2
 8008cee:	011b      	lsls	r3, r3, #4
 8008cf0:	1a9b      	subs	r3, r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	440b      	add	r3, r1
 8008cf6:	331b      	adds	r3, #27
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f040 842b 	bne.w	8009556 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8008d00:	78fa      	ldrb	r2, [r7, #3]
 8008d02:	6879      	ldr	r1, [r7, #4]
 8008d04:	4613      	mov	r3, r2
 8008d06:	011b      	lsls	r3, r3, #4
 8008d08:	1a9b      	subs	r3, r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	440b      	add	r3, r1
 8008d0e:	3326      	adds	r3, #38	@ 0x26
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d009      	beq.n	8008d2a <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8008d16:	78fa      	ldrb	r2, [r7, #3]
 8008d18:	6879      	ldr	r1, [r7, #4]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	011b      	lsls	r3, r3, #4
 8008d1e:	1a9b      	subs	r3, r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	440b      	add	r3, r1
 8008d24:	331b      	adds	r3, #27
 8008d26:	2201      	movs	r2, #1
 8008d28:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8008d2a:	78fa      	ldrb	r2, [r7, #3]
 8008d2c:	6879      	ldr	r1, [r7, #4]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	011b      	lsls	r3, r3, #4
 8008d32:	1a9b      	subs	r3, r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	440b      	add	r3, r1
 8008d38:	334d      	adds	r3, #77	@ 0x4d
 8008d3a:	2203      	movs	r2, #3
 8008d3c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	78fa      	ldrb	r2, [r7, #3]
 8008d44:	4611      	mov	r1, r2
 8008d46:	4618      	mov	r0, r3
 8008d48:	f007 ff26 	bl	8010b98 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8008d4c:	78fa      	ldrb	r2, [r7, #3]
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	4613      	mov	r3, r2
 8008d52:	011b      	lsls	r3, r3, #4
 8008d54:	1a9b      	subs	r3, r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	440b      	add	r3, r1
 8008d5a:	3344      	adds	r3, #68	@ 0x44
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	601a      	str	r2, [r3, #0]
 8008d60:	e3f9      	b.n	8009556 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	78fa      	ldrb	r2, [r7, #3]
 8008d68:	4611      	mov	r1, r2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f007 fe97 	bl	8010a9e <USB_ReadChInterrupts>
 8008d70:	4603      	mov	r3, r0
 8008d72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d7a:	d111      	bne.n	8008da0 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8008d7c:	78fb      	ldrb	r3, [r7, #3]
 8008d7e:	015a      	lsls	r2, r3, #5
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	4413      	add	r3, r2
 8008d84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d88:	461a      	mov	r2, r3
 8008d8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d8e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	78fa      	ldrb	r2, [r7, #3]
 8008d96:	4611      	mov	r1, r2
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f007 fefd 	bl	8010b98 <USB_HC_Halt>
 8008d9e:	e3da      	b.n	8009556 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	78fa      	ldrb	r2, [r7, #3]
 8008da6:	4611      	mov	r1, r2
 8008da8:	4618      	mov	r0, r3
 8008daa:	f007 fe78 	bl	8010a9e <USB_ReadChInterrupts>
 8008dae:	4603      	mov	r3, r0
 8008db0:	f003 0301 	and.w	r3, r3, #1
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d168      	bne.n	8008e8a <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8008db8:	78fa      	ldrb	r2, [r7, #3]
 8008dba:	6879      	ldr	r1, [r7, #4]
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	011b      	lsls	r3, r3, #4
 8008dc0:	1a9b      	subs	r3, r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	440b      	add	r3, r1
 8008dc6:	3344      	adds	r3, #68	@ 0x44
 8008dc8:	2200      	movs	r2, #0
 8008dca:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	78fa      	ldrb	r2, [r7, #3]
 8008dd2:	4611      	mov	r1, r2
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f007 fe62 	bl	8010a9e <USB_ReadChInterrupts>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008de0:	2b40      	cmp	r3, #64	@ 0x40
 8008de2:	d112      	bne.n	8008e0a <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8008de4:	78fa      	ldrb	r2, [r7, #3]
 8008de6:	6879      	ldr	r1, [r7, #4]
 8008de8:	4613      	mov	r3, r2
 8008dea:	011b      	lsls	r3, r3, #4
 8008dec:	1a9b      	subs	r3, r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	440b      	add	r3, r1
 8008df2:	3319      	adds	r3, #25
 8008df4:	2201      	movs	r2, #1
 8008df6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008df8:	78fb      	ldrb	r3, [r7, #3]
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e04:	461a      	mov	r2, r3
 8008e06:	2340      	movs	r3, #64	@ 0x40
 8008e08:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8008e0a:	78fa      	ldrb	r2, [r7, #3]
 8008e0c:	6879      	ldr	r1, [r7, #4]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	011b      	lsls	r3, r3, #4
 8008e12:	1a9b      	subs	r3, r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	440b      	add	r3, r1
 8008e18:	331b      	adds	r3, #27
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d019      	beq.n	8008e54 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008e20:	78fa      	ldrb	r2, [r7, #3]
 8008e22:	6879      	ldr	r1, [r7, #4]
 8008e24:	4613      	mov	r3, r2
 8008e26:	011b      	lsls	r3, r3, #4
 8008e28:	1a9b      	subs	r3, r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	440b      	add	r3, r1
 8008e2e:	331b      	adds	r3, #27
 8008e30:	2200      	movs	r2, #0
 8008e32:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008e34:	78fb      	ldrb	r3, [r7, #3]
 8008e36:	015a      	lsls	r2, r3, #5
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	78fa      	ldrb	r2, [r7, #3]
 8008e44:	0151      	lsls	r1, r2, #5
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	440a      	add	r2, r1
 8008e4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e52:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8008e54:	78fb      	ldrb	r3, [r7, #3]
 8008e56:	015a      	lsls	r2, r3, #5
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e60:	461a      	mov	r2, r3
 8008e62:	2301      	movs	r3, #1
 8008e64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8008e66:	78fa      	ldrb	r2, [r7, #3]
 8008e68:	6879      	ldr	r1, [r7, #4]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	011b      	lsls	r3, r3, #4
 8008e6e:	1a9b      	subs	r3, r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	440b      	add	r3, r1
 8008e74:	334d      	adds	r3, #77	@ 0x4d
 8008e76:	2201      	movs	r2, #1
 8008e78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	78fa      	ldrb	r2, [r7, #3]
 8008e80:	4611      	mov	r1, r2
 8008e82:	4618      	mov	r0, r3
 8008e84:	f007 fe88 	bl	8010b98 <USB_HC_Halt>
 8008e88:	e365      	b.n	8009556 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	78fa      	ldrb	r2, [r7, #3]
 8008e90:	4611      	mov	r1, r2
 8008e92:	4618      	mov	r0, r3
 8008e94:	f007 fe03 	bl	8010a9e <USB_ReadChInterrupts>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e9e:	2b40      	cmp	r3, #64	@ 0x40
 8008ea0:	d139      	bne.n	8008f16 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8008ea2:	78fa      	ldrb	r2, [r7, #3]
 8008ea4:	6879      	ldr	r1, [r7, #4]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	011b      	lsls	r3, r3, #4
 8008eaa:	1a9b      	subs	r3, r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	440b      	add	r3, r1
 8008eb0:	334d      	adds	r3, #77	@ 0x4d
 8008eb2:	2205      	movs	r2, #5
 8008eb4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8008eb6:	78fa      	ldrb	r2, [r7, #3]
 8008eb8:	6879      	ldr	r1, [r7, #4]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	011b      	lsls	r3, r3, #4
 8008ebe:	1a9b      	subs	r3, r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	440b      	add	r3, r1
 8008ec4:	331a      	adds	r3, #26
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d109      	bne.n	8008ee0 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8008ecc:	78fa      	ldrb	r2, [r7, #3]
 8008ece:	6879      	ldr	r1, [r7, #4]
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	011b      	lsls	r3, r3, #4
 8008ed4:	1a9b      	subs	r3, r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	440b      	add	r3, r1
 8008eda:	3319      	adds	r3, #25
 8008edc:	2201      	movs	r2, #1
 8008ede:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8008ee0:	78fa      	ldrb	r2, [r7, #3]
 8008ee2:	6879      	ldr	r1, [r7, #4]
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	011b      	lsls	r3, r3, #4
 8008ee8:	1a9b      	subs	r3, r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	440b      	add	r3, r1
 8008eee:	3344      	adds	r3, #68	@ 0x44
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	78fa      	ldrb	r2, [r7, #3]
 8008efa:	4611      	mov	r1, r2
 8008efc:	4618      	mov	r0, r3
 8008efe:	f007 fe4b 	bl	8010b98 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008f02:	78fb      	ldrb	r3, [r7, #3]
 8008f04:	015a      	lsls	r2, r3, #5
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	4413      	add	r3, r2
 8008f0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f0e:	461a      	mov	r2, r3
 8008f10:	2340      	movs	r3, #64	@ 0x40
 8008f12:	6093      	str	r3, [r2, #8]
 8008f14:	e31f      	b.n	8009556 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	78fa      	ldrb	r2, [r7, #3]
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f007 fdbd 	bl	8010a9e <USB_ReadChInterrupts>
 8008f24:	4603      	mov	r3, r0
 8008f26:	f003 0308 	and.w	r3, r3, #8
 8008f2a:	2b08      	cmp	r3, #8
 8008f2c:	d11a      	bne.n	8008f64 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8008f2e:	78fb      	ldrb	r3, [r7, #3]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	2308      	movs	r3, #8
 8008f3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8008f40:	78fa      	ldrb	r2, [r7, #3]
 8008f42:	6879      	ldr	r1, [r7, #4]
 8008f44:	4613      	mov	r3, r2
 8008f46:	011b      	lsls	r3, r3, #4
 8008f48:	1a9b      	subs	r3, r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	440b      	add	r3, r1
 8008f4e:	334d      	adds	r3, #77	@ 0x4d
 8008f50:	2206      	movs	r2, #6
 8008f52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	78fa      	ldrb	r2, [r7, #3]
 8008f5a:	4611      	mov	r1, r2
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f007 fe1b 	bl	8010b98 <USB_HC_Halt>
 8008f62:	e2f8      	b.n	8009556 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	78fa      	ldrb	r2, [r7, #3]
 8008f6a:	4611      	mov	r1, r2
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f007 fd96 	bl	8010a9e <USB_ReadChInterrupts>
 8008f72:	4603      	mov	r3, r0
 8008f74:	f003 0310 	and.w	r3, r3, #16
 8008f78:	2b10      	cmp	r3, #16
 8008f7a:	d144      	bne.n	8009006 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8008f7c:	78fa      	ldrb	r2, [r7, #3]
 8008f7e:	6879      	ldr	r1, [r7, #4]
 8008f80:	4613      	mov	r3, r2
 8008f82:	011b      	lsls	r3, r3, #4
 8008f84:	1a9b      	subs	r3, r3, r2
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	440b      	add	r3, r1
 8008f8a:	3344      	adds	r3, #68	@ 0x44
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8008f90:	78fa      	ldrb	r2, [r7, #3]
 8008f92:	6879      	ldr	r1, [r7, #4]
 8008f94:	4613      	mov	r3, r2
 8008f96:	011b      	lsls	r3, r3, #4
 8008f98:	1a9b      	subs	r3, r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	440b      	add	r3, r1
 8008f9e:	334d      	adds	r3, #77	@ 0x4d
 8008fa0:	2204      	movs	r2, #4
 8008fa2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8008fa4:	78fa      	ldrb	r2, [r7, #3]
 8008fa6:	6879      	ldr	r1, [r7, #4]
 8008fa8:	4613      	mov	r3, r2
 8008faa:	011b      	lsls	r3, r3, #4
 8008fac:	1a9b      	subs	r3, r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	440b      	add	r3, r1
 8008fb2:	3319      	adds	r3, #25
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d114      	bne.n	8008fe4 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8008fba:	78fa      	ldrb	r2, [r7, #3]
 8008fbc:	6879      	ldr	r1, [r7, #4]
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	011b      	lsls	r3, r3, #4
 8008fc2:	1a9b      	subs	r3, r3, r2
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	440b      	add	r3, r1
 8008fc8:	3318      	adds	r3, #24
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d109      	bne.n	8008fe4 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8008fd0:	78fa      	ldrb	r2, [r7, #3]
 8008fd2:	6879      	ldr	r1, [r7, #4]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	011b      	lsls	r3, r3, #4
 8008fd8:	1a9b      	subs	r3, r3, r2
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	440b      	add	r3, r1
 8008fde:	3319      	adds	r3, #25
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	78fa      	ldrb	r2, [r7, #3]
 8008fea:	4611      	mov	r1, r2
 8008fec:	4618      	mov	r0, r3
 8008fee:	f007 fdd3 	bl	8010b98 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008ff2:	78fb      	ldrb	r3, [r7, #3]
 8008ff4:	015a      	lsls	r2, r3, #5
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ffe:	461a      	mov	r2, r3
 8009000:	2310      	movs	r3, #16
 8009002:	6093      	str	r3, [r2, #8]
 8009004:	e2a7      	b.n	8009556 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	78fa      	ldrb	r2, [r7, #3]
 800900c:	4611      	mov	r1, r2
 800900e:	4618      	mov	r0, r3
 8009010:	f007 fd45 	bl	8010a9e <USB_ReadChInterrupts>
 8009014:	4603      	mov	r3, r0
 8009016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800901a:	2b80      	cmp	r3, #128	@ 0x80
 800901c:	f040 8083 	bne.w	8009126 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	799b      	ldrb	r3, [r3, #6]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d111      	bne.n	800904c <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8009028:	78fa      	ldrb	r2, [r7, #3]
 800902a:	6879      	ldr	r1, [r7, #4]
 800902c:	4613      	mov	r3, r2
 800902e:	011b      	lsls	r3, r3, #4
 8009030:	1a9b      	subs	r3, r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	440b      	add	r3, r1
 8009036:	334d      	adds	r3, #77	@ 0x4d
 8009038:	2207      	movs	r2, #7
 800903a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	78fa      	ldrb	r2, [r7, #3]
 8009042:	4611      	mov	r1, r2
 8009044:	4618      	mov	r0, r3
 8009046:	f007 fda7 	bl	8010b98 <USB_HC_Halt>
 800904a:	e062      	b.n	8009112 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800904c:	78fa      	ldrb	r2, [r7, #3]
 800904e:	6879      	ldr	r1, [r7, #4]
 8009050:	4613      	mov	r3, r2
 8009052:	011b      	lsls	r3, r3, #4
 8009054:	1a9b      	subs	r3, r3, r2
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	440b      	add	r3, r1
 800905a:	3344      	adds	r3, #68	@ 0x44
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	1c59      	adds	r1, r3, #1
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	4613      	mov	r3, r2
 8009064:	011b      	lsls	r3, r3, #4
 8009066:	1a9b      	subs	r3, r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4403      	add	r3, r0
 800906c:	3344      	adds	r3, #68	@ 0x44
 800906e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009070:	78fa      	ldrb	r2, [r7, #3]
 8009072:	6879      	ldr	r1, [r7, #4]
 8009074:	4613      	mov	r3, r2
 8009076:	011b      	lsls	r3, r3, #4
 8009078:	1a9b      	subs	r3, r3, r2
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	440b      	add	r3, r1
 800907e:	3344      	adds	r3, #68	@ 0x44
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b02      	cmp	r3, #2
 8009084:	d922      	bls.n	80090cc <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8009086:	78fa      	ldrb	r2, [r7, #3]
 8009088:	6879      	ldr	r1, [r7, #4]
 800908a:	4613      	mov	r3, r2
 800908c:	011b      	lsls	r3, r3, #4
 800908e:	1a9b      	subs	r3, r3, r2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	440b      	add	r3, r1
 8009094:	3344      	adds	r3, #68	@ 0x44
 8009096:	2200      	movs	r2, #0
 8009098:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800909a:	78fa      	ldrb	r2, [r7, #3]
 800909c:	6879      	ldr	r1, [r7, #4]
 800909e:	4613      	mov	r3, r2
 80090a0:	011b      	lsls	r3, r3, #4
 80090a2:	1a9b      	subs	r3, r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	440b      	add	r3, r1
 80090a8:	334c      	adds	r3, #76	@ 0x4c
 80090aa:	2204      	movs	r2, #4
 80090ac:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80090ae:	78fa      	ldrb	r2, [r7, #3]
 80090b0:	6879      	ldr	r1, [r7, #4]
 80090b2:	4613      	mov	r3, r2
 80090b4:	011b      	lsls	r3, r3, #4
 80090b6:	1a9b      	subs	r3, r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	440b      	add	r3, r1
 80090bc:	334c      	adds	r3, #76	@ 0x4c
 80090be:	781a      	ldrb	r2, [r3, #0]
 80090c0:	78fb      	ldrb	r3, [r7, #3]
 80090c2:	4619      	mov	r1, r3
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f00d fcb7 	bl	8016a38 <HAL_HCD_HC_NotifyURBChange_Callback>
 80090ca:	e022      	b.n	8009112 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80090cc:	78fa      	ldrb	r2, [r7, #3]
 80090ce:	6879      	ldr	r1, [r7, #4]
 80090d0:	4613      	mov	r3, r2
 80090d2:	011b      	lsls	r3, r3, #4
 80090d4:	1a9b      	subs	r3, r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	440b      	add	r3, r1
 80090da:	334c      	adds	r3, #76	@ 0x4c
 80090dc:	2202      	movs	r2, #2
 80090de:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80090e0:	78fb      	ldrb	r3, [r7, #3]
 80090e2:	015a      	lsls	r2, r3, #5
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80090f6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80090fe:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009100:	78fb      	ldrb	r3, [r7, #3]
 8009102:	015a      	lsls	r2, r3, #5
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	4413      	add	r3, r2
 8009108:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800910c:	461a      	mov	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8009112:	78fb      	ldrb	r3, [r7, #3]
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	4413      	add	r3, r2
 800911a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800911e:	461a      	mov	r2, r3
 8009120:	2380      	movs	r3, #128	@ 0x80
 8009122:	6093      	str	r3, [r2, #8]
 8009124:	e217      	b.n	8009556 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	78fa      	ldrb	r2, [r7, #3]
 800912c:	4611      	mov	r1, r2
 800912e:	4618      	mov	r0, r3
 8009130:	f007 fcb5 	bl	8010a9e <USB_ReadChInterrupts>
 8009134:	4603      	mov	r3, r0
 8009136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800913a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800913e:	d11b      	bne.n	8009178 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8009140:	78fa      	ldrb	r2, [r7, #3]
 8009142:	6879      	ldr	r1, [r7, #4]
 8009144:	4613      	mov	r3, r2
 8009146:	011b      	lsls	r3, r3, #4
 8009148:	1a9b      	subs	r3, r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	440b      	add	r3, r1
 800914e:	334d      	adds	r3, #77	@ 0x4d
 8009150:	2209      	movs	r2, #9
 8009152:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	78fa      	ldrb	r2, [r7, #3]
 800915a:	4611      	mov	r1, r2
 800915c:	4618      	mov	r0, r3
 800915e:	f007 fd1b 	bl	8010b98 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8009162:	78fb      	ldrb	r3, [r7, #3]
 8009164:	015a      	lsls	r2, r3, #5
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	4413      	add	r3, r2
 800916a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800916e:	461a      	mov	r2, r3
 8009170:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009174:	6093      	str	r3, [r2, #8]
 8009176:	e1ee      	b.n	8009556 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	78fa      	ldrb	r2, [r7, #3]
 800917e:	4611      	mov	r1, r2
 8009180:	4618      	mov	r0, r3
 8009182:	f007 fc8c 	bl	8010a9e <USB_ReadChInterrupts>
 8009186:	4603      	mov	r3, r0
 8009188:	f003 0302 	and.w	r3, r3, #2
 800918c:	2b02      	cmp	r3, #2
 800918e:	f040 81df 	bne.w	8009550 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8009192:	78fb      	ldrb	r3, [r7, #3]
 8009194:	015a      	lsls	r2, r3, #5
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	4413      	add	r3, r2
 800919a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800919e:	461a      	mov	r2, r3
 80091a0:	2302      	movs	r3, #2
 80091a2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80091a4:	78fa      	ldrb	r2, [r7, #3]
 80091a6:	6879      	ldr	r1, [r7, #4]
 80091a8:	4613      	mov	r3, r2
 80091aa:	011b      	lsls	r3, r3, #4
 80091ac:	1a9b      	subs	r3, r3, r2
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	440b      	add	r3, r1
 80091b2:	334d      	adds	r3, #77	@ 0x4d
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	f040 8093 	bne.w	80092e2 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80091bc:	78fa      	ldrb	r2, [r7, #3]
 80091be:	6879      	ldr	r1, [r7, #4]
 80091c0:	4613      	mov	r3, r2
 80091c2:	011b      	lsls	r3, r3, #4
 80091c4:	1a9b      	subs	r3, r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	440b      	add	r3, r1
 80091ca:	334d      	adds	r3, #77	@ 0x4d
 80091cc:	2202      	movs	r2, #2
 80091ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80091d0:	78fa      	ldrb	r2, [r7, #3]
 80091d2:	6879      	ldr	r1, [r7, #4]
 80091d4:	4613      	mov	r3, r2
 80091d6:	011b      	lsls	r3, r3, #4
 80091d8:	1a9b      	subs	r3, r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	440b      	add	r3, r1
 80091de:	334c      	adds	r3, #76	@ 0x4c
 80091e0:	2201      	movs	r2, #1
 80091e2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80091e4:	78fa      	ldrb	r2, [r7, #3]
 80091e6:	6879      	ldr	r1, [r7, #4]
 80091e8:	4613      	mov	r3, r2
 80091ea:	011b      	lsls	r3, r3, #4
 80091ec:	1a9b      	subs	r3, r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	440b      	add	r3, r1
 80091f2:	3326      	adds	r3, #38	@ 0x26
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d00b      	beq.n	8009212 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80091fa:	78fa      	ldrb	r2, [r7, #3]
 80091fc:	6879      	ldr	r1, [r7, #4]
 80091fe:	4613      	mov	r3, r2
 8009200:	011b      	lsls	r3, r3, #4
 8009202:	1a9b      	subs	r3, r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	440b      	add	r3, r1
 8009208:	3326      	adds	r3, #38	@ 0x26
 800920a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800920c:	2b03      	cmp	r3, #3
 800920e:	f040 8190 	bne.w	8009532 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	799b      	ldrb	r3, [r3, #6]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d115      	bne.n	8009246 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800921a:	78fa      	ldrb	r2, [r7, #3]
 800921c:	6879      	ldr	r1, [r7, #4]
 800921e:	4613      	mov	r3, r2
 8009220:	011b      	lsls	r3, r3, #4
 8009222:	1a9b      	subs	r3, r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	440b      	add	r3, r1
 8009228:	333d      	adds	r3, #61	@ 0x3d
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	78fa      	ldrb	r2, [r7, #3]
 800922e:	f083 0301 	eor.w	r3, r3, #1
 8009232:	b2d8      	uxtb	r0, r3
 8009234:	6879      	ldr	r1, [r7, #4]
 8009236:	4613      	mov	r3, r2
 8009238:	011b      	lsls	r3, r3, #4
 800923a:	1a9b      	subs	r3, r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	440b      	add	r3, r1
 8009240:	333d      	adds	r3, #61	@ 0x3d
 8009242:	4602      	mov	r2, r0
 8009244:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	799b      	ldrb	r3, [r3, #6]
 800924a:	2b01      	cmp	r3, #1
 800924c:	f040 8171 	bne.w	8009532 <HCD_HC_OUT_IRQHandler+0x954>
 8009250:	78fa      	ldrb	r2, [r7, #3]
 8009252:	6879      	ldr	r1, [r7, #4]
 8009254:	4613      	mov	r3, r2
 8009256:	011b      	lsls	r3, r3, #4
 8009258:	1a9b      	subs	r3, r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	440b      	add	r3, r1
 800925e:	3334      	adds	r3, #52	@ 0x34
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	f000 8165 	beq.w	8009532 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8009268:	78fa      	ldrb	r2, [r7, #3]
 800926a:	6879      	ldr	r1, [r7, #4]
 800926c:	4613      	mov	r3, r2
 800926e:	011b      	lsls	r3, r3, #4
 8009270:	1a9b      	subs	r3, r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	440b      	add	r3, r1
 8009276:	3334      	adds	r3, #52	@ 0x34
 8009278:	6819      	ldr	r1, [r3, #0]
 800927a:	78fa      	ldrb	r2, [r7, #3]
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	4613      	mov	r3, r2
 8009280:	011b      	lsls	r3, r3, #4
 8009282:	1a9b      	subs	r3, r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	4403      	add	r3, r0
 8009288:	3328      	adds	r3, #40	@ 0x28
 800928a:	881b      	ldrh	r3, [r3, #0]
 800928c:	440b      	add	r3, r1
 800928e:	1e59      	subs	r1, r3, #1
 8009290:	78fa      	ldrb	r2, [r7, #3]
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	4613      	mov	r3, r2
 8009296:	011b      	lsls	r3, r3, #4
 8009298:	1a9b      	subs	r3, r3, r2
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	4403      	add	r3, r0
 800929e:	3328      	adds	r3, #40	@ 0x28
 80092a0:	881b      	ldrh	r3, [r3, #0]
 80092a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80092a6:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f000 813f 	beq.w	8009532 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80092b4:	78fa      	ldrb	r2, [r7, #3]
 80092b6:	6879      	ldr	r1, [r7, #4]
 80092b8:	4613      	mov	r3, r2
 80092ba:	011b      	lsls	r3, r3, #4
 80092bc:	1a9b      	subs	r3, r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	440b      	add	r3, r1
 80092c2:	333d      	adds	r3, #61	@ 0x3d
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	78fa      	ldrb	r2, [r7, #3]
 80092c8:	f083 0301 	eor.w	r3, r3, #1
 80092cc:	b2d8      	uxtb	r0, r3
 80092ce:	6879      	ldr	r1, [r7, #4]
 80092d0:	4613      	mov	r3, r2
 80092d2:	011b      	lsls	r3, r3, #4
 80092d4:	1a9b      	subs	r3, r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	440b      	add	r3, r1
 80092da:	333d      	adds	r3, #61	@ 0x3d
 80092dc:	4602      	mov	r2, r0
 80092de:	701a      	strb	r2, [r3, #0]
 80092e0:	e127      	b.n	8009532 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80092e2:	78fa      	ldrb	r2, [r7, #3]
 80092e4:	6879      	ldr	r1, [r7, #4]
 80092e6:	4613      	mov	r3, r2
 80092e8:	011b      	lsls	r3, r3, #4
 80092ea:	1a9b      	subs	r3, r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	440b      	add	r3, r1
 80092f0:	334d      	adds	r3, #77	@ 0x4d
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	2b03      	cmp	r3, #3
 80092f6:	d120      	bne.n	800933a <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80092f8:	78fa      	ldrb	r2, [r7, #3]
 80092fa:	6879      	ldr	r1, [r7, #4]
 80092fc:	4613      	mov	r3, r2
 80092fe:	011b      	lsls	r3, r3, #4
 8009300:	1a9b      	subs	r3, r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	440b      	add	r3, r1
 8009306:	334d      	adds	r3, #77	@ 0x4d
 8009308:	2202      	movs	r2, #2
 800930a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800930c:	78fa      	ldrb	r2, [r7, #3]
 800930e:	6879      	ldr	r1, [r7, #4]
 8009310:	4613      	mov	r3, r2
 8009312:	011b      	lsls	r3, r3, #4
 8009314:	1a9b      	subs	r3, r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	440b      	add	r3, r1
 800931a:	331b      	adds	r3, #27
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	2b01      	cmp	r3, #1
 8009320:	f040 8107 	bne.w	8009532 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009324:	78fa      	ldrb	r2, [r7, #3]
 8009326:	6879      	ldr	r1, [r7, #4]
 8009328:	4613      	mov	r3, r2
 800932a:	011b      	lsls	r3, r3, #4
 800932c:	1a9b      	subs	r3, r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	440b      	add	r3, r1
 8009332:	334c      	adds	r3, #76	@ 0x4c
 8009334:	2202      	movs	r2, #2
 8009336:	701a      	strb	r2, [r3, #0]
 8009338:	e0fb      	b.n	8009532 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800933a:	78fa      	ldrb	r2, [r7, #3]
 800933c:	6879      	ldr	r1, [r7, #4]
 800933e:	4613      	mov	r3, r2
 8009340:	011b      	lsls	r3, r3, #4
 8009342:	1a9b      	subs	r3, r3, r2
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	440b      	add	r3, r1
 8009348:	334d      	adds	r3, #77	@ 0x4d
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	2b04      	cmp	r3, #4
 800934e:	d13a      	bne.n	80093c6 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009350:	78fa      	ldrb	r2, [r7, #3]
 8009352:	6879      	ldr	r1, [r7, #4]
 8009354:	4613      	mov	r3, r2
 8009356:	011b      	lsls	r3, r3, #4
 8009358:	1a9b      	subs	r3, r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	440b      	add	r3, r1
 800935e:	334d      	adds	r3, #77	@ 0x4d
 8009360:	2202      	movs	r2, #2
 8009362:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009364:	78fa      	ldrb	r2, [r7, #3]
 8009366:	6879      	ldr	r1, [r7, #4]
 8009368:	4613      	mov	r3, r2
 800936a:	011b      	lsls	r3, r3, #4
 800936c:	1a9b      	subs	r3, r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	440b      	add	r3, r1
 8009372:	334c      	adds	r3, #76	@ 0x4c
 8009374:	2202      	movs	r2, #2
 8009376:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009378:	78fa      	ldrb	r2, [r7, #3]
 800937a:	6879      	ldr	r1, [r7, #4]
 800937c:	4613      	mov	r3, r2
 800937e:	011b      	lsls	r3, r3, #4
 8009380:	1a9b      	subs	r3, r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	440b      	add	r3, r1
 8009386:	331b      	adds	r3, #27
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	2b01      	cmp	r3, #1
 800938c:	f040 80d1 	bne.w	8009532 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8009390:	78fa      	ldrb	r2, [r7, #3]
 8009392:	6879      	ldr	r1, [r7, #4]
 8009394:	4613      	mov	r3, r2
 8009396:	011b      	lsls	r3, r3, #4
 8009398:	1a9b      	subs	r3, r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	440b      	add	r3, r1
 800939e:	331b      	adds	r3, #27
 80093a0:	2200      	movs	r2, #0
 80093a2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80093a4:	78fb      	ldrb	r3, [r7, #3]
 80093a6:	015a      	lsls	r2, r3, #5
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	4413      	add	r3, r2
 80093ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	78fa      	ldrb	r2, [r7, #3]
 80093b4:	0151      	lsls	r1, r2, #5
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	440a      	add	r2, r1
 80093ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093c2:	6053      	str	r3, [r2, #4]
 80093c4:	e0b5      	b.n	8009532 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80093c6:	78fa      	ldrb	r2, [r7, #3]
 80093c8:	6879      	ldr	r1, [r7, #4]
 80093ca:	4613      	mov	r3, r2
 80093cc:	011b      	lsls	r3, r3, #4
 80093ce:	1a9b      	subs	r3, r3, r2
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	440b      	add	r3, r1
 80093d4:	334d      	adds	r3, #77	@ 0x4d
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	2b05      	cmp	r3, #5
 80093da:	d114      	bne.n	8009406 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80093dc:	78fa      	ldrb	r2, [r7, #3]
 80093de:	6879      	ldr	r1, [r7, #4]
 80093e0:	4613      	mov	r3, r2
 80093e2:	011b      	lsls	r3, r3, #4
 80093e4:	1a9b      	subs	r3, r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	440b      	add	r3, r1
 80093ea:	334d      	adds	r3, #77	@ 0x4d
 80093ec:	2202      	movs	r2, #2
 80093ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80093f0:	78fa      	ldrb	r2, [r7, #3]
 80093f2:	6879      	ldr	r1, [r7, #4]
 80093f4:	4613      	mov	r3, r2
 80093f6:	011b      	lsls	r3, r3, #4
 80093f8:	1a9b      	subs	r3, r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	440b      	add	r3, r1
 80093fe:	334c      	adds	r3, #76	@ 0x4c
 8009400:	2202      	movs	r2, #2
 8009402:	701a      	strb	r2, [r3, #0]
 8009404:	e095      	b.n	8009532 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8009406:	78fa      	ldrb	r2, [r7, #3]
 8009408:	6879      	ldr	r1, [r7, #4]
 800940a:	4613      	mov	r3, r2
 800940c:	011b      	lsls	r3, r3, #4
 800940e:	1a9b      	subs	r3, r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	440b      	add	r3, r1
 8009414:	334d      	adds	r3, #77	@ 0x4d
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	2b06      	cmp	r3, #6
 800941a:	d114      	bne.n	8009446 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800941c:	78fa      	ldrb	r2, [r7, #3]
 800941e:	6879      	ldr	r1, [r7, #4]
 8009420:	4613      	mov	r3, r2
 8009422:	011b      	lsls	r3, r3, #4
 8009424:	1a9b      	subs	r3, r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	440b      	add	r3, r1
 800942a:	334d      	adds	r3, #77	@ 0x4d
 800942c:	2202      	movs	r2, #2
 800942e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8009430:	78fa      	ldrb	r2, [r7, #3]
 8009432:	6879      	ldr	r1, [r7, #4]
 8009434:	4613      	mov	r3, r2
 8009436:	011b      	lsls	r3, r3, #4
 8009438:	1a9b      	subs	r3, r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	440b      	add	r3, r1
 800943e:	334c      	adds	r3, #76	@ 0x4c
 8009440:	2205      	movs	r2, #5
 8009442:	701a      	strb	r2, [r3, #0]
 8009444:	e075      	b.n	8009532 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009446:	78fa      	ldrb	r2, [r7, #3]
 8009448:	6879      	ldr	r1, [r7, #4]
 800944a:	4613      	mov	r3, r2
 800944c:	011b      	lsls	r3, r3, #4
 800944e:	1a9b      	subs	r3, r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	440b      	add	r3, r1
 8009454:	334d      	adds	r3, #77	@ 0x4d
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	2b07      	cmp	r3, #7
 800945a:	d00a      	beq.n	8009472 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800945c:	78fa      	ldrb	r2, [r7, #3]
 800945e:	6879      	ldr	r1, [r7, #4]
 8009460:	4613      	mov	r3, r2
 8009462:	011b      	lsls	r3, r3, #4
 8009464:	1a9b      	subs	r3, r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	440b      	add	r3, r1
 800946a:	334d      	adds	r3, #77	@ 0x4d
 800946c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800946e:	2b09      	cmp	r3, #9
 8009470:	d170      	bne.n	8009554 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009472:	78fa      	ldrb	r2, [r7, #3]
 8009474:	6879      	ldr	r1, [r7, #4]
 8009476:	4613      	mov	r3, r2
 8009478:	011b      	lsls	r3, r3, #4
 800947a:	1a9b      	subs	r3, r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	440b      	add	r3, r1
 8009480:	334d      	adds	r3, #77	@ 0x4d
 8009482:	2202      	movs	r2, #2
 8009484:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8009486:	78fa      	ldrb	r2, [r7, #3]
 8009488:	6879      	ldr	r1, [r7, #4]
 800948a:	4613      	mov	r3, r2
 800948c:	011b      	lsls	r3, r3, #4
 800948e:	1a9b      	subs	r3, r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	440b      	add	r3, r1
 8009494:	3344      	adds	r3, #68	@ 0x44
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	1c59      	adds	r1, r3, #1
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	4613      	mov	r3, r2
 800949e:	011b      	lsls	r3, r3, #4
 80094a0:	1a9b      	subs	r3, r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4403      	add	r3, r0
 80094a6:	3344      	adds	r3, #68	@ 0x44
 80094a8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80094aa:	78fa      	ldrb	r2, [r7, #3]
 80094ac:	6879      	ldr	r1, [r7, #4]
 80094ae:	4613      	mov	r3, r2
 80094b0:	011b      	lsls	r3, r3, #4
 80094b2:	1a9b      	subs	r3, r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	440b      	add	r3, r1
 80094b8:	3344      	adds	r3, #68	@ 0x44
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b02      	cmp	r3, #2
 80094be:	d914      	bls.n	80094ea <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80094c0:	78fa      	ldrb	r2, [r7, #3]
 80094c2:	6879      	ldr	r1, [r7, #4]
 80094c4:	4613      	mov	r3, r2
 80094c6:	011b      	lsls	r3, r3, #4
 80094c8:	1a9b      	subs	r3, r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	440b      	add	r3, r1
 80094ce:	3344      	adds	r3, #68	@ 0x44
 80094d0:	2200      	movs	r2, #0
 80094d2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80094d4:	78fa      	ldrb	r2, [r7, #3]
 80094d6:	6879      	ldr	r1, [r7, #4]
 80094d8:	4613      	mov	r3, r2
 80094da:	011b      	lsls	r3, r3, #4
 80094dc:	1a9b      	subs	r3, r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	440b      	add	r3, r1
 80094e2:	334c      	adds	r3, #76	@ 0x4c
 80094e4:	2204      	movs	r2, #4
 80094e6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80094e8:	e022      	b.n	8009530 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80094ea:	78fa      	ldrb	r2, [r7, #3]
 80094ec:	6879      	ldr	r1, [r7, #4]
 80094ee:	4613      	mov	r3, r2
 80094f0:	011b      	lsls	r3, r3, #4
 80094f2:	1a9b      	subs	r3, r3, r2
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	440b      	add	r3, r1
 80094f8:	334c      	adds	r3, #76	@ 0x4c
 80094fa:	2202      	movs	r2, #2
 80094fc:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80094fe:	78fb      	ldrb	r3, [r7, #3]
 8009500:	015a      	lsls	r2, r3, #5
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	4413      	add	r3, r2
 8009506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009514:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800951c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800951e:	78fb      	ldrb	r3, [r7, #3]
 8009520:	015a      	lsls	r2, r3, #5
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	4413      	add	r3, r2
 8009526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800952a:	461a      	mov	r2, r3
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009530:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009532:	78fa      	ldrb	r2, [r7, #3]
 8009534:	6879      	ldr	r1, [r7, #4]
 8009536:	4613      	mov	r3, r2
 8009538:	011b      	lsls	r3, r3, #4
 800953a:	1a9b      	subs	r3, r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	440b      	add	r3, r1
 8009540:	334c      	adds	r3, #76	@ 0x4c
 8009542:	781a      	ldrb	r2, [r3, #0]
 8009544:	78fb      	ldrb	r3, [r7, #3]
 8009546:	4619      	mov	r1, r3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f00d fa75 	bl	8016a38 <HAL_HCD_HC_NotifyURBChange_Callback>
 800954e:	e002      	b.n	8009556 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8009550:	bf00      	nop
 8009552:	e000      	b.n	8009556 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8009554:	bf00      	nop
  }
}
 8009556:	3718      	adds	r7, #24
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b08a      	sub	sp, #40	@ 0x28
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	6a1b      	ldr	r3, [r3, #32]
 8009574:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	f003 030f 	and.w	r3, r3, #15
 800957c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	0c5b      	lsrs	r3, r3, #17
 8009582:	f003 030f 	and.w	r3, r3, #15
 8009586:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	091b      	lsrs	r3, r3, #4
 800958c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009590:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	2b02      	cmp	r3, #2
 8009596:	d004      	beq.n	80095a2 <HCD_RXQLVL_IRQHandler+0x46>
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	2b05      	cmp	r3, #5
 800959c:	f000 80b6 	beq.w	800970c <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80095a0:	e0b7      	b.n	8009712 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f000 80b3 	beq.w	8009710 <HCD_RXQLVL_IRQHandler+0x1b4>
 80095aa:	6879      	ldr	r1, [r7, #4]
 80095ac:	69ba      	ldr	r2, [r7, #24]
 80095ae:	4613      	mov	r3, r2
 80095b0:	011b      	lsls	r3, r3, #4
 80095b2:	1a9b      	subs	r3, r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	440b      	add	r3, r1
 80095b8:	332c      	adds	r3, #44	@ 0x2c
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f000 80a7 	beq.w	8009710 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80095c2:	6879      	ldr	r1, [r7, #4]
 80095c4:	69ba      	ldr	r2, [r7, #24]
 80095c6:	4613      	mov	r3, r2
 80095c8:	011b      	lsls	r3, r3, #4
 80095ca:	1a9b      	subs	r3, r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	440b      	add	r3, r1
 80095d0:	3338      	adds	r3, #56	@ 0x38
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	18d1      	adds	r1, r2, r3
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	69ba      	ldr	r2, [r7, #24]
 80095dc:	4613      	mov	r3, r2
 80095de:	011b      	lsls	r3, r3, #4
 80095e0:	1a9b      	subs	r3, r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4403      	add	r3, r0
 80095e6:	3334      	adds	r3, #52	@ 0x34
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4299      	cmp	r1, r3
 80095ec:	f200 8083 	bhi.w	80096f6 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6818      	ldr	r0, [r3, #0]
 80095f4:	6879      	ldr	r1, [r7, #4]
 80095f6:	69ba      	ldr	r2, [r7, #24]
 80095f8:	4613      	mov	r3, r2
 80095fa:	011b      	lsls	r3, r3, #4
 80095fc:	1a9b      	subs	r3, r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	440b      	add	r3, r1
 8009602:	332c      	adds	r3, #44	@ 0x2c
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	693a      	ldr	r2, [r7, #16]
 8009608:	b292      	uxth	r2, r2
 800960a:	4619      	mov	r1, r3
 800960c:	f007 f9dc 	bl	80109c8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8009610:	6879      	ldr	r1, [r7, #4]
 8009612:	69ba      	ldr	r2, [r7, #24]
 8009614:	4613      	mov	r3, r2
 8009616:	011b      	lsls	r3, r3, #4
 8009618:	1a9b      	subs	r3, r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	440b      	add	r3, r1
 800961e:	332c      	adds	r3, #44	@ 0x2c
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	18d1      	adds	r1, r2, r3
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	69ba      	ldr	r2, [r7, #24]
 800962a:	4613      	mov	r3, r2
 800962c:	011b      	lsls	r3, r3, #4
 800962e:	1a9b      	subs	r3, r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4403      	add	r3, r0
 8009634:	332c      	adds	r3, #44	@ 0x2c
 8009636:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8009638:	6879      	ldr	r1, [r7, #4]
 800963a:	69ba      	ldr	r2, [r7, #24]
 800963c:	4613      	mov	r3, r2
 800963e:	011b      	lsls	r3, r3, #4
 8009640:	1a9b      	subs	r3, r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	440b      	add	r3, r1
 8009646:	3338      	adds	r3, #56	@ 0x38
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	18d1      	adds	r1, r2, r3
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	69ba      	ldr	r2, [r7, #24]
 8009652:	4613      	mov	r3, r2
 8009654:	011b      	lsls	r3, r3, #4
 8009656:	1a9b      	subs	r3, r3, r2
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4403      	add	r3, r0
 800965c:	3338      	adds	r3, #56	@ 0x38
 800965e:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	015a      	lsls	r2, r3, #5
 8009664:	6a3b      	ldr	r3, [r7, #32]
 8009666:	4413      	add	r3, r2
 8009668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	0cdb      	lsrs	r3, r3, #19
 8009670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009674:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8009676:	6879      	ldr	r1, [r7, #4]
 8009678:	69ba      	ldr	r2, [r7, #24]
 800967a:	4613      	mov	r3, r2
 800967c:	011b      	lsls	r3, r3, #4
 800967e:	1a9b      	subs	r3, r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	440b      	add	r3, r1
 8009684:	3328      	adds	r3, #40	@ 0x28
 8009686:	881b      	ldrh	r3, [r3, #0]
 8009688:	461a      	mov	r2, r3
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	4293      	cmp	r3, r2
 800968e:	d13f      	bne.n	8009710 <HCD_RXQLVL_IRQHandler+0x1b4>
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d03c      	beq.n	8009710 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	6a3b      	ldr	r3, [r7, #32]
 800969c:	4413      	add	r3, r2
 800969e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80096ac:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80096b4:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	015a      	lsls	r2, r3, #5
 80096ba:	6a3b      	ldr	r3, [r7, #32]
 80096bc:	4413      	add	r3, r2
 80096be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096c2:	461a      	mov	r2, r3
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80096c8:	6879      	ldr	r1, [r7, #4]
 80096ca:	69ba      	ldr	r2, [r7, #24]
 80096cc:	4613      	mov	r3, r2
 80096ce:	011b      	lsls	r3, r3, #4
 80096d0:	1a9b      	subs	r3, r3, r2
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	440b      	add	r3, r1
 80096d6:	333c      	adds	r3, #60	@ 0x3c
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	f083 0301 	eor.w	r3, r3, #1
 80096de:	b2d8      	uxtb	r0, r3
 80096e0:	6879      	ldr	r1, [r7, #4]
 80096e2:	69ba      	ldr	r2, [r7, #24]
 80096e4:	4613      	mov	r3, r2
 80096e6:	011b      	lsls	r3, r3, #4
 80096e8:	1a9b      	subs	r3, r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	440b      	add	r3, r1
 80096ee:	333c      	adds	r3, #60	@ 0x3c
 80096f0:	4602      	mov	r2, r0
 80096f2:	701a      	strb	r2, [r3, #0]
      break;
 80096f4:	e00c      	b.n	8009710 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80096f6:	6879      	ldr	r1, [r7, #4]
 80096f8:	69ba      	ldr	r2, [r7, #24]
 80096fa:	4613      	mov	r3, r2
 80096fc:	011b      	lsls	r3, r3, #4
 80096fe:	1a9b      	subs	r3, r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	440b      	add	r3, r1
 8009704:	334c      	adds	r3, #76	@ 0x4c
 8009706:	2204      	movs	r2, #4
 8009708:	701a      	strb	r2, [r3, #0]
      break;
 800970a:	e001      	b.n	8009710 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800970c:	bf00      	nop
 800970e:	e000      	b.n	8009712 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8009710:	bf00      	nop
  }
}
 8009712:	bf00      	nop
 8009714:	3728      	adds	r7, #40	@ 0x28
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b086      	sub	sp, #24
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009746:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f003 0302 	and.w	r3, r3, #2
 800974e:	2b02      	cmp	r3, #2
 8009750:	d10b      	bne.n	800976a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f003 0301 	and.w	r3, r3, #1
 8009758:	2b01      	cmp	r3, #1
 800975a:	d102      	bne.n	8009762 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f00d f94f 	bl	8016a00 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	f043 0302 	orr.w	r3, r3, #2
 8009768:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f003 0308 	and.w	r3, r3, #8
 8009770:	2b08      	cmp	r3, #8
 8009772:	d132      	bne.n	80097da <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	f043 0308 	orr.w	r3, r3, #8
 800977a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f003 0304 	and.w	r3, r3, #4
 8009782:	2b04      	cmp	r3, #4
 8009784:	d126      	bne.n	80097d4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	7a5b      	ldrb	r3, [r3, #9]
 800978a:	2b02      	cmp	r3, #2
 800978c:	d113      	bne.n	80097b6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8009794:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009798:	d106      	bne.n	80097a8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2102      	movs	r1, #2
 80097a0:	4618      	mov	r0, r3
 80097a2:	f007 f9ab 	bl	8010afc <USB_InitFSLSPClkSel>
 80097a6:	e011      	b.n	80097cc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2101      	movs	r1, #1
 80097ae:	4618      	mov	r0, r3
 80097b0:	f007 f9a4 	bl	8010afc <USB_InitFSLSPClkSel>
 80097b4:	e00a      	b.n	80097cc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	79db      	ldrb	r3, [r3, #7]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d106      	bne.n	80097cc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80097c4:	461a      	mov	r2, r3
 80097c6:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80097ca:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f00d f945 	bl	8016a5c <HAL_HCD_PortEnabled_Callback>
 80097d2:	e002      	b.n	80097da <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f00d f94f 	bl	8016a78 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f003 0320 	and.w	r3, r3, #32
 80097e0:	2b20      	cmp	r3, #32
 80097e2:	d103      	bne.n	80097ec <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	f043 0320 	orr.w	r3, r3, #32
 80097ea:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80097f2:	461a      	mov	r2, r3
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	6013      	str	r3, [r2, #0]
}
 80097f8:	bf00      	nop
 80097fa:	3718      	adds	r7, #24
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d101      	bne.n	8009812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	e08b      	b.n	800992a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009818:	b2db      	uxtb	r3, r3
 800981a:	2b00      	cmp	r3, #0
 800981c:	d106      	bne.n	800982c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f7fa fb6e 	bl	8003f08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2224      	movs	r2, #36	@ 0x24
 8009830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f022 0201 	bic.w	r2, r2, #1
 8009842:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685a      	ldr	r2, [r3, #4]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009850:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	689a      	ldr	r2, [r3, #8]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009860:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	2b01      	cmp	r3, #1
 8009868:	d107      	bne.n	800987a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	689a      	ldr	r2, [r3, #8]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009876:	609a      	str	r2, [r3, #8]
 8009878:	e006      	b.n	8009888 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	689a      	ldr	r2, [r3, #8]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009886:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	2b02      	cmp	r3, #2
 800988e:	d108      	bne.n	80098a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	685a      	ldr	r2, [r3, #4]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800989e:	605a      	str	r2, [r3, #4]
 80098a0:	e007      	b.n	80098b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	685a      	ldr	r2, [r3, #4]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80098b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	6859      	ldr	r1, [r3, #4]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	4b1d      	ldr	r3, [pc, #116]	@ (8009934 <HAL_I2C_Init+0x134>)
 80098be:	430b      	orrs	r3, r1
 80098c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68da      	ldr	r2, [r3, #12]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80098d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	691a      	ldr	r2, [r3, #16]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	695b      	ldr	r3, [r3, #20]
 80098da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	430a      	orrs	r2, r1
 80098ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	69d9      	ldr	r1, [r3, #28]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6a1a      	ldr	r2, [r3, #32]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	430a      	orrs	r2, r1
 80098fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f042 0201 	orr.w	r2, r2, #1
 800990a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2220      	movs	r2, #32
 8009916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	02008000 	.word	0x02008000

08009938 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b20      	cmp	r3, #32
 800994c:	d138      	bne.n	80099c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009954:	2b01      	cmp	r3, #1
 8009956:	d101      	bne.n	800995c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009958:	2302      	movs	r3, #2
 800995a:	e032      	b.n	80099c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2224      	movs	r2, #36	@ 0x24
 8009968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f022 0201 	bic.w	r2, r2, #1
 800997a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800998a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	6819      	ldr	r1, [r3, #0]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	683a      	ldr	r2, [r7, #0]
 8009998:	430a      	orrs	r2, r1
 800999a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f042 0201 	orr.w	r2, r2, #1
 80099aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2220      	movs	r2, #32
 80099b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80099bc:	2300      	movs	r3, #0
 80099be:	e000      	b.n	80099c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80099c0:	2302      	movs	r3, #2
  }
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	370c      	adds	r7, #12
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr

080099ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b085      	sub	sp, #20
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	2b20      	cmp	r3, #32
 80099e2:	d139      	bne.n	8009a58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d101      	bne.n	80099f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80099ee:	2302      	movs	r3, #2
 80099f0:	e033      	b.n	8009a5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2224      	movs	r2, #36	@ 0x24
 80099fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f022 0201 	bic.w	r2, r2, #1
 8009a10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009a20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	021b      	lsls	r3, r3, #8
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	68fa      	ldr	r2, [r7, #12]
 8009a32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f042 0201 	orr.w	r2, r2, #1
 8009a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2220      	movs	r2, #32
 8009a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009a54:	2300      	movs	r3, #0
 8009a56:	e000      	b.n	8009a5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009a58:	2302      	movs	r3, #2
  }
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3714      	adds	r7, #20
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr

08009a66 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b084      	sub	sp, #16
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d101      	bne.n	8009a78 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	e08f      	b.n	8009b98 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d106      	bne.n	8009a92 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f7fa fae3 	bl	8004058 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2202      	movs	r2, #2
 8009a96:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	699a      	ldr	r2, [r3, #24]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009aa8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	6999      	ldr	r1, [r3, #24]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685a      	ldr	r2, [r3, #4]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009abe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	430a      	orrs	r2, r1
 8009acc:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	695b      	ldr	r3, [r3, #20]
 8009ad2:	041b      	lsls	r3, r3, #16
 8009ad4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6999      	ldr	r1, [r3, #24]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	430a      	orrs	r2, r1
 8009ae2:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	69db      	ldr	r3, [r3, #28]
 8009ae8:	041b      	lsls	r3, r3, #16
 8009aea:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a19      	ldr	r1, [r3, #32]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	430a      	orrs	r2, r1
 8009af8:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009afe:	041b      	lsls	r3, r3, #16
 8009b00:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68fa      	ldr	r2, [r7, #12]
 8009b0c:	430a      	orrs	r2, r1
 8009b0e:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b14:	041b      	lsls	r3, r3, #16
 8009b16:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	430a      	orrs	r2, r1
 8009b24:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009b2c:	021b      	lsls	r3, r3, #8
 8009b2e:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009b36:	041b      	lsls	r3, r3, #16
 8009b38:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009b48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009b50:	68ba      	ldr	r2, [r7, #8]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8009b5c:	431a      	orrs	r2, r3
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	430a      	orrs	r2, r1
 8009b64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f042 0206 	orr.w	r2, r2, #6
 8009b74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	699a      	ldr	r2, [r3, #24]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f042 0201 	orr.w	r2, r2, #1
 8009b84:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2201      	movs	r2, #1
 8009b92:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bb6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f003 0304 	and.w	r3, r3, #4
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d023      	beq.n	8009c0a <HAL_LTDC_IRQHandler+0x6a>
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	f003 0304 	and.w	r3, r3, #4
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d01e      	beq.n	8009c0a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f022 0204 	bic.w	r2, r2, #4
 8009bda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2204      	movs	r2, #4
 8009be2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009bea:	f043 0201 	orr.w	r2, r3, #1
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2204      	movs	r2, #4
 8009bf8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 f86f 	bl	8009ce8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f003 0302 	and.w	r3, r3, #2
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d023      	beq.n	8009c5c <HAL_LTDC_IRQHandler+0xbc>
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	f003 0302 	and.w	r3, r3, #2
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d01e      	beq.n	8009c5c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f022 0202 	bic.w	r2, r2, #2
 8009c2c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	2202      	movs	r2, #2
 8009c34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009c3c:	f043 0202 	orr.w	r2, r3, #2
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2204      	movs	r2, #4
 8009c4a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 f846 	bl	8009ce8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d01b      	beq.n	8009c9e <HAL_LTDC_IRQHandler+0xfe>
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	f003 0301 	and.w	r3, r3, #1
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d016      	beq.n	8009c9e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f022 0201 	bic.w	r2, r2, #1
 8009c7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2201      	movs	r2, #1
 8009c86:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f82f 	bl	8009cfc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f003 0308 	and.w	r3, r3, #8
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d01b      	beq.n	8009ce0 <HAL_LTDC_IRQHandler+0x140>
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	f003 0308 	and.w	r3, r3, #8
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d016      	beq.n	8009ce0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f022 0208 	bic.w	r2, r2, #8
 8009cc0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2208      	movs	r2, #8
 8009cc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f818 	bl	8009d10 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009ce0:	bf00      	nop
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009cf0:	bf00      	nop
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009d18:	bf00      	nop
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009d24:	b5b0      	push	{r4, r5, r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d101      	bne.n	8009d3e <HAL_LTDC_ConfigLayer+0x1a>
 8009d3a:	2302      	movs	r3, #2
 8009d3c:	e02c      	b.n	8009d98 <HAL_LTDC_ConfigLayer+0x74>
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2201      	movs	r2, #1
 8009d42:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2202      	movs	r2, #2
 8009d4a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2134      	movs	r1, #52	@ 0x34
 8009d54:	fb01 f303 	mul.w	r3, r1, r3
 8009d58:	4413      	add	r3, r2
 8009d5a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	4614      	mov	r4, r2
 8009d62:	461d      	mov	r5, r3
 8009d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d70:	682b      	ldr	r3, [r5, #0]
 8009d72:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	68b9      	ldr	r1, [r7, #8]
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f000 f811 	bl	8009da0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2201      	movs	r2, #1
 8009d84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2200      	movs	r2, #0
 8009d92:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bdb0      	pop	{r4, r5, r7, pc}

08009da0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b089      	sub	sp, #36	@ 0x24
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	685a      	ldr	r2, [r3, #4]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	0c1b      	lsrs	r3, r3, #16
 8009db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dbc:	4413      	add	r3, r2
 8009dbe:	041b      	lsls	r3, r3, #16
 8009dc0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	01db      	lsls	r3, r3, #7
 8009dcc:	4413      	add	r3, r2
 8009dce:	3384      	adds	r3, #132	@ 0x84
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	6812      	ldr	r2, [r2, #0]
 8009dd6:	4611      	mov	r1, r2
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	01d2      	lsls	r2, r2, #7
 8009ddc:	440a      	add	r2, r1
 8009dde:	3284      	adds	r2, #132	@ 0x84
 8009de0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009de4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	0c1b      	lsrs	r3, r3, #16
 8009df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009df6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009df8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4619      	mov	r1, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	01db      	lsls	r3, r3, #7
 8009e04:	440b      	add	r3, r1
 8009e06:	3384      	adds	r3, #132	@ 0x84
 8009e08:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009e0e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	68da      	ldr	r2, [r3, #12]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009e1e:	4413      	add	r3, r2
 8009e20:	041b      	lsls	r3, r3, #16
 8009e22:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	461a      	mov	r2, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	01db      	lsls	r3, r3, #7
 8009e2e:	4413      	add	r3, r2
 8009e30:	3384      	adds	r3, #132	@ 0x84
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	6812      	ldr	r2, [r2, #0]
 8009e38:	4611      	mov	r1, r2
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	01d2      	lsls	r2, r2, #7
 8009e3e:	440a      	add	r2, r1
 8009e40:	3284      	adds	r2, #132	@ 0x84
 8009e42:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009e46:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	689a      	ldr	r2, [r3, #8]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009e56:	4413      	add	r3, r2
 8009e58:	1c5a      	adds	r2, r3, #1
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4619      	mov	r1, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	01db      	lsls	r3, r3, #7
 8009e64:	440b      	add	r3, r1
 8009e66:	3384      	adds	r3, #132	@ 0x84
 8009e68:	4619      	mov	r1, r3
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	461a      	mov	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	01db      	lsls	r3, r3, #7
 8009e7a:	4413      	add	r3, r2
 8009e7c:	3384      	adds	r3, #132	@ 0x84
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	6812      	ldr	r2, [r2, #0]
 8009e84:	4611      	mov	r1, r2
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	01d2      	lsls	r2, r2, #7
 8009e8a:	440a      	add	r2, r1
 8009e8c:	3284      	adds	r2, #132	@ 0x84
 8009e8e:	f023 0307 	bic.w	r3, r3, #7
 8009e92:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	461a      	mov	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	01db      	lsls	r3, r3, #7
 8009e9e:	4413      	add	r3, r2
 8009ea0:	3384      	adds	r3, #132	@ 0x84
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	691b      	ldr	r3, [r3, #16]
 8009ea8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009eb0:	021b      	lsls	r3, r3, #8
 8009eb2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009eba:	041b      	lsls	r3, r3, #16
 8009ebc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	061b      	lsls	r3, r3, #24
 8009ec4:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009ecc:	461a      	mov	r2, r3
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	431a      	orrs	r2, r3
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	431a      	orrs	r2, r3
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4619      	mov	r1, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	01db      	lsls	r3, r3, #7
 8009ee0:	440b      	add	r3, r1
 8009ee2:	3384      	adds	r3, #132	@ 0x84
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	01db      	lsls	r3, r3, #7
 8009ef6:	4413      	add	r3, r2
 8009ef8:	3384      	adds	r3, #132	@ 0x84
 8009efa:	695b      	ldr	r3, [r3, #20]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	6812      	ldr	r2, [r2, #0]
 8009f00:	4611      	mov	r1, r2
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	01d2      	lsls	r2, r2, #7
 8009f06:	440a      	add	r2, r1
 8009f08:	3284      	adds	r2, #132	@ 0x84
 8009f0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009f0e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	461a      	mov	r2, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	01db      	lsls	r3, r3, #7
 8009f1a:	4413      	add	r3, r2
 8009f1c:	3384      	adds	r3, #132	@ 0x84
 8009f1e:	461a      	mov	r2, r3
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	695b      	ldr	r3, [r3, #20]
 8009f24:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	01db      	lsls	r3, r3, #7
 8009f30:	4413      	add	r3, r2
 8009f32:	3384      	adds	r3, #132	@ 0x84
 8009f34:	69da      	ldr	r2, [r3, #28]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	01db      	lsls	r3, r3, #7
 8009f40:	440b      	add	r3, r1
 8009f42:	3384      	adds	r3, #132	@ 0x84
 8009f44:	4619      	mov	r1, r3
 8009f46:	4b4f      	ldr	r3, [pc, #316]	@ (800a084 <LTDC_SetConfig+0x2e4>)
 8009f48:	4013      	ands	r3, r2
 8009f4a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	69da      	ldr	r2, [r3, #28]
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	6a1b      	ldr	r3, [r3, #32]
 8009f54:	68f9      	ldr	r1, [r7, #12]
 8009f56:	6809      	ldr	r1, [r1, #0]
 8009f58:	4608      	mov	r0, r1
 8009f5a:	6879      	ldr	r1, [r7, #4]
 8009f5c:	01c9      	lsls	r1, r1, #7
 8009f5e:	4401      	add	r1, r0
 8009f60:	3184      	adds	r1, #132	@ 0x84
 8009f62:	4313      	orrs	r3, r2
 8009f64:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	01db      	lsls	r3, r3, #7
 8009f70:	4413      	add	r3, r2
 8009f72:	3384      	adds	r3, #132	@ 0x84
 8009f74:	461a      	mov	r2, r3
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f7a:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d102      	bne.n	8009f8a <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 8009f84:	2304      	movs	r3, #4
 8009f86:	61fb      	str	r3, [r7, #28]
 8009f88:	e01b      	b.n	8009fc2 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d102      	bne.n	8009f98 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 8009f92:	2303      	movs	r3, #3
 8009f94:	61fb      	str	r3, [r7, #28]
 8009f96:	e014      	b.n	8009fc2 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	2b04      	cmp	r3, #4
 8009f9e:	d00b      	beq.n	8009fb8 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d007      	beq.n	8009fb8 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009fac:	2b03      	cmp	r3, #3
 8009fae:	d003      	beq.n	8009fb8 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009fb4:	2b07      	cmp	r3, #7
 8009fb6:	d102      	bne.n	8009fbe <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 8009fb8:	2302      	movs	r3, #2
 8009fba:	61fb      	str	r3, [r7, #28]
 8009fbc:	e001      	b.n	8009fc2 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	01db      	lsls	r3, r3, #7
 8009fcc:	4413      	add	r3, r2
 8009fce:	3384      	adds	r3, #132	@ 0x84
 8009fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	6812      	ldr	r2, [r2, #0]
 8009fd6:	4611      	mov	r1, r2
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	01d2      	lsls	r2, r2, #7
 8009fdc:	440a      	add	r2, r1
 8009fde:	3284      	adds	r2, #132	@ 0x84
 8009fe0:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8009fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fea:	69fa      	ldr	r2, [r7, #28]
 8009fec:	fb02 f303 	mul.w	r3, r2, r3
 8009ff0:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	6859      	ldr	r1, [r3, #4]
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	1acb      	subs	r3, r1, r3
 8009ffc:	69f9      	ldr	r1, [r7, #28]
 8009ffe:	fb01 f303 	mul.w	r3, r1, r3
 800a002:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a004:	68f9      	ldr	r1, [r7, #12]
 800a006:	6809      	ldr	r1, [r1, #0]
 800a008:	4608      	mov	r0, r1
 800a00a:	6879      	ldr	r1, [r7, #4]
 800a00c:	01c9      	lsls	r1, r1, #7
 800a00e:	4401      	add	r1, r0
 800a010:	3184      	adds	r1, #132	@ 0x84
 800a012:	4313      	orrs	r3, r2
 800a014:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	461a      	mov	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	01db      	lsls	r3, r3, #7
 800a020:	4413      	add	r3, r2
 800a022:	3384      	adds	r3, #132	@ 0x84
 800a024:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4619      	mov	r1, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	01db      	lsls	r3, r3, #7
 800a030:	440b      	add	r3, r1
 800a032:	3384      	adds	r3, #132	@ 0x84
 800a034:	4619      	mov	r1, r3
 800a036:	4b14      	ldr	r3, [pc, #80]	@ (800a088 <LTDC_SetConfig+0x2e8>)
 800a038:	4013      	ands	r3, r2
 800a03a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	461a      	mov	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	01db      	lsls	r3, r3, #7
 800a046:	4413      	add	r3, r2
 800a048:	3384      	adds	r3, #132	@ 0x84
 800a04a:	461a      	mov	r2, r3
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a050:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	461a      	mov	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	01db      	lsls	r3, r3, #7
 800a05c:	4413      	add	r3, r2
 800a05e:	3384      	adds	r3, #132	@ 0x84
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	6812      	ldr	r2, [r2, #0]
 800a066:	4611      	mov	r1, r2
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	01d2      	lsls	r2, r2, #7
 800a06c:	440a      	add	r2, r1
 800a06e:	3284      	adds	r2, #132	@ 0x84
 800a070:	f043 0301 	orr.w	r3, r3, #1
 800a074:	6013      	str	r3, [r2, #0]
}
 800a076:	bf00      	nop
 800a078:	3724      	adds	r7, #36	@ 0x24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	fffff8f8 	.word	0xfffff8f8
 800a088:	fffff800 	.word	0xfffff800

0800a08c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a08c:	b480      	push	{r7}
 800a08e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a090:	4b05      	ldr	r3, [pc, #20]	@ (800a0a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a04      	ldr	r2, [pc, #16]	@ (800a0a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a096:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a09a:	6013      	str	r3, [r2, #0]
}
 800a09c:	bf00      	nop
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	40007000 	.word	0x40007000

0800a0ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a0b6:	4b23      	ldr	r3, [pc, #140]	@ (800a144 <HAL_PWREx_EnableOverDrive+0x98>)
 800a0b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0ba:	4a22      	ldr	r2, [pc, #136]	@ (800a144 <HAL_PWREx_EnableOverDrive+0x98>)
 800a0bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0c0:	6413      	str	r3, [r2, #64]	@ 0x40
 800a0c2:	4b20      	ldr	r3, [pc, #128]	@ (800a144 <HAL_PWREx_EnableOverDrive+0x98>)
 800a0c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0ca:	603b      	str	r3, [r7, #0]
 800a0cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a0ce:	4b1e      	ldr	r3, [pc, #120]	@ (800a148 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a1d      	ldr	r2, [pc, #116]	@ (800a148 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a0d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a0d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a0da:	f7fb fd61 	bl	8005ba0 <HAL_GetTick>
 800a0de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a0e0:	e009      	b.n	800a0f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a0e2:	f7fb fd5d 	bl	8005ba0 <HAL_GetTick>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	1ad3      	subs	r3, r2, r3
 800a0ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a0f0:	d901      	bls.n	800a0f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a0f2:	2303      	movs	r3, #3
 800a0f4:	e022      	b.n	800a13c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a0f6:	4b14      	ldr	r3, [pc, #80]	@ (800a148 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a0fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a102:	d1ee      	bne.n	800a0e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a104:	4b10      	ldr	r3, [pc, #64]	@ (800a148 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a0f      	ldr	r2, [pc, #60]	@ (800a148 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a10a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a10e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a110:	f7fb fd46 	bl	8005ba0 <HAL_GetTick>
 800a114:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a116:	e009      	b.n	800a12c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a118:	f7fb fd42 	bl	8005ba0 <HAL_GetTick>
 800a11c:	4602      	mov	r2, r0
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	1ad3      	subs	r3, r2, r3
 800a122:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a126:	d901      	bls.n	800a12c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a128:	2303      	movs	r3, #3
 800a12a:	e007      	b.n	800a13c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a12c:	4b06      	ldr	r3, [pc, #24]	@ (800a148 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a134:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a138:	d1ee      	bne.n	800a118 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	40023800 	.word	0x40023800
 800a148:	40007000 	.word	0x40007000

0800a14c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af02      	add	r7, sp, #8
 800a152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a154:	f7fb fd24 	bl	8005ba0 <HAL_GetTick>
 800a158:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d101      	bne.n	800a164 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	e067      	b.n	800a234 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10b      	bne.n	800a188 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f7fa f835 	bl	80041e8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a17e:	f241 3188 	movw	r1, #5000	@ 0x1388
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f85e 	bl	800a244 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	3b01      	subs	r3, #1
 800a198:	021a      	lsls	r2, r3, #8
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	2120      	movs	r1, #32
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 f856 	bl	800a260 <QSPI_WaitFlagStateUntilTimeout>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a1b8:	7afb      	ldrb	r3, [r7, #11]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d135      	bne.n	800a22a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	4b1d      	ldr	r3, [pc, #116]	@ (800a23c <HAL_QSPI_Init+0xf0>)
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	6852      	ldr	r2, [r2, #4]
 800a1cc:	0611      	lsls	r1, r2, #24
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	68d2      	ldr	r2, [r2, #12]
 800a1d2:	4311      	orrs	r1, r2
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	69d2      	ldr	r2, [r2, #28]
 800a1d8:	4311      	orrs	r1, r2
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	6a12      	ldr	r2, [r2, #32]
 800a1de:	4311      	orrs	r1, r2
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	6812      	ldr	r2, [r2, #0]
 800a1e4:	430b      	orrs	r3, r1
 800a1e6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	685a      	ldr	r2, [r3, #4]
 800a1ee:	4b14      	ldr	r3, [pc, #80]	@ (800a240 <HAL_QSPI_Init+0xf4>)
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	6912      	ldr	r2, [r2, #16]
 800a1f6:	0411      	lsls	r1, r2, #16
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	6952      	ldr	r2, [r2, #20]
 800a1fc:	4311      	orrs	r1, r2
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	6992      	ldr	r2, [r2, #24]
 800a202:	4311      	orrs	r1, r2
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	6812      	ldr	r2, [r2, #0]
 800a208:	430b      	orrs	r3, r1
 800a20a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f042 0201 	orr.w	r2, r2, #1
 800a21a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2201      	movs	r2, #1
 800a226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800a232:	7afb      	ldrb	r3, [r7, #11]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	00ffff2f 	.word	0x00ffff2f
 800a240:	ffe0f8fe 	.word	0xffe0f8fe

0800a244 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	683a      	ldr	r2, [r7, #0]
 800a252:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800a254:	bf00      	nop
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	603b      	str	r3, [r7, #0]
 800a26c:	4613      	mov	r3, r2
 800a26e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a270:	e01a      	b.n	800a2a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a278:	d016      	beq.n	800a2a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a27a:	f7fb fc91 	bl	8005ba0 <HAL_GetTick>
 800a27e:	4602      	mov	r2, r0
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	1ad3      	subs	r3, r2, r3
 800a284:	69ba      	ldr	r2, [r7, #24]
 800a286:	429a      	cmp	r2, r3
 800a288:	d302      	bcc.n	800a290 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10b      	bne.n	800a2a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2204      	movs	r2, #4
 800a294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a29c:	f043 0201 	orr.w	r2, r3, #1
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e00e      	b.n	800a2c6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	689a      	ldr	r2, [r3, #8]
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	bf14      	ite	ne
 800a2b6:	2301      	movne	r3, #1
 800a2b8:	2300      	moveq	r3, #0
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	461a      	mov	r2, r3
 800a2be:	79fb      	ldrb	r3, [r7, #7]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d1d6      	bne.n	800a272 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
	...

0800a2d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b086      	sub	sp, #24
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d101      	bne.n	800a2e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e291      	b.n	800a80a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f003 0301 	and.w	r3, r3, #1
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	f000 8087 	beq.w	800a402 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a2f4:	4b96      	ldr	r3, [pc, #600]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	f003 030c 	and.w	r3, r3, #12
 800a2fc:	2b04      	cmp	r3, #4
 800a2fe:	d00c      	beq.n	800a31a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a300:	4b93      	ldr	r3, [pc, #588]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	f003 030c 	and.w	r3, r3, #12
 800a308:	2b08      	cmp	r3, #8
 800a30a:	d112      	bne.n	800a332 <HAL_RCC_OscConfig+0x62>
 800a30c:	4b90      	ldr	r3, [pc, #576]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a314:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a318:	d10b      	bne.n	800a332 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a31a:	4b8d      	ldr	r3, [pc, #564]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a322:	2b00      	cmp	r3, #0
 800a324:	d06c      	beq.n	800a400 <HAL_RCC_OscConfig+0x130>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d168      	bne.n	800a400 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e26b      	b.n	800a80a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a33a:	d106      	bne.n	800a34a <HAL_RCC_OscConfig+0x7a>
 800a33c:	4b84      	ldr	r3, [pc, #528]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a83      	ldr	r2, [pc, #524]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a342:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a346:	6013      	str	r3, [r2, #0]
 800a348:	e02e      	b.n	800a3a8 <HAL_RCC_OscConfig+0xd8>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d10c      	bne.n	800a36c <HAL_RCC_OscConfig+0x9c>
 800a352:	4b7f      	ldr	r3, [pc, #508]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a7e      	ldr	r2, [pc, #504]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a358:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a35c:	6013      	str	r3, [r2, #0]
 800a35e:	4b7c      	ldr	r3, [pc, #496]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a7b      	ldr	r2, [pc, #492]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a364:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a368:	6013      	str	r3, [r2, #0]
 800a36a:	e01d      	b.n	800a3a8 <HAL_RCC_OscConfig+0xd8>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a374:	d10c      	bne.n	800a390 <HAL_RCC_OscConfig+0xc0>
 800a376:	4b76      	ldr	r3, [pc, #472]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a75      	ldr	r2, [pc, #468]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a37c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a380:	6013      	str	r3, [r2, #0]
 800a382:	4b73      	ldr	r3, [pc, #460]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a72      	ldr	r2, [pc, #456]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a38c:	6013      	str	r3, [r2, #0]
 800a38e:	e00b      	b.n	800a3a8 <HAL_RCC_OscConfig+0xd8>
 800a390:	4b6f      	ldr	r3, [pc, #444]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a6e      	ldr	r2, [pc, #440]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a396:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a39a:	6013      	str	r3, [r2, #0]
 800a39c:	4b6c      	ldr	r3, [pc, #432]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a6b      	ldr	r2, [pc, #428]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a3a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a3a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d013      	beq.n	800a3d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3b0:	f7fb fbf6 	bl	8005ba0 <HAL_GetTick>
 800a3b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a3b6:	e008      	b.n	800a3ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a3b8:	f7fb fbf2 	bl	8005ba0 <HAL_GetTick>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	1ad3      	subs	r3, r2, r3
 800a3c2:	2b64      	cmp	r3, #100	@ 0x64
 800a3c4:	d901      	bls.n	800a3ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a3c6:	2303      	movs	r3, #3
 800a3c8:	e21f      	b.n	800a80a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a3ca:	4b61      	ldr	r3, [pc, #388]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d0f0      	beq.n	800a3b8 <HAL_RCC_OscConfig+0xe8>
 800a3d6:	e014      	b.n	800a402 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3d8:	f7fb fbe2 	bl	8005ba0 <HAL_GetTick>
 800a3dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a3de:	e008      	b.n	800a3f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a3e0:	f7fb fbde 	bl	8005ba0 <HAL_GetTick>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	1ad3      	subs	r3, r2, r3
 800a3ea:	2b64      	cmp	r3, #100	@ 0x64
 800a3ec:	d901      	bls.n	800a3f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	e20b      	b.n	800a80a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a3f2:	4b57      	ldr	r3, [pc, #348]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d1f0      	bne.n	800a3e0 <HAL_RCC_OscConfig+0x110>
 800a3fe:	e000      	b.n	800a402 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f003 0302 	and.w	r3, r3, #2
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d069      	beq.n	800a4e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a40e:	4b50      	ldr	r3, [pc, #320]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	f003 030c 	and.w	r3, r3, #12
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00b      	beq.n	800a432 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a41a:	4b4d      	ldr	r3, [pc, #308]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	f003 030c 	and.w	r3, r3, #12
 800a422:	2b08      	cmp	r3, #8
 800a424:	d11c      	bne.n	800a460 <HAL_RCC_OscConfig+0x190>
 800a426:	4b4a      	ldr	r3, [pc, #296]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d116      	bne.n	800a460 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a432:	4b47      	ldr	r3, [pc, #284]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f003 0302 	and.w	r3, r3, #2
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d005      	beq.n	800a44a <HAL_RCC_OscConfig+0x17a>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	2b01      	cmp	r3, #1
 800a444:	d001      	beq.n	800a44a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	e1df      	b.n	800a80a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a44a:	4b41      	ldr	r3, [pc, #260]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	00db      	lsls	r3, r3, #3
 800a458:	493d      	ldr	r1, [pc, #244]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a45a:	4313      	orrs	r3, r2
 800a45c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a45e:	e040      	b.n	800a4e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d023      	beq.n	800a4b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a468:	4b39      	ldr	r3, [pc, #228]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a38      	ldr	r2, [pc, #224]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a46e:	f043 0301 	orr.w	r3, r3, #1
 800a472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a474:	f7fb fb94 	bl	8005ba0 <HAL_GetTick>
 800a478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a47a:	e008      	b.n	800a48e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a47c:	f7fb fb90 	bl	8005ba0 <HAL_GetTick>
 800a480:	4602      	mov	r2, r0
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	1ad3      	subs	r3, r2, r3
 800a486:	2b02      	cmp	r3, #2
 800a488:	d901      	bls.n	800a48e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a48a:	2303      	movs	r3, #3
 800a48c:	e1bd      	b.n	800a80a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a48e:	4b30      	ldr	r3, [pc, #192]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f003 0302 	and.w	r3, r3, #2
 800a496:	2b00      	cmp	r3, #0
 800a498:	d0f0      	beq.n	800a47c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a49a:	4b2d      	ldr	r3, [pc, #180]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	00db      	lsls	r3, r3, #3
 800a4a8:	4929      	ldr	r1, [pc, #164]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	600b      	str	r3, [r1, #0]
 800a4ae:	e018      	b.n	800a4e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a4b0:	4b27      	ldr	r3, [pc, #156]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a26      	ldr	r2, [pc, #152]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a4b6:	f023 0301 	bic.w	r3, r3, #1
 800a4ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4bc:	f7fb fb70 	bl	8005ba0 <HAL_GetTick>
 800a4c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a4c2:	e008      	b.n	800a4d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4c4:	f7fb fb6c 	bl	8005ba0 <HAL_GetTick>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	1ad3      	subs	r3, r2, r3
 800a4ce:	2b02      	cmp	r3, #2
 800a4d0:	d901      	bls.n	800a4d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	e199      	b.n	800a80a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a4d6:	4b1e      	ldr	r3, [pc, #120]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 0302 	and.w	r3, r3, #2
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1f0      	bne.n	800a4c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f003 0308 	and.w	r3, r3, #8
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d038      	beq.n	800a560 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	695b      	ldr	r3, [r3, #20]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d019      	beq.n	800a52a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a4f6:	4b16      	ldr	r3, [pc, #88]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a4f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4fa:	4a15      	ldr	r2, [pc, #84]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a4fc:	f043 0301 	orr.w	r3, r3, #1
 800a500:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a502:	f7fb fb4d 	bl	8005ba0 <HAL_GetTick>
 800a506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a508:	e008      	b.n	800a51c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a50a:	f7fb fb49 	bl	8005ba0 <HAL_GetTick>
 800a50e:	4602      	mov	r2, r0
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	1ad3      	subs	r3, r2, r3
 800a514:	2b02      	cmp	r3, #2
 800a516:	d901      	bls.n	800a51c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a518:	2303      	movs	r3, #3
 800a51a:	e176      	b.n	800a80a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a51c:	4b0c      	ldr	r3, [pc, #48]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a51e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a520:	f003 0302 	and.w	r3, r3, #2
 800a524:	2b00      	cmp	r3, #0
 800a526:	d0f0      	beq.n	800a50a <HAL_RCC_OscConfig+0x23a>
 800a528:	e01a      	b.n	800a560 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a52a:	4b09      	ldr	r3, [pc, #36]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a52c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a52e:	4a08      	ldr	r2, [pc, #32]	@ (800a550 <HAL_RCC_OscConfig+0x280>)
 800a530:	f023 0301 	bic.w	r3, r3, #1
 800a534:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a536:	f7fb fb33 	bl	8005ba0 <HAL_GetTick>
 800a53a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a53c:	e00a      	b.n	800a554 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a53e:	f7fb fb2f 	bl	8005ba0 <HAL_GetTick>
 800a542:	4602      	mov	r2, r0
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	1ad3      	subs	r3, r2, r3
 800a548:	2b02      	cmp	r3, #2
 800a54a:	d903      	bls.n	800a554 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a54c:	2303      	movs	r3, #3
 800a54e:	e15c      	b.n	800a80a <HAL_RCC_OscConfig+0x53a>
 800a550:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a554:	4b91      	ldr	r3, [pc, #580]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a558:	f003 0302 	and.w	r3, r3, #2
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d1ee      	bne.n	800a53e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f003 0304 	and.w	r3, r3, #4
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f000 80a4 	beq.w	800a6b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a56e:	4b8b      	ldr	r3, [pc, #556]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a576:	2b00      	cmp	r3, #0
 800a578:	d10d      	bne.n	800a596 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a57a:	4b88      	ldr	r3, [pc, #544]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a57c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a57e:	4a87      	ldr	r2, [pc, #540]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a584:	6413      	str	r3, [r2, #64]	@ 0x40
 800a586:	4b85      	ldr	r3, [pc, #532]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a58a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a58e:	60bb      	str	r3, [r7, #8]
 800a590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a592:	2301      	movs	r3, #1
 800a594:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a596:	4b82      	ldr	r3, [pc, #520]	@ (800a7a0 <HAL_RCC_OscConfig+0x4d0>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d118      	bne.n	800a5d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a5a2:	4b7f      	ldr	r3, [pc, #508]	@ (800a7a0 <HAL_RCC_OscConfig+0x4d0>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a7e      	ldr	r2, [pc, #504]	@ (800a7a0 <HAL_RCC_OscConfig+0x4d0>)
 800a5a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a5ae:	f7fb faf7 	bl	8005ba0 <HAL_GetTick>
 800a5b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a5b4:	e008      	b.n	800a5c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5b6:	f7fb faf3 	bl	8005ba0 <HAL_GetTick>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	1ad3      	subs	r3, r2, r3
 800a5c0:	2b64      	cmp	r3, #100	@ 0x64
 800a5c2:	d901      	bls.n	800a5c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	e120      	b.n	800a80a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a5c8:	4b75      	ldr	r3, [pc, #468]	@ (800a7a0 <HAL_RCC_OscConfig+0x4d0>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d0f0      	beq.n	800a5b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d106      	bne.n	800a5ea <HAL_RCC_OscConfig+0x31a>
 800a5dc:	4b6f      	ldr	r3, [pc, #444]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a5de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5e0:	4a6e      	ldr	r2, [pc, #440]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a5e2:	f043 0301 	orr.w	r3, r3, #1
 800a5e6:	6713      	str	r3, [r2, #112]	@ 0x70
 800a5e8:	e02d      	b.n	800a646 <HAL_RCC_OscConfig+0x376>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d10c      	bne.n	800a60c <HAL_RCC_OscConfig+0x33c>
 800a5f2:	4b6a      	ldr	r3, [pc, #424]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a5f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5f6:	4a69      	ldr	r2, [pc, #420]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a5f8:	f023 0301 	bic.w	r3, r3, #1
 800a5fc:	6713      	str	r3, [r2, #112]	@ 0x70
 800a5fe:	4b67      	ldr	r3, [pc, #412]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a602:	4a66      	ldr	r2, [pc, #408]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a604:	f023 0304 	bic.w	r3, r3, #4
 800a608:	6713      	str	r3, [r2, #112]	@ 0x70
 800a60a:	e01c      	b.n	800a646 <HAL_RCC_OscConfig+0x376>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	2b05      	cmp	r3, #5
 800a612:	d10c      	bne.n	800a62e <HAL_RCC_OscConfig+0x35e>
 800a614:	4b61      	ldr	r3, [pc, #388]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a618:	4a60      	ldr	r2, [pc, #384]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a61a:	f043 0304 	orr.w	r3, r3, #4
 800a61e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a620:	4b5e      	ldr	r3, [pc, #376]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a624:	4a5d      	ldr	r2, [pc, #372]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a626:	f043 0301 	orr.w	r3, r3, #1
 800a62a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a62c:	e00b      	b.n	800a646 <HAL_RCC_OscConfig+0x376>
 800a62e:	4b5b      	ldr	r3, [pc, #364]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a632:	4a5a      	ldr	r2, [pc, #360]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a634:	f023 0301 	bic.w	r3, r3, #1
 800a638:	6713      	str	r3, [r2, #112]	@ 0x70
 800a63a:	4b58      	ldr	r3, [pc, #352]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a63c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a63e:	4a57      	ldr	r2, [pc, #348]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a640:	f023 0304 	bic.w	r3, r3, #4
 800a644:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d015      	beq.n	800a67a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a64e:	f7fb faa7 	bl	8005ba0 <HAL_GetTick>
 800a652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a654:	e00a      	b.n	800a66c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a656:	f7fb faa3 	bl	8005ba0 <HAL_GetTick>
 800a65a:	4602      	mov	r2, r0
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	1ad3      	subs	r3, r2, r3
 800a660:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a664:	4293      	cmp	r3, r2
 800a666:	d901      	bls.n	800a66c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a668:	2303      	movs	r3, #3
 800a66a:	e0ce      	b.n	800a80a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a66c:	4b4b      	ldr	r3, [pc, #300]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a66e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a670:	f003 0302 	and.w	r3, r3, #2
 800a674:	2b00      	cmp	r3, #0
 800a676:	d0ee      	beq.n	800a656 <HAL_RCC_OscConfig+0x386>
 800a678:	e014      	b.n	800a6a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a67a:	f7fb fa91 	bl	8005ba0 <HAL_GetTick>
 800a67e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a680:	e00a      	b.n	800a698 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a682:	f7fb fa8d 	bl	8005ba0 <HAL_GetTick>
 800a686:	4602      	mov	r2, r0
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	1ad3      	subs	r3, r2, r3
 800a68c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a690:	4293      	cmp	r3, r2
 800a692:	d901      	bls.n	800a698 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a694:	2303      	movs	r3, #3
 800a696:	e0b8      	b.n	800a80a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a698:	4b40      	ldr	r3, [pc, #256]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a69a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a69c:	f003 0302 	and.w	r3, r3, #2
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d1ee      	bne.n	800a682 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a6a4:	7dfb      	ldrb	r3, [r7, #23]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d105      	bne.n	800a6b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a6aa:	4b3c      	ldr	r3, [pc, #240]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a6ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6ae:	4a3b      	ldr	r2, [pc, #236]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a6b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a6b4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	699b      	ldr	r3, [r3, #24]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f000 80a4 	beq.w	800a808 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a6c0:	4b36      	ldr	r3, [pc, #216]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	f003 030c 	and.w	r3, r3, #12
 800a6c8:	2b08      	cmp	r3, #8
 800a6ca:	d06b      	beq.n	800a7a4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	699b      	ldr	r3, [r3, #24]
 800a6d0:	2b02      	cmp	r3, #2
 800a6d2:	d149      	bne.n	800a768 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6d4:	4b31      	ldr	r3, [pc, #196]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a30      	ldr	r2, [pc, #192]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a6da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a6de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6e0:	f7fb fa5e 	bl	8005ba0 <HAL_GetTick>
 800a6e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a6e6:	e008      	b.n	800a6fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6e8:	f7fb fa5a 	bl	8005ba0 <HAL_GetTick>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	d901      	bls.n	800a6fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a6f6:	2303      	movs	r3, #3
 800a6f8:	e087      	b.n	800a80a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a6fa:	4b28      	ldr	r3, [pc, #160]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a702:	2b00      	cmp	r3, #0
 800a704:	d1f0      	bne.n	800a6e8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	69da      	ldr	r2, [r3, #28]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a1b      	ldr	r3, [r3, #32]
 800a70e:	431a      	orrs	r2, r3
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a714:	019b      	lsls	r3, r3, #6
 800a716:	431a      	orrs	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a71c:	085b      	lsrs	r3, r3, #1
 800a71e:	3b01      	subs	r3, #1
 800a720:	041b      	lsls	r3, r3, #16
 800a722:	431a      	orrs	r2, r3
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a728:	061b      	lsls	r3, r3, #24
 800a72a:	4313      	orrs	r3, r2
 800a72c:	4a1b      	ldr	r2, [pc, #108]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a72e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a732:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a734:	4b19      	ldr	r3, [pc, #100]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a18      	ldr	r2, [pc, #96]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a73a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a73e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a740:	f7fb fa2e 	bl	8005ba0 <HAL_GetTick>
 800a744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a746:	e008      	b.n	800a75a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a748:	f7fb fa2a 	bl	8005ba0 <HAL_GetTick>
 800a74c:	4602      	mov	r2, r0
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	1ad3      	subs	r3, r2, r3
 800a752:	2b02      	cmp	r3, #2
 800a754:	d901      	bls.n	800a75a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800a756:	2303      	movs	r3, #3
 800a758:	e057      	b.n	800a80a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a75a:	4b10      	ldr	r3, [pc, #64]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a762:	2b00      	cmp	r3, #0
 800a764:	d0f0      	beq.n	800a748 <HAL_RCC_OscConfig+0x478>
 800a766:	e04f      	b.n	800a808 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a768:	4b0c      	ldr	r3, [pc, #48]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a0b      	ldr	r2, [pc, #44]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a76e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a774:	f7fb fa14 	bl	8005ba0 <HAL_GetTick>
 800a778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a77a:	e008      	b.n	800a78e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a77c:	f7fb fa10 	bl	8005ba0 <HAL_GetTick>
 800a780:	4602      	mov	r2, r0
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	1ad3      	subs	r3, r2, r3
 800a786:	2b02      	cmp	r3, #2
 800a788:	d901      	bls.n	800a78e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a78a:	2303      	movs	r3, #3
 800a78c:	e03d      	b.n	800a80a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a78e:	4b03      	ldr	r3, [pc, #12]	@ (800a79c <HAL_RCC_OscConfig+0x4cc>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1f0      	bne.n	800a77c <HAL_RCC_OscConfig+0x4ac>
 800a79a:	e035      	b.n	800a808 <HAL_RCC_OscConfig+0x538>
 800a79c:	40023800 	.word	0x40023800
 800a7a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a7a4:	4b1b      	ldr	r3, [pc, #108]	@ (800a814 <HAL_RCC_OscConfig+0x544>)
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	699b      	ldr	r3, [r3, #24]
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d028      	beq.n	800a804 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d121      	bne.n	800a804 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d11a      	bne.n	800a804 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a7ce:	68fa      	ldr	r2, [r7, #12]
 800a7d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a7d4:	4013      	ands	r3, r2
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a7da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d111      	bne.n	800a804 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ea:	085b      	lsrs	r3, r3, #1
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d107      	bne.n	800a804 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a800:	429a      	cmp	r2, r3
 800a802:	d001      	beq.n	800a808 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	e000      	b.n	800a80a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	40023800 	.word	0x40023800

0800a818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a822:	2300      	movs	r3, #0
 800a824:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d101      	bne.n	800a830 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e0d0      	b.n	800a9d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a830:	4b6a      	ldr	r3, [pc, #424]	@ (800a9dc <HAL_RCC_ClockConfig+0x1c4>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 030f 	and.w	r3, r3, #15
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d910      	bls.n	800a860 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a83e:	4b67      	ldr	r3, [pc, #412]	@ (800a9dc <HAL_RCC_ClockConfig+0x1c4>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f023 020f 	bic.w	r2, r3, #15
 800a846:	4965      	ldr	r1, [pc, #404]	@ (800a9dc <HAL_RCC_ClockConfig+0x1c4>)
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	4313      	orrs	r3, r2
 800a84c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a84e:	4b63      	ldr	r3, [pc, #396]	@ (800a9dc <HAL_RCC_ClockConfig+0x1c4>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f003 030f 	and.w	r3, r3, #15
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d001      	beq.n	800a860 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	e0b8      	b.n	800a9d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 0302 	and.w	r3, r3, #2
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d020      	beq.n	800a8ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f003 0304 	and.w	r3, r3, #4
 800a874:	2b00      	cmp	r3, #0
 800a876:	d005      	beq.n	800a884 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a878:	4b59      	ldr	r3, [pc, #356]	@ (800a9e0 <HAL_RCC_ClockConfig+0x1c8>)
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	4a58      	ldr	r2, [pc, #352]	@ (800a9e0 <HAL_RCC_ClockConfig+0x1c8>)
 800a87e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a882:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f003 0308 	and.w	r3, r3, #8
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d005      	beq.n	800a89c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a890:	4b53      	ldr	r3, [pc, #332]	@ (800a9e0 <HAL_RCC_ClockConfig+0x1c8>)
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	4a52      	ldr	r2, [pc, #328]	@ (800a9e0 <HAL_RCC_ClockConfig+0x1c8>)
 800a896:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a89a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a89c:	4b50      	ldr	r3, [pc, #320]	@ (800a9e0 <HAL_RCC_ClockConfig+0x1c8>)
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	494d      	ldr	r1, [pc, #308]	@ (800a9e0 <HAL_RCC_ClockConfig+0x1c8>)
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 0301 	and.w	r3, r3, #1
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d040      	beq.n	800a93c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d107      	bne.n	800a8d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8c2:	4b47      	ldr	r3, [pc, #284]	@ (800a9e0 <HAL_RCC_ClockConfig+0x1c8>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d115      	bne.n	800a8fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e07f      	b.n	800a9d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	d107      	bne.n	800a8ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a8da:	4b41      	ldr	r3, [pc, #260]	@ (800a9e0 <HAL_RCC_ClockConfig+0x1c8>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d109      	bne.n	800a8fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e073      	b.n	800a9d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8ea:	4b3d      	ldr	r3, [pc, #244]	@ (800a9e0 <HAL_RCC_ClockConfig+0x1c8>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f003 0302 	and.w	r3, r3, #2
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d101      	bne.n	800a8fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e06b      	b.n	800a9d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a8fa:	4b39      	ldr	r3, [pc, #228]	@ (800a9e0 <HAL_RCC_ClockConfig+0x1c8>)
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	f023 0203 	bic.w	r2, r3, #3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	4936      	ldr	r1, [pc, #216]	@ (800a9e0 <HAL_RCC_ClockConfig+0x1c8>)
 800a908:	4313      	orrs	r3, r2
 800a90a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a90c:	f7fb f948 	bl	8005ba0 <HAL_GetTick>
 800a910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a912:	e00a      	b.n	800a92a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a914:	f7fb f944 	bl	8005ba0 <HAL_GetTick>
 800a918:	4602      	mov	r2, r0
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a922:	4293      	cmp	r3, r2
 800a924:	d901      	bls.n	800a92a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a926:	2303      	movs	r3, #3
 800a928:	e053      	b.n	800a9d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a92a:	4b2d      	ldr	r3, [pc, #180]	@ (800a9e0 <HAL_RCC_ClockConfig+0x1c8>)
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	f003 020c 	and.w	r2, r3, #12
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	429a      	cmp	r2, r3
 800a93a:	d1eb      	bne.n	800a914 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a93c:	4b27      	ldr	r3, [pc, #156]	@ (800a9dc <HAL_RCC_ClockConfig+0x1c4>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f003 030f 	and.w	r3, r3, #15
 800a944:	683a      	ldr	r2, [r7, #0]
 800a946:	429a      	cmp	r2, r3
 800a948:	d210      	bcs.n	800a96c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a94a:	4b24      	ldr	r3, [pc, #144]	@ (800a9dc <HAL_RCC_ClockConfig+0x1c4>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f023 020f 	bic.w	r2, r3, #15
 800a952:	4922      	ldr	r1, [pc, #136]	@ (800a9dc <HAL_RCC_ClockConfig+0x1c4>)
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	4313      	orrs	r3, r2
 800a958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a95a:	4b20      	ldr	r3, [pc, #128]	@ (800a9dc <HAL_RCC_ClockConfig+0x1c4>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f003 030f 	and.w	r3, r3, #15
 800a962:	683a      	ldr	r2, [r7, #0]
 800a964:	429a      	cmp	r2, r3
 800a966:	d001      	beq.n	800a96c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	e032      	b.n	800a9d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 0304 	and.w	r3, r3, #4
 800a974:	2b00      	cmp	r3, #0
 800a976:	d008      	beq.n	800a98a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a978:	4b19      	ldr	r3, [pc, #100]	@ (800a9e0 <HAL_RCC_ClockConfig+0x1c8>)
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	4916      	ldr	r1, [pc, #88]	@ (800a9e0 <HAL_RCC_ClockConfig+0x1c8>)
 800a986:	4313      	orrs	r3, r2
 800a988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f003 0308 	and.w	r3, r3, #8
 800a992:	2b00      	cmp	r3, #0
 800a994:	d009      	beq.n	800a9aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a996:	4b12      	ldr	r3, [pc, #72]	@ (800a9e0 <HAL_RCC_ClockConfig+0x1c8>)
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	00db      	lsls	r3, r3, #3
 800a9a4:	490e      	ldr	r1, [pc, #56]	@ (800a9e0 <HAL_RCC_ClockConfig+0x1c8>)
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a9aa:	f000 f821 	bl	800a9f0 <HAL_RCC_GetSysClockFreq>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a9e0 <HAL_RCC_ClockConfig+0x1c8>)
 800a9b2:	689b      	ldr	r3, [r3, #8]
 800a9b4:	091b      	lsrs	r3, r3, #4
 800a9b6:	f003 030f 	and.w	r3, r3, #15
 800a9ba:	490a      	ldr	r1, [pc, #40]	@ (800a9e4 <HAL_RCC_ClockConfig+0x1cc>)
 800a9bc:	5ccb      	ldrb	r3, [r1, r3]
 800a9be:	fa22 f303 	lsr.w	r3, r2, r3
 800a9c2:	4a09      	ldr	r2, [pc, #36]	@ (800a9e8 <HAL_RCC_ClockConfig+0x1d0>)
 800a9c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a9c6:	4b09      	ldr	r3, [pc, #36]	@ (800a9ec <HAL_RCC_ClockConfig+0x1d4>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fa f91a 	bl	8004c04 <HAL_InitTick>

  return HAL_OK;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	40023c00 	.word	0x40023c00
 800a9e0:	40023800 	.word	0x40023800
 800a9e4:	0801b41c 	.word	0x0801b41c
 800a9e8:	2000001c 	.word	0x2000001c
 800a9ec:	20000068 	.word	0x20000068

0800a9f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a9f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9f4:	b090      	sub	sp, #64	@ 0x40
 800a9f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa00:	2300      	movs	r3, #0
 800aa02:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aa08:	4b59      	ldr	r3, [pc, #356]	@ (800ab70 <HAL_RCC_GetSysClockFreq+0x180>)
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	f003 030c 	and.w	r3, r3, #12
 800aa10:	2b08      	cmp	r3, #8
 800aa12:	d00d      	beq.n	800aa30 <HAL_RCC_GetSysClockFreq+0x40>
 800aa14:	2b08      	cmp	r3, #8
 800aa16:	f200 80a1 	bhi.w	800ab5c <HAL_RCC_GetSysClockFreq+0x16c>
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d002      	beq.n	800aa24 <HAL_RCC_GetSysClockFreq+0x34>
 800aa1e:	2b04      	cmp	r3, #4
 800aa20:	d003      	beq.n	800aa2a <HAL_RCC_GetSysClockFreq+0x3a>
 800aa22:	e09b      	b.n	800ab5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800aa24:	4b53      	ldr	r3, [pc, #332]	@ (800ab74 <HAL_RCC_GetSysClockFreq+0x184>)
 800aa26:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800aa28:	e09b      	b.n	800ab62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800aa2a:	4b53      	ldr	r3, [pc, #332]	@ (800ab78 <HAL_RCC_GetSysClockFreq+0x188>)
 800aa2c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800aa2e:	e098      	b.n	800ab62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800aa30:	4b4f      	ldr	r3, [pc, #316]	@ (800ab70 <HAL_RCC_GetSysClockFreq+0x180>)
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa38:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800aa3a:	4b4d      	ldr	r3, [pc, #308]	@ (800ab70 <HAL_RCC_GetSysClockFreq+0x180>)
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d028      	beq.n	800aa98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aa46:	4b4a      	ldr	r3, [pc, #296]	@ (800ab70 <HAL_RCC_GetSysClockFreq+0x180>)
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	099b      	lsrs	r3, r3, #6
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	623b      	str	r3, [r7, #32]
 800aa50:	627a      	str	r2, [r7, #36]	@ 0x24
 800aa52:	6a3b      	ldr	r3, [r7, #32]
 800aa54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800aa58:	2100      	movs	r1, #0
 800aa5a:	4b47      	ldr	r3, [pc, #284]	@ (800ab78 <HAL_RCC_GetSysClockFreq+0x188>)
 800aa5c:	fb03 f201 	mul.w	r2, r3, r1
 800aa60:	2300      	movs	r3, #0
 800aa62:	fb00 f303 	mul.w	r3, r0, r3
 800aa66:	4413      	add	r3, r2
 800aa68:	4a43      	ldr	r2, [pc, #268]	@ (800ab78 <HAL_RCC_GetSysClockFreq+0x188>)
 800aa6a:	fba0 1202 	umull	r1, r2, r0, r2
 800aa6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aa70:	460a      	mov	r2, r1
 800aa72:	62ba      	str	r2, [r7, #40]	@ 0x28
 800aa74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa76:	4413      	add	r3, r2
 800aa78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	61bb      	str	r3, [r7, #24]
 800aa80:	61fa      	str	r2, [r7, #28]
 800aa82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aa86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800aa8a:	f7f5 fc29 	bl	80002e0 <__aeabi_uldivmod>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	460b      	mov	r3, r1
 800aa92:	4613      	mov	r3, r2
 800aa94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa96:	e053      	b.n	800ab40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aa98:	4b35      	ldr	r3, [pc, #212]	@ (800ab70 <HAL_RCC_GetSysClockFreq+0x180>)
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	099b      	lsrs	r3, r3, #6
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	613b      	str	r3, [r7, #16]
 800aaa2:	617a      	str	r2, [r7, #20]
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800aaaa:	f04f 0b00 	mov.w	fp, #0
 800aaae:	4652      	mov	r2, sl
 800aab0:	465b      	mov	r3, fp
 800aab2:	f04f 0000 	mov.w	r0, #0
 800aab6:	f04f 0100 	mov.w	r1, #0
 800aaba:	0159      	lsls	r1, r3, #5
 800aabc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800aac0:	0150      	lsls	r0, r2, #5
 800aac2:	4602      	mov	r2, r0
 800aac4:	460b      	mov	r3, r1
 800aac6:	ebb2 080a 	subs.w	r8, r2, sl
 800aaca:	eb63 090b 	sbc.w	r9, r3, fp
 800aace:	f04f 0200 	mov.w	r2, #0
 800aad2:	f04f 0300 	mov.w	r3, #0
 800aad6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800aada:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800aade:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800aae2:	ebb2 0408 	subs.w	r4, r2, r8
 800aae6:	eb63 0509 	sbc.w	r5, r3, r9
 800aaea:	f04f 0200 	mov.w	r2, #0
 800aaee:	f04f 0300 	mov.w	r3, #0
 800aaf2:	00eb      	lsls	r3, r5, #3
 800aaf4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aaf8:	00e2      	lsls	r2, r4, #3
 800aafa:	4614      	mov	r4, r2
 800aafc:	461d      	mov	r5, r3
 800aafe:	eb14 030a 	adds.w	r3, r4, sl
 800ab02:	603b      	str	r3, [r7, #0]
 800ab04:	eb45 030b 	adc.w	r3, r5, fp
 800ab08:	607b      	str	r3, [r7, #4]
 800ab0a:	f04f 0200 	mov.w	r2, #0
 800ab0e:	f04f 0300 	mov.w	r3, #0
 800ab12:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ab16:	4629      	mov	r1, r5
 800ab18:	028b      	lsls	r3, r1, #10
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ab20:	4621      	mov	r1, r4
 800ab22:	028a      	lsls	r2, r1, #10
 800ab24:	4610      	mov	r0, r2
 800ab26:	4619      	mov	r1, r3
 800ab28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	60bb      	str	r3, [r7, #8]
 800ab2e:	60fa      	str	r2, [r7, #12]
 800ab30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ab34:	f7f5 fbd4 	bl	80002e0 <__aeabi_uldivmod>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ab40:	4b0b      	ldr	r3, [pc, #44]	@ (800ab70 <HAL_RCC_GetSysClockFreq+0x180>)
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	0c1b      	lsrs	r3, r3, #16
 800ab46:	f003 0303 	and.w	r3, r3, #3
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	005b      	lsls	r3, r3, #1
 800ab4e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800ab50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ab52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab54:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ab5a:	e002      	b.n	800ab62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ab5c:	4b05      	ldr	r3, [pc, #20]	@ (800ab74 <HAL_RCC_GetSysClockFreq+0x184>)
 800ab5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ab60:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ab62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3740      	adds	r7, #64	@ 0x40
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab6e:	bf00      	nop
 800ab70:	40023800 	.word	0x40023800
 800ab74:	00f42400 	.word	0x00f42400
 800ab78:	017d7840 	.word	0x017d7840

0800ab7c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ab80:	4b03      	ldr	r3, [pc, #12]	@ (800ab90 <HAL_RCC_GetHCLKFreq+0x14>)
 800ab82:	681b      	ldr	r3, [r3, #0]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	2000001c 	.word	0x2000001c

0800ab94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ab98:	f7ff fff0 	bl	800ab7c <HAL_RCC_GetHCLKFreq>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	4b05      	ldr	r3, [pc, #20]	@ (800abb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aba0:	689b      	ldr	r3, [r3, #8]
 800aba2:	0a9b      	lsrs	r3, r3, #10
 800aba4:	f003 0307 	and.w	r3, r3, #7
 800aba8:	4903      	ldr	r1, [pc, #12]	@ (800abb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800abaa:	5ccb      	ldrb	r3, [r1, r3]
 800abac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	40023800 	.word	0x40023800
 800abb8:	0801b42c 	.word	0x0801b42c

0800abbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800abc0:	f7ff ffdc 	bl	800ab7c <HAL_RCC_GetHCLKFreq>
 800abc4:	4602      	mov	r2, r0
 800abc6:	4b05      	ldr	r3, [pc, #20]	@ (800abdc <HAL_RCC_GetPCLK2Freq+0x20>)
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	0b5b      	lsrs	r3, r3, #13
 800abcc:	f003 0307 	and.w	r3, r3, #7
 800abd0:	4903      	ldr	r1, [pc, #12]	@ (800abe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800abd2:	5ccb      	ldrb	r3, [r1, r3]
 800abd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800abd8:	4618      	mov	r0, r3
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	40023800 	.word	0x40023800
 800abe0:	0801b42c 	.word	0x0801b42c

0800abe4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	220f      	movs	r2, #15
 800abf2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800abf4:	4b12      	ldr	r3, [pc, #72]	@ (800ac40 <HAL_RCC_GetClockConfig+0x5c>)
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	f003 0203 	and.w	r2, r3, #3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ac00:	4b0f      	ldr	r3, [pc, #60]	@ (800ac40 <HAL_RCC_GetClockConfig+0x5c>)
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ac0c:	4b0c      	ldr	r3, [pc, #48]	@ (800ac40 <HAL_RCC_GetClockConfig+0x5c>)
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ac18:	4b09      	ldr	r3, [pc, #36]	@ (800ac40 <HAL_RCC_GetClockConfig+0x5c>)
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	08db      	lsrs	r3, r3, #3
 800ac1e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ac26:	4b07      	ldr	r3, [pc, #28]	@ (800ac44 <HAL_RCC_GetClockConfig+0x60>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f003 020f 	and.w	r2, r3, #15
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	601a      	str	r2, [r3, #0]
}
 800ac32:	bf00      	nop
 800ac34:	370c      	adds	r7, #12
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	40023800 	.word	0x40023800
 800ac44:	40023c00 	.word	0x40023c00

0800ac48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b088      	sub	sp, #32
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ac50:	2300      	movs	r3, #0
 800ac52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800ac54:	2300      	movs	r3, #0
 800ac56:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800ac60:	2300      	movs	r3, #0
 800ac62:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f003 0301 	and.w	r3, r3, #1
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d012      	beq.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ac70:	4b69      	ldr	r3, [pc, #420]	@ (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	4a68      	ldr	r2, [pc, #416]	@ (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac76:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ac7a:	6093      	str	r3, [r2, #8]
 800ac7c:	4b66      	ldr	r3, [pc, #408]	@ (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac7e:	689a      	ldr	r2, [r3, #8]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac84:	4964      	ldr	r1, [pc, #400]	@ (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac86:	4313      	orrs	r3, r2
 800ac88:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d101      	bne.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800ac92:	2301      	movs	r3, #1
 800ac94:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d017      	beq.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aca2:	4b5d      	ldr	r3, [pc, #372]	@ (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aca8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acb0:	4959      	ldr	r1, [pc, #356]	@ (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acb2:	4313      	orrs	r3, r2
 800acb4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800acc0:	d101      	bne.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800acc2:	2301      	movs	r3, #1
 800acc4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acca:	2b00      	cmp	r3, #0
 800accc:	d101      	bne.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800acce:	2301      	movs	r3, #1
 800acd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d017      	beq.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800acde:	4b4e      	ldr	r3, [pc, #312]	@ (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ace0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ace4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acec:	494a      	ldr	r1, [pc, #296]	@ (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acee:	4313      	orrs	r3, r2
 800acf0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acf8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800acfc:	d101      	bne.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800acfe:	2301      	movs	r3, #1
 800ad00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d101      	bne.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d001      	beq.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f003 0320 	and.w	r3, r3, #32
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	f000 808b 	beq.w	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ad2c:	4b3a      	ldr	r3, [pc, #232]	@ (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad30:	4a39      	ldr	r2, [pc, #228]	@ (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad36:	6413      	str	r3, [r2, #64]	@ 0x40
 800ad38:	4b37      	ldr	r3, [pc, #220]	@ (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad40:	60bb      	str	r3, [r7, #8]
 800ad42:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ad44:	4b35      	ldr	r3, [pc, #212]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a34      	ldr	r2, [pc, #208]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ad4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad50:	f7fa ff26 	bl	8005ba0 <HAL_GetTick>
 800ad54:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ad56:	e008      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad58:	f7fa ff22 	bl	8005ba0 <HAL_GetTick>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	1ad3      	subs	r3, r2, r3
 800ad62:	2b64      	cmp	r3, #100	@ 0x64
 800ad64:	d901      	bls.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800ad66:	2303      	movs	r3, #3
 800ad68:	e357      	b.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ad6a:	4b2c      	ldr	r3, [pc, #176]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d0f0      	beq.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ad76:	4b28      	ldr	r3, [pc, #160]	@ (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad7e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d035      	beq.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad8e:	693a      	ldr	r2, [r7, #16]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d02e      	beq.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ad94:	4b20      	ldr	r3, [pc, #128]	@ (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad9c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ad9e:	4b1e      	ldr	r3, [pc, #120]	@ (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ada0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ada2:	4a1d      	ldr	r2, [pc, #116]	@ (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ada4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ada8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800adaa:	4b1b      	ldr	r3, [pc, #108]	@ (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adae:	4a1a      	ldr	r2, [pc, #104]	@ (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800adb4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800adb6:	4a18      	ldr	r2, [pc, #96]	@ (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800adbc:	4b16      	ldr	r3, [pc, #88]	@ (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adc0:	f003 0301 	and.w	r3, r3, #1
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d114      	bne.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adc8:	f7fa feea 	bl	8005ba0 <HAL_GetTick>
 800adcc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800adce:	e00a      	b.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800add0:	f7fa fee6 	bl	8005ba0 <HAL_GetTick>
 800add4:	4602      	mov	r2, r0
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	1ad3      	subs	r3, r2, r3
 800adda:	f241 3288 	movw	r2, #5000	@ 0x1388
 800adde:	4293      	cmp	r3, r2
 800ade0:	d901      	bls.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800ade2:	2303      	movs	r3, #3
 800ade4:	e319      	b.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ade6:	4b0c      	ldr	r3, [pc, #48]	@ (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ade8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adea:	f003 0302 	and.w	r3, r3, #2
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d0ee      	beq.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800adfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800adfe:	d111      	bne.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800ae00:	4b05      	ldr	r3, [pc, #20]	@ (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800ae0c:	4b04      	ldr	r3, [pc, #16]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800ae0e:	400b      	ands	r3, r1
 800ae10:	4901      	ldr	r1, [pc, #4]	@ (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae12:	4313      	orrs	r3, r2
 800ae14:	608b      	str	r3, [r1, #8]
 800ae16:	e00b      	b.n	800ae30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800ae18:	40023800 	.word	0x40023800
 800ae1c:	40007000 	.word	0x40007000
 800ae20:	0ffffcff 	.word	0x0ffffcff
 800ae24:	4baa      	ldr	r3, [pc, #680]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae26:	689b      	ldr	r3, [r3, #8]
 800ae28:	4aa9      	ldr	r2, [pc, #676]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae2a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800ae2e:	6093      	str	r3, [r2, #8]
 800ae30:	4ba7      	ldr	r3, [pc, #668]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae3c:	49a4      	ldr	r1, [pc, #656]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f003 0310 	and.w	r3, r3, #16
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d010      	beq.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ae4e:	4ba0      	ldr	r3, [pc, #640]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae54:	4a9e      	ldr	r2, [pc, #632]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ae5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800ae5e:	4b9c      	ldr	r3, [pc, #624]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae60:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae68:	4999      	ldr	r1, [pc, #612]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00a      	beq.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ae7c:	4b94      	ldr	r3, [pc, #592]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae82:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae8a:	4991      	ldr	r1, [pc, #580]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00a      	beq.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ae9e:	4b8c      	ldr	r3, [pc, #560]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aea4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aeac:	4988      	ldr	r1, [pc, #544]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00a      	beq.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800aec0:	4b83      	ldr	r3, [pc, #524]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aec6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aece:	4980      	ldr	r1, [pc, #512]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aed0:	4313      	orrs	r3, r2
 800aed2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d00a      	beq.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aee2:	4b7b      	ldr	r3, [pc, #492]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aee8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aef0:	4977      	ldr	r1, [pc, #476]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aef2:	4313      	orrs	r3, r2
 800aef4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af00:	2b00      	cmp	r3, #0
 800af02:	d00a      	beq.n	800af1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800af04:	4b72      	ldr	r3, [pc, #456]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af0a:	f023 0203 	bic.w	r2, r3, #3
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af12:	496f      	ldr	r1, [pc, #444]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af14:	4313      	orrs	r3, r2
 800af16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00a      	beq.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800af26:	4b6a      	ldr	r3, [pc, #424]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af2c:	f023 020c 	bic.w	r2, r3, #12
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af34:	4966      	ldr	r1, [pc, #408]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af36:	4313      	orrs	r3, r2
 800af38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af44:	2b00      	cmp	r3, #0
 800af46:	d00a      	beq.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800af48:	4b61      	ldr	r3, [pc, #388]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af4e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af56:	495e      	ldr	r1, [pc, #376]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af58:	4313      	orrs	r3, r2
 800af5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00a      	beq.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800af6a:	4b59      	ldr	r3, [pc, #356]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af70:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af78:	4955      	ldr	r1, [pc, #340]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af7a:	4313      	orrs	r3, r2
 800af7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d00a      	beq.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800af8c:	4b50      	ldr	r3, [pc, #320]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af92:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af9a:	494d      	ldr	r1, [pc, #308]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af9c:	4313      	orrs	r3, r2
 800af9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00a      	beq.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800afae:	4b48      	ldr	r3, [pc, #288]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afb4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afbc:	4944      	ldr	r1, [pc, #272]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afbe:	4313      	orrs	r3, r2
 800afc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00a      	beq.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800afd0:	4b3f      	ldr	r3, [pc, #252]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afd6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afde:	493c      	ldr	r1, [pc, #240]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afe0:	4313      	orrs	r3, r2
 800afe2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00a      	beq.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800aff2:	4b37      	ldr	r3, [pc, #220]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aff8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b000:	4933      	ldr	r1, [pc, #204]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b002:	4313      	orrs	r3, r2
 800b004:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b010:	2b00      	cmp	r3, #0
 800b012:	d00a      	beq.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b014:	4b2e      	ldr	r3, [pc, #184]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b01a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b022:	492b      	ldr	r1, [pc, #172]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b024:	4313      	orrs	r3, r2
 800b026:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b032:	2b00      	cmp	r3, #0
 800b034:	d011      	beq.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b036:	4b26      	ldr	r3, [pc, #152]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b03c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b044:	4922      	ldr	r1, [pc, #136]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b046:	4313      	orrs	r3, r2
 800b048:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b050:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b054:	d101      	bne.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b056:	2301      	movs	r3, #1
 800b058:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f003 0308 	and.w	r3, r3, #8
 800b062:	2b00      	cmp	r3, #0
 800b064:	d001      	beq.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b066:	2301      	movs	r3, #1
 800b068:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b072:	2b00      	cmp	r3, #0
 800b074:	d00a      	beq.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b076:	4b16      	ldr	r3, [pc, #88]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b07c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b084:	4912      	ldr	r1, [pc, #72]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b086:	4313      	orrs	r3, r2
 800b088:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00b      	beq.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b098:	4b0d      	ldr	r3, [pc, #52]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b09a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b09e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0a8:	4909      	ldr	r1, [pc, #36]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d006      	beq.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	f000 80d9 	beq.w	800b276 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b0c4:	4b02      	ldr	r3, [pc, #8]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a01      	ldr	r2, [pc, #4]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b0ce:	e001      	b.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800b0d0:	40023800 	.word	0x40023800
 800b0d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0d6:	f7fa fd63 	bl	8005ba0 <HAL_GetTick>
 800b0da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b0dc:	e008      	b.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b0de:	f7fa fd5f 	bl	8005ba0 <HAL_GetTick>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	1ad3      	subs	r3, r2, r3
 800b0e8:	2b64      	cmp	r3, #100	@ 0x64
 800b0ea:	d901      	bls.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	e194      	b.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b0f0:	4b6c      	ldr	r3, [pc, #432]	@ (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d1f0      	bne.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f003 0301 	and.w	r3, r3, #1
 800b104:	2b00      	cmp	r3, #0
 800b106:	d021      	beq.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x504>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d11d      	bne.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b110:	4b64      	ldr	r3, [pc, #400]	@ (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b112:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b116:	0c1b      	lsrs	r3, r3, #16
 800b118:	f003 0303 	and.w	r3, r3, #3
 800b11c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b11e:	4b61      	ldr	r3, [pc, #388]	@ (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b120:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b124:	0e1b      	lsrs	r3, r3, #24
 800b126:	f003 030f 	and.w	r3, r3, #15
 800b12a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	019a      	lsls	r2, r3, #6
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	041b      	lsls	r3, r3, #16
 800b136:	431a      	orrs	r2, r3
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	061b      	lsls	r3, r3, #24
 800b13c:	431a      	orrs	r2, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	689b      	ldr	r3, [r3, #8]
 800b142:	071b      	lsls	r3, r3, #28
 800b144:	4957      	ldr	r1, [pc, #348]	@ (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b146:	4313      	orrs	r3, r2
 800b148:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b154:	2b00      	cmp	r3, #0
 800b156:	d004      	beq.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b15c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b160:	d00a      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d02e      	beq.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b172:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b176:	d129      	bne.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b178:	4b4a      	ldr	r3, [pc, #296]	@ (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b17a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b17e:	0c1b      	lsrs	r3, r3, #16
 800b180:	f003 0303 	and.w	r3, r3, #3
 800b184:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b186:	4b47      	ldr	r3, [pc, #284]	@ (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b188:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b18c:	0f1b      	lsrs	r3, r3, #28
 800b18e:	f003 0307 	and.w	r3, r3, #7
 800b192:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	019a      	lsls	r2, r3, #6
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	041b      	lsls	r3, r3, #16
 800b19e:	431a      	orrs	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	061b      	lsls	r3, r3, #24
 800b1a6:	431a      	orrs	r2, r3
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	071b      	lsls	r3, r3, #28
 800b1ac:	493d      	ldr	r1, [pc, #244]	@ (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b1b4:	4b3b      	ldr	r3, [pc, #236]	@ (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b1b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1ba:	f023 021f 	bic.w	r2, r3, #31
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	4937      	ldr	r1, [pc, #220]	@ (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d01d      	beq.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b1d8:	4b32      	ldr	r3, [pc, #200]	@ (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b1da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1de:	0e1b      	lsrs	r3, r3, #24
 800b1e0:	f003 030f 	and.w	r3, r3, #15
 800b1e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b1e6:	4b2f      	ldr	r3, [pc, #188]	@ (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b1e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1ec:	0f1b      	lsrs	r3, r3, #28
 800b1ee:	f003 0307 	and.w	r3, r3, #7
 800b1f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	019a      	lsls	r2, r3, #6
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	041b      	lsls	r3, r3, #16
 800b200:	431a      	orrs	r2, r3
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	061b      	lsls	r3, r3, #24
 800b206:	431a      	orrs	r2, r3
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	071b      	lsls	r3, r3, #28
 800b20c:	4925      	ldr	r1, [pc, #148]	@ (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b20e:	4313      	orrs	r3, r2
 800b210:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d011      	beq.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	019a      	lsls	r2, r3, #6
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	691b      	ldr	r3, [r3, #16]
 800b22a:	041b      	lsls	r3, r3, #16
 800b22c:	431a      	orrs	r2, r3
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	061b      	lsls	r3, r3, #24
 800b234:	431a      	orrs	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	071b      	lsls	r3, r3, #28
 800b23c:	4919      	ldr	r1, [pc, #100]	@ (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b23e:	4313      	orrs	r3, r2
 800b240:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b244:	4b17      	ldr	r3, [pc, #92]	@ (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a16      	ldr	r2, [pc, #88]	@ (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b24a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b24e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b250:	f7fa fca6 	bl	8005ba0 <HAL_GetTick>
 800b254:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b256:	e008      	b.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b258:	f7fa fca2 	bl	8005ba0 <HAL_GetTick>
 800b25c:	4602      	mov	r2, r0
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	1ad3      	subs	r3, r2, r3
 800b262:	2b64      	cmp	r3, #100	@ 0x64
 800b264:	d901      	bls.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b266:	2303      	movs	r3, #3
 800b268:	e0d7      	b.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b26a:	4b0e      	ldr	r3, [pc, #56]	@ (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b272:	2b00      	cmp	r3, #0
 800b274:	d0f0      	beq.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b276:	69bb      	ldr	r3, [r7, #24]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	f040 80cd 	bne.w	800b418 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b27e:	4b09      	ldr	r3, [pc, #36]	@ (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4a08      	ldr	r2, [pc, #32]	@ (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b284:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b28a:	f7fa fc89 	bl	8005ba0 <HAL_GetTick>
 800b28e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b290:	e00a      	b.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b292:	f7fa fc85 	bl	8005ba0 <HAL_GetTick>
 800b296:	4602      	mov	r2, r0
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	1ad3      	subs	r3, r2, r3
 800b29c:	2b64      	cmp	r3, #100	@ 0x64
 800b29e:	d903      	bls.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b2a0:	2303      	movs	r3, #3
 800b2a2:	e0ba      	b.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800b2a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b2a8:	4b5e      	ldr	r3, [pc, #376]	@ (800b424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2b4:	d0ed      	beq.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d003      	beq.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x682>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d009      	beq.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d02e      	beq.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d12a      	bne.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b2de:	4b51      	ldr	r3, [pc, #324]	@ (800b424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b2e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2e4:	0c1b      	lsrs	r3, r3, #16
 800b2e6:	f003 0303 	and.w	r3, r3, #3
 800b2ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b2ec:	4b4d      	ldr	r3, [pc, #308]	@ (800b424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b2ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2f2:	0f1b      	lsrs	r3, r3, #28
 800b2f4:	f003 0307 	and.w	r3, r3, #7
 800b2f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	695b      	ldr	r3, [r3, #20]
 800b2fe:	019a      	lsls	r2, r3, #6
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	041b      	lsls	r3, r3, #16
 800b304:	431a      	orrs	r2, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	699b      	ldr	r3, [r3, #24]
 800b30a:	061b      	lsls	r3, r3, #24
 800b30c:	431a      	orrs	r2, r3
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	071b      	lsls	r3, r3, #28
 800b312:	4944      	ldr	r1, [pc, #272]	@ (800b424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b314:	4313      	orrs	r3, r2
 800b316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b31a:	4b42      	ldr	r3, [pc, #264]	@ (800b424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b31c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b320:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b328:	3b01      	subs	r3, #1
 800b32a:	021b      	lsls	r3, r3, #8
 800b32c:	493d      	ldr	r1, [pc, #244]	@ (800b424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b32e:	4313      	orrs	r3, r2
 800b330:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d022      	beq.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b344:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b348:	d11d      	bne.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b34a:	4b36      	ldr	r3, [pc, #216]	@ (800b424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b34c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b350:	0e1b      	lsrs	r3, r3, #24
 800b352:	f003 030f 	and.w	r3, r3, #15
 800b356:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b358:	4b32      	ldr	r3, [pc, #200]	@ (800b424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b35a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b35e:	0f1b      	lsrs	r3, r3, #28
 800b360:	f003 0307 	and.w	r3, r3, #7
 800b364:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	695b      	ldr	r3, [r3, #20]
 800b36a:	019a      	lsls	r2, r3, #6
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6a1b      	ldr	r3, [r3, #32]
 800b370:	041b      	lsls	r3, r3, #16
 800b372:	431a      	orrs	r2, r3
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	061b      	lsls	r3, r3, #24
 800b378:	431a      	orrs	r2, r3
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	071b      	lsls	r3, r3, #28
 800b37e:	4929      	ldr	r1, [pc, #164]	@ (800b424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b380:	4313      	orrs	r3, r2
 800b382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f003 0308 	and.w	r3, r3, #8
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d028      	beq.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b392:	4b24      	ldr	r3, [pc, #144]	@ (800b424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b398:	0e1b      	lsrs	r3, r3, #24
 800b39a:	f003 030f 	and.w	r3, r3, #15
 800b39e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b3a0:	4b20      	ldr	r3, [pc, #128]	@ (800b424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3a6:	0c1b      	lsrs	r3, r3, #16
 800b3a8:	f003 0303 	and.w	r3, r3, #3
 800b3ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	695b      	ldr	r3, [r3, #20]
 800b3b2:	019a      	lsls	r2, r3, #6
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	041b      	lsls	r3, r3, #16
 800b3b8:	431a      	orrs	r2, r3
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	061b      	lsls	r3, r3, #24
 800b3be:	431a      	orrs	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	69db      	ldr	r3, [r3, #28]
 800b3c4:	071b      	lsls	r3, r3, #28
 800b3c6:	4917      	ldr	r1, [pc, #92]	@ (800b424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b3ce:	4b15      	ldr	r3, [pc, #84]	@ (800b424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b3d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3dc:	4911      	ldr	r1, [pc, #68]	@ (800b424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b3e4:	4b0f      	ldr	r3, [pc, #60]	@ (800b424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a0e      	ldr	r2, [pc, #56]	@ (800b424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b3ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3f0:	f7fa fbd6 	bl	8005ba0 <HAL_GetTick>
 800b3f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b3f6:	e008      	b.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b3f8:	f7fa fbd2 	bl	8005ba0 <HAL_GetTick>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	1ad3      	subs	r3, r2, r3
 800b402:	2b64      	cmp	r3, #100	@ 0x64
 800b404:	d901      	bls.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b406:	2303      	movs	r3, #3
 800b408:	e007      	b.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b40a:	4b06      	ldr	r3, [pc, #24]	@ (800b424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b412:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b416:	d1ef      	bne.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3720      	adds	r7, #32
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	40023800 	.word	0x40023800

0800b428 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b428:	b480      	push	{r7}
 800b42a:	b087      	sub	sp, #28
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b430:	2300      	movs	r3, #0
 800b432:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800b434:	2300      	movs	r3, #0
 800b436:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800b438:	2300      	movs	r3, #0
 800b43a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800b43c:	2300      	movs	r3, #0
 800b43e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b446:	f040 808d 	bne.w	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b44a:	4b93      	ldr	r3, [pc, #588]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b44c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b450:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b458:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b460:	d07c      	beq.n	800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b468:	d87b      	bhi.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d004      	beq.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b476:	d039      	beq.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b478:	e073      	b.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b47a:	4b87      	ldr	r3, [pc, #540]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b482:	2b00      	cmp	r3, #0
 800b484:	d108      	bne.n	800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b486:	4b84      	ldr	r3, [pc, #528]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b48e:	4a83      	ldr	r2, [pc, #524]	@ (800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b490:	fbb2 f3f3 	udiv	r3, r2, r3
 800b494:	613b      	str	r3, [r7, #16]
 800b496:	e007      	b.n	800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b498:	4b7f      	ldr	r3, [pc, #508]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b4a0:	4a7f      	ldr	r2, [pc, #508]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b4a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4a6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b4a8:	4b7b      	ldr	r3, [pc, #492]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4ae:	0e1b      	lsrs	r3, r3, #24
 800b4b0:	f003 030f 	and.w	r3, r3, #15
 800b4b4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b4b6:	4b78      	ldr	r3, [pc, #480]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4bc:	099b      	lsrs	r3, r3, #6
 800b4be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4c2:	693a      	ldr	r2, [r7, #16]
 800b4c4:	fb03 f202 	mul.w	r2, r3, r2
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ce:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b4d0:	4b71      	ldr	r3, [pc, #452]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b4d6:	0a1b      	lsrs	r3, r3, #8
 800b4d8:	f003 031f 	and.w	r3, r3, #31
 800b4dc:	3301      	adds	r3, #1
 800b4de:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b4e0:	697a      	ldr	r2, [r7, #20]
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4e8:	617b      	str	r3, [r7, #20]
        break;
 800b4ea:	e03b      	b.n	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b4ec:	4b6a      	ldr	r3, [pc, #424]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d108      	bne.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b4f8:	4b67      	ldr	r3, [pc, #412]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b500:	4a66      	ldr	r2, [pc, #408]	@ (800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b502:	fbb2 f3f3 	udiv	r3, r2, r3
 800b506:	613b      	str	r3, [r7, #16]
 800b508:	e007      	b.n	800b51a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b50a:	4b63      	ldr	r3, [pc, #396]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b512:	4a63      	ldr	r2, [pc, #396]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b514:	fbb2 f3f3 	udiv	r3, r2, r3
 800b518:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b51a:	4b5f      	ldr	r3, [pc, #380]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b51c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b520:	0e1b      	lsrs	r3, r3, #24
 800b522:	f003 030f 	and.w	r3, r3, #15
 800b526:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b528:	4b5b      	ldr	r3, [pc, #364]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b52a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b52e:	099b      	lsrs	r3, r3, #6
 800b530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b534:	693a      	ldr	r2, [r7, #16]
 800b536:	fb03 f202 	mul.w	r2, r3, r2
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b540:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b542:	4b55      	ldr	r3, [pc, #340]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b544:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b548:	f003 031f 	and.w	r3, r3, #31
 800b54c:	3301      	adds	r3, #1
 800b54e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b550:	697a      	ldr	r2, [r7, #20]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	fbb2 f3f3 	udiv	r3, r2, r3
 800b558:	617b      	str	r3, [r7, #20]
        break;
 800b55a:	e003      	b.n	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b55c:	4b51      	ldr	r3, [pc, #324]	@ (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b55e:	617b      	str	r3, [r7, #20]
        break;
 800b560:	e000      	b.n	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800b562:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b56a:	f040 808d 	bne.w	800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b56e:	4b4a      	ldr	r3, [pc, #296]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b570:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b574:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b57c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b584:	d07c      	beq.n	800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b58c:	d87b      	bhi.n	800b686 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d004      	beq.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b59a:	d039      	beq.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b59c:	e073      	b.n	800b686 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b59e:	4b3e      	ldr	r3, [pc, #248]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d108      	bne.n	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b5aa:	4b3b      	ldr	r3, [pc, #236]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b5b2:	4a3a      	ldr	r2, [pc, #232]	@ (800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b5b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5b8:	613b      	str	r3, [r7, #16]
 800b5ba:	e007      	b.n	800b5cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b5bc:	4b36      	ldr	r3, [pc, #216]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b5c4:	4a36      	ldr	r2, [pc, #216]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b5c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ca:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b5cc:	4b32      	ldr	r3, [pc, #200]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5d2:	0e1b      	lsrs	r3, r3, #24
 800b5d4:	f003 030f 	and.w	r3, r3, #15
 800b5d8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b5da:	4b2f      	ldr	r3, [pc, #188]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5e0:	099b      	lsrs	r3, r3, #6
 800b5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5e6:	693a      	ldr	r2, [r7, #16]
 800b5e8:	fb03 f202 	mul.w	r2, r3, r2
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5f2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b5f4:	4b28      	ldr	r3, [pc, #160]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5fa:	0a1b      	lsrs	r3, r3, #8
 800b5fc:	f003 031f 	and.w	r3, r3, #31
 800b600:	3301      	adds	r3, #1
 800b602:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b604:	697a      	ldr	r2, [r7, #20]
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	fbb2 f3f3 	udiv	r3, r2, r3
 800b60c:	617b      	str	r3, [r7, #20]
        break;
 800b60e:	e03b      	b.n	800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b610:	4b21      	ldr	r3, [pc, #132]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d108      	bne.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b61c:	4b1e      	ldr	r3, [pc, #120]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b624:	4a1d      	ldr	r2, [pc, #116]	@ (800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b626:	fbb2 f3f3 	udiv	r3, r2, r3
 800b62a:	613b      	str	r3, [r7, #16]
 800b62c:	e007      	b.n	800b63e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b62e:	4b1a      	ldr	r3, [pc, #104]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b636:	4a1a      	ldr	r2, [pc, #104]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b638:	fbb2 f3f3 	udiv	r3, r2, r3
 800b63c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b63e:	4b16      	ldr	r3, [pc, #88]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b644:	0e1b      	lsrs	r3, r3, #24
 800b646:	f003 030f 	and.w	r3, r3, #15
 800b64a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b64c:	4b12      	ldr	r3, [pc, #72]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b64e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b652:	099b      	lsrs	r3, r3, #6
 800b654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b658:	693a      	ldr	r2, [r7, #16]
 800b65a:	fb03 f202 	mul.w	r2, r3, r2
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	fbb2 f3f3 	udiv	r3, r2, r3
 800b664:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b666:	4b0c      	ldr	r3, [pc, #48]	@ (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b668:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b66c:	f003 031f 	and.w	r3, r3, #31
 800b670:	3301      	adds	r3, #1
 800b672:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b674:	697a      	ldr	r2, [r7, #20]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	fbb2 f3f3 	udiv	r3, r2, r3
 800b67c:	617b      	str	r3, [r7, #20]
        break;
 800b67e:	e003      	b.n	800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b680:	4b08      	ldr	r3, [pc, #32]	@ (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b682:	617b      	str	r3, [r7, #20]
        break;
 800b684:	e000      	b.n	800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800b686:	bf00      	nop
      }
    }
  }

  return frequency;
 800b688:	697b      	ldr	r3, [r7, #20]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	371c      	adds	r7, #28
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr
 800b696:	bf00      	nop
 800b698:	40023800 	.word	0x40023800
 800b69c:	00f42400 	.word	0x00f42400
 800b6a0:	017d7840 	.word	0x017d7840
 800b6a4:	00bb8000 	.word	0x00bb8000

0800b6a8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d101      	bne.n	800b6ba <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e071      	b.n	800b79e <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	7f5b      	ldrb	r3, [r3, #29]
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d105      	bne.n	800b6d0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f7f8 fe1c 	bl	8004308 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2202      	movs	r2, #2
 800b6d4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	f003 0310 	and.w	r3, r3, #16
 800b6e0:	2b10      	cmp	r3, #16
 800b6e2:	d053      	beq.n	800b78c <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	22ca      	movs	r2, #202	@ 0xca
 800b6ea:	625a      	str	r2, [r3, #36]	@ 0x24
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2253      	movs	r2, #83	@ 0x53
 800b6f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 fac7 	bl	800bc88 <RTC_EnterInitMode>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b6fe:	7bfb      	ldrb	r3, [r7, #15]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d12a      	bne.n	800b75a <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	6899      	ldr	r1, [r3, #8]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681a      	ldr	r2, [r3, #0]
 800b70e:	4b26      	ldr	r3, [pc, #152]	@ (800b7a8 <HAL_RTC_Init+0x100>)
 800b710:	400b      	ands	r3, r1
 800b712:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	6899      	ldr	r1, [r3, #8]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	685a      	ldr	r2, [r3, #4]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	691b      	ldr	r3, [r3, #16]
 800b722:	431a      	orrs	r2, r3
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	695b      	ldr	r3, [r3, #20]
 800b728:	431a      	orrs	r2, r3
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	430a      	orrs	r2, r1
 800b730:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	68d2      	ldr	r2, [r2, #12]
 800b73a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	6919      	ldr	r1, [r3, #16]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	041a      	lsls	r2, r3, #16
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	430a      	orrs	r2, r1
 800b74e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 fad0 	bl	800bcf6 <RTC_ExitInitMode>
 800b756:	4603      	mov	r3, r0
 800b758:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b75a:	7bfb      	ldrb	r3, [r7, #15]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d110      	bne.n	800b782 <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f022 0208 	bic.w	r2, r2, #8
 800b76e:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	699a      	ldr	r2, [r3, #24]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	430a      	orrs	r2, r1
 800b780:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	22ff      	movs	r2, #255	@ 0xff
 800b788:	625a      	str	r2, [r3, #36]	@ 0x24
 800b78a:	e001      	b.n	800b790 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800b78c:	2300      	movs	r3, #0
 800b78e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800b790:	7bfb      	ldrb	r3, [r7, #15]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d102      	bne.n	800b79c <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2201      	movs	r2, #1
 800b79a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800b79c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3710      	adds	r7, #16
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	ff8fffbf 	.word	0xff8fffbf

0800b7ac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b7ac:	b590      	push	{r4, r7, lr}
 800b7ae:	b087      	sub	sp, #28
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	7f1b      	ldrb	r3, [r3, #28]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d101      	bne.n	800b7c8 <HAL_RTC_SetTime+0x1c>
 800b7c4:	2302      	movs	r3, #2
 800b7c6:	e085      	b.n	800b8d4 <HAL_RTC_SetTime+0x128>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2202      	movs	r2, #2
 800b7d2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d126      	bne.n	800b828 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d102      	bne.n	800b7ee <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f000 faa4 	bl	800bd40 <RTC_ByteToBcd2>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	785b      	ldrb	r3, [r3, #1]
 800b800:	4618      	mov	r0, r3
 800b802:	f000 fa9d 	bl	800bd40 <RTC_ByteToBcd2>
 800b806:	4603      	mov	r3, r0
 800b808:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b80a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	789b      	ldrb	r3, [r3, #2]
 800b810:	4618      	mov	r0, r3
 800b812:	f000 fa95 	bl	800bd40 <RTC_ByteToBcd2>
 800b816:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b818:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	78db      	ldrb	r3, [r3, #3]
 800b820:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b822:	4313      	orrs	r3, r2
 800b824:	617b      	str	r3, [r7, #20]
 800b826:	e018      	b.n	800b85a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b832:	2b00      	cmp	r3, #0
 800b834:	d102      	bne.n	800b83c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	2200      	movs	r2, #0
 800b83a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	785b      	ldrb	r3, [r3, #1]
 800b846:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b848:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800b84a:	68ba      	ldr	r2, [r7, #8]
 800b84c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b84e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	78db      	ldrb	r3, [r3, #3]
 800b854:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b856:	4313      	orrs	r3, r2
 800b858:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	22ca      	movs	r2, #202	@ 0xca
 800b860:	625a      	str	r2, [r3, #36]	@ 0x24
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	2253      	movs	r2, #83	@ 0x53
 800b868:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	f000 fa0c 	bl	800bc88 <RTC_EnterInitMode>
 800b870:	4603      	mov	r3, r0
 800b872:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b874:	7cfb      	ldrb	r3, [r7, #19]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d11e      	bne.n	800b8b8 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	6979      	ldr	r1, [r7, #20]
 800b880:	4b16      	ldr	r3, [pc, #88]	@ (800b8dc <HAL_RTC_SetTime+0x130>)
 800b882:	400b      	ands	r3, r1
 800b884:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	689a      	ldr	r2, [r3, #8]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b894:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	6899      	ldr	r1, [r3, #8]
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	68da      	ldr	r2, [r3, #12]
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	691b      	ldr	r3, [r3, #16]
 800b8a4:	431a      	orrs	r2, r3
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	430a      	orrs	r2, r1
 800b8ac:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b8ae:	68f8      	ldr	r0, [r7, #12]
 800b8b0:	f000 fa21 	bl	800bcf6 <RTC_ExitInitMode>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b8b8:	7cfb      	ldrb	r3, [r7, #19]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d102      	bne.n	800b8c4 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	22ff      	movs	r2, #255	@ 0xff
 800b8ca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	771a      	strb	r2, [r3, #28]

  return status;
 800b8d2:	7cfb      	ldrb	r3, [r7, #19]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	371c      	adds	r7, #28
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd90      	pop	{r4, r7, pc}
 800b8dc:	007f7f7f 	.word	0x007f7f7f

0800b8e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b8e0:	b590      	push	{r4, r7, lr}
 800b8e2:	b087      	sub	sp, #28
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	7f1b      	ldrb	r3, [r3, #28]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d101      	bne.n	800b8fc <HAL_RTC_SetDate+0x1c>
 800b8f8:	2302      	movs	r3, #2
 800b8fa:	e06f      	b.n	800b9dc <HAL_RTC_SetDate+0xfc>
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2201      	movs	r2, #1
 800b900:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2202      	movs	r2, #2
 800b906:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d10e      	bne.n	800b92c <HAL_RTC_SetDate+0x4c>
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	785b      	ldrb	r3, [r3, #1]
 800b912:	f003 0310 	and.w	r3, r3, #16
 800b916:	2b00      	cmp	r3, #0
 800b918:	d008      	beq.n	800b92c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	785b      	ldrb	r3, [r3, #1]
 800b91e:	f023 0310 	bic.w	r3, r3, #16
 800b922:	b2db      	uxtb	r3, r3
 800b924:	330a      	adds	r3, #10
 800b926:	b2da      	uxtb	r2, r3
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d11c      	bne.n	800b96c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	78db      	ldrb	r3, [r3, #3]
 800b936:	4618      	mov	r0, r3
 800b938:	f000 fa02 	bl	800bd40 <RTC_ByteToBcd2>
 800b93c:	4603      	mov	r3, r0
 800b93e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	785b      	ldrb	r3, [r3, #1]
 800b944:	4618      	mov	r0, r3
 800b946:	f000 f9fb 	bl	800bd40 <RTC_ByteToBcd2>
 800b94a:	4603      	mov	r3, r0
 800b94c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b94e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	789b      	ldrb	r3, [r3, #2]
 800b954:	4618      	mov	r0, r3
 800b956:	f000 f9f3 	bl	800bd40 <RTC_ByteToBcd2>
 800b95a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b95c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b966:	4313      	orrs	r3, r2
 800b968:	617b      	str	r3, [r7, #20]
 800b96a:	e00e      	b.n	800b98a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	78db      	ldrb	r3, [r3, #3]
 800b970:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	785b      	ldrb	r3, [r3, #1]
 800b976:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b978:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b97e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	781b      	ldrb	r3, [r3, #0]
 800b984:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b986:	4313      	orrs	r3, r2
 800b988:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	22ca      	movs	r2, #202	@ 0xca
 800b990:	625a      	str	r2, [r3, #36]	@ 0x24
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2253      	movs	r2, #83	@ 0x53
 800b998:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f000 f974 	bl	800bc88 <RTC_EnterInitMode>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b9a4:	7cfb      	ldrb	r3, [r7, #19]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d10a      	bne.n	800b9c0 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	6979      	ldr	r1, [r7, #20]
 800b9b0:	4b0c      	ldr	r3, [pc, #48]	@ (800b9e4 <HAL_RTC_SetDate+0x104>)
 800b9b2:	400b      	ands	r3, r1
 800b9b4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b9b6:	68f8      	ldr	r0, [r7, #12]
 800b9b8:	f000 f99d 	bl	800bcf6 <RTC_ExitInitMode>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b9c0:	7cfb      	ldrb	r3, [r7, #19]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d102      	bne.n	800b9cc <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	22ff      	movs	r2, #255	@ 0xff
 800b9d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	771a      	strb	r2, [r3, #28]

  return status;
 800b9da:	7cfb      	ldrb	r3, [r7, #19]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	371c      	adds	r7, #28
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd90      	pop	{r4, r7, pc}
 800b9e4:	00ffff3f 	.word	0x00ffff3f

0800b9e8 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800b9e8:	b590      	push	{r4, r7, lr}
 800b9ea:	b089      	sub	sp, #36	@ 0x24
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	7f1b      	ldrb	r3, [r3, #28]
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d101      	bne.n	800ba0c <HAL_RTC_SetAlarm+0x24>
 800ba08:	2302      	movs	r3, #2
 800ba0a:	e113      	b.n	800bc34 <HAL_RTC_SetAlarm+0x24c>
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2202      	movs	r2, #2
 800ba16:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d137      	bne.n	800ba8e <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d102      	bne.n	800ba32 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f000 f982 	bl	800bd40 <RTC_ByteToBcd2>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	785b      	ldrb	r3, [r3, #1]
 800ba44:	4618      	mov	r0, r3
 800ba46:	f000 f97b 	bl	800bd40 <RTC_ByteToBcd2>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800ba4e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	789b      	ldrb	r3, [r3, #2]
 800ba54:	4618      	mov	r0, r3
 800ba56:	f000 f973 	bl	800bd40 <RTC_ByteToBcd2>
 800ba5a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800ba5c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	78db      	ldrb	r3, [r3, #3]
 800ba64:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800ba66:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ba70:	4618      	mov	r0, r3
 800ba72:	f000 f965 	bl	800bd40 <RTC_ByteToBcd2>
 800ba76:	4603      	mov	r3, r0
 800ba78:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800ba7a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800ba82:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	61fb      	str	r3, [r7, #28]
 800ba8c:	e023      	b.n	800bad6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d102      	bne.n	800baa2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	785b      	ldrb	r3, [r3, #1]
 800baac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800baae:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800bab0:	68ba      	ldr	r2, [r7, #8]
 800bab2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800bab4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	78db      	ldrb	r3, [r3, #3]
 800baba:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800babc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bac4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800bac6:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800bacc:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800bad2:	4313      	orrs	r3, r2
 800bad4:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800bade:	4313      	orrs	r3, r2
 800bae0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	22ca      	movs	r2, #202	@ 0xca
 800bae8:	625a      	str	r2, [r3, #36]	@ 0x24
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	2253      	movs	r2, #83	@ 0x53
 800baf0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bafa:	d148      	bne.n	800bb8e <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	689a      	ldr	r2, [r3, #8]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bb0a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	689a      	ldr	r2, [r3, #8]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bb1a:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	b2da      	uxtb	r2, r3
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800bb2c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bb2e:	f7fa f837 	bl	8005ba0 <HAL_GetTick>
 800bb32:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800bb34:	e013      	b.n	800bb5e <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bb36:	f7fa f833 	bl	8005ba0 <HAL_GetTick>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	69bb      	ldr	r3, [r7, #24]
 800bb3e:	1ad3      	subs	r3, r2, r3
 800bb40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bb44:	d90b      	bls.n	800bb5e <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	22ff      	movs	r2, #255	@ 0xff
 800bb4c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2203      	movs	r2, #3
 800bb52:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2200      	movs	r2, #0
 800bb58:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bb5a:	2303      	movs	r3, #3
 800bb5c:	e06a      	b.n	800bc34 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	f003 0301 	and.w	r3, r3, #1
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d0e4      	beq.n	800bb36 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	69fa      	ldr	r2, [r7, #28]
 800bb72:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	697a      	ldr	r2, [r7, #20]
 800bb7a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	689a      	ldr	r2, [r3, #8]
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bb8a:	609a      	str	r2, [r3, #8]
 800bb8c:	e047      	b.n	800bc1e <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	689a      	ldr	r2, [r3, #8]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800bb9c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	689a      	ldr	r2, [r3, #8]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bbac:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	b2da      	uxtb	r2, r3
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800bbbe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bbc0:	f7f9 ffee 	bl	8005ba0 <HAL_GetTick>
 800bbc4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800bbc6:	e013      	b.n	800bbf0 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bbc8:	f7f9 ffea 	bl	8005ba0 <HAL_GetTick>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	1ad3      	subs	r3, r2, r3
 800bbd2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bbd6:	d90b      	bls.n	800bbf0 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	22ff      	movs	r2, #255	@ 0xff
 800bbde:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2203      	movs	r2, #3
 800bbe4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bbec:	2303      	movs	r3, #3
 800bbee:	e021      	b.n	800bc34 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	68db      	ldr	r3, [r3, #12]
 800bbf6:	f003 0302 	and.w	r3, r3, #2
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d0e4      	beq.n	800bbc8 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	69fa      	ldr	r2, [r7, #28]
 800bc04:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	697a      	ldr	r2, [r7, #20]
 800bc0c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	689a      	ldr	r2, [r3, #8]
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bc1c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	22ff      	movs	r2, #255	@ 0xff
 800bc24:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2201      	movs	r2, #1
 800bc2a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bc32:	2300      	movs	r3, #0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3724      	adds	r7, #36	@ 0x24
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd90      	pop	{r4, r7, pc}

0800bc3c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bc44:	2300      	movs	r3, #0
 800bc46:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4a0d      	ldr	r2, [pc, #52]	@ (800bc84 <HAL_RTC_WaitForSynchro+0x48>)
 800bc4e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bc50:	f7f9 ffa6 	bl	8005ba0 <HAL_GetTick>
 800bc54:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bc56:	e009      	b.n	800bc6c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bc58:	f7f9 ffa2 	bl	8005ba0 <HAL_GetTick>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	1ad3      	subs	r3, r2, r3
 800bc62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bc66:	d901      	bls.n	800bc6c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800bc68:	2303      	movs	r3, #3
 800bc6a:	e007      	b.n	800bc7c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	68db      	ldr	r3, [r3, #12]
 800bc72:	f003 0320 	and.w	r3, r3, #32
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d0ee      	beq.n	800bc58 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3710      	adds	r7, #16
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}
 800bc84:	0001ff5f 	.word	0x0001ff5f

0800bc88 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bc90:	2300      	movs	r3, #0
 800bc92:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800bc94:	2300      	movs	r3, #0
 800bc96:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d122      	bne.n	800bcec <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	68da      	ldr	r2, [r3, #12]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bcb4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bcb6:	f7f9 ff73 	bl	8005ba0 <HAL_GetTick>
 800bcba:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bcbc:	e00c      	b.n	800bcd8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bcbe:	f7f9 ff6f 	bl	8005ba0 <HAL_GetTick>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	1ad3      	subs	r3, r2, r3
 800bcc8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bccc:	d904      	bls.n	800bcd8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2204      	movs	r2, #4
 800bcd2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	68db      	ldr	r3, [r3, #12]
 800bcde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d102      	bne.n	800bcec <RTC_EnterInitMode+0x64>
 800bce6:	7bfb      	ldrb	r3, [r7, #15]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d1e8      	bne.n	800bcbe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800bcec:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b084      	sub	sp, #16
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	68da      	ldr	r2, [r3, #12]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bd10:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	f003 0320 	and.w	r3, r3, #32
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d10a      	bne.n	800bd36 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f7ff ff8b 	bl	800bc3c <HAL_RTC_WaitForSynchro>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d004      	beq.n	800bd36 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2204      	movs	r2, #4
 800bd30:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800bd32:	2301      	movs	r3, #1
 800bd34:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800bd36:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3710      	adds	r7, #16
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b085      	sub	sp, #20
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	4603      	mov	r3, r0
 800bd48:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800bd4e:	e005      	b.n	800bd5c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	3301      	adds	r3, #1
 800bd54:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800bd56:	79fb      	ldrb	r3, [r7, #7]
 800bd58:	3b0a      	subs	r3, #10
 800bd5a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800bd5c:	79fb      	ldrb	r3, [r7, #7]
 800bd5e:	2b09      	cmp	r3, #9
 800bd60:	d8f6      	bhi.n	800bd50 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	011b      	lsls	r3, r3, #4
 800bd68:	b2da      	uxtb	r2, r3
 800bd6a:	79fb      	ldrb	r3, [r7, #7]
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	b2db      	uxtb	r3, r3
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3714      	adds	r7, #20
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b087      	sub	sp, #28
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	7f1b      	ldrb	r3, [r3, #28]
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d101      	bne.n	800bd98 <HAL_RTCEx_SetTimeStamp+0x1c>
 800bd94:	2302      	movs	r3, #2
 800bd96:	e050      	b.n	800be3a <HAL_RTCEx_SetTimeStamp+0xbe>
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2202      	movs	r2, #2
 800bda2:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f022 0206 	bic.w	r2, r2, #6
 800bdb2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	430a      	orrs	r2, r1
 800bdc2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	689a      	ldr	r2, [r3, #8]
 800bdca:	4b1f      	ldr	r3, [pc, #124]	@ (800be48 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800bdcc:	4013      	ands	r3, r2
 800bdce:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800bdd0:	697a      	ldr	r2, [r7, #20]
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	22ca      	movs	r2, #202	@ 0xca
 800bdde:	625a      	str	r2, [r3, #36]	@ 0x24
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2253      	movs	r2, #83	@ 0x53
 800bde6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	697a      	ldr	r2, [r7, #20]
 800bdee:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	b2da      	uxtb	r2, r3
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800be00:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	b2da      	uxtb	r2, r3
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800be12:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	689a      	ldr	r2, [r3, #8]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800be22:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	22ff      	movs	r2, #255	@ 0xff
 800be2a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2201      	movs	r2, #1
 800be30:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2200      	movs	r2, #0
 800be36:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	371c      	adds	r7, #28
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	fffff7f7 	.word	0xfffff7f7

0800be4c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b088      	sub	sp, #32
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800be54:	2300      	movs	r3, #0
 800be56:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800be58:	2300      	movs	r3, #0
 800be5a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800be5c:	2300      	movs	r3, #0
 800be5e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d101      	bne.n	800be6a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800be66:	2301      	movs	r3, #1
 800be68:	e156      	b.n	800c118 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800be70:	b2db      	uxtb	r3, r3
 800be72:	2b00      	cmp	r3, #0
 800be74:	d106      	bne.n	800be84 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f7f8 fe56 	bl	8004b30 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2202      	movs	r2, #2
 800be88:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 f95b 	bl	800c148 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	2b02      	cmp	r3, #2
 800be98:	d00c      	beq.n	800beb4 <HAL_SAI_Init+0x68>
 800be9a:	2b02      	cmp	r3, #2
 800be9c:	d80d      	bhi.n	800beba <HAL_SAI_Init+0x6e>
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d002      	beq.n	800bea8 <HAL_SAI_Init+0x5c>
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d003      	beq.n	800beae <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800bea6:	e008      	b.n	800beba <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800bea8:	2300      	movs	r3, #0
 800beaa:	61fb      	str	r3, [r7, #28]
      break;
 800beac:	e006      	b.n	800bebc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800beae:	2310      	movs	r3, #16
 800beb0:	61fb      	str	r3, [r7, #28]
      break;
 800beb2:	e003      	b.n	800bebc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800beb4:	2320      	movs	r3, #32
 800beb6:	61fb      	str	r3, [r7, #28]
      break;
 800beb8:	e000      	b.n	800bebc <HAL_SAI_Init+0x70>
      break;
 800beba:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	689b      	ldr	r3, [r3, #8]
 800bec0:	2b03      	cmp	r3, #3
 800bec2:	d81e      	bhi.n	800bf02 <HAL_SAI_Init+0xb6>
 800bec4:	a201      	add	r2, pc, #4	@ (adr r2, 800becc <HAL_SAI_Init+0x80>)
 800bec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beca:	bf00      	nop
 800becc:	0800bedd 	.word	0x0800bedd
 800bed0:	0800bee3 	.word	0x0800bee3
 800bed4:	0800beeb 	.word	0x0800beeb
 800bed8:	0800bef3 	.word	0x0800bef3
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800bedc:	2300      	movs	r3, #0
 800bede:	617b      	str	r3, [r7, #20]
    }
    break;
 800bee0:	e010      	b.n	800bf04 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800bee2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bee6:	617b      	str	r3, [r7, #20]
    }
    break;
 800bee8:	e00c      	b.n	800bf04 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800beea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800beee:	617b      	str	r3, [r7, #20]
    }
    break;
 800bef0:	e008      	b.n	800bf04 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bef2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bef6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800bef8:	69fb      	ldr	r3, [r7, #28]
 800befa:	f043 0301 	orr.w	r3, r3, #1
 800befe:	61fb      	str	r3, [r7, #28]
    }
    break;
 800bf00:	e000      	b.n	800bf04 <HAL_SAI_Init+0xb8>
    default:
      break;
 800bf02:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4a85      	ldr	r2, [pc, #532]	@ (800c120 <HAL_SAI_Init+0x2d4>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d004      	beq.n	800bf18 <HAL_SAI_Init+0xcc>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a84      	ldr	r2, [pc, #528]	@ (800c124 <HAL_SAI_Init+0x2d8>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d103      	bne.n	800bf20 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800bf18:	4a83      	ldr	r2, [pc, #524]	@ (800c128 <HAL_SAI_Init+0x2dc>)
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	6013      	str	r3, [r2, #0]
 800bf1e:	e002      	b.n	800bf26 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800bf20:	4a82      	ldr	r2, [pc, #520]	@ (800c12c <HAL_SAI_Init+0x2e0>)
 800bf22:	69fb      	ldr	r3, [r7, #28]
 800bf24:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	69db      	ldr	r3, [r3, #28]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d04c      	beq.n	800bfc8 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a7a      	ldr	r2, [pc, #488]	@ (800c120 <HAL_SAI_Init+0x2d4>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d004      	beq.n	800bf46 <HAL_SAI_Init+0xfa>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a78      	ldr	r2, [pc, #480]	@ (800c124 <HAL_SAI_Init+0x2d8>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d104      	bne.n	800bf50 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800bf46:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800bf4a:	f7ff fa6d 	bl	800b428 <HAL_RCCEx_GetPeriphCLKFreq>
 800bf4e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a76      	ldr	r2, [pc, #472]	@ (800c130 <HAL_SAI_Init+0x2e4>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d004      	beq.n	800bf64 <HAL_SAI_Init+0x118>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a75      	ldr	r2, [pc, #468]	@ (800c134 <HAL_SAI_Init+0x2e8>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d104      	bne.n	800bf6e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800bf64:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800bf68:	f7ff fa5e 	bl	800b428 <HAL_RCCEx_GetPeriphCLKFreq>
 800bf6c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800bf6e:	693a      	ldr	r2, [r7, #16]
 800bf70:	4613      	mov	r3, r2
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	4413      	add	r3, r2
 800bf76:	005b      	lsls	r3, r3, #1
 800bf78:	461a      	mov	r2, r3
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	69db      	ldr	r3, [r3, #28]
 800bf7e:	025b      	lsls	r3, r3, #9
 800bf80:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf84:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	4a6b      	ldr	r2, [pc, #428]	@ (800c138 <HAL_SAI_Init+0x2ec>)
 800bf8a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf8e:	08da      	lsrs	r2, r3, #3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800bf94:	68f9      	ldr	r1, [r7, #12]
 800bf96:	4b68      	ldr	r3, [pc, #416]	@ (800c138 <HAL_SAI_Init+0x2ec>)
 800bf98:	fba3 2301 	umull	r2, r3, r3, r1
 800bf9c:	08da      	lsrs	r2, r3, #3
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	4413      	add	r3, r2
 800bfa4:	005b      	lsls	r3, r3, #1
 800bfa6:	1aca      	subs	r2, r1, r3
 800bfa8:	2a08      	cmp	r2, #8
 800bfaa:	d904      	bls.n	800bfb6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6a1b      	ldr	r3, [r3, #32]
 800bfb0:	1c5a      	adds	r2, r3, #1
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfba:	2b04      	cmp	r3, #4
 800bfbc:	d104      	bne.n	800bfc8 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6a1b      	ldr	r3, [r3, #32]
 800bfc2:	085a      	lsrs	r2, r3, #1
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d003      	beq.n	800bfd8 <HAL_SAI_Init+0x18c>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	d109      	bne.n	800bfec <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d101      	bne.n	800bfe4 <HAL_SAI_Init+0x198>
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	e001      	b.n	800bfe8 <HAL_SAI_Init+0x19c>
 800bfe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bfe8:	61bb      	str	r3, [r7, #24]
 800bfea:	e008      	b.n	800bffe <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d102      	bne.n	800bffa <HAL_SAI_Init+0x1ae>
 800bff4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bff8:	e000      	b.n	800bffc <HAL_SAI_Init+0x1b0>
 800bffa:	2300      	movs	r3, #0
 800bffc:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	6819      	ldr	r1, [r3, #0]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681a      	ldr	r2, [r3, #0]
 800c008:	4b4c      	ldr	r3, [pc, #304]	@ (800c13c <HAL_SAI_Init+0x2f0>)
 800c00a:	400b      	ands	r3, r1
 800c00c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	6819      	ldr	r1, [r3, #0]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	685a      	ldr	r2, [r3, #4]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c01c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c022:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c028:	431a      	orrs	r2, r3
 800c02a:	69bb      	ldr	r3, [r7, #24]
 800c02c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800c036:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	691b      	ldr	r3, [r3, #16]
 800c03c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c042:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6a1b      	ldr	r3, [r3, #32]
 800c048:	051b      	lsls	r3, r3, #20
 800c04a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	430a      	orrs	r2, r1
 800c052:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	6859      	ldr	r1, [r3, #4]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	4b38      	ldr	r3, [pc, #224]	@ (800c140 <HAL_SAI_Init+0x2f4>)
 800c060:	400b      	ands	r3, r1
 800c062:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	6859      	ldr	r1, [r3, #4]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	699a      	ldr	r2, [r3, #24]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c072:	431a      	orrs	r2, r3
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c078:	431a      	orrs	r2, r3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	430a      	orrs	r2, r1
 800c080:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	6899      	ldr	r1, [r3, #8]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	4b2d      	ldr	r3, [pc, #180]	@ (800c144 <HAL_SAI_Init+0x2f8>)
 800c08e:	400b      	ands	r3, r1
 800c090:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	6899      	ldr	r1, [r3, #8]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c09c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c0a2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800c0a8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800c0ae:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0b4:	3b01      	subs	r3, #1
 800c0b6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800c0b8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	430a      	orrs	r2, r1
 800c0c0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	68d9      	ldr	r1, [r3, #12]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800c0d0:	400b      	ands	r3, r1
 800c0d2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	68d9      	ldr	r1, [r3, #12]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0e2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c0e8:	041b      	lsls	r3, r3, #16
 800c0ea:	431a      	orrs	r2, r3
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0f0:	3b01      	subs	r3, #1
 800c0f2:	021b      	lsls	r3, r3, #8
 800c0f4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	430a      	orrs	r2, r1
 800c0fc:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2201      	movs	r2, #1
 800c10a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2200      	movs	r2, #0
 800c112:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800c116:	2300      	movs	r3, #0
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3720      	adds	r7, #32
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	40015804 	.word	0x40015804
 800c124:	40015824 	.word	0x40015824
 800c128:	40015800 	.word	0x40015800
 800c12c:	40015c00 	.word	0x40015c00
 800c130:	40015c04 	.word	0x40015c04
 800c134:	40015c24 	.word	0x40015c24
 800c138:	cccccccd 	.word	0xcccccccd
 800c13c:	ff05c010 	.word	0xff05c010
 800c140:	ffff1ff0 	.word	0xffff1ff0
 800c144:	fff88000 	.word	0xfff88000

0800c148 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800c148:	b480      	push	{r7}
 800c14a:	b085      	sub	sp, #20
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800c150:	4b17      	ldr	r3, [pc, #92]	@ (800c1b0 <SAI_Disable+0x68>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a17      	ldr	r2, [pc, #92]	@ (800c1b4 <SAI_Disable+0x6c>)
 800c156:	fba2 2303 	umull	r2, r3, r2, r3
 800c15a:	0b1b      	lsrs	r3, r3, #12
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800c160:	2300      	movs	r3, #0
 800c162:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c172:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	1e5a      	subs	r2, r3, #1
 800c178:	60fa      	str	r2, [r7, #12]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d10a      	bne.n	800c194 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c184:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800c18e:	2303      	movs	r3, #3
 800c190:	72fb      	strb	r3, [r7, #11]
      break;
 800c192:	e006      	b.n	800c1a2 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d1e8      	bne.n	800c174 <SAI_Disable+0x2c>

  return status;
 800c1a2:	7afb      	ldrb	r3, [r7, #11]
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3714      	adds	r7, #20
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr
 800c1b0:	2000001c 	.word	0x2000001c
 800c1b4:	95cbec1b 	.word	0x95cbec1b

0800c1b8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d101      	bne.n	800c1ca <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e022      	b.n	800c210 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d105      	bne.n	800c1e2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f7f8 f8c1 	bl	8004364 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2203      	movs	r2, #3
 800c1e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 f814 	bl	800c218 <HAL_SD_InitCard>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d001      	beq.n	800c1fa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e00a      	b.n	800c210 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2201      	movs	r2, #1
 800c20a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c20e:	2300      	movs	r3, #0
}
 800c210:	4618      	mov	r0, r3
 800c212:	3708      	adds	r7, #8
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c218:	b5b0      	push	{r4, r5, r7, lr}
 800c21a:	b08e      	sub	sp, #56	@ 0x38
 800c21c:	af04      	add	r7, sp, #16
 800c21e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c220:	2300      	movs	r3, #0
 800c222:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800c224:	2300      	movs	r3, #0
 800c226:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c228:	2300      	movs	r3, #0
 800c22a:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c22c:	2300      	movs	r3, #0
 800c22e:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c230:	2300      	movs	r3, #0
 800c232:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800c234:	2376      	movs	r3, #118	@ 0x76
 800c236:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681d      	ldr	r5, [r3, #0]
 800c23c:	466c      	mov	r4, sp
 800c23e:	f107 0318 	add.w	r3, r7, #24
 800c242:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c246:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c24a:	f107 030c 	add.w	r3, r7, #12
 800c24e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c250:	4628      	mov	r0, r5
 800c252:	f003 fe05 	bl	800fe60 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	685a      	ldr	r2, [r3, #4]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c264:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4618      	mov	r0, r3
 800c26c:	f003 fe42 	bl	800fef4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	685a      	ldr	r2, [r3, #4]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c27e:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800c280:	2002      	movs	r0, #2
 800c282:	f7f9 fc99 	bl	8005bb8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 fe68 	bl	800cf5c <SD_PowerON>
 800c28c:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c290:	2b00      	cmp	r3, #0
 800c292:	d00b      	beq.n	800c2ac <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2201      	movs	r2, #1
 800c298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a2:	431a      	orrs	r2, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	e02e      	b.n	800c30a <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f000 fd87 	bl	800cdc0 <SD_InitCard>
 800c2b2:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00b      	beq.n	800c2d2 <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2201      	movs	r2, #1
 800c2be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c8:	431a      	orrs	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e01b      	b.n	800c30a <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f003 fe9c 	bl	8010018 <SDMMC_CmdBlockLength>
 800c2e0:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d00f      	beq.n	800c308 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a09      	ldr	r2, [pc, #36]	@ (800c314 <HAL_SD_InitCard+0xfc>)
 800c2ee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f6:	431a      	orrs	r2, r3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2201      	movs	r2, #1
 800c300:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c304:	2301      	movs	r3, #1
 800c306:	e000      	b.n	800c30a <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800c308:	2300      	movs	r3, #0
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3728      	adds	r7, #40	@ 0x28
 800c30e:	46bd      	mov	sp, r7
 800c310:	bdb0      	pop	{r4, r5, r7, pc}
 800c312:	bf00      	nop
 800c314:	004005ff 	.word	0x004005ff

0800c318 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b092      	sub	sp, #72	@ 0x48
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	607a      	str	r2, [r7, #4]
 800c324:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c326:	f7f9 fc3b 	bl	8005ba0 <HAL_GetTick>
 800c32a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d107      	bne.n	800c34a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c33e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c346:	2301      	movs	r3, #1
 800c348:	e1bd      	b.n	800c6c6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c350:	b2db      	uxtb	r3, r3
 800c352:	2b01      	cmp	r3, #1
 800c354:	f040 81b0 	bne.w	800c6b8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2200      	movs	r2, #0
 800c35c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c35e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	441a      	add	r2, r3
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c368:	429a      	cmp	r2, r3
 800c36a:	d907      	bls.n	800c37c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c370:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c378:	2301      	movs	r3, #1
 800c37a:	e1a4      	b.n	800c6c6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2203      	movs	r2, #3
 800c380:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	2200      	movs	r2, #0
 800c38a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c390:	2b01      	cmp	r3, #1
 800c392:	d002      	beq.n	800c39a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800c394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c396:	025b      	lsls	r3, r3, #9
 800c398:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c39a:	f04f 33ff 	mov.w	r3, #4294967295
 800c39e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	025b      	lsls	r3, r3, #9
 800c3a4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c3a6:	2390      	movs	r3, #144	@ 0x90
 800c3a8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c3aa:	2302      	movs	r3, #2
 800c3ac:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f107 0214 	add.w	r2, r7, #20
 800c3be:	4611      	mov	r1, r2
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f003 fdfd 	bl	800ffc0 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d90a      	bls.n	800c3e2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2202      	movs	r2, #2
 800c3d0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f003 fe61 	bl	80100a0 <SDMMC_CmdReadMultiBlock>
 800c3de:	6478      	str	r0, [r7, #68]	@ 0x44
 800c3e0:	e009      	b.n	800c3f6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f003 fe34 	bl	801005c <SDMMC_CmdReadSingleBlock>
 800c3f4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c3f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d012      	beq.n	800c422 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a7a      	ldr	r2, [pc, #488]	@ (800c5ec <HAL_SD_ReadBlocks+0x2d4>)
 800c402:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c40a:	431a      	orrs	r2, r3
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2201      	movs	r2, #1
 800c414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2200      	movs	r2, #0
 800c41c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c41e:	2301      	movs	r3, #1
 800c420:	e151      	b.n	800c6c6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c426:	e061      	b.n	800c4ec <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c42e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c432:	2b00      	cmp	r3, #0
 800c434:	d03c      	beq.n	800c4b0 <HAL_SD_ReadBlocks+0x198>
 800c436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d039      	beq.n	800c4b0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800c43c:	2300      	movs	r3, #0
 800c43e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c440:	e033      	b.n	800c4aa <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4618      	mov	r0, r3
 800c448:	f003 fd36 	bl	800feb8 <SDMMC_ReadFIFO>
 800c44c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800c44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c450:	b2da      	uxtb	r2, r3
 800c452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c454:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c458:	3301      	adds	r3, #1
 800c45a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c45c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c45e:	3b01      	subs	r3, #1
 800c460:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c464:	0a1b      	lsrs	r3, r3, #8
 800c466:	b2da      	uxtb	r2, r3
 800c468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c46a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c46c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c46e:	3301      	adds	r3, #1
 800c470:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c474:	3b01      	subs	r3, #1
 800c476:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c47a:	0c1b      	lsrs	r3, r3, #16
 800c47c:	b2da      	uxtb	r2, r3
 800c47e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c480:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c484:	3301      	adds	r3, #1
 800c486:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c48a:	3b01      	subs	r3, #1
 800c48c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c490:	0e1b      	lsrs	r3, r3, #24
 800c492:	b2da      	uxtb	r2, r3
 800c494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c496:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c49a:	3301      	adds	r3, #1
 800c49c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c49e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4a0:	3b01      	subs	r3, #1
 800c4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800c4a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800c4aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4ac:	2b07      	cmp	r3, #7
 800c4ae:	d9c8      	bls.n	800c442 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c4b0:	f7f9 fb76 	bl	8005ba0 <HAL_GetTick>
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b8:	1ad3      	subs	r3, r2, r3
 800c4ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d902      	bls.n	800c4c6 <HAL_SD_ReadBlocks+0x1ae>
 800c4c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d112      	bne.n	800c4ec <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a48      	ldr	r2, [pc, #288]	@ (800c5ec <HAL_SD_ReadBlocks+0x2d4>)
 800c4cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4d2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2201      	movs	r2, #1
 800c4de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800c4e8:	2303      	movs	r3, #3
 800c4ea:	e0ec      	b.n	800c6c6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4f2:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d096      	beq.n	800c428 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c504:	2b00      	cmp	r3, #0
 800c506:	d022      	beq.n	800c54e <HAL_SD_ReadBlocks+0x236>
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d91f      	bls.n	800c54e <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c512:	2b03      	cmp	r3, #3
 800c514:	d01b      	beq.n	800c54e <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4618      	mov	r0, r3
 800c51c:	f003 fe26 	bl	801016c <SDMMC_CmdStopTransfer>
 800c520:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c522:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c524:	2b00      	cmp	r3, #0
 800c526:	d012      	beq.n	800c54e <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a2f      	ldr	r2, [pc, #188]	@ (800c5ec <HAL_SD_ReadBlocks+0x2d4>)
 800c52e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c534:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c536:	431a      	orrs	r2, r3
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2201      	movs	r2, #1
 800c540:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2200      	movs	r2, #0
 800c548:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	e0bb      	b.n	800c6c6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c554:	f003 0308 	and.w	r3, r3, #8
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d012      	beq.n	800c582 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a22      	ldr	r2, [pc, #136]	@ (800c5ec <HAL_SD_ReadBlocks+0x2d4>)
 800c562:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c568:	f043 0208 	orr.w	r2, r3, #8
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2201      	movs	r2, #1
 800c574:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2200      	movs	r2, #0
 800c57c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c57e:	2301      	movs	r3, #1
 800c580:	e0a1      	b.n	800c6c6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c588:	f003 0302 	and.w	r3, r3, #2
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d012      	beq.n	800c5b6 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4a15      	ldr	r2, [pc, #84]	@ (800c5ec <HAL_SD_ReadBlocks+0x2d4>)
 800c596:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c59c:	f043 0202 	orr.w	r2, r3, #2
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	e087      	b.n	800c6c6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5bc:	f003 0320 	and.w	r3, r3, #32
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d064      	beq.n	800c68e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a08      	ldr	r2, [pc, #32]	@ (800c5ec <HAL_SD_ReadBlocks+0x2d4>)
 800c5ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5d0:	f043 0220 	orr.w	r2, r3, #32
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e06d      	b.n	800c6c6 <HAL_SD_ReadBlocks+0x3ae>
 800c5ea:	bf00      	nop
 800c5ec:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f003 fc5f 	bl	800feb8 <SDMMC_ReadFIFO>
 800c5fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800c5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5fe:	b2da      	uxtb	r2, r3
 800c600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c602:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c606:	3301      	adds	r3, #1
 800c608:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c60a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c60c:	3b01      	subs	r3, #1
 800c60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c612:	0a1b      	lsrs	r3, r3, #8
 800c614:	b2da      	uxtb	r2, r3
 800c616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c618:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c61a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c61c:	3301      	adds	r3, #1
 800c61e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c622:	3b01      	subs	r3, #1
 800c624:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c628:	0c1b      	lsrs	r3, r3, #16
 800c62a:	b2da      	uxtb	r2, r3
 800c62c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c62e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c632:	3301      	adds	r3, #1
 800c634:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c638:	3b01      	subs	r3, #1
 800c63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c63c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c63e:	0e1b      	lsrs	r3, r3, #24
 800c640:	b2da      	uxtb	r2, r3
 800c642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c644:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c648:	3301      	adds	r3, #1
 800c64a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c64c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c64e:	3b01      	subs	r3, #1
 800c650:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c652:	f7f9 faa5 	bl	8005ba0 <HAL_GetTick>
 800c656:	4602      	mov	r2, r0
 800c658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c65a:	1ad3      	subs	r3, r2, r3
 800c65c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c65e:	429a      	cmp	r2, r3
 800c660:	d902      	bls.n	800c668 <HAL_SD_ReadBlocks+0x350>
 800c662:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c664:	2b00      	cmp	r3, #0
 800c666:	d112      	bne.n	800c68e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	4a18      	ldr	r2, [pc, #96]	@ (800c6d0 <HAL_SD_ReadBlocks+0x3b8>)
 800c66e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c674:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2201      	movs	r2, #1
 800c680:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2200      	movs	r2, #0
 800c688:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800c68a:	2301      	movs	r3, #1
 800c68c:	e01b      	b.n	800c6c6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c694:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d002      	beq.n	800c6a2 <HAL_SD_ReadBlocks+0x38a>
 800c69c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1a6      	bne.n	800c5f0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f240 523a 	movw	r2, #1338	@ 0x53a
 800c6aa:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	e006      	b.n	800c6c6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6bc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c6c4:	2301      	movs	r3, #1
  }
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3748      	adds	r7, #72	@ 0x48
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	004005ff 	.word	0x004005ff

0800c6d4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b092      	sub	sp, #72	@ 0x48
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	60b9      	str	r1, [r7, #8]
 800c6de:	607a      	str	r2, [r7, #4]
 800c6e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c6e2:	f7f9 fa5d 	bl	8005ba0 <HAL_GetTick>
 800c6e6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d107      	bne.n	800c706 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6fa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c702:	2301      	movs	r3, #1
 800c704:	e165      	b.n	800c9d2 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	2b01      	cmp	r3, #1
 800c710:	f040 8158 	bne.w	800c9c4 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2200      	movs	r2, #0
 800c718:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c71a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	441a      	add	r2, r3
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c724:	429a      	cmp	r2, r3
 800c726:	d907      	bls.n	800c738 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c72c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c734:	2301      	movs	r3, #1
 800c736:	e14c      	b.n	800c9d2 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2203      	movs	r2, #3
 800c73c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2200      	movs	r2, #0
 800c746:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d002      	beq.n	800c756 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800c750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c752:	025b      	lsls	r3, r3, #9
 800c754:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c756:	f04f 33ff 	mov.w	r3, #4294967295
 800c75a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	025b      	lsls	r3, r3, #9
 800c760:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c762:	2390      	movs	r3, #144	@ 0x90
 800c764:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c766:	2300      	movs	r3, #0
 800c768:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c76a:	2300      	movs	r3, #0
 800c76c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800c76e:	2301      	movs	r3, #1
 800c770:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f107 0218 	add.w	r2, r7, #24
 800c77a:	4611      	mov	r1, r2
 800c77c:	4618      	mov	r0, r3
 800c77e:	f003 fc1f 	bl	800ffc0 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	2b01      	cmp	r3, #1
 800c786:	d90a      	bls.n	800c79e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2220      	movs	r2, #32
 800c78c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c794:	4618      	mov	r0, r3
 800c796:	f003 fcc7 	bl	8010128 <SDMMC_CmdWriteMultiBlock>
 800c79a:	6478      	str	r0, [r7, #68]	@ 0x44
 800c79c:	e009      	b.n	800c7b2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2210      	movs	r2, #16
 800c7a2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f003 fc9a 	bl	80100e4 <SDMMC_CmdWriteSingleBlock>
 800c7b0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d012      	beq.n	800c7de <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4a87      	ldr	r2, [pc, #540]	@ (800c9dc <HAL_SD_WriteBlocks+0x308>)
 800c7be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c7c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7c6:	431a      	orrs	r2, r3
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e0f9      	b.n	800c9d2 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800c7de:	69fb      	ldr	r3, [r7, #28]
 800c7e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c7e2:	e065      	b.n	800c8b0 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d040      	beq.n	800c874 <HAL_SD_WriteBlocks+0x1a0>
 800c7f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d03d      	beq.n	800c874 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800c7fc:	e037      	b.n	800c86e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800c7fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c806:	3301      	adds	r3, #1
 800c808:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c80a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c80c:	3b01      	subs	r3, #1
 800c80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800c810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	021a      	lsls	r2, r3, #8
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	4313      	orrs	r3, r2
 800c81a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c81c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c81e:	3301      	adds	r3, #1
 800c820:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c824:	3b01      	subs	r3, #1
 800c826:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800c828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	041a      	lsls	r2, r3, #16
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	4313      	orrs	r3, r2
 800c832:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c836:	3301      	adds	r3, #1
 800c838:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c83a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c83c:	3b01      	subs	r3, #1
 800c83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800c840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	061a      	lsls	r2, r3, #24
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	4313      	orrs	r3, r2
 800c84a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c84c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c84e:	3301      	adds	r3, #1
 800c850:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c854:	3b01      	subs	r3, #1
 800c856:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f107 0214 	add.w	r2, r7, #20
 800c860:	4611      	mov	r1, r2
 800c862:	4618      	mov	r0, r3
 800c864:	f003 fb35 	bl	800fed2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800c868:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c86a:	3301      	adds	r3, #1
 800c86c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c86e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c870:	2b07      	cmp	r3, #7
 800c872:	d9c4      	bls.n	800c7fe <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c874:	f7f9 f994 	bl	8005ba0 <HAL_GetTick>
 800c878:	4602      	mov	r2, r0
 800c87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c87c:	1ad3      	subs	r3, r2, r3
 800c87e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c880:	429a      	cmp	r2, r3
 800c882:	d902      	bls.n	800c88a <HAL_SD_WriteBlocks+0x1b6>
 800c884:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c886:	2b00      	cmp	r3, #0
 800c888:	d112      	bne.n	800c8b0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	4a53      	ldr	r2, [pc, #332]	@ (800c9dc <HAL_SD_WriteBlocks+0x308>)
 800c890:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c896:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c898:	431a      	orrs	r2, r3
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800c8ac:	2303      	movs	r3, #3
 800c8ae:	e090      	b.n	800c9d2 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8b6:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d092      	beq.n	800c7e4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d022      	beq.n	800c912 <HAL_SD_WriteBlocks+0x23e>
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	2b01      	cmp	r3, #1
 800c8d0:	d91f      	bls.n	800c912 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8d6:	2b03      	cmp	r3, #3
 800c8d8:	d01b      	beq.n	800c912 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f003 fc44 	bl	801016c <SDMMC_CmdStopTransfer>
 800c8e4:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c8e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d012      	beq.n	800c912 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a3a      	ldr	r2, [pc, #232]	@ (800c9dc <HAL_SD_WriteBlocks+0x308>)
 800c8f2:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8fa:	431a      	orrs	r2, r3
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2201      	movs	r2, #1
 800c904:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2200      	movs	r2, #0
 800c90c:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800c90e:	2301      	movs	r3, #1
 800c910:	e05f      	b.n	800c9d2 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c918:	f003 0308 	and.w	r3, r3, #8
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d012      	beq.n	800c946 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	4a2d      	ldr	r2, [pc, #180]	@ (800c9dc <HAL_SD_WriteBlocks+0x308>)
 800c926:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c92c:	f043 0208 	orr.w	r2, r3, #8
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	2201      	movs	r2, #1
 800c938:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2200      	movs	r2, #0
 800c940:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c942:	2301      	movs	r3, #1
 800c944:	e045      	b.n	800c9d2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c94c:	f003 0302 	and.w	r3, r3, #2
 800c950:	2b00      	cmp	r3, #0
 800c952:	d012      	beq.n	800c97a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a20      	ldr	r2, [pc, #128]	@ (800c9dc <HAL_SD_WriteBlocks+0x308>)
 800c95a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c960:	f043 0202 	orr.w	r2, r3, #2
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2201      	movs	r2, #1
 800c96c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	2200      	movs	r2, #0
 800c974:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c976:	2301      	movs	r3, #1
 800c978:	e02b      	b.n	800c9d2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c980:	f003 0310 	and.w	r3, r3, #16
 800c984:	2b00      	cmp	r3, #0
 800c986:	d012      	beq.n	800c9ae <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a13      	ldr	r2, [pc, #76]	@ (800c9dc <HAL_SD_WriteBlocks+0x308>)
 800c98e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c994:	f043 0210 	orr.w	r2, r3, #16
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2201      	movs	r2, #1
 800c9a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e011      	b.n	800c9d2 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f240 523a 	movw	r2, #1338	@ 0x53a
 800c9b6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	e006      	b.n	800c9d2 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9c8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c9d0:	2301      	movs	r3, #1
  }
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3748      	adds	r7, #72	@ 0x48
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	004005ff 	.word	0x004005ff

0800c9e0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b083      	sub	sp, #12
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9ee:	0f9b      	lsrs	r3, r3, #30
 800c9f0:	b2da      	uxtb	r2, r3
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9fa:	0e9b      	lsrs	r3, r3, #26
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	f003 030f 	and.w	r3, r3, #15
 800ca02:	b2da      	uxtb	r2, r3
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca0c:	0e1b      	lsrs	r3, r3, #24
 800ca0e:	b2db      	uxtb	r3, r3
 800ca10:	f003 0303 	and.w	r3, r3, #3
 800ca14:	b2da      	uxtb	r2, r3
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca1e:	0c1b      	lsrs	r3, r3, #16
 800ca20:	b2da      	uxtb	r2, r3
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca2a:	0a1b      	lsrs	r3, r3, #8
 800ca2c:	b2da      	uxtb	r2, r3
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca36:	b2da      	uxtb	r2, r3
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca40:	0d1b      	lsrs	r3, r3, #20
 800ca42:	b29a      	uxth	r2, r3
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca4c:	0c1b      	lsrs	r3, r3, #16
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	f003 030f 	and.w	r3, r3, #15
 800ca54:	b2da      	uxtb	r2, r3
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca5e:	0bdb      	lsrs	r3, r3, #15
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	f003 0301 	and.w	r3, r3, #1
 800ca66:	b2da      	uxtb	r2, r3
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca70:	0b9b      	lsrs	r3, r3, #14
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	f003 0301 	and.w	r3, r3, #1
 800ca78:	b2da      	uxtb	r2, r3
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca82:	0b5b      	lsrs	r3, r3, #13
 800ca84:	b2db      	uxtb	r3, r3
 800ca86:	f003 0301 	and.w	r3, r3, #1
 800ca8a:	b2da      	uxtb	r2, r3
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca94:	0b1b      	lsrs	r3, r3, #12
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	f003 0301 	and.w	r3, r3, #1
 800ca9c:	b2da      	uxtb	r2, r3
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	2200      	movs	r2, #0
 800caa6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800caac:	2b00      	cmp	r3, #0
 800caae:	d163      	bne.n	800cb78 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cab4:	009a      	lsls	r2, r3, #2
 800cab6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800caba:	4013      	ands	r3, r2
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800cac0:	0f92      	lsrs	r2, r2, #30
 800cac2:	431a      	orrs	r2, r3
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cacc:	0edb      	lsrs	r3, r3, #27
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	f003 0307 	and.w	r3, r3, #7
 800cad4:	b2da      	uxtb	r2, r3
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cade:	0e1b      	lsrs	r3, r3, #24
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	f003 0307 	and.w	r3, r3, #7
 800cae6:	b2da      	uxtb	r2, r3
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800caf0:	0d5b      	lsrs	r3, r3, #21
 800caf2:	b2db      	uxtb	r3, r3
 800caf4:	f003 0307 	and.w	r3, r3, #7
 800caf8:	b2da      	uxtb	r2, r3
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb02:	0c9b      	lsrs	r3, r3, #18
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	f003 0307 	and.w	r3, r3, #7
 800cb0a:	b2da      	uxtb	r2, r3
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb14:	0bdb      	lsrs	r3, r3, #15
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	f003 0307 	and.w	r3, r3, #7
 800cb1c:	b2da      	uxtb	r2, r3
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	691b      	ldr	r3, [r3, #16]
 800cb26:	1c5a      	adds	r2, r3, #1
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	7e1b      	ldrb	r3, [r3, #24]
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	f003 0307 	and.w	r3, r3, #7
 800cb36:	3302      	adds	r3, #2
 800cb38:	2201      	movs	r2, #1
 800cb3a:	fa02 f303 	lsl.w	r3, r2, r3
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800cb42:	fb03 f202 	mul.w	r2, r3, r2
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	7a1b      	ldrb	r3, [r3, #8]
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	f003 030f 	and.w	r3, r3, #15
 800cb54:	2201      	movs	r2, #1
 800cb56:	409a      	lsls	r2, r3
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800cb64:	0a52      	lsrs	r2, r2, #9
 800cb66:	fb03 f202 	mul.w	r2, r3, r2
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb74:	661a      	str	r2, [r3, #96]	@ 0x60
 800cb76:	e031      	b.n	800cbdc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d11d      	bne.n	800cbbc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb84:	041b      	lsls	r3, r3, #16
 800cb86:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb8e:	0c1b      	lsrs	r3, r3, #16
 800cb90:	431a      	orrs	r2, r3
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	691b      	ldr	r3, [r3, #16]
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	029a      	lsls	r2, r3, #10
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cbb0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	661a      	str	r2, [r3, #96]	@ 0x60
 800cbba:	e00f      	b.n	800cbdc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a58      	ldr	r2, [pc, #352]	@ (800cd24 <HAL_SD_GetCardCSD+0x344>)
 800cbc2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbc8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	e09d      	b.n	800cd18 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbe0:	0b9b      	lsrs	r3, r3, #14
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	f003 0301 	and.w	r3, r3, #1
 800cbe8:	b2da      	uxtb	r2, r3
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbf2:	09db      	lsrs	r3, r3, #7
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbfa:	b2da      	uxtb	r2, r3
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc0a:	b2da      	uxtb	r2, r3
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc14:	0fdb      	lsrs	r3, r3, #31
 800cc16:	b2da      	uxtb	r2, r3
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc20:	0f5b      	lsrs	r3, r3, #29
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	f003 0303 	and.w	r3, r3, #3
 800cc28:	b2da      	uxtb	r2, r3
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc32:	0e9b      	lsrs	r3, r3, #26
 800cc34:	b2db      	uxtb	r3, r3
 800cc36:	f003 0307 	and.w	r3, r3, #7
 800cc3a:	b2da      	uxtb	r2, r3
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc44:	0d9b      	lsrs	r3, r3, #22
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	f003 030f 	and.w	r3, r3, #15
 800cc4c:	b2da      	uxtb	r2, r3
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc56:	0d5b      	lsrs	r3, r3, #21
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	f003 0301 	and.w	r3, r3, #1
 800cc5e:	b2da      	uxtb	r2, r3
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc72:	0c1b      	lsrs	r3, r3, #16
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	f003 0301 	and.w	r3, r3, #1
 800cc7a:	b2da      	uxtb	r2, r3
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc86:	0bdb      	lsrs	r3, r3, #15
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	f003 0301 	and.w	r3, r3, #1
 800cc8e:	b2da      	uxtb	r2, r3
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc9a:	0b9b      	lsrs	r3, r3, #14
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	f003 0301 	and.w	r3, r3, #1
 800cca2:	b2da      	uxtb	r2, r3
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccae:	0b5b      	lsrs	r3, r3, #13
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	f003 0301 	and.w	r3, r3, #1
 800ccb6:	b2da      	uxtb	r2, r3
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccc2:	0b1b      	lsrs	r3, r3, #12
 800ccc4:	b2db      	uxtb	r3, r3
 800ccc6:	f003 0301 	and.w	r3, r3, #1
 800ccca:	b2da      	uxtb	r2, r3
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccd6:	0a9b      	lsrs	r3, r3, #10
 800ccd8:	b2db      	uxtb	r3, r3
 800ccda:	f003 0303 	and.w	r3, r3, #3
 800ccde:	b2da      	uxtb	r2, r3
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccea:	0a1b      	lsrs	r3, r3, #8
 800ccec:	b2db      	uxtb	r3, r3
 800ccee:	f003 0303 	and.w	r3, r3, #3
 800ccf2:	b2da      	uxtb	r2, r3
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccfe:	085b      	lsrs	r3, r3, #1
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd06:	b2da      	uxtb	r2, r3
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	2201      	movs	r2, #1
 800cd12:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800cd16:	2300      	movs	r3, #0
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	370c      	adds	r7, #12
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr
 800cd24:	004005ff 	.word	0x004005ff

0800cd28 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b083      	sub	sp, #12
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cd72:	2300      	movs	r3, #0
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	370c      	adds	r7, #12
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr

0800cd80 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b086      	sub	sp, #24
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cd8c:	f107 030c 	add.w	r3, r7, #12
 800cd90:	4619      	mov	r1, r3
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f000 f970 	bl	800d078 <SD_SendStatus>
 800cd98:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d005      	beq.n	800cdac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	431a      	orrs	r2, r3
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	0a5b      	lsrs	r3, r3, #9
 800cdb0:	f003 030f 	and.w	r3, r3, #15
 800cdb4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cdb6:	693b      	ldr	r3, [r7, #16]
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3718      	adds	r7, #24
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cdc0:	b5b0      	push	{r4, r5, r7, lr}
 800cdc2:	b094      	sub	sp, #80	@ 0x50
 800cdc4:	af04      	add	r7, sp, #16
 800cdc6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f003 f89d 	bl	800ff10 <SDMMC_GetPowerState>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d102      	bne.n	800cde2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cddc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800cde0:	e0b8      	b.n	800cf54 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cde6:	2b03      	cmp	r3, #3
 800cde8:	d02f      	beq.n	800ce4a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f003 fa84 	bl	80102fc <SDMMC_CmdSendCID>
 800cdf4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cdf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d001      	beq.n	800ce00 <SD_InitCard+0x40>
    {
      return errorstate;
 800cdfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdfe:	e0a9      	b.n	800cf54 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	2100      	movs	r1, #0
 800ce06:	4618      	mov	r0, r3
 800ce08:	f003 f8c7 	bl	800ff9a <SDMMC_GetResponse>
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	2104      	movs	r1, #4
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f003 f8be 	bl	800ff9a <SDMMC_GetResponse>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	2108      	movs	r1, #8
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f003 f8b5 	bl	800ff9a <SDMMC_GetResponse>
 800ce30:	4602      	mov	r2, r0
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	210c      	movs	r1, #12
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f003 f8ac 	bl	800ff9a <SDMMC_GetResponse>
 800ce42:	4602      	mov	r2, r0
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce4e:	2b03      	cmp	r3, #3
 800ce50:	d00d      	beq.n	800ce6e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f107 020e 	add.w	r2, r7, #14
 800ce5a:	4611      	mov	r1, r2
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f003 fa8a 	bl	8010376 <SDMMC_CmdSetRelAdd>
 800ce62:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ce64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d001      	beq.n	800ce6e <SD_InitCard+0xae>
    {
      return errorstate;
 800ce6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce6c:	e072      	b.n	800cf54 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce72:	2b03      	cmp	r3, #3
 800ce74:	d036      	beq.n	800cee4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ce76:	89fb      	ldrh	r3, [r7, #14]
 800ce78:	461a      	mov	r2, r3
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce86:	041b      	lsls	r3, r3, #16
 800ce88:	4619      	mov	r1, r3
 800ce8a:	4610      	mov	r0, r2
 800ce8c:	f003 fa54 	bl	8010338 <SDMMC_CmdSendCSD>
 800ce90:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ce92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d001      	beq.n	800ce9c <SD_InitCard+0xdc>
    {
      return errorstate;
 800ce98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce9a:	e05b      	b.n	800cf54 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	2100      	movs	r1, #0
 800cea2:	4618      	mov	r0, r3
 800cea4:	f003 f879 	bl	800ff9a <SDMMC_GetResponse>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2104      	movs	r1, #4
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f003 f870 	bl	800ff9a <SDMMC_GetResponse>
 800ceba:	4602      	mov	r2, r0
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	2108      	movs	r1, #8
 800cec6:	4618      	mov	r0, r3
 800cec8:	f003 f867 	bl	800ff9a <SDMMC_GetResponse>
 800cecc:	4602      	mov	r2, r0
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	210c      	movs	r1, #12
 800ced8:	4618      	mov	r0, r3
 800ceda:	f003 f85e 	bl	800ff9a <SDMMC_GetResponse>
 800cede:	4602      	mov	r2, r0
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	2104      	movs	r1, #4
 800ceea:	4618      	mov	r0, r3
 800ceec:	f003 f855 	bl	800ff9a <SDMMC_GetResponse>
 800cef0:	4603      	mov	r3, r0
 800cef2:	0d1a      	lsrs	r2, r3, #20
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800cef8:	f107 0310 	add.w	r3, r7, #16
 800cefc:	4619      	mov	r1, r3
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f7ff fd6e 	bl	800c9e0 <HAL_SD_GetCardCSD>
 800cf04:	4603      	mov	r3, r0
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d002      	beq.n	800cf10 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cf0a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cf0e:	e021      	b.n	800cf54 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6819      	ldr	r1, [r3, #0]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf18:	041b      	lsls	r3, r3, #16
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	461c      	mov	r4, r3
 800cf1e:	4615      	mov	r5, r2
 800cf20:	4622      	mov	r2, r4
 800cf22:	462b      	mov	r3, r5
 800cf24:	4608      	mov	r0, r1
 800cf26:	f003 f943 	bl	80101b0 <SDMMC_CmdSelDesel>
 800cf2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d001      	beq.n	800cf36 <SD_InitCard+0x176>
  {
    return errorstate;
 800cf32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf34:	e00e      	b.n	800cf54 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681d      	ldr	r5, [r3, #0]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	466c      	mov	r4, sp
 800cf3e:	f103 0210 	add.w	r2, r3, #16
 800cf42:	ca07      	ldmia	r2, {r0, r1, r2}
 800cf44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cf48:	3304      	adds	r3, #4
 800cf4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	f002 ff87 	bl	800fe60 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cf52:	2300      	movs	r3, #0
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3740      	adds	r7, #64	@ 0x40
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bdb0      	pop	{r4, r5, r7, pc}

0800cf5c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b086      	sub	sp, #24
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cf64:	2300      	movs	r3, #0
 800cf66:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	617b      	str	r3, [r7, #20]
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4618      	mov	r0, r3
 800cf76:	f003 f93e 	bl	80101f6 <SDMMC_CmdGoIdleState>
 800cf7a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d001      	beq.n	800cf86 <SD_PowerON+0x2a>
  {
    return errorstate;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	e072      	b.n	800d06c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f003 f951 	bl	8010232 <SDMMC_CmdOperCond>
 800cf90:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d00d      	beq.n	800cfb4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f003 f927 	bl	80101f6 <SDMMC_CmdGoIdleState>
 800cfa8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d004      	beq.n	800cfba <SD_PowerON+0x5e>
    {
      return errorstate;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	e05b      	b.n	800d06c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d137      	bne.n	800d032 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	2100      	movs	r1, #0
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f003 f951 	bl	8010270 <SDMMC_CmdAppCommand>
 800cfce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d02d      	beq.n	800d032 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cfd6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cfda:	e047      	b.n	800d06c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	2100      	movs	r1, #0
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f003 f944 	bl	8010270 <SDMMC_CmdAppCommand>
 800cfe8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d001      	beq.n	800cff4 <SD_PowerON+0x98>
    {
      return errorstate;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	e03b      	b.n	800d06c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	491e      	ldr	r1, [pc, #120]	@ (800d074 <SD_PowerON+0x118>)
 800cffa:	4618      	mov	r0, r3
 800cffc:	f003 f95a 	bl	80102b4 <SDMMC_CmdAppOperCommand>
 800d000:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d002      	beq.n	800d00e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d008:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d00c:	e02e      	b.n	800d06c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	2100      	movs	r1, #0
 800d014:	4618      	mov	r0, r3
 800d016:	f002 ffc0 	bl	800ff9a <SDMMC_GetResponse>
 800d01a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	0fdb      	lsrs	r3, r3, #31
 800d020:	2b01      	cmp	r3, #1
 800d022:	d101      	bne.n	800d028 <SD_PowerON+0xcc>
 800d024:	2301      	movs	r3, #1
 800d026:	e000      	b.n	800d02a <SD_PowerON+0xce>
 800d028:	2300      	movs	r3, #0
 800d02a:	613b      	str	r3, [r7, #16]

    count++;
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	3301      	adds	r3, #1
 800d030:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d038:	4293      	cmp	r3, r2
 800d03a:	d802      	bhi.n	800d042 <SD_PowerON+0xe6>
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d0cc      	beq.n	800cfdc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d048:	4293      	cmp	r3, r2
 800d04a:	d902      	bls.n	800d052 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d04c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d050:	e00c      	b.n	800d06c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d003      	beq.n	800d064 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2201      	movs	r2, #1
 800d060:	645a      	str	r2, [r3, #68]	@ 0x44
 800d062:	e002      	b.n	800d06a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2200      	movs	r2, #0
 800d068:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d06a:	2300      	movs	r3, #0
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3718      	adds	r7, #24
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}
 800d074:	c1100000 	.word	0xc1100000

0800d078 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d102      	bne.n	800d08e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d088:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d08c:	e018      	b.n	800d0c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681a      	ldr	r2, [r3, #0]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d096:	041b      	lsls	r3, r3, #16
 800d098:	4619      	mov	r1, r3
 800d09a:	4610      	mov	r0, r2
 800d09c:	f003 f98c 	bl	80103b8 <SDMMC_CmdSendStatus>
 800d0a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d001      	beq.n	800d0ac <SD_SendStatus+0x34>
  {
    return errorstate;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	e009      	b.n	800d0c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	2100      	movs	r1, #0
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f002 ff71 	bl	800ff9a <SDMMC_GetResponse>
 800d0b8:	4602      	mov	r2, r0
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d0be:	2300      	movs	r3, #0
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3710      	adds	r7, #16
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}

0800d0c8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
 800d0d0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d101      	bne.n	800d0dc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	e025      	b.n	800d128 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d0e2:	b2db      	uxtb	r3, r3
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d106      	bne.n	800d0f6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f7f7 fd13 	bl	8004b1c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2202      	movs	r2, #2
 800d0fa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	3304      	adds	r3, #4
 800d106:	4619      	mov	r1, r3
 800d108:	4610      	mov	r0, r2
 800d10a:	f002 fde3 	bl	800fcd4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6818      	ldr	r0, [r3, #0]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	461a      	mov	r2, r3
 800d118:	6839      	ldr	r1, [r7, #0]
 800d11a:	f002 fe37 	bl	800fd8c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2201      	movs	r2, #1
 800d122:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d126:	2300      	movs	r3, #0
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3708      	adds	r7, #8
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b084      	sub	sp, #16
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d101      	bne.n	800d142 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800d13e:	2301      	movs	r3, #1
 800d140:	e04c      	b.n	800d1dc <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d106      	bne.n	800d15c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2200      	movs	r2, #0
 800d152:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f7f7 f966 	bl	8004428 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2202      	movs	r2, #2
 800d160:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f022 0203 	bic.w	r2, r2, #3
 800d172:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800d17c:	68fa      	ldr	r2, [r7, #12]
 800d17e:	4b19      	ldr	r3, [pc, #100]	@ (800d1e4 <HAL_SPDIFRX_Init+0xb4>)
 800d180:	4013      	ands	r3, r2
 800d182:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800d18c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800d192:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800d198:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800d19e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800d1a4:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800d1aa:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800d1b0:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800d1b6:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800d1bc:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800d1be:	68fa      	ldr	r2, [r7, #12]
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	68fa      	ldr	r2, [r7, #12]
 800d1ca:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800d1da:	2300      	movs	r3, #0
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3710      	adds	r7, #16
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}
 800d1e4:	fff88407 	.word	0xfff88407

0800d1e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b084      	sub	sp, #16
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d101      	bne.n	800d1fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	e09d      	b.n	800d336 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d108      	bne.n	800d214 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	685b      	ldr	r3, [r3, #4]
 800d206:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d20a:	d009      	beq.n	800d220 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	61da      	str	r2, [r3, #28]
 800d212:	e005      	b.n	800d220 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2200      	movs	r2, #0
 800d218:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2200      	movs	r2, #0
 800d21e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2200      	movs	r2, #0
 800d224:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d22c:	b2db      	uxtb	r3, r3
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d106      	bne.n	800d240 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2200      	movs	r2, #0
 800d236:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f7f7 f958 	bl	80044f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2202      	movs	r2, #2
 800d244:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	681a      	ldr	r2, [r3, #0]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d256:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	68db      	ldr	r3, [r3, #12]
 800d25c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d260:	d902      	bls.n	800d268 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d262:	2300      	movs	r3, #0
 800d264:	60fb      	str	r3, [r7, #12]
 800d266:	e002      	b.n	800d26e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d268:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d26c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	68db      	ldr	r3, [r3, #12]
 800d272:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800d276:	d007      	beq.n	800d288 <HAL_SPI_Init+0xa0>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	68db      	ldr	r3, [r3, #12]
 800d27c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d280:	d002      	beq.n	800d288 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2200      	movs	r2, #0
 800d286:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	685b      	ldr	r3, [r3, #4]
 800d28c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	689b      	ldr	r3, [r3, #8]
 800d294:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d298:	431a      	orrs	r2, r3
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	691b      	ldr	r3, [r3, #16]
 800d29e:	f003 0302 	and.w	r3, r3, #2
 800d2a2:	431a      	orrs	r2, r3
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	695b      	ldr	r3, [r3, #20]
 800d2a8:	f003 0301 	and.w	r3, r3, #1
 800d2ac:	431a      	orrs	r2, r3
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	699b      	ldr	r3, [r3, #24]
 800d2b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d2b6:	431a      	orrs	r2, r3
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	69db      	ldr	r3, [r3, #28]
 800d2bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d2c0:	431a      	orrs	r2, r3
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6a1b      	ldr	r3, [r3, #32]
 800d2c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2ca:	ea42 0103 	orr.w	r1, r2, r3
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2d2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	430a      	orrs	r2, r1
 800d2dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	699b      	ldr	r3, [r3, #24]
 800d2e2:	0c1b      	lsrs	r3, r3, #16
 800d2e4:	f003 0204 	and.w	r2, r3, #4
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2ec:	f003 0310 	and.w	r3, r3, #16
 800d2f0:	431a      	orrs	r2, r3
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2f6:	f003 0308 	and.w	r3, r3, #8
 800d2fa:	431a      	orrs	r2, r3
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	68db      	ldr	r3, [r3, #12]
 800d300:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800d304:	ea42 0103 	orr.w	r1, r2, r3
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	430a      	orrs	r2, r1
 800d314:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	69da      	ldr	r2, [r3, #28]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d324:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2200      	movs	r2, #0
 800d32a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2201      	movs	r2, #1
 800d330:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800d334:	2300      	movs	r3, #0
}
 800d336:	4618      	mov	r0, r3
 800d338:	3710      	adds	r7, #16
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}

0800d33e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d33e:	b580      	push	{r7, lr}
 800d340:	b082      	sub	sp, #8
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d101      	bne.n	800d350 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d34c:	2301      	movs	r3, #1
 800d34e:	e049      	b.n	800d3e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d356:	b2db      	uxtb	r3, r3
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d106      	bne.n	800d36a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2200      	movs	r2, #0
 800d360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f7f7 f925 	bl	80045b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2202      	movs	r2, #2
 800d36e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681a      	ldr	r2, [r3, #0]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	3304      	adds	r3, #4
 800d37a:	4619      	mov	r1, r3
 800d37c:	4610      	mov	r0, r2
 800d37e:	f000 fc11 	bl	800dba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2201      	movs	r2, #1
 800d386:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2201      	movs	r2, #1
 800d38e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2201      	movs	r2, #1
 800d396:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2201      	movs	r2, #1
 800d39e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2201      	movs	r2, #1
 800d3be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2201      	movs	r2, #1
 800d3de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d3e2:	2300      	movs	r3, #0
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3708      	adds	r7, #8
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b085      	sub	sp, #20
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d001      	beq.n	800d404 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d400:	2301      	movs	r3, #1
 800d402:	e054      	b.n	800d4ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2202      	movs	r2, #2
 800d408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	68da      	ldr	r2, [r3, #12]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f042 0201 	orr.w	r2, r2, #1
 800d41a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a26      	ldr	r2, [pc, #152]	@ (800d4bc <HAL_TIM_Base_Start_IT+0xd0>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d022      	beq.n	800d46c <HAL_TIM_Base_Start_IT+0x80>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d42e:	d01d      	beq.n	800d46c <HAL_TIM_Base_Start_IT+0x80>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4a22      	ldr	r2, [pc, #136]	@ (800d4c0 <HAL_TIM_Base_Start_IT+0xd4>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d018      	beq.n	800d46c <HAL_TIM_Base_Start_IT+0x80>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	4a21      	ldr	r2, [pc, #132]	@ (800d4c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800d440:	4293      	cmp	r3, r2
 800d442:	d013      	beq.n	800d46c <HAL_TIM_Base_Start_IT+0x80>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4a1f      	ldr	r2, [pc, #124]	@ (800d4c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d00e      	beq.n	800d46c <HAL_TIM_Base_Start_IT+0x80>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4a1e      	ldr	r2, [pc, #120]	@ (800d4cc <HAL_TIM_Base_Start_IT+0xe0>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d009      	beq.n	800d46c <HAL_TIM_Base_Start_IT+0x80>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4a1c      	ldr	r2, [pc, #112]	@ (800d4d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d004      	beq.n	800d46c <HAL_TIM_Base_Start_IT+0x80>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	4a1b      	ldr	r2, [pc, #108]	@ (800d4d4 <HAL_TIM_Base_Start_IT+0xe8>)
 800d468:	4293      	cmp	r3, r2
 800d46a:	d115      	bne.n	800d498 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	689a      	ldr	r2, [r3, #8]
 800d472:	4b19      	ldr	r3, [pc, #100]	@ (800d4d8 <HAL_TIM_Base_Start_IT+0xec>)
 800d474:	4013      	ands	r3, r2
 800d476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2b06      	cmp	r3, #6
 800d47c:	d015      	beq.n	800d4aa <HAL_TIM_Base_Start_IT+0xbe>
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d484:	d011      	beq.n	800d4aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f042 0201 	orr.w	r2, r2, #1
 800d494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d496:	e008      	b.n	800d4aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	681a      	ldr	r2, [r3, #0]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	f042 0201 	orr.w	r2, r2, #1
 800d4a6:	601a      	str	r2, [r3, #0]
 800d4a8:	e000      	b.n	800d4ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d4ac:	2300      	movs	r3, #0
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3714      	adds	r7, #20
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b8:	4770      	bx	lr
 800d4ba:	bf00      	nop
 800d4bc:	40010000 	.word	0x40010000
 800d4c0:	40000400 	.word	0x40000400
 800d4c4:	40000800 	.word	0x40000800
 800d4c8:	40000c00 	.word	0x40000c00
 800d4cc:	40010400 	.word	0x40010400
 800d4d0:	40014000 	.word	0x40014000
 800d4d4:	40001800 	.word	0x40001800
 800d4d8:	00010007 	.word	0x00010007

0800d4dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d101      	bne.n	800d4ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e049      	b.n	800d582 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d4f4:	b2db      	uxtb	r3, r3
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d106      	bne.n	800d508 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f7f7 f8c4 	bl	8004690 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2202      	movs	r2, #2
 800d50c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681a      	ldr	r2, [r3, #0]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	3304      	adds	r3, #4
 800d518:	4619      	mov	r1, r3
 800d51a:	4610      	mov	r0, r2
 800d51c:	f000 fb42 	bl	800dba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2201      	movs	r2, #1
 800d524:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2201      	movs	r2, #1
 800d52c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2201      	movs	r2, #1
 800d534:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2201      	movs	r2, #1
 800d53c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2201      	movs	r2, #1
 800d544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2201      	movs	r2, #1
 800d54c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2201      	movs	r2, #1
 800d554:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2201      	movs	r2, #1
 800d55c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2201      	movs	r2, #1
 800d564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2201      	movs	r2, #1
 800d56c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2201      	movs	r2, #1
 800d574:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2201      	movs	r2, #1
 800d57c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d580:	2300      	movs	r3, #0
}
 800d582:	4618      	mov	r0, r3
 800d584:	3708      	adds	r7, #8
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}

0800d58a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d58a:	b580      	push	{r7, lr}
 800d58c:	b084      	sub	sp, #16
 800d58e:	af00      	add	r7, sp, #0
 800d590:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	691b      	ldr	r3, [r3, #16]
 800d5a0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	f003 0302 	and.w	r3, r3, #2
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d020      	beq.n	800d5ee <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	f003 0302 	and.w	r3, r3, #2
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d01b      	beq.n	800d5ee <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f06f 0202 	mvn.w	r2, #2
 800d5be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	699b      	ldr	r3, [r3, #24]
 800d5cc:	f003 0303 	and.w	r3, r3, #3
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d003      	beq.n	800d5dc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f000 fac7 	bl	800db68 <HAL_TIM_IC_CaptureCallback>
 800d5da:	e005      	b.n	800d5e8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f000 fab9 	bl	800db54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 faca 	bl	800db7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	f003 0304 	and.w	r3, r3, #4
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d020      	beq.n	800d63a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	f003 0304 	and.w	r3, r3, #4
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d01b      	beq.n	800d63a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f06f 0204 	mvn.w	r2, #4
 800d60a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2202      	movs	r2, #2
 800d610:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	699b      	ldr	r3, [r3, #24]
 800d618:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d003      	beq.n	800d628 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f000 faa1 	bl	800db68 <HAL_TIM_IC_CaptureCallback>
 800d626:	e005      	b.n	800d634 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f000 fa93 	bl	800db54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f000 faa4 	bl	800db7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2200      	movs	r2, #0
 800d638:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	f003 0308 	and.w	r3, r3, #8
 800d640:	2b00      	cmp	r3, #0
 800d642:	d020      	beq.n	800d686 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f003 0308 	and.w	r3, r3, #8
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d01b      	beq.n	800d686 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f06f 0208 	mvn.w	r2, #8
 800d656:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2204      	movs	r2, #4
 800d65c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	69db      	ldr	r3, [r3, #28]
 800d664:	f003 0303 	and.w	r3, r3, #3
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d003      	beq.n	800d674 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f000 fa7b 	bl	800db68 <HAL_TIM_IC_CaptureCallback>
 800d672:	e005      	b.n	800d680 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 fa6d 	bl	800db54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f000 fa7e 	bl	800db7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2200      	movs	r2, #0
 800d684:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	f003 0310 	and.w	r3, r3, #16
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d020      	beq.n	800d6d2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f003 0310 	and.w	r3, r3, #16
 800d696:	2b00      	cmp	r3, #0
 800d698:	d01b      	beq.n	800d6d2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f06f 0210 	mvn.w	r2, #16
 800d6a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2208      	movs	r2, #8
 800d6a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	69db      	ldr	r3, [r3, #28]
 800d6b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d003      	beq.n	800d6c0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f000 fa55 	bl	800db68 <HAL_TIM_IC_CaptureCallback>
 800d6be:	e005      	b.n	800d6cc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 fa47 	bl	800db54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 fa58 	bl	800db7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	f003 0301 	and.w	r3, r3, #1
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d00c      	beq.n	800d6f6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f003 0301 	and.w	r3, r3, #1
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d007      	beq.n	800d6f6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f06f 0201 	mvn.w	r2, #1
 800d6ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f7f6 f967 	bl	80039c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d104      	bne.n	800d70a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00c      	beq.n	800d724 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d710:	2b00      	cmp	r3, #0
 800d712:	d007      	beq.n	800d724 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d71c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 fef4 	bl	800e50c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d00c      	beq.n	800d748 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d734:	2b00      	cmp	r3, #0
 800d736:	d007      	beq.n	800d748 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f000 feec 	bl	800e520 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d00c      	beq.n	800d76c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d007      	beq.n	800d76c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f000 fa12 	bl	800db90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	f003 0320 	and.w	r3, r3, #32
 800d772:	2b00      	cmp	r3, #0
 800d774:	d00c      	beq.n	800d790 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	f003 0320 	and.w	r3, r3, #32
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d007      	beq.n	800d790 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f06f 0220 	mvn.w	r2, #32
 800d788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 feb4 	bl	800e4f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d790:	bf00      	nop
 800d792:	3710      	adds	r7, #16
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b086      	sub	sp, #24
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	60f8      	str	r0, [r7, #12]
 800d7a0:	60b9      	str	r1, [r7, #8]
 800d7a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	d101      	bne.n	800d7b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d7b2:	2302      	movs	r3, #2
 800d7b4:	e0ff      	b.n	800d9b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2201      	movs	r2, #1
 800d7ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2b14      	cmp	r3, #20
 800d7c2:	f200 80f0 	bhi.w	800d9a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d7c6:	a201      	add	r2, pc, #4	@ (adr r2, 800d7cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7cc:	0800d821 	.word	0x0800d821
 800d7d0:	0800d9a7 	.word	0x0800d9a7
 800d7d4:	0800d9a7 	.word	0x0800d9a7
 800d7d8:	0800d9a7 	.word	0x0800d9a7
 800d7dc:	0800d861 	.word	0x0800d861
 800d7e0:	0800d9a7 	.word	0x0800d9a7
 800d7e4:	0800d9a7 	.word	0x0800d9a7
 800d7e8:	0800d9a7 	.word	0x0800d9a7
 800d7ec:	0800d8a3 	.word	0x0800d8a3
 800d7f0:	0800d9a7 	.word	0x0800d9a7
 800d7f4:	0800d9a7 	.word	0x0800d9a7
 800d7f8:	0800d9a7 	.word	0x0800d9a7
 800d7fc:	0800d8e3 	.word	0x0800d8e3
 800d800:	0800d9a7 	.word	0x0800d9a7
 800d804:	0800d9a7 	.word	0x0800d9a7
 800d808:	0800d9a7 	.word	0x0800d9a7
 800d80c:	0800d925 	.word	0x0800d925
 800d810:	0800d9a7 	.word	0x0800d9a7
 800d814:	0800d9a7 	.word	0x0800d9a7
 800d818:	0800d9a7 	.word	0x0800d9a7
 800d81c:	0800d965 	.word	0x0800d965
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	68b9      	ldr	r1, [r7, #8]
 800d826:	4618      	mov	r0, r3
 800d828:	f000 fa62 	bl	800dcf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	699a      	ldr	r2, [r3, #24]
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f042 0208 	orr.w	r2, r2, #8
 800d83a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	699a      	ldr	r2, [r3, #24]
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f022 0204 	bic.w	r2, r2, #4
 800d84a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	6999      	ldr	r1, [r3, #24]
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	691a      	ldr	r2, [r3, #16]
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	430a      	orrs	r2, r1
 800d85c:	619a      	str	r2, [r3, #24]
      break;
 800d85e:	e0a5      	b.n	800d9ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	68b9      	ldr	r1, [r7, #8]
 800d866:	4618      	mov	r0, r3
 800d868:	f000 fab4 	bl	800ddd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	699a      	ldr	r2, [r3, #24]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d87a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	699a      	ldr	r2, [r3, #24]
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d88a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	6999      	ldr	r1, [r3, #24]
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	691b      	ldr	r3, [r3, #16]
 800d896:	021a      	lsls	r2, r3, #8
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	430a      	orrs	r2, r1
 800d89e:	619a      	str	r2, [r3, #24]
      break;
 800d8a0:	e084      	b.n	800d9ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	68b9      	ldr	r1, [r7, #8]
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f000 fb0b 	bl	800dec4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	69da      	ldr	r2, [r3, #28]
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f042 0208 	orr.w	r2, r2, #8
 800d8bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	69da      	ldr	r2, [r3, #28]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f022 0204 	bic.w	r2, r2, #4
 800d8cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	69d9      	ldr	r1, [r3, #28]
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	691a      	ldr	r2, [r3, #16]
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	430a      	orrs	r2, r1
 800d8de:	61da      	str	r2, [r3, #28]
      break;
 800d8e0:	e064      	b.n	800d9ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	68b9      	ldr	r1, [r7, #8]
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f000 fb61 	bl	800dfb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	69da      	ldr	r2, [r3, #28]
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d8fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	69da      	ldr	r2, [r3, #28]
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d90c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	69d9      	ldr	r1, [r3, #28]
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	691b      	ldr	r3, [r3, #16]
 800d918:	021a      	lsls	r2, r3, #8
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	430a      	orrs	r2, r1
 800d920:	61da      	str	r2, [r3, #28]
      break;
 800d922:	e043      	b.n	800d9ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	68b9      	ldr	r1, [r7, #8]
 800d92a:	4618      	mov	r0, r3
 800d92c:	f000 fb98 	bl	800e060 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f042 0208 	orr.w	r2, r2, #8
 800d93e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f022 0204 	bic.w	r2, r2, #4
 800d94e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	691a      	ldr	r2, [r3, #16]
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	430a      	orrs	r2, r1
 800d960:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d962:	e023      	b.n	800d9ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	68b9      	ldr	r1, [r7, #8]
 800d96a:	4618      	mov	r0, r3
 800d96c:	f000 fbca 	bl	800e104 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d97e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d98e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	691b      	ldr	r3, [r3, #16]
 800d99a:	021a      	lsls	r2, r3, #8
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	430a      	orrs	r2, r1
 800d9a2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d9a4:	e002      	b.n	800d9ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	75fb      	strb	r3, [r7, #23]
      break;
 800d9aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d9b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3718      	adds	r7, #24
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	bf00      	nop

0800d9c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b084      	sub	sp, #16
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d101      	bne.n	800d9dc <HAL_TIM_ConfigClockSource+0x1c>
 800d9d8:	2302      	movs	r3, #2
 800d9da:	e0b4      	b.n	800db46 <HAL_TIM_ConfigClockSource+0x186>
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2201      	movs	r2, #1
 800d9e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2202      	movs	r2, #2
 800d9e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	689b      	ldr	r3, [r3, #8]
 800d9f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d9f4:	68ba      	ldr	r2, [r7, #8]
 800d9f6:	4b56      	ldr	r3, [pc, #344]	@ (800db50 <HAL_TIM_ConfigClockSource+0x190>)
 800d9f8:	4013      	ands	r3, r2
 800d9fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800da02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	68ba      	ldr	r2, [r7, #8]
 800da0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800da14:	d03e      	beq.n	800da94 <HAL_TIM_ConfigClockSource+0xd4>
 800da16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800da1a:	f200 8087 	bhi.w	800db2c <HAL_TIM_ConfigClockSource+0x16c>
 800da1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da22:	f000 8086 	beq.w	800db32 <HAL_TIM_ConfigClockSource+0x172>
 800da26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da2a:	d87f      	bhi.n	800db2c <HAL_TIM_ConfigClockSource+0x16c>
 800da2c:	2b70      	cmp	r3, #112	@ 0x70
 800da2e:	d01a      	beq.n	800da66 <HAL_TIM_ConfigClockSource+0xa6>
 800da30:	2b70      	cmp	r3, #112	@ 0x70
 800da32:	d87b      	bhi.n	800db2c <HAL_TIM_ConfigClockSource+0x16c>
 800da34:	2b60      	cmp	r3, #96	@ 0x60
 800da36:	d050      	beq.n	800dada <HAL_TIM_ConfigClockSource+0x11a>
 800da38:	2b60      	cmp	r3, #96	@ 0x60
 800da3a:	d877      	bhi.n	800db2c <HAL_TIM_ConfigClockSource+0x16c>
 800da3c:	2b50      	cmp	r3, #80	@ 0x50
 800da3e:	d03c      	beq.n	800daba <HAL_TIM_ConfigClockSource+0xfa>
 800da40:	2b50      	cmp	r3, #80	@ 0x50
 800da42:	d873      	bhi.n	800db2c <HAL_TIM_ConfigClockSource+0x16c>
 800da44:	2b40      	cmp	r3, #64	@ 0x40
 800da46:	d058      	beq.n	800dafa <HAL_TIM_ConfigClockSource+0x13a>
 800da48:	2b40      	cmp	r3, #64	@ 0x40
 800da4a:	d86f      	bhi.n	800db2c <HAL_TIM_ConfigClockSource+0x16c>
 800da4c:	2b30      	cmp	r3, #48	@ 0x30
 800da4e:	d064      	beq.n	800db1a <HAL_TIM_ConfigClockSource+0x15a>
 800da50:	2b30      	cmp	r3, #48	@ 0x30
 800da52:	d86b      	bhi.n	800db2c <HAL_TIM_ConfigClockSource+0x16c>
 800da54:	2b20      	cmp	r3, #32
 800da56:	d060      	beq.n	800db1a <HAL_TIM_ConfigClockSource+0x15a>
 800da58:	2b20      	cmp	r3, #32
 800da5a:	d867      	bhi.n	800db2c <HAL_TIM_ConfigClockSource+0x16c>
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d05c      	beq.n	800db1a <HAL_TIM_ConfigClockSource+0x15a>
 800da60:	2b10      	cmp	r3, #16
 800da62:	d05a      	beq.n	800db1a <HAL_TIM_ConfigClockSource+0x15a>
 800da64:	e062      	b.n	800db2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800da76:	f000 fc13 	bl	800e2a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	689b      	ldr	r3, [r3, #8]
 800da80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800da88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	68ba      	ldr	r2, [r7, #8]
 800da90:	609a      	str	r2, [r3, #8]
      break;
 800da92:	e04f      	b.n	800db34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800daa4:	f000 fbfc 	bl	800e2a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	689a      	ldr	r2, [r3, #8]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dab6:	609a      	str	r2, [r3, #8]
      break;
 800dab8:	e03c      	b.n	800db34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dac6:	461a      	mov	r2, r3
 800dac8:	f000 fb70 	bl	800e1ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	2150      	movs	r1, #80	@ 0x50
 800dad2:	4618      	mov	r0, r3
 800dad4:	f000 fbc9 	bl	800e26a <TIM_ITRx_SetConfig>
      break;
 800dad8:	e02c      	b.n	800db34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dae6:	461a      	mov	r2, r3
 800dae8:	f000 fb8f 	bl	800e20a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2160      	movs	r1, #96	@ 0x60
 800daf2:	4618      	mov	r0, r3
 800daf4:	f000 fbb9 	bl	800e26a <TIM_ITRx_SetConfig>
      break;
 800daf8:	e01c      	b.n	800db34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800db06:	461a      	mov	r2, r3
 800db08:	f000 fb50 	bl	800e1ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2140      	movs	r1, #64	@ 0x40
 800db12:	4618      	mov	r0, r3
 800db14:	f000 fba9 	bl	800e26a <TIM_ITRx_SetConfig>
      break;
 800db18:	e00c      	b.n	800db34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4619      	mov	r1, r3
 800db24:	4610      	mov	r0, r2
 800db26:	f000 fba0 	bl	800e26a <TIM_ITRx_SetConfig>
      break;
 800db2a:	e003      	b.n	800db34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800db2c:	2301      	movs	r3, #1
 800db2e:	73fb      	strb	r3, [r7, #15]
      break;
 800db30:	e000      	b.n	800db34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800db32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2201      	movs	r2, #1
 800db38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2200      	movs	r2, #0
 800db40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800db44:	7bfb      	ldrb	r3, [r7, #15]
}
 800db46:	4618      	mov	r0, r3
 800db48:	3710      	adds	r7, #16
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	bf00      	nop
 800db50:	fffeff88 	.word	0xfffeff88

0800db54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800db54:	b480      	push	{r7}
 800db56:	b083      	sub	sp, #12
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800db5c:	bf00      	nop
 800db5e:	370c      	adds	r7, #12
 800db60:	46bd      	mov	sp, r7
 800db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db66:	4770      	bx	lr

0800db68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800db68:	b480      	push	{r7}
 800db6a:	b083      	sub	sp, #12
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800db70:	bf00      	nop
 800db72:	370c      	adds	r7, #12
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr

0800db7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800db7c:	b480      	push	{r7}
 800db7e:	b083      	sub	sp, #12
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800db84:	bf00      	nop
 800db86:	370c      	adds	r7, #12
 800db88:	46bd      	mov	sp, r7
 800db8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8e:	4770      	bx	lr

0800db90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800db90:	b480      	push	{r7}
 800db92:	b083      	sub	sp, #12
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800db98:	bf00      	nop
 800db9a:	370c      	adds	r7, #12
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr

0800dba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b085      	sub	sp, #20
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	4a43      	ldr	r2, [pc, #268]	@ (800dcc4 <TIM_Base_SetConfig+0x120>)
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d013      	beq.n	800dbe4 <TIM_Base_SetConfig+0x40>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbc2:	d00f      	beq.n	800dbe4 <TIM_Base_SetConfig+0x40>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	4a40      	ldr	r2, [pc, #256]	@ (800dcc8 <TIM_Base_SetConfig+0x124>)
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d00b      	beq.n	800dbe4 <TIM_Base_SetConfig+0x40>
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	4a3f      	ldr	r2, [pc, #252]	@ (800dccc <TIM_Base_SetConfig+0x128>)
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	d007      	beq.n	800dbe4 <TIM_Base_SetConfig+0x40>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	4a3e      	ldr	r2, [pc, #248]	@ (800dcd0 <TIM_Base_SetConfig+0x12c>)
 800dbd8:	4293      	cmp	r3, r2
 800dbda:	d003      	beq.n	800dbe4 <TIM_Base_SetConfig+0x40>
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	4a3d      	ldr	r2, [pc, #244]	@ (800dcd4 <TIM_Base_SetConfig+0x130>)
 800dbe0:	4293      	cmp	r3, r2
 800dbe2:	d108      	bne.n	800dbf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dbea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	68fa      	ldr	r2, [r7, #12]
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	4a32      	ldr	r2, [pc, #200]	@ (800dcc4 <TIM_Base_SetConfig+0x120>)
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d02b      	beq.n	800dc56 <TIM_Base_SetConfig+0xb2>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc04:	d027      	beq.n	800dc56 <TIM_Base_SetConfig+0xb2>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	4a2f      	ldr	r2, [pc, #188]	@ (800dcc8 <TIM_Base_SetConfig+0x124>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d023      	beq.n	800dc56 <TIM_Base_SetConfig+0xb2>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	4a2e      	ldr	r2, [pc, #184]	@ (800dccc <TIM_Base_SetConfig+0x128>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d01f      	beq.n	800dc56 <TIM_Base_SetConfig+0xb2>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	4a2d      	ldr	r2, [pc, #180]	@ (800dcd0 <TIM_Base_SetConfig+0x12c>)
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	d01b      	beq.n	800dc56 <TIM_Base_SetConfig+0xb2>
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	4a2c      	ldr	r2, [pc, #176]	@ (800dcd4 <TIM_Base_SetConfig+0x130>)
 800dc22:	4293      	cmp	r3, r2
 800dc24:	d017      	beq.n	800dc56 <TIM_Base_SetConfig+0xb2>
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	4a2b      	ldr	r2, [pc, #172]	@ (800dcd8 <TIM_Base_SetConfig+0x134>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d013      	beq.n	800dc56 <TIM_Base_SetConfig+0xb2>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	4a2a      	ldr	r2, [pc, #168]	@ (800dcdc <TIM_Base_SetConfig+0x138>)
 800dc32:	4293      	cmp	r3, r2
 800dc34:	d00f      	beq.n	800dc56 <TIM_Base_SetConfig+0xb2>
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	4a29      	ldr	r2, [pc, #164]	@ (800dce0 <TIM_Base_SetConfig+0x13c>)
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d00b      	beq.n	800dc56 <TIM_Base_SetConfig+0xb2>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	4a28      	ldr	r2, [pc, #160]	@ (800dce4 <TIM_Base_SetConfig+0x140>)
 800dc42:	4293      	cmp	r3, r2
 800dc44:	d007      	beq.n	800dc56 <TIM_Base_SetConfig+0xb2>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	4a27      	ldr	r2, [pc, #156]	@ (800dce8 <TIM_Base_SetConfig+0x144>)
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d003      	beq.n	800dc56 <TIM_Base_SetConfig+0xb2>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	4a26      	ldr	r2, [pc, #152]	@ (800dcec <TIM_Base_SetConfig+0x148>)
 800dc52:	4293      	cmp	r3, r2
 800dc54:	d108      	bne.n	800dc68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dc5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	4313      	orrs	r3, r2
 800dc66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	695b      	ldr	r3, [r3, #20]
 800dc72:	4313      	orrs	r3, r2
 800dc74:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	689a      	ldr	r2, [r3, #8]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	681a      	ldr	r2, [r3, #0]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	4a0e      	ldr	r2, [pc, #56]	@ (800dcc4 <TIM_Base_SetConfig+0x120>)
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d003      	beq.n	800dc96 <TIM_Base_SetConfig+0xf2>
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	4a10      	ldr	r2, [pc, #64]	@ (800dcd4 <TIM_Base_SetConfig+0x130>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d103      	bne.n	800dc9e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	691a      	ldr	r2, [r3, #16]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f043 0204 	orr.w	r2, r3, #4
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2201      	movs	r2, #1
 800dcae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	68fa      	ldr	r2, [r7, #12]
 800dcb4:	601a      	str	r2, [r3, #0]
}
 800dcb6:	bf00      	nop
 800dcb8:	3714      	adds	r7, #20
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc0:	4770      	bx	lr
 800dcc2:	bf00      	nop
 800dcc4:	40010000 	.word	0x40010000
 800dcc8:	40000400 	.word	0x40000400
 800dccc:	40000800 	.word	0x40000800
 800dcd0:	40000c00 	.word	0x40000c00
 800dcd4:	40010400 	.word	0x40010400
 800dcd8:	40014000 	.word	0x40014000
 800dcdc:	40014400 	.word	0x40014400
 800dce0:	40014800 	.word	0x40014800
 800dce4:	40001800 	.word	0x40001800
 800dce8:	40001c00 	.word	0x40001c00
 800dcec:	40002000 	.word	0x40002000

0800dcf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b087      	sub	sp, #28
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6a1b      	ldr	r3, [r3, #32]
 800dcfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6a1b      	ldr	r3, [r3, #32]
 800dd04:	f023 0201 	bic.w	r2, r3, #1
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	699b      	ldr	r3, [r3, #24]
 800dd16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dd18:	68fa      	ldr	r2, [r7, #12]
 800dd1a:	4b2b      	ldr	r3, [pc, #172]	@ (800ddc8 <TIM_OC1_SetConfig+0xd8>)
 800dd1c:	4013      	ands	r3, r2
 800dd1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f023 0303 	bic.w	r3, r3, #3
 800dd26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	68fa      	ldr	r2, [r7, #12]
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	f023 0302 	bic.w	r3, r3, #2
 800dd38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	689b      	ldr	r3, [r3, #8]
 800dd3e:	697a      	ldr	r2, [r7, #20]
 800dd40:	4313      	orrs	r3, r2
 800dd42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	4a21      	ldr	r2, [pc, #132]	@ (800ddcc <TIM_OC1_SetConfig+0xdc>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d003      	beq.n	800dd54 <TIM_OC1_SetConfig+0x64>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	4a20      	ldr	r2, [pc, #128]	@ (800ddd0 <TIM_OC1_SetConfig+0xe0>)
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d10c      	bne.n	800dd6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	f023 0308 	bic.w	r3, r3, #8
 800dd5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	697a      	ldr	r2, [r7, #20]
 800dd62:	4313      	orrs	r3, r2
 800dd64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	f023 0304 	bic.w	r3, r3, #4
 800dd6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	4a16      	ldr	r2, [pc, #88]	@ (800ddcc <TIM_OC1_SetConfig+0xdc>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d003      	beq.n	800dd7e <TIM_OC1_SetConfig+0x8e>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	4a15      	ldr	r2, [pc, #84]	@ (800ddd0 <TIM_OC1_SetConfig+0xe0>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d111      	bne.n	800dda2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dd84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dd8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	695b      	ldr	r3, [r3, #20]
 800dd92:	693a      	ldr	r2, [r7, #16]
 800dd94:	4313      	orrs	r3, r2
 800dd96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	699b      	ldr	r3, [r3, #24]
 800dd9c:	693a      	ldr	r2, [r7, #16]
 800dd9e:	4313      	orrs	r3, r2
 800dda0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	693a      	ldr	r2, [r7, #16]
 800dda6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	68fa      	ldr	r2, [r7, #12]
 800ddac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	685a      	ldr	r2, [r3, #4]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	697a      	ldr	r2, [r7, #20]
 800ddba:	621a      	str	r2, [r3, #32]
}
 800ddbc:	bf00      	nop
 800ddbe:	371c      	adds	r7, #28
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr
 800ddc8:	fffeff8f 	.word	0xfffeff8f
 800ddcc:	40010000 	.word	0x40010000
 800ddd0:	40010400 	.word	0x40010400

0800ddd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b087      	sub	sp, #28
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6a1b      	ldr	r3, [r3, #32]
 800dde2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6a1b      	ldr	r3, [r3, #32]
 800dde8:	f023 0210 	bic.w	r2, r3, #16
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	699b      	ldr	r3, [r3, #24]
 800ddfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ddfc:	68fa      	ldr	r2, [r7, #12]
 800ddfe:	4b2e      	ldr	r3, [pc, #184]	@ (800deb8 <TIM_OC2_SetConfig+0xe4>)
 800de00:	4013      	ands	r3, r2
 800de02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800de0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	021b      	lsls	r3, r3, #8
 800de12:	68fa      	ldr	r2, [r7, #12]
 800de14:	4313      	orrs	r3, r2
 800de16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	f023 0320 	bic.w	r3, r3, #32
 800de1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	689b      	ldr	r3, [r3, #8]
 800de24:	011b      	lsls	r3, r3, #4
 800de26:	697a      	ldr	r2, [r7, #20]
 800de28:	4313      	orrs	r3, r2
 800de2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	4a23      	ldr	r2, [pc, #140]	@ (800debc <TIM_OC2_SetConfig+0xe8>)
 800de30:	4293      	cmp	r3, r2
 800de32:	d003      	beq.n	800de3c <TIM_OC2_SetConfig+0x68>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	4a22      	ldr	r2, [pc, #136]	@ (800dec0 <TIM_OC2_SetConfig+0xec>)
 800de38:	4293      	cmp	r3, r2
 800de3a:	d10d      	bne.n	800de58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800de42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	68db      	ldr	r3, [r3, #12]
 800de48:	011b      	lsls	r3, r3, #4
 800de4a:	697a      	ldr	r2, [r7, #20]
 800de4c:	4313      	orrs	r3, r2
 800de4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800de56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	4a18      	ldr	r2, [pc, #96]	@ (800debc <TIM_OC2_SetConfig+0xe8>)
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d003      	beq.n	800de68 <TIM_OC2_SetConfig+0x94>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	4a17      	ldr	r2, [pc, #92]	@ (800dec0 <TIM_OC2_SetConfig+0xec>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d113      	bne.n	800de90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800de6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800de76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	695b      	ldr	r3, [r3, #20]
 800de7c:	009b      	lsls	r3, r3, #2
 800de7e:	693a      	ldr	r2, [r7, #16]
 800de80:	4313      	orrs	r3, r2
 800de82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	699b      	ldr	r3, [r3, #24]
 800de88:	009b      	lsls	r3, r3, #2
 800de8a:	693a      	ldr	r2, [r7, #16]
 800de8c:	4313      	orrs	r3, r2
 800de8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	693a      	ldr	r2, [r7, #16]
 800de94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	68fa      	ldr	r2, [r7, #12]
 800de9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	685a      	ldr	r2, [r3, #4]
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	697a      	ldr	r2, [r7, #20]
 800dea8:	621a      	str	r2, [r3, #32]
}
 800deaa:	bf00      	nop
 800deac:	371c      	adds	r7, #28
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop
 800deb8:	feff8fff 	.word	0xfeff8fff
 800debc:	40010000 	.word	0x40010000
 800dec0:	40010400 	.word	0x40010400

0800dec4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b087      	sub	sp, #28
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6a1b      	ldr	r3, [r3, #32]
 800ded2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6a1b      	ldr	r3, [r3, #32]
 800ded8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	69db      	ldr	r3, [r3, #28]
 800deea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800deec:	68fa      	ldr	r2, [r7, #12]
 800deee:	4b2d      	ldr	r3, [pc, #180]	@ (800dfa4 <TIM_OC3_SetConfig+0xe0>)
 800def0:	4013      	ands	r3, r2
 800def2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f023 0303 	bic.w	r3, r3, #3
 800defa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	68fa      	ldr	r2, [r7, #12]
 800df02:	4313      	orrs	r3, r2
 800df04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800df0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	689b      	ldr	r3, [r3, #8]
 800df12:	021b      	lsls	r3, r3, #8
 800df14:	697a      	ldr	r2, [r7, #20]
 800df16:	4313      	orrs	r3, r2
 800df18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	4a22      	ldr	r2, [pc, #136]	@ (800dfa8 <TIM_OC3_SetConfig+0xe4>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	d003      	beq.n	800df2a <TIM_OC3_SetConfig+0x66>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	4a21      	ldr	r2, [pc, #132]	@ (800dfac <TIM_OC3_SetConfig+0xe8>)
 800df26:	4293      	cmp	r3, r2
 800df28:	d10d      	bne.n	800df46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800df30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	68db      	ldr	r3, [r3, #12]
 800df36:	021b      	lsls	r3, r3, #8
 800df38:	697a      	ldr	r2, [r7, #20]
 800df3a:	4313      	orrs	r3, r2
 800df3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800df44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	4a17      	ldr	r2, [pc, #92]	@ (800dfa8 <TIM_OC3_SetConfig+0xe4>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d003      	beq.n	800df56 <TIM_OC3_SetConfig+0x92>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	4a16      	ldr	r2, [pc, #88]	@ (800dfac <TIM_OC3_SetConfig+0xe8>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d113      	bne.n	800df7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800df5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800df64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	695b      	ldr	r3, [r3, #20]
 800df6a:	011b      	lsls	r3, r3, #4
 800df6c:	693a      	ldr	r2, [r7, #16]
 800df6e:	4313      	orrs	r3, r2
 800df70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	699b      	ldr	r3, [r3, #24]
 800df76:	011b      	lsls	r3, r3, #4
 800df78:	693a      	ldr	r2, [r7, #16]
 800df7a:	4313      	orrs	r3, r2
 800df7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	693a      	ldr	r2, [r7, #16]
 800df82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	68fa      	ldr	r2, [r7, #12]
 800df88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	685a      	ldr	r2, [r3, #4]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	697a      	ldr	r2, [r7, #20]
 800df96:	621a      	str	r2, [r3, #32]
}
 800df98:	bf00      	nop
 800df9a:	371c      	adds	r7, #28
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr
 800dfa4:	fffeff8f 	.word	0xfffeff8f
 800dfa8:	40010000 	.word	0x40010000
 800dfac:	40010400 	.word	0x40010400

0800dfb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b087      	sub	sp, #28
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6a1b      	ldr	r3, [r3, #32]
 800dfbe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6a1b      	ldr	r3, [r3, #32]
 800dfc4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	685b      	ldr	r3, [r3, #4]
 800dfd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	69db      	ldr	r3, [r3, #28]
 800dfd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dfd8:	68fa      	ldr	r2, [r7, #12]
 800dfda:	4b1e      	ldr	r3, [pc, #120]	@ (800e054 <TIM_OC4_SetConfig+0xa4>)
 800dfdc:	4013      	ands	r3, r2
 800dfde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dfe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	021b      	lsls	r3, r3, #8
 800dfee:	68fa      	ldr	r2, [r7, #12]
 800dff0:	4313      	orrs	r3, r2
 800dff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dffa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	689b      	ldr	r3, [r3, #8]
 800e000:	031b      	lsls	r3, r3, #12
 800e002:	693a      	ldr	r2, [r7, #16]
 800e004:	4313      	orrs	r3, r2
 800e006:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	4a13      	ldr	r2, [pc, #76]	@ (800e058 <TIM_OC4_SetConfig+0xa8>)
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d003      	beq.n	800e018 <TIM_OC4_SetConfig+0x68>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	4a12      	ldr	r2, [pc, #72]	@ (800e05c <TIM_OC4_SetConfig+0xac>)
 800e014:	4293      	cmp	r3, r2
 800e016:	d109      	bne.n	800e02c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e01e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	695b      	ldr	r3, [r3, #20]
 800e024:	019b      	lsls	r3, r3, #6
 800e026:	697a      	ldr	r2, [r7, #20]
 800e028:	4313      	orrs	r3, r2
 800e02a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	697a      	ldr	r2, [r7, #20]
 800e030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	68fa      	ldr	r2, [r7, #12]
 800e036:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	685a      	ldr	r2, [r3, #4]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	693a      	ldr	r2, [r7, #16]
 800e044:	621a      	str	r2, [r3, #32]
}
 800e046:	bf00      	nop
 800e048:	371c      	adds	r7, #28
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr
 800e052:	bf00      	nop
 800e054:	feff8fff 	.word	0xfeff8fff
 800e058:	40010000 	.word	0x40010000
 800e05c:	40010400 	.word	0x40010400

0800e060 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e060:	b480      	push	{r7}
 800e062:	b087      	sub	sp, #28
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6a1b      	ldr	r3, [r3, #32]
 800e06e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6a1b      	ldr	r3, [r3, #32]
 800e074:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	685b      	ldr	r3, [r3, #4]
 800e080:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e088:	68fa      	ldr	r2, [r7, #12]
 800e08a:	4b1b      	ldr	r3, [pc, #108]	@ (800e0f8 <TIM_OC5_SetConfig+0x98>)
 800e08c:	4013      	ands	r3, r2
 800e08e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	68fa      	ldr	r2, [r7, #12]
 800e096:	4313      	orrs	r3, r2
 800e098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e0a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	689b      	ldr	r3, [r3, #8]
 800e0a6:	041b      	lsls	r3, r3, #16
 800e0a8:	693a      	ldr	r2, [r7, #16]
 800e0aa:	4313      	orrs	r3, r2
 800e0ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	4a12      	ldr	r2, [pc, #72]	@ (800e0fc <TIM_OC5_SetConfig+0x9c>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d003      	beq.n	800e0be <TIM_OC5_SetConfig+0x5e>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	4a11      	ldr	r2, [pc, #68]	@ (800e100 <TIM_OC5_SetConfig+0xa0>)
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	d109      	bne.n	800e0d2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e0c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	695b      	ldr	r3, [r3, #20]
 800e0ca:	021b      	lsls	r3, r3, #8
 800e0cc:	697a      	ldr	r2, [r7, #20]
 800e0ce:	4313      	orrs	r3, r2
 800e0d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	697a      	ldr	r2, [r7, #20]
 800e0d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	68fa      	ldr	r2, [r7, #12]
 800e0dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	685a      	ldr	r2, [r3, #4]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	693a      	ldr	r2, [r7, #16]
 800e0ea:	621a      	str	r2, [r3, #32]
}
 800e0ec:	bf00      	nop
 800e0ee:	371c      	adds	r7, #28
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f6:	4770      	bx	lr
 800e0f8:	fffeff8f 	.word	0xfffeff8f
 800e0fc:	40010000 	.word	0x40010000
 800e100:	40010400 	.word	0x40010400

0800e104 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e104:	b480      	push	{r7}
 800e106:	b087      	sub	sp, #28
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6a1b      	ldr	r3, [r3, #32]
 800e112:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6a1b      	ldr	r3, [r3, #32]
 800e118:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e12a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e12c:	68fa      	ldr	r2, [r7, #12]
 800e12e:	4b1c      	ldr	r3, [pc, #112]	@ (800e1a0 <TIM_OC6_SetConfig+0x9c>)
 800e130:	4013      	ands	r3, r2
 800e132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	021b      	lsls	r3, r3, #8
 800e13a:	68fa      	ldr	r2, [r7, #12]
 800e13c:	4313      	orrs	r3, r2
 800e13e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	689b      	ldr	r3, [r3, #8]
 800e14c:	051b      	lsls	r3, r3, #20
 800e14e:	693a      	ldr	r2, [r7, #16]
 800e150:	4313      	orrs	r3, r2
 800e152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	4a13      	ldr	r2, [pc, #76]	@ (800e1a4 <TIM_OC6_SetConfig+0xa0>)
 800e158:	4293      	cmp	r3, r2
 800e15a:	d003      	beq.n	800e164 <TIM_OC6_SetConfig+0x60>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	4a12      	ldr	r2, [pc, #72]	@ (800e1a8 <TIM_OC6_SetConfig+0xa4>)
 800e160:	4293      	cmp	r3, r2
 800e162:	d109      	bne.n	800e178 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e16a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	695b      	ldr	r3, [r3, #20]
 800e170:	029b      	lsls	r3, r3, #10
 800e172:	697a      	ldr	r2, [r7, #20]
 800e174:	4313      	orrs	r3, r2
 800e176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	697a      	ldr	r2, [r7, #20]
 800e17c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	68fa      	ldr	r2, [r7, #12]
 800e182:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	685a      	ldr	r2, [r3, #4]
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	693a      	ldr	r2, [r7, #16]
 800e190:	621a      	str	r2, [r3, #32]
}
 800e192:	bf00      	nop
 800e194:	371c      	adds	r7, #28
 800e196:	46bd      	mov	sp, r7
 800e198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19c:	4770      	bx	lr
 800e19e:	bf00      	nop
 800e1a0:	feff8fff 	.word	0xfeff8fff
 800e1a4:	40010000 	.word	0x40010000
 800e1a8:	40010400 	.word	0x40010400

0800e1ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b087      	sub	sp, #28
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	60b9      	str	r1, [r7, #8]
 800e1b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	6a1b      	ldr	r3, [r3, #32]
 800e1bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	6a1b      	ldr	r3, [r3, #32]
 800e1c2:	f023 0201 	bic.w	r2, r3, #1
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	699b      	ldr	r3, [r3, #24]
 800e1ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e1d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	011b      	lsls	r3, r3, #4
 800e1dc:	693a      	ldr	r2, [r7, #16]
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	f023 030a 	bic.w	r3, r3, #10
 800e1e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e1ea:	697a      	ldr	r2, [r7, #20]
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	4313      	orrs	r3, r2
 800e1f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	693a      	ldr	r2, [r7, #16]
 800e1f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	697a      	ldr	r2, [r7, #20]
 800e1fc:	621a      	str	r2, [r3, #32]
}
 800e1fe:	bf00      	nop
 800e200:	371c      	adds	r7, #28
 800e202:	46bd      	mov	sp, r7
 800e204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e208:	4770      	bx	lr

0800e20a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e20a:	b480      	push	{r7}
 800e20c:	b087      	sub	sp, #28
 800e20e:	af00      	add	r7, sp, #0
 800e210:	60f8      	str	r0, [r7, #12]
 800e212:	60b9      	str	r1, [r7, #8]
 800e214:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	6a1b      	ldr	r3, [r3, #32]
 800e21a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	6a1b      	ldr	r3, [r3, #32]
 800e220:	f023 0210 	bic.w	r2, r3, #16
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	699b      	ldr	r3, [r3, #24]
 800e22c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e234:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	031b      	lsls	r3, r3, #12
 800e23a:	693a      	ldr	r2, [r7, #16]
 800e23c:	4313      	orrs	r3, r2
 800e23e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e246:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	011b      	lsls	r3, r3, #4
 800e24c:	697a      	ldr	r2, [r7, #20]
 800e24e:	4313      	orrs	r3, r2
 800e250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	693a      	ldr	r2, [r7, #16]
 800e256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	697a      	ldr	r2, [r7, #20]
 800e25c:	621a      	str	r2, [r3, #32]
}
 800e25e:	bf00      	nop
 800e260:	371c      	adds	r7, #28
 800e262:	46bd      	mov	sp, r7
 800e264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e268:	4770      	bx	lr

0800e26a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e26a:	b480      	push	{r7}
 800e26c:	b085      	sub	sp, #20
 800e26e:	af00      	add	r7, sp, #0
 800e270:	6078      	str	r0, [r7, #4]
 800e272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	689b      	ldr	r3, [r3, #8]
 800e278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e282:	683a      	ldr	r2, [r7, #0]
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	4313      	orrs	r3, r2
 800e288:	f043 0307 	orr.w	r3, r3, #7
 800e28c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	68fa      	ldr	r2, [r7, #12]
 800e292:	609a      	str	r2, [r3, #8]
}
 800e294:	bf00      	nop
 800e296:	3714      	adds	r7, #20
 800e298:	46bd      	mov	sp, r7
 800e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29e:	4770      	bx	lr

0800e2a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b087      	sub	sp, #28
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	60f8      	str	r0, [r7, #12]
 800e2a8:	60b9      	str	r1, [r7, #8]
 800e2aa:	607a      	str	r2, [r7, #4]
 800e2ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	689b      	ldr	r3, [r3, #8]
 800e2b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e2ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	021a      	lsls	r2, r3, #8
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	431a      	orrs	r2, r3
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	4313      	orrs	r3, r2
 800e2c8:	697a      	ldr	r2, [r7, #20]
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	697a      	ldr	r2, [r7, #20]
 800e2d2:	609a      	str	r2, [r3, #8]
}
 800e2d4:	bf00      	nop
 800e2d6:	371c      	adds	r7, #28
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr

0800e2e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	b085      	sub	sp, #20
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d101      	bne.n	800e2f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e2f4:	2302      	movs	r3, #2
 800e2f6:	e06d      	b.n	800e3d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2202      	movs	r2, #2
 800e304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	685b      	ldr	r3, [r3, #4]
 800e30e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	689b      	ldr	r3, [r3, #8]
 800e316:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4a30      	ldr	r2, [pc, #192]	@ (800e3e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d004      	beq.n	800e32c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	4a2f      	ldr	r2, [pc, #188]	@ (800e3e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e328:	4293      	cmp	r3, r2
 800e32a:	d108      	bne.n	800e33e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e332:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	685b      	ldr	r3, [r3, #4]
 800e338:	68fa      	ldr	r2, [r7, #12]
 800e33a:	4313      	orrs	r3, r2
 800e33c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e344:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	68fa      	ldr	r2, [r7, #12]
 800e34c:	4313      	orrs	r3, r2
 800e34e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4a20      	ldr	r2, [pc, #128]	@ (800e3e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d022      	beq.n	800e3a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e36a:	d01d      	beq.n	800e3a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4a1d      	ldr	r2, [pc, #116]	@ (800e3e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d018      	beq.n	800e3a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4a1c      	ldr	r2, [pc, #112]	@ (800e3ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d013      	beq.n	800e3a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	4a1a      	ldr	r2, [pc, #104]	@ (800e3f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e386:	4293      	cmp	r3, r2
 800e388:	d00e      	beq.n	800e3a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	4a15      	ldr	r2, [pc, #84]	@ (800e3e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e390:	4293      	cmp	r3, r2
 800e392:	d009      	beq.n	800e3a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	4a16      	ldr	r2, [pc, #88]	@ (800e3f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d004      	beq.n	800e3a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	4a15      	ldr	r2, [pc, #84]	@ (800e3f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d10c      	bne.n	800e3c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e3ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	689b      	ldr	r3, [r3, #8]
 800e3b4:	68ba      	ldr	r2, [r7, #8]
 800e3b6:	4313      	orrs	r3, r2
 800e3b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	68ba      	ldr	r2, [r7, #8]
 800e3c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e3d2:	2300      	movs	r3, #0
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3714      	adds	r7, #20
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr
 800e3e0:	40010000 	.word	0x40010000
 800e3e4:	40010400 	.word	0x40010400
 800e3e8:	40000400 	.word	0x40000400
 800e3ec:	40000800 	.word	0x40000800
 800e3f0:	40000c00 	.word	0x40000c00
 800e3f4:	40014000 	.word	0x40014000
 800e3f8:	40001800 	.word	0x40001800

0800e3fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b085      	sub	sp, #20
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e406:	2300      	movs	r3, #0
 800e408:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e410:	2b01      	cmp	r3, #1
 800e412:	d101      	bne.n	800e418 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e414:	2302      	movs	r3, #2
 800e416:	e065      	b.n	800e4e4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2201      	movs	r2, #1
 800e41c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	68db      	ldr	r3, [r3, #12]
 800e42a:	4313      	orrs	r3, r2
 800e42c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	689b      	ldr	r3, [r3, #8]
 800e438:	4313      	orrs	r3, r2
 800e43a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	685b      	ldr	r3, [r3, #4]
 800e446:	4313      	orrs	r3, r2
 800e448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	4313      	orrs	r3, r2
 800e456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	691b      	ldr	r3, [r3, #16]
 800e462:	4313      	orrs	r3, r2
 800e464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	695b      	ldr	r3, [r3, #20]
 800e470:	4313      	orrs	r3, r2
 800e472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e47e:	4313      	orrs	r3, r2
 800e480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	699b      	ldr	r3, [r3, #24]
 800e48c:	041b      	lsls	r3, r3, #16
 800e48e:	4313      	orrs	r3, r2
 800e490:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	4a16      	ldr	r2, [pc, #88]	@ (800e4f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e498:	4293      	cmp	r3, r2
 800e49a:	d004      	beq.n	800e4a6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	4a14      	ldr	r2, [pc, #80]	@ (800e4f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e4a2:	4293      	cmp	r3, r2
 800e4a4:	d115      	bne.n	800e4d2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4b0:	051b      	lsls	r3, r3, #20
 800e4b2:	4313      	orrs	r3, r2
 800e4b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	69db      	ldr	r3, [r3, #28]
 800e4c0:	4313      	orrs	r3, r2
 800e4c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	6a1b      	ldr	r3, [r3, #32]
 800e4ce:	4313      	orrs	r3, r2
 800e4d0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	68fa      	ldr	r2, [r7, #12]
 800e4d8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e4e2:	2300      	movs	r3, #0
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3714      	adds	r7, #20
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ee:	4770      	bx	lr
 800e4f0:	40010000 	.word	0x40010000
 800e4f4:	40010400 	.word	0x40010400

0800e4f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b083      	sub	sp, #12
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e500:	bf00      	nop
 800e502:	370c      	adds	r7, #12
 800e504:	46bd      	mov	sp, r7
 800e506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50a:	4770      	bx	lr

0800e50c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e50c:	b480      	push	{r7}
 800e50e:	b083      	sub	sp, #12
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e514:	bf00      	nop
 800e516:	370c      	adds	r7, #12
 800e518:	46bd      	mov	sp, r7
 800e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51e:	4770      	bx	lr

0800e520 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e520:	b480      	push	{r7}
 800e522:	b083      	sub	sp, #12
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e528:	bf00      	nop
 800e52a:	370c      	adds	r7, #12
 800e52c:	46bd      	mov	sp, r7
 800e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e532:	4770      	bx	lr

0800e534 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b082      	sub	sp, #8
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d101      	bne.n	800e546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e542:	2301      	movs	r3, #1
 800e544:	e040      	b.n	800e5c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d106      	bne.n	800e55c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2200      	movs	r2, #0
 800e552:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f7f6 f988 	bl	800486c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2224      	movs	r2, #36	@ 0x24
 800e560:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	681a      	ldr	r2, [r3, #0]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f022 0201 	bic.w	r2, r2, #1
 800e570:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e576:	2b00      	cmp	r3, #0
 800e578:	d002      	beq.n	800e580 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f000 ffb6 	bl	800f4ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f000 fd4f 	bl	800f024 <UART_SetConfig>
 800e586:	4603      	mov	r3, r0
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d101      	bne.n	800e590 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800e58c:	2301      	movs	r3, #1
 800e58e:	e01b      	b.n	800e5c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	685a      	ldr	r2, [r3, #4]
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e59e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	689a      	ldr	r2, [r3, #8]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e5ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f042 0201 	orr.w	r2, r2, #1
 800e5be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f001 f835 	bl	800f630 <UART_CheckIdleState>
 800e5c6:	4603      	mov	r3, r0
}
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	3708      	adds	r7, #8
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd80      	pop	{r7, pc}

0800e5d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b08a      	sub	sp, #40	@ 0x28
 800e5d4:	af02      	add	r7, sp, #8
 800e5d6:	60f8      	str	r0, [r7, #12]
 800e5d8:	60b9      	str	r1, [r7, #8]
 800e5da:	603b      	str	r3, [r7, #0]
 800e5dc:	4613      	mov	r3, r2
 800e5de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e5e4:	2b20      	cmp	r3, #32
 800e5e6:	d177      	bne.n	800e6d8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d002      	beq.n	800e5f4 <HAL_UART_Transmit+0x24>
 800e5ee:	88fb      	ldrh	r3, [r7, #6]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d101      	bne.n	800e5f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	e070      	b.n	800e6da <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	2221      	movs	r2, #33	@ 0x21
 800e604:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e606:	f7f7 facb 	bl	8005ba0 <HAL_GetTick>
 800e60a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	88fa      	ldrh	r2, [r7, #6]
 800e610:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	88fa      	ldrh	r2, [r7, #6]
 800e618:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	689b      	ldr	r3, [r3, #8]
 800e620:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e624:	d108      	bne.n	800e638 <HAL_UART_Transmit+0x68>
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	691b      	ldr	r3, [r3, #16]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d104      	bne.n	800e638 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800e62e:	2300      	movs	r3, #0
 800e630:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	61bb      	str	r3, [r7, #24]
 800e636:	e003      	b.n	800e640 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e63c:	2300      	movs	r3, #0
 800e63e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e640:	e02f      	b.n	800e6a2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	9300      	str	r3, [sp, #0]
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	2200      	movs	r2, #0
 800e64a:	2180      	movs	r1, #128	@ 0x80
 800e64c:	68f8      	ldr	r0, [r7, #12]
 800e64e:	f001 f846 	bl	800f6de <UART_WaitOnFlagUntilTimeout>
 800e652:	4603      	mov	r3, r0
 800e654:	2b00      	cmp	r3, #0
 800e656:	d004      	beq.n	800e662 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	2220      	movs	r2, #32
 800e65c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800e65e:	2303      	movs	r3, #3
 800e660:	e03b      	b.n	800e6da <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800e662:	69fb      	ldr	r3, [r7, #28]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d10b      	bne.n	800e680 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e668:	69bb      	ldr	r3, [r7, #24]
 800e66a:	881b      	ldrh	r3, [r3, #0]
 800e66c:	461a      	mov	r2, r3
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e676:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e678:	69bb      	ldr	r3, [r7, #24]
 800e67a:	3302      	adds	r3, #2
 800e67c:	61bb      	str	r3, [r7, #24]
 800e67e:	e007      	b.n	800e690 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e680:	69fb      	ldr	r3, [r7, #28]
 800e682:	781a      	ldrb	r2, [r3, #0]
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e68a:	69fb      	ldr	r3, [r7, #28]
 800e68c:	3301      	adds	r3, #1
 800e68e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e696:	b29b      	uxth	r3, r3
 800e698:	3b01      	subs	r3, #1
 800e69a:	b29a      	uxth	r2, r3
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e6a8:	b29b      	uxth	r3, r3
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d1c9      	bne.n	800e642 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	9300      	str	r3, [sp, #0]
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	2140      	movs	r1, #64	@ 0x40
 800e6b8:	68f8      	ldr	r0, [r7, #12]
 800e6ba:	f001 f810 	bl	800f6de <UART_WaitOnFlagUntilTimeout>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d004      	beq.n	800e6ce <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	2220      	movs	r2, #32
 800e6c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800e6ca:	2303      	movs	r3, #3
 800e6cc:	e005      	b.n	800e6da <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	2220      	movs	r2, #32
 800e6d2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	e000      	b.n	800e6da <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800e6d8:	2302      	movs	r3, #2
  }
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3720      	adds	r7, #32
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}

0800e6e2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e6e2:	b580      	push	{r7, lr}
 800e6e4:	b08a      	sub	sp, #40	@ 0x28
 800e6e6:	af02      	add	r7, sp, #8
 800e6e8:	60f8      	str	r0, [r7, #12]
 800e6ea:	60b9      	str	r1, [r7, #8]
 800e6ec:	603b      	str	r3, [r7, #0]
 800e6ee:	4613      	mov	r3, r2
 800e6f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e6f8:	2b20      	cmp	r3, #32
 800e6fa:	f040 80b5 	bne.w	800e868 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d002      	beq.n	800e70a <HAL_UART_Receive+0x28>
 800e704:	88fb      	ldrh	r3, [r7, #6]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d101      	bne.n	800e70e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800e70a:	2301      	movs	r3, #1
 800e70c:	e0ad      	b.n	800e86a <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2200      	movs	r2, #0
 800e712:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	2222      	movs	r2, #34	@ 0x22
 800e71a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2200      	movs	r2, #0
 800e722:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e724:	f7f7 fa3c 	bl	8005ba0 <HAL_GetTick>
 800e728:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	88fa      	ldrh	r2, [r7, #6]
 800e72e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	88fa      	ldrh	r2, [r7, #6]
 800e736:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	689b      	ldr	r3, [r3, #8]
 800e73e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e742:	d10e      	bne.n	800e762 <HAL_UART_Receive+0x80>
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	691b      	ldr	r3, [r3, #16]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d105      	bne.n	800e758 <HAL_UART_Receive+0x76>
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e752:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e756:	e02d      	b.n	800e7b4 <HAL_UART_Receive+0xd2>
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	22ff      	movs	r2, #255	@ 0xff
 800e75c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e760:	e028      	b.n	800e7b4 <HAL_UART_Receive+0xd2>
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	689b      	ldr	r3, [r3, #8]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d10d      	bne.n	800e786 <HAL_UART_Receive+0xa4>
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	691b      	ldr	r3, [r3, #16]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d104      	bne.n	800e77c <HAL_UART_Receive+0x9a>
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	22ff      	movs	r2, #255	@ 0xff
 800e776:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e77a:	e01b      	b.n	800e7b4 <HAL_UART_Receive+0xd2>
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	227f      	movs	r2, #127	@ 0x7f
 800e780:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e784:	e016      	b.n	800e7b4 <HAL_UART_Receive+0xd2>
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	689b      	ldr	r3, [r3, #8]
 800e78a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e78e:	d10d      	bne.n	800e7ac <HAL_UART_Receive+0xca>
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	691b      	ldr	r3, [r3, #16]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d104      	bne.n	800e7a2 <HAL_UART_Receive+0xc0>
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	227f      	movs	r2, #127	@ 0x7f
 800e79c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e7a0:	e008      	b.n	800e7b4 <HAL_UART_Receive+0xd2>
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	223f      	movs	r2, #63	@ 0x3f
 800e7a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e7aa:	e003      	b.n	800e7b4 <HAL_UART_Receive+0xd2>
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e7ba:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	689b      	ldr	r3, [r3, #8]
 800e7c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e7c4:	d108      	bne.n	800e7d8 <HAL_UART_Receive+0xf6>
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	691b      	ldr	r3, [r3, #16]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d104      	bne.n	800e7d8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	61bb      	str	r3, [r7, #24]
 800e7d6:	e003      	b.n	800e7e0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800e7e0:	e036      	b.n	800e850 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	2120      	movs	r1, #32
 800e7ec:	68f8      	ldr	r0, [r7, #12]
 800e7ee:	f000 ff76 	bl	800f6de <UART_WaitOnFlagUntilTimeout>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d005      	beq.n	800e804 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2220      	movs	r2, #32
 800e7fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800e800:	2303      	movs	r3, #3
 800e802:	e032      	b.n	800e86a <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800e804:	69fb      	ldr	r3, [r7, #28]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d10c      	bne.n	800e824 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e810:	b29a      	uxth	r2, r3
 800e812:	8a7b      	ldrh	r3, [r7, #18]
 800e814:	4013      	ands	r3, r2
 800e816:	b29a      	uxth	r2, r3
 800e818:	69bb      	ldr	r3, [r7, #24]
 800e81a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e81c:	69bb      	ldr	r3, [r7, #24]
 800e81e:	3302      	adds	r3, #2
 800e820:	61bb      	str	r3, [r7, #24]
 800e822:	e00c      	b.n	800e83e <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e82a:	b2da      	uxtb	r2, r3
 800e82c:	8a7b      	ldrh	r3, [r7, #18]
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	4013      	ands	r3, r2
 800e832:	b2da      	uxtb	r2, r3
 800e834:	69fb      	ldr	r3, [r7, #28]
 800e836:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800e838:	69fb      	ldr	r3, [r7, #28]
 800e83a:	3301      	adds	r3, #1
 800e83c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e844:	b29b      	uxth	r3, r3
 800e846:	3b01      	subs	r3, #1
 800e848:	b29a      	uxth	r2, r3
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e856:	b29b      	uxth	r3, r3
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d1c2      	bne.n	800e7e2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	2220      	movs	r2, #32
 800e860:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800e864:	2300      	movs	r3, #0
 800e866:	e000      	b.n	800e86a <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800e868:	2302      	movs	r3, #2
  }
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3720      	adds	r7, #32
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}

0800e872 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e872:	b580      	push	{r7, lr}
 800e874:	b08a      	sub	sp, #40	@ 0x28
 800e876:	af00      	add	r7, sp, #0
 800e878:	60f8      	str	r0, [r7, #12]
 800e87a:	60b9      	str	r1, [r7, #8]
 800e87c:	4613      	mov	r3, r2
 800e87e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e886:	2b20      	cmp	r3, #32
 800e888:	d132      	bne.n	800e8f0 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d002      	beq.n	800e896 <HAL_UART_Receive_DMA+0x24>
 800e890:	88fb      	ldrh	r3, [r7, #6]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d101      	bne.n	800e89a <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e896:	2301      	movs	r3, #1
 800e898:	e02b      	b.n	800e8f2 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	2200      	movs	r2, #0
 800e89e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d018      	beq.n	800e8e0 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	e853 3f00 	ldrex	r3, [r3]
 800e8ba:	613b      	str	r3, [r7, #16]
   return(result);
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e8c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8cc:	623b      	str	r3, [r7, #32]
 800e8ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8d0:	69f9      	ldr	r1, [r7, #28]
 800e8d2:	6a3a      	ldr	r2, [r7, #32]
 800e8d4:	e841 2300 	strex	r3, r2, [r1]
 800e8d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d1e6      	bne.n	800e8ae <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e8e0:	88fb      	ldrh	r3, [r7, #6]
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	68b9      	ldr	r1, [r7, #8]
 800e8e6:	68f8      	ldr	r0, [r7, #12]
 800e8e8:	f000 ff66 	bl	800f7b8 <UART_Start_Receive_DMA>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	e000      	b.n	800e8f2 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800e8f0:	2302      	movs	r3, #2
  }
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3728      	adds	r7, #40	@ 0x28
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}

0800e8fa <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800e8fa:	b580      	push	{r7, lr}
 800e8fc:	b090      	sub	sp, #64	@ 0x40
 800e8fe:	af00      	add	r7, sp, #0
 800e900:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e906:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e90e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	689b      	ldr	r3, [r3, #8]
 800e916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e91a:	2b80      	cmp	r3, #128	@ 0x80
 800e91c:	d139      	bne.n	800e992 <HAL_UART_DMAStop+0x98>
 800e91e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e920:	2b21      	cmp	r3, #33	@ 0x21
 800e922:	d136      	bne.n	800e992 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	3308      	adds	r3, #8
 800e92a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e92c:	6a3b      	ldr	r3, [r7, #32]
 800e92e:	e853 3f00 	ldrex	r3, [r3]
 800e932:	61fb      	str	r3, [r7, #28]
   return(result);
 800e934:	69fb      	ldr	r3, [r7, #28]
 800e936:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e93a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	3308      	adds	r3, #8
 800e942:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e944:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e946:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e948:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e94a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e94c:	e841 2300 	strex	r3, r2, [r1]
 800e950:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e954:	2b00      	cmp	r3, #0
 800e956:	d1e5      	bne.n	800e924 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d015      	beq.n	800e98c <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e964:	4618      	mov	r0, r3
 800e966:	f7f7 ff9d 	bl	80068a4 <HAL_DMA_Abort>
 800e96a:	4603      	mov	r3, r0
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d00d      	beq.n	800e98c <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e974:	4618      	mov	r0, r3
 800e976:	f7f8 f9b1 	bl	8006cdc <HAL_DMA_GetError>
 800e97a:	4603      	mov	r3, r0
 800e97c:	2b20      	cmp	r3, #32
 800e97e:	d105      	bne.n	800e98c <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2210      	movs	r2, #16
 800e984:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e988:	2303      	movs	r3, #3
 800e98a:	e044      	b.n	800ea16 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f000 ffb3 	bl	800f8f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	689b      	ldr	r3, [r3, #8]
 800e998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e99c:	2b40      	cmp	r3, #64	@ 0x40
 800e99e:	d139      	bne.n	800ea14 <HAL_UART_DMAStop+0x11a>
 800e9a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9a2:	2b22      	cmp	r3, #34	@ 0x22
 800e9a4:	d136      	bne.n	800ea14 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	3308      	adds	r3, #8
 800e9ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	e853 3f00 	ldrex	r3, [r3]
 800e9b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e9bc:	633b      	str	r3, [r7, #48]	@ 0x30
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	3308      	adds	r3, #8
 800e9c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e9c6:	61ba      	str	r2, [r7, #24]
 800e9c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ca:	6979      	ldr	r1, [r7, #20]
 800e9cc:	69ba      	ldr	r2, [r7, #24]
 800e9ce:	e841 2300 	strex	r3, r2, [r1]
 800e9d2:	613b      	str	r3, [r7, #16]
   return(result);
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d1e5      	bne.n	800e9a6 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d015      	beq.n	800ea0e <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7f7 ff5c 	bl	80068a4 <HAL_DMA_Abort>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d00d      	beq.n	800ea0e <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f7f8 f970 	bl	8006cdc <HAL_DMA_GetError>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	2b20      	cmp	r3, #32
 800ea00:	d105      	bne.n	800ea0e <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2210      	movs	r2, #16
 800ea06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ea0a:	2303      	movs	r3, #3
 800ea0c:	e003      	b.n	800ea16 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f000 ff98 	bl	800f944 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800ea14:	2300      	movs	r3, #0
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	3740      	adds	r7, #64	@ 0x40
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}
	...

0800ea20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b0ba      	sub	sp, #232	@ 0xe8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	69db      	ldr	r3, [r3, #28]
 800ea2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	689b      	ldr	r3, [r3, #8]
 800ea42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ea46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ea4a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ea4e:	4013      	ands	r3, r2
 800ea50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ea54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d115      	bne.n	800ea88 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ea5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea60:	f003 0320 	and.w	r3, r3, #32
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d00f      	beq.n	800ea88 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ea68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ea6c:	f003 0320 	and.w	r3, r3, #32
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d009      	beq.n	800ea88 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	f000 82b1 	beq.w	800efe0 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	4798      	blx	r3
      }
      return;
 800ea86:	e2ab      	b.n	800efe0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ea88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	f000 8117 	beq.w	800ecc0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ea92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ea96:	f003 0301 	and.w	r3, r3, #1
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d106      	bne.n	800eaac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ea9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800eaa2:	4b85      	ldr	r3, [pc, #532]	@ (800ecb8 <HAL_UART_IRQHandler+0x298>)
 800eaa4:	4013      	ands	r3, r2
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	f000 810a 	beq.w	800ecc0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eaac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eab0:	f003 0301 	and.w	r3, r3, #1
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d011      	beq.n	800eadc <HAL_UART_IRQHandler+0xbc>
 800eab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eabc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d00b      	beq.n	800eadc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	2201      	movs	r2, #1
 800eaca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ead2:	f043 0201 	orr.w	r2, r3, #1
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eadc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eae0:	f003 0302 	and.w	r3, r3, #2
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d011      	beq.n	800eb0c <HAL_UART_IRQHandler+0xec>
 800eae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eaec:	f003 0301 	and.w	r3, r3, #1
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d00b      	beq.n	800eb0c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	2202      	movs	r2, #2
 800eafa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb02:	f043 0204 	orr.w	r2, r3, #4
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb10:	f003 0304 	and.w	r3, r3, #4
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d011      	beq.n	800eb3c <HAL_UART_IRQHandler+0x11c>
 800eb18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eb1c:	f003 0301 	and.w	r3, r3, #1
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d00b      	beq.n	800eb3c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	2204      	movs	r2, #4
 800eb2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb32:	f043 0202 	orr.w	r2, r3, #2
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800eb3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb40:	f003 0308 	and.w	r3, r3, #8
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d017      	beq.n	800eb78 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800eb48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb4c:	f003 0320 	and.w	r3, r3, #32
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d105      	bne.n	800eb60 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800eb54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eb58:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d00b      	beq.n	800eb78 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	2208      	movs	r2, #8
 800eb66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb6e:	f043 0208 	orr.w	r2, r3, #8
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800eb78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d012      	beq.n	800ebaa <HAL_UART_IRQHandler+0x18a>
 800eb84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d00c      	beq.n	800ebaa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800eb98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eba0:	f043 0220 	orr.w	r2, r3, #32
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	f000 8217 	beq.w	800efe4 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ebb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebba:	f003 0320 	and.w	r3, r3, #32
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d00d      	beq.n	800ebde <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ebc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ebc6:	f003 0320 	and.w	r3, r3, #32
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d007      	beq.n	800ebde <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d003      	beq.n	800ebde <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ebe4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	689b      	ldr	r3, [r3, #8]
 800ebee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebf2:	2b40      	cmp	r3, #64	@ 0x40
 800ebf4:	d005      	beq.n	800ec02 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ebf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ebfa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d04f      	beq.n	800eca2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f000 fe9e 	bl	800f944 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	689b      	ldr	r3, [r3, #8]
 800ec0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec12:	2b40      	cmp	r3, #64	@ 0x40
 800ec14:	d141      	bne.n	800ec9a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	3308      	adds	r3, #8
 800ec1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ec24:	e853 3f00 	ldrex	r3, [r3]
 800ec28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ec2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ec30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ec34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	3308      	adds	r3, #8
 800ec3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ec42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ec46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ec4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ec52:	e841 2300 	strex	r3, r2, [r1]
 800ec56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ec5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d1d9      	bne.n	800ec16 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d013      	beq.n	800ec92 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec6e:	4a13      	ldr	r2, [pc, #76]	@ (800ecbc <HAL_UART_IRQHandler+0x29c>)
 800ec70:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7f7 fe84 	bl	8006984 <HAL_DMA_Abort_IT>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d017      	beq.n	800ecb2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec88:	687a      	ldr	r2, [r7, #4]
 800ec8a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ec8c:	4610      	mov	r0, r2
 800ec8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec90:	e00f      	b.n	800ecb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f7f6 fe12 	bl	80058bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec98:	e00b      	b.n	800ecb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f7f6 fe0e 	bl	80058bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eca0:	e007      	b.n	800ecb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f7f6 fe0a 	bl	80058bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800ecb0:	e198      	b.n	800efe4 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecb2:	bf00      	nop
    return;
 800ecb4:	e196      	b.n	800efe4 <HAL_UART_IRQHandler+0x5c4>
 800ecb6:	bf00      	nop
 800ecb8:	04000120 	.word	0x04000120
 800ecbc:	0800fc5b 	.word	0x0800fc5b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ecc4:	2b01      	cmp	r3, #1
 800ecc6:	f040 8166 	bne.w	800ef96 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ecca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ecce:	f003 0310 	and.w	r3, r3, #16
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	f000 815f 	beq.w	800ef96 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ecd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ecdc:	f003 0310 	and.w	r3, r3, #16
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	f000 8158 	beq.w	800ef96 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	2210      	movs	r2, #16
 800ecec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	689b      	ldr	r3, [r3, #8]
 800ecf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecf8:	2b40      	cmp	r3, #64	@ 0x40
 800ecfa:	f040 80d0 	bne.w	800ee9e <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ed0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	f000 80ab 	beq.w	800ee6a <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ed1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	f080 80a3 	bcs.w	800ee6a <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ed2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed32:	69db      	ldr	r3, [r3, #28]
 800ed34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ed38:	f000 8086 	beq.w	800ee48 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ed48:	e853 3f00 	ldrex	r3, [r3]
 800ed4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ed50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ed54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ed58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	461a      	mov	r2, r3
 800ed62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ed66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ed6a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ed72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ed76:	e841 2300 	strex	r3, r2, [r1]
 800ed7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ed7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d1da      	bne.n	800ed3c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	3308      	adds	r3, #8
 800ed8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ed90:	e853 3f00 	ldrex	r3, [r3]
 800ed94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ed96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ed98:	f023 0301 	bic.w	r3, r3, #1
 800ed9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	3308      	adds	r3, #8
 800eda6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800edaa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800edae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edb0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800edb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800edb6:	e841 2300 	strex	r3, r2, [r1]
 800edba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800edbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d1e1      	bne.n	800ed86 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	3308      	adds	r3, #8
 800edc8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800edcc:	e853 3f00 	ldrex	r3, [r3]
 800edd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800edd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800edd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800edd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	3308      	adds	r3, #8
 800ede2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ede6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ede8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800edec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800edee:	e841 2300 	strex	r3, r2, [r1]
 800edf2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800edf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d1e3      	bne.n	800edc2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2220      	movs	r2, #32
 800edfe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2200      	movs	r2, #0
 800ee06:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee10:	e853 3f00 	ldrex	r3, [r3]
 800ee14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ee16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee18:	f023 0310 	bic.w	r3, r3, #16
 800ee1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	461a      	mov	r2, r3
 800ee26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ee2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ee2c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ee30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ee32:	e841 2300 	strex	r3, r2, [r1]
 800ee36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ee38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d1e4      	bne.n	800ee08 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee42:	4618      	mov	r0, r3
 800ee44:	f7f7 fd2e 	bl	80068a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2202      	movs	r2, #2
 800ee4c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ee5a:	b29b      	uxth	r3, r3
 800ee5c:	1ad3      	subs	r3, r2, r3
 800ee5e:	b29b      	uxth	r3, r3
 800ee60:	4619      	mov	r1, r3
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f000 f8d2 	bl	800f00c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ee68:	e0be      	b.n	800efe8 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ee70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ee74:	429a      	cmp	r2, r3
 800ee76:	f040 80b7 	bne.w	800efe8 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee7e:	69db      	ldr	r3, [r3, #28]
 800ee80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ee84:	f040 80b0 	bne.w	800efe8 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2202      	movs	r2, #2
 800ee8c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ee94:	4619      	mov	r1, r3
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f000 f8b8 	bl	800f00c <HAL_UARTEx_RxEventCallback>
      return;
 800ee9c:	e0a4      	b.n	800efe8 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800eeaa:	b29b      	uxth	r3, r3
 800eeac:	1ad3      	subs	r3, r2, r3
 800eeae:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	f000 8096 	beq.w	800efec <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800eec0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	f000 8091 	beq.w	800efec <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eed2:	e853 3f00 	ldrex	r3, [r3]
 800eed6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800eed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eeda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eede:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	461a      	mov	r2, r3
 800eee8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800eeec:	647b      	str	r3, [r7, #68]	@ 0x44
 800eeee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eef0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eef2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eef4:	e841 2300 	strex	r3, r2, [r1]
 800eef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eefa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d1e4      	bne.n	800eeca <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	3308      	adds	r3, #8
 800ef06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef0a:	e853 3f00 	ldrex	r3, [r3]
 800ef0e:	623b      	str	r3, [r7, #32]
   return(result);
 800ef10:	6a3b      	ldr	r3, [r7, #32]
 800ef12:	f023 0301 	bic.w	r3, r3, #1
 800ef16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	3308      	adds	r3, #8
 800ef20:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ef24:	633a      	str	r2, [r7, #48]	@ 0x30
 800ef26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ef2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef2c:	e841 2300 	strex	r3, r2, [r1]
 800ef30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ef32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d1e3      	bne.n	800ef00 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2220      	movs	r2, #32
 800ef3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2200      	movs	r2, #0
 800ef44:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef52:	693b      	ldr	r3, [r7, #16]
 800ef54:	e853 3f00 	ldrex	r3, [r3]
 800ef58:	60fb      	str	r3, [r7, #12]
   return(result);
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	f023 0310 	bic.w	r3, r3, #16
 800ef60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	461a      	mov	r2, r3
 800ef6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ef6e:	61fb      	str	r3, [r7, #28]
 800ef70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef72:	69b9      	ldr	r1, [r7, #24]
 800ef74:	69fa      	ldr	r2, [r7, #28]
 800ef76:	e841 2300 	strex	r3, r2, [r1]
 800ef7a:	617b      	str	r3, [r7, #20]
   return(result);
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d1e4      	bne.n	800ef4c <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2202      	movs	r2, #2
 800ef86:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ef88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ef8c:	4619      	mov	r1, r3
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f000 f83c 	bl	800f00c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ef94:	e02a      	b.n	800efec <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ef96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d00e      	beq.n	800efc0 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800efa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800efa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d008      	beq.n	800efc0 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d01c      	beq.n	800eff0 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	4798      	blx	r3
    }
    return;
 800efbe:	e017      	b.n	800eff0 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800efc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800efc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d012      	beq.n	800eff2 <HAL_UART_IRQHandler+0x5d2>
 800efcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800efd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d00c      	beq.n	800eff2 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f000 fe50 	bl	800fc7e <UART_EndTransmit_IT>
    return;
 800efde:	e008      	b.n	800eff2 <HAL_UART_IRQHandler+0x5d2>
      return;
 800efe0:	bf00      	nop
 800efe2:	e006      	b.n	800eff2 <HAL_UART_IRQHandler+0x5d2>
    return;
 800efe4:	bf00      	nop
 800efe6:	e004      	b.n	800eff2 <HAL_UART_IRQHandler+0x5d2>
      return;
 800efe8:	bf00      	nop
 800efea:	e002      	b.n	800eff2 <HAL_UART_IRQHandler+0x5d2>
      return;
 800efec:	bf00      	nop
 800efee:	e000      	b.n	800eff2 <HAL_UART_IRQHandler+0x5d2>
    return;
 800eff0:	bf00      	nop
  }

}
 800eff2:	37e8      	adds	r7, #232	@ 0xe8
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800eff8:	b480      	push	{r7}
 800effa:	b083      	sub	sp, #12
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f000:	bf00      	nop
 800f002:	370c      	adds	r7, #12
 800f004:	46bd      	mov	sp, r7
 800f006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00a:	4770      	bx	lr

0800f00c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f00c:	b480      	push	{r7}
 800f00e:	b083      	sub	sp, #12
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
 800f014:	460b      	mov	r3, r1
 800f016:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f018:	bf00      	nop
 800f01a:	370c      	adds	r7, #12
 800f01c:	46bd      	mov	sp, r7
 800f01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f022:	4770      	bx	lr

0800f024 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b088      	sub	sp, #32
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f02c:	2300      	movs	r3, #0
 800f02e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	689a      	ldr	r2, [r3, #8]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	691b      	ldr	r3, [r3, #16]
 800f038:	431a      	orrs	r2, r3
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	695b      	ldr	r3, [r3, #20]
 800f03e:	431a      	orrs	r2, r3
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	69db      	ldr	r3, [r3, #28]
 800f044:	4313      	orrs	r3, r2
 800f046:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	681a      	ldr	r2, [r3, #0]
 800f04e:	4ba6      	ldr	r3, [pc, #664]	@ (800f2e8 <UART_SetConfig+0x2c4>)
 800f050:	4013      	ands	r3, r2
 800f052:	687a      	ldr	r2, [r7, #4]
 800f054:	6812      	ldr	r2, [r2, #0]
 800f056:	6979      	ldr	r1, [r7, #20]
 800f058:	430b      	orrs	r3, r1
 800f05a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	685b      	ldr	r3, [r3, #4]
 800f062:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	68da      	ldr	r2, [r3, #12]
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	430a      	orrs	r2, r1
 800f070:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	699b      	ldr	r3, [r3, #24]
 800f076:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6a1b      	ldr	r3, [r3, #32]
 800f07c:	697a      	ldr	r2, [r7, #20]
 800f07e:	4313      	orrs	r3, r2
 800f080:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	689b      	ldr	r3, [r3, #8]
 800f088:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	697a      	ldr	r2, [r7, #20]
 800f092:	430a      	orrs	r2, r1
 800f094:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	4a94      	ldr	r2, [pc, #592]	@ (800f2ec <UART_SetConfig+0x2c8>)
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d120      	bne.n	800f0e2 <UART_SetConfig+0xbe>
 800f0a0:	4b93      	ldr	r3, [pc, #588]	@ (800f2f0 <UART_SetConfig+0x2cc>)
 800f0a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f0a6:	f003 0303 	and.w	r3, r3, #3
 800f0aa:	2b03      	cmp	r3, #3
 800f0ac:	d816      	bhi.n	800f0dc <UART_SetConfig+0xb8>
 800f0ae:	a201      	add	r2, pc, #4	@ (adr r2, 800f0b4 <UART_SetConfig+0x90>)
 800f0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0b4:	0800f0c5 	.word	0x0800f0c5
 800f0b8:	0800f0d1 	.word	0x0800f0d1
 800f0bc:	0800f0cb 	.word	0x0800f0cb
 800f0c0:	0800f0d7 	.word	0x0800f0d7
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	77fb      	strb	r3, [r7, #31]
 800f0c8:	e150      	b.n	800f36c <UART_SetConfig+0x348>
 800f0ca:	2302      	movs	r3, #2
 800f0cc:	77fb      	strb	r3, [r7, #31]
 800f0ce:	e14d      	b.n	800f36c <UART_SetConfig+0x348>
 800f0d0:	2304      	movs	r3, #4
 800f0d2:	77fb      	strb	r3, [r7, #31]
 800f0d4:	e14a      	b.n	800f36c <UART_SetConfig+0x348>
 800f0d6:	2308      	movs	r3, #8
 800f0d8:	77fb      	strb	r3, [r7, #31]
 800f0da:	e147      	b.n	800f36c <UART_SetConfig+0x348>
 800f0dc:	2310      	movs	r3, #16
 800f0de:	77fb      	strb	r3, [r7, #31]
 800f0e0:	e144      	b.n	800f36c <UART_SetConfig+0x348>
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	4a83      	ldr	r2, [pc, #524]	@ (800f2f4 <UART_SetConfig+0x2d0>)
 800f0e8:	4293      	cmp	r3, r2
 800f0ea:	d132      	bne.n	800f152 <UART_SetConfig+0x12e>
 800f0ec:	4b80      	ldr	r3, [pc, #512]	@ (800f2f0 <UART_SetConfig+0x2cc>)
 800f0ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f0f2:	f003 030c 	and.w	r3, r3, #12
 800f0f6:	2b0c      	cmp	r3, #12
 800f0f8:	d828      	bhi.n	800f14c <UART_SetConfig+0x128>
 800f0fa:	a201      	add	r2, pc, #4	@ (adr r2, 800f100 <UART_SetConfig+0xdc>)
 800f0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f100:	0800f135 	.word	0x0800f135
 800f104:	0800f14d 	.word	0x0800f14d
 800f108:	0800f14d 	.word	0x0800f14d
 800f10c:	0800f14d 	.word	0x0800f14d
 800f110:	0800f141 	.word	0x0800f141
 800f114:	0800f14d 	.word	0x0800f14d
 800f118:	0800f14d 	.word	0x0800f14d
 800f11c:	0800f14d 	.word	0x0800f14d
 800f120:	0800f13b 	.word	0x0800f13b
 800f124:	0800f14d 	.word	0x0800f14d
 800f128:	0800f14d 	.word	0x0800f14d
 800f12c:	0800f14d 	.word	0x0800f14d
 800f130:	0800f147 	.word	0x0800f147
 800f134:	2300      	movs	r3, #0
 800f136:	77fb      	strb	r3, [r7, #31]
 800f138:	e118      	b.n	800f36c <UART_SetConfig+0x348>
 800f13a:	2302      	movs	r3, #2
 800f13c:	77fb      	strb	r3, [r7, #31]
 800f13e:	e115      	b.n	800f36c <UART_SetConfig+0x348>
 800f140:	2304      	movs	r3, #4
 800f142:	77fb      	strb	r3, [r7, #31]
 800f144:	e112      	b.n	800f36c <UART_SetConfig+0x348>
 800f146:	2308      	movs	r3, #8
 800f148:	77fb      	strb	r3, [r7, #31]
 800f14a:	e10f      	b.n	800f36c <UART_SetConfig+0x348>
 800f14c:	2310      	movs	r3, #16
 800f14e:	77fb      	strb	r3, [r7, #31]
 800f150:	e10c      	b.n	800f36c <UART_SetConfig+0x348>
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	4a68      	ldr	r2, [pc, #416]	@ (800f2f8 <UART_SetConfig+0x2d4>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d120      	bne.n	800f19e <UART_SetConfig+0x17a>
 800f15c:	4b64      	ldr	r3, [pc, #400]	@ (800f2f0 <UART_SetConfig+0x2cc>)
 800f15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f162:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f166:	2b30      	cmp	r3, #48	@ 0x30
 800f168:	d013      	beq.n	800f192 <UART_SetConfig+0x16e>
 800f16a:	2b30      	cmp	r3, #48	@ 0x30
 800f16c:	d814      	bhi.n	800f198 <UART_SetConfig+0x174>
 800f16e:	2b20      	cmp	r3, #32
 800f170:	d009      	beq.n	800f186 <UART_SetConfig+0x162>
 800f172:	2b20      	cmp	r3, #32
 800f174:	d810      	bhi.n	800f198 <UART_SetConfig+0x174>
 800f176:	2b00      	cmp	r3, #0
 800f178:	d002      	beq.n	800f180 <UART_SetConfig+0x15c>
 800f17a:	2b10      	cmp	r3, #16
 800f17c:	d006      	beq.n	800f18c <UART_SetConfig+0x168>
 800f17e:	e00b      	b.n	800f198 <UART_SetConfig+0x174>
 800f180:	2300      	movs	r3, #0
 800f182:	77fb      	strb	r3, [r7, #31]
 800f184:	e0f2      	b.n	800f36c <UART_SetConfig+0x348>
 800f186:	2302      	movs	r3, #2
 800f188:	77fb      	strb	r3, [r7, #31]
 800f18a:	e0ef      	b.n	800f36c <UART_SetConfig+0x348>
 800f18c:	2304      	movs	r3, #4
 800f18e:	77fb      	strb	r3, [r7, #31]
 800f190:	e0ec      	b.n	800f36c <UART_SetConfig+0x348>
 800f192:	2308      	movs	r3, #8
 800f194:	77fb      	strb	r3, [r7, #31]
 800f196:	e0e9      	b.n	800f36c <UART_SetConfig+0x348>
 800f198:	2310      	movs	r3, #16
 800f19a:	77fb      	strb	r3, [r7, #31]
 800f19c:	e0e6      	b.n	800f36c <UART_SetConfig+0x348>
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	4a56      	ldr	r2, [pc, #344]	@ (800f2fc <UART_SetConfig+0x2d8>)
 800f1a4:	4293      	cmp	r3, r2
 800f1a6:	d120      	bne.n	800f1ea <UART_SetConfig+0x1c6>
 800f1a8:	4b51      	ldr	r3, [pc, #324]	@ (800f2f0 <UART_SetConfig+0x2cc>)
 800f1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f1ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800f1b2:	2bc0      	cmp	r3, #192	@ 0xc0
 800f1b4:	d013      	beq.n	800f1de <UART_SetConfig+0x1ba>
 800f1b6:	2bc0      	cmp	r3, #192	@ 0xc0
 800f1b8:	d814      	bhi.n	800f1e4 <UART_SetConfig+0x1c0>
 800f1ba:	2b80      	cmp	r3, #128	@ 0x80
 800f1bc:	d009      	beq.n	800f1d2 <UART_SetConfig+0x1ae>
 800f1be:	2b80      	cmp	r3, #128	@ 0x80
 800f1c0:	d810      	bhi.n	800f1e4 <UART_SetConfig+0x1c0>
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d002      	beq.n	800f1cc <UART_SetConfig+0x1a8>
 800f1c6:	2b40      	cmp	r3, #64	@ 0x40
 800f1c8:	d006      	beq.n	800f1d8 <UART_SetConfig+0x1b4>
 800f1ca:	e00b      	b.n	800f1e4 <UART_SetConfig+0x1c0>
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	77fb      	strb	r3, [r7, #31]
 800f1d0:	e0cc      	b.n	800f36c <UART_SetConfig+0x348>
 800f1d2:	2302      	movs	r3, #2
 800f1d4:	77fb      	strb	r3, [r7, #31]
 800f1d6:	e0c9      	b.n	800f36c <UART_SetConfig+0x348>
 800f1d8:	2304      	movs	r3, #4
 800f1da:	77fb      	strb	r3, [r7, #31]
 800f1dc:	e0c6      	b.n	800f36c <UART_SetConfig+0x348>
 800f1de:	2308      	movs	r3, #8
 800f1e0:	77fb      	strb	r3, [r7, #31]
 800f1e2:	e0c3      	b.n	800f36c <UART_SetConfig+0x348>
 800f1e4:	2310      	movs	r3, #16
 800f1e6:	77fb      	strb	r3, [r7, #31]
 800f1e8:	e0c0      	b.n	800f36c <UART_SetConfig+0x348>
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	4a44      	ldr	r2, [pc, #272]	@ (800f300 <UART_SetConfig+0x2dc>)
 800f1f0:	4293      	cmp	r3, r2
 800f1f2:	d125      	bne.n	800f240 <UART_SetConfig+0x21c>
 800f1f4:	4b3e      	ldr	r3, [pc, #248]	@ (800f2f0 <UART_SetConfig+0x2cc>)
 800f1f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f1fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f1fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f202:	d017      	beq.n	800f234 <UART_SetConfig+0x210>
 800f204:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f208:	d817      	bhi.n	800f23a <UART_SetConfig+0x216>
 800f20a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f20e:	d00b      	beq.n	800f228 <UART_SetConfig+0x204>
 800f210:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f214:	d811      	bhi.n	800f23a <UART_SetConfig+0x216>
 800f216:	2b00      	cmp	r3, #0
 800f218:	d003      	beq.n	800f222 <UART_SetConfig+0x1fe>
 800f21a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f21e:	d006      	beq.n	800f22e <UART_SetConfig+0x20a>
 800f220:	e00b      	b.n	800f23a <UART_SetConfig+0x216>
 800f222:	2300      	movs	r3, #0
 800f224:	77fb      	strb	r3, [r7, #31]
 800f226:	e0a1      	b.n	800f36c <UART_SetConfig+0x348>
 800f228:	2302      	movs	r3, #2
 800f22a:	77fb      	strb	r3, [r7, #31]
 800f22c:	e09e      	b.n	800f36c <UART_SetConfig+0x348>
 800f22e:	2304      	movs	r3, #4
 800f230:	77fb      	strb	r3, [r7, #31]
 800f232:	e09b      	b.n	800f36c <UART_SetConfig+0x348>
 800f234:	2308      	movs	r3, #8
 800f236:	77fb      	strb	r3, [r7, #31]
 800f238:	e098      	b.n	800f36c <UART_SetConfig+0x348>
 800f23a:	2310      	movs	r3, #16
 800f23c:	77fb      	strb	r3, [r7, #31]
 800f23e:	e095      	b.n	800f36c <UART_SetConfig+0x348>
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	4a2f      	ldr	r2, [pc, #188]	@ (800f304 <UART_SetConfig+0x2e0>)
 800f246:	4293      	cmp	r3, r2
 800f248:	d125      	bne.n	800f296 <UART_SetConfig+0x272>
 800f24a:	4b29      	ldr	r3, [pc, #164]	@ (800f2f0 <UART_SetConfig+0x2cc>)
 800f24c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f250:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f254:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f258:	d017      	beq.n	800f28a <UART_SetConfig+0x266>
 800f25a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f25e:	d817      	bhi.n	800f290 <UART_SetConfig+0x26c>
 800f260:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f264:	d00b      	beq.n	800f27e <UART_SetConfig+0x25a>
 800f266:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f26a:	d811      	bhi.n	800f290 <UART_SetConfig+0x26c>
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d003      	beq.n	800f278 <UART_SetConfig+0x254>
 800f270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f274:	d006      	beq.n	800f284 <UART_SetConfig+0x260>
 800f276:	e00b      	b.n	800f290 <UART_SetConfig+0x26c>
 800f278:	2301      	movs	r3, #1
 800f27a:	77fb      	strb	r3, [r7, #31]
 800f27c:	e076      	b.n	800f36c <UART_SetConfig+0x348>
 800f27e:	2302      	movs	r3, #2
 800f280:	77fb      	strb	r3, [r7, #31]
 800f282:	e073      	b.n	800f36c <UART_SetConfig+0x348>
 800f284:	2304      	movs	r3, #4
 800f286:	77fb      	strb	r3, [r7, #31]
 800f288:	e070      	b.n	800f36c <UART_SetConfig+0x348>
 800f28a:	2308      	movs	r3, #8
 800f28c:	77fb      	strb	r3, [r7, #31]
 800f28e:	e06d      	b.n	800f36c <UART_SetConfig+0x348>
 800f290:	2310      	movs	r3, #16
 800f292:	77fb      	strb	r3, [r7, #31]
 800f294:	e06a      	b.n	800f36c <UART_SetConfig+0x348>
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	4a1b      	ldr	r2, [pc, #108]	@ (800f308 <UART_SetConfig+0x2e4>)
 800f29c:	4293      	cmp	r3, r2
 800f29e:	d138      	bne.n	800f312 <UART_SetConfig+0x2ee>
 800f2a0:	4b13      	ldr	r3, [pc, #76]	@ (800f2f0 <UART_SetConfig+0x2cc>)
 800f2a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2a6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800f2aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f2ae:	d017      	beq.n	800f2e0 <UART_SetConfig+0x2bc>
 800f2b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f2b4:	d82a      	bhi.n	800f30c <UART_SetConfig+0x2e8>
 800f2b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f2ba:	d00b      	beq.n	800f2d4 <UART_SetConfig+0x2b0>
 800f2bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f2c0:	d824      	bhi.n	800f30c <UART_SetConfig+0x2e8>
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d003      	beq.n	800f2ce <UART_SetConfig+0x2aa>
 800f2c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f2ca:	d006      	beq.n	800f2da <UART_SetConfig+0x2b6>
 800f2cc:	e01e      	b.n	800f30c <UART_SetConfig+0x2e8>
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	77fb      	strb	r3, [r7, #31]
 800f2d2:	e04b      	b.n	800f36c <UART_SetConfig+0x348>
 800f2d4:	2302      	movs	r3, #2
 800f2d6:	77fb      	strb	r3, [r7, #31]
 800f2d8:	e048      	b.n	800f36c <UART_SetConfig+0x348>
 800f2da:	2304      	movs	r3, #4
 800f2dc:	77fb      	strb	r3, [r7, #31]
 800f2de:	e045      	b.n	800f36c <UART_SetConfig+0x348>
 800f2e0:	2308      	movs	r3, #8
 800f2e2:	77fb      	strb	r3, [r7, #31]
 800f2e4:	e042      	b.n	800f36c <UART_SetConfig+0x348>
 800f2e6:	bf00      	nop
 800f2e8:	efff69f3 	.word	0xefff69f3
 800f2ec:	40011000 	.word	0x40011000
 800f2f0:	40023800 	.word	0x40023800
 800f2f4:	40004400 	.word	0x40004400
 800f2f8:	40004800 	.word	0x40004800
 800f2fc:	40004c00 	.word	0x40004c00
 800f300:	40005000 	.word	0x40005000
 800f304:	40011400 	.word	0x40011400
 800f308:	40007800 	.word	0x40007800
 800f30c:	2310      	movs	r3, #16
 800f30e:	77fb      	strb	r3, [r7, #31]
 800f310:	e02c      	b.n	800f36c <UART_SetConfig+0x348>
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	4a72      	ldr	r2, [pc, #456]	@ (800f4e0 <UART_SetConfig+0x4bc>)
 800f318:	4293      	cmp	r3, r2
 800f31a:	d125      	bne.n	800f368 <UART_SetConfig+0x344>
 800f31c:	4b71      	ldr	r3, [pc, #452]	@ (800f4e4 <UART_SetConfig+0x4c0>)
 800f31e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f322:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800f326:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800f32a:	d017      	beq.n	800f35c <UART_SetConfig+0x338>
 800f32c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800f330:	d817      	bhi.n	800f362 <UART_SetConfig+0x33e>
 800f332:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f336:	d00b      	beq.n	800f350 <UART_SetConfig+0x32c>
 800f338:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f33c:	d811      	bhi.n	800f362 <UART_SetConfig+0x33e>
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d003      	beq.n	800f34a <UART_SetConfig+0x326>
 800f342:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f346:	d006      	beq.n	800f356 <UART_SetConfig+0x332>
 800f348:	e00b      	b.n	800f362 <UART_SetConfig+0x33e>
 800f34a:	2300      	movs	r3, #0
 800f34c:	77fb      	strb	r3, [r7, #31]
 800f34e:	e00d      	b.n	800f36c <UART_SetConfig+0x348>
 800f350:	2302      	movs	r3, #2
 800f352:	77fb      	strb	r3, [r7, #31]
 800f354:	e00a      	b.n	800f36c <UART_SetConfig+0x348>
 800f356:	2304      	movs	r3, #4
 800f358:	77fb      	strb	r3, [r7, #31]
 800f35a:	e007      	b.n	800f36c <UART_SetConfig+0x348>
 800f35c:	2308      	movs	r3, #8
 800f35e:	77fb      	strb	r3, [r7, #31]
 800f360:	e004      	b.n	800f36c <UART_SetConfig+0x348>
 800f362:	2310      	movs	r3, #16
 800f364:	77fb      	strb	r3, [r7, #31]
 800f366:	e001      	b.n	800f36c <UART_SetConfig+0x348>
 800f368:	2310      	movs	r3, #16
 800f36a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	69db      	ldr	r3, [r3, #28]
 800f370:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f374:	d15b      	bne.n	800f42e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800f376:	7ffb      	ldrb	r3, [r7, #31]
 800f378:	2b08      	cmp	r3, #8
 800f37a:	d828      	bhi.n	800f3ce <UART_SetConfig+0x3aa>
 800f37c:	a201      	add	r2, pc, #4	@ (adr r2, 800f384 <UART_SetConfig+0x360>)
 800f37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f382:	bf00      	nop
 800f384:	0800f3a9 	.word	0x0800f3a9
 800f388:	0800f3b1 	.word	0x0800f3b1
 800f38c:	0800f3b9 	.word	0x0800f3b9
 800f390:	0800f3cf 	.word	0x0800f3cf
 800f394:	0800f3bf 	.word	0x0800f3bf
 800f398:	0800f3cf 	.word	0x0800f3cf
 800f39c:	0800f3cf 	.word	0x0800f3cf
 800f3a0:	0800f3cf 	.word	0x0800f3cf
 800f3a4:	0800f3c7 	.word	0x0800f3c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f3a8:	f7fb fbf4 	bl	800ab94 <HAL_RCC_GetPCLK1Freq>
 800f3ac:	61b8      	str	r0, [r7, #24]
        break;
 800f3ae:	e013      	b.n	800f3d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f3b0:	f7fb fc04 	bl	800abbc <HAL_RCC_GetPCLK2Freq>
 800f3b4:	61b8      	str	r0, [r7, #24]
        break;
 800f3b6:	e00f      	b.n	800f3d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f3b8:	4b4b      	ldr	r3, [pc, #300]	@ (800f4e8 <UART_SetConfig+0x4c4>)
 800f3ba:	61bb      	str	r3, [r7, #24]
        break;
 800f3bc:	e00c      	b.n	800f3d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f3be:	f7fb fb17 	bl	800a9f0 <HAL_RCC_GetSysClockFreq>
 800f3c2:	61b8      	str	r0, [r7, #24]
        break;
 800f3c4:	e008      	b.n	800f3d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f3c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f3ca:	61bb      	str	r3, [r7, #24]
        break;
 800f3cc:	e004      	b.n	800f3d8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	77bb      	strb	r3, [r7, #30]
        break;
 800f3d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f3d8:	69bb      	ldr	r3, [r7, #24]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d074      	beq.n	800f4c8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f3de:	69bb      	ldr	r3, [r7, #24]
 800f3e0:	005a      	lsls	r2, r3, #1
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	085b      	lsrs	r3, r3, #1
 800f3e8:	441a      	add	r2, r3
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	685b      	ldr	r3, [r3, #4]
 800f3ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f3f4:	693b      	ldr	r3, [r7, #16]
 800f3f6:	2b0f      	cmp	r3, #15
 800f3f8:	d916      	bls.n	800f428 <UART_SetConfig+0x404>
 800f3fa:	693b      	ldr	r3, [r7, #16]
 800f3fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f400:	d212      	bcs.n	800f428 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f402:	693b      	ldr	r3, [r7, #16]
 800f404:	b29b      	uxth	r3, r3
 800f406:	f023 030f 	bic.w	r3, r3, #15
 800f40a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f40c:	693b      	ldr	r3, [r7, #16]
 800f40e:	085b      	lsrs	r3, r3, #1
 800f410:	b29b      	uxth	r3, r3
 800f412:	f003 0307 	and.w	r3, r3, #7
 800f416:	b29a      	uxth	r2, r3
 800f418:	89fb      	ldrh	r3, [r7, #14]
 800f41a:	4313      	orrs	r3, r2
 800f41c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	89fa      	ldrh	r2, [r7, #14]
 800f424:	60da      	str	r2, [r3, #12]
 800f426:	e04f      	b.n	800f4c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800f428:	2301      	movs	r3, #1
 800f42a:	77bb      	strb	r3, [r7, #30]
 800f42c:	e04c      	b.n	800f4c8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f42e:	7ffb      	ldrb	r3, [r7, #31]
 800f430:	2b08      	cmp	r3, #8
 800f432:	d828      	bhi.n	800f486 <UART_SetConfig+0x462>
 800f434:	a201      	add	r2, pc, #4	@ (adr r2, 800f43c <UART_SetConfig+0x418>)
 800f436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f43a:	bf00      	nop
 800f43c:	0800f461 	.word	0x0800f461
 800f440:	0800f469 	.word	0x0800f469
 800f444:	0800f471 	.word	0x0800f471
 800f448:	0800f487 	.word	0x0800f487
 800f44c:	0800f477 	.word	0x0800f477
 800f450:	0800f487 	.word	0x0800f487
 800f454:	0800f487 	.word	0x0800f487
 800f458:	0800f487 	.word	0x0800f487
 800f45c:	0800f47f 	.word	0x0800f47f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f460:	f7fb fb98 	bl	800ab94 <HAL_RCC_GetPCLK1Freq>
 800f464:	61b8      	str	r0, [r7, #24]
        break;
 800f466:	e013      	b.n	800f490 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f468:	f7fb fba8 	bl	800abbc <HAL_RCC_GetPCLK2Freq>
 800f46c:	61b8      	str	r0, [r7, #24]
        break;
 800f46e:	e00f      	b.n	800f490 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f470:	4b1d      	ldr	r3, [pc, #116]	@ (800f4e8 <UART_SetConfig+0x4c4>)
 800f472:	61bb      	str	r3, [r7, #24]
        break;
 800f474:	e00c      	b.n	800f490 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f476:	f7fb fabb 	bl	800a9f0 <HAL_RCC_GetSysClockFreq>
 800f47a:	61b8      	str	r0, [r7, #24]
        break;
 800f47c:	e008      	b.n	800f490 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f47e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f482:	61bb      	str	r3, [r7, #24]
        break;
 800f484:	e004      	b.n	800f490 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800f486:	2300      	movs	r3, #0
 800f488:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f48a:	2301      	movs	r3, #1
 800f48c:	77bb      	strb	r3, [r7, #30]
        break;
 800f48e:	bf00      	nop
    }

    if (pclk != 0U)
 800f490:	69bb      	ldr	r3, [r7, #24]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d018      	beq.n	800f4c8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	685b      	ldr	r3, [r3, #4]
 800f49a:	085a      	lsrs	r2, r3, #1
 800f49c:	69bb      	ldr	r3, [r7, #24]
 800f49e:	441a      	add	r2, r3
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	685b      	ldr	r3, [r3, #4]
 800f4a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	2b0f      	cmp	r3, #15
 800f4ae:	d909      	bls.n	800f4c4 <UART_SetConfig+0x4a0>
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f4b6:	d205      	bcs.n	800f4c4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f4b8:	693b      	ldr	r3, [r7, #16]
 800f4ba:	b29a      	uxth	r2, r3
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	60da      	str	r2, [r3, #12]
 800f4c2:	e001      	b.n	800f4c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800f4d4:	7fbb      	ldrb	r3, [r7, #30]
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3720      	adds	r7, #32
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}
 800f4de:	bf00      	nop
 800f4e0:	40007c00 	.word	0x40007c00
 800f4e4:	40023800 	.word	0x40023800
 800f4e8:	00f42400 	.word	0x00f42400

0800f4ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b083      	sub	sp, #12
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4f8:	f003 0308 	and.w	r3, r3, #8
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d00a      	beq.n	800f516 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	685b      	ldr	r3, [r3, #4]
 800f506:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	430a      	orrs	r2, r1
 800f514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f51a:	f003 0301 	and.w	r3, r3, #1
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d00a      	beq.n	800f538 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	685b      	ldr	r3, [r3, #4]
 800f528:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	430a      	orrs	r2, r1
 800f536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f53c:	f003 0302 	and.w	r3, r3, #2
 800f540:	2b00      	cmp	r3, #0
 800f542:	d00a      	beq.n	800f55a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	430a      	orrs	r2, r1
 800f558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f55e:	f003 0304 	and.w	r3, r3, #4
 800f562:	2b00      	cmp	r3, #0
 800f564:	d00a      	beq.n	800f57c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	685b      	ldr	r3, [r3, #4]
 800f56c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	430a      	orrs	r2, r1
 800f57a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f580:	f003 0310 	and.w	r3, r3, #16
 800f584:	2b00      	cmp	r3, #0
 800f586:	d00a      	beq.n	800f59e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	689b      	ldr	r3, [r3, #8]
 800f58e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	430a      	orrs	r2, r1
 800f59c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5a2:	f003 0320 	and.w	r3, r3, #32
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d00a      	beq.n	800f5c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	689b      	ldr	r3, [r3, #8]
 800f5b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	430a      	orrs	r2, r1
 800f5be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d01a      	beq.n	800f602 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	685b      	ldr	r3, [r3, #4]
 800f5d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	430a      	orrs	r2, r1
 800f5e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f5ea:	d10a      	bne.n	800f602 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	685b      	ldr	r3, [r3, #4]
 800f5f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	430a      	orrs	r2, r1
 800f600:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d00a      	beq.n	800f624 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	685b      	ldr	r3, [r3, #4]
 800f614:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	430a      	orrs	r2, r1
 800f622:	605a      	str	r2, [r3, #4]
  }
}
 800f624:	bf00      	nop
 800f626:	370c      	adds	r7, #12
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr

0800f630 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b08c      	sub	sp, #48	@ 0x30
 800f634:	af02      	add	r7, sp, #8
 800f636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2200      	movs	r2, #0
 800f63c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f640:	f7f6 faae 	bl	8005ba0 <HAL_GetTick>
 800f644:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	f003 0308 	and.w	r3, r3, #8
 800f650:	2b08      	cmp	r3, #8
 800f652:	d12e      	bne.n	800f6b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f654:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f658:	9300      	str	r3, [sp, #0]
 800f65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f65c:	2200      	movs	r2, #0
 800f65e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f000 f83b 	bl	800f6de <UART_WaitOnFlagUntilTimeout>
 800f668:	4603      	mov	r3, r0
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d021      	beq.n	800f6b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	e853 3f00 	ldrex	r3, [r3]
 800f67a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f682:	623b      	str	r3, [r7, #32]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	461a      	mov	r2, r3
 800f68a:	6a3b      	ldr	r3, [r7, #32]
 800f68c:	61fb      	str	r3, [r7, #28]
 800f68e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f690:	69b9      	ldr	r1, [r7, #24]
 800f692:	69fa      	ldr	r2, [r7, #28]
 800f694:	e841 2300 	strex	r3, r2, [r1]
 800f698:	617b      	str	r3, [r7, #20]
   return(result);
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d1e6      	bne.n	800f66e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2220      	movs	r2, #32
 800f6a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f6ae:	2303      	movs	r3, #3
 800f6b0:	e011      	b.n	800f6d6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2220      	movs	r2, #32
 800f6b6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2220      	movs	r2, #32
 800f6bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800f6d4:	2300      	movs	r3, #0
}
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	3728      	adds	r7, #40	@ 0x28
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}

0800f6de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f6de:	b580      	push	{r7, lr}
 800f6e0:	b084      	sub	sp, #16
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	60f8      	str	r0, [r7, #12]
 800f6e6:	60b9      	str	r1, [r7, #8]
 800f6e8:	603b      	str	r3, [r7, #0]
 800f6ea:	4613      	mov	r3, r2
 800f6ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f6ee:	e04f      	b.n	800f790 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f6f0:	69bb      	ldr	r3, [r7, #24]
 800f6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6f6:	d04b      	beq.n	800f790 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f6f8:	f7f6 fa52 	bl	8005ba0 <HAL_GetTick>
 800f6fc:	4602      	mov	r2, r0
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	1ad3      	subs	r3, r2, r3
 800f702:	69ba      	ldr	r2, [r7, #24]
 800f704:	429a      	cmp	r2, r3
 800f706:	d302      	bcc.n	800f70e <UART_WaitOnFlagUntilTimeout+0x30>
 800f708:	69bb      	ldr	r3, [r7, #24]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d101      	bne.n	800f712 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f70e:	2303      	movs	r3, #3
 800f710:	e04e      	b.n	800f7b0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f003 0304 	and.w	r3, r3, #4
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d037      	beq.n	800f790 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	2b80      	cmp	r3, #128	@ 0x80
 800f724:	d034      	beq.n	800f790 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	2b40      	cmp	r3, #64	@ 0x40
 800f72a:	d031      	beq.n	800f790 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	69db      	ldr	r3, [r3, #28]
 800f732:	f003 0308 	and.w	r3, r3, #8
 800f736:	2b08      	cmp	r3, #8
 800f738:	d110      	bne.n	800f75c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	2208      	movs	r2, #8
 800f740:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f742:	68f8      	ldr	r0, [r7, #12]
 800f744:	f000 f8fe 	bl	800f944 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2208      	movs	r2, #8
 800f74c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2200      	movs	r2, #0
 800f754:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800f758:	2301      	movs	r3, #1
 800f75a:	e029      	b.n	800f7b0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	69db      	ldr	r3, [r3, #28]
 800f762:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f766:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f76a:	d111      	bne.n	800f790 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f774:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f776:	68f8      	ldr	r0, [r7, #12]
 800f778:	f000 f8e4 	bl	800f944 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	2220      	movs	r2, #32
 800f780:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	2200      	movs	r2, #0
 800f788:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800f78c:	2303      	movs	r3, #3
 800f78e:	e00f      	b.n	800f7b0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	69da      	ldr	r2, [r3, #28]
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	4013      	ands	r3, r2
 800f79a:	68ba      	ldr	r2, [r7, #8]
 800f79c:	429a      	cmp	r2, r3
 800f79e:	bf0c      	ite	eq
 800f7a0:	2301      	moveq	r3, #1
 800f7a2:	2300      	movne	r3, #0
 800f7a4:	b2db      	uxtb	r3, r3
 800f7a6:	461a      	mov	r2, r3
 800f7a8:	79fb      	ldrb	r3, [r7, #7]
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	d0a0      	beq.n	800f6f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f7ae:	2300      	movs	r3, #0
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3710      	adds	r7, #16
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}

0800f7b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b096      	sub	sp, #88	@ 0x58
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	60f8      	str	r0, [r7, #12]
 800f7c0:	60b9      	str	r1, [r7, #8]
 800f7c2:	4613      	mov	r3, r2
 800f7c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	68ba      	ldr	r2, [r7, #8]
 800f7ca:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	88fa      	ldrh	r2, [r7, #6]
 800f7d0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	2222      	movs	r2, #34	@ 0x22
 800f7e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d028      	beq.n	800f83e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7f0:	4a3e      	ldr	r2, [pc, #248]	@ (800f8ec <UART_Start_Receive_DMA+0x134>)
 800f7f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7f8:	4a3d      	ldr	r2, [pc, #244]	@ (800f8f0 <UART_Start_Receive_DMA+0x138>)
 800f7fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f800:	4a3c      	ldr	r2, [pc, #240]	@ (800f8f4 <UART_Start_Receive_DMA+0x13c>)
 800f802:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f808:	2200      	movs	r2, #0
 800f80a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	3324      	adds	r3, #36	@ 0x24
 800f816:	4619      	mov	r1, r3
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f81c:	461a      	mov	r2, r3
 800f81e:	88fb      	ldrh	r3, [r7, #6]
 800f820:	f7f6 ffe0 	bl	80067e4 <HAL_DMA_Start_IT>
 800f824:	4603      	mov	r3, r0
 800f826:	2b00      	cmp	r3, #0
 800f828:	d009      	beq.n	800f83e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	2210      	movs	r2, #16
 800f82e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	2220      	movs	r2, #32
 800f836:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800f83a:	2301      	movs	r3, #1
 800f83c:	e051      	b.n	800f8e2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	691b      	ldr	r3, [r3, #16]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d018      	beq.n	800f878 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f84c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f84e:	e853 3f00 	ldrex	r3, [r3]
 800f852:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f85a:	657b      	str	r3, [r7, #84]	@ 0x54
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	461a      	mov	r2, r3
 800f862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f864:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f866:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f868:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f86a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f86c:	e841 2300 	strex	r3, r2, [r1]
 800f870:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f874:	2b00      	cmp	r3, #0
 800f876:	d1e6      	bne.n	800f846 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	3308      	adds	r3, #8
 800f87e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f882:	e853 3f00 	ldrex	r3, [r3]
 800f886:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f88a:	f043 0301 	orr.w	r3, r3, #1
 800f88e:	653b      	str	r3, [r7, #80]	@ 0x50
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	3308      	adds	r3, #8
 800f896:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f898:	637a      	str	r2, [r7, #52]	@ 0x34
 800f89a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f89c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f89e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f8a0:	e841 2300 	strex	r3, r2, [r1]
 800f8a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d1e5      	bne.n	800f878 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	3308      	adds	r3, #8
 800f8b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	e853 3f00 	ldrex	r3, [r3]
 800f8ba:	613b      	str	r3, [r7, #16]
   return(result);
 800f8bc:	693b      	ldr	r3, [r7, #16]
 800f8be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	3308      	adds	r3, #8
 800f8ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f8cc:	623a      	str	r2, [r7, #32]
 800f8ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8d0:	69f9      	ldr	r1, [r7, #28]
 800f8d2:	6a3a      	ldr	r2, [r7, #32]
 800f8d4:	e841 2300 	strex	r3, r2, [r1]
 800f8d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800f8da:	69bb      	ldr	r3, [r7, #24]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d1e5      	bne.n	800f8ac <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800f8e0:	2300      	movs	r3, #0
}
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	3758      	adds	r7, #88	@ 0x58
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd80      	pop	{r7, pc}
 800f8ea:	bf00      	nop
 800f8ec:	0800fa0d 	.word	0x0800fa0d
 800f8f0:	0800fb6b 	.word	0x0800fb6b
 800f8f4:	0800fbdd 	.word	0x0800fbdd

0800f8f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b089      	sub	sp, #36	@ 0x24
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	e853 3f00 	ldrex	r3, [r3]
 800f90c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f90e:	68bb      	ldr	r3, [r7, #8]
 800f910:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f914:	61fb      	str	r3, [r7, #28]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	461a      	mov	r2, r3
 800f91c:	69fb      	ldr	r3, [r7, #28]
 800f91e:	61bb      	str	r3, [r7, #24]
 800f920:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f922:	6979      	ldr	r1, [r7, #20]
 800f924:	69ba      	ldr	r2, [r7, #24]
 800f926:	e841 2300 	strex	r3, r2, [r1]
 800f92a:	613b      	str	r3, [r7, #16]
   return(result);
 800f92c:	693b      	ldr	r3, [r7, #16]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d1e6      	bne.n	800f900 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2220      	movs	r2, #32
 800f936:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800f938:	bf00      	nop
 800f93a:	3724      	adds	r7, #36	@ 0x24
 800f93c:	46bd      	mov	sp, r7
 800f93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f942:	4770      	bx	lr

0800f944 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f944:	b480      	push	{r7}
 800f946:	b095      	sub	sp, #84	@ 0x54
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f954:	e853 3f00 	ldrex	r3, [r3]
 800f958:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f95a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f95c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f960:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	461a      	mov	r2, r3
 800f968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f96a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f96c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f96e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f970:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f972:	e841 2300 	strex	r3, r2, [r1]
 800f976:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d1e6      	bne.n	800f94c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	3308      	adds	r3, #8
 800f984:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f986:	6a3b      	ldr	r3, [r7, #32]
 800f988:	e853 3f00 	ldrex	r3, [r3]
 800f98c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f98e:	69fb      	ldr	r3, [r7, #28]
 800f990:	f023 0301 	bic.w	r3, r3, #1
 800f994:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	3308      	adds	r3, #8
 800f99c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f99e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f9a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f9a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f9a6:	e841 2300 	strex	r3, r2, [r1]
 800f9aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d1e5      	bne.n	800f97e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f9b6:	2b01      	cmp	r3, #1
 800f9b8:	d118      	bne.n	800f9ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	e853 3f00 	ldrex	r3, [r3]
 800f9c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	f023 0310 	bic.w	r3, r3, #16
 800f9ce:	647b      	str	r3, [r7, #68]	@ 0x44
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	461a      	mov	r2, r3
 800f9d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f9d8:	61bb      	str	r3, [r7, #24]
 800f9da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9dc:	6979      	ldr	r1, [r7, #20]
 800f9de:	69ba      	ldr	r2, [r7, #24]
 800f9e0:	e841 2300 	strex	r3, r2, [r1]
 800f9e4:	613b      	str	r3, [r7, #16]
   return(result);
 800f9e6:	693b      	ldr	r3, [r7, #16]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d1e6      	bne.n	800f9ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2220      	movs	r2, #32
 800f9f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800fa00:	bf00      	nop
 800fa02:	3754      	adds	r7, #84	@ 0x54
 800fa04:	46bd      	mov	sp, r7
 800fa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0a:	4770      	bx	lr

0800fa0c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b09c      	sub	sp, #112	@ 0x70
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa18:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	69db      	ldr	r3, [r3, #28]
 800fa1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fa22:	d071      	beq.n	800fb08 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800fa24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa26:	2200      	movs	r2, #0
 800fa28:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fa34:	e853 3f00 	ldrex	r3, [r3]
 800fa38:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800fa3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fa40:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fa42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	461a      	mov	r2, r3
 800fa48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fa4a:	657b      	str	r3, [r7, #84]	@ 0x54
 800fa4c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fa50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fa52:	e841 2300 	strex	r3, r2, [r1]
 800fa56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800fa58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d1e6      	bne.n	800fa2c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	3308      	adds	r3, #8
 800fa64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa68:	e853 3f00 	ldrex	r3, [r3]
 800fa6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fa6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa70:	f023 0301 	bic.w	r3, r3, #1
 800fa74:	667b      	str	r3, [r7, #100]	@ 0x64
 800fa76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	3308      	adds	r3, #8
 800fa7c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800fa7e:	643a      	str	r2, [r7, #64]	@ 0x40
 800fa80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fa84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fa86:	e841 2300 	strex	r3, r2, [r1]
 800fa8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fa8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d1e5      	bne.n	800fa5e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fa92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	3308      	adds	r3, #8
 800fa98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa9a:	6a3b      	ldr	r3, [r7, #32]
 800fa9c:	e853 3f00 	ldrex	r3, [r3]
 800faa0:	61fb      	str	r3, [r7, #28]
   return(result);
 800faa2:	69fb      	ldr	r3, [r7, #28]
 800faa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800faa8:	663b      	str	r3, [r7, #96]	@ 0x60
 800faaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	3308      	adds	r3, #8
 800fab0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800fab2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fab4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fab6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fab8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800faba:	e841 2300 	strex	r3, r2, [r1]
 800fabe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d1e5      	bne.n	800fa92 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fac6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fac8:	2220      	movs	r2, #32
 800faca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800face:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fad2:	2b01      	cmp	r3, #1
 800fad4:	d118      	bne.n	800fb08 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fad6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	e853 3f00 	ldrex	r3, [r3]
 800fae2:	60bb      	str	r3, [r7, #8]
   return(result);
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	f023 0310 	bic.w	r3, r3, #16
 800faea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800faec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	461a      	mov	r2, r3
 800faf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800faf4:	61bb      	str	r3, [r7, #24]
 800faf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faf8:	6979      	ldr	r1, [r7, #20]
 800fafa:	69ba      	ldr	r2, [r7, #24]
 800fafc:	e841 2300 	strex	r3, r2, [r1]
 800fb00:	613b      	str	r3, [r7, #16]
   return(result);
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d1e6      	bne.n	800fad6 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fb08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fb12:	2b01      	cmp	r3, #1
 800fb14:	d122      	bne.n	800fb5c <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800fb16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb18:	2200      	movs	r2, #0
 800fb1a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	685b      	ldr	r3, [r3, #4]
 800fb24:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800fb28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fb2e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800fb32:	429a      	cmp	r2, r3
 800fb34:	d204      	bcs.n	800fb40 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800fb36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb38:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800fb3c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fb40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb42:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800fb46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fb4c:	b29b      	uxth	r3, r3
 800fb4e:	1ad3      	subs	r3, r2, r3
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	4619      	mov	r1, r3
 800fb54:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fb56:	f7ff fa59 	bl	800f00c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fb5a:	e002      	b.n	800fb62 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800fb5c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fb5e:	f7f5 fe73 	bl	8005848 <HAL_UART_RxCpltCallback>
}
 800fb62:	bf00      	nop
 800fb64:	3770      	adds	r7, #112	@ 0x70
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}

0800fb6a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fb6a:	b580      	push	{r7, lr}
 800fb6c:	b084      	sub	sp, #16
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb76:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fb82:	2b01      	cmp	r3, #1
 800fb84:	d123      	bne.n	800fbce <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fb8c:	085b      	lsrs	r3, r3, #1
 800fb8e:	b29a      	uxth	r2, r3
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fba4:	897a      	ldrh	r2, [r7, #10]
 800fba6:	429a      	cmp	r2, r3
 800fba8:	d803      	bhi.n	800fbb2 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	897a      	ldrh	r2, [r7, #10]
 800fbae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fbbe:	b29b      	uxth	r3, r3
 800fbc0:	1ad3      	subs	r3, r2, r3
 800fbc2:	b29b      	uxth	r3, r3
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	68f8      	ldr	r0, [r7, #12]
 800fbc8:	f7ff fa20 	bl	800f00c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fbcc:	e002      	b.n	800fbd4 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800fbce:	68f8      	ldr	r0, [r7, #12]
 800fbd0:	f7f5 fe5e 	bl	8005890 <HAL_UART_RxHalfCpltCallback>
}
 800fbd4:	bf00      	nop
 800fbd6:	3710      	adds	r7, #16
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b086      	sub	sp, #24
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbe8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fbee:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbf6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	689b      	ldr	r3, [r3, #8]
 800fbfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc02:	2b80      	cmp	r3, #128	@ 0x80
 800fc04:	d109      	bne.n	800fc1a <UART_DMAError+0x3e>
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	2b21      	cmp	r3, #33	@ 0x21
 800fc0a:	d106      	bne.n	800fc1a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	2200      	movs	r2, #0
 800fc10:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800fc14:	6978      	ldr	r0, [r7, #20]
 800fc16:	f7ff fe6f 	bl	800f8f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	689b      	ldr	r3, [r3, #8]
 800fc20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc24:	2b40      	cmp	r3, #64	@ 0x40
 800fc26:	d109      	bne.n	800fc3c <UART_DMAError+0x60>
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	2b22      	cmp	r3, #34	@ 0x22
 800fc2c:	d106      	bne.n	800fc3c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	2200      	movs	r2, #0
 800fc32:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800fc36:	6978      	ldr	r0, [r7, #20]
 800fc38:	f7ff fe84 	bl	800f944 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fc42:	f043 0210 	orr.w	r2, r3, #16
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fc4c:	6978      	ldr	r0, [r7, #20]
 800fc4e:	f7f5 fe35 	bl	80058bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fc52:	bf00      	nop
 800fc54:	3718      	adds	r7, #24
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}

0800fc5a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fc5a:	b580      	push	{r7, lr}
 800fc5c:	b084      	sub	sp, #16
 800fc5e:	af00      	add	r7, sp, #0
 800fc60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fc70:	68f8      	ldr	r0, [r7, #12]
 800fc72:	f7f5 fe23 	bl	80058bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fc76:	bf00      	nop
 800fc78:	3710      	adds	r7, #16
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}

0800fc7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fc7e:	b580      	push	{r7, lr}
 800fc80:	b088      	sub	sp, #32
 800fc82:	af00      	add	r7, sp, #0
 800fc84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	e853 3f00 	ldrex	r3, [r3]
 800fc92:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fc9a:	61fb      	str	r3, [r7, #28]
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	461a      	mov	r2, r3
 800fca2:	69fb      	ldr	r3, [r7, #28]
 800fca4:	61bb      	str	r3, [r7, #24]
 800fca6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fca8:	6979      	ldr	r1, [r7, #20]
 800fcaa:	69ba      	ldr	r2, [r7, #24]
 800fcac:	e841 2300 	strex	r3, r2, [r1]
 800fcb0:	613b      	str	r3, [r7, #16]
   return(result);
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d1e6      	bne.n	800fc86 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2220      	movs	r2, #32
 800fcbc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f7ff f997 	bl	800eff8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fcca:	bf00      	nop
 800fccc:	3720      	adds	r7, #32
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}
	...

0800fcd4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b083      	sub	sp, #12
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d121      	bne.n	800fd2a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681a      	ldr	r2, [r3, #0]
 800fcea:	4b27      	ldr	r3, [pc, #156]	@ (800fd88 <FMC_SDRAM_Init+0xb4>)
 800fcec:	4013      	ands	r3, r2
 800fcee:	683a      	ldr	r2, [r7, #0]
 800fcf0:	6851      	ldr	r1, [r2, #4]
 800fcf2:	683a      	ldr	r2, [r7, #0]
 800fcf4:	6892      	ldr	r2, [r2, #8]
 800fcf6:	4311      	orrs	r1, r2
 800fcf8:	683a      	ldr	r2, [r7, #0]
 800fcfa:	68d2      	ldr	r2, [r2, #12]
 800fcfc:	4311      	orrs	r1, r2
 800fcfe:	683a      	ldr	r2, [r7, #0]
 800fd00:	6912      	ldr	r2, [r2, #16]
 800fd02:	4311      	orrs	r1, r2
 800fd04:	683a      	ldr	r2, [r7, #0]
 800fd06:	6952      	ldr	r2, [r2, #20]
 800fd08:	4311      	orrs	r1, r2
 800fd0a:	683a      	ldr	r2, [r7, #0]
 800fd0c:	6992      	ldr	r2, [r2, #24]
 800fd0e:	4311      	orrs	r1, r2
 800fd10:	683a      	ldr	r2, [r7, #0]
 800fd12:	69d2      	ldr	r2, [r2, #28]
 800fd14:	4311      	orrs	r1, r2
 800fd16:	683a      	ldr	r2, [r7, #0]
 800fd18:	6a12      	ldr	r2, [r2, #32]
 800fd1a:	4311      	orrs	r1, r2
 800fd1c:	683a      	ldr	r2, [r7, #0]
 800fd1e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800fd20:	430a      	orrs	r2, r1
 800fd22:	431a      	orrs	r2, r3
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	601a      	str	r2, [r3, #0]
 800fd28:	e026      	b.n	800fd78 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800fd32:	683b      	ldr	r3, [r7, #0]
 800fd34:	69d9      	ldr	r1, [r3, #28]
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	6a1b      	ldr	r3, [r3, #32]
 800fd3a:	4319      	orrs	r1, r3
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd40:	430b      	orrs	r3, r1
 800fd42:	431a      	orrs	r2, r3
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	685a      	ldr	r2, [r3, #4]
 800fd4c:	4b0e      	ldr	r3, [pc, #56]	@ (800fd88 <FMC_SDRAM_Init+0xb4>)
 800fd4e:	4013      	ands	r3, r2
 800fd50:	683a      	ldr	r2, [r7, #0]
 800fd52:	6851      	ldr	r1, [r2, #4]
 800fd54:	683a      	ldr	r2, [r7, #0]
 800fd56:	6892      	ldr	r2, [r2, #8]
 800fd58:	4311      	orrs	r1, r2
 800fd5a:	683a      	ldr	r2, [r7, #0]
 800fd5c:	68d2      	ldr	r2, [r2, #12]
 800fd5e:	4311      	orrs	r1, r2
 800fd60:	683a      	ldr	r2, [r7, #0]
 800fd62:	6912      	ldr	r2, [r2, #16]
 800fd64:	4311      	orrs	r1, r2
 800fd66:	683a      	ldr	r2, [r7, #0]
 800fd68:	6952      	ldr	r2, [r2, #20]
 800fd6a:	4311      	orrs	r1, r2
 800fd6c:	683a      	ldr	r2, [r7, #0]
 800fd6e:	6992      	ldr	r2, [r2, #24]
 800fd70:	430a      	orrs	r2, r1
 800fd72:	431a      	orrs	r2, r3
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800fd78:	2300      	movs	r3, #0
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	370c      	adds	r7, #12
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd84:	4770      	bx	lr
 800fd86:	bf00      	nop
 800fd88:	ffff8000 	.word	0xffff8000

0800fd8c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800fd8c:	b480      	push	{r7}
 800fd8e:	b085      	sub	sp, #20
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	60f8      	str	r0, [r7, #12]
 800fd94:	60b9      	str	r1, [r7, #8]
 800fd96:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d128      	bne.n	800fdf0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	689b      	ldr	r3, [r3, #8]
 800fda2:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	1e59      	subs	r1, r3, #1
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	685b      	ldr	r3, [r3, #4]
 800fdb0:	3b01      	subs	r3, #1
 800fdb2:	011b      	lsls	r3, r3, #4
 800fdb4:	4319      	orrs	r1, r3
 800fdb6:	68bb      	ldr	r3, [r7, #8]
 800fdb8:	689b      	ldr	r3, [r3, #8]
 800fdba:	3b01      	subs	r3, #1
 800fdbc:	021b      	lsls	r3, r3, #8
 800fdbe:	4319      	orrs	r1, r3
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	68db      	ldr	r3, [r3, #12]
 800fdc4:	3b01      	subs	r3, #1
 800fdc6:	031b      	lsls	r3, r3, #12
 800fdc8:	4319      	orrs	r1, r3
 800fdca:	68bb      	ldr	r3, [r7, #8]
 800fdcc:	691b      	ldr	r3, [r3, #16]
 800fdce:	3b01      	subs	r3, #1
 800fdd0:	041b      	lsls	r3, r3, #16
 800fdd2:	4319      	orrs	r1, r3
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	695b      	ldr	r3, [r3, #20]
 800fdd8:	3b01      	subs	r3, #1
 800fdda:	051b      	lsls	r3, r3, #20
 800fddc:	4319      	orrs	r1, r3
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	699b      	ldr	r3, [r3, #24]
 800fde2:	3b01      	subs	r3, #1
 800fde4:	061b      	lsls	r3, r3, #24
 800fde6:	430b      	orrs	r3, r1
 800fde8:	431a      	orrs	r2, r3
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	609a      	str	r2, [r3, #8]
 800fdee:	e02d      	b.n	800fe4c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	689a      	ldr	r2, [r3, #8]
 800fdf4:	4b19      	ldr	r3, [pc, #100]	@ (800fe5c <FMC_SDRAM_Timing_Init+0xd0>)
 800fdf6:	4013      	ands	r3, r2
 800fdf8:	68ba      	ldr	r2, [r7, #8]
 800fdfa:	68d2      	ldr	r2, [r2, #12]
 800fdfc:	3a01      	subs	r2, #1
 800fdfe:	0311      	lsls	r1, r2, #12
 800fe00:	68ba      	ldr	r2, [r7, #8]
 800fe02:	6952      	ldr	r2, [r2, #20]
 800fe04:	3a01      	subs	r2, #1
 800fe06:	0512      	lsls	r2, r2, #20
 800fe08:	430a      	orrs	r2, r1
 800fe0a:	431a      	orrs	r2, r3
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	68db      	ldr	r3, [r3, #12]
 800fe14:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	1e59      	subs	r1, r3, #1
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	685b      	ldr	r3, [r3, #4]
 800fe22:	3b01      	subs	r3, #1
 800fe24:	011b      	lsls	r3, r3, #4
 800fe26:	4319      	orrs	r1, r3
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	689b      	ldr	r3, [r3, #8]
 800fe2c:	3b01      	subs	r3, #1
 800fe2e:	021b      	lsls	r3, r3, #8
 800fe30:	4319      	orrs	r1, r3
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	691b      	ldr	r3, [r3, #16]
 800fe36:	3b01      	subs	r3, #1
 800fe38:	041b      	lsls	r3, r3, #16
 800fe3a:	4319      	orrs	r1, r3
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	699b      	ldr	r3, [r3, #24]
 800fe40:	3b01      	subs	r3, #1
 800fe42:	061b      	lsls	r3, r3, #24
 800fe44:	430b      	orrs	r3, r1
 800fe46:	431a      	orrs	r2, r3
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800fe4c:	2300      	movs	r3, #0
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	3714      	adds	r7, #20
 800fe52:	46bd      	mov	sp, r7
 800fe54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe58:	4770      	bx	lr
 800fe5a:	bf00      	nop
 800fe5c:	ff0f0fff 	.word	0xff0f0fff

0800fe60 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800fe60:	b084      	sub	sp, #16
 800fe62:	b480      	push	{r7}
 800fe64:	b085      	sub	sp, #20
 800fe66:	af00      	add	r7, sp, #0
 800fe68:	6078      	str	r0, [r7, #4]
 800fe6a:	f107 001c 	add.w	r0, r7, #28
 800fe6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fe72:	2300      	movs	r3, #0
 800fe74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800fe76:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800fe78:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800fe7a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800fe7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800fe7e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800fe80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800fe82:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800fe84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800fe86:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fe88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800fe8a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800fe8c:	68fa      	ldr	r2, [r7, #12]
 800fe8e:	4313      	orrs	r3, r2
 800fe90:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	685a      	ldr	r2, [r3, #4]
 800fe96:	4b07      	ldr	r3, [pc, #28]	@ (800feb4 <SDMMC_Init+0x54>)
 800fe98:	4013      	ands	r3, r2
 800fe9a:	68fa      	ldr	r2, [r7, #12]
 800fe9c:	431a      	orrs	r2, r3
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fea2:	2300      	movs	r3, #0
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3714      	adds	r7, #20
 800fea8:	46bd      	mov	sp, r7
 800feaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feae:	b004      	add	sp, #16
 800feb0:	4770      	bx	lr
 800feb2:	bf00      	nop
 800feb4:	ffff8100 	.word	0xffff8100

0800feb8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800feb8:	b480      	push	{r7}
 800feba:	b083      	sub	sp, #12
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800fec6:	4618      	mov	r0, r3
 800fec8:	370c      	adds	r7, #12
 800feca:	46bd      	mov	sp, r7
 800fecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed0:	4770      	bx	lr

0800fed2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800fed2:	b480      	push	{r7}
 800fed4:	b083      	sub	sp, #12
 800fed6:	af00      	add	r7, sp, #0
 800fed8:	6078      	str	r0, [r7, #4]
 800feda:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	681a      	ldr	r2, [r3, #0]
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800fee6:	2300      	movs	r3, #0
}
 800fee8:	4618      	mov	r0, r3
 800feea:	370c      	adds	r7, #12
 800feec:	46bd      	mov	sp, r7
 800feee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef2:	4770      	bx	lr

0800fef4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800fef4:	b480      	push	{r7}
 800fef6:	b083      	sub	sp, #12
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2203      	movs	r2, #3
 800ff00:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ff02:	2300      	movs	r3, #0
}
 800ff04:	4618      	mov	r0, r3
 800ff06:	370c      	adds	r7, #12
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0e:	4770      	bx	lr

0800ff10 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800ff10:	b480      	push	{r7}
 800ff12:	b083      	sub	sp, #12
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	f003 0303 	and.w	r3, r3, #3
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	370c      	adds	r7, #12
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr

0800ff2c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b085      	sub	sp, #20
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ff36:	2300      	movs	r3, #0
 800ff38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	681a      	ldr	r2, [r3, #0]
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ff4a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ff50:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ff56:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ff58:	68fa      	ldr	r2, [r7, #12]
 800ff5a:	4313      	orrs	r3, r2
 800ff5c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	68da      	ldr	r2, [r3, #12]
 800ff62:	4b06      	ldr	r3, [pc, #24]	@ (800ff7c <SDMMC_SendCommand+0x50>)
 800ff64:	4013      	ands	r3, r2
 800ff66:	68fa      	ldr	r2, [r7, #12]
 800ff68:	431a      	orrs	r2, r3
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ff6e:	2300      	movs	r3, #0
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3714      	adds	r7, #20
 800ff74:	46bd      	mov	sp, r7
 800ff76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7a:	4770      	bx	lr
 800ff7c:	fffff000 	.word	0xfffff000

0800ff80 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ff80:	b480      	push	{r7}
 800ff82:	b083      	sub	sp, #12
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	691b      	ldr	r3, [r3, #16]
 800ff8c:	b2db      	uxtb	r3, r3
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	370c      	adds	r7, #12
 800ff92:	46bd      	mov	sp, r7
 800ff94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff98:	4770      	bx	lr

0800ff9a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ff9a:	b480      	push	{r7}
 800ff9c:	b085      	sub	sp, #20
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	6078      	str	r0, [r7, #4]
 800ffa2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	3314      	adds	r3, #20
 800ffa8:	461a      	mov	r2, r3
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	4413      	add	r3, r2
 800ffae:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
}  
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3714      	adds	r7, #20
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbe:	4770      	bx	lr

0800ffc0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b085      	sub	sp, #20
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	681a      	ldr	r2, [r3, #0]
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	685a      	ldr	r2, [r3, #4]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ffe6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ffec:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800fff2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fff4:	68fa      	ldr	r2, [r7, #12]
 800fff6:	4313      	orrs	r3, r2
 800fff8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fffe:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	431a      	orrs	r2, r3
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 801000a:	2300      	movs	r3, #0

}
 801000c:	4618      	mov	r0, r3
 801000e:	3714      	adds	r7, #20
 8010010:	46bd      	mov	sp, r7
 8010012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010016:	4770      	bx	lr

08010018 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b088      	sub	sp, #32
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010026:	2310      	movs	r3, #16
 8010028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801002a:	2340      	movs	r3, #64	@ 0x40
 801002c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801002e:	2300      	movs	r3, #0
 8010030:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010032:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010036:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010038:	f107 0308 	add.w	r3, r7, #8
 801003c:	4619      	mov	r1, r3
 801003e:	6878      	ldr	r0, [r7, #4]
 8010040:	f7ff ff74 	bl	800ff2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010048:	2110      	movs	r1, #16
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f000 f9d6 	bl	80103fc <SDMMC_GetCmdResp1>
 8010050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010052:	69fb      	ldr	r3, [r7, #28]
}
 8010054:	4618      	mov	r0, r3
 8010056:	3720      	adds	r7, #32
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}

0801005c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801005c:	b580      	push	{r7, lr}
 801005e:	b088      	sub	sp, #32
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
 8010064:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801006a:	2311      	movs	r3, #17
 801006c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801006e:	2340      	movs	r3, #64	@ 0x40
 8010070:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010072:	2300      	movs	r3, #0
 8010074:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010076:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801007a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801007c:	f107 0308 	add.w	r3, r7, #8
 8010080:	4619      	mov	r1, r3
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f7ff ff52 	bl	800ff2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010088:	f241 3288 	movw	r2, #5000	@ 0x1388
 801008c:	2111      	movs	r1, #17
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f000 f9b4 	bl	80103fc <SDMMC_GetCmdResp1>
 8010094:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010096:	69fb      	ldr	r3, [r7, #28]
}
 8010098:	4618      	mov	r0, r3
 801009a:	3720      	adds	r7, #32
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}

080100a0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b088      	sub	sp, #32
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80100ae:	2312      	movs	r3, #18
 80100b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80100b2:	2340      	movs	r3, #64	@ 0x40
 80100b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100b6:	2300      	movs	r3, #0
 80100b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80100ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80100be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80100c0:	f107 0308 	add.w	r3, r7, #8
 80100c4:	4619      	mov	r1, r3
 80100c6:	6878      	ldr	r0, [r7, #4]
 80100c8:	f7ff ff30 	bl	800ff2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80100cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80100d0:	2112      	movs	r1, #18
 80100d2:	6878      	ldr	r0, [r7, #4]
 80100d4:	f000 f992 	bl	80103fc <SDMMC_GetCmdResp1>
 80100d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100da:	69fb      	ldr	r3, [r7, #28]
}
 80100dc:	4618      	mov	r0, r3
 80100de:	3720      	adds	r7, #32
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}

080100e4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b088      	sub	sp, #32
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
 80100ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80100f2:	2318      	movs	r3, #24
 80100f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80100f6:	2340      	movs	r3, #64	@ 0x40
 80100f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100fa:	2300      	movs	r3, #0
 80100fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80100fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010102:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010104:	f107 0308 	add.w	r3, r7, #8
 8010108:	4619      	mov	r1, r3
 801010a:	6878      	ldr	r0, [r7, #4]
 801010c:	f7ff ff0e 	bl	800ff2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010114:	2118      	movs	r1, #24
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	f000 f970 	bl	80103fc <SDMMC_GetCmdResp1>
 801011c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801011e:	69fb      	ldr	r3, [r7, #28]
}
 8010120:	4618      	mov	r0, r3
 8010122:	3720      	adds	r7, #32
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}

08010128 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b088      	sub	sp, #32
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
 8010130:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010136:	2319      	movs	r3, #25
 8010138:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801013a:	2340      	movs	r3, #64	@ 0x40
 801013c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801013e:	2300      	movs	r3, #0
 8010140:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010142:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010146:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010148:	f107 0308 	add.w	r3, r7, #8
 801014c:	4619      	mov	r1, r3
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f7ff feec 	bl	800ff2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010158:	2119      	movs	r1, #25
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f000 f94e 	bl	80103fc <SDMMC_GetCmdResp1>
 8010160:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010162:	69fb      	ldr	r3, [r7, #28]
}
 8010164:	4618      	mov	r0, r3
 8010166:	3720      	adds	r7, #32
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}

0801016c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b088      	sub	sp, #32
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010174:	2300      	movs	r3, #0
 8010176:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010178:	230c      	movs	r3, #12
 801017a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801017c:	2340      	movs	r3, #64	@ 0x40
 801017e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010180:	2300      	movs	r3, #0
 8010182:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010184:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010188:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801018a:	f107 0308 	add.w	r3, r7, #8
 801018e:	4619      	mov	r1, r3
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f7ff fecb 	bl	800ff2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010196:	4a05      	ldr	r2, [pc, #20]	@ (80101ac <SDMMC_CmdStopTransfer+0x40>)
 8010198:	210c      	movs	r1, #12
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f000 f92e 	bl	80103fc <SDMMC_GetCmdResp1>
 80101a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101a2:	69fb      	ldr	r3, [r7, #28]
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	3720      	adds	r7, #32
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}
 80101ac:	05f5e100 	.word	0x05f5e100

080101b0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b08a      	sub	sp, #40	@ 0x28
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	60f8      	str	r0, [r7, #12]
 80101b8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80101c0:	2307      	movs	r3, #7
 80101c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80101c4:	2340      	movs	r3, #64	@ 0x40
 80101c6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101c8:	2300      	movs	r3, #0
 80101ca:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80101d0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101d2:	f107 0310 	add.w	r3, r7, #16
 80101d6:	4619      	mov	r1, r3
 80101d8:	68f8      	ldr	r0, [r7, #12]
 80101da:	f7ff fea7 	bl	800ff2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80101de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101e2:	2107      	movs	r1, #7
 80101e4:	68f8      	ldr	r0, [r7, #12]
 80101e6:	f000 f909 	bl	80103fc <SDMMC_GetCmdResp1>
 80101ea:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80101ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3728      	adds	r7, #40	@ 0x28
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}

080101f6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80101f6:	b580      	push	{r7, lr}
 80101f8:	b088      	sub	sp, #32
 80101fa:	af00      	add	r7, sp, #0
 80101fc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80101fe:	2300      	movs	r3, #0
 8010200:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010202:	2300      	movs	r3, #0
 8010204:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010206:	2300      	movs	r3, #0
 8010208:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801020a:	2300      	movs	r3, #0
 801020c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801020e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010212:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010214:	f107 0308 	add.w	r3, r7, #8
 8010218:	4619      	mov	r1, r3
 801021a:	6878      	ldr	r0, [r7, #4]
 801021c:	f7ff fe86 	bl	800ff2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f000 fb23 	bl	801086c <SDMMC_GetCmdError>
 8010226:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010228:	69fb      	ldr	r3, [r7, #28]
}
 801022a:	4618      	mov	r0, r3
 801022c:	3720      	adds	r7, #32
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}

08010232 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010232:	b580      	push	{r7, lr}
 8010234:	b088      	sub	sp, #32
 8010236:	af00      	add	r7, sp, #0
 8010238:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801023a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 801023e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010240:	2308      	movs	r3, #8
 8010242:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010244:	2340      	movs	r3, #64	@ 0x40
 8010246:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010248:	2300      	movs	r3, #0
 801024a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801024c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010250:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010252:	f107 0308 	add.w	r3, r7, #8
 8010256:	4619      	mov	r1, r3
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f7ff fe67 	bl	800ff2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f000 fab6 	bl	80107d0 <SDMMC_GetCmdResp7>
 8010264:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010266:	69fb      	ldr	r3, [r7, #28]
}
 8010268:	4618      	mov	r0, r3
 801026a:	3720      	adds	r7, #32
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}

08010270 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b088      	sub	sp, #32
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
 8010278:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801027e:	2337      	movs	r3, #55	@ 0x37
 8010280:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010282:	2340      	movs	r3, #64	@ 0x40
 8010284:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010286:	2300      	movs	r3, #0
 8010288:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801028a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801028e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010290:	f107 0308 	add.w	r3, r7, #8
 8010294:	4619      	mov	r1, r3
 8010296:	6878      	ldr	r0, [r7, #4]
 8010298:	f7ff fe48 	bl	800ff2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801029c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80102a0:	2137      	movs	r1, #55	@ 0x37
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f000 f8aa 	bl	80103fc <SDMMC_GetCmdResp1>
 80102a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102aa:	69fb      	ldr	r3, [r7, #28]
}
 80102ac:	4618      	mov	r0, r3
 80102ae:	3720      	adds	r7, #32
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}

080102b4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b088      	sub	sp, #32
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
 80102bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80102be:	683a      	ldr	r2, [r7, #0]
 80102c0:	4b0d      	ldr	r3, [pc, #52]	@ (80102f8 <SDMMC_CmdAppOperCommand+0x44>)
 80102c2:	4313      	orrs	r3, r2
 80102c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80102c6:	2329      	movs	r3, #41	@ 0x29
 80102c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102ca:	2340      	movs	r3, #64	@ 0x40
 80102cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102ce:	2300      	movs	r3, #0
 80102d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80102d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102d8:	f107 0308 	add.w	r3, r7, #8
 80102dc:	4619      	mov	r1, r3
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f7ff fe24 	bl	800ff2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f000 f9bf 	bl	8010668 <SDMMC_GetCmdResp3>
 80102ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102ec:	69fb      	ldr	r3, [r7, #28]
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	3720      	adds	r7, #32
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}
 80102f6:	bf00      	nop
 80102f8:	80100000 	.word	0x80100000

080102fc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b088      	sub	sp, #32
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010304:	2300      	movs	r3, #0
 8010306:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010308:	2302      	movs	r3, #2
 801030a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801030c:	23c0      	movs	r3, #192	@ 0xc0
 801030e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010310:	2300      	movs	r3, #0
 8010312:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010314:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010318:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801031a:	f107 0308 	add.w	r3, r7, #8
 801031e:	4619      	mov	r1, r3
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f7ff fe03 	bl	800ff2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	f000 f956 	bl	80105d8 <SDMMC_GetCmdResp2>
 801032c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801032e:	69fb      	ldr	r3, [r7, #28]
}
 8010330:	4618      	mov	r0, r3
 8010332:	3720      	adds	r7, #32
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}

08010338 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b088      	sub	sp, #32
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010346:	2309      	movs	r3, #9
 8010348:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801034a:	23c0      	movs	r3, #192	@ 0xc0
 801034c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801034e:	2300      	movs	r3, #0
 8010350:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010352:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010356:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010358:	f107 0308 	add.w	r3, r7, #8
 801035c:	4619      	mov	r1, r3
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f7ff fde4 	bl	800ff2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f000 f937 	bl	80105d8 <SDMMC_GetCmdResp2>
 801036a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801036c:	69fb      	ldr	r3, [r7, #28]
}
 801036e:	4618      	mov	r0, r3
 8010370:	3720      	adds	r7, #32
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}

08010376 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010376:	b580      	push	{r7, lr}
 8010378:	b088      	sub	sp, #32
 801037a:	af00      	add	r7, sp, #0
 801037c:	6078      	str	r0, [r7, #4]
 801037e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010380:	2300      	movs	r3, #0
 8010382:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010384:	2303      	movs	r3, #3
 8010386:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010388:	2340      	movs	r3, #64	@ 0x40
 801038a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801038c:	2300      	movs	r3, #0
 801038e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010390:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010394:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010396:	f107 0308 	add.w	r3, r7, #8
 801039a:	4619      	mov	r1, r3
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f7ff fdc5 	bl	800ff2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80103a2:	683a      	ldr	r2, [r7, #0]
 80103a4:	2103      	movs	r1, #3
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f000 f99c 	bl	80106e4 <SDMMC_GetCmdResp6>
 80103ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103ae:	69fb      	ldr	r3, [r7, #28]
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3720      	adds	r7, #32
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}

080103b8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b088      	sub	sp, #32
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80103c6:	230d      	movs	r3, #13
 80103c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103ca:	2340      	movs	r3, #64	@ 0x40
 80103cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103ce:	2300      	movs	r3, #0
 80103d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80103d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103d8:	f107 0308 	add.w	r3, r7, #8
 80103dc:	4619      	mov	r1, r3
 80103de:	6878      	ldr	r0, [r7, #4]
 80103e0:	f7ff fda4 	bl	800ff2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80103e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80103e8:	210d      	movs	r1, #13
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f000 f806 	bl	80103fc <SDMMC_GetCmdResp1>
 80103f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103f2:	69fb      	ldr	r3, [r7, #28]
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3720      	adds	r7, #32
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}

080103fc <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b088      	sub	sp, #32
 8010400:	af00      	add	r7, sp, #0
 8010402:	60f8      	str	r0, [r7, #12]
 8010404:	460b      	mov	r3, r1
 8010406:	607a      	str	r2, [r7, #4]
 8010408:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801040a:	4b70      	ldr	r3, [pc, #448]	@ (80105cc <SDMMC_GetCmdResp1+0x1d0>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	4a70      	ldr	r2, [pc, #448]	@ (80105d0 <SDMMC_GetCmdResp1+0x1d4>)
 8010410:	fba2 2303 	umull	r2, r3, r2, r3
 8010414:	0a5a      	lsrs	r2, r3, #9
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	fb02 f303 	mul.w	r3, r2, r3
 801041c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 801041e:	69fb      	ldr	r3, [r7, #28]
 8010420:	1e5a      	subs	r2, r3, #1
 8010422:	61fa      	str	r2, [r7, #28]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d102      	bne.n	801042e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010428:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801042c:	e0c9      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010432:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010434:	69bb      	ldr	r3, [r7, #24]
 8010436:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801043a:	2b00      	cmp	r3, #0
 801043c:	d0ef      	beq.n	801041e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801043e:	69bb      	ldr	r3, [r7, #24]
 8010440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010444:	2b00      	cmp	r3, #0
 8010446:	d1ea      	bne.n	801041e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801044c:	f003 0304 	and.w	r3, r3, #4
 8010450:	2b00      	cmp	r3, #0
 8010452:	d004      	beq.n	801045e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	2204      	movs	r2, #4
 8010458:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801045a:	2304      	movs	r3, #4
 801045c:	e0b1      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010462:	f003 0301 	and.w	r3, r3, #1
 8010466:	2b00      	cmp	r3, #0
 8010468:	d004      	beq.n	8010474 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	2201      	movs	r2, #1
 801046e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010470:	2301      	movs	r3, #1
 8010472:	e0a6      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	22c5      	movs	r2, #197	@ 0xc5
 8010478:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801047a:	68f8      	ldr	r0, [r7, #12]
 801047c:	f7ff fd80 	bl	800ff80 <SDMMC_GetCommandResponse>
 8010480:	4603      	mov	r3, r0
 8010482:	461a      	mov	r2, r3
 8010484:	7afb      	ldrb	r3, [r7, #11]
 8010486:	4293      	cmp	r3, r2
 8010488:	d001      	beq.n	801048e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801048a:	2301      	movs	r3, #1
 801048c:	e099      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801048e:	2100      	movs	r1, #0
 8010490:	68f8      	ldr	r0, [r7, #12]
 8010492:	f7ff fd82 	bl	800ff9a <SDMMC_GetResponse>
 8010496:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010498:	697a      	ldr	r2, [r7, #20]
 801049a:	4b4e      	ldr	r3, [pc, #312]	@ (80105d4 <SDMMC_GetCmdResp1+0x1d8>)
 801049c:	4013      	ands	r3, r2
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d101      	bne.n	80104a6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80104a2:	2300      	movs	r3, #0
 80104a4:	e08d      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	da02      	bge.n	80104b2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80104ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80104b0:	e087      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80104b2:	697b      	ldr	r3, [r7, #20]
 80104b4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d001      	beq.n	80104c0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80104bc:	2340      	movs	r3, #64	@ 0x40
 80104be:	e080      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80104c0:	697b      	ldr	r3, [r7, #20]
 80104c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d001      	beq.n	80104ce <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80104ca:	2380      	movs	r3, #128	@ 0x80
 80104cc:	e079      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80104ce:	697b      	ldr	r3, [r7, #20]
 80104d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d002      	beq.n	80104de <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80104d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80104dc:	e071      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d002      	beq.n	80104ee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80104e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80104ec:	e069      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d002      	beq.n	80104fe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80104f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80104fc:	e061      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010504:	2b00      	cmp	r3, #0
 8010506:	d002      	beq.n	801050e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010508:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801050c:	e059      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801050e:	697b      	ldr	r3, [r7, #20]
 8010510:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010514:	2b00      	cmp	r3, #0
 8010516:	d002      	beq.n	801051e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010518:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801051c:	e051      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801051e:	697b      	ldr	r3, [r7, #20]
 8010520:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010524:	2b00      	cmp	r3, #0
 8010526:	d002      	beq.n	801052e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010528:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801052c:	e049      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801052e:	697b      	ldr	r3, [r7, #20]
 8010530:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010534:	2b00      	cmp	r3, #0
 8010536:	d002      	beq.n	801053e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010538:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801053c:	e041      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010544:	2b00      	cmp	r3, #0
 8010546:	d002      	beq.n	801054e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010548:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801054c:	e039      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801054e:	697b      	ldr	r3, [r7, #20]
 8010550:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010554:	2b00      	cmp	r3, #0
 8010556:	d002      	beq.n	801055e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010558:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 801055c:	e031      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010564:	2b00      	cmp	r3, #0
 8010566:	d002      	beq.n	801056e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010568:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 801056c:	e029      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010574:	2b00      	cmp	r3, #0
 8010576:	d002      	beq.n	801057e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010578:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801057c:	e021      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010584:	2b00      	cmp	r3, #0
 8010586:	d002      	beq.n	801058e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010588:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801058c:	e019      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010594:	2b00      	cmp	r3, #0
 8010596:	d002      	beq.n	801059e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010598:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801059c:	e011      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d002      	beq.n	80105ae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80105a8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80105ac:	e009      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80105ae:	697b      	ldr	r3, [r7, #20]
 80105b0:	f003 0308 	and.w	r3, r3, #8
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d002      	beq.n	80105be <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80105b8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80105bc:	e001      	b.n	80105c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80105be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	3720      	adds	r7, #32
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}
 80105ca:	bf00      	nop
 80105cc:	2000001c 	.word	0x2000001c
 80105d0:	10624dd3 	.word	0x10624dd3
 80105d4:	fdffe008 	.word	0xfdffe008

080105d8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80105d8:	b480      	push	{r7}
 80105da:	b085      	sub	sp, #20
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80105e0:	4b1f      	ldr	r3, [pc, #124]	@ (8010660 <SDMMC_GetCmdResp2+0x88>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	4a1f      	ldr	r2, [pc, #124]	@ (8010664 <SDMMC_GetCmdResp2+0x8c>)
 80105e6:	fba2 2303 	umull	r2, r3, r2, r3
 80105ea:	0a5b      	lsrs	r3, r3, #9
 80105ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80105f0:	fb02 f303 	mul.w	r3, r2, r3
 80105f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	1e5a      	subs	r2, r3, #1
 80105fa:	60fa      	str	r2, [r7, #12]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d102      	bne.n	8010606 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010600:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010604:	e026      	b.n	8010654 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801060a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010612:	2b00      	cmp	r3, #0
 8010614:	d0ef      	beq.n	80105f6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801061c:	2b00      	cmp	r3, #0
 801061e:	d1ea      	bne.n	80105f6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010624:	f003 0304 	and.w	r3, r3, #4
 8010628:	2b00      	cmp	r3, #0
 801062a:	d004      	beq.n	8010636 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2204      	movs	r2, #4
 8010630:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010632:	2304      	movs	r3, #4
 8010634:	e00e      	b.n	8010654 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801063a:	f003 0301 	and.w	r3, r3, #1
 801063e:	2b00      	cmp	r3, #0
 8010640:	d004      	beq.n	801064c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2201      	movs	r2, #1
 8010646:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010648:	2301      	movs	r3, #1
 801064a:	e003      	b.n	8010654 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	22c5      	movs	r2, #197	@ 0xc5
 8010650:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010652:	2300      	movs	r3, #0
}
 8010654:	4618      	mov	r0, r3
 8010656:	3714      	adds	r7, #20
 8010658:	46bd      	mov	sp, r7
 801065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065e:	4770      	bx	lr
 8010660:	2000001c 	.word	0x2000001c
 8010664:	10624dd3 	.word	0x10624dd3

08010668 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010668:	b480      	push	{r7}
 801066a:	b085      	sub	sp, #20
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010670:	4b1a      	ldr	r3, [pc, #104]	@ (80106dc <SDMMC_GetCmdResp3+0x74>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	4a1a      	ldr	r2, [pc, #104]	@ (80106e0 <SDMMC_GetCmdResp3+0x78>)
 8010676:	fba2 2303 	umull	r2, r3, r2, r3
 801067a:	0a5b      	lsrs	r3, r3, #9
 801067c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010680:	fb02 f303 	mul.w	r3, r2, r3
 8010684:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	1e5a      	subs	r2, r3, #1
 801068a:	60fa      	str	r2, [r7, #12]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d102      	bne.n	8010696 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010690:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010694:	e01b      	b.n	80106ce <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801069a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d0ef      	beq.n	8010686 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d1ea      	bne.n	8010686 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80106b4:	f003 0304 	and.w	r3, r3, #4
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d004      	beq.n	80106c6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2204      	movs	r2, #4
 80106c0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80106c2:	2304      	movs	r3, #4
 80106c4:	e003      	b.n	80106ce <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	22c5      	movs	r2, #197	@ 0xc5
 80106ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80106cc:	2300      	movs	r3, #0
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3714      	adds	r7, #20
 80106d2:	46bd      	mov	sp, r7
 80106d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d8:	4770      	bx	lr
 80106da:	bf00      	nop
 80106dc:	2000001c 	.word	0x2000001c
 80106e0:	10624dd3 	.word	0x10624dd3

080106e4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b088      	sub	sp, #32
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	60f8      	str	r0, [r7, #12]
 80106ec:	460b      	mov	r3, r1
 80106ee:	607a      	str	r2, [r7, #4]
 80106f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80106f2:	4b35      	ldr	r3, [pc, #212]	@ (80107c8 <SDMMC_GetCmdResp6+0xe4>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	4a35      	ldr	r2, [pc, #212]	@ (80107cc <SDMMC_GetCmdResp6+0xe8>)
 80106f8:	fba2 2303 	umull	r2, r3, r2, r3
 80106fc:	0a5b      	lsrs	r3, r3, #9
 80106fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010702:	fb02 f303 	mul.w	r3, r2, r3
 8010706:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010708:	69fb      	ldr	r3, [r7, #28]
 801070a:	1e5a      	subs	r2, r3, #1
 801070c:	61fa      	str	r2, [r7, #28]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d102      	bne.n	8010718 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010712:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010716:	e052      	b.n	80107be <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801071c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801071e:	69bb      	ldr	r3, [r7, #24]
 8010720:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010724:	2b00      	cmp	r3, #0
 8010726:	d0ef      	beq.n	8010708 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010728:	69bb      	ldr	r3, [r7, #24]
 801072a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801072e:	2b00      	cmp	r3, #0
 8010730:	d1ea      	bne.n	8010708 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010736:	f003 0304 	and.w	r3, r3, #4
 801073a:	2b00      	cmp	r3, #0
 801073c:	d004      	beq.n	8010748 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	2204      	movs	r2, #4
 8010742:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010744:	2304      	movs	r3, #4
 8010746:	e03a      	b.n	80107be <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801074c:	f003 0301 	and.w	r3, r3, #1
 8010750:	2b00      	cmp	r3, #0
 8010752:	d004      	beq.n	801075e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	2201      	movs	r2, #1
 8010758:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801075a:	2301      	movs	r3, #1
 801075c:	e02f      	b.n	80107be <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801075e:	68f8      	ldr	r0, [r7, #12]
 8010760:	f7ff fc0e 	bl	800ff80 <SDMMC_GetCommandResponse>
 8010764:	4603      	mov	r3, r0
 8010766:	461a      	mov	r2, r3
 8010768:	7afb      	ldrb	r3, [r7, #11]
 801076a:	4293      	cmp	r3, r2
 801076c:	d001      	beq.n	8010772 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801076e:	2301      	movs	r3, #1
 8010770:	e025      	b.n	80107be <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	22c5      	movs	r2, #197	@ 0xc5
 8010776:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010778:	2100      	movs	r1, #0
 801077a:	68f8      	ldr	r0, [r7, #12]
 801077c:	f7ff fc0d 	bl	800ff9a <SDMMC_GetResponse>
 8010780:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8010788:	2b00      	cmp	r3, #0
 801078a:	d106      	bne.n	801079a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 801078c:	697b      	ldr	r3, [r7, #20]
 801078e:	0c1b      	lsrs	r3, r3, #16
 8010790:	b29a      	uxth	r2, r3
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010796:	2300      	movs	r3, #0
 8010798:	e011      	b.n	80107be <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801079a:	697b      	ldr	r3, [r7, #20]
 801079c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d002      	beq.n	80107aa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80107a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80107a8:	e009      	b.n	80107be <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d002      	beq.n	80107ba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80107b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80107b8:	e001      	b.n	80107be <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80107ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80107be:	4618      	mov	r0, r3
 80107c0:	3720      	adds	r7, #32
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd80      	pop	{r7, pc}
 80107c6:	bf00      	nop
 80107c8:	2000001c 	.word	0x2000001c
 80107cc:	10624dd3 	.word	0x10624dd3

080107d0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80107d0:	b480      	push	{r7}
 80107d2:	b085      	sub	sp, #20
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80107d8:	4b22      	ldr	r3, [pc, #136]	@ (8010864 <SDMMC_GetCmdResp7+0x94>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	4a22      	ldr	r2, [pc, #136]	@ (8010868 <SDMMC_GetCmdResp7+0x98>)
 80107de:	fba2 2303 	umull	r2, r3, r2, r3
 80107e2:	0a5b      	lsrs	r3, r3, #9
 80107e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80107e8:	fb02 f303 	mul.w	r3, r2, r3
 80107ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	1e5a      	subs	r2, r3, #1
 80107f2:	60fa      	str	r2, [r7, #12]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d102      	bne.n	80107fe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80107f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80107fc:	e02c      	b.n	8010858 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010802:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801080a:	2b00      	cmp	r3, #0
 801080c:	d0ef      	beq.n	80107ee <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010814:	2b00      	cmp	r3, #0
 8010816:	d1ea      	bne.n	80107ee <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801081c:	f003 0304 	and.w	r3, r3, #4
 8010820:	2b00      	cmp	r3, #0
 8010822:	d004      	beq.n	801082e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2204      	movs	r2, #4
 8010828:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801082a:	2304      	movs	r3, #4
 801082c:	e014      	b.n	8010858 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010832:	f003 0301 	and.w	r3, r3, #1
 8010836:	2b00      	cmp	r3, #0
 8010838:	d004      	beq.n	8010844 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2201      	movs	r2, #1
 801083e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010840:	2301      	movs	r3, #1
 8010842:	e009      	b.n	8010858 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801084c:	2b00      	cmp	r3, #0
 801084e:	d002      	beq.n	8010856 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2240      	movs	r2, #64	@ 0x40
 8010854:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010856:	2300      	movs	r3, #0
  
}
 8010858:	4618      	mov	r0, r3
 801085a:	3714      	adds	r7, #20
 801085c:	46bd      	mov	sp, r7
 801085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010862:	4770      	bx	lr
 8010864:	2000001c 	.word	0x2000001c
 8010868:	10624dd3 	.word	0x10624dd3

0801086c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801086c:	b480      	push	{r7}
 801086e:	b085      	sub	sp, #20
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010874:	4b11      	ldr	r3, [pc, #68]	@ (80108bc <SDMMC_GetCmdError+0x50>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	4a11      	ldr	r2, [pc, #68]	@ (80108c0 <SDMMC_GetCmdError+0x54>)
 801087a:	fba2 2303 	umull	r2, r3, r2, r3
 801087e:	0a5b      	lsrs	r3, r3, #9
 8010880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010884:	fb02 f303 	mul.w	r3, r2, r3
 8010888:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	1e5a      	subs	r2, r3, #1
 801088e:	60fa      	str	r2, [r7, #12]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d102      	bne.n	801089a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010894:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010898:	e009      	b.n	80108ae <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801089e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d0f1      	beq.n	801088a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	22c5      	movs	r2, #197	@ 0xc5
 80108aa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80108ac:	2300      	movs	r3, #0
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3714      	adds	r7, #20
 80108b2:	46bd      	mov	sp, r7
 80108b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b8:	4770      	bx	lr
 80108ba:	bf00      	nop
 80108bc:	2000001c 	.word	0x2000001c
 80108c0:	10624dd3 	.word	0x10624dd3

080108c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80108c4:	b480      	push	{r7}
 80108c6:	b083      	sub	sp, #12
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	689b      	ldr	r3, [r3, #8]
 80108d0:	f043 0201 	orr.w	r2, r3, #1
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80108d8:	2300      	movs	r3, #0
}
 80108da:	4618      	mov	r0, r3
 80108dc:	370c      	adds	r7, #12
 80108de:	46bd      	mov	sp, r7
 80108e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e4:	4770      	bx	lr

080108e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80108e6:	b480      	push	{r7}
 80108e8:	b083      	sub	sp, #12
 80108ea:	af00      	add	r7, sp, #0
 80108ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	689b      	ldr	r3, [r3, #8]
 80108f2:	f023 0201 	bic.w	r2, r3, #1
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80108fa:	2300      	movs	r3, #0
}
 80108fc:	4618      	mov	r0, r3
 80108fe:	370c      	adds	r7, #12
 8010900:	46bd      	mov	sp, r7
 8010902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010906:	4770      	bx	lr

08010908 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010908:	b480      	push	{r7}
 801090a:	b085      	sub	sp, #20
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
 8010910:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010912:	2300      	movs	r3, #0
 8010914:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	3301      	adds	r3, #1
 801091a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010922:	d901      	bls.n	8010928 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010924:	2303      	movs	r3, #3
 8010926:	e01b      	b.n	8010960 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	691b      	ldr	r3, [r3, #16]
 801092c:	2b00      	cmp	r3, #0
 801092e:	daf2      	bge.n	8010916 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010930:	2300      	movs	r3, #0
 8010932:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	019b      	lsls	r3, r3, #6
 8010938:	f043 0220 	orr.w	r2, r3, #32
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	3301      	adds	r3, #1
 8010944:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801094c:	d901      	bls.n	8010952 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801094e:	2303      	movs	r3, #3
 8010950:	e006      	b.n	8010960 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	691b      	ldr	r3, [r3, #16]
 8010956:	f003 0320 	and.w	r3, r3, #32
 801095a:	2b20      	cmp	r3, #32
 801095c:	d0f0      	beq.n	8010940 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801095e:	2300      	movs	r3, #0
}
 8010960:	4618      	mov	r0, r3
 8010962:	3714      	adds	r7, #20
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr

0801096c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801096c:	b480      	push	{r7}
 801096e:	b085      	sub	sp, #20
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010974:	2300      	movs	r3, #0
 8010976:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	3301      	adds	r3, #1
 801097c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010984:	d901      	bls.n	801098a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010986:	2303      	movs	r3, #3
 8010988:	e018      	b.n	80109bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	691b      	ldr	r3, [r3, #16]
 801098e:	2b00      	cmp	r3, #0
 8010990:	daf2      	bge.n	8010978 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010992:	2300      	movs	r3, #0
 8010994:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	2210      	movs	r2, #16
 801099a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	3301      	adds	r3, #1
 80109a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80109a8:	d901      	bls.n	80109ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80109aa:	2303      	movs	r3, #3
 80109ac:	e006      	b.n	80109bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	691b      	ldr	r3, [r3, #16]
 80109b2:	f003 0310 	and.w	r3, r3, #16
 80109b6:	2b10      	cmp	r3, #16
 80109b8:	d0f0      	beq.n	801099c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80109ba:	2300      	movs	r3, #0
}
 80109bc:	4618      	mov	r0, r3
 80109be:	3714      	adds	r7, #20
 80109c0:	46bd      	mov	sp, r7
 80109c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c6:	4770      	bx	lr

080109c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80109c8:	b480      	push	{r7}
 80109ca:	b08b      	sub	sp, #44	@ 0x2c
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	60f8      	str	r0, [r7, #12]
 80109d0:	60b9      	str	r1, [r7, #8]
 80109d2:	4613      	mov	r3, r2
 80109d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80109da:	68bb      	ldr	r3, [r7, #8]
 80109dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80109de:	88fb      	ldrh	r3, [r7, #6]
 80109e0:	089b      	lsrs	r3, r3, #2
 80109e2:	b29b      	uxth	r3, r3
 80109e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80109e6:	88fb      	ldrh	r3, [r7, #6]
 80109e8:	f003 0303 	and.w	r3, r3, #3
 80109ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80109ee:	2300      	movs	r3, #0
 80109f0:	623b      	str	r3, [r7, #32]
 80109f2:	e014      	b.n	8010a1e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80109f4:	69bb      	ldr	r3, [r7, #24]
 80109f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80109fa:	681a      	ldr	r2, [r3, #0]
 80109fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8010a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a02:	3301      	adds	r3, #1
 8010a04:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a08:	3301      	adds	r3, #1
 8010a0a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a0e:	3301      	adds	r3, #1
 8010a10:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a14:	3301      	adds	r3, #1
 8010a16:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8010a18:	6a3b      	ldr	r3, [r7, #32]
 8010a1a:	3301      	adds	r3, #1
 8010a1c:	623b      	str	r3, [r7, #32]
 8010a1e:	6a3a      	ldr	r2, [r7, #32]
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	429a      	cmp	r2, r3
 8010a24:	d3e6      	bcc.n	80109f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010a26:	8bfb      	ldrh	r3, [r7, #30]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d01e      	beq.n	8010a6a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010a30:	69bb      	ldr	r3, [r7, #24]
 8010a32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010a36:	461a      	mov	r2, r3
 8010a38:	f107 0310 	add.w	r3, r7, #16
 8010a3c:	6812      	ldr	r2, [r2, #0]
 8010a3e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010a40:	693a      	ldr	r2, [r7, #16]
 8010a42:	6a3b      	ldr	r3, [r7, #32]
 8010a44:	b2db      	uxtb	r3, r3
 8010a46:	00db      	lsls	r3, r3, #3
 8010a48:	fa22 f303 	lsr.w	r3, r2, r3
 8010a4c:	b2da      	uxtb	r2, r3
 8010a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a50:	701a      	strb	r2, [r3, #0]
      i++;
 8010a52:	6a3b      	ldr	r3, [r7, #32]
 8010a54:	3301      	adds	r3, #1
 8010a56:	623b      	str	r3, [r7, #32]
      pDest++;
 8010a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a5a:	3301      	adds	r3, #1
 8010a5c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8010a5e:	8bfb      	ldrh	r3, [r7, #30]
 8010a60:	3b01      	subs	r3, #1
 8010a62:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010a64:	8bfb      	ldrh	r3, [r7, #30]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d1ea      	bne.n	8010a40 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	372c      	adds	r7, #44	@ 0x2c
 8010a70:	46bd      	mov	sp, r7
 8010a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a76:	4770      	bx	lr

08010a78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8010a78:	b480      	push	{r7}
 8010a7a:	b085      	sub	sp, #20
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	695b      	ldr	r3, [r3, #20]
 8010a84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	699b      	ldr	r3, [r3, #24]
 8010a8a:	68fa      	ldr	r2, [r7, #12]
 8010a8c:	4013      	ands	r3, r2
 8010a8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010a90:	68fb      	ldr	r3, [r7, #12]
}
 8010a92:	4618      	mov	r0, r3
 8010a94:	3714      	adds	r7, #20
 8010a96:	46bd      	mov	sp, r7
 8010a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9c:	4770      	bx	lr

08010a9e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8010a9e:	b480      	push	{r7}
 8010aa0:	b085      	sub	sp, #20
 8010aa2:	af00      	add	r7, sp, #0
 8010aa4:	6078      	str	r0, [r7, #4]
 8010aa6:	460b      	mov	r3, r1
 8010aa8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8010aae:	78fb      	ldrb	r3, [r7, #3]
 8010ab0:	015a      	lsls	r2, r3, #5
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	4413      	add	r3, r2
 8010ab6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010aba:	689b      	ldr	r3, [r3, #8]
 8010abc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8010abe:	78fb      	ldrb	r3, [r7, #3]
 8010ac0:	015a      	lsls	r2, r3, #5
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	4413      	add	r3, r2
 8010ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010aca:	68db      	ldr	r3, [r3, #12]
 8010acc:	68ba      	ldr	r2, [r7, #8]
 8010ace:	4013      	ands	r3, r2
 8010ad0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010ad2:	68bb      	ldr	r3, [r7, #8]
}
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	3714      	adds	r7, #20
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ade:	4770      	bx	lr

08010ae0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010ae0:	b480      	push	{r7}
 8010ae2:	b083      	sub	sp, #12
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	695b      	ldr	r3, [r3, #20]
 8010aec:	f003 0301 	and.w	r3, r3, #1
}
 8010af0:	4618      	mov	r0, r3
 8010af2:	370c      	adds	r7, #12
 8010af4:	46bd      	mov	sp, r7
 8010af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afa:	4770      	bx	lr

08010afc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8010afc:	b480      	push	{r7}
 8010afe:	b085      	sub	sp, #20
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
 8010b04:	460b      	mov	r3, r1
 8010b06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	68fa      	ldr	r2, [r7, #12]
 8010b16:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8010b1a:	f023 0303 	bic.w	r3, r3, #3
 8010b1e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010b26:	681a      	ldr	r2, [r3, #0]
 8010b28:	78fb      	ldrb	r3, [r7, #3]
 8010b2a:	f003 0303 	and.w	r3, r3, #3
 8010b2e:	68f9      	ldr	r1, [r7, #12]
 8010b30:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8010b34:	4313      	orrs	r3, r2
 8010b36:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8010b38:	78fb      	ldrb	r3, [r7, #3]
 8010b3a:	2b01      	cmp	r3, #1
 8010b3c:	d107      	bne.n	8010b4e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010b44:	461a      	mov	r2, r3
 8010b46:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8010b4a:	6053      	str	r3, [r2, #4]
 8010b4c:	e00c      	b.n	8010b68 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8010b4e:	78fb      	ldrb	r3, [r7, #3]
 8010b50:	2b02      	cmp	r3, #2
 8010b52:	d107      	bne.n	8010b64 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8010b60:	6053      	str	r3, [r2, #4]
 8010b62:	e001      	b.n	8010b68 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8010b64:	2301      	movs	r3, #1
 8010b66:	e000      	b.n	8010b6a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8010b68:	2300      	movs	r3, #0
}
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	3714      	adds	r7, #20
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b74:	4770      	bx	lr

08010b76 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8010b76:	b480      	push	{r7}
 8010b78:	b085      	sub	sp, #20
 8010b7a:	af00      	add	r7, sp, #0
 8010b7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010b88:	695b      	ldr	r3, [r3, #20]
 8010b8a:	b29b      	uxth	r3, r3
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	3714      	adds	r7, #20
 8010b90:	46bd      	mov	sp, r7
 8010b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b96:	4770      	bx	lr

08010b98 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8010b98:	b480      	push	{r7}
 8010b9a:	b089      	sub	sp, #36	@ 0x24
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	460b      	mov	r3, r1
 8010ba2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8010ba8:	78fb      	ldrb	r3, [r7, #3]
 8010baa:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8010bac:	2300      	movs	r3, #0
 8010bae:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8010bb0:	69bb      	ldr	r3, [r7, #24]
 8010bb2:	015a      	lsls	r2, r3, #5
 8010bb4:	69fb      	ldr	r3, [r7, #28]
 8010bb6:	4413      	add	r3, r2
 8010bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	0c9b      	lsrs	r3, r3, #18
 8010bc0:	f003 0303 	and.w	r3, r3, #3
 8010bc4:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8010bc6:	69bb      	ldr	r3, [r7, #24]
 8010bc8:	015a      	lsls	r2, r3, #5
 8010bca:	69fb      	ldr	r3, [r7, #28]
 8010bcc:	4413      	add	r3, r2
 8010bce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	0fdb      	lsrs	r3, r3, #31
 8010bd6:	f003 0301 	and.w	r3, r3, #1
 8010bda:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8010bdc:	69bb      	ldr	r3, [r7, #24]
 8010bde:	015a      	lsls	r2, r3, #5
 8010be0:	69fb      	ldr	r3, [r7, #28]
 8010be2:	4413      	add	r3, r2
 8010be4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010be8:	685b      	ldr	r3, [r3, #4]
 8010bea:	0fdb      	lsrs	r3, r3, #31
 8010bec:	f003 0301 	and.w	r3, r3, #1
 8010bf0:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	689b      	ldr	r3, [r3, #8]
 8010bf6:	f003 0320 	and.w	r3, r3, #32
 8010bfa:	2b20      	cmp	r3, #32
 8010bfc:	d10d      	bne.n	8010c1a <USB_HC_Halt+0x82>
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d10a      	bne.n	8010c1a <USB_HC_Halt+0x82>
 8010c04:	693b      	ldr	r3, [r7, #16]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d005      	beq.n	8010c16 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8010c0a:	697b      	ldr	r3, [r7, #20]
 8010c0c:	2b01      	cmp	r3, #1
 8010c0e:	d002      	beq.n	8010c16 <USB_HC_Halt+0x7e>
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	2b03      	cmp	r3, #3
 8010c14:	d101      	bne.n	8010c1a <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8010c16:	2300      	movs	r3, #0
 8010c18:	e0d8      	b.n	8010dcc <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d002      	beq.n	8010c26 <USB_HC_Halt+0x8e>
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	2b02      	cmp	r3, #2
 8010c24:	d173      	bne.n	8010d0e <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8010c26:	69bb      	ldr	r3, [r7, #24]
 8010c28:	015a      	lsls	r2, r3, #5
 8010c2a:	69fb      	ldr	r3, [r7, #28]
 8010c2c:	4413      	add	r3, r2
 8010c2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	69ba      	ldr	r2, [r7, #24]
 8010c36:	0151      	lsls	r1, r2, #5
 8010c38:	69fa      	ldr	r2, [r7, #28]
 8010c3a:	440a      	add	r2, r1
 8010c3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010c40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010c44:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	689b      	ldr	r3, [r3, #8]
 8010c4a:	f003 0320 	and.w	r3, r3, #32
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d14a      	bne.n	8010ce8 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c56:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d133      	bne.n	8010cc6 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8010c5e:	69bb      	ldr	r3, [r7, #24]
 8010c60:	015a      	lsls	r2, r3, #5
 8010c62:	69fb      	ldr	r3, [r7, #28]
 8010c64:	4413      	add	r3, r2
 8010c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	69ba      	ldr	r2, [r7, #24]
 8010c6e:	0151      	lsls	r1, r2, #5
 8010c70:	69fa      	ldr	r2, [r7, #28]
 8010c72:	440a      	add	r2, r1
 8010c74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010c78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010c7c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010c7e:	69bb      	ldr	r3, [r7, #24]
 8010c80:	015a      	lsls	r2, r3, #5
 8010c82:	69fb      	ldr	r3, [r7, #28]
 8010c84:	4413      	add	r3, r2
 8010c86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	69ba      	ldr	r2, [r7, #24]
 8010c8e:	0151      	lsls	r1, r2, #5
 8010c90:	69fa      	ldr	r2, [r7, #28]
 8010c92:	440a      	add	r2, r1
 8010c94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010c98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010c9c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	3301      	adds	r3, #1
 8010ca2:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010caa:	d82e      	bhi.n	8010d0a <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010cac:	69bb      	ldr	r3, [r7, #24]
 8010cae:	015a      	lsls	r2, r3, #5
 8010cb0:	69fb      	ldr	r3, [r7, #28]
 8010cb2:	4413      	add	r3, r2
 8010cb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010cc2:	d0ec      	beq.n	8010c9e <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8010cc4:	e081      	b.n	8010dca <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010cc6:	69bb      	ldr	r3, [r7, #24]
 8010cc8:	015a      	lsls	r2, r3, #5
 8010cca:	69fb      	ldr	r3, [r7, #28]
 8010ccc:	4413      	add	r3, r2
 8010cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	69ba      	ldr	r2, [r7, #24]
 8010cd6:	0151      	lsls	r1, r2, #5
 8010cd8:	69fa      	ldr	r2, [r7, #28]
 8010cda:	440a      	add	r2, r1
 8010cdc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010ce0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010ce4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8010ce6:	e070      	b.n	8010dca <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010ce8:	69bb      	ldr	r3, [r7, #24]
 8010cea:	015a      	lsls	r2, r3, #5
 8010cec:	69fb      	ldr	r3, [r7, #28]
 8010cee:	4413      	add	r3, r2
 8010cf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	69ba      	ldr	r2, [r7, #24]
 8010cf8:	0151      	lsls	r1, r2, #5
 8010cfa:	69fa      	ldr	r2, [r7, #28]
 8010cfc:	440a      	add	r2, r1
 8010cfe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010d02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010d06:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8010d08:	e05f      	b.n	8010dca <USB_HC_Halt+0x232>
            break;
 8010d0a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8010d0c:	e05d      	b.n	8010dca <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8010d0e:	69bb      	ldr	r3, [r7, #24]
 8010d10:	015a      	lsls	r2, r3, #5
 8010d12:	69fb      	ldr	r3, [r7, #28]
 8010d14:	4413      	add	r3, r2
 8010d16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	69ba      	ldr	r2, [r7, #24]
 8010d1e:	0151      	lsls	r1, r2, #5
 8010d20:	69fa      	ldr	r2, [r7, #28]
 8010d22:	440a      	add	r2, r1
 8010d24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010d28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010d2c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8010d2e:	69fb      	ldr	r3, [r7, #28]
 8010d30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010d34:	691b      	ldr	r3, [r3, #16]
 8010d36:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d133      	bne.n	8010da6 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8010d3e:	69bb      	ldr	r3, [r7, #24]
 8010d40:	015a      	lsls	r2, r3, #5
 8010d42:	69fb      	ldr	r3, [r7, #28]
 8010d44:	4413      	add	r3, r2
 8010d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	69ba      	ldr	r2, [r7, #24]
 8010d4e:	0151      	lsls	r1, r2, #5
 8010d50:	69fa      	ldr	r2, [r7, #28]
 8010d52:	440a      	add	r2, r1
 8010d54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010d58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010d5c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010d5e:	69bb      	ldr	r3, [r7, #24]
 8010d60:	015a      	lsls	r2, r3, #5
 8010d62:	69fb      	ldr	r3, [r7, #28]
 8010d64:	4413      	add	r3, r2
 8010d66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	69ba      	ldr	r2, [r7, #24]
 8010d6e:	0151      	lsls	r1, r2, #5
 8010d70:	69fa      	ldr	r2, [r7, #28]
 8010d72:	440a      	add	r2, r1
 8010d74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010d78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010d7c:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8010d7e:	68bb      	ldr	r3, [r7, #8]
 8010d80:	3301      	adds	r3, #1
 8010d82:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010d8a:	d81d      	bhi.n	8010dc8 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010d8c:	69bb      	ldr	r3, [r7, #24]
 8010d8e:	015a      	lsls	r2, r3, #5
 8010d90:	69fb      	ldr	r3, [r7, #28]
 8010d92:	4413      	add	r3, r2
 8010d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010da2:	d0ec      	beq.n	8010d7e <USB_HC_Halt+0x1e6>
 8010da4:	e011      	b.n	8010dca <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010da6:	69bb      	ldr	r3, [r7, #24]
 8010da8:	015a      	lsls	r2, r3, #5
 8010daa:	69fb      	ldr	r3, [r7, #28]
 8010dac:	4413      	add	r3, r2
 8010dae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	69ba      	ldr	r2, [r7, #24]
 8010db6:	0151      	lsls	r1, r2, #5
 8010db8:	69fa      	ldr	r2, [r7, #28]
 8010dba:	440a      	add	r2, r1
 8010dbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010dc0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010dc4:	6013      	str	r3, [r2, #0]
 8010dc6:	e000      	b.n	8010dca <USB_HC_Halt+0x232>
          break;
 8010dc8:	bf00      	nop
    }
  }

  return HAL_OK;
 8010dca:	2300      	movs	r3, #0
}
 8010dcc:	4618      	mov	r0, r3
 8010dce:	3724      	adds	r7, #36	@ 0x24
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd6:	4770      	bx	lr

08010dd8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b088      	sub	sp, #32
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8010de0:	2300      	movs	r3, #0
 8010de2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8010de8:	2300      	movs	r3, #0
 8010dea:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8010dec:	6878      	ldr	r0, [r7, #4]
 8010dee:	f7ff fd7a 	bl	80108e6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010df2:	2110      	movs	r1, #16
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	f7ff fd87 	bl	8010908 <USB_FlushTxFifo>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d001      	beq.n	8010e04 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8010e00:	2301      	movs	r3, #1
 8010e02:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f7ff fdb1 	bl	801096c <USB_FlushRxFifo>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d001      	beq.n	8010e14 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8010e10:	2301      	movs	r3, #1
 8010e12:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8010e14:	2300      	movs	r3, #0
 8010e16:	61bb      	str	r3, [r7, #24]
 8010e18:	e01f      	b.n	8010e5a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8010e1a:	69bb      	ldr	r3, [r7, #24]
 8010e1c:	015a      	lsls	r2, r3, #5
 8010e1e:	697b      	ldr	r3, [r7, #20]
 8010e20:	4413      	add	r3, r2
 8010e22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8010e2a:	693b      	ldr	r3, [r7, #16]
 8010e2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010e30:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8010e32:	693b      	ldr	r3, [r7, #16]
 8010e34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010e38:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8010e3a:	693b      	ldr	r3, [r7, #16]
 8010e3c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8010e40:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8010e42:	69bb      	ldr	r3, [r7, #24]
 8010e44:	015a      	lsls	r2, r3, #5
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	4413      	add	r3, r2
 8010e4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010e4e:	461a      	mov	r2, r3
 8010e50:	693b      	ldr	r3, [r7, #16]
 8010e52:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8010e54:	69bb      	ldr	r3, [r7, #24]
 8010e56:	3301      	adds	r3, #1
 8010e58:	61bb      	str	r3, [r7, #24]
 8010e5a:	69bb      	ldr	r3, [r7, #24]
 8010e5c:	2b0f      	cmp	r3, #15
 8010e5e:	d9dc      	bls.n	8010e1a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8010e60:	2300      	movs	r3, #0
 8010e62:	61bb      	str	r3, [r7, #24]
 8010e64:	e034      	b.n	8010ed0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8010e66:	69bb      	ldr	r3, [r7, #24]
 8010e68:	015a      	lsls	r2, r3, #5
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	4413      	add	r3, r2
 8010e6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8010e76:	693b      	ldr	r3, [r7, #16]
 8010e78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010e7c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8010e7e:	693b      	ldr	r3, [r7, #16]
 8010e80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010e84:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8010e86:	693b      	ldr	r3, [r7, #16]
 8010e88:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8010e8c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8010e8e:	69bb      	ldr	r3, [r7, #24]
 8010e90:	015a      	lsls	r2, r3, #5
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	4413      	add	r3, r2
 8010e96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	693b      	ldr	r3, [r7, #16]
 8010e9e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	3301      	adds	r3, #1
 8010ea4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010eac:	d80c      	bhi.n	8010ec8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010eae:	69bb      	ldr	r3, [r7, #24]
 8010eb0:	015a      	lsls	r2, r3, #5
 8010eb2:	697b      	ldr	r3, [r7, #20]
 8010eb4:	4413      	add	r3, r2
 8010eb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010ec0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010ec4:	d0ec      	beq.n	8010ea0 <USB_StopHost+0xc8>
 8010ec6:	e000      	b.n	8010eca <USB_StopHost+0xf2>
        break;
 8010ec8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8010eca:	69bb      	ldr	r3, [r7, #24]
 8010ecc:	3301      	adds	r3, #1
 8010ece:	61bb      	str	r3, [r7, #24]
 8010ed0:	69bb      	ldr	r3, [r7, #24]
 8010ed2:	2b0f      	cmp	r3, #15
 8010ed4:	d9c7      	bls.n	8010e66 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010edc:	461a      	mov	r2, r3
 8010ede:	f04f 33ff 	mov.w	r3, #4294967295
 8010ee2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8010eea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8010eec:	6878      	ldr	r0, [r7, #4]
 8010eee:	f7ff fce9 	bl	80108c4 <USB_EnableGlobalInt>

  return ret;
 8010ef2:	7ffb      	ldrb	r3, [r7, #31]
}
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	3720      	adds	r7, #32
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}

08010efc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010f00:	4904      	ldr	r1, [pc, #16]	@ (8010f14 <MX_FATFS_Init+0x18>)
 8010f02:	4805      	ldr	r0, [pc, #20]	@ (8010f18 <MX_FATFS_Init+0x1c>)
 8010f04:	f003 f9c4 	bl	8014290 <FATFS_LinkDriver>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	4b03      	ldr	r3, [pc, #12]	@ (8010f1c <MX_FATFS_Init+0x20>)
 8010f0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010f10:	bf00      	nop
 8010f12:	bd80      	pop	{r7, pc}
 8010f14:	200017ac 	.word	0x200017ac
 8010f18:	0801b43c 	.word	0x0801b43c
 8010f1c:	200017a8 	.word	0x200017a8

08010f20 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010f20:	b480      	push	{r7}
 8010f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010f24:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010f26:	4618      	mov	r0, r3
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2e:	4770      	bx	lr

08010f30 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b088      	sub	sp, #32
 8010f34:	af02      	add	r7, sp, #8
 8010f36:	60f8      	str	r0, [r7, #12]
 8010f38:	60b9      	str	r1, [r7, #8]
 8010f3a:	607a      	str	r2, [r7, #4]
 8010f3c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8010f3e:	2300      	movs	r3, #0
 8010f40:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	9300      	str	r3, [sp, #0]
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	68ba      	ldr	r2, [r7, #8]
 8010f4a:	68f9      	ldr	r1, [r7, #12]
 8010f4c:	4806      	ldr	r0, [pc, #24]	@ (8010f68 <BSP_SD_ReadBlocks+0x38>)
 8010f4e:	f7fb f9e3 	bl	800c318 <HAL_SD_ReadBlocks>
 8010f52:	4603      	mov	r3, r0
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d001      	beq.n	8010f5c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010f58:	2301      	movs	r3, #1
 8010f5a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f5e:	4618      	mov	r0, r3
 8010f60:	3718      	adds	r7, #24
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}
 8010f66:	bf00      	nop
 8010f68:	20000e70 	.word	0x20000e70

08010f6c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b088      	sub	sp, #32
 8010f70:	af02      	add	r7, sp, #8
 8010f72:	60f8      	str	r0, [r7, #12]
 8010f74:	60b9      	str	r1, [r7, #8]
 8010f76:	607a      	str	r2, [r7, #4]
 8010f78:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010f7e:	683b      	ldr	r3, [r7, #0]
 8010f80:	9300      	str	r3, [sp, #0]
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	68ba      	ldr	r2, [r7, #8]
 8010f86:	68f9      	ldr	r1, [r7, #12]
 8010f88:	4806      	ldr	r0, [pc, #24]	@ (8010fa4 <BSP_SD_WriteBlocks+0x38>)
 8010f8a:	f7fb fba3 	bl	800c6d4 <HAL_SD_WriteBlocks>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d001      	beq.n	8010f98 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010f94:	2301      	movs	r3, #1
 8010f96:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	3718      	adds	r7, #24
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd80      	pop	{r7, pc}
 8010fa2:	bf00      	nop
 8010fa4:	20000e70 	.word	0x20000e70

08010fa8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010fac:	4805      	ldr	r0, [pc, #20]	@ (8010fc4 <BSP_SD_GetCardState+0x1c>)
 8010fae:	f7fb fee7 	bl	800cd80 <HAL_SD_GetCardState>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	2b04      	cmp	r3, #4
 8010fb6:	bf14      	ite	ne
 8010fb8:	2301      	movne	r3, #1
 8010fba:	2300      	moveq	r3, #0
 8010fbc:	b2db      	uxtb	r3, r3
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	bd80      	pop	{r7, pc}
 8010fc2:	bf00      	nop
 8010fc4:	20000e70 	.word	0x20000e70

08010fc8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b082      	sub	sp, #8
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010fd0:	6879      	ldr	r1, [r7, #4]
 8010fd2:	4803      	ldr	r0, [pc, #12]	@ (8010fe0 <BSP_SD_GetCardInfo+0x18>)
 8010fd4:	f7fb fea8 	bl	800cd28 <HAL_SD_GetCardInfo>
}
 8010fd8:	bf00      	nop
 8010fda:	3708      	adds	r7, #8
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}
 8010fe0:	20000e70 	.word	0x20000e70

08010fe4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b084      	sub	sp, #16
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8010fec:	f003 f99c 	bl	8014328 <osKernelSysTick>
 8010ff0:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8010ff2:	e006      	b.n	8011002 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010ff4:	f7ff ffd8 	bl	8010fa8 <BSP_SD_GetCardState>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d101      	bne.n	8011002 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010ffe:	2300      	movs	r3, #0
 8011000:	e009      	b.n	8011016 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8011002:	f003 f991 	bl	8014328 <osKernelSysTick>
 8011006:	4602      	mov	r2, r0
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	1ad3      	subs	r3, r2, r3
 801100c:	687a      	ldr	r2, [r7, #4]
 801100e:	429a      	cmp	r2, r3
 8011010:	d8f0      	bhi.n	8010ff4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011012:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011016:	4618      	mov	r0, r3
 8011018:	3710      	adds	r7, #16
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}
	...

08011020 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b084      	sub	sp, #16
 8011024:	af00      	add	r7, sp, #0
 8011026:	4603      	mov	r3, r0
 8011028:	71fb      	strb	r3, [r7, #7]
  // HAL 기반 카드 상태 확인 (BSP 우회)
  HAL_SD_CardStateTypeDef cardState = HAL_SD_GetCardState(&hsd1);
 801102a:	480e      	ldr	r0, [pc, #56]	@ (8011064 <SD_CheckStatus+0x44>)
 801102c:	f7fb fea8 	bl	800cd80 <HAL_SD_GetCardState>
 8011030:	60f8      	str	r0, [r7, #12]
  
  // SD 카드 상태 확인
  
  if(cardState == HAL_SD_CARD_TRANSFER)
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	2b04      	cmp	r3, #4
 8011036:	d103      	bne.n	8011040 <SD_CheckStatus+0x20>
  {
    // 카드가 TRANSFER 상태이면 초기화 완료로 간주
    Stat = 0;  // 모든 에러 플래그 클리어
 8011038:	4b0b      	ldr	r3, [pc, #44]	@ (8011068 <SD_CheckStatus+0x48>)
 801103a:	2200      	movs	r2, #0
 801103c:	701a      	strb	r2, [r3, #0]
 801103e:	e00a      	b.n	8011056 <SD_CheckStatus+0x36>
    // SD 카드 준비됨
  }
  else
  {
    // 카드가 준비되지 않은 상태
    Stat = STA_NOINIT;
 8011040:	4b09      	ldr	r3, [pc, #36]	@ (8011068 <SD_CheckStatus+0x48>)
 8011042:	2201      	movs	r2, #1
 8011044:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[sd_diskio] SD card status: NOT_READY (0x%02X)", Stat);
 8011046:	4b08      	ldr	r3, [pc, #32]	@ (8011068 <SD_CheckStatus+0x48>)
 8011048:	781b      	ldrb	r3, [r3, #0]
 801104a:	b2db      	uxtb	r3, r3
 801104c:	461a      	mov	r2, r3
 801104e:	4907      	ldr	r1, [pc, #28]	@ (801106c <SD_CheckStatus+0x4c>)
 8011050:	2002      	movs	r0, #2
 8011052:	f7f3 ffdb 	bl	800500c <LOGGER_SendFormatted>
  }

  return Stat;
 8011056:	4b04      	ldr	r3, [pc, #16]	@ (8011068 <SD_CheckStatus+0x48>)
 8011058:	781b      	ldrb	r3, [r3, #0]
 801105a:	b2db      	uxtb	r3, r3
}
 801105c:	4618      	mov	r0, r3
 801105e:	3710      	adds	r7, #16
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}
 8011064:	20000e70 	.word	0x20000e70
 8011068:	2000006d 	.word	0x2000006d
 801106c:	0801b11c 	.word	0x0801b11c

08011070 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011070:	b590      	push	{r4, r7, lr}
 8011072:	b089      	sub	sp, #36	@ 0x24
 8011074:	af00      	add	r7, sp, #0
 8011076:	4603      	mov	r3, r0
 8011078:	71fb      	strb	r3, [r7, #7]
  LOG_INFO("[sd_diskio] SD_initialize called");
 801107a:	493d      	ldr	r1, [pc, #244]	@ (8011170 <SD_initialize+0x100>)
 801107c:	2001      	movs	r0, #1
 801107e:	f7f3 ffc5 	bl	800500c <LOGGER_SendFormatted>
  
  // 초기 상태 설정
  Stat = STA_NOINIT;
 8011082:	4b3c      	ldr	r3, [pc, #240]	@ (8011174 <SD_initialize+0x104>)
 8011084:	2201      	movs	r2, #1
 8011086:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  int kernel_running = osKernelRunning();
 8011088:	f003 f942 	bl	8014310 <osKernelRunning>
 801108c:	61f8      	str	r0, [r7, #28]
  LOG_INFO("[sd_diskio] FreeRTOS kernel running check: %d", kernel_running);
 801108e:	69fa      	ldr	r2, [r7, #28]
 8011090:	4939      	ldr	r1, [pc, #228]	@ (8011178 <SD_initialize+0x108>)
 8011092:	2001      	movs	r0, #1
 8011094:	f7f3 ffba 	bl	800500c <LOGGER_SendFormatted>
  if(kernel_running)
 8011098:	69fb      	ldr	r3, [r7, #28]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d055      	beq.n	801114a <SD_initialize+0xda>
  osKernelState_t kernel_state = osKernelGetState();
  LOG_INFO("[sd_diskio] FreeRTOS kernel state: %d (osKernelRunning=%d)", kernel_state, osKernelRunning);
  if(kernel_state == osKernelRunning)
#endif
  {
    LOG_INFO("[sd_diskio] FreeRTOS kernel is running - proceeding with SD check");
 801109e:	4937      	ldr	r1, [pc, #220]	@ (801117c <SD_initialize+0x10c>)
 80110a0:	2001      	movs	r0, #1
 80110a2:	f7f3 ffb3 	bl	800500c <LOGGER_SendFormatted>
    if(BSP_SD_Init() == MSD_OK)
    {
      Stat = SD_CheckStatus(lun);
    }
#else
    LOG_INFO("[sd_diskio] DISABLE_SD_INIT is active - using HAL-based check");
 80110a6:	4936      	ldr	r1, [pc, #216]	@ (8011180 <SD_initialize+0x110>)
 80110a8:	2001      	movs	r0, #1
 80110aa:	f7f3 ffaf 	bl	800500c <LOGGER_SendFormatted>
    Stat = SD_CheckStatus(lun);
 80110ae:	79fb      	ldrb	r3, [r7, #7]
 80110b0:	4618      	mov	r0, r3
 80110b2:	f7ff ffb5 	bl	8011020 <SD_CheckStatus>
 80110b6:	4603      	mov	r3, r0
 80110b8:	461a      	mov	r2, r3
 80110ba:	4b2e      	ldr	r3, [pc, #184]	@ (8011174 <SD_initialize+0x104>)
 80110bc:	701a      	strb	r2, [r3, #0]

    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */
    LOG_INFO("[sd_diskio] Final Stat after SD_CheckStatus: 0x%02X", Stat);
 80110be:	4b2d      	ldr	r3, [pc, #180]	@ (8011174 <SD_initialize+0x104>)
 80110c0:	781b      	ldrb	r3, [r3, #0]
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	461a      	mov	r2, r3
 80110c6:	492f      	ldr	r1, [pc, #188]	@ (8011184 <SD_initialize+0x114>)
 80110c8:	2001      	movs	r0, #1
 80110ca:	f7f3 ff9f 	bl	800500c <LOGGER_SendFormatted>

    if (Stat != STA_NOINIT)
 80110ce:	4b29      	ldr	r3, [pc, #164]	@ (8011174 <SD_initialize+0x104>)
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	b2db      	uxtb	r3, r3
 80110d4:	2b01      	cmp	r3, #1
 80110d6:	d033      	beq.n	8011140 <SD_initialize+0xd0>
    {
      LOG_INFO("[sd_diskio] SD card ready - creating message queue...");
 80110d8:	492b      	ldr	r1, [pc, #172]	@ (8011188 <SD_initialize+0x118>)
 80110da:	2001      	movs	r0, #1
 80110dc:	f7f3 ff96 	bl	800500c <LOGGER_SendFormatted>
      if (SDQueueID == NULL)
 80110e0:	4b2a      	ldr	r3, [pc, #168]	@ (801118c <SD_initialize+0x11c>)
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d115      	bne.n	8011114 <SD_initialize+0xa4>
      {
 #if (osCMSIS <= 0x20000U)
        osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80110e8:	4b29      	ldr	r3, [pc, #164]	@ (8011190 <SD_initialize+0x120>)
 80110ea:	f107 040c 	add.w	r4, r7, #12
 80110ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80110f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80110f4:	f107 030c 	add.w	r3, r7, #12
 80110f8:	2100      	movs	r1, #0
 80110fa:	4618      	mov	r0, r3
 80110fc:	f003 f984 	bl	8014408 <osMessageCreate>
 8011100:	4603      	mov	r3, r0
 8011102:	4a22      	ldr	r2, [pc, #136]	@ (801118c <SD_initialize+0x11c>)
 8011104:	6013      	str	r3, [r2, #0]
#else
        SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
        LOG_INFO("[sd_diskio] Message queue created: %p", SDQueueID);
 8011106:	4b21      	ldr	r3, [pc, #132]	@ (801118c <SD_initialize+0x11c>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	461a      	mov	r2, r3
 801110c:	4921      	ldr	r1, [pc, #132]	@ (8011194 <SD_initialize+0x124>)
 801110e:	2001      	movs	r0, #1
 8011110:	f7f3 ff7c 	bl	800500c <LOGGER_SendFormatted>
      }

      if (SDQueueID == NULL)
 8011114:	4b1d      	ldr	r3, [pc, #116]	@ (801118c <SD_initialize+0x11c>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d10c      	bne.n	8011136 <SD_initialize+0xc6>
      {
        LOG_ERROR("[sd_diskio] Failed to create message queue");
 801111c:	491e      	ldr	r1, [pc, #120]	@ (8011198 <SD_initialize+0x128>)
 801111e:	2003      	movs	r0, #3
 8011120:	f7f3 ff74 	bl	800500c <LOGGER_SendFormatted>
        Stat |= STA_NOINIT;
 8011124:	4b13      	ldr	r3, [pc, #76]	@ (8011174 <SD_initialize+0x104>)
 8011126:	781b      	ldrb	r3, [r3, #0]
 8011128:	b2db      	uxtb	r3, r3
 801112a:	f043 0301 	orr.w	r3, r3, #1
 801112e:	b2da      	uxtb	r2, r3
 8011130:	4b10      	ldr	r3, [pc, #64]	@ (8011174 <SD_initialize+0x104>)
 8011132:	701a      	strb	r2, [r3, #0]
 8011134:	e00d      	b.n	8011152 <SD_initialize+0xe2>
      }
      else
      {
        LOG_INFO("[sd_diskio] SD initialization completed successfully");
 8011136:	4919      	ldr	r1, [pc, #100]	@ (801119c <SD_initialize+0x12c>)
 8011138:	2001      	movs	r0, #1
 801113a:	f7f3 ff67 	bl	800500c <LOGGER_SendFormatted>
 801113e:	e008      	b.n	8011152 <SD_initialize+0xe2>
      }
    }
    else
    {
      LOG_WARN("[sd_diskio] SD card not ready - initialization failed");
 8011140:	4917      	ldr	r1, [pc, #92]	@ (80111a0 <SD_initialize+0x130>)
 8011142:	2002      	movs	r0, #2
 8011144:	f7f3 ff62 	bl	800500c <LOGGER_SendFormatted>
 8011148:	e003      	b.n	8011152 <SD_initialize+0xe2>
    }
  }
  else
  {
    LOG_ERROR("[sd_diskio] FreeRTOS kernel not running - cannot initialize SD");
 801114a:	4916      	ldr	r1, [pc, #88]	@ (80111a4 <SD_initialize+0x134>)
 801114c:	2003      	movs	r0, #3
 801114e:	f7f3 ff5d 	bl	800500c <LOGGER_SendFormatted>
  }

  LOG_INFO("[sd_diskio] SD_initialize returning: 0x%02X", Stat);
 8011152:	4b08      	ldr	r3, [pc, #32]	@ (8011174 <SD_initialize+0x104>)
 8011154:	781b      	ldrb	r3, [r3, #0]
 8011156:	b2db      	uxtb	r3, r3
 8011158:	461a      	mov	r2, r3
 801115a:	4913      	ldr	r1, [pc, #76]	@ (80111a8 <SD_initialize+0x138>)
 801115c:	2001      	movs	r0, #1
 801115e:	f7f3 ff55 	bl	800500c <LOGGER_SendFormatted>
  return Stat;
 8011162:	4b04      	ldr	r3, [pc, #16]	@ (8011174 <SD_initialize+0x104>)
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	b2db      	uxtb	r3, r3

}
 8011168:	4618      	mov	r0, r3
 801116a:	3724      	adds	r7, #36	@ 0x24
 801116c:	46bd      	mov	sp, r7
 801116e:	bd90      	pop	{r4, r7, pc}
 8011170:	0801b14c 	.word	0x0801b14c
 8011174:	2000006d 	.word	0x2000006d
 8011178:	0801b170 	.word	0x0801b170
 801117c:	0801b1a0 	.word	0x0801b1a0
 8011180:	0801b1e4 	.word	0x0801b1e4
 8011184:	0801b224 	.word	0x0801b224
 8011188:	0801b258 	.word	0x0801b258
 801118c:	200019e0 	.word	0x200019e0
 8011190:	0801b3c0 	.word	0x0801b3c0
 8011194:	0801b290 	.word	0x0801b290
 8011198:	0801b2b8 	.word	0x0801b2b8
 801119c:	0801b2e4 	.word	0x0801b2e4
 80111a0:	0801b31c 	.word	0x0801b31c
 80111a4:	0801b354 	.word	0x0801b354
 80111a8:	0801b394 	.word	0x0801b394

080111ac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b082      	sub	sp, #8
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	4603      	mov	r3, r0
 80111b4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80111b6:	79fb      	ldrb	r3, [r7, #7]
 80111b8:	4618      	mov	r0, r3
 80111ba:	f7ff ff31 	bl	8011020 <SD_CheckStatus>
 80111be:	4603      	mov	r3, r0
}
 80111c0:	4618      	mov	r0, r3
 80111c2:	3708      	adds	r7, #8
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}

080111c8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b088      	sub	sp, #32
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	60b9      	str	r1, [r7, #8]
 80111d0:	607a      	str	r2, [r7, #4]
 80111d2:	603b      	str	r3, [r7, #0]
 80111d4:	4603      	mov	r3, r0
 80111d6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80111d8:	2301      	movs	r3, #1
 80111da:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80111dc:	f247 5030 	movw	r0, #30000	@ 0x7530
 80111e0:	f7ff ff00 	bl	8010fe4 <SD_CheckStatusWithTimeout>
 80111e4:	4603      	mov	r3, r0
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	da01      	bge.n	80111ee <SD_read+0x26>
  {
    return res;
 80111ea:	7ffb      	ldrb	r3, [r7, #31]
 80111ec:	e00e      	b.n	801120c <SD_read+0x44>
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned - using polling mode */
    // 폴링 모드로 SD 카드 읽기
    ret = BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_TIMEOUT);
 80111ee:	f247 5330 	movw	r3, #30000	@ 0x7530
 80111f2:	683a      	ldr	r2, [r7, #0]
 80111f4:	6879      	ldr	r1, [r7, #4]
 80111f6:	68b8      	ldr	r0, [r7, #8]
 80111f8:	f7ff fe9a 	bl	8010f30 <BSP_SD_ReadBlocks>
 80111fc:	4603      	mov	r3, r0
 80111fe:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8011200:	7fbb      	ldrb	r3, [r7, #30]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d101      	bne.n	801120a <SD_read+0x42>
        // 읽기 성공
        res = RES_OK;
 8011206:	2300      	movs	r3, #0
 8011208:	77fb      	strb	r3, [r7, #31]

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 801120a:	7ffb      	ldrb	r3, [r7, #31]
}
 801120c:	4618      	mov	r0, r3
 801120e:	3720      	adds	r7, #32
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}

08011214 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b086      	sub	sp, #24
 8011218:	af00      	add	r7, sp, #0
 801121a:	60b9      	str	r1, [r7, #8]
 801121c:	607a      	str	r2, [r7, #4]
 801121e:	603b      	str	r3, [r7, #0]
 8011220:	4603      	mov	r3, r0
 8011222:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011224:	2301      	movs	r3, #1
 8011226:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011228:	f247 5030 	movw	r0, #30000	@ 0x7530
 801122c:	f7ff feda 	bl	8010fe4 <SD_CheckStatusWithTimeout>
 8011230:	4603      	mov	r3, r0
 8011232:	2b00      	cmp	r3, #0
 8011234:	da01      	bge.n	801123a <SD_write+0x26>
  {
    return res;
 8011236:	7dfb      	ldrb	r3, [r7, #23]
 8011238:	e00e      	b.n	8011258 <SD_write+0x44>
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  // BSP 폴링 모드 사용 (DMA 큐 대기 제거)
  // 폴링 모드로 SD 카드 쓰기
  ret = BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)sector, count, SD_TIMEOUT);
 801123a:	f247 5330 	movw	r3, #30000	@ 0x7530
 801123e:	683a      	ldr	r2, [r7, #0]
 8011240:	6879      	ldr	r1, [r7, #4]
 8011242:	68b8      	ldr	r0, [r7, #8]
 8011244:	f7ff fe92 	bl	8010f6c <BSP_SD_WriteBlocks>
 8011248:	4603      	mov	r3, r0
 801124a:	613b      	str	r3, [r7, #16]
  // 쓰기 결과 확인
  
  if(ret == MSD_OK)
 801124c:	693b      	ldr	r3, [r7, #16]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d101      	bne.n	8011256 <SD_write+0x42>
  {
    // 폴링 방식이므로 큐 대기 불필요 - 즉시 성공 처리
    // 쓰기 완료
    res = RES_OK;
 8011252:	2300      	movs	r3, #0
 8011254:	75fb      	strb	r3, [r7, #23]
    }

  }
#endif

  return res;
 8011256:	7dfb      	ldrb	r3, [r7, #23]
}
 8011258:	4618      	mov	r0, r3
 801125a:	3718      	adds	r7, #24
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}

08011260 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b08c      	sub	sp, #48	@ 0x30
 8011264:	af00      	add	r7, sp, #0
 8011266:	4603      	mov	r3, r0
 8011268:	603a      	str	r2, [r7, #0]
 801126a:	71fb      	strb	r3, [r7, #7]
 801126c:	460b      	mov	r3, r1
 801126e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011270:	2301      	movs	r3, #1
 8011272:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011276:	4b25      	ldr	r3, [pc, #148]	@ (801130c <SD_ioctl+0xac>)
 8011278:	781b      	ldrb	r3, [r3, #0]
 801127a:	b2db      	uxtb	r3, r3
 801127c:	f003 0301 	and.w	r3, r3, #1
 8011280:	2b00      	cmp	r3, #0
 8011282:	d001      	beq.n	8011288 <SD_ioctl+0x28>
 8011284:	2303      	movs	r3, #3
 8011286:	e03c      	b.n	8011302 <SD_ioctl+0xa2>

  switch (cmd)
 8011288:	79bb      	ldrb	r3, [r7, #6]
 801128a:	2b03      	cmp	r3, #3
 801128c:	d834      	bhi.n	80112f8 <SD_ioctl+0x98>
 801128e:	a201      	add	r2, pc, #4	@ (adr r2, 8011294 <SD_ioctl+0x34>)
 8011290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011294:	080112a5 	.word	0x080112a5
 8011298:	080112ad 	.word	0x080112ad
 801129c:	080112c5 	.word	0x080112c5
 80112a0:	080112df 	.word	0x080112df
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80112a4:	2300      	movs	r3, #0
 80112a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80112aa:	e028      	b.n	80112fe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80112ac:	f107 030c 	add.w	r3, r7, #12
 80112b0:	4618      	mov	r0, r3
 80112b2:	f7ff fe89 	bl	8010fc8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80112b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80112bc:	2300      	movs	r3, #0
 80112be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80112c2:	e01c      	b.n	80112fe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80112c4:	f107 030c 	add.w	r3, r7, #12
 80112c8:	4618      	mov	r0, r3
 80112ca:	f7ff fe7d 	bl	8010fc8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80112ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112d0:	b29a      	uxth	r2, r3
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80112d6:	2300      	movs	r3, #0
 80112d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80112dc:	e00f      	b.n	80112fe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80112de:	f107 030c 	add.w	r3, r7, #12
 80112e2:	4618      	mov	r0, r3
 80112e4:	f7ff fe70 	bl	8010fc8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80112e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112ea:	0a5a      	lsrs	r2, r3, #9
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80112f0:	2300      	movs	r3, #0
 80112f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80112f6:	e002      	b.n	80112fe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80112f8:	2304      	movs	r3, #4
 80112fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80112fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011302:	4618      	mov	r0, r3
 8011304:	3730      	adds	r7, #48	@ 0x30
 8011306:	46bd      	mov	sp, r7
 8011308:	bd80      	pop	{r7, pc}
 801130a:	bf00      	nop
 801130c:	2000006d 	.word	0x2000006d

08011310 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b082      	sub	sp, #8
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801131e:	1c5a      	adds	r2, r3, #1
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	f000 f804 	bl	8011334 <USBH_HandleSof>
}
 801132c:	bf00      	nop
 801132e:	3708      	adds	r7, #8
 8011330:	46bd      	mov	sp, r7
 8011332:	bd80      	pop	{r7, pc}

08011334 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b082      	sub	sp, #8
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	781b      	ldrb	r3, [r3, #0]
 8011340:	b2db      	uxtb	r3, r3
 8011342:	2b0b      	cmp	r3, #11
 8011344:	d10a      	bne.n	801135c <USBH_HandleSof+0x28>
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801134c:	2b00      	cmp	r3, #0
 801134e:	d005      	beq.n	801135c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011356:	699b      	ldr	r3, [r3, #24]
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	4798      	blx	r3
  }
}
 801135c:	bf00      	nop
 801135e:	3708      	adds	r7, #8
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}

08011364 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b082      	sub	sp, #8
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2201      	movs	r2, #1
 8011370:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8011374:	2300      	movs	r3, #0
 8011376:	2200      	movs	r2, #0
 8011378:	2101      	movs	r1, #1
 801137a:	6878      	ldr	r0, [r7, #4]
 801137c:	f000 f85b 	bl	8011436 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 8011380:	bf00      	nop
}
 8011382:	3708      	adds	r7, #8
 8011384:	46bd      	mov	sp, r7
 8011386:	bd80      	pop	{r7, pc}

08011388 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8011388:	b480      	push	{r7}
 801138a:	b083      	sub	sp, #12
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2200      	movs	r2, #0
 8011394:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2201      	movs	r2, #1
 801139c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 80113a0:	bf00      	nop
}
 80113a2:	370c      	adds	r7, #12
 80113a4:	46bd      	mov	sp, r7
 80113a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113aa:	4770      	bx	lr

080113ac <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b082      	sub	sp, #8
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2201      	movs	r2, #1
 80113b8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2200      	movs	r2, #0
 80113c0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2200      	movs	r2, #0
 80113c8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80113cc:	2300      	movs	r3, #0
 80113ce:	2200      	movs	r2, #0
 80113d0:	2101      	movs	r1, #1
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f000 f82f 	bl	8011436 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80113d8:	2300      	movs	r3, #0
}
 80113da:	4618      	mov	r0, r3
 80113dc:	3708      	adds	r7, #8
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}

080113e2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80113e2:	b580      	push	{r7, lr}
 80113e4:	b082      	sub	sp, #8
 80113e6:	af00      	add	r7, sp, #0
 80113e8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	2201      	movs	r2, #1
 80113ee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	2200      	movs	r2, #0
 80113f6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	2200      	movs	r2, #0
 80113fe:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8011402:	6878      	ldr	r0, [r7, #4]
 8011404:	f005 fb46 	bl	8016a94 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	791b      	ldrb	r3, [r3, #4]
 801140c:	4619      	mov	r1, r3
 801140e:	6878      	ldr	r0, [r7, #4]
 8011410:	f000 f847 	bl	80114a2 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	795b      	ldrb	r3, [r3, #5]
 8011418:	4619      	mov	r1, r3
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	f000 f841 	bl	80114a2 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8011420:	2300      	movs	r3, #0
 8011422:	2200      	movs	r2, #0
 8011424:	2101      	movs	r1, #1
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f000 f805 	bl	8011436 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 801142c:	2300      	movs	r3, #0
}
 801142e:	4618      	mov	r0, r3
 8011430:	3708      	adds	r7, #8
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}

08011436 <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 8011436:	b580      	push	{r7, lr}
 8011438:	b086      	sub	sp, #24
 801143a:	af00      	add	r7, sp, #0
 801143c:	60f8      	str	r0, [r7, #12]
 801143e:	607a      	str	r2, [r7, #4]
 8011440:	603b      	str	r3, [r7, #0]
 8011442:	460b      	mov	r3, r1
 8011444:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 8011446:	7afa      	ldrb	r2, [r7, #11]
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8011454:	4618      	mov	r0, r3
 8011456:	f003 f8b3 	bl	80145c0 <osMessageWaiting>
 801145a:	4603      	mov	r3, r0
 801145c:	f1c3 0310 	rsb	r3, r3, #16
 8011460:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 8011462:	697b      	ldr	r3, [r7, #20]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d009      	beq.n	801147c <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011474:	687a      	ldr	r2, [r7, #4]
 8011476:	4619      	mov	r1, r3
 8011478:	f002 ffee 	bl	8014458 <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 801147c:	bf00      	nop
 801147e:	3718      	adds	r7, #24
 8011480:	46bd      	mov	sp, r7
 8011482:	bd80      	pop	{r7, pc}

08011484 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b082      	sub	sp, #8
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 801148c:	2300      	movs	r3, #0
 801148e:	2200      	movs	r2, #0
 8011490:	2101      	movs	r1, #1
 8011492:	6878      	ldr	r0, [r7, #4]
 8011494:	f7ff ffcf 	bl	8011436 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8011498:	2300      	movs	r3, #0
}
 801149a:	4618      	mov	r0, r3
 801149c:	3708      	adds	r7, #8
 801149e:	46bd      	mov	sp, r7
 80114a0:	bd80      	pop	{r7, pc}

080114a2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80114a2:	b480      	push	{r7}
 80114a4:	b083      	sub	sp, #12
 80114a6:	af00      	add	r7, sp, #0
 80114a8:	6078      	str	r0, [r7, #4]
 80114aa:	460b      	mov	r3, r1
 80114ac:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80114ae:	78fb      	ldrb	r3, [r7, #3]
 80114b0:	2b0f      	cmp	r3, #15
 80114b2:	d80d      	bhi.n	80114d0 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80114b4:	78fb      	ldrb	r3, [r7, #3]
 80114b6:	687a      	ldr	r2, [r7, #4]
 80114b8:	33e0      	adds	r3, #224	@ 0xe0
 80114ba:	009b      	lsls	r3, r3, #2
 80114bc:	4413      	add	r3, r2
 80114be:	685a      	ldr	r2, [r3, #4]
 80114c0:	78fb      	ldrb	r3, [r7, #3]
 80114c2:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80114c6:	6879      	ldr	r1, [r7, #4]
 80114c8:	33e0      	adds	r3, #224	@ 0xe0
 80114ca:	009b      	lsls	r3, r3, #2
 80114cc:	440b      	add	r3, r1
 80114ce:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80114d0:	2300      	movs	r3, #0
}
 80114d2:	4618      	mov	r0, r3
 80114d4:	370c      	adds	r7, #12
 80114d6:	46bd      	mov	sp, r7
 80114d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114dc:	4770      	bx	lr
	...

080114e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b084      	sub	sp, #16
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	4603      	mov	r3, r0
 80114e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80114ea:	79fb      	ldrb	r3, [r7, #7]
 80114ec:	4a08      	ldr	r2, [pc, #32]	@ (8011510 <disk_status+0x30>)
 80114ee:	009b      	lsls	r3, r3, #2
 80114f0:	4413      	add	r3, r2
 80114f2:	685b      	ldr	r3, [r3, #4]
 80114f4:	685b      	ldr	r3, [r3, #4]
 80114f6:	79fa      	ldrb	r2, [r7, #7]
 80114f8:	4905      	ldr	r1, [pc, #20]	@ (8011510 <disk_status+0x30>)
 80114fa:	440a      	add	r2, r1
 80114fc:	7a12      	ldrb	r2, [r2, #8]
 80114fe:	4610      	mov	r0, r2
 8011500:	4798      	blx	r3
 8011502:	4603      	mov	r3, r0
 8011504:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011506:	7bfb      	ldrb	r3, [r7, #15]
}
 8011508:	4618      	mov	r0, r3
 801150a:	3710      	adds	r7, #16
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}
 8011510:	20001a0c 	.word	0x20001a0c

08011514 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b084      	sub	sp, #16
 8011518:	af00      	add	r7, sp, #0
 801151a:	4603      	mov	r3, r0
 801151c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801151e:	2300      	movs	r3, #0
 8011520:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011522:	79fb      	ldrb	r3, [r7, #7]
 8011524:	4a0d      	ldr	r2, [pc, #52]	@ (801155c <disk_initialize+0x48>)
 8011526:	5cd3      	ldrb	r3, [r2, r3]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d111      	bne.n	8011550 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801152c:	79fb      	ldrb	r3, [r7, #7]
 801152e:	4a0b      	ldr	r2, [pc, #44]	@ (801155c <disk_initialize+0x48>)
 8011530:	2101      	movs	r1, #1
 8011532:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011534:	79fb      	ldrb	r3, [r7, #7]
 8011536:	4a09      	ldr	r2, [pc, #36]	@ (801155c <disk_initialize+0x48>)
 8011538:	009b      	lsls	r3, r3, #2
 801153a:	4413      	add	r3, r2
 801153c:	685b      	ldr	r3, [r3, #4]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	79fa      	ldrb	r2, [r7, #7]
 8011542:	4906      	ldr	r1, [pc, #24]	@ (801155c <disk_initialize+0x48>)
 8011544:	440a      	add	r2, r1
 8011546:	7a12      	ldrb	r2, [r2, #8]
 8011548:	4610      	mov	r0, r2
 801154a:	4798      	blx	r3
 801154c:	4603      	mov	r3, r0
 801154e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011550:	7bfb      	ldrb	r3, [r7, #15]
}
 8011552:	4618      	mov	r0, r3
 8011554:	3710      	adds	r7, #16
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}
 801155a:	bf00      	nop
 801155c:	20001a0c 	.word	0x20001a0c

08011560 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011560:	b590      	push	{r4, r7, lr}
 8011562:	b087      	sub	sp, #28
 8011564:	af00      	add	r7, sp, #0
 8011566:	60b9      	str	r1, [r7, #8]
 8011568:	607a      	str	r2, [r7, #4]
 801156a:	603b      	str	r3, [r7, #0]
 801156c:	4603      	mov	r3, r0
 801156e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011570:	7bfb      	ldrb	r3, [r7, #15]
 8011572:	4a0a      	ldr	r2, [pc, #40]	@ (801159c <disk_read+0x3c>)
 8011574:	009b      	lsls	r3, r3, #2
 8011576:	4413      	add	r3, r2
 8011578:	685b      	ldr	r3, [r3, #4]
 801157a:	689c      	ldr	r4, [r3, #8]
 801157c:	7bfb      	ldrb	r3, [r7, #15]
 801157e:	4a07      	ldr	r2, [pc, #28]	@ (801159c <disk_read+0x3c>)
 8011580:	4413      	add	r3, r2
 8011582:	7a18      	ldrb	r0, [r3, #8]
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	687a      	ldr	r2, [r7, #4]
 8011588:	68b9      	ldr	r1, [r7, #8]
 801158a:	47a0      	blx	r4
 801158c:	4603      	mov	r3, r0
 801158e:	75fb      	strb	r3, [r7, #23]
  return res;
 8011590:	7dfb      	ldrb	r3, [r7, #23]
}
 8011592:	4618      	mov	r0, r3
 8011594:	371c      	adds	r7, #28
 8011596:	46bd      	mov	sp, r7
 8011598:	bd90      	pop	{r4, r7, pc}
 801159a:	bf00      	nop
 801159c:	20001a0c 	.word	0x20001a0c

080115a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80115a0:	b590      	push	{r4, r7, lr}
 80115a2:	b087      	sub	sp, #28
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	60b9      	str	r1, [r7, #8]
 80115a8:	607a      	str	r2, [r7, #4]
 80115aa:	603b      	str	r3, [r7, #0]
 80115ac:	4603      	mov	r3, r0
 80115ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80115b0:	7bfb      	ldrb	r3, [r7, #15]
 80115b2:	4a0a      	ldr	r2, [pc, #40]	@ (80115dc <disk_write+0x3c>)
 80115b4:	009b      	lsls	r3, r3, #2
 80115b6:	4413      	add	r3, r2
 80115b8:	685b      	ldr	r3, [r3, #4]
 80115ba:	68dc      	ldr	r4, [r3, #12]
 80115bc:	7bfb      	ldrb	r3, [r7, #15]
 80115be:	4a07      	ldr	r2, [pc, #28]	@ (80115dc <disk_write+0x3c>)
 80115c0:	4413      	add	r3, r2
 80115c2:	7a18      	ldrb	r0, [r3, #8]
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	687a      	ldr	r2, [r7, #4]
 80115c8:	68b9      	ldr	r1, [r7, #8]
 80115ca:	47a0      	blx	r4
 80115cc:	4603      	mov	r3, r0
 80115ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80115d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80115d2:	4618      	mov	r0, r3
 80115d4:	371c      	adds	r7, #28
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd90      	pop	{r4, r7, pc}
 80115da:	bf00      	nop
 80115dc:	20001a0c 	.word	0x20001a0c

080115e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b084      	sub	sp, #16
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	4603      	mov	r3, r0
 80115e8:	603a      	str	r2, [r7, #0]
 80115ea:	71fb      	strb	r3, [r7, #7]
 80115ec:	460b      	mov	r3, r1
 80115ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80115f0:	79fb      	ldrb	r3, [r7, #7]
 80115f2:	4a09      	ldr	r2, [pc, #36]	@ (8011618 <disk_ioctl+0x38>)
 80115f4:	009b      	lsls	r3, r3, #2
 80115f6:	4413      	add	r3, r2
 80115f8:	685b      	ldr	r3, [r3, #4]
 80115fa:	691b      	ldr	r3, [r3, #16]
 80115fc:	79fa      	ldrb	r2, [r7, #7]
 80115fe:	4906      	ldr	r1, [pc, #24]	@ (8011618 <disk_ioctl+0x38>)
 8011600:	440a      	add	r2, r1
 8011602:	7a10      	ldrb	r0, [r2, #8]
 8011604:	79b9      	ldrb	r1, [r7, #6]
 8011606:	683a      	ldr	r2, [r7, #0]
 8011608:	4798      	blx	r3
 801160a:	4603      	mov	r3, r0
 801160c:	73fb      	strb	r3, [r7, #15]
  return res;
 801160e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011610:	4618      	mov	r0, r3
 8011612:	3710      	adds	r7, #16
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}
 8011618:	20001a0c 	.word	0x20001a0c

0801161c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801161c:	b480      	push	{r7}
 801161e:	b085      	sub	sp, #20
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	3301      	adds	r3, #1
 8011628:	781b      	ldrb	r3, [r3, #0]
 801162a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801162c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011630:	021b      	lsls	r3, r3, #8
 8011632:	b21a      	sxth	r2, r3
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	781b      	ldrb	r3, [r3, #0]
 8011638:	b21b      	sxth	r3, r3
 801163a:	4313      	orrs	r3, r2
 801163c:	b21b      	sxth	r3, r3
 801163e:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011640:	89fb      	ldrh	r3, [r7, #14]
}
 8011642:	4618      	mov	r0, r3
 8011644:	3714      	adds	r7, #20
 8011646:	46bd      	mov	sp, r7
 8011648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164c:	4770      	bx	lr

0801164e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801164e:	b480      	push	{r7}
 8011650:	b085      	sub	sp, #20
 8011652:	af00      	add	r7, sp, #0
 8011654:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	3303      	adds	r3, #3
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	021b      	lsls	r3, r3, #8
 8011662:	687a      	ldr	r2, [r7, #4]
 8011664:	3202      	adds	r2, #2
 8011666:	7812      	ldrb	r2, [r2, #0]
 8011668:	4313      	orrs	r3, r2
 801166a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	021b      	lsls	r3, r3, #8
 8011670:	687a      	ldr	r2, [r7, #4]
 8011672:	3201      	adds	r2, #1
 8011674:	7812      	ldrb	r2, [r2, #0]
 8011676:	4313      	orrs	r3, r2
 8011678:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	021b      	lsls	r3, r3, #8
 801167e:	687a      	ldr	r2, [r7, #4]
 8011680:	7812      	ldrb	r2, [r2, #0]
 8011682:	4313      	orrs	r3, r2
 8011684:	60fb      	str	r3, [r7, #12]
	return rv;
 8011686:	68fb      	ldr	r3, [r7, #12]
}
 8011688:	4618      	mov	r0, r3
 801168a:	3714      	adds	r7, #20
 801168c:	46bd      	mov	sp, r7
 801168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011692:	4770      	bx	lr

08011694 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011694:	b480      	push	{r7}
 8011696:	b083      	sub	sp, #12
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
 801169c:	460b      	mov	r3, r1
 801169e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	1c5a      	adds	r2, r3, #1
 80116a4:	607a      	str	r2, [r7, #4]
 80116a6:	887a      	ldrh	r2, [r7, #2]
 80116a8:	b2d2      	uxtb	r2, r2
 80116aa:	701a      	strb	r2, [r3, #0]
 80116ac:	887b      	ldrh	r3, [r7, #2]
 80116ae:	0a1b      	lsrs	r3, r3, #8
 80116b0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	1c5a      	adds	r2, r3, #1
 80116b6:	607a      	str	r2, [r7, #4]
 80116b8:	887a      	ldrh	r2, [r7, #2]
 80116ba:	b2d2      	uxtb	r2, r2
 80116bc:	701a      	strb	r2, [r3, #0]
}
 80116be:	bf00      	nop
 80116c0:	370c      	adds	r7, #12
 80116c2:	46bd      	mov	sp, r7
 80116c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c8:	4770      	bx	lr

080116ca <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80116ca:	b480      	push	{r7}
 80116cc:	b083      	sub	sp, #12
 80116ce:	af00      	add	r7, sp, #0
 80116d0:	6078      	str	r0, [r7, #4]
 80116d2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	1c5a      	adds	r2, r3, #1
 80116d8:	607a      	str	r2, [r7, #4]
 80116da:	683a      	ldr	r2, [r7, #0]
 80116dc:	b2d2      	uxtb	r2, r2
 80116de:	701a      	strb	r2, [r3, #0]
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	0a1b      	lsrs	r3, r3, #8
 80116e4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	1c5a      	adds	r2, r3, #1
 80116ea:	607a      	str	r2, [r7, #4]
 80116ec:	683a      	ldr	r2, [r7, #0]
 80116ee:	b2d2      	uxtb	r2, r2
 80116f0:	701a      	strb	r2, [r3, #0]
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	0a1b      	lsrs	r3, r3, #8
 80116f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	1c5a      	adds	r2, r3, #1
 80116fc:	607a      	str	r2, [r7, #4]
 80116fe:	683a      	ldr	r2, [r7, #0]
 8011700:	b2d2      	uxtb	r2, r2
 8011702:	701a      	strb	r2, [r3, #0]
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	0a1b      	lsrs	r3, r3, #8
 8011708:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	1c5a      	adds	r2, r3, #1
 801170e:	607a      	str	r2, [r7, #4]
 8011710:	683a      	ldr	r2, [r7, #0]
 8011712:	b2d2      	uxtb	r2, r2
 8011714:	701a      	strb	r2, [r3, #0]
}
 8011716:	bf00      	nop
 8011718:	370c      	adds	r7, #12
 801171a:	46bd      	mov	sp, r7
 801171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011720:	4770      	bx	lr

08011722 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011722:	b480      	push	{r7}
 8011724:	b087      	sub	sp, #28
 8011726:	af00      	add	r7, sp, #0
 8011728:	60f8      	str	r0, [r7, #12]
 801172a:	60b9      	str	r1, [r7, #8]
 801172c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d00d      	beq.n	8011758 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801173c:	693a      	ldr	r2, [r7, #16]
 801173e:	1c53      	adds	r3, r2, #1
 8011740:	613b      	str	r3, [r7, #16]
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	1c59      	adds	r1, r3, #1
 8011746:	6179      	str	r1, [r7, #20]
 8011748:	7812      	ldrb	r2, [r2, #0]
 801174a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	3b01      	subs	r3, #1
 8011750:	607b      	str	r3, [r7, #4]
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d1f1      	bne.n	801173c <mem_cpy+0x1a>
	}
}
 8011758:	bf00      	nop
 801175a:	371c      	adds	r7, #28
 801175c:	46bd      	mov	sp, r7
 801175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011762:	4770      	bx	lr

08011764 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011764:	b480      	push	{r7}
 8011766:	b087      	sub	sp, #28
 8011768:	af00      	add	r7, sp, #0
 801176a:	60f8      	str	r0, [r7, #12]
 801176c:	60b9      	str	r1, [r7, #8]
 801176e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	1c5a      	adds	r2, r3, #1
 8011778:	617a      	str	r2, [r7, #20]
 801177a:	68ba      	ldr	r2, [r7, #8]
 801177c:	b2d2      	uxtb	r2, r2
 801177e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	3b01      	subs	r3, #1
 8011784:	607b      	str	r3, [r7, #4]
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d1f3      	bne.n	8011774 <mem_set+0x10>
}
 801178c:	bf00      	nop
 801178e:	bf00      	nop
 8011790:	371c      	adds	r7, #28
 8011792:	46bd      	mov	sp, r7
 8011794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011798:	4770      	bx	lr

0801179a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801179a:	b480      	push	{r7}
 801179c:	b089      	sub	sp, #36	@ 0x24
 801179e:	af00      	add	r7, sp, #0
 80117a0:	60f8      	str	r0, [r7, #12]
 80117a2:	60b9      	str	r1, [r7, #8]
 80117a4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	61fb      	str	r3, [r7, #28]
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80117ae:	2300      	movs	r3, #0
 80117b0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80117b2:	69fb      	ldr	r3, [r7, #28]
 80117b4:	1c5a      	adds	r2, r3, #1
 80117b6:	61fa      	str	r2, [r7, #28]
 80117b8:	781b      	ldrb	r3, [r3, #0]
 80117ba:	4619      	mov	r1, r3
 80117bc:	69bb      	ldr	r3, [r7, #24]
 80117be:	1c5a      	adds	r2, r3, #1
 80117c0:	61ba      	str	r2, [r7, #24]
 80117c2:	781b      	ldrb	r3, [r3, #0]
 80117c4:	1acb      	subs	r3, r1, r3
 80117c6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	3b01      	subs	r3, #1
 80117cc:	607b      	str	r3, [r7, #4]
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d002      	beq.n	80117da <mem_cmp+0x40>
 80117d4:	697b      	ldr	r3, [r7, #20]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d0eb      	beq.n	80117b2 <mem_cmp+0x18>

	return r;
 80117da:	697b      	ldr	r3, [r7, #20]
}
 80117dc:	4618      	mov	r0, r3
 80117de:	3724      	adds	r7, #36	@ 0x24
 80117e0:	46bd      	mov	sp, r7
 80117e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e6:	4770      	bx	lr

080117e8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80117e8:	b480      	push	{r7}
 80117ea:	b083      	sub	sp, #12
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
 80117f0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80117f2:	e002      	b.n	80117fa <chk_chr+0x12>
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	3301      	adds	r3, #1
 80117f8:	607b      	str	r3, [r7, #4]
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	781b      	ldrb	r3, [r3, #0]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d005      	beq.n	801180e <chk_chr+0x26>
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	781b      	ldrb	r3, [r3, #0]
 8011806:	461a      	mov	r2, r3
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	4293      	cmp	r3, r2
 801180c:	d1f2      	bne.n	80117f4 <chk_chr+0xc>
	return *str;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	781b      	ldrb	r3, [r3, #0]
}
 8011812:	4618      	mov	r0, r3
 8011814:	370c      	adds	r7, #12
 8011816:	46bd      	mov	sp, r7
 8011818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181c:	4770      	bx	lr
	...

08011820 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011820:	b480      	push	{r7}
 8011822:	b085      	sub	sp, #20
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
 8011828:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801182a:	2300      	movs	r3, #0
 801182c:	60bb      	str	r3, [r7, #8]
 801182e:	68bb      	ldr	r3, [r7, #8]
 8011830:	60fb      	str	r3, [r7, #12]
 8011832:	e029      	b.n	8011888 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011834:	4a27      	ldr	r2, [pc, #156]	@ (80118d4 <chk_lock+0xb4>)
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	011b      	lsls	r3, r3, #4
 801183a:	4413      	add	r3, r2
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d01d      	beq.n	801187e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011842:	4a24      	ldr	r2, [pc, #144]	@ (80118d4 <chk_lock+0xb4>)
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	011b      	lsls	r3, r3, #4
 8011848:	4413      	add	r3, r2
 801184a:	681a      	ldr	r2, [r3, #0]
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	429a      	cmp	r2, r3
 8011852:	d116      	bne.n	8011882 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011854:	4a1f      	ldr	r2, [pc, #124]	@ (80118d4 <chk_lock+0xb4>)
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	011b      	lsls	r3, r3, #4
 801185a:	4413      	add	r3, r2
 801185c:	3304      	adds	r3, #4
 801185e:	681a      	ldr	r2, [r3, #0]
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011864:	429a      	cmp	r2, r3
 8011866:	d10c      	bne.n	8011882 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011868:	4a1a      	ldr	r2, [pc, #104]	@ (80118d4 <chk_lock+0xb4>)
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	011b      	lsls	r3, r3, #4
 801186e:	4413      	add	r3, r2
 8011870:	3308      	adds	r3, #8
 8011872:	681a      	ldr	r2, [r3, #0]
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011878:	429a      	cmp	r2, r3
 801187a:	d102      	bne.n	8011882 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801187c:	e007      	b.n	801188e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801187e:	2301      	movs	r3, #1
 8011880:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	3301      	adds	r3, #1
 8011886:	60fb      	str	r3, [r7, #12]
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	2b01      	cmp	r3, #1
 801188c:	d9d2      	bls.n	8011834 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	2b02      	cmp	r3, #2
 8011892:	d109      	bne.n	80118a8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011894:	68bb      	ldr	r3, [r7, #8]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d102      	bne.n	80118a0 <chk_lock+0x80>
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	2b02      	cmp	r3, #2
 801189e:	d101      	bne.n	80118a4 <chk_lock+0x84>
 80118a0:	2300      	movs	r3, #0
 80118a2:	e010      	b.n	80118c6 <chk_lock+0xa6>
 80118a4:	2312      	movs	r3, #18
 80118a6:	e00e      	b.n	80118c6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d108      	bne.n	80118c0 <chk_lock+0xa0>
 80118ae:	4a09      	ldr	r2, [pc, #36]	@ (80118d4 <chk_lock+0xb4>)
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	011b      	lsls	r3, r3, #4
 80118b4:	4413      	add	r3, r2
 80118b6:	330c      	adds	r3, #12
 80118b8:	881b      	ldrh	r3, [r3, #0]
 80118ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80118be:	d101      	bne.n	80118c4 <chk_lock+0xa4>
 80118c0:	2310      	movs	r3, #16
 80118c2:	e000      	b.n	80118c6 <chk_lock+0xa6>
 80118c4:	2300      	movs	r3, #0
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	3714      	adds	r7, #20
 80118ca:	46bd      	mov	sp, r7
 80118cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d0:	4770      	bx	lr
 80118d2:	bf00      	nop
 80118d4:	200019ec 	.word	0x200019ec

080118d8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80118d8:	b480      	push	{r7}
 80118da:	b083      	sub	sp, #12
 80118dc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80118de:	2300      	movs	r3, #0
 80118e0:	607b      	str	r3, [r7, #4]
 80118e2:	e002      	b.n	80118ea <enq_lock+0x12>
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	3301      	adds	r3, #1
 80118e8:	607b      	str	r3, [r7, #4]
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2b01      	cmp	r3, #1
 80118ee:	d806      	bhi.n	80118fe <enq_lock+0x26>
 80118f0:	4a09      	ldr	r2, [pc, #36]	@ (8011918 <enq_lock+0x40>)
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	011b      	lsls	r3, r3, #4
 80118f6:	4413      	add	r3, r2
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d1f2      	bne.n	80118e4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2b02      	cmp	r3, #2
 8011902:	bf14      	ite	ne
 8011904:	2301      	movne	r3, #1
 8011906:	2300      	moveq	r3, #0
 8011908:	b2db      	uxtb	r3, r3
}
 801190a:	4618      	mov	r0, r3
 801190c:	370c      	adds	r7, #12
 801190e:	46bd      	mov	sp, r7
 8011910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011914:	4770      	bx	lr
 8011916:	bf00      	nop
 8011918:	200019ec 	.word	0x200019ec

0801191c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801191c:	b480      	push	{r7}
 801191e:	b085      	sub	sp, #20
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
 8011924:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011926:	2300      	movs	r3, #0
 8011928:	60fb      	str	r3, [r7, #12]
 801192a:	e01f      	b.n	801196c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801192c:	4a41      	ldr	r2, [pc, #260]	@ (8011a34 <inc_lock+0x118>)
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	011b      	lsls	r3, r3, #4
 8011932:	4413      	add	r3, r2
 8011934:	681a      	ldr	r2, [r3, #0]
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	429a      	cmp	r2, r3
 801193c:	d113      	bne.n	8011966 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801193e:	4a3d      	ldr	r2, [pc, #244]	@ (8011a34 <inc_lock+0x118>)
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	011b      	lsls	r3, r3, #4
 8011944:	4413      	add	r3, r2
 8011946:	3304      	adds	r3, #4
 8011948:	681a      	ldr	r2, [r3, #0]
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801194e:	429a      	cmp	r2, r3
 8011950:	d109      	bne.n	8011966 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011952:	4a38      	ldr	r2, [pc, #224]	@ (8011a34 <inc_lock+0x118>)
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	011b      	lsls	r3, r3, #4
 8011958:	4413      	add	r3, r2
 801195a:	3308      	adds	r3, #8
 801195c:	681a      	ldr	r2, [r3, #0]
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011962:	429a      	cmp	r2, r3
 8011964:	d006      	beq.n	8011974 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	3301      	adds	r3, #1
 801196a:	60fb      	str	r3, [r7, #12]
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	2b01      	cmp	r3, #1
 8011970:	d9dc      	bls.n	801192c <inc_lock+0x10>
 8011972:	e000      	b.n	8011976 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011974:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	2b02      	cmp	r3, #2
 801197a:	d132      	bne.n	80119e2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801197c:	2300      	movs	r3, #0
 801197e:	60fb      	str	r3, [r7, #12]
 8011980:	e002      	b.n	8011988 <inc_lock+0x6c>
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	3301      	adds	r3, #1
 8011986:	60fb      	str	r3, [r7, #12]
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	2b01      	cmp	r3, #1
 801198c:	d806      	bhi.n	801199c <inc_lock+0x80>
 801198e:	4a29      	ldr	r2, [pc, #164]	@ (8011a34 <inc_lock+0x118>)
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	011b      	lsls	r3, r3, #4
 8011994:	4413      	add	r3, r2
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d1f2      	bne.n	8011982 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	2b02      	cmp	r3, #2
 80119a0:	d101      	bne.n	80119a6 <inc_lock+0x8a>
 80119a2:	2300      	movs	r3, #0
 80119a4:	e040      	b.n	8011a28 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681a      	ldr	r2, [r3, #0]
 80119aa:	4922      	ldr	r1, [pc, #136]	@ (8011a34 <inc_lock+0x118>)
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	011b      	lsls	r3, r3, #4
 80119b0:	440b      	add	r3, r1
 80119b2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	689a      	ldr	r2, [r3, #8]
 80119b8:	491e      	ldr	r1, [pc, #120]	@ (8011a34 <inc_lock+0x118>)
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	011b      	lsls	r3, r3, #4
 80119be:	440b      	add	r3, r1
 80119c0:	3304      	adds	r3, #4
 80119c2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	695a      	ldr	r2, [r3, #20]
 80119c8:	491a      	ldr	r1, [pc, #104]	@ (8011a34 <inc_lock+0x118>)
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	011b      	lsls	r3, r3, #4
 80119ce:	440b      	add	r3, r1
 80119d0:	3308      	adds	r3, #8
 80119d2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80119d4:	4a17      	ldr	r2, [pc, #92]	@ (8011a34 <inc_lock+0x118>)
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	011b      	lsls	r3, r3, #4
 80119da:	4413      	add	r3, r2
 80119dc:	330c      	adds	r3, #12
 80119de:	2200      	movs	r2, #0
 80119e0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80119e2:	683b      	ldr	r3, [r7, #0]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d009      	beq.n	80119fc <inc_lock+0xe0>
 80119e8:	4a12      	ldr	r2, [pc, #72]	@ (8011a34 <inc_lock+0x118>)
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	011b      	lsls	r3, r3, #4
 80119ee:	4413      	add	r3, r2
 80119f0:	330c      	adds	r3, #12
 80119f2:	881b      	ldrh	r3, [r3, #0]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d001      	beq.n	80119fc <inc_lock+0xe0>
 80119f8:	2300      	movs	r3, #0
 80119fa:	e015      	b.n	8011a28 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80119fc:	683b      	ldr	r3, [r7, #0]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d108      	bne.n	8011a14 <inc_lock+0xf8>
 8011a02:	4a0c      	ldr	r2, [pc, #48]	@ (8011a34 <inc_lock+0x118>)
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	011b      	lsls	r3, r3, #4
 8011a08:	4413      	add	r3, r2
 8011a0a:	330c      	adds	r3, #12
 8011a0c:	881b      	ldrh	r3, [r3, #0]
 8011a0e:	3301      	adds	r3, #1
 8011a10:	b29a      	uxth	r2, r3
 8011a12:	e001      	b.n	8011a18 <inc_lock+0xfc>
 8011a14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011a18:	4906      	ldr	r1, [pc, #24]	@ (8011a34 <inc_lock+0x118>)
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	011b      	lsls	r3, r3, #4
 8011a1e:	440b      	add	r3, r1
 8011a20:	330c      	adds	r3, #12
 8011a22:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	3301      	adds	r3, #1
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3714      	adds	r7, #20
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a32:	4770      	bx	lr
 8011a34:	200019ec 	.word	0x200019ec

08011a38 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011a38:	b480      	push	{r7}
 8011a3a:	b085      	sub	sp, #20
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	3b01      	subs	r3, #1
 8011a44:	607b      	str	r3, [r7, #4]
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2b01      	cmp	r3, #1
 8011a4a:	d825      	bhi.n	8011a98 <dec_lock+0x60>
		n = Files[i].ctr;
 8011a4c:	4a17      	ldr	r2, [pc, #92]	@ (8011aac <dec_lock+0x74>)
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	011b      	lsls	r3, r3, #4
 8011a52:	4413      	add	r3, r2
 8011a54:	330c      	adds	r3, #12
 8011a56:	881b      	ldrh	r3, [r3, #0]
 8011a58:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011a5a:	89fb      	ldrh	r3, [r7, #14]
 8011a5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011a60:	d101      	bne.n	8011a66 <dec_lock+0x2e>
 8011a62:	2300      	movs	r3, #0
 8011a64:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011a66:	89fb      	ldrh	r3, [r7, #14]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d002      	beq.n	8011a72 <dec_lock+0x3a>
 8011a6c:	89fb      	ldrh	r3, [r7, #14]
 8011a6e:	3b01      	subs	r3, #1
 8011a70:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011a72:	4a0e      	ldr	r2, [pc, #56]	@ (8011aac <dec_lock+0x74>)
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	011b      	lsls	r3, r3, #4
 8011a78:	4413      	add	r3, r2
 8011a7a:	330c      	adds	r3, #12
 8011a7c:	89fa      	ldrh	r2, [r7, #14]
 8011a7e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011a80:	89fb      	ldrh	r3, [r7, #14]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d105      	bne.n	8011a92 <dec_lock+0x5a>
 8011a86:	4a09      	ldr	r2, [pc, #36]	@ (8011aac <dec_lock+0x74>)
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	011b      	lsls	r3, r3, #4
 8011a8c:	4413      	add	r3, r2
 8011a8e:	2200      	movs	r2, #0
 8011a90:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011a92:	2300      	movs	r3, #0
 8011a94:	737b      	strb	r3, [r7, #13]
 8011a96:	e001      	b.n	8011a9c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011a98:	2302      	movs	r3, #2
 8011a9a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011a9c:	7b7b      	ldrb	r3, [r7, #13]
}
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3714      	adds	r7, #20
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa8:	4770      	bx	lr
 8011aaa:	bf00      	nop
 8011aac:	200019ec 	.word	0x200019ec

08011ab0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011ab0:	b480      	push	{r7}
 8011ab2:	b085      	sub	sp, #20
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011ab8:	2300      	movs	r3, #0
 8011aba:	60fb      	str	r3, [r7, #12]
 8011abc:	e010      	b.n	8011ae0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011abe:	4a0d      	ldr	r2, [pc, #52]	@ (8011af4 <clear_lock+0x44>)
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	011b      	lsls	r3, r3, #4
 8011ac4:	4413      	add	r3, r2
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	687a      	ldr	r2, [r7, #4]
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d105      	bne.n	8011ada <clear_lock+0x2a>
 8011ace:	4a09      	ldr	r2, [pc, #36]	@ (8011af4 <clear_lock+0x44>)
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	011b      	lsls	r3, r3, #4
 8011ad4:	4413      	add	r3, r2
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	3301      	adds	r3, #1
 8011ade:	60fb      	str	r3, [r7, #12]
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	2b01      	cmp	r3, #1
 8011ae4:	d9eb      	bls.n	8011abe <clear_lock+0xe>
	}
}
 8011ae6:	bf00      	nop
 8011ae8:	bf00      	nop
 8011aea:	3714      	adds	r7, #20
 8011aec:	46bd      	mov	sp, r7
 8011aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af2:	4770      	bx	lr
 8011af4:	200019ec 	.word	0x200019ec

08011af8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b086      	sub	sp, #24
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011b00:	2300      	movs	r3, #0
 8011b02:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	78db      	ldrb	r3, [r3, #3]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d034      	beq.n	8011b76 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	7858      	ldrb	r0, [r3, #1]
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	697a      	ldr	r2, [r7, #20]
 8011b20:	f7ff fd3e 	bl	80115a0 <disk_write>
 8011b24:	4603      	mov	r3, r0
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d002      	beq.n	8011b30 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011b2a:	2301      	movs	r3, #1
 8011b2c:	73fb      	strb	r3, [r7, #15]
 8011b2e:	e022      	b.n	8011b76 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2200      	movs	r2, #0
 8011b34:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	6a1b      	ldr	r3, [r3, #32]
 8011b3a:	697a      	ldr	r2, [r7, #20]
 8011b3c:	1ad2      	subs	r2, r2, r3
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	699b      	ldr	r3, [r3, #24]
 8011b42:	429a      	cmp	r2, r3
 8011b44:	d217      	bcs.n	8011b76 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	789b      	ldrb	r3, [r3, #2]
 8011b4a:	613b      	str	r3, [r7, #16]
 8011b4c:	e010      	b.n	8011b70 <sync_window+0x78>
					wsect += fs->fsize;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	699b      	ldr	r3, [r3, #24]
 8011b52:	697a      	ldr	r2, [r7, #20]
 8011b54:	4413      	add	r3, r2
 8011b56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	7858      	ldrb	r0, [r3, #1]
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011b62:	2301      	movs	r3, #1
 8011b64:	697a      	ldr	r2, [r7, #20]
 8011b66:	f7ff fd1b 	bl	80115a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011b6a:	693b      	ldr	r3, [r7, #16]
 8011b6c:	3b01      	subs	r3, #1
 8011b6e:	613b      	str	r3, [r7, #16]
 8011b70:	693b      	ldr	r3, [r7, #16]
 8011b72:	2b01      	cmp	r3, #1
 8011b74:	d8eb      	bhi.n	8011b4e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b78:	4618      	mov	r0, r3
 8011b7a:	3718      	adds	r7, #24
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd80      	pop	{r7, pc}

08011b80 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b084      	sub	sp, #16
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
 8011b88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b92:	683a      	ldr	r2, [r7, #0]
 8011b94:	429a      	cmp	r2, r3
 8011b96:	d01b      	beq.n	8011bd0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011b98:	6878      	ldr	r0, [r7, #4]
 8011b9a:	f7ff ffad 	bl	8011af8 <sync_window>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011ba2:	7bfb      	ldrb	r3, [r7, #15]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d113      	bne.n	8011bd0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	7858      	ldrb	r0, [r3, #1]
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011bb2:	2301      	movs	r3, #1
 8011bb4:	683a      	ldr	r2, [r7, #0]
 8011bb6:	f7ff fcd3 	bl	8011560 <disk_read>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d004      	beq.n	8011bca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8011bc4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011bc6:	2301      	movs	r3, #1
 8011bc8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	683a      	ldr	r2, [r7, #0]
 8011bce:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8011bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	3710      	adds	r7, #16
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}
	...

08011bdc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b084      	sub	sp, #16
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011be4:	6878      	ldr	r0, [r7, #4]
 8011be6:	f7ff ff87 	bl	8011af8 <sync_window>
 8011bea:	4603      	mov	r3, r0
 8011bec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011bee:	7bfb      	ldrb	r3, [r7, #15]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d158      	bne.n	8011ca6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	781b      	ldrb	r3, [r3, #0]
 8011bf8:	2b03      	cmp	r3, #3
 8011bfa:	d148      	bne.n	8011c8e <sync_fs+0xb2>
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	791b      	ldrb	r3, [r3, #4]
 8011c00:	2b01      	cmp	r3, #1
 8011c02:	d144      	bne.n	8011c8e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	3330      	adds	r3, #48	@ 0x30
 8011c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011c0c:	2100      	movs	r1, #0
 8011c0e:	4618      	mov	r0, r3
 8011c10:	f7ff fda8 	bl	8011764 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	3330      	adds	r3, #48	@ 0x30
 8011c18:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011c1c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8011c20:	4618      	mov	r0, r3
 8011c22:	f7ff fd37 	bl	8011694 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	3330      	adds	r3, #48	@ 0x30
 8011c2a:	4921      	ldr	r1, [pc, #132]	@ (8011cb0 <sync_fs+0xd4>)
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f7ff fd4c 	bl	80116ca <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	3330      	adds	r3, #48	@ 0x30
 8011c36:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011c3a:	491e      	ldr	r1, [pc, #120]	@ (8011cb4 <sync_fs+0xd8>)
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7ff fd44 	bl	80116ca <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	3330      	adds	r3, #48	@ 0x30
 8011c46:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	691b      	ldr	r3, [r3, #16]
 8011c4e:	4619      	mov	r1, r3
 8011c50:	4610      	mov	r0, r2
 8011c52:	f7ff fd3a 	bl	80116ca <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	3330      	adds	r3, #48	@ 0x30
 8011c5a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	68db      	ldr	r3, [r3, #12]
 8011c62:	4619      	mov	r1, r3
 8011c64:	4610      	mov	r0, r2
 8011c66:	f7ff fd30 	bl	80116ca <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	69db      	ldr	r3, [r3, #28]
 8011c6e:	1c5a      	adds	r2, r3, #1
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	7858      	ldrb	r0, [r3, #1]
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c82:	2301      	movs	r3, #1
 8011c84:	f7ff fc8c 	bl	80115a0 <disk_write>
			fs->fsi_flag = 0;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	785b      	ldrb	r3, [r3, #1]
 8011c92:	2200      	movs	r2, #0
 8011c94:	2100      	movs	r1, #0
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7ff fca2 	bl	80115e0 <disk_ioctl>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d001      	beq.n	8011ca6 <sync_fs+0xca>
 8011ca2:	2301      	movs	r3, #1
 8011ca4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ca8:	4618      	mov	r0, r3
 8011caa:	3710      	adds	r7, #16
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}
 8011cb0:	41615252 	.word	0x41615252
 8011cb4:	61417272 	.word	0x61417272

08011cb8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011cb8:	b480      	push	{r7}
 8011cba:	b083      	sub	sp, #12
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
 8011cc0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	3b02      	subs	r3, #2
 8011cc6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	695b      	ldr	r3, [r3, #20]
 8011ccc:	3b02      	subs	r3, #2
 8011cce:	683a      	ldr	r2, [r7, #0]
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	d301      	bcc.n	8011cd8 <clust2sect+0x20>
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	e008      	b.n	8011cea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	895b      	ldrh	r3, [r3, #10]
 8011cdc:	461a      	mov	r2, r3
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	fb03 f202 	mul.w	r2, r3, r2
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ce8:	4413      	add	r3, r2
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	370c      	adds	r7, #12
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf4:	4770      	bx	lr

08011cf6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011cf6:	b580      	push	{r7, lr}
 8011cf8:	b086      	sub	sp, #24
 8011cfa:	af00      	add	r7, sp, #0
 8011cfc:	6078      	str	r0, [r7, #4]
 8011cfe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	2b01      	cmp	r3, #1
 8011d0a:	d904      	bls.n	8011d16 <get_fat+0x20>
 8011d0c:	693b      	ldr	r3, [r7, #16]
 8011d0e:	695b      	ldr	r3, [r3, #20]
 8011d10:	683a      	ldr	r2, [r7, #0]
 8011d12:	429a      	cmp	r2, r3
 8011d14:	d302      	bcc.n	8011d1c <get_fat+0x26>
		val = 1;	/* Internal error */
 8011d16:	2301      	movs	r3, #1
 8011d18:	617b      	str	r3, [r7, #20]
 8011d1a:	e08e      	b.n	8011e3a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8011d20:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011d22:	693b      	ldr	r3, [r7, #16]
 8011d24:	781b      	ldrb	r3, [r3, #0]
 8011d26:	2b03      	cmp	r3, #3
 8011d28:	d061      	beq.n	8011dee <get_fat+0xf8>
 8011d2a:	2b03      	cmp	r3, #3
 8011d2c:	dc7b      	bgt.n	8011e26 <get_fat+0x130>
 8011d2e:	2b01      	cmp	r3, #1
 8011d30:	d002      	beq.n	8011d38 <get_fat+0x42>
 8011d32:	2b02      	cmp	r3, #2
 8011d34:	d041      	beq.n	8011dba <get_fat+0xc4>
 8011d36:	e076      	b.n	8011e26 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	60fb      	str	r3, [r7, #12]
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	085b      	lsrs	r3, r3, #1
 8011d40:	68fa      	ldr	r2, [r7, #12]
 8011d42:	4413      	add	r3, r2
 8011d44:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	6a1a      	ldr	r2, [r3, #32]
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	0a5b      	lsrs	r3, r3, #9
 8011d4e:	4413      	add	r3, r2
 8011d50:	4619      	mov	r1, r3
 8011d52:	6938      	ldr	r0, [r7, #16]
 8011d54:	f7ff ff14 	bl	8011b80 <move_window>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d166      	bne.n	8011e2c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	1c5a      	adds	r2, r3, #1
 8011d62:	60fa      	str	r2, [r7, #12]
 8011d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011d68:	693a      	ldr	r2, [r7, #16]
 8011d6a:	4413      	add	r3, r2
 8011d6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011d70:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d72:	693b      	ldr	r3, [r7, #16]
 8011d74:	6a1a      	ldr	r2, [r3, #32]
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	0a5b      	lsrs	r3, r3, #9
 8011d7a:	4413      	add	r3, r2
 8011d7c:	4619      	mov	r1, r3
 8011d7e:	6938      	ldr	r0, [r7, #16]
 8011d80:	f7ff fefe 	bl	8011b80 <move_window>
 8011d84:	4603      	mov	r3, r0
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d152      	bne.n	8011e30 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011d90:	693a      	ldr	r2, [r7, #16]
 8011d92:	4413      	add	r3, r2
 8011d94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011d98:	021b      	lsls	r3, r3, #8
 8011d9a:	68ba      	ldr	r2, [r7, #8]
 8011d9c:	4313      	orrs	r3, r2
 8011d9e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	f003 0301 	and.w	r3, r3, #1
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d002      	beq.n	8011db0 <get_fat+0xba>
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	091b      	lsrs	r3, r3, #4
 8011dae:	e002      	b.n	8011db6 <get_fat+0xc0>
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011db6:	617b      	str	r3, [r7, #20]
			break;
 8011db8:	e03f      	b.n	8011e3a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011dba:	693b      	ldr	r3, [r7, #16]
 8011dbc:	6a1a      	ldr	r2, [r3, #32]
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	0a1b      	lsrs	r3, r3, #8
 8011dc2:	4413      	add	r3, r2
 8011dc4:	4619      	mov	r1, r3
 8011dc6:	6938      	ldr	r0, [r7, #16]
 8011dc8:	f7ff feda 	bl	8011b80 <move_window>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d130      	bne.n	8011e34 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011dd2:	693b      	ldr	r3, [r7, #16]
 8011dd4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	005b      	lsls	r3, r3, #1
 8011ddc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011de0:	4413      	add	r3, r2
 8011de2:	4618      	mov	r0, r3
 8011de4:	f7ff fc1a 	bl	801161c <ld_word>
 8011de8:	4603      	mov	r3, r0
 8011dea:	617b      	str	r3, [r7, #20]
			break;
 8011dec:	e025      	b.n	8011e3a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011dee:	693b      	ldr	r3, [r7, #16]
 8011df0:	6a1a      	ldr	r2, [r3, #32]
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	09db      	lsrs	r3, r3, #7
 8011df6:	4413      	add	r3, r2
 8011df8:	4619      	mov	r1, r3
 8011dfa:	6938      	ldr	r0, [r7, #16]
 8011dfc:	f7ff fec0 	bl	8011b80 <move_window>
 8011e00:	4603      	mov	r3, r0
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d118      	bne.n	8011e38 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011e06:	693b      	ldr	r3, [r7, #16]
 8011e08:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	009b      	lsls	r3, r3, #2
 8011e10:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011e14:	4413      	add	r3, r2
 8011e16:	4618      	mov	r0, r3
 8011e18:	f7ff fc19 	bl	801164e <ld_dword>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8011e22:	617b      	str	r3, [r7, #20]
			break;
 8011e24:	e009      	b.n	8011e3a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011e26:	2301      	movs	r3, #1
 8011e28:	617b      	str	r3, [r7, #20]
 8011e2a:	e006      	b.n	8011e3a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e2c:	bf00      	nop
 8011e2e:	e004      	b.n	8011e3a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e30:	bf00      	nop
 8011e32:	e002      	b.n	8011e3a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011e34:	bf00      	nop
 8011e36:	e000      	b.n	8011e3a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011e38:	bf00      	nop
		}
	}

	return val;
 8011e3a:	697b      	ldr	r3, [r7, #20]
}
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	3718      	adds	r7, #24
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}

08011e44 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011e44:	b590      	push	{r4, r7, lr}
 8011e46:	b089      	sub	sp, #36	@ 0x24
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	60f8      	str	r0, [r7, #12]
 8011e4c:	60b9      	str	r1, [r7, #8]
 8011e4e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011e50:	2302      	movs	r3, #2
 8011e52:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011e54:	68bb      	ldr	r3, [r7, #8]
 8011e56:	2b01      	cmp	r3, #1
 8011e58:	f240 80d9 	bls.w	801200e <put_fat+0x1ca>
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	695b      	ldr	r3, [r3, #20]
 8011e60:	68ba      	ldr	r2, [r7, #8]
 8011e62:	429a      	cmp	r2, r3
 8011e64:	f080 80d3 	bcs.w	801200e <put_fat+0x1ca>
		switch (fs->fs_type) {
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	2b03      	cmp	r3, #3
 8011e6e:	f000 8096 	beq.w	8011f9e <put_fat+0x15a>
 8011e72:	2b03      	cmp	r3, #3
 8011e74:	f300 80cb 	bgt.w	801200e <put_fat+0x1ca>
 8011e78:	2b01      	cmp	r3, #1
 8011e7a:	d002      	beq.n	8011e82 <put_fat+0x3e>
 8011e7c:	2b02      	cmp	r3, #2
 8011e7e:	d06e      	beq.n	8011f5e <put_fat+0x11a>
 8011e80:	e0c5      	b.n	801200e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	61bb      	str	r3, [r7, #24]
 8011e86:	69bb      	ldr	r3, [r7, #24]
 8011e88:	085b      	lsrs	r3, r3, #1
 8011e8a:	69ba      	ldr	r2, [r7, #24]
 8011e8c:	4413      	add	r3, r2
 8011e8e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	6a1a      	ldr	r2, [r3, #32]
 8011e94:	69bb      	ldr	r3, [r7, #24]
 8011e96:	0a5b      	lsrs	r3, r3, #9
 8011e98:	4413      	add	r3, r2
 8011e9a:	4619      	mov	r1, r3
 8011e9c:	68f8      	ldr	r0, [r7, #12]
 8011e9e:	f7ff fe6f 	bl	8011b80 <move_window>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011ea6:	7ffb      	ldrb	r3, [r7, #31]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	f040 80a9 	bne.w	8012000 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011eb4:	69bb      	ldr	r3, [r7, #24]
 8011eb6:	1c59      	adds	r1, r3, #1
 8011eb8:	61b9      	str	r1, [r7, #24]
 8011eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ebe:	4413      	add	r3, r2
 8011ec0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011ec2:	68bb      	ldr	r3, [r7, #8]
 8011ec4:	f003 0301 	and.w	r3, r3, #1
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d00d      	beq.n	8011ee8 <put_fat+0xa4>
 8011ecc:	697b      	ldr	r3, [r7, #20]
 8011ece:	781b      	ldrb	r3, [r3, #0]
 8011ed0:	b25b      	sxtb	r3, r3
 8011ed2:	f003 030f 	and.w	r3, r3, #15
 8011ed6:	b25a      	sxtb	r2, r3
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	b25b      	sxtb	r3, r3
 8011edc:	011b      	lsls	r3, r3, #4
 8011ede:	b25b      	sxtb	r3, r3
 8011ee0:	4313      	orrs	r3, r2
 8011ee2:	b25b      	sxtb	r3, r3
 8011ee4:	b2db      	uxtb	r3, r3
 8011ee6:	e001      	b.n	8011eec <put_fat+0xa8>
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	b2db      	uxtb	r3, r3
 8011eec:	697a      	ldr	r2, [r7, #20]
 8011eee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	2201      	movs	r2, #1
 8011ef4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	6a1a      	ldr	r2, [r3, #32]
 8011efa:	69bb      	ldr	r3, [r7, #24]
 8011efc:	0a5b      	lsrs	r3, r3, #9
 8011efe:	4413      	add	r3, r2
 8011f00:	4619      	mov	r1, r3
 8011f02:	68f8      	ldr	r0, [r7, #12]
 8011f04:	f7ff fe3c 	bl	8011b80 <move_window>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011f0c:	7ffb      	ldrb	r3, [r7, #31]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d178      	bne.n	8012004 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011f18:	69bb      	ldr	r3, [r7, #24]
 8011f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f1e:	4413      	add	r3, r2
 8011f20:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011f22:	68bb      	ldr	r3, [r7, #8]
 8011f24:	f003 0301 	and.w	r3, r3, #1
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d003      	beq.n	8011f34 <put_fat+0xf0>
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	091b      	lsrs	r3, r3, #4
 8011f30:	b2db      	uxtb	r3, r3
 8011f32:	e00e      	b.n	8011f52 <put_fat+0x10e>
 8011f34:	697b      	ldr	r3, [r7, #20]
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	b25b      	sxtb	r3, r3
 8011f3a:	f023 030f 	bic.w	r3, r3, #15
 8011f3e:	b25a      	sxtb	r2, r3
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	0a1b      	lsrs	r3, r3, #8
 8011f44:	b25b      	sxtb	r3, r3
 8011f46:	f003 030f 	and.w	r3, r3, #15
 8011f4a:	b25b      	sxtb	r3, r3
 8011f4c:	4313      	orrs	r3, r2
 8011f4e:	b25b      	sxtb	r3, r3
 8011f50:	b2db      	uxtb	r3, r3
 8011f52:	697a      	ldr	r2, [r7, #20]
 8011f54:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	2201      	movs	r2, #1
 8011f5a:	70da      	strb	r2, [r3, #3]
			break;
 8011f5c:	e057      	b.n	801200e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	6a1a      	ldr	r2, [r3, #32]
 8011f62:	68bb      	ldr	r3, [r7, #8]
 8011f64:	0a1b      	lsrs	r3, r3, #8
 8011f66:	4413      	add	r3, r2
 8011f68:	4619      	mov	r1, r3
 8011f6a:	68f8      	ldr	r0, [r7, #12]
 8011f6c:	f7ff fe08 	bl	8011b80 <move_window>
 8011f70:	4603      	mov	r3, r0
 8011f72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011f74:	7ffb      	ldrb	r3, [r7, #31]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d146      	bne.n	8012008 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	005b      	lsls	r3, r3, #1
 8011f84:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011f88:	4413      	add	r3, r2
 8011f8a:	687a      	ldr	r2, [r7, #4]
 8011f8c:	b292      	uxth	r2, r2
 8011f8e:	4611      	mov	r1, r2
 8011f90:	4618      	mov	r0, r3
 8011f92:	f7ff fb7f 	bl	8011694 <st_word>
			fs->wflag = 1;
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	2201      	movs	r2, #1
 8011f9a:	70da      	strb	r2, [r3, #3]
			break;
 8011f9c:	e037      	b.n	801200e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	6a1a      	ldr	r2, [r3, #32]
 8011fa2:	68bb      	ldr	r3, [r7, #8]
 8011fa4:	09db      	lsrs	r3, r3, #7
 8011fa6:	4413      	add	r3, r2
 8011fa8:	4619      	mov	r1, r3
 8011faa:	68f8      	ldr	r0, [r7, #12]
 8011fac:	f7ff fde8 	bl	8011b80 <move_window>
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011fb4:	7ffb      	ldrb	r3, [r7, #31]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d128      	bne.n	801200c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	009b      	lsls	r3, r3, #2
 8011fca:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011fce:	4413      	add	r3, r2
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f7ff fb3c 	bl	801164e <ld_dword>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8011fdc:	4323      	orrs	r3, r4
 8011fde:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	009b      	lsls	r3, r3, #2
 8011fea:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011fee:	4413      	add	r3, r2
 8011ff0:	6879      	ldr	r1, [r7, #4]
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f7ff fb69 	bl	80116ca <st_dword>
			fs->wflag = 1;
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	2201      	movs	r2, #1
 8011ffc:	70da      	strb	r2, [r3, #3]
			break;
 8011ffe:	e006      	b.n	801200e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012000:	bf00      	nop
 8012002:	e004      	b.n	801200e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012004:	bf00      	nop
 8012006:	e002      	b.n	801200e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012008:	bf00      	nop
 801200a:	e000      	b.n	801200e <put_fat+0x1ca>
			if (res != FR_OK) break;
 801200c:	bf00      	nop
		}
	}
	return res;
 801200e:	7ffb      	ldrb	r3, [r7, #31]
}
 8012010:	4618      	mov	r0, r3
 8012012:	3724      	adds	r7, #36	@ 0x24
 8012014:	46bd      	mov	sp, r7
 8012016:	bd90      	pop	{r4, r7, pc}

08012018 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b088      	sub	sp, #32
 801201c:	af00      	add	r7, sp, #0
 801201e:	60f8      	str	r0, [r7, #12]
 8012020:	60b9      	str	r1, [r7, #8]
 8012022:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012024:	2300      	movs	r3, #0
 8012026:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801202e:	68bb      	ldr	r3, [r7, #8]
 8012030:	2b01      	cmp	r3, #1
 8012032:	d904      	bls.n	801203e <remove_chain+0x26>
 8012034:	69bb      	ldr	r3, [r7, #24]
 8012036:	695b      	ldr	r3, [r3, #20]
 8012038:	68ba      	ldr	r2, [r7, #8]
 801203a:	429a      	cmp	r2, r3
 801203c:	d301      	bcc.n	8012042 <remove_chain+0x2a>
 801203e:	2302      	movs	r3, #2
 8012040:	e04b      	b.n	80120da <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d00c      	beq.n	8012062 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012048:	f04f 32ff 	mov.w	r2, #4294967295
 801204c:	6879      	ldr	r1, [r7, #4]
 801204e:	69b8      	ldr	r0, [r7, #24]
 8012050:	f7ff fef8 	bl	8011e44 <put_fat>
 8012054:	4603      	mov	r3, r0
 8012056:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012058:	7ffb      	ldrb	r3, [r7, #31]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d001      	beq.n	8012062 <remove_chain+0x4a>
 801205e:	7ffb      	ldrb	r3, [r7, #31]
 8012060:	e03b      	b.n	80120da <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012062:	68b9      	ldr	r1, [r7, #8]
 8012064:	68f8      	ldr	r0, [r7, #12]
 8012066:	f7ff fe46 	bl	8011cf6 <get_fat>
 801206a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d031      	beq.n	80120d6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012072:	697b      	ldr	r3, [r7, #20]
 8012074:	2b01      	cmp	r3, #1
 8012076:	d101      	bne.n	801207c <remove_chain+0x64>
 8012078:	2302      	movs	r3, #2
 801207a:	e02e      	b.n	80120da <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801207c:	697b      	ldr	r3, [r7, #20]
 801207e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012082:	d101      	bne.n	8012088 <remove_chain+0x70>
 8012084:	2301      	movs	r3, #1
 8012086:	e028      	b.n	80120da <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012088:	2200      	movs	r2, #0
 801208a:	68b9      	ldr	r1, [r7, #8]
 801208c:	69b8      	ldr	r0, [r7, #24]
 801208e:	f7ff fed9 	bl	8011e44 <put_fat>
 8012092:	4603      	mov	r3, r0
 8012094:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012096:	7ffb      	ldrb	r3, [r7, #31]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d001      	beq.n	80120a0 <remove_chain+0x88>
 801209c:	7ffb      	ldrb	r3, [r7, #31]
 801209e:	e01c      	b.n	80120da <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80120a0:	69bb      	ldr	r3, [r7, #24]
 80120a2:	691a      	ldr	r2, [r3, #16]
 80120a4:	69bb      	ldr	r3, [r7, #24]
 80120a6:	695b      	ldr	r3, [r3, #20]
 80120a8:	3b02      	subs	r3, #2
 80120aa:	429a      	cmp	r2, r3
 80120ac:	d20b      	bcs.n	80120c6 <remove_chain+0xae>
			fs->free_clst++;
 80120ae:	69bb      	ldr	r3, [r7, #24]
 80120b0:	691b      	ldr	r3, [r3, #16]
 80120b2:	1c5a      	adds	r2, r3, #1
 80120b4:	69bb      	ldr	r3, [r7, #24]
 80120b6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80120b8:	69bb      	ldr	r3, [r7, #24]
 80120ba:	791b      	ldrb	r3, [r3, #4]
 80120bc:	f043 0301 	orr.w	r3, r3, #1
 80120c0:	b2da      	uxtb	r2, r3
 80120c2:	69bb      	ldr	r3, [r7, #24]
 80120c4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80120c6:	697b      	ldr	r3, [r7, #20]
 80120c8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80120ca:	69bb      	ldr	r3, [r7, #24]
 80120cc:	695b      	ldr	r3, [r3, #20]
 80120ce:	68ba      	ldr	r2, [r7, #8]
 80120d0:	429a      	cmp	r2, r3
 80120d2:	d3c6      	bcc.n	8012062 <remove_chain+0x4a>
 80120d4:	e000      	b.n	80120d8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80120d6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80120d8:	2300      	movs	r3, #0
}
 80120da:	4618      	mov	r0, r3
 80120dc:	3720      	adds	r7, #32
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}

080120e2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80120e2:	b580      	push	{r7, lr}
 80120e4:	b088      	sub	sp, #32
 80120e6:	af00      	add	r7, sp, #0
 80120e8:	6078      	str	r0, [r7, #4]
 80120ea:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d10d      	bne.n	8012114 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80120f8:	693b      	ldr	r3, [r7, #16]
 80120fa:	68db      	ldr	r3, [r3, #12]
 80120fc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80120fe:	69bb      	ldr	r3, [r7, #24]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d004      	beq.n	801210e <create_chain+0x2c>
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	695b      	ldr	r3, [r3, #20]
 8012108:	69ba      	ldr	r2, [r7, #24]
 801210a:	429a      	cmp	r2, r3
 801210c:	d31b      	bcc.n	8012146 <create_chain+0x64>
 801210e:	2301      	movs	r3, #1
 8012110:	61bb      	str	r3, [r7, #24]
 8012112:	e018      	b.n	8012146 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012114:	6839      	ldr	r1, [r7, #0]
 8012116:	6878      	ldr	r0, [r7, #4]
 8012118:	f7ff fded 	bl	8011cf6 <get_fat>
 801211c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	2b01      	cmp	r3, #1
 8012122:	d801      	bhi.n	8012128 <create_chain+0x46>
 8012124:	2301      	movs	r3, #1
 8012126:	e070      	b.n	801220a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801212e:	d101      	bne.n	8012134 <create_chain+0x52>
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	e06a      	b.n	801220a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012134:	693b      	ldr	r3, [r7, #16]
 8012136:	695b      	ldr	r3, [r3, #20]
 8012138:	68fa      	ldr	r2, [r7, #12]
 801213a:	429a      	cmp	r2, r3
 801213c:	d201      	bcs.n	8012142 <create_chain+0x60>
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	e063      	b.n	801220a <create_chain+0x128>
		scl = clst;
 8012142:	683b      	ldr	r3, [r7, #0]
 8012144:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012146:	69bb      	ldr	r3, [r7, #24]
 8012148:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801214a:	69fb      	ldr	r3, [r7, #28]
 801214c:	3301      	adds	r3, #1
 801214e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	695b      	ldr	r3, [r3, #20]
 8012154:	69fa      	ldr	r2, [r7, #28]
 8012156:	429a      	cmp	r2, r3
 8012158:	d307      	bcc.n	801216a <create_chain+0x88>
				ncl = 2;
 801215a:	2302      	movs	r3, #2
 801215c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801215e:	69fa      	ldr	r2, [r7, #28]
 8012160:	69bb      	ldr	r3, [r7, #24]
 8012162:	429a      	cmp	r2, r3
 8012164:	d901      	bls.n	801216a <create_chain+0x88>
 8012166:	2300      	movs	r3, #0
 8012168:	e04f      	b.n	801220a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801216a:	69f9      	ldr	r1, [r7, #28]
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f7ff fdc2 	bl	8011cf6 <get_fat>
 8012172:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d00e      	beq.n	8012198 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	2b01      	cmp	r3, #1
 801217e:	d003      	beq.n	8012188 <create_chain+0xa6>
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012186:	d101      	bne.n	801218c <create_chain+0xaa>
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	e03e      	b.n	801220a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801218c:	69fa      	ldr	r2, [r7, #28]
 801218e:	69bb      	ldr	r3, [r7, #24]
 8012190:	429a      	cmp	r2, r3
 8012192:	d1da      	bne.n	801214a <create_chain+0x68>
 8012194:	2300      	movs	r3, #0
 8012196:	e038      	b.n	801220a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012198:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801219a:	f04f 32ff 	mov.w	r2, #4294967295
 801219e:	69f9      	ldr	r1, [r7, #28]
 80121a0:	6938      	ldr	r0, [r7, #16]
 80121a2:	f7ff fe4f 	bl	8011e44 <put_fat>
 80121a6:	4603      	mov	r3, r0
 80121a8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80121aa:	7dfb      	ldrb	r3, [r7, #23]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d109      	bne.n	80121c4 <create_chain+0xe2>
 80121b0:	683b      	ldr	r3, [r7, #0]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d006      	beq.n	80121c4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80121b6:	69fa      	ldr	r2, [r7, #28]
 80121b8:	6839      	ldr	r1, [r7, #0]
 80121ba:	6938      	ldr	r0, [r7, #16]
 80121bc:	f7ff fe42 	bl	8011e44 <put_fat>
 80121c0:	4603      	mov	r3, r0
 80121c2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80121c4:	7dfb      	ldrb	r3, [r7, #23]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d116      	bne.n	80121f8 <create_chain+0x116>
		fs->last_clst = ncl;
 80121ca:	693b      	ldr	r3, [r7, #16]
 80121cc:	69fa      	ldr	r2, [r7, #28]
 80121ce:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80121d0:	693b      	ldr	r3, [r7, #16]
 80121d2:	691a      	ldr	r2, [r3, #16]
 80121d4:	693b      	ldr	r3, [r7, #16]
 80121d6:	695b      	ldr	r3, [r3, #20]
 80121d8:	3b02      	subs	r3, #2
 80121da:	429a      	cmp	r2, r3
 80121dc:	d804      	bhi.n	80121e8 <create_chain+0x106>
 80121de:	693b      	ldr	r3, [r7, #16]
 80121e0:	691b      	ldr	r3, [r3, #16]
 80121e2:	1e5a      	subs	r2, r3, #1
 80121e4:	693b      	ldr	r3, [r7, #16]
 80121e6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80121e8:	693b      	ldr	r3, [r7, #16]
 80121ea:	791b      	ldrb	r3, [r3, #4]
 80121ec:	f043 0301 	orr.w	r3, r3, #1
 80121f0:	b2da      	uxtb	r2, r3
 80121f2:	693b      	ldr	r3, [r7, #16]
 80121f4:	711a      	strb	r2, [r3, #4]
 80121f6:	e007      	b.n	8012208 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80121f8:	7dfb      	ldrb	r3, [r7, #23]
 80121fa:	2b01      	cmp	r3, #1
 80121fc:	d102      	bne.n	8012204 <create_chain+0x122>
 80121fe:	f04f 33ff 	mov.w	r3, #4294967295
 8012202:	e000      	b.n	8012206 <create_chain+0x124>
 8012204:	2301      	movs	r3, #1
 8012206:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012208:	69fb      	ldr	r3, [r7, #28]
}
 801220a:	4618      	mov	r0, r3
 801220c:	3720      	adds	r7, #32
 801220e:	46bd      	mov	sp, r7
 8012210:	bd80      	pop	{r7, pc}

08012212 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012212:	b480      	push	{r7}
 8012214:	b087      	sub	sp, #28
 8012216:	af00      	add	r7, sp, #0
 8012218:	6078      	str	r0, [r7, #4]
 801221a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012226:	3304      	adds	r3, #4
 8012228:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	0a5b      	lsrs	r3, r3, #9
 801222e:	68fa      	ldr	r2, [r7, #12]
 8012230:	8952      	ldrh	r2, [r2, #10]
 8012232:	fbb3 f3f2 	udiv	r3, r3, r2
 8012236:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012238:	693b      	ldr	r3, [r7, #16]
 801223a:	1d1a      	adds	r2, r3, #4
 801223c:	613a      	str	r2, [r7, #16]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012242:	68bb      	ldr	r3, [r7, #8]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d101      	bne.n	801224c <clmt_clust+0x3a>
 8012248:	2300      	movs	r3, #0
 801224a:	e010      	b.n	801226e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801224c:	697a      	ldr	r2, [r7, #20]
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	429a      	cmp	r2, r3
 8012252:	d307      	bcc.n	8012264 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012254:	697a      	ldr	r2, [r7, #20]
 8012256:	68bb      	ldr	r3, [r7, #8]
 8012258:	1ad3      	subs	r3, r2, r3
 801225a:	617b      	str	r3, [r7, #20]
 801225c:	693b      	ldr	r3, [r7, #16]
 801225e:	3304      	adds	r3, #4
 8012260:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012262:	e7e9      	b.n	8012238 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012264:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012266:	693b      	ldr	r3, [r7, #16]
 8012268:	681a      	ldr	r2, [r3, #0]
 801226a:	697b      	ldr	r3, [r7, #20]
 801226c:	4413      	add	r3, r2
}
 801226e:	4618      	mov	r0, r3
 8012270:	371c      	adds	r7, #28
 8012272:	46bd      	mov	sp, r7
 8012274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012278:	4770      	bx	lr

0801227a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801227a:	b580      	push	{r7, lr}
 801227c:	b086      	sub	sp, #24
 801227e:	af00      	add	r7, sp, #0
 8012280:	6078      	str	r0, [r7, #4]
 8012282:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012290:	d204      	bcs.n	801229c <dir_sdi+0x22>
 8012292:	683b      	ldr	r3, [r7, #0]
 8012294:	f003 031f 	and.w	r3, r3, #31
 8012298:	2b00      	cmp	r3, #0
 801229a:	d001      	beq.n	80122a0 <dir_sdi+0x26>
		return FR_INT_ERR;
 801229c:	2302      	movs	r3, #2
 801229e:	e063      	b.n	8012368 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	683a      	ldr	r2, [r7, #0]
 80122a4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	689b      	ldr	r3, [r3, #8]
 80122aa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d106      	bne.n	80122c0 <dir_sdi+0x46>
 80122b2:	693b      	ldr	r3, [r7, #16]
 80122b4:	781b      	ldrb	r3, [r3, #0]
 80122b6:	2b02      	cmp	r3, #2
 80122b8:	d902      	bls.n	80122c0 <dir_sdi+0x46>
		clst = fs->dirbase;
 80122ba:	693b      	ldr	r3, [r7, #16]
 80122bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122be:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d10c      	bne.n	80122e0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80122c6:	683b      	ldr	r3, [r7, #0]
 80122c8:	095b      	lsrs	r3, r3, #5
 80122ca:	693a      	ldr	r2, [r7, #16]
 80122cc:	8912      	ldrh	r2, [r2, #8]
 80122ce:	4293      	cmp	r3, r2
 80122d0:	d301      	bcc.n	80122d6 <dir_sdi+0x5c>
 80122d2:	2302      	movs	r3, #2
 80122d4:	e048      	b.n	8012368 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80122d6:	693b      	ldr	r3, [r7, #16]
 80122d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	61da      	str	r2, [r3, #28]
 80122de:	e029      	b.n	8012334 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80122e0:	693b      	ldr	r3, [r7, #16]
 80122e2:	895b      	ldrh	r3, [r3, #10]
 80122e4:	025b      	lsls	r3, r3, #9
 80122e6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80122e8:	e019      	b.n	801231e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	6979      	ldr	r1, [r7, #20]
 80122ee:	4618      	mov	r0, r3
 80122f0:	f7ff fd01 	bl	8011cf6 <get_fat>
 80122f4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80122f6:	697b      	ldr	r3, [r7, #20]
 80122f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122fc:	d101      	bne.n	8012302 <dir_sdi+0x88>
 80122fe:	2301      	movs	r3, #1
 8012300:	e032      	b.n	8012368 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	2b01      	cmp	r3, #1
 8012306:	d904      	bls.n	8012312 <dir_sdi+0x98>
 8012308:	693b      	ldr	r3, [r7, #16]
 801230a:	695b      	ldr	r3, [r3, #20]
 801230c:	697a      	ldr	r2, [r7, #20]
 801230e:	429a      	cmp	r2, r3
 8012310:	d301      	bcc.n	8012316 <dir_sdi+0x9c>
 8012312:	2302      	movs	r3, #2
 8012314:	e028      	b.n	8012368 <dir_sdi+0xee>
			ofs -= csz;
 8012316:	683a      	ldr	r2, [r7, #0]
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	1ad3      	subs	r3, r2, r3
 801231c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801231e:	683a      	ldr	r2, [r7, #0]
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	429a      	cmp	r2, r3
 8012324:	d2e1      	bcs.n	80122ea <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8012326:	6979      	ldr	r1, [r7, #20]
 8012328:	6938      	ldr	r0, [r7, #16]
 801232a:	f7ff fcc5 	bl	8011cb8 <clust2sect>
 801232e:	4602      	mov	r2, r0
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	697a      	ldr	r2, [r7, #20]
 8012338:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	69db      	ldr	r3, [r3, #28]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d101      	bne.n	8012346 <dir_sdi+0xcc>
 8012342:	2302      	movs	r3, #2
 8012344:	e010      	b.n	8012368 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	69da      	ldr	r2, [r3, #28]
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	0a5b      	lsrs	r3, r3, #9
 801234e:	441a      	add	r2, r3
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012354:	693b      	ldr	r3, [r7, #16]
 8012356:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012360:	441a      	add	r2, r3
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012366:	2300      	movs	r3, #0
}
 8012368:	4618      	mov	r0, r3
 801236a:	3718      	adds	r7, #24
 801236c:	46bd      	mov	sp, r7
 801236e:	bd80      	pop	{r7, pc}

08012370 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b086      	sub	sp, #24
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
 8012378:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	695b      	ldr	r3, [r3, #20]
 8012384:	3320      	adds	r3, #32
 8012386:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	69db      	ldr	r3, [r3, #28]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d003      	beq.n	8012398 <dir_next+0x28>
 8012390:	68bb      	ldr	r3, [r7, #8]
 8012392:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012396:	d301      	bcc.n	801239c <dir_next+0x2c>
 8012398:	2304      	movs	r3, #4
 801239a:	e0aa      	b.n	80124f2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	f040 8098 	bne.w	80124d8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	69db      	ldr	r3, [r3, #28]
 80123ac:	1c5a      	adds	r2, r3, #1
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	699b      	ldr	r3, [r3, #24]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d10b      	bne.n	80123d2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	095b      	lsrs	r3, r3, #5
 80123be:	68fa      	ldr	r2, [r7, #12]
 80123c0:	8912      	ldrh	r2, [r2, #8]
 80123c2:	4293      	cmp	r3, r2
 80123c4:	f0c0 8088 	bcc.w	80124d8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2200      	movs	r2, #0
 80123cc:	61da      	str	r2, [r3, #28]
 80123ce:	2304      	movs	r3, #4
 80123d0:	e08f      	b.n	80124f2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80123d2:	68bb      	ldr	r3, [r7, #8]
 80123d4:	0a5b      	lsrs	r3, r3, #9
 80123d6:	68fa      	ldr	r2, [r7, #12]
 80123d8:	8952      	ldrh	r2, [r2, #10]
 80123da:	3a01      	subs	r2, #1
 80123dc:	4013      	ands	r3, r2
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d17a      	bne.n	80124d8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80123e2:	687a      	ldr	r2, [r7, #4]
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	699b      	ldr	r3, [r3, #24]
 80123e8:	4619      	mov	r1, r3
 80123ea:	4610      	mov	r0, r2
 80123ec:	f7ff fc83 	bl	8011cf6 <get_fat>
 80123f0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80123f2:	697b      	ldr	r3, [r7, #20]
 80123f4:	2b01      	cmp	r3, #1
 80123f6:	d801      	bhi.n	80123fc <dir_next+0x8c>
 80123f8:	2302      	movs	r3, #2
 80123fa:	e07a      	b.n	80124f2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80123fc:	697b      	ldr	r3, [r7, #20]
 80123fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012402:	d101      	bne.n	8012408 <dir_next+0x98>
 8012404:	2301      	movs	r3, #1
 8012406:	e074      	b.n	80124f2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	695b      	ldr	r3, [r3, #20]
 801240c:	697a      	ldr	r2, [r7, #20]
 801240e:	429a      	cmp	r2, r3
 8012410:	d358      	bcc.n	80124c4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012412:	683b      	ldr	r3, [r7, #0]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d104      	bne.n	8012422 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	2200      	movs	r2, #0
 801241c:	61da      	str	r2, [r3, #28]
 801241e:	2304      	movs	r3, #4
 8012420:	e067      	b.n	80124f2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012422:	687a      	ldr	r2, [r7, #4]
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	699b      	ldr	r3, [r3, #24]
 8012428:	4619      	mov	r1, r3
 801242a:	4610      	mov	r0, r2
 801242c:	f7ff fe59 	bl	80120e2 <create_chain>
 8012430:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012432:	697b      	ldr	r3, [r7, #20]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d101      	bne.n	801243c <dir_next+0xcc>
 8012438:	2307      	movs	r3, #7
 801243a:	e05a      	b.n	80124f2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801243c:	697b      	ldr	r3, [r7, #20]
 801243e:	2b01      	cmp	r3, #1
 8012440:	d101      	bne.n	8012446 <dir_next+0xd6>
 8012442:	2302      	movs	r3, #2
 8012444:	e055      	b.n	80124f2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012446:	697b      	ldr	r3, [r7, #20]
 8012448:	f1b3 3fff 	cmp.w	r3, #4294967295
 801244c:	d101      	bne.n	8012452 <dir_next+0xe2>
 801244e:	2301      	movs	r3, #1
 8012450:	e04f      	b.n	80124f2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012452:	68f8      	ldr	r0, [r7, #12]
 8012454:	f7ff fb50 	bl	8011af8 <sync_window>
 8012458:	4603      	mov	r3, r0
 801245a:	2b00      	cmp	r3, #0
 801245c:	d001      	beq.n	8012462 <dir_next+0xf2>
 801245e:	2301      	movs	r3, #1
 8012460:	e047      	b.n	80124f2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	3330      	adds	r3, #48	@ 0x30
 8012466:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801246a:	2100      	movs	r1, #0
 801246c:	4618      	mov	r0, r3
 801246e:	f7ff f979 	bl	8011764 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012472:	2300      	movs	r3, #0
 8012474:	613b      	str	r3, [r7, #16]
 8012476:	6979      	ldr	r1, [r7, #20]
 8012478:	68f8      	ldr	r0, [r7, #12]
 801247a:	f7ff fc1d 	bl	8011cb8 <clust2sect>
 801247e:	4602      	mov	r2, r0
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012484:	e012      	b.n	80124ac <dir_next+0x13c>
						fs->wflag = 1;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	2201      	movs	r2, #1
 801248a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801248c:	68f8      	ldr	r0, [r7, #12]
 801248e:	f7ff fb33 	bl	8011af8 <sync_window>
 8012492:	4603      	mov	r3, r0
 8012494:	2b00      	cmp	r3, #0
 8012496:	d001      	beq.n	801249c <dir_next+0x12c>
 8012498:	2301      	movs	r3, #1
 801249a:	e02a      	b.n	80124f2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801249c:	693b      	ldr	r3, [r7, #16]
 801249e:	3301      	adds	r3, #1
 80124a0:	613b      	str	r3, [r7, #16]
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124a6:	1c5a      	adds	r2, r3, #1
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	895b      	ldrh	r3, [r3, #10]
 80124b0:	461a      	mov	r2, r3
 80124b2:	693b      	ldr	r3, [r7, #16]
 80124b4:	4293      	cmp	r3, r2
 80124b6:	d3e6      	bcc.n	8012486 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124bc:	693b      	ldr	r3, [r7, #16]
 80124be:	1ad2      	subs	r2, r2, r3
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	697a      	ldr	r2, [r7, #20]
 80124c8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80124ca:	6979      	ldr	r1, [r7, #20]
 80124cc:	68f8      	ldr	r0, [r7, #12]
 80124ce:	f7ff fbf3 	bl	8011cb8 <clust2sect>
 80124d2:	4602      	mov	r2, r0
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	68ba      	ldr	r2, [r7, #8]
 80124dc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80124e4:	68bb      	ldr	r3, [r7, #8]
 80124e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124ea:	441a      	add	r2, r3
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80124f0:	2300      	movs	r3, #0
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	3718      	adds	r7, #24
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}

080124fa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80124fa:	b580      	push	{r7, lr}
 80124fc:	b086      	sub	sp, #24
 80124fe:	af00      	add	r7, sp, #0
 8012500:	6078      	str	r0, [r7, #4]
 8012502:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801250a:	2100      	movs	r1, #0
 801250c:	6878      	ldr	r0, [r7, #4]
 801250e:	f7ff feb4 	bl	801227a <dir_sdi>
 8012512:	4603      	mov	r3, r0
 8012514:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012516:	7dfb      	ldrb	r3, [r7, #23]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d12b      	bne.n	8012574 <dir_alloc+0x7a>
		n = 0;
 801251c:	2300      	movs	r3, #0
 801251e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	69db      	ldr	r3, [r3, #28]
 8012524:	4619      	mov	r1, r3
 8012526:	68f8      	ldr	r0, [r7, #12]
 8012528:	f7ff fb2a 	bl	8011b80 <move_window>
 801252c:	4603      	mov	r3, r0
 801252e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012530:	7dfb      	ldrb	r3, [r7, #23]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d11d      	bne.n	8012572 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	6a1b      	ldr	r3, [r3, #32]
 801253a:	781b      	ldrb	r3, [r3, #0]
 801253c:	2be5      	cmp	r3, #229	@ 0xe5
 801253e:	d004      	beq.n	801254a <dir_alloc+0x50>
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	6a1b      	ldr	r3, [r3, #32]
 8012544:	781b      	ldrb	r3, [r3, #0]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d107      	bne.n	801255a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801254a:	693b      	ldr	r3, [r7, #16]
 801254c:	3301      	adds	r3, #1
 801254e:	613b      	str	r3, [r7, #16]
 8012550:	693a      	ldr	r2, [r7, #16]
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	429a      	cmp	r2, r3
 8012556:	d102      	bne.n	801255e <dir_alloc+0x64>
 8012558:	e00c      	b.n	8012574 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801255a:	2300      	movs	r3, #0
 801255c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801255e:	2101      	movs	r1, #1
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f7ff ff05 	bl	8012370 <dir_next>
 8012566:	4603      	mov	r3, r0
 8012568:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801256a:	7dfb      	ldrb	r3, [r7, #23]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d0d7      	beq.n	8012520 <dir_alloc+0x26>
 8012570:	e000      	b.n	8012574 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012572:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012574:	7dfb      	ldrb	r3, [r7, #23]
 8012576:	2b04      	cmp	r3, #4
 8012578:	d101      	bne.n	801257e <dir_alloc+0x84>
 801257a:	2307      	movs	r3, #7
 801257c:	75fb      	strb	r3, [r7, #23]
	return res;
 801257e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012580:	4618      	mov	r0, r3
 8012582:	3718      	adds	r7, #24
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}

08012588 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b084      	sub	sp, #16
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
 8012590:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	331a      	adds	r3, #26
 8012596:	4618      	mov	r0, r3
 8012598:	f7ff f840 	bl	801161c <ld_word>
 801259c:	4603      	mov	r3, r0
 801259e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	781b      	ldrb	r3, [r3, #0]
 80125a4:	2b03      	cmp	r3, #3
 80125a6:	d109      	bne.n	80125bc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80125a8:	683b      	ldr	r3, [r7, #0]
 80125aa:	3314      	adds	r3, #20
 80125ac:	4618      	mov	r0, r3
 80125ae:	f7ff f835 	bl	801161c <ld_word>
 80125b2:	4603      	mov	r3, r0
 80125b4:	041b      	lsls	r3, r3, #16
 80125b6:	68fa      	ldr	r2, [r7, #12]
 80125b8:	4313      	orrs	r3, r2
 80125ba:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80125bc:	68fb      	ldr	r3, [r7, #12]
}
 80125be:	4618      	mov	r0, r3
 80125c0:	3710      	adds	r7, #16
 80125c2:	46bd      	mov	sp, r7
 80125c4:	bd80      	pop	{r7, pc}

080125c6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80125c6:	b580      	push	{r7, lr}
 80125c8:	b084      	sub	sp, #16
 80125ca:	af00      	add	r7, sp, #0
 80125cc:	60f8      	str	r0, [r7, #12]
 80125ce:	60b9      	str	r1, [r7, #8]
 80125d0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80125d2:	68bb      	ldr	r3, [r7, #8]
 80125d4:	331a      	adds	r3, #26
 80125d6:	687a      	ldr	r2, [r7, #4]
 80125d8:	b292      	uxth	r2, r2
 80125da:	4611      	mov	r1, r2
 80125dc:	4618      	mov	r0, r3
 80125de:	f7ff f859 	bl	8011694 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	781b      	ldrb	r3, [r3, #0]
 80125e6:	2b03      	cmp	r3, #3
 80125e8:	d109      	bne.n	80125fe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	f103 0214 	add.w	r2, r3, #20
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	0c1b      	lsrs	r3, r3, #16
 80125f4:	b29b      	uxth	r3, r3
 80125f6:	4619      	mov	r1, r3
 80125f8:	4610      	mov	r0, r2
 80125fa:	f7ff f84b 	bl	8011694 <st_word>
	}
}
 80125fe:	bf00      	nop
 8012600:	3710      	adds	r7, #16
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}

08012606 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012606:	b580      	push	{r7, lr}
 8012608:	b086      	sub	sp, #24
 801260a:	af00      	add	r7, sp, #0
 801260c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012614:	2100      	movs	r1, #0
 8012616:	6878      	ldr	r0, [r7, #4]
 8012618:	f7ff fe2f 	bl	801227a <dir_sdi>
 801261c:	4603      	mov	r3, r0
 801261e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012620:	7dfb      	ldrb	r3, [r7, #23]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d001      	beq.n	801262a <dir_find+0x24>
 8012626:	7dfb      	ldrb	r3, [r7, #23]
 8012628:	e03e      	b.n	80126a8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	69db      	ldr	r3, [r3, #28]
 801262e:	4619      	mov	r1, r3
 8012630:	6938      	ldr	r0, [r7, #16]
 8012632:	f7ff faa5 	bl	8011b80 <move_window>
 8012636:	4603      	mov	r3, r0
 8012638:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801263a:	7dfb      	ldrb	r3, [r7, #23]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d12f      	bne.n	80126a0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6a1b      	ldr	r3, [r3, #32]
 8012644:	781b      	ldrb	r3, [r3, #0]
 8012646:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012648:	7bfb      	ldrb	r3, [r7, #15]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d102      	bne.n	8012654 <dir_find+0x4e>
 801264e:	2304      	movs	r3, #4
 8012650:	75fb      	strb	r3, [r7, #23]
 8012652:	e028      	b.n	80126a6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	6a1b      	ldr	r3, [r3, #32]
 8012658:	330b      	adds	r3, #11
 801265a:	781b      	ldrb	r3, [r3, #0]
 801265c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012660:	b2da      	uxtb	r2, r3
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	6a1b      	ldr	r3, [r3, #32]
 801266a:	330b      	adds	r3, #11
 801266c:	781b      	ldrb	r3, [r3, #0]
 801266e:	f003 0308 	and.w	r3, r3, #8
 8012672:	2b00      	cmp	r3, #0
 8012674:	d10a      	bne.n	801268c <dir_find+0x86>
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	6a18      	ldr	r0, [r3, #32]
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	3324      	adds	r3, #36	@ 0x24
 801267e:	220b      	movs	r2, #11
 8012680:	4619      	mov	r1, r3
 8012682:	f7ff f88a 	bl	801179a <mem_cmp>
 8012686:	4603      	mov	r3, r0
 8012688:	2b00      	cmp	r3, #0
 801268a:	d00b      	beq.n	80126a4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801268c:	2100      	movs	r1, #0
 801268e:	6878      	ldr	r0, [r7, #4]
 8012690:	f7ff fe6e 	bl	8012370 <dir_next>
 8012694:	4603      	mov	r3, r0
 8012696:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012698:	7dfb      	ldrb	r3, [r7, #23]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d0c5      	beq.n	801262a <dir_find+0x24>
 801269e:	e002      	b.n	80126a6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80126a0:	bf00      	nop
 80126a2:	e000      	b.n	80126a6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80126a4:	bf00      	nop

	return res;
 80126a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80126a8:	4618      	mov	r0, r3
 80126aa:	3718      	adds	r7, #24
 80126ac:	46bd      	mov	sp, r7
 80126ae:	bd80      	pop	{r7, pc}

080126b0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b084      	sub	sp, #16
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80126be:	2101      	movs	r1, #1
 80126c0:	6878      	ldr	r0, [r7, #4]
 80126c2:	f7ff ff1a 	bl	80124fa <dir_alloc>
 80126c6:	4603      	mov	r3, r0
 80126c8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80126ca:	7bfb      	ldrb	r3, [r7, #15]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d11c      	bne.n	801270a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	69db      	ldr	r3, [r3, #28]
 80126d4:	4619      	mov	r1, r3
 80126d6:	68b8      	ldr	r0, [r7, #8]
 80126d8:	f7ff fa52 	bl	8011b80 <move_window>
 80126dc:	4603      	mov	r3, r0
 80126de:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80126e0:	7bfb      	ldrb	r3, [r7, #15]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d111      	bne.n	801270a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	6a1b      	ldr	r3, [r3, #32]
 80126ea:	2220      	movs	r2, #32
 80126ec:	2100      	movs	r1, #0
 80126ee:	4618      	mov	r0, r3
 80126f0:	f7ff f838 	bl	8011764 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	6a18      	ldr	r0, [r3, #32]
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	3324      	adds	r3, #36	@ 0x24
 80126fc:	220b      	movs	r2, #11
 80126fe:	4619      	mov	r1, r3
 8012700:	f7ff f80f 	bl	8011722 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012704:	68bb      	ldr	r3, [r7, #8]
 8012706:	2201      	movs	r2, #1
 8012708:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801270a:	7bfb      	ldrb	r3, [r7, #15]
}
 801270c:	4618      	mov	r0, r3
 801270e:	3710      	adds	r7, #16
 8012710:	46bd      	mov	sp, r7
 8012712:	bd80      	pop	{r7, pc}

08012714 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b088      	sub	sp, #32
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
 801271c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	60fb      	str	r3, [r7, #12]
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	3324      	adds	r3, #36	@ 0x24
 8012728:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801272a:	220b      	movs	r2, #11
 801272c:	2120      	movs	r1, #32
 801272e:	68b8      	ldr	r0, [r7, #8]
 8012730:	f7ff f818 	bl	8011764 <mem_set>
	si = i = 0; ni = 8;
 8012734:	2300      	movs	r3, #0
 8012736:	613b      	str	r3, [r7, #16]
 8012738:	693b      	ldr	r3, [r7, #16]
 801273a:	61fb      	str	r3, [r7, #28]
 801273c:	2308      	movs	r3, #8
 801273e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012740:	69fb      	ldr	r3, [r7, #28]
 8012742:	1c5a      	adds	r2, r3, #1
 8012744:	61fa      	str	r2, [r7, #28]
 8012746:	68fa      	ldr	r2, [r7, #12]
 8012748:	4413      	add	r3, r2
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801274e:	7efb      	ldrb	r3, [r7, #27]
 8012750:	2b20      	cmp	r3, #32
 8012752:	d94e      	bls.n	80127f2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012754:	7efb      	ldrb	r3, [r7, #27]
 8012756:	2b2f      	cmp	r3, #47	@ 0x2f
 8012758:	d006      	beq.n	8012768 <create_name+0x54>
 801275a:	7efb      	ldrb	r3, [r7, #27]
 801275c:	2b5c      	cmp	r3, #92	@ 0x5c
 801275e:	d110      	bne.n	8012782 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012760:	e002      	b.n	8012768 <create_name+0x54>
 8012762:	69fb      	ldr	r3, [r7, #28]
 8012764:	3301      	adds	r3, #1
 8012766:	61fb      	str	r3, [r7, #28]
 8012768:	68fa      	ldr	r2, [r7, #12]
 801276a:	69fb      	ldr	r3, [r7, #28]
 801276c:	4413      	add	r3, r2
 801276e:	781b      	ldrb	r3, [r3, #0]
 8012770:	2b2f      	cmp	r3, #47	@ 0x2f
 8012772:	d0f6      	beq.n	8012762 <create_name+0x4e>
 8012774:	68fa      	ldr	r2, [r7, #12]
 8012776:	69fb      	ldr	r3, [r7, #28]
 8012778:	4413      	add	r3, r2
 801277a:	781b      	ldrb	r3, [r3, #0]
 801277c:	2b5c      	cmp	r3, #92	@ 0x5c
 801277e:	d0f0      	beq.n	8012762 <create_name+0x4e>
			break;
 8012780:	e038      	b.n	80127f4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012782:	7efb      	ldrb	r3, [r7, #27]
 8012784:	2b2e      	cmp	r3, #46	@ 0x2e
 8012786:	d003      	beq.n	8012790 <create_name+0x7c>
 8012788:	693a      	ldr	r2, [r7, #16]
 801278a:	697b      	ldr	r3, [r7, #20]
 801278c:	429a      	cmp	r2, r3
 801278e:	d30c      	bcc.n	80127aa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012790:	697b      	ldr	r3, [r7, #20]
 8012792:	2b0b      	cmp	r3, #11
 8012794:	d002      	beq.n	801279c <create_name+0x88>
 8012796:	7efb      	ldrb	r3, [r7, #27]
 8012798:	2b2e      	cmp	r3, #46	@ 0x2e
 801279a:	d001      	beq.n	80127a0 <create_name+0x8c>
 801279c:	2306      	movs	r3, #6
 801279e:	e044      	b.n	801282a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80127a0:	2308      	movs	r3, #8
 80127a2:	613b      	str	r3, [r7, #16]
 80127a4:	230b      	movs	r3, #11
 80127a6:	617b      	str	r3, [r7, #20]
			continue;
 80127a8:	e022      	b.n	80127f0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80127aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	da04      	bge.n	80127bc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80127b2:	7efb      	ldrb	r3, [r7, #27]
 80127b4:	3b80      	subs	r3, #128	@ 0x80
 80127b6:	4a1f      	ldr	r2, [pc, #124]	@ (8012834 <create_name+0x120>)
 80127b8:	5cd3      	ldrb	r3, [r2, r3]
 80127ba:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80127bc:	7efb      	ldrb	r3, [r7, #27]
 80127be:	4619      	mov	r1, r3
 80127c0:	481d      	ldr	r0, [pc, #116]	@ (8012838 <create_name+0x124>)
 80127c2:	f7ff f811 	bl	80117e8 <chk_chr>
 80127c6:	4603      	mov	r3, r0
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d001      	beq.n	80127d0 <create_name+0xbc>
 80127cc:	2306      	movs	r3, #6
 80127ce:	e02c      	b.n	801282a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80127d0:	7efb      	ldrb	r3, [r7, #27]
 80127d2:	2b60      	cmp	r3, #96	@ 0x60
 80127d4:	d905      	bls.n	80127e2 <create_name+0xce>
 80127d6:	7efb      	ldrb	r3, [r7, #27]
 80127d8:	2b7a      	cmp	r3, #122	@ 0x7a
 80127da:	d802      	bhi.n	80127e2 <create_name+0xce>
 80127dc:	7efb      	ldrb	r3, [r7, #27]
 80127de:	3b20      	subs	r3, #32
 80127e0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80127e2:	693b      	ldr	r3, [r7, #16]
 80127e4:	1c5a      	adds	r2, r3, #1
 80127e6:	613a      	str	r2, [r7, #16]
 80127e8:	68ba      	ldr	r2, [r7, #8]
 80127ea:	4413      	add	r3, r2
 80127ec:	7efa      	ldrb	r2, [r7, #27]
 80127ee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80127f0:	e7a6      	b.n	8012740 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80127f2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80127f4:	68fa      	ldr	r2, [r7, #12]
 80127f6:	69fb      	ldr	r3, [r7, #28]
 80127f8:	441a      	add	r2, r3
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d101      	bne.n	8012808 <create_name+0xf4>
 8012804:	2306      	movs	r3, #6
 8012806:	e010      	b.n	801282a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012808:	68bb      	ldr	r3, [r7, #8]
 801280a:	781b      	ldrb	r3, [r3, #0]
 801280c:	2be5      	cmp	r3, #229	@ 0xe5
 801280e:	d102      	bne.n	8012816 <create_name+0x102>
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	2205      	movs	r2, #5
 8012814:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012816:	7efb      	ldrb	r3, [r7, #27]
 8012818:	2b20      	cmp	r3, #32
 801281a:	d801      	bhi.n	8012820 <create_name+0x10c>
 801281c:	2204      	movs	r2, #4
 801281e:	e000      	b.n	8012822 <create_name+0x10e>
 8012820:	2200      	movs	r2, #0
 8012822:	68bb      	ldr	r3, [r7, #8]
 8012824:	330b      	adds	r3, #11
 8012826:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012828:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801282a:	4618      	mov	r0, r3
 801282c:	3720      	adds	r7, #32
 801282e:	46bd      	mov	sp, r7
 8012830:	bd80      	pop	{r7, pc}
 8012832:	bf00      	nop
 8012834:	0801b450 	.word	0x0801b450
 8012838:	0801b3d0 	.word	0x0801b3d0

0801283c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801283c:	b580      	push	{r7, lr}
 801283e:	b086      	sub	sp, #24
 8012840:	af00      	add	r7, sp, #0
 8012842:	6078      	str	r0, [r7, #4]
 8012844:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801284a:	693b      	ldr	r3, [r7, #16]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012850:	e002      	b.n	8012858 <follow_path+0x1c>
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	3301      	adds	r3, #1
 8012856:	603b      	str	r3, [r7, #0]
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	781b      	ldrb	r3, [r3, #0]
 801285c:	2b2f      	cmp	r3, #47	@ 0x2f
 801285e:	d0f8      	beq.n	8012852 <follow_path+0x16>
 8012860:	683b      	ldr	r3, [r7, #0]
 8012862:	781b      	ldrb	r3, [r3, #0]
 8012864:	2b5c      	cmp	r3, #92	@ 0x5c
 8012866:	d0f4      	beq.n	8012852 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012868:	693b      	ldr	r3, [r7, #16]
 801286a:	2200      	movs	r2, #0
 801286c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	781b      	ldrb	r3, [r3, #0]
 8012872:	2b1f      	cmp	r3, #31
 8012874:	d80a      	bhi.n	801288c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	2280      	movs	r2, #128	@ 0x80
 801287a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801287e:	2100      	movs	r1, #0
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	f7ff fcfa 	bl	801227a <dir_sdi>
 8012886:	4603      	mov	r3, r0
 8012888:	75fb      	strb	r3, [r7, #23]
 801288a:	e043      	b.n	8012914 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801288c:	463b      	mov	r3, r7
 801288e:	4619      	mov	r1, r3
 8012890:	6878      	ldr	r0, [r7, #4]
 8012892:	f7ff ff3f 	bl	8012714 <create_name>
 8012896:	4603      	mov	r3, r0
 8012898:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801289a:	7dfb      	ldrb	r3, [r7, #23]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d134      	bne.n	801290a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80128a0:	6878      	ldr	r0, [r7, #4]
 80128a2:	f7ff feb0 	bl	8012606 <dir_find>
 80128a6:	4603      	mov	r3, r0
 80128a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80128b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80128b2:	7dfb      	ldrb	r3, [r7, #23]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d00a      	beq.n	80128ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80128b8:	7dfb      	ldrb	r3, [r7, #23]
 80128ba:	2b04      	cmp	r3, #4
 80128bc:	d127      	bne.n	801290e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80128be:	7afb      	ldrb	r3, [r7, #11]
 80128c0:	f003 0304 	and.w	r3, r3, #4
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d122      	bne.n	801290e <follow_path+0xd2>
 80128c8:	2305      	movs	r3, #5
 80128ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80128cc:	e01f      	b.n	801290e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80128ce:	7afb      	ldrb	r3, [r7, #11]
 80128d0:	f003 0304 	and.w	r3, r3, #4
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d11c      	bne.n	8012912 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80128d8:	693b      	ldr	r3, [r7, #16]
 80128da:	799b      	ldrb	r3, [r3, #6]
 80128dc:	f003 0310 	and.w	r3, r3, #16
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d102      	bne.n	80128ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 80128e4:	2305      	movs	r3, #5
 80128e6:	75fb      	strb	r3, [r7, #23]
 80128e8:	e014      	b.n	8012914 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	695b      	ldr	r3, [r3, #20]
 80128f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128f8:	4413      	add	r3, r2
 80128fa:	4619      	mov	r1, r3
 80128fc:	68f8      	ldr	r0, [r7, #12]
 80128fe:	f7ff fe43 	bl	8012588 <ld_clust>
 8012902:	4602      	mov	r2, r0
 8012904:	693b      	ldr	r3, [r7, #16]
 8012906:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012908:	e7c0      	b.n	801288c <follow_path+0x50>
			if (res != FR_OK) break;
 801290a:	bf00      	nop
 801290c:	e002      	b.n	8012914 <follow_path+0xd8>
				break;
 801290e:	bf00      	nop
 8012910:	e000      	b.n	8012914 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012912:	bf00      	nop
			}
		}
	}

	return res;
 8012914:	7dfb      	ldrb	r3, [r7, #23]
}
 8012916:	4618      	mov	r0, r3
 8012918:	3718      	adds	r7, #24
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}

0801291e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801291e:	b480      	push	{r7}
 8012920:	b087      	sub	sp, #28
 8012922:	af00      	add	r7, sp, #0
 8012924:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012926:	f04f 33ff 	mov.w	r3, #4294967295
 801292a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d031      	beq.n	8012998 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	617b      	str	r3, [r7, #20]
 801293a:	e002      	b.n	8012942 <get_ldnumber+0x24>
 801293c:	697b      	ldr	r3, [r7, #20]
 801293e:	3301      	adds	r3, #1
 8012940:	617b      	str	r3, [r7, #20]
 8012942:	697b      	ldr	r3, [r7, #20]
 8012944:	781b      	ldrb	r3, [r3, #0]
 8012946:	2b20      	cmp	r3, #32
 8012948:	d903      	bls.n	8012952 <get_ldnumber+0x34>
 801294a:	697b      	ldr	r3, [r7, #20]
 801294c:	781b      	ldrb	r3, [r3, #0]
 801294e:	2b3a      	cmp	r3, #58	@ 0x3a
 8012950:	d1f4      	bne.n	801293c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012952:	697b      	ldr	r3, [r7, #20]
 8012954:	781b      	ldrb	r3, [r3, #0]
 8012956:	2b3a      	cmp	r3, #58	@ 0x3a
 8012958:	d11c      	bne.n	8012994 <get_ldnumber+0x76>
			tp = *path;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	1c5a      	adds	r2, r3, #1
 8012964:	60fa      	str	r2, [r7, #12]
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	3b30      	subs	r3, #48	@ 0x30
 801296a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801296c:	68bb      	ldr	r3, [r7, #8]
 801296e:	2b09      	cmp	r3, #9
 8012970:	d80e      	bhi.n	8012990 <get_ldnumber+0x72>
 8012972:	68fa      	ldr	r2, [r7, #12]
 8012974:	697b      	ldr	r3, [r7, #20]
 8012976:	429a      	cmp	r2, r3
 8012978:	d10a      	bne.n	8012990 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801297a:	68bb      	ldr	r3, [r7, #8]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d107      	bne.n	8012990 <get_ldnumber+0x72>
					vol = (int)i;
 8012980:	68bb      	ldr	r3, [r7, #8]
 8012982:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012984:	697b      	ldr	r3, [r7, #20]
 8012986:	3301      	adds	r3, #1
 8012988:	617b      	str	r3, [r7, #20]
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	697a      	ldr	r2, [r7, #20]
 801298e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012990:	693b      	ldr	r3, [r7, #16]
 8012992:	e002      	b.n	801299a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012994:	2300      	movs	r3, #0
 8012996:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012998:	693b      	ldr	r3, [r7, #16]
}
 801299a:	4618      	mov	r0, r3
 801299c:	371c      	adds	r7, #28
 801299e:	46bd      	mov	sp, r7
 80129a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a4:	4770      	bx	lr
	...

080129a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b082      	sub	sp, #8
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
 80129b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	2200      	movs	r2, #0
 80129b6:	70da      	strb	r2, [r3, #3]
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	f04f 32ff 	mov.w	r2, #4294967295
 80129be:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80129c0:	6839      	ldr	r1, [r7, #0]
 80129c2:	6878      	ldr	r0, [r7, #4]
 80129c4:	f7ff f8dc 	bl	8011b80 <move_window>
 80129c8:	4603      	mov	r3, r0
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d001      	beq.n	80129d2 <check_fs+0x2a>
 80129ce:	2304      	movs	r3, #4
 80129d0:	e038      	b.n	8012a44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	3330      	adds	r3, #48	@ 0x30
 80129d6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80129da:	4618      	mov	r0, r3
 80129dc:	f7fe fe1e 	bl	801161c <ld_word>
 80129e0:	4603      	mov	r3, r0
 80129e2:	461a      	mov	r2, r3
 80129e4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80129e8:	429a      	cmp	r2, r3
 80129ea:	d001      	beq.n	80129f0 <check_fs+0x48>
 80129ec:	2303      	movs	r3, #3
 80129ee:	e029      	b.n	8012a44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80129f6:	2be9      	cmp	r3, #233	@ 0xe9
 80129f8:	d009      	beq.n	8012a0e <check_fs+0x66>
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012a00:	2beb      	cmp	r3, #235	@ 0xeb
 8012a02:	d11e      	bne.n	8012a42 <check_fs+0x9a>
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8012a0a:	2b90      	cmp	r3, #144	@ 0x90
 8012a0c:	d119      	bne.n	8012a42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	3330      	adds	r3, #48	@ 0x30
 8012a12:	3336      	adds	r3, #54	@ 0x36
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7fe fe1a 	bl	801164e <ld_dword>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012a20:	4a0a      	ldr	r2, [pc, #40]	@ (8012a4c <check_fs+0xa4>)
 8012a22:	4293      	cmp	r3, r2
 8012a24:	d101      	bne.n	8012a2a <check_fs+0x82>
 8012a26:	2300      	movs	r3, #0
 8012a28:	e00c      	b.n	8012a44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	3330      	adds	r3, #48	@ 0x30
 8012a2e:	3352      	adds	r3, #82	@ 0x52
 8012a30:	4618      	mov	r0, r3
 8012a32:	f7fe fe0c 	bl	801164e <ld_dword>
 8012a36:	4603      	mov	r3, r0
 8012a38:	4a05      	ldr	r2, [pc, #20]	@ (8012a50 <check_fs+0xa8>)
 8012a3a:	4293      	cmp	r3, r2
 8012a3c:	d101      	bne.n	8012a42 <check_fs+0x9a>
 8012a3e:	2300      	movs	r3, #0
 8012a40:	e000      	b.n	8012a44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012a42:	2302      	movs	r3, #2
}
 8012a44:	4618      	mov	r0, r3
 8012a46:	3708      	adds	r7, #8
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bd80      	pop	{r7, pc}
 8012a4c:	00544146 	.word	0x00544146
 8012a50:	33544146 	.word	0x33544146

08012a54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b096      	sub	sp, #88	@ 0x58
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	60f8      	str	r0, [r7, #12]
 8012a5c:	60b9      	str	r1, [r7, #8]
 8012a5e:	4613      	mov	r3, r2
 8012a60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012a62:	68bb      	ldr	r3, [r7, #8]
 8012a64:	2200      	movs	r2, #0
 8012a66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012a68:	68f8      	ldr	r0, [r7, #12]
 8012a6a:	f7ff ff58 	bl	801291e <get_ldnumber>
 8012a6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	da01      	bge.n	8012a7a <find_volume+0x26>
 8012a76:	230b      	movs	r3, #11
 8012a78:	e22d      	b.n	8012ed6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012a7a:	4aa1      	ldr	r2, [pc, #644]	@ (8012d00 <find_volume+0x2ac>)
 8012a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012a82:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d101      	bne.n	8012a8e <find_volume+0x3a>
 8012a8a:	230c      	movs	r3, #12
 8012a8c:	e223      	b.n	8012ed6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012a92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012a94:	79fb      	ldrb	r3, [r7, #7]
 8012a96:	f023 0301 	bic.w	r3, r3, #1
 8012a9a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a9e:	781b      	ldrb	r3, [r3, #0]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d01a      	beq.n	8012ada <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012aa6:	785b      	ldrb	r3, [r3, #1]
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f7fe fd19 	bl	80114e0 <disk_status>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012ab4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012ab8:	f003 0301 	and.w	r3, r3, #1
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d10c      	bne.n	8012ada <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012ac0:	79fb      	ldrb	r3, [r7, #7]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d007      	beq.n	8012ad6 <find_volume+0x82>
 8012ac6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012aca:	f003 0304 	and.w	r3, r3, #4
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d001      	beq.n	8012ad6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012ad2:	230a      	movs	r3, #10
 8012ad4:	e1ff      	b.n	8012ed6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	e1fd      	b.n	8012ed6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012adc:	2200      	movs	r2, #0
 8012ade:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ae2:	b2da      	uxtb	r2, r3
 8012ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ae6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012aea:	785b      	ldrb	r3, [r3, #1]
 8012aec:	4618      	mov	r0, r3
 8012aee:	f7fe fd11 	bl	8011514 <disk_initialize>
 8012af2:	4603      	mov	r3, r0
 8012af4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012af8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012afc:	f003 0301 	and.w	r3, r3, #1
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d001      	beq.n	8012b08 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012b04:	2303      	movs	r3, #3
 8012b06:	e1e6      	b.n	8012ed6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012b08:	79fb      	ldrb	r3, [r7, #7]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d007      	beq.n	8012b1e <find_volume+0xca>
 8012b0e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012b12:	f003 0304 	and.w	r3, r3, #4
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d001      	beq.n	8012b1e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012b1a:	230a      	movs	r3, #10
 8012b1c:	e1db      	b.n	8012ed6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012b1e:	2300      	movs	r3, #0
 8012b20:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012b22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012b24:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012b26:	f7ff ff3f 	bl	80129a8 <check_fs>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012b30:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012b34:	2b02      	cmp	r3, #2
 8012b36:	d149      	bne.n	8012bcc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012b38:	2300      	movs	r3, #0
 8012b3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8012b3c:	e01e      	b.n	8012b7c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b40:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012b44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012b46:	011b      	lsls	r3, r3, #4
 8012b48:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8012b4c:	4413      	add	r3, r2
 8012b4e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b52:	3304      	adds	r3, #4
 8012b54:	781b      	ldrb	r3, [r3, #0]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d006      	beq.n	8012b68 <find_volume+0x114>
 8012b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b5c:	3308      	adds	r3, #8
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f7fe fd75 	bl	801164e <ld_dword>
 8012b64:	4602      	mov	r2, r0
 8012b66:	e000      	b.n	8012b6a <find_volume+0x116>
 8012b68:	2200      	movs	r2, #0
 8012b6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012b6c:	009b      	lsls	r3, r3, #2
 8012b6e:	3358      	adds	r3, #88	@ 0x58
 8012b70:	443b      	add	r3, r7
 8012b72:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012b76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012b78:	3301      	adds	r3, #1
 8012b7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8012b7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012b7e:	2b03      	cmp	r3, #3
 8012b80:	d9dd      	bls.n	8012b3e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012b82:	2300      	movs	r3, #0
 8012b84:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8012b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d002      	beq.n	8012b92 <find_volume+0x13e>
 8012b8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012b8e:	3b01      	subs	r3, #1
 8012b90:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012b94:	009b      	lsls	r3, r3, #2
 8012b96:	3358      	adds	r3, #88	@ 0x58
 8012b98:	443b      	add	r3, r7
 8012b9a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012b9e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012ba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d005      	beq.n	8012bb2 <find_volume+0x15e>
 8012ba6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012ba8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012baa:	f7ff fefd 	bl	80129a8 <check_fs>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	e000      	b.n	8012bb4 <find_volume+0x160>
 8012bb2:	2303      	movs	r3, #3
 8012bb4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012bb8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012bbc:	2b01      	cmp	r3, #1
 8012bbe:	d905      	bls.n	8012bcc <find_volume+0x178>
 8012bc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012bc2:	3301      	adds	r3, #1
 8012bc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8012bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012bc8:	2b03      	cmp	r3, #3
 8012bca:	d9e2      	bls.n	8012b92 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012bcc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012bd0:	2b04      	cmp	r3, #4
 8012bd2:	d101      	bne.n	8012bd8 <find_volume+0x184>
 8012bd4:	2301      	movs	r3, #1
 8012bd6:	e17e      	b.n	8012ed6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012bd8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012bdc:	2b01      	cmp	r3, #1
 8012bde:	d901      	bls.n	8012be4 <find_volume+0x190>
 8012be0:	230d      	movs	r3, #13
 8012be2:	e178      	b.n	8012ed6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012be6:	3330      	adds	r3, #48	@ 0x30
 8012be8:	330b      	adds	r3, #11
 8012bea:	4618      	mov	r0, r3
 8012bec:	f7fe fd16 	bl	801161c <ld_word>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012bf6:	d001      	beq.n	8012bfc <find_volume+0x1a8>
 8012bf8:	230d      	movs	r3, #13
 8012bfa:	e16c      	b.n	8012ed6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bfe:	3330      	adds	r3, #48	@ 0x30
 8012c00:	3316      	adds	r3, #22
 8012c02:	4618      	mov	r0, r3
 8012c04:	f7fe fd0a 	bl	801161c <ld_word>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012c0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d106      	bne.n	8012c20 <find_volume+0x1cc>
 8012c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c14:	3330      	adds	r3, #48	@ 0x30
 8012c16:	3324      	adds	r3, #36	@ 0x24
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7fe fd18 	bl	801164e <ld_dword>
 8012c1e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8012c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012c24:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c28:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8012c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c2e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c32:	789b      	ldrb	r3, [r3, #2]
 8012c34:	2b01      	cmp	r3, #1
 8012c36:	d005      	beq.n	8012c44 <find_volume+0x1f0>
 8012c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c3a:	789b      	ldrb	r3, [r3, #2]
 8012c3c:	2b02      	cmp	r3, #2
 8012c3e:	d001      	beq.n	8012c44 <find_volume+0x1f0>
 8012c40:	230d      	movs	r3, #13
 8012c42:	e148      	b.n	8012ed6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c46:	789b      	ldrb	r3, [r3, #2]
 8012c48:	461a      	mov	r2, r3
 8012c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c4c:	fb02 f303 	mul.w	r3, r2, r3
 8012c50:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012c58:	461a      	mov	r2, r3
 8012c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c5c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c60:	895b      	ldrh	r3, [r3, #10]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d008      	beq.n	8012c78 <find_volume+0x224>
 8012c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c68:	895b      	ldrh	r3, [r3, #10]
 8012c6a:	461a      	mov	r2, r3
 8012c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c6e:	895b      	ldrh	r3, [r3, #10]
 8012c70:	3b01      	subs	r3, #1
 8012c72:	4013      	ands	r3, r2
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d001      	beq.n	8012c7c <find_volume+0x228>
 8012c78:	230d      	movs	r3, #13
 8012c7a:	e12c      	b.n	8012ed6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c7e:	3330      	adds	r3, #48	@ 0x30
 8012c80:	3311      	adds	r3, #17
 8012c82:	4618      	mov	r0, r3
 8012c84:	f7fe fcca 	bl	801161c <ld_word>
 8012c88:	4603      	mov	r3, r0
 8012c8a:	461a      	mov	r2, r3
 8012c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c8e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c92:	891b      	ldrh	r3, [r3, #8]
 8012c94:	f003 030f 	and.w	r3, r3, #15
 8012c98:	b29b      	uxth	r3, r3
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d001      	beq.n	8012ca2 <find_volume+0x24e>
 8012c9e:	230d      	movs	r3, #13
 8012ca0:	e119      	b.n	8012ed6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ca4:	3330      	adds	r3, #48	@ 0x30
 8012ca6:	3313      	adds	r3, #19
 8012ca8:	4618      	mov	r0, r3
 8012caa:	f7fe fcb7 	bl	801161c <ld_word>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012cb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d106      	bne.n	8012cc6 <find_volume+0x272>
 8012cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cba:	3330      	adds	r3, #48	@ 0x30
 8012cbc:	3320      	adds	r3, #32
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	f7fe fcc5 	bl	801164e <ld_dword>
 8012cc4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cc8:	3330      	adds	r3, #48	@ 0x30
 8012cca:	330e      	adds	r3, #14
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f7fe fca5 	bl	801161c <ld_word>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012cd6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d101      	bne.n	8012ce0 <find_volume+0x28c>
 8012cdc:	230d      	movs	r3, #13
 8012cde:	e0fa      	b.n	8012ed6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012ce0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012ce2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ce4:	4413      	add	r3, r2
 8012ce6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012ce8:	8912      	ldrh	r2, [r2, #8]
 8012cea:	0912      	lsrs	r2, r2, #4
 8012cec:	b292      	uxth	r2, r2
 8012cee:	4413      	add	r3, r2
 8012cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012cf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cf6:	429a      	cmp	r2, r3
 8012cf8:	d204      	bcs.n	8012d04 <find_volume+0x2b0>
 8012cfa:	230d      	movs	r3, #13
 8012cfc:	e0eb      	b.n	8012ed6 <find_volume+0x482>
 8012cfe:	bf00      	nop
 8012d00:	200019e4 	.word	0x200019e4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012d04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d08:	1ad3      	subs	r3, r2, r3
 8012d0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012d0c:	8952      	ldrh	r2, [r2, #10]
 8012d0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012d12:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d101      	bne.n	8012d1e <find_volume+0x2ca>
 8012d1a:	230d      	movs	r3, #13
 8012d1c:	e0db      	b.n	8012ed6 <find_volume+0x482>
		fmt = FS_FAT32;
 8012d1e:	2303      	movs	r3, #3
 8012d20:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d26:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8012d2a:	4293      	cmp	r3, r2
 8012d2c:	d802      	bhi.n	8012d34 <find_volume+0x2e0>
 8012d2e:	2302      	movs	r3, #2
 8012d30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d36:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8012d3a:	4293      	cmp	r3, r2
 8012d3c:	d802      	bhi.n	8012d44 <find_volume+0x2f0>
 8012d3e:	2301      	movs	r3, #1
 8012d40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d46:	1c9a      	adds	r2, r3, #2
 8012d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d4a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8012d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d4e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012d50:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012d52:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012d54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d56:	441a      	add	r2, r3
 8012d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d5a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8012d5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d60:	441a      	add	r2, r3
 8012d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d64:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8012d66:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012d6a:	2b03      	cmp	r3, #3
 8012d6c:	d11e      	bne.n	8012dac <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d70:	3330      	adds	r3, #48	@ 0x30
 8012d72:	332a      	adds	r3, #42	@ 0x2a
 8012d74:	4618      	mov	r0, r3
 8012d76:	f7fe fc51 	bl	801161c <ld_word>
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d001      	beq.n	8012d84 <find_volume+0x330>
 8012d80:	230d      	movs	r3, #13
 8012d82:	e0a8      	b.n	8012ed6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d86:	891b      	ldrh	r3, [r3, #8]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d001      	beq.n	8012d90 <find_volume+0x33c>
 8012d8c:	230d      	movs	r3, #13
 8012d8e:	e0a2      	b.n	8012ed6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d92:	3330      	adds	r3, #48	@ 0x30
 8012d94:	332c      	adds	r3, #44	@ 0x2c
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7fe fc59 	bl	801164e <ld_dword>
 8012d9c:	4602      	mov	r2, r0
 8012d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012da0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012da4:	695b      	ldr	r3, [r3, #20]
 8012da6:	009b      	lsls	r3, r3, #2
 8012da8:	647b      	str	r3, [r7, #68]	@ 0x44
 8012daa:	e01f      	b.n	8012dec <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dae:	891b      	ldrh	r3, [r3, #8]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d101      	bne.n	8012db8 <find_volume+0x364>
 8012db4:	230d      	movs	r3, #13
 8012db6:	e08e      	b.n	8012ed6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dba:	6a1a      	ldr	r2, [r3, #32]
 8012dbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012dbe:	441a      	add	r2, r3
 8012dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dc2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012dc4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012dc8:	2b02      	cmp	r3, #2
 8012dca:	d103      	bne.n	8012dd4 <find_volume+0x380>
 8012dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dce:	695b      	ldr	r3, [r3, #20]
 8012dd0:	005b      	lsls	r3, r3, #1
 8012dd2:	e00a      	b.n	8012dea <find_volume+0x396>
 8012dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dd6:	695a      	ldr	r2, [r3, #20]
 8012dd8:	4613      	mov	r3, r2
 8012dda:	005b      	lsls	r3, r3, #1
 8012ddc:	4413      	add	r3, r2
 8012dde:	085a      	lsrs	r2, r3, #1
 8012de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012de2:	695b      	ldr	r3, [r3, #20]
 8012de4:	f003 0301 	and.w	r3, r3, #1
 8012de8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012dea:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dee:	699a      	ldr	r2, [r3, #24]
 8012df0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012df2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8012df6:	0a5b      	lsrs	r3, r3, #9
 8012df8:	429a      	cmp	r2, r3
 8012dfa:	d201      	bcs.n	8012e00 <find_volume+0x3ac>
 8012dfc:	230d      	movs	r3, #13
 8012dfe:	e06a      	b.n	8012ed6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e02:	f04f 32ff 	mov.w	r2, #4294967295
 8012e06:	611a      	str	r2, [r3, #16]
 8012e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e0a:	691a      	ldr	r2, [r3, #16]
 8012e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e0e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8012e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e12:	2280      	movs	r2, #128	@ 0x80
 8012e14:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012e16:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012e1a:	2b03      	cmp	r3, #3
 8012e1c:	d149      	bne.n	8012eb2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e20:	3330      	adds	r3, #48	@ 0x30
 8012e22:	3330      	adds	r3, #48	@ 0x30
 8012e24:	4618      	mov	r0, r3
 8012e26:	f7fe fbf9 	bl	801161c <ld_word>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	2b01      	cmp	r3, #1
 8012e2e:	d140      	bne.n	8012eb2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012e30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e32:	3301      	adds	r3, #1
 8012e34:	4619      	mov	r1, r3
 8012e36:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012e38:	f7fe fea2 	bl	8011b80 <move_window>
 8012e3c:	4603      	mov	r3, r0
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d137      	bne.n	8012eb2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8012e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e44:	2200      	movs	r2, #0
 8012e46:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e4a:	3330      	adds	r3, #48	@ 0x30
 8012e4c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012e50:	4618      	mov	r0, r3
 8012e52:	f7fe fbe3 	bl	801161c <ld_word>
 8012e56:	4603      	mov	r3, r0
 8012e58:	461a      	mov	r2, r3
 8012e5a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012e5e:	429a      	cmp	r2, r3
 8012e60:	d127      	bne.n	8012eb2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e64:	3330      	adds	r3, #48	@ 0x30
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7fe fbf1 	bl	801164e <ld_dword>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8012ee0 <find_volume+0x48c>)
 8012e70:	4293      	cmp	r3, r2
 8012e72:	d11e      	bne.n	8012eb2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e76:	3330      	adds	r3, #48	@ 0x30
 8012e78:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7fe fbe6 	bl	801164e <ld_dword>
 8012e82:	4603      	mov	r3, r0
 8012e84:	4a17      	ldr	r2, [pc, #92]	@ (8012ee4 <find_volume+0x490>)
 8012e86:	4293      	cmp	r3, r2
 8012e88:	d113      	bne.n	8012eb2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e8c:	3330      	adds	r3, #48	@ 0x30
 8012e8e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8012e92:	4618      	mov	r0, r3
 8012e94:	f7fe fbdb 	bl	801164e <ld_dword>
 8012e98:	4602      	mov	r2, r0
 8012e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e9c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ea0:	3330      	adds	r3, #48	@ 0x30
 8012ea2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7fe fbd1 	bl	801164e <ld_dword>
 8012eac:	4602      	mov	r2, r0
 8012eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012eb0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012eb4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8012eb8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012eba:	4b0b      	ldr	r3, [pc, #44]	@ (8012ee8 <find_volume+0x494>)
 8012ebc:	881b      	ldrh	r3, [r3, #0]
 8012ebe:	3301      	adds	r3, #1
 8012ec0:	b29a      	uxth	r2, r3
 8012ec2:	4b09      	ldr	r3, [pc, #36]	@ (8012ee8 <find_volume+0x494>)
 8012ec4:	801a      	strh	r2, [r3, #0]
 8012ec6:	4b08      	ldr	r3, [pc, #32]	@ (8012ee8 <find_volume+0x494>)
 8012ec8:	881a      	ldrh	r2, [r3, #0]
 8012eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ecc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012ece:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012ed0:	f7fe fdee 	bl	8011ab0 <clear_lock>
#endif
	return FR_OK;
 8012ed4:	2300      	movs	r3, #0
}
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	3758      	adds	r7, #88	@ 0x58
 8012eda:	46bd      	mov	sp, r7
 8012edc:	bd80      	pop	{r7, pc}
 8012ede:	bf00      	nop
 8012ee0:	41615252 	.word	0x41615252
 8012ee4:	61417272 	.word	0x61417272
 8012ee8:	200019e8 	.word	0x200019e8

08012eec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b084      	sub	sp, #16
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
 8012ef4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012ef6:	2309      	movs	r3, #9
 8012ef8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d01c      	beq.n	8012f3a <validate+0x4e>
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d018      	beq.n	8012f3a <validate+0x4e>
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	781b      	ldrb	r3, [r3, #0]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d013      	beq.n	8012f3a <validate+0x4e>
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	889a      	ldrh	r2, [r3, #4]
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	88db      	ldrh	r3, [r3, #6]
 8012f1c:	429a      	cmp	r2, r3
 8012f1e:	d10c      	bne.n	8012f3a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	785b      	ldrb	r3, [r3, #1]
 8012f26:	4618      	mov	r0, r3
 8012f28:	f7fe fada 	bl	80114e0 <disk_status>
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	f003 0301 	and.w	r3, r3, #1
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d101      	bne.n	8012f3a <validate+0x4e>
			res = FR_OK;
 8012f36:	2300      	movs	r3, #0
 8012f38:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012f3a:	7bfb      	ldrb	r3, [r7, #15]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d102      	bne.n	8012f46 <validate+0x5a>
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	e000      	b.n	8012f48 <validate+0x5c>
 8012f46:	2300      	movs	r3, #0
 8012f48:	683a      	ldr	r2, [r7, #0]
 8012f4a:	6013      	str	r3, [r2, #0]
	return res;
 8012f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f4e:	4618      	mov	r0, r3
 8012f50:	3710      	adds	r7, #16
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bd80      	pop	{r7, pc}
	...

08012f58 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b088      	sub	sp, #32
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	60f8      	str	r0, [r7, #12]
 8012f60:	60b9      	str	r1, [r7, #8]
 8012f62:	4613      	mov	r3, r2
 8012f64:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012f6a:	f107 0310 	add.w	r3, r7, #16
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f7ff fcd5 	bl	801291e <get_ldnumber>
 8012f74:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012f76:	69fb      	ldr	r3, [r7, #28]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	da01      	bge.n	8012f80 <f_mount+0x28>
 8012f7c:	230b      	movs	r3, #11
 8012f7e:	e02b      	b.n	8012fd8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012f80:	4a17      	ldr	r2, [pc, #92]	@ (8012fe0 <f_mount+0x88>)
 8012f82:	69fb      	ldr	r3, [r7, #28]
 8012f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012f88:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012f8a:	69bb      	ldr	r3, [r7, #24]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d005      	beq.n	8012f9c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012f90:	69b8      	ldr	r0, [r7, #24]
 8012f92:	f7fe fd8d 	bl	8011ab0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012f96:	69bb      	ldr	r3, [r7, #24]
 8012f98:	2200      	movs	r2, #0
 8012f9a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d002      	beq.n	8012fa8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012fa8:	68fa      	ldr	r2, [r7, #12]
 8012faa:	490d      	ldr	r1, [pc, #52]	@ (8012fe0 <f_mount+0x88>)
 8012fac:	69fb      	ldr	r3, [r7, #28]
 8012fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d002      	beq.n	8012fbe <f_mount+0x66>
 8012fb8:	79fb      	ldrb	r3, [r7, #7]
 8012fba:	2b01      	cmp	r3, #1
 8012fbc:	d001      	beq.n	8012fc2 <f_mount+0x6a>
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	e00a      	b.n	8012fd8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012fc2:	f107 010c 	add.w	r1, r7, #12
 8012fc6:	f107 0308 	add.w	r3, r7, #8
 8012fca:	2200      	movs	r2, #0
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f7ff fd41 	bl	8012a54 <find_volume>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fd8:	4618      	mov	r0, r3
 8012fda:	3720      	adds	r7, #32
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}
 8012fe0:	200019e4 	.word	0x200019e4

08012fe4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b098      	sub	sp, #96	@ 0x60
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	60f8      	str	r0, [r7, #12]
 8012fec:	60b9      	str	r1, [r7, #8]
 8012fee:	4613      	mov	r3, r2
 8012ff0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d101      	bne.n	8012ffc <f_open+0x18>
 8012ff8:	2309      	movs	r3, #9
 8012ffa:	e1a9      	b.n	8013350 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012ffc:	79fb      	ldrb	r3, [r7, #7]
 8012ffe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013002:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013004:	79fa      	ldrb	r2, [r7, #7]
 8013006:	f107 0110 	add.w	r1, r7, #16
 801300a:	f107 0308 	add.w	r3, r7, #8
 801300e:	4618      	mov	r0, r3
 8013010:	f7ff fd20 	bl	8012a54 <find_volume>
 8013014:	4603      	mov	r3, r0
 8013016:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 801301a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801301e:	2b00      	cmp	r3, #0
 8013020:	f040 818d 	bne.w	801333e <f_open+0x35a>
		dj.obj.fs = fs;
 8013024:	693b      	ldr	r3, [r7, #16]
 8013026:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013028:	68ba      	ldr	r2, [r7, #8]
 801302a:	f107 0314 	add.w	r3, r7, #20
 801302e:	4611      	mov	r1, r2
 8013030:	4618      	mov	r0, r3
 8013032:	f7ff fc03 	bl	801283c <follow_path>
 8013036:	4603      	mov	r3, r0
 8013038:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801303c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013040:	2b00      	cmp	r3, #0
 8013042:	d118      	bne.n	8013076 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013044:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013048:	b25b      	sxtb	r3, r3
 801304a:	2b00      	cmp	r3, #0
 801304c:	da03      	bge.n	8013056 <f_open+0x72>
				res = FR_INVALID_NAME;
 801304e:	2306      	movs	r3, #6
 8013050:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013054:	e00f      	b.n	8013076 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013056:	79fb      	ldrb	r3, [r7, #7]
 8013058:	2b01      	cmp	r3, #1
 801305a:	bf8c      	ite	hi
 801305c:	2301      	movhi	r3, #1
 801305e:	2300      	movls	r3, #0
 8013060:	b2db      	uxtb	r3, r3
 8013062:	461a      	mov	r2, r3
 8013064:	f107 0314 	add.w	r3, r7, #20
 8013068:	4611      	mov	r1, r2
 801306a:	4618      	mov	r0, r3
 801306c:	f7fe fbd8 	bl	8011820 <chk_lock>
 8013070:	4603      	mov	r3, r0
 8013072:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013076:	79fb      	ldrb	r3, [r7, #7]
 8013078:	f003 031c 	and.w	r3, r3, #28
 801307c:	2b00      	cmp	r3, #0
 801307e:	d07f      	beq.n	8013180 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8013080:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013084:	2b00      	cmp	r3, #0
 8013086:	d017      	beq.n	80130b8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013088:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801308c:	2b04      	cmp	r3, #4
 801308e:	d10e      	bne.n	80130ae <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013090:	f7fe fc22 	bl	80118d8 <enq_lock>
 8013094:	4603      	mov	r3, r0
 8013096:	2b00      	cmp	r3, #0
 8013098:	d006      	beq.n	80130a8 <f_open+0xc4>
 801309a:	f107 0314 	add.w	r3, r7, #20
 801309e:	4618      	mov	r0, r3
 80130a0:	f7ff fb06 	bl	80126b0 <dir_register>
 80130a4:	4603      	mov	r3, r0
 80130a6:	e000      	b.n	80130aa <f_open+0xc6>
 80130a8:	2312      	movs	r3, #18
 80130aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80130ae:	79fb      	ldrb	r3, [r7, #7]
 80130b0:	f043 0308 	orr.w	r3, r3, #8
 80130b4:	71fb      	strb	r3, [r7, #7]
 80130b6:	e010      	b.n	80130da <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80130b8:	7ebb      	ldrb	r3, [r7, #26]
 80130ba:	f003 0311 	and.w	r3, r3, #17
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d003      	beq.n	80130ca <f_open+0xe6>
					res = FR_DENIED;
 80130c2:	2307      	movs	r3, #7
 80130c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80130c8:	e007      	b.n	80130da <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80130ca:	79fb      	ldrb	r3, [r7, #7]
 80130cc:	f003 0304 	and.w	r3, r3, #4
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d002      	beq.n	80130da <f_open+0xf6>
 80130d4:	2308      	movs	r3, #8
 80130d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80130da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d168      	bne.n	80131b4 <f_open+0x1d0>
 80130e2:	79fb      	ldrb	r3, [r7, #7]
 80130e4:	f003 0308 	and.w	r3, r3, #8
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d063      	beq.n	80131b4 <f_open+0x1d0>
				dw = GET_FATTIME();
 80130ec:	f7fd ff18 	bl	8010f20 <get_fattime>
 80130f0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80130f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80130f4:	330e      	adds	r3, #14
 80130f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80130f8:	4618      	mov	r0, r3
 80130fa:	f7fe fae6 	bl	80116ca <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80130fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013100:	3316      	adds	r3, #22
 8013102:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013104:	4618      	mov	r0, r3
 8013106:	f7fe fae0 	bl	80116ca <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801310a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801310c:	330b      	adds	r3, #11
 801310e:	2220      	movs	r2, #32
 8013110:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013112:	693b      	ldr	r3, [r7, #16]
 8013114:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013116:	4611      	mov	r1, r2
 8013118:	4618      	mov	r0, r3
 801311a:	f7ff fa35 	bl	8012588 <ld_clust>
 801311e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013120:	693b      	ldr	r3, [r7, #16]
 8013122:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013124:	2200      	movs	r2, #0
 8013126:	4618      	mov	r0, r3
 8013128:	f7ff fa4d 	bl	80125c6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801312c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801312e:	331c      	adds	r3, #28
 8013130:	2100      	movs	r1, #0
 8013132:	4618      	mov	r0, r3
 8013134:	f7fe fac9 	bl	80116ca <st_dword>
					fs->wflag = 1;
 8013138:	693b      	ldr	r3, [r7, #16]
 801313a:	2201      	movs	r2, #1
 801313c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801313e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013140:	2b00      	cmp	r3, #0
 8013142:	d037      	beq.n	80131b4 <f_open+0x1d0>
						dw = fs->winsect;
 8013144:	693b      	ldr	r3, [r7, #16]
 8013146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013148:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801314a:	f107 0314 	add.w	r3, r7, #20
 801314e:	2200      	movs	r2, #0
 8013150:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8013152:	4618      	mov	r0, r3
 8013154:	f7fe ff60 	bl	8012018 <remove_chain>
 8013158:	4603      	mov	r3, r0
 801315a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801315e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013162:	2b00      	cmp	r3, #0
 8013164:	d126      	bne.n	80131b4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8013166:	693b      	ldr	r3, [r7, #16]
 8013168:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801316a:	4618      	mov	r0, r3
 801316c:	f7fe fd08 	bl	8011b80 <move_window>
 8013170:	4603      	mov	r3, r0
 8013172:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801317a:	3a01      	subs	r2, #1
 801317c:	60da      	str	r2, [r3, #12]
 801317e:	e019      	b.n	80131b4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013180:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013184:	2b00      	cmp	r3, #0
 8013186:	d115      	bne.n	80131b4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013188:	7ebb      	ldrb	r3, [r7, #26]
 801318a:	f003 0310 	and.w	r3, r3, #16
 801318e:	2b00      	cmp	r3, #0
 8013190:	d003      	beq.n	801319a <f_open+0x1b6>
					res = FR_NO_FILE;
 8013192:	2304      	movs	r3, #4
 8013194:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013198:	e00c      	b.n	80131b4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801319a:	79fb      	ldrb	r3, [r7, #7]
 801319c:	f003 0302 	and.w	r3, r3, #2
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d007      	beq.n	80131b4 <f_open+0x1d0>
 80131a4:	7ebb      	ldrb	r3, [r7, #26]
 80131a6:	f003 0301 	and.w	r3, r3, #1
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d002      	beq.n	80131b4 <f_open+0x1d0>
						res = FR_DENIED;
 80131ae:	2307      	movs	r3, #7
 80131b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80131b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d126      	bne.n	801320a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80131bc:	79fb      	ldrb	r3, [r7, #7]
 80131be:	f003 0308 	and.w	r3, r3, #8
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d003      	beq.n	80131ce <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80131c6:	79fb      	ldrb	r3, [r7, #7]
 80131c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80131cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80131ce:	693b      	ldr	r3, [r7, #16]
 80131d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80131d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80131dc:	79fb      	ldrb	r3, [r7, #7]
 80131de:	2b01      	cmp	r3, #1
 80131e0:	bf8c      	ite	hi
 80131e2:	2301      	movhi	r3, #1
 80131e4:	2300      	movls	r3, #0
 80131e6:	b2db      	uxtb	r3, r3
 80131e8:	461a      	mov	r2, r3
 80131ea:	f107 0314 	add.w	r3, r7, #20
 80131ee:	4611      	mov	r1, r2
 80131f0:	4618      	mov	r0, r3
 80131f2:	f7fe fb93 	bl	801191c <inc_lock>
 80131f6:	4602      	mov	r2, r0
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	691b      	ldr	r3, [r3, #16]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d102      	bne.n	801320a <f_open+0x226>
 8013204:	2302      	movs	r3, #2
 8013206:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801320a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801320e:	2b00      	cmp	r3, #0
 8013210:	f040 8095 	bne.w	801333e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013214:	693b      	ldr	r3, [r7, #16]
 8013216:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013218:	4611      	mov	r1, r2
 801321a:	4618      	mov	r0, r3
 801321c:	f7ff f9b4 	bl	8012588 <ld_clust>
 8013220:	4602      	mov	r2, r0
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013228:	331c      	adds	r3, #28
 801322a:	4618      	mov	r0, r3
 801322c:	f7fe fa0f 	bl	801164e <ld_dword>
 8013230:	4602      	mov	r2, r0
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	2200      	movs	r2, #0
 801323a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801323c:	693a      	ldr	r2, [r7, #16]
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013242:	693b      	ldr	r3, [r7, #16]
 8013244:	88da      	ldrh	r2, [r3, #6]
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	79fa      	ldrb	r2, [r7, #7]
 801324e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	2200      	movs	r2, #0
 8013254:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	2200      	movs	r2, #0
 801325a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	2200      	movs	r2, #0
 8013260:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	3330      	adds	r3, #48	@ 0x30
 8013266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801326a:	2100      	movs	r1, #0
 801326c:	4618      	mov	r0, r3
 801326e:	f7fe fa79 	bl	8011764 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013272:	79fb      	ldrb	r3, [r7, #7]
 8013274:	f003 0320 	and.w	r3, r3, #32
 8013278:	2b00      	cmp	r3, #0
 801327a:	d060      	beq.n	801333e <f_open+0x35a>
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	68db      	ldr	r3, [r3, #12]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d05c      	beq.n	801333e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	68da      	ldr	r2, [r3, #12]
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801328c:	693b      	ldr	r3, [r7, #16]
 801328e:	895b      	ldrh	r3, [r3, #10]
 8013290:	025b      	lsls	r3, r3, #9
 8013292:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	689b      	ldr	r3, [r3, #8]
 8013298:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	68db      	ldr	r3, [r3, #12]
 801329e:	657b      	str	r3, [r7, #84]	@ 0x54
 80132a0:	e016      	b.n	80132d0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80132a6:	4618      	mov	r0, r3
 80132a8:	f7fe fd25 	bl	8011cf6 <get_fat>
 80132ac:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80132ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80132b0:	2b01      	cmp	r3, #1
 80132b2:	d802      	bhi.n	80132ba <f_open+0x2d6>
 80132b4:	2302      	movs	r3, #2
 80132b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80132ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80132bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132c0:	d102      	bne.n	80132c8 <f_open+0x2e4>
 80132c2:	2301      	movs	r3, #1
 80132c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80132c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80132ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80132cc:	1ad3      	subs	r3, r2, r3
 80132ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80132d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d103      	bne.n	80132e0 <f_open+0x2fc>
 80132d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80132da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80132dc:	429a      	cmp	r2, r3
 80132de:	d8e0      	bhi.n	80132a2 <f_open+0x2be>
				}
				fp->clust = clst;
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80132e4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80132e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d127      	bne.n	801333e <f_open+0x35a>
 80132ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d022      	beq.n	801333e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80132f8:	693b      	ldr	r3, [r7, #16]
 80132fa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80132fc:	4618      	mov	r0, r3
 80132fe:	f7fe fcdb 	bl	8011cb8 <clust2sect>
 8013302:	6478      	str	r0, [r7, #68]	@ 0x44
 8013304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013306:	2b00      	cmp	r3, #0
 8013308:	d103      	bne.n	8013312 <f_open+0x32e>
						res = FR_INT_ERR;
 801330a:	2302      	movs	r3, #2
 801330c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013310:	e015      	b.n	801333e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013314:	0a5a      	lsrs	r2, r3, #9
 8013316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013318:	441a      	add	r2, r3
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801331e:	693b      	ldr	r3, [r7, #16]
 8013320:	7858      	ldrb	r0, [r3, #1]
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	6a1a      	ldr	r2, [r3, #32]
 801332c:	2301      	movs	r3, #1
 801332e:	f7fe f917 	bl	8011560 <disk_read>
 8013332:	4603      	mov	r3, r0
 8013334:	2b00      	cmp	r3, #0
 8013336:	d002      	beq.n	801333e <f_open+0x35a>
 8013338:	2301      	movs	r3, #1
 801333a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801333e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013342:	2b00      	cmp	r3, #0
 8013344:	d002      	beq.n	801334c <f_open+0x368>
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	2200      	movs	r2, #0
 801334a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801334c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8013350:	4618      	mov	r0, r3
 8013352:	3760      	adds	r7, #96	@ 0x60
 8013354:	46bd      	mov	sp, r7
 8013356:	bd80      	pop	{r7, pc}

08013358 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b08c      	sub	sp, #48	@ 0x30
 801335c:	af00      	add	r7, sp, #0
 801335e:	60f8      	str	r0, [r7, #12]
 8013360:	60b9      	str	r1, [r7, #8]
 8013362:	607a      	str	r2, [r7, #4]
 8013364:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801336a:	683b      	ldr	r3, [r7, #0]
 801336c:	2200      	movs	r2, #0
 801336e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	f107 0210 	add.w	r2, r7, #16
 8013376:	4611      	mov	r1, r2
 8013378:	4618      	mov	r0, r3
 801337a:	f7ff fdb7 	bl	8012eec <validate>
 801337e:	4603      	mov	r3, r0
 8013380:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013384:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013388:	2b00      	cmp	r3, #0
 801338a:	d107      	bne.n	801339c <f_write+0x44>
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	7d5b      	ldrb	r3, [r3, #21]
 8013390:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8013394:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013398:	2b00      	cmp	r3, #0
 801339a:	d002      	beq.n	80133a2 <f_write+0x4a>
 801339c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80133a0:	e14b      	b.n	801363a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	7d1b      	ldrb	r3, [r3, #20]
 80133a6:	f003 0302 	and.w	r3, r3, #2
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d101      	bne.n	80133b2 <f_write+0x5a>
 80133ae:	2307      	movs	r3, #7
 80133b0:	e143      	b.n	801363a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	699a      	ldr	r2, [r3, #24]
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	441a      	add	r2, r3
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	699b      	ldr	r3, [r3, #24]
 80133be:	429a      	cmp	r2, r3
 80133c0:	f080 812d 	bcs.w	801361e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	699b      	ldr	r3, [r3, #24]
 80133c8:	43db      	mvns	r3, r3
 80133ca:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80133cc:	e127      	b.n	801361e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	699b      	ldr	r3, [r3, #24]
 80133d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	f040 80e3 	bne.w	80135a2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	699b      	ldr	r3, [r3, #24]
 80133e0:	0a5b      	lsrs	r3, r3, #9
 80133e2:	693a      	ldr	r2, [r7, #16]
 80133e4:	8952      	ldrh	r2, [r2, #10]
 80133e6:	3a01      	subs	r2, #1
 80133e8:	4013      	ands	r3, r2
 80133ea:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80133ec:	69bb      	ldr	r3, [r7, #24]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d143      	bne.n	801347a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	699b      	ldr	r3, [r3, #24]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d10c      	bne.n	8013414 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	689b      	ldr	r3, [r3, #8]
 80133fe:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013402:	2b00      	cmp	r3, #0
 8013404:	d11a      	bne.n	801343c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	2100      	movs	r1, #0
 801340a:	4618      	mov	r0, r3
 801340c:	f7fe fe69 	bl	80120e2 <create_chain>
 8013410:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013412:	e013      	b.n	801343c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013418:	2b00      	cmp	r3, #0
 801341a:	d007      	beq.n	801342c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	699b      	ldr	r3, [r3, #24]
 8013420:	4619      	mov	r1, r3
 8013422:	68f8      	ldr	r0, [r7, #12]
 8013424:	f7fe fef5 	bl	8012212 <clmt_clust>
 8013428:	62b8      	str	r0, [r7, #40]	@ 0x28
 801342a:	e007      	b.n	801343c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801342c:	68fa      	ldr	r2, [r7, #12]
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	69db      	ldr	r3, [r3, #28]
 8013432:	4619      	mov	r1, r3
 8013434:	4610      	mov	r0, r2
 8013436:	f7fe fe54 	bl	80120e2 <create_chain>
 801343a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801343c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801343e:	2b00      	cmp	r3, #0
 8013440:	f000 80f2 	beq.w	8013628 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013446:	2b01      	cmp	r3, #1
 8013448:	d104      	bne.n	8013454 <f_write+0xfc>
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	2202      	movs	r2, #2
 801344e:	755a      	strb	r2, [r3, #21]
 8013450:	2302      	movs	r3, #2
 8013452:	e0f2      	b.n	801363a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013456:	f1b3 3fff 	cmp.w	r3, #4294967295
 801345a:	d104      	bne.n	8013466 <f_write+0x10e>
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	2201      	movs	r2, #1
 8013460:	755a      	strb	r2, [r3, #21]
 8013462:	2301      	movs	r3, #1
 8013464:	e0e9      	b.n	801363a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801346a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	689b      	ldr	r3, [r3, #8]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d102      	bne.n	801347a <f_write+0x122>
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013478:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	7d1b      	ldrb	r3, [r3, #20]
 801347e:	b25b      	sxtb	r3, r3
 8013480:	2b00      	cmp	r3, #0
 8013482:	da18      	bge.n	80134b6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013484:	693b      	ldr	r3, [r7, #16]
 8013486:	7858      	ldrb	r0, [r3, #1]
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	6a1a      	ldr	r2, [r3, #32]
 8013492:	2301      	movs	r3, #1
 8013494:	f7fe f884 	bl	80115a0 <disk_write>
 8013498:	4603      	mov	r3, r0
 801349a:	2b00      	cmp	r3, #0
 801349c:	d004      	beq.n	80134a8 <f_write+0x150>
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	2201      	movs	r2, #1
 80134a2:	755a      	strb	r2, [r3, #21]
 80134a4:	2301      	movs	r3, #1
 80134a6:	e0c8      	b.n	801363a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	7d1b      	ldrb	r3, [r3, #20]
 80134ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80134b0:	b2da      	uxtb	r2, r3
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80134b6:	693a      	ldr	r2, [r7, #16]
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	69db      	ldr	r3, [r3, #28]
 80134bc:	4619      	mov	r1, r3
 80134be:	4610      	mov	r0, r2
 80134c0:	f7fe fbfa 	bl	8011cb8 <clust2sect>
 80134c4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80134c6:	697b      	ldr	r3, [r7, #20]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d104      	bne.n	80134d6 <f_write+0x17e>
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	2202      	movs	r2, #2
 80134d0:	755a      	strb	r2, [r3, #21]
 80134d2:	2302      	movs	r3, #2
 80134d4:	e0b1      	b.n	801363a <f_write+0x2e2>
			sect += csect;
 80134d6:	697a      	ldr	r2, [r7, #20]
 80134d8:	69bb      	ldr	r3, [r7, #24]
 80134da:	4413      	add	r3, r2
 80134dc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	0a5b      	lsrs	r3, r3, #9
 80134e2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80134e4:	6a3b      	ldr	r3, [r7, #32]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d03c      	beq.n	8013564 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80134ea:	69ba      	ldr	r2, [r7, #24]
 80134ec:	6a3b      	ldr	r3, [r7, #32]
 80134ee:	4413      	add	r3, r2
 80134f0:	693a      	ldr	r2, [r7, #16]
 80134f2:	8952      	ldrh	r2, [r2, #10]
 80134f4:	4293      	cmp	r3, r2
 80134f6:	d905      	bls.n	8013504 <f_write+0x1ac>
					cc = fs->csize - csect;
 80134f8:	693b      	ldr	r3, [r7, #16]
 80134fa:	895b      	ldrh	r3, [r3, #10]
 80134fc:	461a      	mov	r2, r3
 80134fe:	69bb      	ldr	r3, [r7, #24]
 8013500:	1ad3      	subs	r3, r2, r3
 8013502:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013504:	693b      	ldr	r3, [r7, #16]
 8013506:	7858      	ldrb	r0, [r3, #1]
 8013508:	6a3b      	ldr	r3, [r7, #32]
 801350a:	697a      	ldr	r2, [r7, #20]
 801350c:	69f9      	ldr	r1, [r7, #28]
 801350e:	f7fe f847 	bl	80115a0 <disk_write>
 8013512:	4603      	mov	r3, r0
 8013514:	2b00      	cmp	r3, #0
 8013516:	d004      	beq.n	8013522 <f_write+0x1ca>
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	2201      	movs	r2, #1
 801351c:	755a      	strb	r2, [r3, #21]
 801351e:	2301      	movs	r3, #1
 8013520:	e08b      	b.n	801363a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	6a1a      	ldr	r2, [r3, #32]
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	1ad3      	subs	r3, r2, r3
 801352a:	6a3a      	ldr	r2, [r7, #32]
 801352c:	429a      	cmp	r2, r3
 801352e:	d915      	bls.n	801355c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	6a1a      	ldr	r2, [r3, #32]
 801353a:	697b      	ldr	r3, [r7, #20]
 801353c:	1ad3      	subs	r3, r2, r3
 801353e:	025b      	lsls	r3, r3, #9
 8013540:	69fa      	ldr	r2, [r7, #28]
 8013542:	4413      	add	r3, r2
 8013544:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013548:	4619      	mov	r1, r3
 801354a:	f7fe f8ea 	bl	8011722 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	7d1b      	ldrb	r3, [r3, #20]
 8013552:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013556:	b2da      	uxtb	r2, r3
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801355c:	6a3b      	ldr	r3, [r7, #32]
 801355e:	025b      	lsls	r3, r3, #9
 8013560:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8013562:	e03f      	b.n	80135e4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	6a1b      	ldr	r3, [r3, #32]
 8013568:	697a      	ldr	r2, [r7, #20]
 801356a:	429a      	cmp	r2, r3
 801356c:	d016      	beq.n	801359c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	699a      	ldr	r2, [r3, #24]
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013576:	429a      	cmp	r2, r3
 8013578:	d210      	bcs.n	801359c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801357a:	693b      	ldr	r3, [r7, #16]
 801357c:	7858      	ldrb	r0, [r3, #1]
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013584:	2301      	movs	r3, #1
 8013586:	697a      	ldr	r2, [r7, #20]
 8013588:	f7fd ffea 	bl	8011560 <disk_read>
 801358c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801358e:	2b00      	cmp	r3, #0
 8013590:	d004      	beq.n	801359c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	2201      	movs	r2, #1
 8013596:	755a      	strb	r2, [r3, #21]
 8013598:	2301      	movs	r3, #1
 801359a:	e04e      	b.n	801363a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	697a      	ldr	r2, [r7, #20]
 80135a0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	699b      	ldr	r3, [r3, #24]
 80135a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80135aa:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80135ae:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80135b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	429a      	cmp	r2, r3
 80135b6:	d901      	bls.n	80135bc <f_write+0x264>
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	699b      	ldr	r3, [r3, #24]
 80135c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80135ca:	4413      	add	r3, r2
 80135cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80135ce:	69f9      	ldr	r1, [r7, #28]
 80135d0:	4618      	mov	r0, r3
 80135d2:	f7fe f8a6 	bl	8011722 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	7d1b      	ldrb	r3, [r3, #20]
 80135da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80135de:	b2da      	uxtb	r2, r3
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80135e4:	69fa      	ldr	r2, [r7, #28]
 80135e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135e8:	4413      	add	r3, r2
 80135ea:	61fb      	str	r3, [r7, #28]
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	699a      	ldr	r2, [r3, #24]
 80135f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135f2:	441a      	add	r2, r3
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	619a      	str	r2, [r3, #24]
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	68da      	ldr	r2, [r3, #12]
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	699b      	ldr	r3, [r3, #24]
 8013600:	429a      	cmp	r2, r3
 8013602:	bf38      	it	cc
 8013604:	461a      	movcc	r2, r3
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	60da      	str	r2, [r3, #12]
 801360a:	683b      	ldr	r3, [r7, #0]
 801360c:	681a      	ldr	r2, [r3, #0]
 801360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013610:	441a      	add	r2, r3
 8013612:	683b      	ldr	r3, [r7, #0]
 8013614:	601a      	str	r2, [r3, #0]
 8013616:	687a      	ldr	r2, [r7, #4]
 8013618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801361a:	1ad3      	subs	r3, r2, r3
 801361c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	2b00      	cmp	r3, #0
 8013622:	f47f aed4 	bne.w	80133ce <f_write+0x76>
 8013626:	e000      	b.n	801362a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013628:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	7d1b      	ldrb	r3, [r3, #20]
 801362e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013632:	b2da      	uxtb	r2, r3
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013638:	2300      	movs	r3, #0
}
 801363a:	4618      	mov	r0, r3
 801363c:	3730      	adds	r7, #48	@ 0x30
 801363e:	46bd      	mov	sp, r7
 8013640:	bd80      	pop	{r7, pc}

08013642 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013642:	b580      	push	{r7, lr}
 8013644:	b086      	sub	sp, #24
 8013646:	af00      	add	r7, sp, #0
 8013648:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	f107 0208 	add.w	r2, r7, #8
 8013650:	4611      	mov	r1, r2
 8013652:	4618      	mov	r0, r3
 8013654:	f7ff fc4a 	bl	8012eec <validate>
 8013658:	4603      	mov	r3, r0
 801365a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801365c:	7dfb      	ldrb	r3, [r7, #23]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d168      	bne.n	8013734 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	7d1b      	ldrb	r3, [r3, #20]
 8013666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801366a:	2b00      	cmp	r3, #0
 801366c:	d062      	beq.n	8013734 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	7d1b      	ldrb	r3, [r3, #20]
 8013672:	b25b      	sxtb	r3, r3
 8013674:	2b00      	cmp	r3, #0
 8013676:	da15      	bge.n	80136a4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013678:	68bb      	ldr	r3, [r7, #8]
 801367a:	7858      	ldrb	r0, [r3, #1]
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	6a1a      	ldr	r2, [r3, #32]
 8013686:	2301      	movs	r3, #1
 8013688:	f7fd ff8a 	bl	80115a0 <disk_write>
 801368c:	4603      	mov	r3, r0
 801368e:	2b00      	cmp	r3, #0
 8013690:	d001      	beq.n	8013696 <f_sync+0x54>
 8013692:	2301      	movs	r3, #1
 8013694:	e04f      	b.n	8013736 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	7d1b      	ldrb	r3, [r3, #20]
 801369a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801369e:	b2da      	uxtb	r2, r3
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80136a4:	f7fd fc3c 	bl	8010f20 <get_fattime>
 80136a8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80136aa:	68ba      	ldr	r2, [r7, #8]
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136b0:	4619      	mov	r1, r3
 80136b2:	4610      	mov	r0, r2
 80136b4:	f7fe fa64 	bl	8011b80 <move_window>
 80136b8:	4603      	mov	r3, r0
 80136ba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80136bc:	7dfb      	ldrb	r3, [r7, #23]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d138      	bne.n	8013734 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80136c6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	330b      	adds	r3, #11
 80136cc:	781a      	ldrb	r2, [r3, #0]
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	330b      	adds	r3, #11
 80136d2:	f042 0220 	orr.w	r2, r2, #32
 80136d6:	b2d2      	uxtb	r2, r2
 80136d8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	6818      	ldr	r0, [r3, #0]
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	689b      	ldr	r3, [r3, #8]
 80136e2:	461a      	mov	r2, r3
 80136e4:	68f9      	ldr	r1, [r7, #12]
 80136e6:	f7fe ff6e 	bl	80125c6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	f103 021c 	add.w	r2, r3, #28
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	68db      	ldr	r3, [r3, #12]
 80136f4:	4619      	mov	r1, r3
 80136f6:	4610      	mov	r0, r2
 80136f8:	f7fd ffe7 	bl	80116ca <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	3316      	adds	r3, #22
 8013700:	6939      	ldr	r1, [r7, #16]
 8013702:	4618      	mov	r0, r3
 8013704:	f7fd ffe1 	bl	80116ca <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	3312      	adds	r3, #18
 801370c:	2100      	movs	r1, #0
 801370e:	4618      	mov	r0, r3
 8013710:	f7fd ffc0 	bl	8011694 <st_word>
					fs->wflag = 1;
 8013714:	68bb      	ldr	r3, [r7, #8]
 8013716:	2201      	movs	r2, #1
 8013718:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801371a:	68bb      	ldr	r3, [r7, #8]
 801371c:	4618      	mov	r0, r3
 801371e:	f7fe fa5d 	bl	8011bdc <sync_fs>
 8013722:	4603      	mov	r3, r0
 8013724:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	7d1b      	ldrb	r3, [r3, #20]
 801372a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801372e:	b2da      	uxtb	r2, r3
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013734:	7dfb      	ldrb	r3, [r7, #23]
}
 8013736:	4618      	mov	r0, r3
 8013738:	3718      	adds	r7, #24
 801373a:	46bd      	mov	sp, r7
 801373c:	bd80      	pop	{r7, pc}

0801373e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801373e:	b580      	push	{r7, lr}
 8013740:	b084      	sub	sp, #16
 8013742:	af00      	add	r7, sp, #0
 8013744:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013746:	6878      	ldr	r0, [r7, #4]
 8013748:	f7ff ff7b 	bl	8013642 <f_sync>
 801374c:	4603      	mov	r3, r0
 801374e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013750:	7bfb      	ldrb	r3, [r7, #15]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d118      	bne.n	8013788 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	f107 0208 	add.w	r2, r7, #8
 801375c:	4611      	mov	r1, r2
 801375e:	4618      	mov	r0, r3
 8013760:	f7ff fbc4 	bl	8012eec <validate>
 8013764:	4603      	mov	r3, r0
 8013766:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013768:	7bfb      	ldrb	r3, [r7, #15]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d10c      	bne.n	8013788 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	691b      	ldr	r3, [r3, #16]
 8013772:	4618      	mov	r0, r3
 8013774:	f7fe f960 	bl	8011a38 <dec_lock>
 8013778:	4603      	mov	r3, r0
 801377a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801377c:	7bfb      	ldrb	r3, [r7, #15]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d102      	bne.n	8013788 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	2200      	movs	r2, #0
 8013786:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013788:	7bfb      	ldrb	r3, [r7, #15]
}
 801378a:	4618      	mov	r0, r3
 801378c:	3710      	adds	r7, #16
 801378e:	46bd      	mov	sp, r7
 8013790:	bd80      	pop	{r7, pc}

08013792 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013792:	b580      	push	{r7, lr}
 8013794:	b096      	sub	sp, #88	@ 0x58
 8013796:	af00      	add	r7, sp, #0
 8013798:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801379a:	f107 0108 	add.w	r1, r7, #8
 801379e:	1d3b      	adds	r3, r7, #4
 80137a0:	2202      	movs	r2, #2
 80137a2:	4618      	mov	r0, r3
 80137a4:	f7ff f956 	bl	8012a54 <find_volume>
 80137a8:	4603      	mov	r3, r0
 80137aa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 80137ae:	68bb      	ldr	r3, [r7, #8]
 80137b0:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80137b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	f040 80ec 	bne.w	8013994 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80137bc:	687a      	ldr	r2, [r7, #4]
 80137be:	f107 030c 	add.w	r3, r7, #12
 80137c2:	4611      	mov	r1, r2
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7ff f839 	bl	801283c <follow_path>
 80137ca:	4603      	mov	r3, r0
 80137cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80137d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d102      	bne.n	80137de <f_mkdir+0x4c>
 80137d8:	2308      	movs	r3, #8
 80137da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80137de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80137e2:	2b04      	cmp	r3, #4
 80137e4:	f040 80d6 	bne.w	8013994 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80137e8:	f107 030c 	add.w	r3, r7, #12
 80137ec:	2100      	movs	r1, #0
 80137ee:	4618      	mov	r0, r3
 80137f0:	f7fe fc77 	bl	80120e2 <create_chain>
 80137f4:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80137f6:	68bb      	ldr	r3, [r7, #8]
 80137f8:	895b      	ldrh	r3, [r3, #10]
 80137fa:	025b      	lsls	r3, r3, #9
 80137fc:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80137fe:	2300      	movs	r3, #0
 8013800:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013806:	2b00      	cmp	r3, #0
 8013808:	d102      	bne.n	8013810 <f_mkdir+0x7e>
 801380a:	2307      	movs	r3, #7
 801380c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8013810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013812:	2b01      	cmp	r3, #1
 8013814:	d102      	bne.n	801381c <f_mkdir+0x8a>
 8013816:	2302      	movs	r3, #2
 8013818:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801381c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801381e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013822:	d102      	bne.n	801382a <f_mkdir+0x98>
 8013824:	2301      	movs	r3, #1
 8013826:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801382a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801382e:	2b00      	cmp	r3, #0
 8013830:	d106      	bne.n	8013840 <f_mkdir+0xae>
 8013832:	68bb      	ldr	r3, [r7, #8]
 8013834:	4618      	mov	r0, r3
 8013836:	f7fe f95f 	bl	8011af8 <sync_window>
 801383a:	4603      	mov	r3, r0
 801383c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 8013840:	f7fd fb6e 	bl	8010f20 <get_fattime>
 8013844:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013846:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801384a:	2b00      	cmp	r3, #0
 801384c:	d16a      	bne.n	8013924 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 801384e:	68bb      	ldr	r3, [r7, #8]
 8013850:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013852:	4618      	mov	r0, r3
 8013854:	f7fe fa30 	bl	8011cb8 <clust2sect>
 8013858:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 801385a:	68bb      	ldr	r3, [r7, #8]
 801385c:	3330      	adds	r3, #48	@ 0x30
 801385e:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 8013860:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013864:	2100      	movs	r1, #0
 8013866:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8013868:	f7fd ff7c 	bl	8011764 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801386c:	220b      	movs	r2, #11
 801386e:	2120      	movs	r1, #32
 8013870:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8013872:	f7fd ff77 	bl	8011764 <mem_set>
					dir[DIR_Name] = '.';
 8013876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013878:	222e      	movs	r2, #46	@ 0x2e
 801387a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801387c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801387e:	330b      	adds	r3, #11
 8013880:	2210      	movs	r2, #16
 8013882:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013886:	3316      	adds	r3, #22
 8013888:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801388a:	4618      	mov	r0, r3
 801388c:	f7fd ff1d 	bl	80116ca <st_dword>
					st_clust(fs, dir, dcl);
 8013890:	68bb      	ldr	r3, [r7, #8]
 8013892:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013894:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013896:	4618      	mov	r0, r3
 8013898:	f7fe fe95 	bl	80125c6 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801389c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801389e:	3320      	adds	r3, #32
 80138a0:	2220      	movs	r2, #32
 80138a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80138a4:	4618      	mov	r0, r3
 80138a6:	f7fd ff3c 	bl	8011722 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80138aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138ac:	3321      	adds	r3, #33	@ 0x21
 80138ae:	222e      	movs	r2, #46	@ 0x2e
 80138b0:	701a      	strb	r2, [r3, #0]
 80138b2:	697b      	ldr	r3, [r7, #20]
 80138b4:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80138b6:	68bb      	ldr	r3, [r7, #8]
 80138b8:	781b      	ldrb	r3, [r3, #0]
 80138ba:	2b03      	cmp	r3, #3
 80138bc:	d106      	bne.n	80138cc <f_mkdir+0x13a>
 80138be:	68bb      	ldr	r3, [r7, #8]
 80138c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80138c4:	429a      	cmp	r2, r3
 80138c6:	d101      	bne.n	80138cc <f_mkdir+0x13a>
 80138c8:	2300      	movs	r3, #0
 80138ca:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80138cc:	68b8      	ldr	r0, [r7, #8]
 80138ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138d0:	3320      	adds	r3, #32
 80138d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80138d4:	4619      	mov	r1, r3
 80138d6:	f7fe fe76 	bl	80125c6 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80138da:	68bb      	ldr	r3, [r7, #8]
 80138dc:	895b      	ldrh	r3, [r3, #10]
 80138de:	653b      	str	r3, [r7, #80]	@ 0x50
 80138e0:	e01b      	b.n	801391a <f_mkdir+0x188>
					fs->winsect = dsc++;
 80138e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80138e4:	1c5a      	adds	r2, r3, #1
 80138e6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80138e8:	68ba      	ldr	r2, [r7, #8]
 80138ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
					fs->wflag = 1;
 80138ec:	68bb      	ldr	r3, [r7, #8]
 80138ee:	2201      	movs	r2, #1
 80138f0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80138f2:	68bb      	ldr	r3, [r7, #8]
 80138f4:	4618      	mov	r0, r3
 80138f6:	f7fe f8ff 	bl	8011af8 <sync_window>
 80138fa:	4603      	mov	r3, r0
 80138fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 8013900:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013904:	2b00      	cmp	r3, #0
 8013906:	d10c      	bne.n	8013922 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8013908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801390c:	2100      	movs	r1, #0
 801390e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8013910:	f7fd ff28 	bl	8011764 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013916:	3b01      	subs	r3, #1
 8013918:	653b      	str	r3, [r7, #80]	@ 0x50
 801391a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801391c:	2b00      	cmp	r3, #0
 801391e:	d1e0      	bne.n	80138e2 <f_mkdir+0x150>
 8013920:	e000      	b.n	8013924 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8013922:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013924:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013928:	2b00      	cmp	r3, #0
 801392a:	d107      	bne.n	801393c <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801392c:	f107 030c 	add.w	r3, r7, #12
 8013930:	4618      	mov	r0, r3
 8013932:	f7fe febd 	bl	80126b0 <dir_register>
 8013936:	4603      	mov	r3, r0
 8013938:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 801393c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013940:	2b00      	cmp	r3, #0
 8013942:	d120      	bne.n	8013986 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013946:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801394a:	3316      	adds	r3, #22
 801394c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801394e:	4618      	mov	r0, r3
 8013950:	f7fd febb 	bl	80116ca <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013954:	68bb      	ldr	r3, [r7, #8]
 8013956:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013958:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801395a:	4618      	mov	r0, r3
 801395c:	f7fe fe33 	bl	80125c6 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013962:	330b      	adds	r3, #11
 8013964:	2210      	movs	r2, #16
 8013966:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013968:	68bb      	ldr	r3, [r7, #8]
 801396a:	2201      	movs	r2, #1
 801396c:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 801396e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013972:	2b00      	cmp	r3, #0
 8013974:	d10e      	bne.n	8013994 <f_mkdir+0x202>
					res = sync_fs(fs);
 8013976:	68bb      	ldr	r3, [r7, #8]
 8013978:	4618      	mov	r0, r3
 801397a:	f7fe f92f 	bl	8011bdc <sync_fs>
 801397e:	4603      	mov	r3, r0
 8013980:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8013984:	e006      	b.n	8013994 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013986:	f107 030c 	add.w	r3, r7, #12
 801398a:	2200      	movs	r2, #0
 801398c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801398e:	4618      	mov	r0, r3
 8013990:	f7fe fb42 	bl	8012018 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013994:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8013998:	4618      	mov	r0, r3
 801399a:	3758      	adds	r7, #88	@ 0x58
 801399c:	46bd      	mov	sp, r7
 801399e:	bd80      	pop	{r7, pc}

080139a0 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80139a0:	b590      	push	{r4, r7, lr}
 80139a2:	b09d      	sub	sp, #116	@ 0x74
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	60f8      	str	r0, [r7, #12]
 80139a8:	607a      	str	r2, [r7, #4]
 80139aa:	603b      	str	r3, [r7, #0]
 80139ac:	460b      	mov	r3, r1
 80139ae:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80139b0:	2301      	movs	r3, #1
 80139b2:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 80139b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80139b8:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80139ba:	f107 030c 	add.w	r3, r7, #12
 80139be:	4618      	mov	r0, r3
 80139c0:	f7fe ffad 	bl	801291e <get_ldnumber>
 80139c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80139c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	da02      	bge.n	80139d2 <f_mkfs+0x32>
 80139cc:	230b      	movs	r3, #11
 80139ce:	f000 bc0d 	b.w	80141ec <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80139d2:	4a94      	ldr	r2, [pc, #592]	@ (8013c24 <f_mkfs+0x284>)
 80139d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80139d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d005      	beq.n	80139ea <f_mkfs+0x4a>
 80139de:	4a91      	ldr	r2, [pc, #580]	@ (8013c24 <f_mkfs+0x284>)
 80139e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80139e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80139e6:	2200      	movs	r2, #0
 80139e8:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80139ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80139ec:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80139f0:	2300      	movs	r3, #0
 80139f2:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80139f6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80139fa:	4618      	mov	r0, r3
 80139fc:	f7fd fd8a 	bl	8011514 <disk_initialize>
 8013a00:	4603      	mov	r3, r0
 8013a02:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8013a06:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8013a0a:	f003 0301 	and.w	r3, r3, #1
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d001      	beq.n	8013a16 <f_mkfs+0x76>
 8013a12:	2303      	movs	r3, #3
 8013a14:	e3ea      	b.n	80141ec <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8013a16:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8013a1a:	f003 0304 	and.w	r3, r3, #4
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d001      	beq.n	8013a26 <f_mkfs+0x86>
 8013a22:	230a      	movs	r3, #10
 8013a24:	e3e2      	b.n	80141ec <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8013a26:	f107 0214 	add.w	r2, r7, #20
 8013a2a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8013a2e:	2103      	movs	r1, #3
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7fd fdd5 	bl	80115e0 <disk_ioctl>
 8013a36:	4603      	mov	r3, r0
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d10c      	bne.n	8013a56 <f_mkfs+0xb6>
 8013a3c:	697b      	ldr	r3, [r7, #20]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d009      	beq.n	8013a56 <f_mkfs+0xb6>
 8013a42:	697b      	ldr	r3, [r7, #20]
 8013a44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013a48:	d805      	bhi.n	8013a56 <f_mkfs+0xb6>
 8013a4a:	697b      	ldr	r3, [r7, #20]
 8013a4c:	1e5a      	subs	r2, r3, #1
 8013a4e:	697b      	ldr	r3, [r7, #20]
 8013a50:	4013      	ands	r3, r2
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d001      	beq.n	8013a5a <f_mkfs+0xba>
 8013a56:	2301      	movs	r3, #1
 8013a58:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8013a5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013a5e:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d003      	beq.n	8013a6e <f_mkfs+0xce>
 8013a66:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013a68:	687a      	ldr	r2, [r7, #4]
 8013a6a:	429a      	cmp	r2, r3
 8013a6c:	d309      	bcc.n	8013a82 <f_mkfs+0xe2>
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013a74:	d805      	bhi.n	8013a82 <f_mkfs+0xe2>
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	1e5a      	subs	r2, r3, #1
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	4013      	ands	r3, r2
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d001      	beq.n	8013a86 <f_mkfs+0xe6>
 8013a82:	2313      	movs	r3, #19
 8013a84:	e3b2      	b.n	80141ec <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8013a86:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013a88:	687a      	ldr	r2, [r7, #4]
 8013a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8013a8e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8013a90:	683b      	ldr	r3, [r7, #0]
 8013a92:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8013a94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013a96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8013a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8013aa0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8013aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013aa4:	fb02 f303 	mul.w	r3, r2, r3
 8013aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8013aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d101      	bne.n	8013ab4 <f_mkfs+0x114>
 8013ab0:	230e      	movs	r3, #14
 8013ab2:	e39b      	b.n	80141ec <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8013ab4:	f107 0210 	add.w	r2, r7, #16
 8013ab8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8013abc:	2101      	movs	r1, #1
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f7fd fd8e 	bl	80115e0 <disk_ioctl>
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d001      	beq.n	8013ace <f_mkfs+0x12e>
 8013aca:	2301      	movs	r3, #1
 8013acc:	e38e      	b.n	80141ec <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8013ace:	7afb      	ldrb	r3, [r7, #11]
 8013ad0:	f003 0308 	and.w	r3, r3, #8
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d001      	beq.n	8013adc <f_mkfs+0x13c>
 8013ad8:	2300      	movs	r3, #0
 8013ada:	e000      	b.n	8013ade <f_mkfs+0x13e>
 8013adc:	233f      	movs	r3, #63	@ 0x3f
 8013ade:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8013ae0:	693b      	ldr	r3, [r7, #16]
 8013ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013ae4:	429a      	cmp	r2, r3
 8013ae6:	d901      	bls.n	8013aec <f_mkfs+0x14c>
 8013ae8:	230e      	movs	r3, #14
 8013aea:	e37f      	b.n	80141ec <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8013aec:	693a      	ldr	r2, [r7, #16]
 8013aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013af0:	1ad3      	subs	r3, r2, r3
 8013af2:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8013af4:	693b      	ldr	r3, [r7, #16]
 8013af6:	2b7f      	cmp	r3, #127	@ 0x7f
 8013af8:	d801      	bhi.n	8013afe <f_mkfs+0x15e>
 8013afa:	230e      	movs	r3, #14
 8013afc:	e376      	b.n	80141ec <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	2b80      	cmp	r3, #128	@ 0x80
 8013b02:	d901      	bls.n	8013b08 <f_mkfs+0x168>
 8013b04:	2313      	movs	r3, #19
 8013b06:	e371      	b.n	80141ec <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8013b08:	7afb      	ldrb	r3, [r7, #11]
 8013b0a:	f003 0302 	and.w	r3, r3, #2
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d00d      	beq.n	8013b2e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8013b12:	7afb      	ldrb	r3, [r7, #11]
 8013b14:	f003 0307 	and.w	r3, r3, #7
 8013b18:	2b02      	cmp	r3, #2
 8013b1a:	d004      	beq.n	8013b26 <f_mkfs+0x186>
 8013b1c:	7afb      	ldrb	r3, [r7, #11]
 8013b1e:	f003 0301 	and.w	r3, r3, #1
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d103      	bne.n	8013b2e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8013b26:	2303      	movs	r3, #3
 8013b28:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8013b2c:	e009      	b.n	8013b42 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8013b2e:	7afb      	ldrb	r3, [r7, #11]
 8013b30:	f003 0301 	and.w	r3, r3, #1
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d101      	bne.n	8013b3c <f_mkfs+0x19c>
 8013b38:	2313      	movs	r3, #19
 8013b3a:	e357      	b.n	80141ec <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8013b3c:	2302      	movs	r3, #2
 8013b3e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8013b46:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013b4a:	2b03      	cmp	r3, #3
 8013b4c:	d13c      	bne.n	8013bc8 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8013b4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d11b      	bne.n	8013b8c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8013b54:	693b      	ldr	r3, [r7, #16]
 8013b56:	0c5b      	lsrs	r3, r3, #17
 8013b58:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013b5e:	2301      	movs	r3, #1
 8013b60:	653b      	str	r3, [r7, #80]	@ 0x50
 8013b62:	e005      	b.n	8013b70 <f_mkfs+0x1d0>
 8013b64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013b66:	3301      	adds	r3, #1
 8013b68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013b6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b6c:	005b      	lsls	r3, r3, #1
 8013b6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8013b70:	4a2d      	ldr	r2, [pc, #180]	@ (8013c28 <f_mkfs+0x288>)
 8013b72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013b74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d007      	beq.n	8013b8c <f_mkfs+0x1ec>
 8013b7c:	4a2a      	ldr	r2, [pc, #168]	@ (8013c28 <f_mkfs+0x288>)
 8013b7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013b84:	461a      	mov	r2, r3
 8013b86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013b88:	4293      	cmp	r3, r2
 8013b8a:	d2eb      	bcs.n	8013b64 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8013b8c:	693a      	ldr	r2, [r7, #16]
 8013b8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8013b94:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8013b96:	6a3b      	ldr	r3, [r7, #32]
 8013b98:	3302      	adds	r3, #2
 8013b9a:	009a      	lsls	r2, r3, #2
 8013b9c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013b9e:	4413      	add	r3, r2
 8013ba0:	1e5a      	subs	r2, r3, #1
 8013ba2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ba8:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8013baa:	2320      	movs	r3, #32
 8013bac:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 8013bae:	2300      	movs	r3, #0
 8013bb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8013bb2:	6a3b      	ldr	r3, [r7, #32]
 8013bb4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8013bb8:	4293      	cmp	r3, r2
 8013bba:	d903      	bls.n	8013bc4 <f_mkfs+0x224>
 8013bbc:	6a3b      	ldr	r3, [r7, #32]
 8013bbe:	4a1b      	ldr	r2, [pc, #108]	@ (8013c2c <f_mkfs+0x28c>)
 8013bc0:	4293      	cmp	r3, r2
 8013bc2:	d952      	bls.n	8013c6a <f_mkfs+0x2ca>
 8013bc4:	230e      	movs	r3, #14
 8013bc6:	e311      	b.n	80141ec <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8013bc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d11b      	bne.n	8013c06 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8013bce:	693b      	ldr	r3, [r7, #16]
 8013bd0:	0b1b      	lsrs	r3, r3, #12
 8013bd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013bd8:	2301      	movs	r3, #1
 8013bda:	653b      	str	r3, [r7, #80]	@ 0x50
 8013bdc:	e005      	b.n	8013bea <f_mkfs+0x24a>
 8013bde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013be0:	3301      	adds	r3, #1
 8013be2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013be4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013be6:	005b      	lsls	r3, r3, #1
 8013be8:	653b      	str	r3, [r7, #80]	@ 0x50
 8013bea:	4a11      	ldr	r2, [pc, #68]	@ (8013c30 <f_mkfs+0x290>)
 8013bec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013bee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d007      	beq.n	8013c06 <f_mkfs+0x266>
 8013bf6:	4a0e      	ldr	r2, [pc, #56]	@ (8013c30 <f_mkfs+0x290>)
 8013bf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013bfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013bfe:	461a      	mov	r2, r3
 8013c00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013c02:	4293      	cmp	r3, r2
 8013c04:	d2eb      	bcs.n	8013bde <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8013c06:	693a      	ldr	r2, [r7, #16]
 8013c08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8013c0e:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8013c10:	6a3b      	ldr	r3, [r7, #32]
 8013c12:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8013c16:	4293      	cmp	r3, r2
 8013c18:	d90c      	bls.n	8013c34 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8013c1a:	6a3b      	ldr	r3, [r7, #32]
 8013c1c:	3302      	adds	r3, #2
 8013c1e:	005b      	lsls	r3, r3, #1
 8013c20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013c22:	e012      	b.n	8013c4a <f_mkfs+0x2aa>
 8013c24:	200019e4 	.word	0x200019e4
 8013c28:	0801b4d0 	.word	0x0801b4d0
 8013c2c:	0ffffff5 	.word	0x0ffffff5
 8013c30:	0801b4e0 	.word	0x0801b4e0
				} else {
					fmt = FS_FAT12;
 8013c34:	2301      	movs	r3, #1
 8013c36:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8013c3a:	6a3a      	ldr	r2, [r7, #32]
 8013c3c:	4613      	mov	r3, r2
 8013c3e:	005b      	lsls	r3, r3, #1
 8013c40:	4413      	add	r3, r2
 8013c42:	3301      	adds	r3, #1
 8013c44:	085b      	lsrs	r3, r3, #1
 8013c46:	3303      	adds	r3, #3
 8013c48:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8013c4a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8013c4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013c4e:	4413      	add	r3, r2
 8013c50:	1e5a      	subs	r2, r3, #1
 8013c52:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8013c58:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8013c5a:	2301      	movs	r3, #1
 8013c5c:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8013c5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013c60:	015a      	lsls	r2, r3, #5
 8013c62:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8013c68:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8013c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c6e:	4413      	add	r3, r2
 8013c70:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8013c72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013c74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013c76:	fb03 f202 	mul.w	r2, r3, r2
 8013c7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013c7c:	4413      	add	r3, r2
 8013c7e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013c80:	4413      	add	r3, r2
 8013c82:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8013c84:	697a      	ldr	r2, [r7, #20]
 8013c86:	69fb      	ldr	r3, [r7, #28]
 8013c88:	4413      	add	r3, r2
 8013c8a:	1e5a      	subs	r2, r3, #1
 8013c8c:	697b      	ldr	r3, [r7, #20]
 8013c8e:	425b      	negs	r3, r3
 8013c90:	401a      	ands	r2, r3
 8013c92:	69fb      	ldr	r3, [r7, #28]
 8013c94:	1ad3      	subs	r3, r2, r3
 8013c96:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8013c98:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013c9c:	2b03      	cmp	r3, #3
 8013c9e:	d108      	bne.n	8013cb2 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8013ca0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013ca2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013ca4:	4413      	add	r3, r2
 8013ca6:	657b      	str	r3, [r7, #84]	@ 0x54
 8013ca8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013caa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013cac:	4413      	add	r3, r2
 8013cae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013cb0:	e006      	b.n	8013cc0 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8013cb2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8013cba:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013cbc:	4413      	add	r3, r2
 8013cbe:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8013cc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013cc2:	011a      	lsls	r2, r3, #4
 8013cc4:	69fb      	ldr	r3, [r7, #28]
 8013cc6:	441a      	add	r2, r3
 8013cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cca:	1ad2      	subs	r2, r2, r3
 8013ccc:	693b      	ldr	r3, [r7, #16]
 8013cce:	429a      	cmp	r2, r3
 8013cd0:	d901      	bls.n	8013cd6 <f_mkfs+0x336>
 8013cd2:	230e      	movs	r3, #14
 8013cd4:	e28a      	b.n	80141ec <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8013cd6:	693a      	ldr	r2, [r7, #16]
 8013cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cda:	1ad2      	subs	r2, r2, r3
 8013cdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013cde:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013ce0:	fb01 f303 	mul.w	r3, r1, r3
 8013ce4:	1ad2      	subs	r2, r2, r3
 8013ce6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013ce8:	1ad2      	subs	r2, r2, r3
 8013cea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8013cf0:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8013cf2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013cf6:	2b03      	cmp	r3, #3
 8013cf8:	d10f      	bne.n	8013d1a <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8013cfa:	6a3b      	ldr	r3, [r7, #32]
 8013cfc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8013d00:	4293      	cmp	r3, r2
 8013d02:	d80a      	bhi.n	8013d1a <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d105      	bne.n	8013d16 <f_mkfs+0x376>
 8013d0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d0c:	085b      	lsrs	r3, r3, #1
 8013d0e:	607b      	str	r3, [r7, #4]
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d144      	bne.n	8013da0 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8013d16:	230e      	movs	r3, #14
 8013d18:	e268      	b.n	80141ec <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8013d1a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013d1e:	2b02      	cmp	r3, #2
 8013d20:	d133      	bne.n	8013d8a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8013d22:	6a3b      	ldr	r3, [r7, #32]
 8013d24:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8013d28:	4293      	cmp	r3, r2
 8013d2a:	d91e      	bls.n	8013d6a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d107      	bne.n	8013d42 <f_mkfs+0x3a2>
 8013d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d34:	005b      	lsls	r3, r3, #1
 8013d36:	2b40      	cmp	r3, #64	@ 0x40
 8013d38:	d803      	bhi.n	8013d42 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8013d3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d3c:	005b      	lsls	r3, r3, #1
 8013d3e:	607b      	str	r3, [r7, #4]
 8013d40:	e033      	b.n	8013daa <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8013d42:	7afb      	ldrb	r3, [r7, #11]
 8013d44:	f003 0302 	and.w	r3, r3, #2
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d003      	beq.n	8013d54 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8013d4c:	2303      	movs	r3, #3
 8013d4e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8013d52:	e02a      	b.n	8013daa <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d105      	bne.n	8013d66 <f_mkfs+0x3c6>
 8013d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d5c:	005b      	lsls	r3, r3, #1
 8013d5e:	607b      	str	r3, [r7, #4]
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	2b80      	cmp	r3, #128	@ 0x80
 8013d64:	d91e      	bls.n	8013da4 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8013d66:	230e      	movs	r3, #14
 8013d68:	e240      	b.n	80141ec <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8013d6a:	6a3b      	ldr	r3, [r7, #32]
 8013d6c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8013d70:	4293      	cmp	r3, r2
 8013d72:	d80a      	bhi.n	8013d8a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d105      	bne.n	8013d86 <f_mkfs+0x3e6>
 8013d7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d7c:	005b      	lsls	r3, r3, #1
 8013d7e:	607b      	str	r3, [r7, #4]
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	2b80      	cmp	r3, #128	@ 0x80
 8013d84:	d910      	bls.n	8013da8 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8013d86:	230e      	movs	r3, #14
 8013d88:	e230      	b.n	80141ec <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8013d8a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013d8e:	2b01      	cmp	r3, #1
 8013d90:	d10c      	bne.n	8013dac <f_mkfs+0x40c>
 8013d92:	6a3b      	ldr	r3, [r7, #32]
 8013d94:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8013d98:	4293      	cmp	r3, r2
 8013d9a:	d907      	bls.n	8013dac <f_mkfs+0x40c>
 8013d9c:	230e      	movs	r3, #14
 8013d9e:	e225      	b.n	80141ec <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8013da0:	bf00      	nop
 8013da2:	e6ce      	b.n	8013b42 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013da4:	bf00      	nop
 8013da6:	e6cc      	b.n	8013b42 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013da8:	bf00      	nop
			pau = au;
 8013daa:	e6ca      	b.n	8013b42 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8013dac:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8013dae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013db0:	461a      	mov	r2, r3
 8013db2:	2100      	movs	r1, #0
 8013db4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013db6:	f7fd fcd5 	bl	8011764 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8013dba:	220b      	movs	r2, #11
 8013dbc:	49b2      	ldr	r1, [pc, #712]	@ (8014088 <f_mkfs+0x6e8>)
 8013dbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013dc0:	f7fd fcaf 	bl	8011722 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8013dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013dc6:	330b      	adds	r3, #11
 8013dc8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8013dca:	4611      	mov	r1, r2
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f7fd fc61 	bl	8011694 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8013dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013dd4:	330d      	adds	r3, #13
 8013dd6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013dd8:	b2d2      	uxtb	r2, r2
 8013dda:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8013ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013dde:	330e      	adds	r3, #14
 8013de0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013de2:	b292      	uxth	r2, r2
 8013de4:	4611      	mov	r1, r2
 8013de6:	4618      	mov	r0, r3
 8013de8:	f7fd fc54 	bl	8011694 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8013dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013dee:	3310      	adds	r3, #16
 8013df0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013df2:	b2d2      	uxtb	r2, r2
 8013df4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8013df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013df8:	f103 0211 	add.w	r2, r3, #17
 8013dfc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013e00:	2b03      	cmp	r3, #3
 8013e02:	d002      	beq.n	8013e0a <f_mkfs+0x46a>
 8013e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e06:	b29b      	uxth	r3, r3
 8013e08:	e000      	b.n	8013e0c <f_mkfs+0x46c>
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	4619      	mov	r1, r3
 8013e0e:	4610      	mov	r0, r2
 8013e10:	f7fd fc40 	bl	8011694 <st_word>
		if (sz_vol < 0x10000) {
 8013e14:	693b      	ldr	r3, [r7, #16]
 8013e16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013e1a:	d208      	bcs.n	8013e2e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8013e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e1e:	3313      	adds	r3, #19
 8013e20:	693a      	ldr	r2, [r7, #16]
 8013e22:	b292      	uxth	r2, r2
 8013e24:	4611      	mov	r1, r2
 8013e26:	4618      	mov	r0, r3
 8013e28:	f7fd fc34 	bl	8011694 <st_word>
 8013e2c:	e006      	b.n	8013e3c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8013e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e30:	3320      	adds	r3, #32
 8013e32:	693a      	ldr	r2, [r7, #16]
 8013e34:	4611      	mov	r1, r2
 8013e36:	4618      	mov	r0, r3
 8013e38:	f7fd fc47 	bl	80116ca <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8013e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e3e:	3315      	adds	r3, #21
 8013e40:	22f8      	movs	r2, #248	@ 0xf8
 8013e42:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8013e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e46:	3318      	adds	r3, #24
 8013e48:	213f      	movs	r1, #63	@ 0x3f
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	f7fd fc22 	bl	8011694 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8013e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e52:	331a      	adds	r3, #26
 8013e54:	21ff      	movs	r1, #255	@ 0xff
 8013e56:	4618      	mov	r0, r3
 8013e58:	f7fd fc1c 	bl	8011694 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8013e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e5e:	331c      	adds	r3, #28
 8013e60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013e62:	4618      	mov	r0, r3
 8013e64:	f7fd fc31 	bl	80116ca <st_dword>
		if (fmt == FS_FAT32) {
 8013e68:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013e6c:	2b03      	cmp	r3, #3
 8013e6e:	d131      	bne.n	8013ed4 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8013e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e72:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 8013e76:	f7fd f853 	bl	8010f20 <get_fattime>
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	4619      	mov	r1, r3
 8013e7e:	4620      	mov	r0, r4
 8013e80:	f7fd fc23 	bl	80116ca <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8013e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e86:	3324      	adds	r3, #36	@ 0x24
 8013e88:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	f7fd fc1d 	bl	80116ca <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8013e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e92:	332c      	adds	r3, #44	@ 0x2c
 8013e94:	2102      	movs	r1, #2
 8013e96:	4618      	mov	r0, r3
 8013e98:	f7fd fc17 	bl	80116ca <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8013e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e9e:	3330      	adds	r3, #48	@ 0x30
 8013ea0:	2101      	movs	r1, #1
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f7fd fbf6 	bl	8011694 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8013ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013eaa:	3332      	adds	r3, #50	@ 0x32
 8013eac:	2106      	movs	r1, #6
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f7fd fbf0 	bl	8011694 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8013eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013eb6:	3340      	adds	r3, #64	@ 0x40
 8013eb8:	2280      	movs	r2, #128	@ 0x80
 8013eba:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8013ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ebe:	3342      	adds	r3, #66	@ 0x42
 8013ec0:	2229      	movs	r2, #41	@ 0x29
 8013ec2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8013ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ec6:	3347      	adds	r3, #71	@ 0x47
 8013ec8:	2213      	movs	r2, #19
 8013eca:	4970      	ldr	r1, [pc, #448]	@ (801408c <f_mkfs+0x6ec>)
 8013ecc:	4618      	mov	r0, r3
 8013ece:	f7fd fc28 	bl	8011722 <mem_cpy>
 8013ed2:	e020      	b.n	8013f16 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8013ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ed6:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 8013eda:	f7fd f821 	bl	8010f20 <get_fattime>
 8013ede:	4603      	mov	r3, r0
 8013ee0:	4619      	mov	r1, r3
 8013ee2:	4620      	mov	r0, r4
 8013ee4:	f7fd fbf1 	bl	80116ca <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8013ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013eea:	3316      	adds	r3, #22
 8013eec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013eee:	b292      	uxth	r2, r2
 8013ef0:	4611      	mov	r1, r2
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	f7fd fbce 	bl	8011694 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8013ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013efa:	3324      	adds	r3, #36	@ 0x24
 8013efc:	2280      	movs	r2, #128	@ 0x80
 8013efe:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8013f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f02:	3326      	adds	r3, #38	@ 0x26
 8013f04:	2229      	movs	r2, #41	@ 0x29
 8013f06:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8013f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f0a:	332b      	adds	r3, #43	@ 0x2b
 8013f0c:	2213      	movs	r2, #19
 8013f0e:	4960      	ldr	r1, [pc, #384]	@ (8014090 <f_mkfs+0x6f0>)
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7fd fc06 	bl	8011722 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8013f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f18:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013f1c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8013f20:	4618      	mov	r0, r3
 8013f22:	f7fd fbb7 	bl	8011694 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8013f26:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8013f2a:	2301      	movs	r3, #1
 8013f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013f2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013f30:	f7fd fb36 	bl	80115a0 <disk_write>
 8013f34:	4603      	mov	r3, r0
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d001      	beq.n	8013f3e <f_mkfs+0x59e>
 8013f3a:	2301      	movs	r3, #1
 8013f3c:	e156      	b.n	80141ec <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8013f3e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013f42:	2b03      	cmp	r3, #3
 8013f44:	d140      	bne.n	8013fc8 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8013f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f48:	1d9a      	adds	r2, r3, #6
 8013f4a:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8013f4e:	2301      	movs	r3, #1
 8013f50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013f52:	f7fd fb25 	bl	80115a0 <disk_write>
			mem_set(buf, 0, ss);
 8013f56:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013f58:	461a      	mov	r2, r3
 8013f5a:	2100      	movs	r1, #0
 8013f5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013f5e:	f7fd fc01 	bl	8011764 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8013f62:	494c      	ldr	r1, [pc, #304]	@ (8014094 <f_mkfs+0x6f4>)
 8013f64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013f66:	f7fd fbb0 	bl	80116ca <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8013f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f6c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013f70:	4949      	ldr	r1, [pc, #292]	@ (8014098 <f_mkfs+0x6f8>)
 8013f72:	4618      	mov	r0, r3
 8013f74:	f7fd fba9 	bl	80116ca <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8013f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f7a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8013f7e:	6a3b      	ldr	r3, [r7, #32]
 8013f80:	3b01      	subs	r3, #1
 8013f82:	4619      	mov	r1, r3
 8013f84:	4610      	mov	r0, r2
 8013f86:	f7fd fba0 	bl	80116ca <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8013f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f8c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8013f90:	2102      	movs	r1, #2
 8013f92:	4618      	mov	r0, r3
 8013f94:	f7fd fb99 	bl	80116ca <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8013f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f9a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013f9e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	f7fd fb76 	bl	8011694 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8013fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013faa:	1dda      	adds	r2, r3, #7
 8013fac:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8013fb0:	2301      	movs	r3, #1
 8013fb2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013fb4:	f7fd faf4 	bl	80115a0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8013fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fba:	1c5a      	adds	r2, r3, #1
 8013fbc:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8013fc0:	2301      	movs	r3, #1
 8013fc2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013fc4:	f7fd faec 	bl	80115a0 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8013fc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013fca:	2100      	movs	r1, #0
 8013fcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013fce:	f7fd fbc9 	bl	8011764 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8013fd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013fd4:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013fda:	e04b      	b.n	8014074 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8013fdc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013fe0:	2b03      	cmp	r3, #3
 8013fe2:	d113      	bne.n	801400c <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8013fe4:	f06f 0107 	mvn.w	r1, #7
 8013fe8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013fea:	f7fd fb6e 	bl	80116ca <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8013fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ff0:	3304      	adds	r3, #4
 8013ff2:	f04f 31ff 	mov.w	r1, #4294967295
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	f7fd fb67 	bl	80116ca <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8013ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ffe:	3308      	adds	r3, #8
 8014000:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8014004:	4618      	mov	r0, r3
 8014006:	f7fd fb60 	bl	80116ca <st_dword>
 801400a:	e00b      	b.n	8014024 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 801400c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014010:	2b01      	cmp	r3, #1
 8014012:	d101      	bne.n	8014018 <f_mkfs+0x678>
 8014014:	4b21      	ldr	r3, [pc, #132]	@ (801409c <f_mkfs+0x6fc>)
 8014016:	e001      	b.n	801401c <f_mkfs+0x67c>
 8014018:	f06f 0307 	mvn.w	r3, #7
 801401c:	4619      	mov	r1, r3
 801401e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014020:	f7fd fb53 	bl	80116ca <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8014024:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014026:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8014028:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801402a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801402c:	4293      	cmp	r3, r2
 801402e:	bf28      	it	cs
 8014030:	4613      	movcs	r3, r2
 8014032:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8014034:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014038:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801403a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801403c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801403e:	f7fd faaf 	bl	80115a0 <disk_write>
 8014042:	4603      	mov	r3, r0
 8014044:	2b00      	cmp	r3, #0
 8014046:	d001      	beq.n	801404c <f_mkfs+0x6ac>
 8014048:	2301      	movs	r3, #1
 801404a:	e0cf      	b.n	80141ec <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 801404c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801404e:	461a      	mov	r2, r3
 8014050:	2100      	movs	r1, #0
 8014052:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014054:	f7fd fb86 	bl	8011764 <mem_set>
				sect += n; nsect -= n;
 8014058:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801405a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801405c:	4413      	add	r3, r2
 801405e:	667b      	str	r3, [r7, #100]	@ 0x64
 8014060:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014062:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014064:	1ad3      	subs	r3, r2, r3
 8014066:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 8014068:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801406a:	2b00      	cmp	r3, #0
 801406c:	d1dc      	bne.n	8014028 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 801406e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014070:	3301      	adds	r3, #1
 8014072:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014074:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014076:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014078:	429a      	cmp	r2, r3
 801407a:	d3af      	bcc.n	8013fdc <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 801407c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014080:	2b03      	cmp	r3, #3
 8014082:	d10d      	bne.n	80140a0 <f_mkfs+0x700>
 8014084:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014086:	e00c      	b.n	80140a2 <f_mkfs+0x702>
 8014088:	0801b3e0 	.word	0x0801b3e0
 801408c:	0801b3ec 	.word	0x0801b3ec
 8014090:	0801b400 	.word	0x0801b400
 8014094:	41615252 	.word	0x41615252
 8014098:	61417272 	.word	0x61417272
 801409c:	00fffff8 	.word	0x00fffff8
 80140a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80140a2:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80140a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80140a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140a8:	4293      	cmp	r3, r2
 80140aa:	bf28      	it	cs
 80140ac:	4613      	movcs	r3, r2
 80140ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80140b0:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80140b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80140b6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80140b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80140ba:	f7fd fa71 	bl	80115a0 <disk_write>
 80140be:	4603      	mov	r3, r0
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d001      	beq.n	80140c8 <f_mkfs+0x728>
 80140c4:	2301      	movs	r3, #1
 80140c6:	e091      	b.n	80141ec <f_mkfs+0x84c>
			sect += n; nsect -= n;
 80140c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80140ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80140cc:	4413      	add	r3, r2
 80140ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80140d0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80140d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80140d4:	1ad3      	subs	r3, r2, r3
 80140d6:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 80140d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d1e2      	bne.n	80140a4 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80140de:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80140e2:	2b03      	cmp	r3, #3
 80140e4:	d103      	bne.n	80140ee <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 80140e6:	230c      	movs	r3, #12
 80140e8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80140ec:	e010      	b.n	8014110 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 80140ee:	693b      	ldr	r3, [r7, #16]
 80140f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80140f4:	d303      	bcc.n	80140fe <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80140f6:	2306      	movs	r3, #6
 80140f8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80140fc:	e008      	b.n	8014110 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80140fe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014102:	2b02      	cmp	r3, #2
 8014104:	d101      	bne.n	801410a <f_mkfs+0x76a>
 8014106:	2304      	movs	r3, #4
 8014108:	e000      	b.n	801410c <f_mkfs+0x76c>
 801410a:	2301      	movs	r3, #1
 801410c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8014110:	7afb      	ldrb	r3, [r7, #11]
 8014112:	f003 0308 	and.w	r3, r3, #8
 8014116:	2b00      	cmp	r3, #0
 8014118:	d15b      	bne.n	80141d2 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 801411a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801411c:	461a      	mov	r2, r3
 801411e:	2100      	movs	r1, #0
 8014120:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014122:	f7fd fb1f 	bl	8011764 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8014126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014128:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801412c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014130:	4618      	mov	r0, r3
 8014132:	f7fd faaf 	bl	8011694 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8014136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014138:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801413c:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 801413e:	69bb      	ldr	r3, [r7, #24]
 8014140:	2200      	movs	r2, #0
 8014142:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8014144:	69bb      	ldr	r3, [r7, #24]
 8014146:	3301      	adds	r3, #1
 8014148:	2201      	movs	r2, #1
 801414a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 801414c:	69bb      	ldr	r3, [r7, #24]
 801414e:	3302      	adds	r3, #2
 8014150:	2201      	movs	r2, #1
 8014152:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8014154:	69bb      	ldr	r3, [r7, #24]
 8014156:	3303      	adds	r3, #3
 8014158:	2200      	movs	r2, #0
 801415a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 801415c:	69bb      	ldr	r3, [r7, #24]
 801415e:	3304      	adds	r3, #4
 8014160:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8014164:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8014166:	693a      	ldr	r2, [r7, #16]
 8014168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801416a:	441a      	add	r2, r3
 801416c:	4b21      	ldr	r3, [pc, #132]	@ (80141f4 <f_mkfs+0x854>)
 801416e:	fba3 1302 	umull	r1, r3, r3, r2
 8014172:	1ad2      	subs	r2, r2, r3
 8014174:	0852      	lsrs	r2, r2, #1
 8014176:	4413      	add	r3, r2
 8014178:	0b5b      	lsrs	r3, r3, #13
 801417a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 801417c:	69bb      	ldr	r3, [r7, #24]
 801417e:	3305      	adds	r3, #5
 8014180:	22fe      	movs	r2, #254	@ 0xfe
 8014182:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8014184:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014186:	089b      	lsrs	r3, r3, #2
 8014188:	b2da      	uxtb	r2, r3
 801418a:	69bb      	ldr	r3, [r7, #24]
 801418c:	3306      	adds	r3, #6
 801418e:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 8014192:	b2d2      	uxtb	r2, r2
 8014194:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8014196:	69bb      	ldr	r3, [r7, #24]
 8014198:	3307      	adds	r3, #7
 801419a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801419c:	b2d2      	uxtb	r2, r2
 801419e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80141a0:	69bb      	ldr	r3, [r7, #24]
 80141a2:	3308      	adds	r3, #8
 80141a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80141a6:	4618      	mov	r0, r3
 80141a8:	f7fd fa8f 	bl	80116ca <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 80141ac:	69bb      	ldr	r3, [r7, #24]
 80141ae:	330c      	adds	r3, #12
 80141b0:	693a      	ldr	r2, [r7, #16]
 80141b2:	4611      	mov	r1, r2
 80141b4:	4618      	mov	r0, r3
 80141b6:	f7fd fa88 	bl	80116ca <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80141ba:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80141be:	2301      	movs	r3, #1
 80141c0:	2200      	movs	r2, #0
 80141c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80141c4:	f7fd f9ec 	bl	80115a0 <disk_write>
 80141c8:	4603      	mov	r3, r0
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d001      	beq.n	80141d2 <f_mkfs+0x832>
 80141ce:	2301      	movs	r3, #1
 80141d0:	e00c      	b.n	80141ec <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80141d2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80141d6:	2200      	movs	r2, #0
 80141d8:	2100      	movs	r1, #0
 80141da:	4618      	mov	r0, r3
 80141dc:	f7fd fa00 	bl	80115e0 <disk_ioctl>
 80141e0:	4603      	mov	r3, r0
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d001      	beq.n	80141ea <f_mkfs+0x84a>
 80141e6:	2301      	movs	r3, #1
 80141e8:	e000      	b.n	80141ec <f_mkfs+0x84c>

	return FR_OK;
 80141ea:	2300      	movs	r3, #0
}
 80141ec:	4618      	mov	r0, r3
 80141ee:	3774      	adds	r7, #116	@ 0x74
 80141f0:	46bd      	mov	sp, r7
 80141f2:	bd90      	pop	{r4, r7, pc}
 80141f4:	0515565b 	.word	0x0515565b

080141f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80141f8:	b480      	push	{r7}
 80141fa:	b087      	sub	sp, #28
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	60f8      	str	r0, [r7, #12]
 8014200:	60b9      	str	r1, [r7, #8]
 8014202:	4613      	mov	r3, r2
 8014204:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014206:	2301      	movs	r3, #1
 8014208:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801420a:	2300      	movs	r3, #0
 801420c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801420e:	4b1f      	ldr	r3, [pc, #124]	@ (801428c <FATFS_LinkDriverEx+0x94>)
 8014210:	7a5b      	ldrb	r3, [r3, #9]
 8014212:	b2db      	uxtb	r3, r3
 8014214:	2b00      	cmp	r3, #0
 8014216:	d131      	bne.n	801427c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014218:	4b1c      	ldr	r3, [pc, #112]	@ (801428c <FATFS_LinkDriverEx+0x94>)
 801421a:	7a5b      	ldrb	r3, [r3, #9]
 801421c:	b2db      	uxtb	r3, r3
 801421e:	461a      	mov	r2, r3
 8014220:	4b1a      	ldr	r3, [pc, #104]	@ (801428c <FATFS_LinkDriverEx+0x94>)
 8014222:	2100      	movs	r1, #0
 8014224:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014226:	4b19      	ldr	r3, [pc, #100]	@ (801428c <FATFS_LinkDriverEx+0x94>)
 8014228:	7a5b      	ldrb	r3, [r3, #9]
 801422a:	b2db      	uxtb	r3, r3
 801422c:	4a17      	ldr	r2, [pc, #92]	@ (801428c <FATFS_LinkDriverEx+0x94>)
 801422e:	009b      	lsls	r3, r3, #2
 8014230:	4413      	add	r3, r2
 8014232:	68fa      	ldr	r2, [r7, #12]
 8014234:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014236:	4b15      	ldr	r3, [pc, #84]	@ (801428c <FATFS_LinkDriverEx+0x94>)
 8014238:	7a5b      	ldrb	r3, [r3, #9]
 801423a:	b2db      	uxtb	r3, r3
 801423c:	461a      	mov	r2, r3
 801423e:	4b13      	ldr	r3, [pc, #76]	@ (801428c <FATFS_LinkDriverEx+0x94>)
 8014240:	4413      	add	r3, r2
 8014242:	79fa      	ldrb	r2, [r7, #7]
 8014244:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014246:	4b11      	ldr	r3, [pc, #68]	@ (801428c <FATFS_LinkDriverEx+0x94>)
 8014248:	7a5b      	ldrb	r3, [r3, #9]
 801424a:	b2db      	uxtb	r3, r3
 801424c:	1c5a      	adds	r2, r3, #1
 801424e:	b2d1      	uxtb	r1, r2
 8014250:	4a0e      	ldr	r2, [pc, #56]	@ (801428c <FATFS_LinkDriverEx+0x94>)
 8014252:	7251      	strb	r1, [r2, #9]
 8014254:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014256:	7dbb      	ldrb	r3, [r7, #22]
 8014258:	3330      	adds	r3, #48	@ 0x30
 801425a:	b2da      	uxtb	r2, r3
 801425c:	68bb      	ldr	r3, [r7, #8]
 801425e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014260:	68bb      	ldr	r3, [r7, #8]
 8014262:	3301      	adds	r3, #1
 8014264:	223a      	movs	r2, #58	@ 0x3a
 8014266:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014268:	68bb      	ldr	r3, [r7, #8]
 801426a:	3302      	adds	r3, #2
 801426c:	222f      	movs	r2, #47	@ 0x2f
 801426e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014270:	68bb      	ldr	r3, [r7, #8]
 8014272:	3303      	adds	r3, #3
 8014274:	2200      	movs	r2, #0
 8014276:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014278:	2300      	movs	r3, #0
 801427a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801427c:	7dfb      	ldrb	r3, [r7, #23]
}
 801427e:	4618      	mov	r0, r3
 8014280:	371c      	adds	r7, #28
 8014282:	46bd      	mov	sp, r7
 8014284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014288:	4770      	bx	lr
 801428a:	bf00      	nop
 801428c:	20001a0c 	.word	0x20001a0c

08014290 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b082      	sub	sp, #8
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
 8014298:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801429a:	2200      	movs	r2, #0
 801429c:	6839      	ldr	r1, [r7, #0]
 801429e:	6878      	ldr	r0, [r7, #4]
 80142a0:	f7ff ffaa 	bl	80141f8 <FATFS_LinkDriverEx>
 80142a4:	4603      	mov	r3, r0
}
 80142a6:	4618      	mov	r0, r3
 80142a8:	3708      	adds	r7, #8
 80142aa:	46bd      	mov	sp, r7
 80142ac:	bd80      	pop	{r7, pc}

080142ae <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80142ae:	b480      	push	{r7}
 80142b0:	b085      	sub	sp, #20
 80142b2:	af00      	add	r7, sp, #0
 80142b4:	4603      	mov	r3, r0
 80142b6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80142b8:	2300      	movs	r3, #0
 80142ba:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80142bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80142c0:	2b84      	cmp	r3, #132	@ 0x84
 80142c2:	d005      	beq.n	80142d0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80142c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	4413      	add	r3, r2
 80142cc:	3303      	adds	r3, #3
 80142ce:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80142d0:	68fb      	ldr	r3, [r7, #12]
}
 80142d2:	4618      	mov	r0, r3
 80142d4:	3714      	adds	r7, #20
 80142d6:	46bd      	mov	sp, r7
 80142d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142dc:	4770      	bx	lr

080142de <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80142de:	b480      	push	{r7}
 80142e0:	b083      	sub	sp, #12
 80142e2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80142e4:	f3ef 8305 	mrs	r3, IPSR
 80142e8:	607b      	str	r3, [r7, #4]
  return(result);
 80142ea:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	bf14      	ite	ne
 80142f0:	2301      	movne	r3, #1
 80142f2:	2300      	moveq	r3, #0
 80142f4:	b2db      	uxtb	r3, r3
}
 80142f6:	4618      	mov	r0, r3
 80142f8:	370c      	adds	r7, #12
 80142fa:	46bd      	mov	sp, r7
 80142fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014300:	4770      	bx	lr

08014302 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014302:	b580      	push	{r7, lr}
 8014304:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014306:	f001 f9cd 	bl	80156a4 <vTaskStartScheduler>
  
  return osOK;
 801430a:	2300      	movs	r3, #0
}
 801430c:	4618      	mov	r0, r3
 801430e:	bd80      	pop	{r7, pc}

08014310 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8014310:	b580      	push	{r7, lr}
 8014312:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8014314:	f001 fe2e 	bl	8015f74 <xTaskGetSchedulerState>
 8014318:	4603      	mov	r3, r0
 801431a:	2b01      	cmp	r3, #1
 801431c:	d101      	bne.n	8014322 <osKernelRunning+0x12>
    return 0;
 801431e:	2300      	movs	r3, #0
 8014320:	e000      	b.n	8014324 <osKernelRunning+0x14>
  else
    return 1;
 8014322:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8014324:	4618      	mov	r0, r3
 8014326:	bd80      	pop	{r7, pc}

08014328 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8014328:	b580      	push	{r7, lr}
 801432a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 801432c:	f7ff ffd7 	bl	80142de <inHandlerMode>
 8014330:	4603      	mov	r3, r0
 8014332:	2b00      	cmp	r3, #0
 8014334:	d003      	beq.n	801433e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8014336:	f001 fad9 	bl	80158ec <xTaskGetTickCountFromISR>
 801433a:	4603      	mov	r3, r0
 801433c:	e002      	b.n	8014344 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801433e:	f001 fac5 	bl	80158cc <xTaskGetTickCount>
 8014342:	4603      	mov	r3, r0
  }
}
 8014344:	4618      	mov	r0, r3
 8014346:	bd80      	pop	{r7, pc}

08014348 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801434a:	b089      	sub	sp, #36	@ 0x24
 801434c:	af04      	add	r7, sp, #16
 801434e:	6078      	str	r0, [r7, #4]
 8014350:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	695b      	ldr	r3, [r3, #20]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d020      	beq.n	801439c <osThreadCreate+0x54>
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	699b      	ldr	r3, [r3, #24]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d01c      	beq.n	801439c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	685c      	ldr	r4, [r3, #4]
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	691e      	ldr	r6, [r3, #16]
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014374:	4618      	mov	r0, r3
 8014376:	f7ff ff9a 	bl	80142ae <makeFreeRtosPriority>
 801437a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	695b      	ldr	r3, [r3, #20]
 8014380:	687a      	ldr	r2, [r7, #4]
 8014382:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014384:	9202      	str	r2, [sp, #8]
 8014386:	9301      	str	r3, [sp, #4]
 8014388:	9100      	str	r1, [sp, #0]
 801438a:	683b      	ldr	r3, [r7, #0]
 801438c:	4632      	mov	r2, r6
 801438e:	4629      	mov	r1, r5
 8014390:	4620      	mov	r0, r4
 8014392:	f000 ffa5 	bl	80152e0 <xTaskCreateStatic>
 8014396:	4603      	mov	r3, r0
 8014398:	60fb      	str	r3, [r7, #12]
 801439a:	e01c      	b.n	80143d6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	685c      	ldr	r4, [r3, #4]
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80143a8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80143b0:	4618      	mov	r0, r3
 80143b2:	f7ff ff7c 	bl	80142ae <makeFreeRtosPriority>
 80143b6:	4602      	mov	r2, r0
 80143b8:	f107 030c 	add.w	r3, r7, #12
 80143bc:	9301      	str	r3, [sp, #4]
 80143be:	9200      	str	r2, [sp, #0]
 80143c0:	683b      	ldr	r3, [r7, #0]
 80143c2:	4632      	mov	r2, r6
 80143c4:	4629      	mov	r1, r5
 80143c6:	4620      	mov	r0, r4
 80143c8:	f000 fff0 	bl	80153ac <xTaskCreate>
 80143cc:	4603      	mov	r3, r0
 80143ce:	2b01      	cmp	r3, #1
 80143d0:	d001      	beq.n	80143d6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80143d2:	2300      	movs	r3, #0
 80143d4:	e000      	b.n	80143d8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80143d6:	68fb      	ldr	r3, [r7, #12]
}
 80143d8:	4618      	mov	r0, r3
 80143da:	3714      	adds	r7, #20
 80143dc:	46bd      	mov	sp, r7
 80143de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080143e0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b084      	sub	sp, #16
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d001      	beq.n	80143f6 <osDelay+0x16>
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	e000      	b.n	80143f8 <osDelay+0x18>
 80143f6:	2301      	movs	r3, #1
 80143f8:	4618      	mov	r0, r3
 80143fa:	f001 f91b 	bl	8015634 <vTaskDelay>
  
  return osOK;
 80143fe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014400:	4618      	mov	r0, r3
 8014402:	3710      	adds	r7, #16
 8014404:	46bd      	mov	sp, r7
 8014406:	bd80      	pop	{r7, pc}

08014408 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8014408:	b590      	push	{r4, r7, lr}
 801440a:	b085      	sub	sp, #20
 801440c:	af02      	add	r7, sp, #8
 801440e:	6078      	str	r0, [r7, #4]
 8014410:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	689b      	ldr	r3, [r3, #8]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d011      	beq.n	801443e <osMessageCreate+0x36>
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	68db      	ldr	r3, [r3, #12]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d00d      	beq.n	801443e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	6818      	ldr	r0, [r3, #0]
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	6859      	ldr	r1, [r3, #4]
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	689a      	ldr	r2, [r3, #8]
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	68db      	ldr	r3, [r3, #12]
 8014432:	2400      	movs	r4, #0
 8014434:	9400      	str	r4, [sp, #0]
 8014436:	f000 f9f9 	bl	801482c <xQueueGenericCreateStatic>
 801443a:	4603      	mov	r3, r0
 801443c:	e008      	b.n	8014450 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	6818      	ldr	r0, [r3, #0]
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	685b      	ldr	r3, [r3, #4]
 8014446:	2200      	movs	r2, #0
 8014448:	4619      	mov	r1, r3
 801444a:	f000 fa76 	bl	801493a <xQueueGenericCreate>
 801444e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8014450:	4618      	mov	r0, r3
 8014452:	370c      	adds	r7, #12
 8014454:	46bd      	mov	sp, r7
 8014456:	bd90      	pop	{r4, r7, pc}

08014458 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b086      	sub	sp, #24
 801445c:	af00      	add	r7, sp, #0
 801445e:	60f8      	str	r0, [r7, #12]
 8014460:	60b9      	str	r1, [r7, #8]
 8014462:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8014464:	2300      	movs	r3, #0
 8014466:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 801446c:	697b      	ldr	r3, [r7, #20]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d101      	bne.n	8014476 <osMessagePut+0x1e>
    ticks = 1;
 8014472:	2301      	movs	r3, #1
 8014474:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8014476:	f7ff ff32 	bl	80142de <inHandlerMode>
 801447a:	4603      	mov	r3, r0
 801447c:	2b00      	cmp	r3, #0
 801447e:	d018      	beq.n	80144b2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8014480:	f107 0210 	add.w	r2, r7, #16
 8014484:	f107 0108 	add.w	r1, r7, #8
 8014488:	2300      	movs	r3, #0
 801448a:	68f8      	ldr	r0, [r7, #12]
 801448c:	f000 fbc2 	bl	8014c14 <xQueueGenericSendFromISR>
 8014490:	4603      	mov	r3, r0
 8014492:	2b01      	cmp	r3, #1
 8014494:	d001      	beq.n	801449a <osMessagePut+0x42>
      return osErrorOS;
 8014496:	23ff      	movs	r3, #255	@ 0xff
 8014498:	e018      	b.n	80144cc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801449a:	693b      	ldr	r3, [r7, #16]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d014      	beq.n	80144ca <osMessagePut+0x72>
 80144a0:	4b0c      	ldr	r3, [pc, #48]	@ (80144d4 <osMessagePut+0x7c>)
 80144a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80144a6:	601a      	str	r2, [r3, #0]
 80144a8:	f3bf 8f4f 	dsb	sy
 80144ac:	f3bf 8f6f 	isb	sy
 80144b0:	e00b      	b.n	80144ca <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80144b2:	f107 0108 	add.w	r1, r7, #8
 80144b6:	2300      	movs	r3, #0
 80144b8:	697a      	ldr	r2, [r7, #20]
 80144ba:	68f8      	ldr	r0, [r7, #12]
 80144bc:	f000 faa0 	bl	8014a00 <xQueueGenericSend>
 80144c0:	4603      	mov	r3, r0
 80144c2:	2b01      	cmp	r3, #1
 80144c4:	d001      	beq.n	80144ca <osMessagePut+0x72>
      return osErrorOS;
 80144c6:	23ff      	movs	r3, #255	@ 0xff
 80144c8:	e000      	b.n	80144cc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80144ca:	2300      	movs	r3, #0
}
 80144cc:	4618      	mov	r0, r3
 80144ce:	3718      	adds	r7, #24
 80144d0:	46bd      	mov	sp, r7
 80144d2:	bd80      	pop	{r7, pc}
 80144d4:	e000ed04 	.word	0xe000ed04

080144d8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80144d8:	b590      	push	{r4, r7, lr}
 80144da:	b08b      	sub	sp, #44	@ 0x2c
 80144dc:	af00      	add	r7, sp, #0
 80144de:	60f8      	str	r0, [r7, #12]
 80144e0:	60b9      	str	r1, [r7, #8]
 80144e2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80144e4:	68bb      	ldr	r3, [r7, #8]
 80144e6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80144e8:	2300      	movs	r3, #0
 80144ea:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80144ec:	68bb      	ldr	r3, [r7, #8]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d10a      	bne.n	8014508 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80144f2:	2380      	movs	r3, #128	@ 0x80
 80144f4:	617b      	str	r3, [r7, #20]
    return event;
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	461c      	mov	r4, r3
 80144fa:	f107 0314 	add.w	r3, r7, #20
 80144fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014502:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014506:	e054      	b.n	80145b2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8014508:	2300      	movs	r3, #0
 801450a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 801450c:	2300      	movs	r3, #0
 801450e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014516:	d103      	bne.n	8014520 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8014518:	f04f 33ff 	mov.w	r3, #4294967295
 801451c:	627b      	str	r3, [r7, #36]	@ 0x24
 801451e:	e009      	b.n	8014534 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d006      	beq.n	8014534 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 801452a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801452c:	2b00      	cmp	r3, #0
 801452e:	d101      	bne.n	8014534 <osMessageGet+0x5c>
      ticks = 1;
 8014530:	2301      	movs	r3, #1
 8014532:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8014534:	f7ff fed3 	bl	80142de <inHandlerMode>
 8014538:	4603      	mov	r3, r0
 801453a:	2b00      	cmp	r3, #0
 801453c:	d01c      	beq.n	8014578 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801453e:	f107 0220 	add.w	r2, r7, #32
 8014542:	f107 0314 	add.w	r3, r7, #20
 8014546:	3304      	adds	r3, #4
 8014548:	4619      	mov	r1, r3
 801454a:	68b8      	ldr	r0, [r7, #8]
 801454c:	f000 fcee 	bl	8014f2c <xQueueReceiveFromISR>
 8014550:	4603      	mov	r3, r0
 8014552:	2b01      	cmp	r3, #1
 8014554:	d102      	bne.n	801455c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8014556:	2310      	movs	r3, #16
 8014558:	617b      	str	r3, [r7, #20]
 801455a:	e001      	b.n	8014560 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 801455c:	2300      	movs	r3, #0
 801455e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014560:	6a3b      	ldr	r3, [r7, #32]
 8014562:	2b00      	cmp	r3, #0
 8014564:	d01d      	beq.n	80145a2 <osMessageGet+0xca>
 8014566:	4b15      	ldr	r3, [pc, #84]	@ (80145bc <osMessageGet+0xe4>)
 8014568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801456c:	601a      	str	r2, [r3, #0]
 801456e:	f3bf 8f4f 	dsb	sy
 8014572:	f3bf 8f6f 	isb	sy
 8014576:	e014      	b.n	80145a2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8014578:	f107 0314 	add.w	r3, r7, #20
 801457c:	3304      	adds	r3, #4
 801457e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014580:	4619      	mov	r1, r3
 8014582:	68b8      	ldr	r0, [r7, #8]
 8014584:	f000 fbea 	bl	8014d5c <xQueueReceive>
 8014588:	4603      	mov	r3, r0
 801458a:	2b01      	cmp	r3, #1
 801458c:	d102      	bne.n	8014594 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801458e:	2310      	movs	r3, #16
 8014590:	617b      	str	r3, [r7, #20]
 8014592:	e006      	b.n	80145a2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8014594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014596:	2b00      	cmp	r3, #0
 8014598:	d101      	bne.n	801459e <osMessageGet+0xc6>
 801459a:	2300      	movs	r3, #0
 801459c:	e000      	b.n	80145a0 <osMessageGet+0xc8>
 801459e:	2340      	movs	r3, #64	@ 0x40
 80145a0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	461c      	mov	r4, r3
 80145a6:	f107 0314 	add.w	r3, r7, #20
 80145aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80145ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80145b2:	68f8      	ldr	r0, [r7, #12]
 80145b4:	372c      	adds	r7, #44	@ 0x2c
 80145b6:	46bd      	mov	sp, r7
 80145b8:	bd90      	pop	{r4, r7, pc}
 80145ba:	bf00      	nop
 80145bc:	e000ed04 	.word	0xe000ed04

080145c0 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b082      	sub	sp, #8
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80145c8:	f7ff fe89 	bl	80142de <inHandlerMode>
 80145cc:	4603      	mov	r3, r0
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d004      	beq.n	80145dc <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80145d2:	6878      	ldr	r0, [r7, #4]
 80145d4:	f000 fd53 	bl	801507e <uxQueueMessagesWaitingFromISR>
 80145d8:	4603      	mov	r3, r0
 80145da:	e003      	b.n	80145e4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80145dc:	6878      	ldr	r0, [r7, #4]
 80145de:	f000 fd2d 	bl	801503c <uxQueueMessagesWaiting>
 80145e2:	4603      	mov	r3, r0
  }
}
 80145e4:	4618      	mov	r0, r3
 80145e6:	3708      	adds	r7, #8
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bd80      	pop	{r7, pc}

080145ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80145ec:	b480      	push	{r7}
 80145ee:	b083      	sub	sp, #12
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	f103 0208 	add.w	r2, r3, #8
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	f04f 32ff 	mov.w	r2, #4294967295
 8014604:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	f103 0208 	add.w	r2, r3, #8
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	f103 0208 	add.w	r2, r3, #8
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	2200      	movs	r2, #0
 801461e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014620:	bf00      	nop
 8014622:	370c      	adds	r7, #12
 8014624:	46bd      	mov	sp, r7
 8014626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801462a:	4770      	bx	lr

0801462c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801462c:	b480      	push	{r7}
 801462e:	b083      	sub	sp, #12
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	2200      	movs	r2, #0
 8014638:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801463a:	bf00      	nop
 801463c:	370c      	adds	r7, #12
 801463e:	46bd      	mov	sp, r7
 8014640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014644:	4770      	bx	lr

08014646 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014646:	b480      	push	{r7}
 8014648:	b085      	sub	sp, #20
 801464a:	af00      	add	r7, sp, #0
 801464c:	6078      	str	r0, [r7, #4]
 801464e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	685b      	ldr	r3, [r3, #4]
 8014654:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014656:	683b      	ldr	r3, [r7, #0]
 8014658:	68fa      	ldr	r2, [r7, #12]
 801465a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	689a      	ldr	r2, [r3, #8]
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	689b      	ldr	r3, [r3, #8]
 8014668:	683a      	ldr	r2, [r7, #0]
 801466a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	683a      	ldr	r2, [r7, #0]
 8014670:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014672:	683b      	ldr	r3, [r7, #0]
 8014674:	687a      	ldr	r2, [r7, #4]
 8014676:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	1c5a      	adds	r2, r3, #1
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	601a      	str	r2, [r3, #0]
}
 8014682:	bf00      	nop
 8014684:	3714      	adds	r7, #20
 8014686:	46bd      	mov	sp, r7
 8014688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468c:	4770      	bx	lr

0801468e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801468e:	b480      	push	{r7}
 8014690:	b085      	sub	sp, #20
 8014692:	af00      	add	r7, sp, #0
 8014694:	6078      	str	r0, [r7, #4]
 8014696:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014698:	683b      	ldr	r3, [r7, #0]
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801469e:	68bb      	ldr	r3, [r7, #8]
 80146a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146a4:	d103      	bne.n	80146ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	691b      	ldr	r3, [r3, #16]
 80146aa:	60fb      	str	r3, [r7, #12]
 80146ac:	e00c      	b.n	80146c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	3308      	adds	r3, #8
 80146b2:	60fb      	str	r3, [r7, #12]
 80146b4:	e002      	b.n	80146bc <vListInsert+0x2e>
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	685b      	ldr	r3, [r3, #4]
 80146ba:	60fb      	str	r3, [r7, #12]
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	685b      	ldr	r3, [r3, #4]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	68ba      	ldr	r2, [r7, #8]
 80146c4:	429a      	cmp	r2, r3
 80146c6:	d2f6      	bcs.n	80146b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	685a      	ldr	r2, [r3, #4]
 80146cc:	683b      	ldr	r3, [r7, #0]
 80146ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80146d0:	683b      	ldr	r3, [r7, #0]
 80146d2:	685b      	ldr	r3, [r3, #4]
 80146d4:	683a      	ldr	r2, [r7, #0]
 80146d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80146d8:	683b      	ldr	r3, [r7, #0]
 80146da:	68fa      	ldr	r2, [r7, #12]
 80146dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	683a      	ldr	r2, [r7, #0]
 80146e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80146e4:	683b      	ldr	r3, [r7, #0]
 80146e6:	687a      	ldr	r2, [r7, #4]
 80146e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	1c5a      	adds	r2, r3, #1
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	601a      	str	r2, [r3, #0]
}
 80146f4:	bf00      	nop
 80146f6:	3714      	adds	r7, #20
 80146f8:	46bd      	mov	sp, r7
 80146fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146fe:	4770      	bx	lr

08014700 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014700:	b480      	push	{r7}
 8014702:	b085      	sub	sp, #20
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	691b      	ldr	r3, [r3, #16]
 801470c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	685b      	ldr	r3, [r3, #4]
 8014712:	687a      	ldr	r2, [r7, #4]
 8014714:	6892      	ldr	r2, [r2, #8]
 8014716:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	689b      	ldr	r3, [r3, #8]
 801471c:	687a      	ldr	r2, [r7, #4]
 801471e:	6852      	ldr	r2, [r2, #4]
 8014720:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	685b      	ldr	r3, [r3, #4]
 8014726:	687a      	ldr	r2, [r7, #4]
 8014728:	429a      	cmp	r2, r3
 801472a:	d103      	bne.n	8014734 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	689a      	ldr	r2, [r3, #8]
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	2200      	movs	r2, #0
 8014738:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	1e5a      	subs	r2, r3, #1
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	681b      	ldr	r3, [r3, #0]
}
 8014748:	4618      	mov	r0, r3
 801474a:	3714      	adds	r7, #20
 801474c:	46bd      	mov	sp, r7
 801474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014752:	4770      	bx	lr

08014754 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014754:	b580      	push	{r7, lr}
 8014756:	b084      	sub	sp, #16
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
 801475c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d10d      	bne.n	8014784 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801476c:	b672      	cpsid	i
 801476e:	f383 8811 	msr	BASEPRI, r3
 8014772:	f3bf 8f6f 	isb	sy
 8014776:	f3bf 8f4f 	dsb	sy
 801477a:	b662      	cpsie	i
 801477c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801477e:	bf00      	nop
 8014780:	bf00      	nop
 8014782:	e7fd      	b.n	8014780 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8014784:	f001 fe12 	bl	80163ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	681a      	ldr	r2, [r3, #0]
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014790:	68f9      	ldr	r1, [r7, #12]
 8014792:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8014794:	fb01 f303 	mul.w	r3, r1, r3
 8014798:	441a      	add	r2, r3
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	2200      	movs	r2, #0
 80147a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	681a      	ldr	r2, [r3, #0]
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	681a      	ldr	r2, [r3, #0]
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80147b4:	3b01      	subs	r3, #1
 80147b6:	68f9      	ldr	r1, [r7, #12]
 80147b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80147ba:	fb01 f303 	mul.w	r3, r1, r3
 80147be:	441a      	add	r2, r3
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	22ff      	movs	r2, #255	@ 0xff
 80147c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	22ff      	movs	r2, #255	@ 0xff
 80147d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80147d4:	683b      	ldr	r3, [r7, #0]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d114      	bne.n	8014804 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	691b      	ldr	r3, [r3, #16]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d01a      	beq.n	8014818 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	3310      	adds	r3, #16
 80147e6:	4618      	mov	r0, r3
 80147e8:	f001 f9fa 	bl	8015be0 <xTaskRemoveFromEventList>
 80147ec:	4603      	mov	r3, r0
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d012      	beq.n	8014818 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80147f2:	4b0d      	ldr	r3, [pc, #52]	@ (8014828 <xQueueGenericReset+0xd4>)
 80147f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80147f8:	601a      	str	r2, [r3, #0]
 80147fa:	f3bf 8f4f 	dsb	sy
 80147fe:	f3bf 8f6f 	isb	sy
 8014802:	e009      	b.n	8014818 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	3310      	adds	r3, #16
 8014808:	4618      	mov	r0, r3
 801480a:	f7ff feef 	bl	80145ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	3324      	adds	r3, #36	@ 0x24
 8014812:	4618      	mov	r0, r3
 8014814:	f7ff feea 	bl	80145ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014818:	f001 fdfe 	bl	8016418 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801481c:	2301      	movs	r3, #1
}
 801481e:	4618      	mov	r0, r3
 8014820:	3710      	adds	r7, #16
 8014822:	46bd      	mov	sp, r7
 8014824:	bd80      	pop	{r7, pc}
 8014826:	bf00      	nop
 8014828:	e000ed04 	.word	0xe000ed04

0801482c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801482c:	b580      	push	{r7, lr}
 801482e:	b08e      	sub	sp, #56	@ 0x38
 8014830:	af02      	add	r7, sp, #8
 8014832:	60f8      	str	r0, [r7, #12]
 8014834:	60b9      	str	r1, [r7, #8]
 8014836:	607a      	str	r2, [r7, #4]
 8014838:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d10d      	bne.n	801485c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8014840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014844:	b672      	cpsid	i
 8014846:	f383 8811 	msr	BASEPRI, r3
 801484a:	f3bf 8f6f 	isb	sy
 801484e:	f3bf 8f4f 	dsb	sy
 8014852:	b662      	cpsie	i
 8014854:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014856:	bf00      	nop
 8014858:	bf00      	nop
 801485a:	e7fd      	b.n	8014858 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801485c:	683b      	ldr	r3, [r7, #0]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d10d      	bne.n	801487e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8014862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014866:	b672      	cpsid	i
 8014868:	f383 8811 	msr	BASEPRI, r3
 801486c:	f3bf 8f6f 	isb	sy
 8014870:	f3bf 8f4f 	dsb	sy
 8014874:	b662      	cpsie	i
 8014876:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014878:	bf00      	nop
 801487a:	bf00      	nop
 801487c:	e7fd      	b.n	801487a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d002      	beq.n	801488a <xQueueGenericCreateStatic+0x5e>
 8014884:	68bb      	ldr	r3, [r7, #8]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d001      	beq.n	801488e <xQueueGenericCreateStatic+0x62>
 801488a:	2301      	movs	r3, #1
 801488c:	e000      	b.n	8014890 <xQueueGenericCreateStatic+0x64>
 801488e:	2300      	movs	r3, #0
 8014890:	2b00      	cmp	r3, #0
 8014892:	d10d      	bne.n	80148b0 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8014894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014898:	b672      	cpsid	i
 801489a:	f383 8811 	msr	BASEPRI, r3
 801489e:	f3bf 8f6f 	isb	sy
 80148a2:	f3bf 8f4f 	dsb	sy
 80148a6:	b662      	cpsie	i
 80148a8:	623b      	str	r3, [r7, #32]
}
 80148aa:	bf00      	nop
 80148ac:	bf00      	nop
 80148ae:	e7fd      	b.n	80148ac <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d102      	bne.n	80148bc <xQueueGenericCreateStatic+0x90>
 80148b6:	68bb      	ldr	r3, [r7, #8]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d101      	bne.n	80148c0 <xQueueGenericCreateStatic+0x94>
 80148bc:	2301      	movs	r3, #1
 80148be:	e000      	b.n	80148c2 <xQueueGenericCreateStatic+0x96>
 80148c0:	2300      	movs	r3, #0
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d10d      	bne.n	80148e2 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80148c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148ca:	b672      	cpsid	i
 80148cc:	f383 8811 	msr	BASEPRI, r3
 80148d0:	f3bf 8f6f 	isb	sy
 80148d4:	f3bf 8f4f 	dsb	sy
 80148d8:	b662      	cpsie	i
 80148da:	61fb      	str	r3, [r7, #28]
}
 80148dc:	bf00      	nop
 80148de:	bf00      	nop
 80148e0:	e7fd      	b.n	80148de <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80148e2:	2348      	movs	r3, #72	@ 0x48
 80148e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80148e6:	697b      	ldr	r3, [r7, #20]
 80148e8:	2b48      	cmp	r3, #72	@ 0x48
 80148ea:	d00d      	beq.n	8014908 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80148ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148f0:	b672      	cpsid	i
 80148f2:	f383 8811 	msr	BASEPRI, r3
 80148f6:	f3bf 8f6f 	isb	sy
 80148fa:	f3bf 8f4f 	dsb	sy
 80148fe:	b662      	cpsie	i
 8014900:	61bb      	str	r3, [r7, #24]
}
 8014902:	bf00      	nop
 8014904:	bf00      	nop
 8014906:	e7fd      	b.n	8014904 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014908:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801490e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014910:	2b00      	cmp	r3, #0
 8014912:	d00d      	beq.n	8014930 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014916:	2201      	movs	r2, #1
 8014918:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801491c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8014920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014922:	9300      	str	r3, [sp, #0]
 8014924:	4613      	mov	r3, r2
 8014926:	687a      	ldr	r2, [r7, #4]
 8014928:	68b9      	ldr	r1, [r7, #8]
 801492a:	68f8      	ldr	r0, [r7, #12]
 801492c:	f000 f848 	bl	80149c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8014932:	4618      	mov	r0, r3
 8014934:	3730      	adds	r7, #48	@ 0x30
 8014936:	46bd      	mov	sp, r7
 8014938:	bd80      	pop	{r7, pc}

0801493a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801493a:	b580      	push	{r7, lr}
 801493c:	b08a      	sub	sp, #40	@ 0x28
 801493e:	af02      	add	r7, sp, #8
 8014940:	60f8      	str	r0, [r7, #12]
 8014942:	60b9      	str	r1, [r7, #8]
 8014944:	4613      	mov	r3, r2
 8014946:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d10d      	bne.n	801496a <xQueueGenericCreate+0x30>
	__asm volatile
 801494e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014952:	b672      	cpsid	i
 8014954:	f383 8811 	msr	BASEPRI, r3
 8014958:	f3bf 8f6f 	isb	sy
 801495c:	f3bf 8f4f 	dsb	sy
 8014960:	b662      	cpsie	i
 8014962:	613b      	str	r3, [r7, #16]
}
 8014964:	bf00      	nop
 8014966:	bf00      	nop
 8014968:	e7fd      	b.n	8014966 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801496a:	68bb      	ldr	r3, [r7, #8]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d102      	bne.n	8014976 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8014970:	2300      	movs	r3, #0
 8014972:	61fb      	str	r3, [r7, #28]
 8014974:	e004      	b.n	8014980 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	68ba      	ldr	r2, [r7, #8]
 801497a:	fb02 f303 	mul.w	r3, r2, r3
 801497e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014980:	69fb      	ldr	r3, [r7, #28]
 8014982:	3348      	adds	r3, #72	@ 0x48
 8014984:	4618      	mov	r0, r3
 8014986:	f001 fe3f 	bl	8016608 <pvPortMalloc>
 801498a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801498c:	69bb      	ldr	r3, [r7, #24]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d011      	beq.n	80149b6 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014992:	69bb      	ldr	r3, [r7, #24]
 8014994:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014996:	697b      	ldr	r3, [r7, #20]
 8014998:	3348      	adds	r3, #72	@ 0x48
 801499a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801499c:	69bb      	ldr	r3, [r7, #24]
 801499e:	2200      	movs	r2, #0
 80149a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80149a4:	79fa      	ldrb	r2, [r7, #7]
 80149a6:	69bb      	ldr	r3, [r7, #24]
 80149a8:	9300      	str	r3, [sp, #0]
 80149aa:	4613      	mov	r3, r2
 80149ac:	697a      	ldr	r2, [r7, #20]
 80149ae:	68b9      	ldr	r1, [r7, #8]
 80149b0:	68f8      	ldr	r0, [r7, #12]
 80149b2:	f000 f805 	bl	80149c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80149b6:	69bb      	ldr	r3, [r7, #24]
	}
 80149b8:	4618      	mov	r0, r3
 80149ba:	3720      	adds	r7, #32
 80149bc:	46bd      	mov	sp, r7
 80149be:	bd80      	pop	{r7, pc}

080149c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b084      	sub	sp, #16
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	60f8      	str	r0, [r7, #12]
 80149c8:	60b9      	str	r1, [r7, #8]
 80149ca:	607a      	str	r2, [r7, #4]
 80149cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80149ce:	68bb      	ldr	r3, [r7, #8]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d103      	bne.n	80149dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80149d4:	69bb      	ldr	r3, [r7, #24]
 80149d6:	69ba      	ldr	r2, [r7, #24]
 80149d8:	601a      	str	r2, [r3, #0]
 80149da:	e002      	b.n	80149e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80149dc:	69bb      	ldr	r3, [r7, #24]
 80149de:	687a      	ldr	r2, [r7, #4]
 80149e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80149e2:	69bb      	ldr	r3, [r7, #24]
 80149e4:	68fa      	ldr	r2, [r7, #12]
 80149e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80149e8:	69bb      	ldr	r3, [r7, #24]
 80149ea:	68ba      	ldr	r2, [r7, #8]
 80149ec:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80149ee:	2101      	movs	r1, #1
 80149f0:	69b8      	ldr	r0, [r7, #24]
 80149f2:	f7ff feaf 	bl	8014754 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80149f6:	bf00      	nop
 80149f8:	3710      	adds	r7, #16
 80149fa:	46bd      	mov	sp, r7
 80149fc:	bd80      	pop	{r7, pc}
	...

08014a00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b08e      	sub	sp, #56	@ 0x38
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	60f8      	str	r0, [r7, #12]
 8014a08:	60b9      	str	r1, [r7, #8]
 8014a0a:	607a      	str	r2, [r7, #4]
 8014a0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014a0e:	2300      	movs	r3, #0
 8014a10:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8014a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d10d      	bne.n	8014a38 <xQueueGenericSend+0x38>
	__asm volatile
 8014a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a20:	b672      	cpsid	i
 8014a22:	f383 8811 	msr	BASEPRI, r3
 8014a26:	f3bf 8f6f 	isb	sy
 8014a2a:	f3bf 8f4f 	dsb	sy
 8014a2e:	b662      	cpsie	i
 8014a30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014a32:	bf00      	nop
 8014a34:	bf00      	nop
 8014a36:	e7fd      	b.n	8014a34 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014a38:	68bb      	ldr	r3, [r7, #8]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d103      	bne.n	8014a46 <xQueueGenericSend+0x46>
 8014a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d101      	bne.n	8014a4a <xQueueGenericSend+0x4a>
 8014a46:	2301      	movs	r3, #1
 8014a48:	e000      	b.n	8014a4c <xQueueGenericSend+0x4c>
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d10d      	bne.n	8014a6c <xQueueGenericSend+0x6c>
	__asm volatile
 8014a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a54:	b672      	cpsid	i
 8014a56:	f383 8811 	msr	BASEPRI, r3
 8014a5a:	f3bf 8f6f 	isb	sy
 8014a5e:	f3bf 8f4f 	dsb	sy
 8014a62:	b662      	cpsie	i
 8014a64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014a66:	bf00      	nop
 8014a68:	bf00      	nop
 8014a6a:	e7fd      	b.n	8014a68 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014a6c:	683b      	ldr	r3, [r7, #0]
 8014a6e:	2b02      	cmp	r3, #2
 8014a70:	d103      	bne.n	8014a7a <xQueueGenericSend+0x7a>
 8014a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014a76:	2b01      	cmp	r3, #1
 8014a78:	d101      	bne.n	8014a7e <xQueueGenericSend+0x7e>
 8014a7a:	2301      	movs	r3, #1
 8014a7c:	e000      	b.n	8014a80 <xQueueGenericSend+0x80>
 8014a7e:	2300      	movs	r3, #0
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d10d      	bne.n	8014aa0 <xQueueGenericSend+0xa0>
	__asm volatile
 8014a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a88:	b672      	cpsid	i
 8014a8a:	f383 8811 	msr	BASEPRI, r3
 8014a8e:	f3bf 8f6f 	isb	sy
 8014a92:	f3bf 8f4f 	dsb	sy
 8014a96:	b662      	cpsie	i
 8014a98:	623b      	str	r3, [r7, #32]
}
 8014a9a:	bf00      	nop
 8014a9c:	bf00      	nop
 8014a9e:	e7fd      	b.n	8014a9c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014aa0:	f001 fa68 	bl	8015f74 <xTaskGetSchedulerState>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d102      	bne.n	8014ab0 <xQueueGenericSend+0xb0>
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d101      	bne.n	8014ab4 <xQueueGenericSend+0xb4>
 8014ab0:	2301      	movs	r3, #1
 8014ab2:	e000      	b.n	8014ab6 <xQueueGenericSend+0xb6>
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d10d      	bne.n	8014ad6 <xQueueGenericSend+0xd6>
	__asm volatile
 8014aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014abe:	b672      	cpsid	i
 8014ac0:	f383 8811 	msr	BASEPRI, r3
 8014ac4:	f3bf 8f6f 	isb	sy
 8014ac8:	f3bf 8f4f 	dsb	sy
 8014acc:	b662      	cpsie	i
 8014ace:	61fb      	str	r3, [r7, #28]
}
 8014ad0:	bf00      	nop
 8014ad2:	bf00      	nop
 8014ad4:	e7fd      	b.n	8014ad2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014ad6:	f001 fc69 	bl	80163ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014adc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014ae2:	429a      	cmp	r2, r3
 8014ae4:	d302      	bcc.n	8014aec <xQueueGenericSend+0xec>
 8014ae6:	683b      	ldr	r3, [r7, #0]
 8014ae8:	2b02      	cmp	r3, #2
 8014aea:	d129      	bne.n	8014b40 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014aec:	683a      	ldr	r2, [r7, #0]
 8014aee:	68b9      	ldr	r1, [r7, #8]
 8014af0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014af2:	f000 fae5 	bl	80150c0 <prvCopyDataToQueue>
 8014af6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d010      	beq.n	8014b22 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b02:	3324      	adds	r3, #36	@ 0x24
 8014b04:	4618      	mov	r0, r3
 8014b06:	f001 f86b 	bl	8015be0 <xTaskRemoveFromEventList>
 8014b0a:	4603      	mov	r3, r0
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d013      	beq.n	8014b38 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014b10:	4b3f      	ldr	r3, [pc, #252]	@ (8014c10 <xQueueGenericSend+0x210>)
 8014b12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014b16:	601a      	str	r2, [r3, #0]
 8014b18:	f3bf 8f4f 	dsb	sy
 8014b1c:	f3bf 8f6f 	isb	sy
 8014b20:	e00a      	b.n	8014b38 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d007      	beq.n	8014b38 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014b28:	4b39      	ldr	r3, [pc, #228]	@ (8014c10 <xQueueGenericSend+0x210>)
 8014b2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014b2e:	601a      	str	r2, [r3, #0]
 8014b30:	f3bf 8f4f 	dsb	sy
 8014b34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014b38:	f001 fc6e 	bl	8016418 <vPortExitCritical>
				return pdPASS;
 8014b3c:	2301      	movs	r3, #1
 8014b3e:	e063      	b.n	8014c08 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d103      	bne.n	8014b4e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014b46:	f001 fc67 	bl	8016418 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	e05c      	b.n	8014c08 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d106      	bne.n	8014b62 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014b54:	f107 0314 	add.w	r3, r7, #20
 8014b58:	4618      	mov	r0, r3
 8014b5a:	f001 f8a7 	bl	8015cac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014b5e:	2301      	movs	r3, #1
 8014b60:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014b62:	f001 fc59 	bl	8016418 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014b66:	f000 fe03 	bl	8015770 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014b6a:	f001 fc1f 	bl	80163ac <vPortEnterCritical>
 8014b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014b74:	b25b      	sxtb	r3, r3
 8014b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b7a:	d103      	bne.n	8014b84 <xQueueGenericSend+0x184>
 8014b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b7e:	2200      	movs	r2, #0
 8014b80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014b8a:	b25b      	sxtb	r3, r3
 8014b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b90:	d103      	bne.n	8014b9a <xQueueGenericSend+0x19a>
 8014b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b94:	2200      	movs	r2, #0
 8014b96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014b9a:	f001 fc3d 	bl	8016418 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014b9e:	1d3a      	adds	r2, r7, #4
 8014ba0:	f107 0314 	add.w	r3, r7, #20
 8014ba4:	4611      	mov	r1, r2
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f001 f896 	bl	8015cd8 <xTaskCheckForTimeOut>
 8014bac:	4603      	mov	r3, r0
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d124      	bne.n	8014bfc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014bb2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014bb4:	f000 fb7c 	bl	80152b0 <prvIsQueueFull>
 8014bb8:	4603      	mov	r3, r0
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d018      	beq.n	8014bf0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bc0:	3310      	adds	r3, #16
 8014bc2:	687a      	ldr	r2, [r7, #4]
 8014bc4:	4611      	mov	r1, r2
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f000 ffe2 	bl	8015b90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014bcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014bce:	f000 fb07 	bl	80151e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014bd2:	f000 fddb 	bl	801578c <xTaskResumeAll>
 8014bd6:	4603      	mov	r3, r0
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	f47f af7c 	bne.w	8014ad6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8014bde:	4b0c      	ldr	r3, [pc, #48]	@ (8014c10 <xQueueGenericSend+0x210>)
 8014be0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014be4:	601a      	str	r2, [r3, #0]
 8014be6:	f3bf 8f4f 	dsb	sy
 8014bea:	f3bf 8f6f 	isb	sy
 8014bee:	e772      	b.n	8014ad6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014bf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014bf2:	f000 faf5 	bl	80151e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014bf6:	f000 fdc9 	bl	801578c <xTaskResumeAll>
 8014bfa:	e76c      	b.n	8014ad6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014bfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014bfe:	f000 faef 	bl	80151e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014c02:	f000 fdc3 	bl	801578c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014c06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014c08:	4618      	mov	r0, r3
 8014c0a:	3738      	adds	r7, #56	@ 0x38
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	bd80      	pop	{r7, pc}
 8014c10:	e000ed04 	.word	0xe000ed04

08014c14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b08e      	sub	sp, #56	@ 0x38
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	60f8      	str	r0, [r7, #12]
 8014c1c:	60b9      	str	r1, [r7, #8]
 8014c1e:	607a      	str	r2, [r7, #4]
 8014c20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8014c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d10d      	bne.n	8014c48 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8014c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c30:	b672      	cpsid	i
 8014c32:	f383 8811 	msr	BASEPRI, r3
 8014c36:	f3bf 8f6f 	isb	sy
 8014c3a:	f3bf 8f4f 	dsb	sy
 8014c3e:	b662      	cpsie	i
 8014c40:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014c42:	bf00      	nop
 8014c44:	bf00      	nop
 8014c46:	e7fd      	b.n	8014c44 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014c48:	68bb      	ldr	r3, [r7, #8]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d103      	bne.n	8014c56 <xQueueGenericSendFromISR+0x42>
 8014c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d101      	bne.n	8014c5a <xQueueGenericSendFromISR+0x46>
 8014c56:	2301      	movs	r3, #1
 8014c58:	e000      	b.n	8014c5c <xQueueGenericSendFromISR+0x48>
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d10d      	bne.n	8014c7c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8014c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c64:	b672      	cpsid	i
 8014c66:	f383 8811 	msr	BASEPRI, r3
 8014c6a:	f3bf 8f6f 	isb	sy
 8014c6e:	f3bf 8f4f 	dsb	sy
 8014c72:	b662      	cpsie	i
 8014c74:	623b      	str	r3, [r7, #32]
}
 8014c76:	bf00      	nop
 8014c78:	bf00      	nop
 8014c7a:	e7fd      	b.n	8014c78 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014c7c:	683b      	ldr	r3, [r7, #0]
 8014c7e:	2b02      	cmp	r3, #2
 8014c80:	d103      	bne.n	8014c8a <xQueueGenericSendFromISR+0x76>
 8014c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014c86:	2b01      	cmp	r3, #1
 8014c88:	d101      	bne.n	8014c8e <xQueueGenericSendFromISR+0x7a>
 8014c8a:	2301      	movs	r3, #1
 8014c8c:	e000      	b.n	8014c90 <xQueueGenericSendFromISR+0x7c>
 8014c8e:	2300      	movs	r3, #0
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d10d      	bne.n	8014cb0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8014c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c98:	b672      	cpsid	i
 8014c9a:	f383 8811 	msr	BASEPRI, r3
 8014c9e:	f3bf 8f6f 	isb	sy
 8014ca2:	f3bf 8f4f 	dsb	sy
 8014ca6:	b662      	cpsie	i
 8014ca8:	61fb      	str	r3, [r7, #28]
}
 8014caa:	bf00      	nop
 8014cac:	bf00      	nop
 8014cae:	e7fd      	b.n	8014cac <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014cb0:	f001 fc64 	bl	801657c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014cb4:	f3ef 8211 	mrs	r2, BASEPRI
 8014cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cbc:	b672      	cpsid	i
 8014cbe:	f383 8811 	msr	BASEPRI, r3
 8014cc2:	f3bf 8f6f 	isb	sy
 8014cc6:	f3bf 8f4f 	dsb	sy
 8014cca:	b662      	cpsie	i
 8014ccc:	61ba      	str	r2, [r7, #24]
 8014cce:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014cd0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014cdc:	429a      	cmp	r2, r3
 8014cde:	d302      	bcc.n	8014ce6 <xQueueGenericSendFromISR+0xd2>
 8014ce0:	683b      	ldr	r3, [r7, #0]
 8014ce2:	2b02      	cmp	r3, #2
 8014ce4:	d12c      	bne.n	8014d40 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ce8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014cec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014cf0:	683a      	ldr	r2, [r7, #0]
 8014cf2:	68b9      	ldr	r1, [r7, #8]
 8014cf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014cf6:	f000 f9e3 	bl	80150c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014cfa:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8014cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d02:	d112      	bne.n	8014d2a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d016      	beq.n	8014d3a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d0e:	3324      	adds	r3, #36	@ 0x24
 8014d10:	4618      	mov	r0, r3
 8014d12:	f000 ff65 	bl	8015be0 <xTaskRemoveFromEventList>
 8014d16:	4603      	mov	r3, r0
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d00e      	beq.n	8014d3a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d00b      	beq.n	8014d3a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	2201      	movs	r2, #1
 8014d26:	601a      	str	r2, [r3, #0]
 8014d28:	e007      	b.n	8014d3a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014d2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014d2e:	3301      	adds	r3, #1
 8014d30:	b2db      	uxtb	r3, r3
 8014d32:	b25a      	sxtb	r2, r3
 8014d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8014d3a:	2301      	movs	r3, #1
 8014d3c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8014d3e:	e001      	b.n	8014d44 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014d40:	2300      	movs	r3, #0
 8014d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8014d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d46:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014d48:	693b      	ldr	r3, [r7, #16]
 8014d4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014d4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8014d52:	4618      	mov	r0, r3
 8014d54:	3738      	adds	r7, #56	@ 0x38
 8014d56:	46bd      	mov	sp, r7
 8014d58:	bd80      	pop	{r7, pc}
	...

08014d5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b08c      	sub	sp, #48	@ 0x30
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	60f8      	str	r0, [r7, #12]
 8014d64:	60b9      	str	r1, [r7, #8]
 8014d66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014d68:	2300      	movs	r3, #0
 8014d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d10d      	bne.n	8014d92 <xQueueReceive+0x36>
	__asm volatile
 8014d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d7a:	b672      	cpsid	i
 8014d7c:	f383 8811 	msr	BASEPRI, r3
 8014d80:	f3bf 8f6f 	isb	sy
 8014d84:	f3bf 8f4f 	dsb	sy
 8014d88:	b662      	cpsie	i
 8014d8a:	623b      	str	r3, [r7, #32]
}
 8014d8c:	bf00      	nop
 8014d8e:	bf00      	nop
 8014d90:	e7fd      	b.n	8014d8e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014d92:	68bb      	ldr	r3, [r7, #8]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d103      	bne.n	8014da0 <xQueueReceive+0x44>
 8014d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d101      	bne.n	8014da4 <xQueueReceive+0x48>
 8014da0:	2301      	movs	r3, #1
 8014da2:	e000      	b.n	8014da6 <xQueueReceive+0x4a>
 8014da4:	2300      	movs	r3, #0
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d10d      	bne.n	8014dc6 <xQueueReceive+0x6a>
	__asm volatile
 8014daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014dae:	b672      	cpsid	i
 8014db0:	f383 8811 	msr	BASEPRI, r3
 8014db4:	f3bf 8f6f 	isb	sy
 8014db8:	f3bf 8f4f 	dsb	sy
 8014dbc:	b662      	cpsie	i
 8014dbe:	61fb      	str	r3, [r7, #28]
}
 8014dc0:	bf00      	nop
 8014dc2:	bf00      	nop
 8014dc4:	e7fd      	b.n	8014dc2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014dc6:	f001 f8d5 	bl	8015f74 <xTaskGetSchedulerState>
 8014dca:	4603      	mov	r3, r0
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d102      	bne.n	8014dd6 <xQueueReceive+0x7a>
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d101      	bne.n	8014dda <xQueueReceive+0x7e>
 8014dd6:	2301      	movs	r3, #1
 8014dd8:	e000      	b.n	8014ddc <xQueueReceive+0x80>
 8014dda:	2300      	movs	r3, #0
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d10d      	bne.n	8014dfc <xQueueReceive+0xa0>
	__asm volatile
 8014de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014de4:	b672      	cpsid	i
 8014de6:	f383 8811 	msr	BASEPRI, r3
 8014dea:	f3bf 8f6f 	isb	sy
 8014dee:	f3bf 8f4f 	dsb	sy
 8014df2:	b662      	cpsie	i
 8014df4:	61bb      	str	r3, [r7, #24]
}
 8014df6:	bf00      	nop
 8014df8:	bf00      	nop
 8014dfa:	e7fd      	b.n	8014df8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014dfc:	f001 fad6 	bl	80163ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014e04:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d01f      	beq.n	8014e4c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014e0c:	68b9      	ldr	r1, [r7, #8]
 8014e0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014e10:	f000 f9c0 	bl	8015194 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e16:	1e5a      	subs	r2, r3, #1
 8014e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e1a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e1e:	691b      	ldr	r3, [r3, #16]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d00f      	beq.n	8014e44 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e26:	3310      	adds	r3, #16
 8014e28:	4618      	mov	r0, r3
 8014e2a:	f000 fed9 	bl	8015be0 <xTaskRemoveFromEventList>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d007      	beq.n	8014e44 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014e34:	4b3c      	ldr	r3, [pc, #240]	@ (8014f28 <xQueueReceive+0x1cc>)
 8014e36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014e3a:	601a      	str	r2, [r3, #0]
 8014e3c:	f3bf 8f4f 	dsb	sy
 8014e40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014e44:	f001 fae8 	bl	8016418 <vPortExitCritical>
				return pdPASS;
 8014e48:	2301      	movs	r3, #1
 8014e4a:	e069      	b.n	8014f20 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d103      	bne.n	8014e5a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014e52:	f001 fae1 	bl	8016418 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014e56:	2300      	movs	r3, #0
 8014e58:	e062      	b.n	8014f20 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d106      	bne.n	8014e6e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014e60:	f107 0310 	add.w	r3, r7, #16
 8014e64:	4618      	mov	r0, r3
 8014e66:	f000 ff21 	bl	8015cac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014e6a:	2301      	movs	r3, #1
 8014e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014e6e:	f001 fad3 	bl	8016418 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014e72:	f000 fc7d 	bl	8015770 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014e76:	f001 fa99 	bl	80163ac <vPortEnterCritical>
 8014e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014e80:	b25b      	sxtb	r3, r3
 8014e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e86:	d103      	bne.n	8014e90 <xQueueReceive+0x134>
 8014e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014e96:	b25b      	sxtb	r3, r3
 8014e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e9c:	d103      	bne.n	8014ea6 <xQueueReceive+0x14a>
 8014e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014ea6:	f001 fab7 	bl	8016418 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014eaa:	1d3a      	adds	r2, r7, #4
 8014eac:	f107 0310 	add.w	r3, r7, #16
 8014eb0:	4611      	mov	r1, r2
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	f000 ff10 	bl	8015cd8 <xTaskCheckForTimeOut>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d123      	bne.n	8014f06 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014ebe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014ec0:	f000 f9e0 	bl	8015284 <prvIsQueueEmpty>
 8014ec4:	4603      	mov	r3, r0
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d017      	beq.n	8014efa <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ecc:	3324      	adds	r3, #36	@ 0x24
 8014ece:	687a      	ldr	r2, [r7, #4]
 8014ed0:	4611      	mov	r1, r2
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	f000 fe5c 	bl	8015b90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014ed8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014eda:	f000 f981 	bl	80151e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014ede:	f000 fc55 	bl	801578c <xTaskResumeAll>
 8014ee2:	4603      	mov	r3, r0
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d189      	bne.n	8014dfc <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8014ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8014f28 <xQueueReceive+0x1cc>)
 8014eea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014eee:	601a      	str	r2, [r3, #0]
 8014ef0:	f3bf 8f4f 	dsb	sy
 8014ef4:	f3bf 8f6f 	isb	sy
 8014ef8:	e780      	b.n	8014dfc <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014efa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014efc:	f000 f970 	bl	80151e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014f00:	f000 fc44 	bl	801578c <xTaskResumeAll>
 8014f04:	e77a      	b.n	8014dfc <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014f06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014f08:	f000 f96a 	bl	80151e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014f0c:	f000 fc3e 	bl	801578c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014f10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014f12:	f000 f9b7 	bl	8015284 <prvIsQueueEmpty>
 8014f16:	4603      	mov	r3, r0
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	f43f af6f 	beq.w	8014dfc <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014f1e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014f20:	4618      	mov	r0, r3
 8014f22:	3730      	adds	r7, #48	@ 0x30
 8014f24:	46bd      	mov	sp, r7
 8014f26:	bd80      	pop	{r7, pc}
 8014f28:	e000ed04 	.word	0xe000ed04

08014f2c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b08e      	sub	sp, #56	@ 0x38
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	60f8      	str	r0, [r7, #12]
 8014f34:	60b9      	str	r1, [r7, #8]
 8014f36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8014f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d10d      	bne.n	8014f5e <xQueueReceiveFromISR+0x32>
	__asm volatile
 8014f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f46:	b672      	cpsid	i
 8014f48:	f383 8811 	msr	BASEPRI, r3
 8014f4c:	f3bf 8f6f 	isb	sy
 8014f50:	f3bf 8f4f 	dsb	sy
 8014f54:	b662      	cpsie	i
 8014f56:	623b      	str	r3, [r7, #32]
}
 8014f58:	bf00      	nop
 8014f5a:	bf00      	nop
 8014f5c:	e7fd      	b.n	8014f5a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014f5e:	68bb      	ldr	r3, [r7, #8]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d103      	bne.n	8014f6c <xQueueReceiveFromISR+0x40>
 8014f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d101      	bne.n	8014f70 <xQueueReceiveFromISR+0x44>
 8014f6c:	2301      	movs	r3, #1
 8014f6e:	e000      	b.n	8014f72 <xQueueReceiveFromISR+0x46>
 8014f70:	2300      	movs	r3, #0
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d10d      	bne.n	8014f92 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8014f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f7a:	b672      	cpsid	i
 8014f7c:	f383 8811 	msr	BASEPRI, r3
 8014f80:	f3bf 8f6f 	isb	sy
 8014f84:	f3bf 8f4f 	dsb	sy
 8014f88:	b662      	cpsie	i
 8014f8a:	61fb      	str	r3, [r7, #28]
}
 8014f8c:	bf00      	nop
 8014f8e:	bf00      	nop
 8014f90:	e7fd      	b.n	8014f8e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014f92:	f001 faf3 	bl	801657c <vPortValidateInterruptPriority>
	__asm volatile
 8014f96:	f3ef 8211 	mrs	r2, BASEPRI
 8014f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f9e:	b672      	cpsid	i
 8014fa0:	f383 8811 	msr	BASEPRI, r3
 8014fa4:	f3bf 8f6f 	isb	sy
 8014fa8:	f3bf 8f4f 	dsb	sy
 8014fac:	b662      	cpsie	i
 8014fae:	61ba      	str	r2, [r7, #24]
 8014fb0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014fb2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014fba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d02f      	beq.n	8015022 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014fc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014fcc:	68b9      	ldr	r1, [r7, #8]
 8014fce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014fd0:	f000 f8e0 	bl	8015194 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fd6:	1e5a      	subs	r2, r3, #1
 8014fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014fda:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014fdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fe4:	d112      	bne.n	801500c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014fe8:	691b      	ldr	r3, [r3, #16]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d016      	beq.n	801501c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ff0:	3310      	adds	r3, #16
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f000 fdf4 	bl	8015be0 <xTaskRemoveFromEventList>
 8014ff8:	4603      	mov	r3, r0
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d00e      	beq.n	801501c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d00b      	beq.n	801501c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	2201      	movs	r2, #1
 8015008:	601a      	str	r2, [r3, #0]
 801500a:	e007      	b.n	801501c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801500c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015010:	3301      	adds	r3, #1
 8015012:	b2db      	uxtb	r3, r3
 8015014:	b25a      	sxtb	r2, r3
 8015016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801501c:	2301      	movs	r3, #1
 801501e:	637b      	str	r3, [r7, #52]	@ 0x34
 8015020:	e001      	b.n	8015026 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8015022:	2300      	movs	r3, #0
 8015024:	637b      	str	r3, [r7, #52]	@ 0x34
 8015026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015028:	613b      	str	r3, [r7, #16]
	__asm volatile
 801502a:	693b      	ldr	r3, [r7, #16]
 801502c:	f383 8811 	msr	BASEPRI, r3
}
 8015030:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8015034:	4618      	mov	r0, r3
 8015036:	3738      	adds	r7, #56	@ 0x38
 8015038:	46bd      	mov	sp, r7
 801503a:	bd80      	pop	{r7, pc}

0801503c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 801503c:	b580      	push	{r7, lr}
 801503e:	b084      	sub	sp, #16
 8015040:	af00      	add	r7, sp, #0
 8015042:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d10d      	bne.n	8015066 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 801504a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801504e:	b672      	cpsid	i
 8015050:	f383 8811 	msr	BASEPRI, r3
 8015054:	f3bf 8f6f 	isb	sy
 8015058:	f3bf 8f4f 	dsb	sy
 801505c:	b662      	cpsie	i
 801505e:	60bb      	str	r3, [r7, #8]
}
 8015060:	bf00      	nop
 8015062:	bf00      	nop
 8015064:	e7fd      	b.n	8015062 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8015066:	f001 f9a1 	bl	80163ac <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801506e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8015070:	f001 f9d2 	bl	8016418 <vPortExitCritical>

	return uxReturn;
 8015074:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015076:	4618      	mov	r0, r3
 8015078:	3710      	adds	r7, #16
 801507a:	46bd      	mov	sp, r7
 801507c:	bd80      	pop	{r7, pc}

0801507e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 801507e:	b480      	push	{r7}
 8015080:	b087      	sub	sp, #28
 8015082:	af00      	add	r7, sp, #0
 8015084:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 801508a:	697b      	ldr	r3, [r7, #20]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d10d      	bne.n	80150ac <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8015090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015094:	b672      	cpsid	i
 8015096:	f383 8811 	msr	BASEPRI, r3
 801509a:	f3bf 8f6f 	isb	sy
 801509e:	f3bf 8f4f 	dsb	sy
 80150a2:	b662      	cpsie	i
 80150a4:	60fb      	str	r3, [r7, #12]
}
 80150a6:	bf00      	nop
 80150a8:	bf00      	nop
 80150aa:	e7fd      	b.n	80150a8 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 80150ac:	697b      	ldr	r3, [r7, #20]
 80150ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80150b0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80150b2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80150b4:	4618      	mov	r0, r3
 80150b6:	371c      	adds	r7, #28
 80150b8:	46bd      	mov	sp, r7
 80150ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150be:	4770      	bx	lr

080150c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80150c0:	b580      	push	{r7, lr}
 80150c2:	b086      	sub	sp, #24
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	60f8      	str	r0, [r7, #12]
 80150c8:	60b9      	str	r1, [r7, #8]
 80150ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80150cc:	2300      	movs	r3, #0
 80150ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80150d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d10d      	bne.n	80150fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d14d      	bne.n	8015182 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	689b      	ldr	r3, [r3, #8]
 80150ea:	4618      	mov	r0, r3
 80150ec:	f000 ff60 	bl	8015fb0 <xTaskPriorityDisinherit>
 80150f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	2200      	movs	r2, #0
 80150f6:	609a      	str	r2, [r3, #8]
 80150f8:	e043      	b.n	8015182 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d119      	bne.n	8015134 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	6858      	ldr	r0, [r3, #4]
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015108:	461a      	mov	r2, r3
 801510a:	68b9      	ldr	r1, [r7, #8]
 801510c:	f002 f819 	bl	8017142 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	685a      	ldr	r2, [r3, #4]
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015118:	441a      	add	r2, r3
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	685a      	ldr	r2, [r3, #4]
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	689b      	ldr	r3, [r3, #8]
 8015126:	429a      	cmp	r2, r3
 8015128:	d32b      	bcc.n	8015182 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	681a      	ldr	r2, [r3, #0]
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	605a      	str	r2, [r3, #4]
 8015132:	e026      	b.n	8015182 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	68d8      	ldr	r0, [r3, #12]
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801513c:	461a      	mov	r2, r3
 801513e:	68b9      	ldr	r1, [r7, #8]
 8015140:	f001 ffff 	bl	8017142 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	68da      	ldr	r2, [r3, #12]
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801514c:	425b      	negs	r3, r3
 801514e:	441a      	add	r2, r3
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	68da      	ldr	r2, [r3, #12]
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	429a      	cmp	r2, r3
 801515e:	d207      	bcs.n	8015170 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	689a      	ldr	r2, [r3, #8]
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015168:	425b      	negs	r3, r3
 801516a:	441a      	add	r2, r3
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	2b02      	cmp	r3, #2
 8015174:	d105      	bne.n	8015182 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015176:	693b      	ldr	r3, [r7, #16]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d002      	beq.n	8015182 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801517c:	693b      	ldr	r3, [r7, #16]
 801517e:	3b01      	subs	r3, #1
 8015180:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015182:	693b      	ldr	r3, [r7, #16]
 8015184:	1c5a      	adds	r2, r3, #1
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801518a:	697b      	ldr	r3, [r7, #20]
}
 801518c:	4618      	mov	r0, r3
 801518e:	3718      	adds	r7, #24
 8015190:	46bd      	mov	sp, r7
 8015192:	bd80      	pop	{r7, pc}

08015194 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b082      	sub	sp, #8
 8015198:	af00      	add	r7, sp, #0
 801519a:	6078      	str	r0, [r7, #4]
 801519c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d018      	beq.n	80151d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	68da      	ldr	r2, [r3, #12]
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80151ae:	441a      	add	r2, r3
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	68da      	ldr	r2, [r3, #12]
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	689b      	ldr	r3, [r3, #8]
 80151bc:	429a      	cmp	r2, r3
 80151be:	d303      	bcc.n	80151c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	681a      	ldr	r2, [r3, #0]
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	68d9      	ldr	r1, [r3, #12]
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80151d0:	461a      	mov	r2, r3
 80151d2:	6838      	ldr	r0, [r7, #0]
 80151d4:	f001 ffb5 	bl	8017142 <memcpy>
	}
}
 80151d8:	bf00      	nop
 80151da:	3708      	adds	r7, #8
 80151dc:	46bd      	mov	sp, r7
 80151de:	bd80      	pop	{r7, pc}

080151e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80151e0:	b580      	push	{r7, lr}
 80151e2:	b084      	sub	sp, #16
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80151e8:	f001 f8e0 	bl	80163ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80151f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80151f4:	e011      	b.n	801521a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d012      	beq.n	8015224 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	3324      	adds	r3, #36	@ 0x24
 8015202:	4618      	mov	r0, r3
 8015204:	f000 fcec 	bl	8015be0 <xTaskRemoveFromEventList>
 8015208:	4603      	mov	r3, r0
 801520a:	2b00      	cmp	r3, #0
 801520c:	d001      	beq.n	8015212 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801520e:	f000 fdcb 	bl	8015da8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015212:	7bfb      	ldrb	r3, [r7, #15]
 8015214:	3b01      	subs	r3, #1
 8015216:	b2db      	uxtb	r3, r3
 8015218:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801521a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801521e:	2b00      	cmp	r3, #0
 8015220:	dce9      	bgt.n	80151f6 <prvUnlockQueue+0x16>
 8015222:	e000      	b.n	8015226 <prvUnlockQueue+0x46>
					break;
 8015224:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	22ff      	movs	r2, #255	@ 0xff
 801522a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801522e:	f001 f8f3 	bl	8016418 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015232:	f001 f8bb 	bl	80163ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801523c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801523e:	e011      	b.n	8015264 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	691b      	ldr	r3, [r3, #16]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d012      	beq.n	801526e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	3310      	adds	r3, #16
 801524c:	4618      	mov	r0, r3
 801524e:	f000 fcc7 	bl	8015be0 <xTaskRemoveFromEventList>
 8015252:	4603      	mov	r3, r0
 8015254:	2b00      	cmp	r3, #0
 8015256:	d001      	beq.n	801525c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015258:	f000 fda6 	bl	8015da8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801525c:	7bbb      	ldrb	r3, [r7, #14]
 801525e:	3b01      	subs	r3, #1
 8015260:	b2db      	uxtb	r3, r3
 8015262:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015264:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015268:	2b00      	cmp	r3, #0
 801526a:	dce9      	bgt.n	8015240 <prvUnlockQueue+0x60>
 801526c:	e000      	b.n	8015270 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801526e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	22ff      	movs	r2, #255	@ 0xff
 8015274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8015278:	f001 f8ce 	bl	8016418 <vPortExitCritical>
}
 801527c:	bf00      	nop
 801527e:	3710      	adds	r7, #16
 8015280:	46bd      	mov	sp, r7
 8015282:	bd80      	pop	{r7, pc}

08015284 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015284:	b580      	push	{r7, lr}
 8015286:	b084      	sub	sp, #16
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801528c:	f001 f88e 	bl	80163ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015294:	2b00      	cmp	r3, #0
 8015296:	d102      	bne.n	801529e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015298:	2301      	movs	r3, #1
 801529a:	60fb      	str	r3, [r7, #12]
 801529c:	e001      	b.n	80152a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801529e:	2300      	movs	r3, #0
 80152a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80152a2:	f001 f8b9 	bl	8016418 <vPortExitCritical>

	return xReturn;
 80152a6:	68fb      	ldr	r3, [r7, #12]
}
 80152a8:	4618      	mov	r0, r3
 80152aa:	3710      	adds	r7, #16
 80152ac:	46bd      	mov	sp, r7
 80152ae:	bd80      	pop	{r7, pc}

080152b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b084      	sub	sp, #16
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80152b8:	f001 f878 	bl	80163ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80152c4:	429a      	cmp	r2, r3
 80152c6:	d102      	bne.n	80152ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80152c8:	2301      	movs	r3, #1
 80152ca:	60fb      	str	r3, [r7, #12]
 80152cc:	e001      	b.n	80152d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80152ce:	2300      	movs	r3, #0
 80152d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80152d2:	f001 f8a1 	bl	8016418 <vPortExitCritical>

	return xReturn;
 80152d6:	68fb      	ldr	r3, [r7, #12]
}
 80152d8:	4618      	mov	r0, r3
 80152da:	3710      	adds	r7, #16
 80152dc:	46bd      	mov	sp, r7
 80152de:	bd80      	pop	{r7, pc}

080152e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b08e      	sub	sp, #56	@ 0x38
 80152e4:	af04      	add	r7, sp, #16
 80152e6:	60f8      	str	r0, [r7, #12]
 80152e8:	60b9      	str	r1, [r7, #8]
 80152ea:	607a      	str	r2, [r7, #4]
 80152ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80152ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d10d      	bne.n	8015310 <xTaskCreateStatic+0x30>
	__asm volatile
 80152f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152f8:	b672      	cpsid	i
 80152fa:	f383 8811 	msr	BASEPRI, r3
 80152fe:	f3bf 8f6f 	isb	sy
 8015302:	f3bf 8f4f 	dsb	sy
 8015306:	b662      	cpsie	i
 8015308:	623b      	str	r3, [r7, #32]
}
 801530a:	bf00      	nop
 801530c:	bf00      	nop
 801530e:	e7fd      	b.n	801530c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8015310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015312:	2b00      	cmp	r3, #0
 8015314:	d10d      	bne.n	8015332 <xTaskCreateStatic+0x52>
	__asm volatile
 8015316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801531a:	b672      	cpsid	i
 801531c:	f383 8811 	msr	BASEPRI, r3
 8015320:	f3bf 8f6f 	isb	sy
 8015324:	f3bf 8f4f 	dsb	sy
 8015328:	b662      	cpsie	i
 801532a:	61fb      	str	r3, [r7, #28]
}
 801532c:	bf00      	nop
 801532e:	bf00      	nop
 8015330:	e7fd      	b.n	801532e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015332:	2358      	movs	r3, #88	@ 0x58
 8015334:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015336:	693b      	ldr	r3, [r7, #16]
 8015338:	2b58      	cmp	r3, #88	@ 0x58
 801533a:	d00d      	beq.n	8015358 <xTaskCreateStatic+0x78>
	__asm volatile
 801533c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015340:	b672      	cpsid	i
 8015342:	f383 8811 	msr	BASEPRI, r3
 8015346:	f3bf 8f6f 	isb	sy
 801534a:	f3bf 8f4f 	dsb	sy
 801534e:	b662      	cpsie	i
 8015350:	61bb      	str	r3, [r7, #24]
}
 8015352:	bf00      	nop
 8015354:	bf00      	nop
 8015356:	e7fd      	b.n	8015354 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015358:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801535a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801535c:	2b00      	cmp	r3, #0
 801535e:	d01e      	beq.n	801539e <xTaskCreateStatic+0xbe>
 8015360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015362:	2b00      	cmp	r3, #0
 8015364:	d01b      	beq.n	801539e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015368:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801536c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801536e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015372:	2202      	movs	r2, #2
 8015374:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015378:	2300      	movs	r3, #0
 801537a:	9303      	str	r3, [sp, #12]
 801537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801537e:	9302      	str	r3, [sp, #8]
 8015380:	f107 0314 	add.w	r3, r7, #20
 8015384:	9301      	str	r3, [sp, #4]
 8015386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015388:	9300      	str	r3, [sp, #0]
 801538a:	683b      	ldr	r3, [r7, #0]
 801538c:	687a      	ldr	r2, [r7, #4]
 801538e:	68b9      	ldr	r1, [r7, #8]
 8015390:	68f8      	ldr	r0, [r7, #12]
 8015392:	f000 f850 	bl	8015436 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015396:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015398:	f000 f8e2 	bl	8015560 <prvAddNewTaskToReadyList>
 801539c:	e001      	b.n	80153a2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 801539e:	2300      	movs	r3, #0
 80153a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80153a2:	697b      	ldr	r3, [r7, #20]
	}
 80153a4:	4618      	mov	r0, r3
 80153a6:	3728      	adds	r7, #40	@ 0x28
 80153a8:	46bd      	mov	sp, r7
 80153aa:	bd80      	pop	{r7, pc}

080153ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80153ac:	b580      	push	{r7, lr}
 80153ae:	b08c      	sub	sp, #48	@ 0x30
 80153b0:	af04      	add	r7, sp, #16
 80153b2:	60f8      	str	r0, [r7, #12]
 80153b4:	60b9      	str	r1, [r7, #8]
 80153b6:	603b      	str	r3, [r7, #0]
 80153b8:	4613      	mov	r3, r2
 80153ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80153bc:	88fb      	ldrh	r3, [r7, #6]
 80153be:	009b      	lsls	r3, r3, #2
 80153c0:	4618      	mov	r0, r3
 80153c2:	f001 f921 	bl	8016608 <pvPortMalloc>
 80153c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80153c8:	697b      	ldr	r3, [r7, #20]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d00e      	beq.n	80153ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80153ce:	2058      	movs	r0, #88	@ 0x58
 80153d0:	f001 f91a 	bl	8016608 <pvPortMalloc>
 80153d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80153d6:	69fb      	ldr	r3, [r7, #28]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d003      	beq.n	80153e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80153dc:	69fb      	ldr	r3, [r7, #28]
 80153de:	697a      	ldr	r2, [r7, #20]
 80153e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80153e2:	e005      	b.n	80153f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80153e4:	6978      	ldr	r0, [r7, #20]
 80153e6:	f001 f9e1 	bl	80167ac <vPortFree>
 80153ea:	e001      	b.n	80153f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80153ec:	2300      	movs	r3, #0
 80153ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80153f0:	69fb      	ldr	r3, [r7, #28]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d017      	beq.n	8015426 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80153f6:	69fb      	ldr	r3, [r7, #28]
 80153f8:	2200      	movs	r2, #0
 80153fa:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80153fe:	88fa      	ldrh	r2, [r7, #6]
 8015400:	2300      	movs	r3, #0
 8015402:	9303      	str	r3, [sp, #12]
 8015404:	69fb      	ldr	r3, [r7, #28]
 8015406:	9302      	str	r3, [sp, #8]
 8015408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801540a:	9301      	str	r3, [sp, #4]
 801540c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801540e:	9300      	str	r3, [sp, #0]
 8015410:	683b      	ldr	r3, [r7, #0]
 8015412:	68b9      	ldr	r1, [r7, #8]
 8015414:	68f8      	ldr	r0, [r7, #12]
 8015416:	f000 f80e 	bl	8015436 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801541a:	69f8      	ldr	r0, [r7, #28]
 801541c:	f000 f8a0 	bl	8015560 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015420:	2301      	movs	r3, #1
 8015422:	61bb      	str	r3, [r7, #24]
 8015424:	e002      	b.n	801542c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015426:	f04f 33ff 	mov.w	r3, #4294967295
 801542a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801542c:	69bb      	ldr	r3, [r7, #24]
	}
 801542e:	4618      	mov	r0, r3
 8015430:	3720      	adds	r7, #32
 8015432:	46bd      	mov	sp, r7
 8015434:	bd80      	pop	{r7, pc}

08015436 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015436:	b580      	push	{r7, lr}
 8015438:	b088      	sub	sp, #32
 801543a:	af00      	add	r7, sp, #0
 801543c:	60f8      	str	r0, [r7, #12]
 801543e:	60b9      	str	r1, [r7, #8]
 8015440:	607a      	str	r2, [r7, #4]
 8015442:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015446:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	009b      	lsls	r3, r3, #2
 801544c:	461a      	mov	r2, r3
 801544e:	21a5      	movs	r1, #165	@ 0xa5
 8015450:	f001 fdc2 	bl	8016fd8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015456:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015458:	6879      	ldr	r1, [r7, #4]
 801545a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801545e:	440b      	add	r3, r1
 8015460:	009b      	lsls	r3, r3, #2
 8015462:	4413      	add	r3, r2
 8015464:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015466:	69bb      	ldr	r3, [r7, #24]
 8015468:	f023 0307 	bic.w	r3, r3, #7
 801546c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801546e:	69bb      	ldr	r3, [r7, #24]
 8015470:	f003 0307 	and.w	r3, r3, #7
 8015474:	2b00      	cmp	r3, #0
 8015476:	d00d      	beq.n	8015494 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8015478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801547c:	b672      	cpsid	i
 801547e:	f383 8811 	msr	BASEPRI, r3
 8015482:	f3bf 8f6f 	isb	sy
 8015486:	f3bf 8f4f 	dsb	sy
 801548a:	b662      	cpsie	i
 801548c:	617b      	str	r3, [r7, #20]
}
 801548e:	bf00      	nop
 8015490:	bf00      	nop
 8015492:	e7fd      	b.n	8015490 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015494:	68bb      	ldr	r3, [r7, #8]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d01f      	beq.n	80154da <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801549a:	2300      	movs	r3, #0
 801549c:	61fb      	str	r3, [r7, #28]
 801549e:	e012      	b.n	80154c6 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80154a0:	68ba      	ldr	r2, [r7, #8]
 80154a2:	69fb      	ldr	r3, [r7, #28]
 80154a4:	4413      	add	r3, r2
 80154a6:	7819      	ldrb	r1, [r3, #0]
 80154a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80154aa:	69fb      	ldr	r3, [r7, #28]
 80154ac:	4413      	add	r3, r2
 80154ae:	3334      	adds	r3, #52	@ 0x34
 80154b0:	460a      	mov	r2, r1
 80154b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80154b4:	68ba      	ldr	r2, [r7, #8]
 80154b6:	69fb      	ldr	r3, [r7, #28]
 80154b8:	4413      	add	r3, r2
 80154ba:	781b      	ldrb	r3, [r3, #0]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d006      	beq.n	80154ce <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80154c0:	69fb      	ldr	r3, [r7, #28]
 80154c2:	3301      	adds	r3, #1
 80154c4:	61fb      	str	r3, [r7, #28]
 80154c6:	69fb      	ldr	r3, [r7, #28]
 80154c8:	2b0f      	cmp	r3, #15
 80154ca:	d9e9      	bls.n	80154a0 <prvInitialiseNewTask+0x6a>
 80154cc:	e000      	b.n	80154d0 <prvInitialiseNewTask+0x9a>
			{
				break;
 80154ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80154d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154d2:	2200      	movs	r2, #0
 80154d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80154d8:	e003      	b.n	80154e2 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80154da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154dc:	2200      	movs	r2, #0
 80154de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80154e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154e4:	2b06      	cmp	r3, #6
 80154e6:	d901      	bls.n	80154ec <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80154e8:	2306      	movs	r3, #6
 80154ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80154ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80154f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80154f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80154f6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80154f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154fa:	2200      	movs	r2, #0
 80154fc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80154fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015500:	3304      	adds	r3, #4
 8015502:	4618      	mov	r0, r3
 8015504:	f7ff f892 	bl	801462c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801550a:	3318      	adds	r3, #24
 801550c:	4618      	mov	r0, r3
 801550e:	f7ff f88d 	bl	801462c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015516:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801551a:	f1c3 0207 	rsb	r2, r3, #7
 801551e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015520:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015526:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8015528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801552a:	2200      	movs	r2, #0
 801552c:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015530:	2200      	movs	r2, #0
 8015532:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015536:	2200      	movs	r2, #0
 8015538:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801553c:	683a      	ldr	r2, [r7, #0]
 801553e:	68f9      	ldr	r1, [r7, #12]
 8015540:	69b8      	ldr	r0, [r7, #24]
 8015542:	f000 fe27 	bl	8016194 <pxPortInitialiseStack>
 8015546:	4602      	mov	r2, r0
 8015548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801554a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801554c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801554e:	2b00      	cmp	r3, #0
 8015550:	d002      	beq.n	8015558 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015554:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015556:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015558:	bf00      	nop
 801555a:	3720      	adds	r7, #32
 801555c:	46bd      	mov	sp, r7
 801555e:	bd80      	pop	{r7, pc}

08015560 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015560:	b580      	push	{r7, lr}
 8015562:	b082      	sub	sp, #8
 8015564:	af00      	add	r7, sp, #0
 8015566:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015568:	f000 ff20 	bl	80163ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801556c:	4b2a      	ldr	r3, [pc, #168]	@ (8015618 <prvAddNewTaskToReadyList+0xb8>)
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	3301      	adds	r3, #1
 8015572:	4a29      	ldr	r2, [pc, #164]	@ (8015618 <prvAddNewTaskToReadyList+0xb8>)
 8015574:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015576:	4b29      	ldr	r3, [pc, #164]	@ (801561c <prvAddNewTaskToReadyList+0xbc>)
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	2b00      	cmp	r3, #0
 801557c:	d109      	bne.n	8015592 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801557e:	4a27      	ldr	r2, [pc, #156]	@ (801561c <prvAddNewTaskToReadyList+0xbc>)
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015584:	4b24      	ldr	r3, [pc, #144]	@ (8015618 <prvAddNewTaskToReadyList+0xb8>)
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	2b01      	cmp	r3, #1
 801558a:	d110      	bne.n	80155ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801558c:	f000 fc32 	bl	8015df4 <prvInitialiseTaskLists>
 8015590:	e00d      	b.n	80155ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015592:	4b23      	ldr	r3, [pc, #140]	@ (8015620 <prvAddNewTaskToReadyList+0xc0>)
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d109      	bne.n	80155ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801559a:	4b20      	ldr	r3, [pc, #128]	@ (801561c <prvAddNewTaskToReadyList+0xbc>)
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155a4:	429a      	cmp	r2, r3
 80155a6:	d802      	bhi.n	80155ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80155a8:	4a1c      	ldr	r2, [pc, #112]	@ (801561c <prvAddNewTaskToReadyList+0xbc>)
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80155ae:	4b1d      	ldr	r3, [pc, #116]	@ (8015624 <prvAddNewTaskToReadyList+0xc4>)
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	3301      	adds	r3, #1
 80155b4:	4a1b      	ldr	r2, [pc, #108]	@ (8015624 <prvAddNewTaskToReadyList+0xc4>)
 80155b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155bc:	2201      	movs	r2, #1
 80155be:	409a      	lsls	r2, r3
 80155c0:	4b19      	ldr	r3, [pc, #100]	@ (8015628 <prvAddNewTaskToReadyList+0xc8>)
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	4313      	orrs	r3, r2
 80155c6:	4a18      	ldr	r2, [pc, #96]	@ (8015628 <prvAddNewTaskToReadyList+0xc8>)
 80155c8:	6013      	str	r3, [r2, #0]
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155ce:	4613      	mov	r3, r2
 80155d0:	009b      	lsls	r3, r3, #2
 80155d2:	4413      	add	r3, r2
 80155d4:	009b      	lsls	r3, r3, #2
 80155d6:	4a15      	ldr	r2, [pc, #84]	@ (801562c <prvAddNewTaskToReadyList+0xcc>)
 80155d8:	441a      	add	r2, r3
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	3304      	adds	r3, #4
 80155de:	4619      	mov	r1, r3
 80155e0:	4610      	mov	r0, r2
 80155e2:	f7ff f830 	bl	8014646 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80155e6:	f000 ff17 	bl	8016418 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80155ea:	4b0d      	ldr	r3, [pc, #52]	@ (8015620 <prvAddNewTaskToReadyList+0xc0>)
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d00e      	beq.n	8015610 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80155f2:	4b0a      	ldr	r3, [pc, #40]	@ (801561c <prvAddNewTaskToReadyList+0xbc>)
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155fc:	429a      	cmp	r2, r3
 80155fe:	d207      	bcs.n	8015610 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015600:	4b0b      	ldr	r3, [pc, #44]	@ (8015630 <prvAddNewTaskToReadyList+0xd0>)
 8015602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015606:	601a      	str	r2, [r3, #0]
 8015608:	f3bf 8f4f 	dsb	sy
 801560c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015610:	bf00      	nop
 8015612:	3708      	adds	r7, #8
 8015614:	46bd      	mov	sp, r7
 8015616:	bd80      	pop	{r7, pc}
 8015618:	20001b18 	.word	0x20001b18
 801561c:	20001a18 	.word	0x20001a18
 8015620:	20001b24 	.word	0x20001b24
 8015624:	20001b34 	.word	0x20001b34
 8015628:	20001b20 	.word	0x20001b20
 801562c:	20001a1c 	.word	0x20001a1c
 8015630:	e000ed04 	.word	0xe000ed04

08015634 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015634:	b580      	push	{r7, lr}
 8015636:	b084      	sub	sp, #16
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801563c:	2300      	movs	r3, #0
 801563e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d01a      	beq.n	801567c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015646:	4b15      	ldr	r3, [pc, #84]	@ (801569c <vTaskDelay+0x68>)
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d00d      	beq.n	801566a <vTaskDelay+0x36>
	__asm volatile
 801564e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015652:	b672      	cpsid	i
 8015654:	f383 8811 	msr	BASEPRI, r3
 8015658:	f3bf 8f6f 	isb	sy
 801565c:	f3bf 8f4f 	dsb	sy
 8015660:	b662      	cpsie	i
 8015662:	60bb      	str	r3, [r7, #8]
}
 8015664:	bf00      	nop
 8015666:	bf00      	nop
 8015668:	e7fd      	b.n	8015666 <vTaskDelay+0x32>
			vTaskSuspendAll();
 801566a:	f000 f881 	bl	8015770 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801566e:	2100      	movs	r1, #0
 8015670:	6878      	ldr	r0, [r7, #4]
 8015672:	f000 fd29 	bl	80160c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015676:	f000 f889 	bl	801578c <xTaskResumeAll>
 801567a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d107      	bne.n	8015692 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8015682:	4b07      	ldr	r3, [pc, #28]	@ (80156a0 <vTaskDelay+0x6c>)
 8015684:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015688:	601a      	str	r2, [r3, #0]
 801568a:	f3bf 8f4f 	dsb	sy
 801568e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015692:	bf00      	nop
 8015694:	3710      	adds	r7, #16
 8015696:	46bd      	mov	sp, r7
 8015698:	bd80      	pop	{r7, pc}
 801569a:	bf00      	nop
 801569c:	20001b40 	.word	0x20001b40
 80156a0:	e000ed04 	.word	0xe000ed04

080156a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b08a      	sub	sp, #40	@ 0x28
 80156a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80156aa:	2300      	movs	r3, #0
 80156ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80156ae:	2300      	movs	r3, #0
 80156b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80156b2:	463a      	mov	r2, r7
 80156b4:	1d39      	adds	r1, r7, #4
 80156b6:	f107 0308 	add.w	r3, r7, #8
 80156ba:	4618      	mov	r0, r3
 80156bc:	f7ec f9e4 	bl	8001a88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80156c0:	6839      	ldr	r1, [r7, #0]
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	68ba      	ldr	r2, [r7, #8]
 80156c6:	9202      	str	r2, [sp, #8]
 80156c8:	9301      	str	r3, [sp, #4]
 80156ca:	2300      	movs	r3, #0
 80156cc:	9300      	str	r3, [sp, #0]
 80156ce:	2300      	movs	r3, #0
 80156d0:	460a      	mov	r2, r1
 80156d2:	4921      	ldr	r1, [pc, #132]	@ (8015758 <vTaskStartScheduler+0xb4>)
 80156d4:	4821      	ldr	r0, [pc, #132]	@ (801575c <vTaskStartScheduler+0xb8>)
 80156d6:	f7ff fe03 	bl	80152e0 <xTaskCreateStatic>
 80156da:	4603      	mov	r3, r0
 80156dc:	4a20      	ldr	r2, [pc, #128]	@ (8015760 <vTaskStartScheduler+0xbc>)
 80156de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80156e0:	4b1f      	ldr	r3, [pc, #124]	@ (8015760 <vTaskStartScheduler+0xbc>)
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d002      	beq.n	80156ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80156e8:	2301      	movs	r3, #1
 80156ea:	617b      	str	r3, [r7, #20]
 80156ec:	e001      	b.n	80156f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80156ee:	2300      	movs	r3, #0
 80156f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80156f2:	697b      	ldr	r3, [r7, #20]
 80156f4:	2b01      	cmp	r3, #1
 80156f6:	d118      	bne.n	801572a <vTaskStartScheduler+0x86>
	__asm volatile
 80156f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156fc:	b672      	cpsid	i
 80156fe:	f383 8811 	msr	BASEPRI, r3
 8015702:	f3bf 8f6f 	isb	sy
 8015706:	f3bf 8f4f 	dsb	sy
 801570a:	b662      	cpsie	i
 801570c:	613b      	str	r3, [r7, #16]
}
 801570e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015710:	4b14      	ldr	r3, [pc, #80]	@ (8015764 <vTaskStartScheduler+0xc0>)
 8015712:	f04f 32ff 	mov.w	r2, #4294967295
 8015716:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015718:	4b13      	ldr	r3, [pc, #76]	@ (8015768 <vTaskStartScheduler+0xc4>)
 801571a:	2201      	movs	r2, #1
 801571c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801571e:	4b13      	ldr	r3, [pc, #76]	@ (801576c <vTaskStartScheduler+0xc8>)
 8015720:	2200      	movs	r2, #0
 8015722:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015724:	f000 fdc4 	bl	80162b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015728:	e011      	b.n	801574e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801572a:	697b      	ldr	r3, [r7, #20]
 801572c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015730:	d10d      	bne.n	801574e <vTaskStartScheduler+0xaa>
	__asm volatile
 8015732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015736:	b672      	cpsid	i
 8015738:	f383 8811 	msr	BASEPRI, r3
 801573c:	f3bf 8f6f 	isb	sy
 8015740:	f3bf 8f4f 	dsb	sy
 8015744:	b662      	cpsie	i
 8015746:	60fb      	str	r3, [r7, #12]
}
 8015748:	bf00      	nop
 801574a:	bf00      	nop
 801574c:	e7fd      	b.n	801574a <vTaskStartScheduler+0xa6>
}
 801574e:	bf00      	nop
 8015750:	3718      	adds	r7, #24
 8015752:	46bd      	mov	sp, r7
 8015754:	bd80      	pop	{r7, pc}
 8015756:	bf00      	nop
 8015758:	0801b414 	.word	0x0801b414
 801575c:	08015dc1 	.word	0x08015dc1
 8015760:	20001b3c 	.word	0x20001b3c
 8015764:	20001b38 	.word	0x20001b38
 8015768:	20001b24 	.word	0x20001b24
 801576c:	20001b1c 	.word	0x20001b1c

08015770 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015770:	b480      	push	{r7}
 8015772:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8015774:	4b04      	ldr	r3, [pc, #16]	@ (8015788 <vTaskSuspendAll+0x18>)
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	3301      	adds	r3, #1
 801577a:	4a03      	ldr	r2, [pc, #12]	@ (8015788 <vTaskSuspendAll+0x18>)
 801577c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801577e:	bf00      	nop
 8015780:	46bd      	mov	sp, r7
 8015782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015786:	4770      	bx	lr
 8015788:	20001b40 	.word	0x20001b40

0801578c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801578c:	b580      	push	{r7, lr}
 801578e:	b084      	sub	sp, #16
 8015790:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015792:	2300      	movs	r3, #0
 8015794:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015796:	2300      	movs	r3, #0
 8015798:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801579a:	4b43      	ldr	r3, [pc, #268]	@ (80158a8 <xTaskResumeAll+0x11c>)
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d10d      	bne.n	80157be <xTaskResumeAll+0x32>
	__asm volatile
 80157a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157a6:	b672      	cpsid	i
 80157a8:	f383 8811 	msr	BASEPRI, r3
 80157ac:	f3bf 8f6f 	isb	sy
 80157b0:	f3bf 8f4f 	dsb	sy
 80157b4:	b662      	cpsie	i
 80157b6:	603b      	str	r3, [r7, #0]
}
 80157b8:	bf00      	nop
 80157ba:	bf00      	nop
 80157bc:	e7fd      	b.n	80157ba <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80157be:	f000 fdf5 	bl	80163ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80157c2:	4b39      	ldr	r3, [pc, #228]	@ (80158a8 <xTaskResumeAll+0x11c>)
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	3b01      	subs	r3, #1
 80157c8:	4a37      	ldr	r2, [pc, #220]	@ (80158a8 <xTaskResumeAll+0x11c>)
 80157ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80157cc:	4b36      	ldr	r3, [pc, #216]	@ (80158a8 <xTaskResumeAll+0x11c>)
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d161      	bne.n	8015898 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80157d4:	4b35      	ldr	r3, [pc, #212]	@ (80158ac <xTaskResumeAll+0x120>)
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d05d      	beq.n	8015898 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80157dc:	e02e      	b.n	801583c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80157de:	4b34      	ldr	r3, [pc, #208]	@ (80158b0 <xTaskResumeAll+0x124>)
 80157e0:	68db      	ldr	r3, [r3, #12]
 80157e2:	68db      	ldr	r3, [r3, #12]
 80157e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	3318      	adds	r3, #24
 80157ea:	4618      	mov	r0, r3
 80157ec:	f7fe ff88 	bl	8014700 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	3304      	adds	r3, #4
 80157f4:	4618      	mov	r0, r3
 80157f6:	f7fe ff83 	bl	8014700 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157fe:	2201      	movs	r2, #1
 8015800:	409a      	lsls	r2, r3
 8015802:	4b2c      	ldr	r3, [pc, #176]	@ (80158b4 <xTaskResumeAll+0x128>)
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	4313      	orrs	r3, r2
 8015808:	4a2a      	ldr	r2, [pc, #168]	@ (80158b4 <xTaskResumeAll+0x128>)
 801580a:	6013      	str	r3, [r2, #0]
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015810:	4613      	mov	r3, r2
 8015812:	009b      	lsls	r3, r3, #2
 8015814:	4413      	add	r3, r2
 8015816:	009b      	lsls	r3, r3, #2
 8015818:	4a27      	ldr	r2, [pc, #156]	@ (80158b8 <xTaskResumeAll+0x12c>)
 801581a:	441a      	add	r2, r3
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	3304      	adds	r3, #4
 8015820:	4619      	mov	r1, r3
 8015822:	4610      	mov	r0, r2
 8015824:	f7fe ff0f 	bl	8014646 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801582c:	4b23      	ldr	r3, [pc, #140]	@ (80158bc <xTaskResumeAll+0x130>)
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015832:	429a      	cmp	r2, r3
 8015834:	d302      	bcc.n	801583c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8015836:	4b22      	ldr	r3, [pc, #136]	@ (80158c0 <xTaskResumeAll+0x134>)
 8015838:	2201      	movs	r2, #1
 801583a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801583c:	4b1c      	ldr	r3, [pc, #112]	@ (80158b0 <xTaskResumeAll+0x124>)
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d1cc      	bne.n	80157de <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d001      	beq.n	801584e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801584a:	f000 fb73 	bl	8015f34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801584e:	4b1d      	ldr	r3, [pc, #116]	@ (80158c4 <xTaskResumeAll+0x138>)
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d010      	beq.n	801587c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801585a:	f000 f859 	bl	8015910 <xTaskIncrementTick>
 801585e:	4603      	mov	r3, r0
 8015860:	2b00      	cmp	r3, #0
 8015862:	d002      	beq.n	801586a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8015864:	4b16      	ldr	r3, [pc, #88]	@ (80158c0 <xTaskResumeAll+0x134>)
 8015866:	2201      	movs	r2, #1
 8015868:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	3b01      	subs	r3, #1
 801586e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d1f1      	bne.n	801585a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8015876:	4b13      	ldr	r3, [pc, #76]	@ (80158c4 <xTaskResumeAll+0x138>)
 8015878:	2200      	movs	r2, #0
 801587a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801587c:	4b10      	ldr	r3, [pc, #64]	@ (80158c0 <xTaskResumeAll+0x134>)
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d009      	beq.n	8015898 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015884:	2301      	movs	r3, #1
 8015886:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015888:	4b0f      	ldr	r3, [pc, #60]	@ (80158c8 <xTaskResumeAll+0x13c>)
 801588a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801588e:	601a      	str	r2, [r3, #0]
 8015890:	f3bf 8f4f 	dsb	sy
 8015894:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015898:	f000 fdbe 	bl	8016418 <vPortExitCritical>

	return xAlreadyYielded;
 801589c:	68bb      	ldr	r3, [r7, #8]
}
 801589e:	4618      	mov	r0, r3
 80158a0:	3710      	adds	r7, #16
 80158a2:	46bd      	mov	sp, r7
 80158a4:	bd80      	pop	{r7, pc}
 80158a6:	bf00      	nop
 80158a8:	20001b40 	.word	0x20001b40
 80158ac:	20001b18 	.word	0x20001b18
 80158b0:	20001ad8 	.word	0x20001ad8
 80158b4:	20001b20 	.word	0x20001b20
 80158b8:	20001a1c 	.word	0x20001a1c
 80158bc:	20001a18 	.word	0x20001a18
 80158c0:	20001b2c 	.word	0x20001b2c
 80158c4:	20001b28 	.word	0x20001b28
 80158c8:	e000ed04 	.word	0xe000ed04

080158cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80158cc:	b480      	push	{r7}
 80158ce:	b083      	sub	sp, #12
 80158d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80158d2:	4b05      	ldr	r3, [pc, #20]	@ (80158e8 <xTaskGetTickCount+0x1c>)
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80158d8:	687b      	ldr	r3, [r7, #4]
}
 80158da:	4618      	mov	r0, r3
 80158dc:	370c      	adds	r7, #12
 80158de:	46bd      	mov	sp, r7
 80158e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e4:	4770      	bx	lr
 80158e6:	bf00      	nop
 80158e8:	20001b1c 	.word	0x20001b1c

080158ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b082      	sub	sp, #8
 80158f0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80158f2:	f000 fe43 	bl	801657c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80158f6:	2300      	movs	r3, #0
 80158f8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80158fa:	4b04      	ldr	r3, [pc, #16]	@ (801590c <xTaskGetTickCountFromISR+0x20>)
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015900:	683b      	ldr	r3, [r7, #0]
}
 8015902:	4618      	mov	r0, r3
 8015904:	3708      	adds	r7, #8
 8015906:	46bd      	mov	sp, r7
 8015908:	bd80      	pop	{r7, pc}
 801590a:	bf00      	nop
 801590c:	20001b1c 	.word	0x20001b1c

08015910 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015910:	b580      	push	{r7, lr}
 8015912:	b086      	sub	sp, #24
 8015914:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015916:	2300      	movs	r3, #0
 8015918:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801591a:	4b50      	ldr	r3, [pc, #320]	@ (8015a5c <xTaskIncrementTick+0x14c>)
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	2b00      	cmp	r3, #0
 8015920:	f040 808b 	bne.w	8015a3a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015924:	4b4e      	ldr	r3, [pc, #312]	@ (8015a60 <xTaskIncrementTick+0x150>)
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	3301      	adds	r3, #1
 801592a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801592c:	4a4c      	ldr	r2, [pc, #304]	@ (8015a60 <xTaskIncrementTick+0x150>)
 801592e:	693b      	ldr	r3, [r7, #16]
 8015930:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015932:	693b      	ldr	r3, [r7, #16]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d123      	bne.n	8015980 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8015938:	4b4a      	ldr	r3, [pc, #296]	@ (8015a64 <xTaskIncrementTick+0x154>)
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d00d      	beq.n	801595e <xTaskIncrementTick+0x4e>
	__asm volatile
 8015942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015946:	b672      	cpsid	i
 8015948:	f383 8811 	msr	BASEPRI, r3
 801594c:	f3bf 8f6f 	isb	sy
 8015950:	f3bf 8f4f 	dsb	sy
 8015954:	b662      	cpsie	i
 8015956:	603b      	str	r3, [r7, #0]
}
 8015958:	bf00      	nop
 801595a:	bf00      	nop
 801595c:	e7fd      	b.n	801595a <xTaskIncrementTick+0x4a>
 801595e:	4b41      	ldr	r3, [pc, #260]	@ (8015a64 <xTaskIncrementTick+0x154>)
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	60fb      	str	r3, [r7, #12]
 8015964:	4b40      	ldr	r3, [pc, #256]	@ (8015a68 <xTaskIncrementTick+0x158>)
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	4a3e      	ldr	r2, [pc, #248]	@ (8015a64 <xTaskIncrementTick+0x154>)
 801596a:	6013      	str	r3, [r2, #0]
 801596c:	4a3e      	ldr	r2, [pc, #248]	@ (8015a68 <xTaskIncrementTick+0x158>)
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	6013      	str	r3, [r2, #0]
 8015972:	4b3e      	ldr	r3, [pc, #248]	@ (8015a6c <xTaskIncrementTick+0x15c>)
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	3301      	adds	r3, #1
 8015978:	4a3c      	ldr	r2, [pc, #240]	@ (8015a6c <xTaskIncrementTick+0x15c>)
 801597a:	6013      	str	r3, [r2, #0]
 801597c:	f000 fada 	bl	8015f34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015980:	4b3b      	ldr	r3, [pc, #236]	@ (8015a70 <xTaskIncrementTick+0x160>)
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	693a      	ldr	r2, [r7, #16]
 8015986:	429a      	cmp	r2, r3
 8015988:	d348      	bcc.n	8015a1c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801598a:	4b36      	ldr	r3, [pc, #216]	@ (8015a64 <xTaskIncrementTick+0x154>)
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	2b00      	cmp	r3, #0
 8015992:	d104      	bne.n	801599e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015994:	4b36      	ldr	r3, [pc, #216]	@ (8015a70 <xTaskIncrementTick+0x160>)
 8015996:	f04f 32ff 	mov.w	r2, #4294967295
 801599a:	601a      	str	r2, [r3, #0]
					break;
 801599c:	e03e      	b.n	8015a1c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801599e:	4b31      	ldr	r3, [pc, #196]	@ (8015a64 <xTaskIncrementTick+0x154>)
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	68db      	ldr	r3, [r3, #12]
 80159a4:	68db      	ldr	r3, [r3, #12]
 80159a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80159a8:	68bb      	ldr	r3, [r7, #8]
 80159aa:	685b      	ldr	r3, [r3, #4]
 80159ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80159ae:	693a      	ldr	r2, [r7, #16]
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	429a      	cmp	r2, r3
 80159b4:	d203      	bcs.n	80159be <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80159b6:	4a2e      	ldr	r2, [pc, #184]	@ (8015a70 <xTaskIncrementTick+0x160>)
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80159bc:	e02e      	b.n	8015a1c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80159be:	68bb      	ldr	r3, [r7, #8]
 80159c0:	3304      	adds	r3, #4
 80159c2:	4618      	mov	r0, r3
 80159c4:	f7fe fe9c 	bl	8014700 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80159c8:	68bb      	ldr	r3, [r7, #8]
 80159ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d004      	beq.n	80159da <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80159d0:	68bb      	ldr	r3, [r7, #8]
 80159d2:	3318      	adds	r3, #24
 80159d4:	4618      	mov	r0, r3
 80159d6:	f7fe fe93 	bl	8014700 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80159da:	68bb      	ldr	r3, [r7, #8]
 80159dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159de:	2201      	movs	r2, #1
 80159e0:	409a      	lsls	r2, r3
 80159e2:	4b24      	ldr	r3, [pc, #144]	@ (8015a74 <xTaskIncrementTick+0x164>)
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	4313      	orrs	r3, r2
 80159e8:	4a22      	ldr	r2, [pc, #136]	@ (8015a74 <xTaskIncrementTick+0x164>)
 80159ea:	6013      	str	r3, [r2, #0]
 80159ec:	68bb      	ldr	r3, [r7, #8]
 80159ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80159f0:	4613      	mov	r3, r2
 80159f2:	009b      	lsls	r3, r3, #2
 80159f4:	4413      	add	r3, r2
 80159f6:	009b      	lsls	r3, r3, #2
 80159f8:	4a1f      	ldr	r2, [pc, #124]	@ (8015a78 <xTaskIncrementTick+0x168>)
 80159fa:	441a      	add	r2, r3
 80159fc:	68bb      	ldr	r3, [r7, #8]
 80159fe:	3304      	adds	r3, #4
 8015a00:	4619      	mov	r1, r3
 8015a02:	4610      	mov	r0, r2
 8015a04:	f7fe fe1f 	bl	8014646 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015a08:	68bb      	ldr	r3, [r7, #8]
 8015a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8015a7c <xTaskIncrementTick+0x16c>)
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a12:	429a      	cmp	r2, r3
 8015a14:	d3b9      	bcc.n	801598a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8015a16:	2301      	movs	r3, #1
 8015a18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015a1a:	e7b6      	b.n	801598a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015a1c:	4b17      	ldr	r3, [pc, #92]	@ (8015a7c <xTaskIncrementTick+0x16c>)
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a22:	4915      	ldr	r1, [pc, #84]	@ (8015a78 <xTaskIncrementTick+0x168>)
 8015a24:	4613      	mov	r3, r2
 8015a26:	009b      	lsls	r3, r3, #2
 8015a28:	4413      	add	r3, r2
 8015a2a:	009b      	lsls	r3, r3, #2
 8015a2c:	440b      	add	r3, r1
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	2b01      	cmp	r3, #1
 8015a32:	d907      	bls.n	8015a44 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8015a34:	2301      	movs	r3, #1
 8015a36:	617b      	str	r3, [r7, #20]
 8015a38:	e004      	b.n	8015a44 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8015a3a:	4b11      	ldr	r3, [pc, #68]	@ (8015a80 <xTaskIncrementTick+0x170>)
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	3301      	adds	r3, #1
 8015a40:	4a0f      	ldr	r2, [pc, #60]	@ (8015a80 <xTaskIncrementTick+0x170>)
 8015a42:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8015a44:	4b0f      	ldr	r3, [pc, #60]	@ (8015a84 <xTaskIncrementTick+0x174>)
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d001      	beq.n	8015a50 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8015a4c:	2301      	movs	r3, #1
 8015a4e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8015a50:	697b      	ldr	r3, [r7, #20]
}
 8015a52:	4618      	mov	r0, r3
 8015a54:	3718      	adds	r7, #24
 8015a56:	46bd      	mov	sp, r7
 8015a58:	bd80      	pop	{r7, pc}
 8015a5a:	bf00      	nop
 8015a5c:	20001b40 	.word	0x20001b40
 8015a60:	20001b1c 	.word	0x20001b1c
 8015a64:	20001ad0 	.word	0x20001ad0
 8015a68:	20001ad4 	.word	0x20001ad4
 8015a6c:	20001b30 	.word	0x20001b30
 8015a70:	20001b38 	.word	0x20001b38
 8015a74:	20001b20 	.word	0x20001b20
 8015a78:	20001a1c 	.word	0x20001a1c
 8015a7c:	20001a18 	.word	0x20001a18
 8015a80:	20001b28 	.word	0x20001b28
 8015a84:	20001b2c 	.word	0x20001b2c

08015a88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b088      	sub	sp, #32
 8015a8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015a8e:	4b3b      	ldr	r3, [pc, #236]	@ (8015b7c <vTaskSwitchContext+0xf4>)
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d003      	beq.n	8015a9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015a96:	4b3a      	ldr	r3, [pc, #232]	@ (8015b80 <vTaskSwitchContext+0xf8>)
 8015a98:	2201      	movs	r2, #1
 8015a9a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015a9c:	e069      	b.n	8015b72 <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8015a9e:	4b38      	ldr	r3, [pc, #224]	@ (8015b80 <vTaskSwitchContext+0xf8>)
 8015aa0:	2200      	movs	r2, #0
 8015aa2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8015aa4:	4b37      	ldr	r3, [pc, #220]	@ (8015b84 <vTaskSwitchContext+0xfc>)
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015aaa:	61fb      	str	r3, [r7, #28]
 8015aac:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8015ab0:	61bb      	str	r3, [r7, #24]
 8015ab2:	69fb      	ldr	r3, [r7, #28]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	69ba      	ldr	r2, [r7, #24]
 8015ab8:	429a      	cmp	r2, r3
 8015aba:	d111      	bne.n	8015ae0 <vTaskSwitchContext+0x58>
 8015abc:	69fb      	ldr	r3, [r7, #28]
 8015abe:	3304      	adds	r3, #4
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	69ba      	ldr	r2, [r7, #24]
 8015ac4:	429a      	cmp	r2, r3
 8015ac6:	d10b      	bne.n	8015ae0 <vTaskSwitchContext+0x58>
 8015ac8:	69fb      	ldr	r3, [r7, #28]
 8015aca:	3308      	adds	r3, #8
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	69ba      	ldr	r2, [r7, #24]
 8015ad0:	429a      	cmp	r2, r3
 8015ad2:	d105      	bne.n	8015ae0 <vTaskSwitchContext+0x58>
 8015ad4:	69fb      	ldr	r3, [r7, #28]
 8015ad6:	330c      	adds	r3, #12
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	69ba      	ldr	r2, [r7, #24]
 8015adc:	429a      	cmp	r2, r3
 8015ade:	d008      	beq.n	8015af2 <vTaskSwitchContext+0x6a>
 8015ae0:	4b28      	ldr	r3, [pc, #160]	@ (8015b84 <vTaskSwitchContext+0xfc>)
 8015ae2:	681a      	ldr	r2, [r3, #0]
 8015ae4:	4b27      	ldr	r3, [pc, #156]	@ (8015b84 <vTaskSwitchContext+0xfc>)
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	3334      	adds	r3, #52	@ 0x34
 8015aea:	4619      	mov	r1, r3
 8015aec:	4610      	mov	r0, r2
 8015aee:	f7eb ffb8 	bl	8001a62 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015af2:	4b25      	ldr	r3, [pc, #148]	@ (8015b88 <vTaskSwitchContext+0x100>)
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	fab3 f383 	clz	r3, r3
 8015afe:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015b00:	7afb      	ldrb	r3, [r7, #11]
 8015b02:	f1c3 031f 	rsb	r3, r3, #31
 8015b06:	617b      	str	r3, [r7, #20]
 8015b08:	4920      	ldr	r1, [pc, #128]	@ (8015b8c <vTaskSwitchContext+0x104>)
 8015b0a:	697a      	ldr	r2, [r7, #20]
 8015b0c:	4613      	mov	r3, r2
 8015b0e:	009b      	lsls	r3, r3, #2
 8015b10:	4413      	add	r3, r2
 8015b12:	009b      	lsls	r3, r3, #2
 8015b14:	440b      	add	r3, r1
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d10d      	bne.n	8015b38 <vTaskSwitchContext+0xb0>
	__asm volatile
 8015b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b20:	b672      	cpsid	i
 8015b22:	f383 8811 	msr	BASEPRI, r3
 8015b26:	f3bf 8f6f 	isb	sy
 8015b2a:	f3bf 8f4f 	dsb	sy
 8015b2e:	b662      	cpsie	i
 8015b30:	607b      	str	r3, [r7, #4]
}
 8015b32:	bf00      	nop
 8015b34:	bf00      	nop
 8015b36:	e7fd      	b.n	8015b34 <vTaskSwitchContext+0xac>
 8015b38:	697a      	ldr	r2, [r7, #20]
 8015b3a:	4613      	mov	r3, r2
 8015b3c:	009b      	lsls	r3, r3, #2
 8015b3e:	4413      	add	r3, r2
 8015b40:	009b      	lsls	r3, r3, #2
 8015b42:	4a12      	ldr	r2, [pc, #72]	@ (8015b8c <vTaskSwitchContext+0x104>)
 8015b44:	4413      	add	r3, r2
 8015b46:	613b      	str	r3, [r7, #16]
 8015b48:	693b      	ldr	r3, [r7, #16]
 8015b4a:	685b      	ldr	r3, [r3, #4]
 8015b4c:	685a      	ldr	r2, [r3, #4]
 8015b4e:	693b      	ldr	r3, [r7, #16]
 8015b50:	605a      	str	r2, [r3, #4]
 8015b52:	693b      	ldr	r3, [r7, #16]
 8015b54:	685a      	ldr	r2, [r3, #4]
 8015b56:	693b      	ldr	r3, [r7, #16]
 8015b58:	3308      	adds	r3, #8
 8015b5a:	429a      	cmp	r2, r3
 8015b5c:	d104      	bne.n	8015b68 <vTaskSwitchContext+0xe0>
 8015b5e:	693b      	ldr	r3, [r7, #16]
 8015b60:	685b      	ldr	r3, [r3, #4]
 8015b62:	685a      	ldr	r2, [r3, #4]
 8015b64:	693b      	ldr	r3, [r7, #16]
 8015b66:	605a      	str	r2, [r3, #4]
 8015b68:	693b      	ldr	r3, [r7, #16]
 8015b6a:	685b      	ldr	r3, [r3, #4]
 8015b6c:	68db      	ldr	r3, [r3, #12]
 8015b6e:	4a05      	ldr	r2, [pc, #20]	@ (8015b84 <vTaskSwitchContext+0xfc>)
 8015b70:	6013      	str	r3, [r2, #0]
}
 8015b72:	bf00      	nop
 8015b74:	3720      	adds	r7, #32
 8015b76:	46bd      	mov	sp, r7
 8015b78:	bd80      	pop	{r7, pc}
 8015b7a:	bf00      	nop
 8015b7c:	20001b40 	.word	0x20001b40
 8015b80:	20001b2c 	.word	0x20001b2c
 8015b84:	20001a18 	.word	0x20001a18
 8015b88:	20001b20 	.word	0x20001b20
 8015b8c:	20001a1c 	.word	0x20001a1c

08015b90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015b90:	b580      	push	{r7, lr}
 8015b92:	b084      	sub	sp, #16
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	6078      	str	r0, [r7, #4]
 8015b98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d10d      	bne.n	8015bbc <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8015ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ba4:	b672      	cpsid	i
 8015ba6:	f383 8811 	msr	BASEPRI, r3
 8015baa:	f3bf 8f6f 	isb	sy
 8015bae:	f3bf 8f4f 	dsb	sy
 8015bb2:	b662      	cpsie	i
 8015bb4:	60fb      	str	r3, [r7, #12]
}
 8015bb6:	bf00      	nop
 8015bb8:	bf00      	nop
 8015bba:	e7fd      	b.n	8015bb8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015bbc:	4b07      	ldr	r3, [pc, #28]	@ (8015bdc <vTaskPlaceOnEventList+0x4c>)
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	3318      	adds	r3, #24
 8015bc2:	4619      	mov	r1, r3
 8015bc4:	6878      	ldr	r0, [r7, #4]
 8015bc6:	f7fe fd62 	bl	801468e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015bca:	2101      	movs	r1, #1
 8015bcc:	6838      	ldr	r0, [r7, #0]
 8015bce:	f000 fa7b 	bl	80160c8 <prvAddCurrentTaskToDelayedList>
}
 8015bd2:	bf00      	nop
 8015bd4:	3710      	adds	r7, #16
 8015bd6:	46bd      	mov	sp, r7
 8015bd8:	bd80      	pop	{r7, pc}
 8015bda:	bf00      	nop
 8015bdc:	20001a18 	.word	0x20001a18

08015be0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b086      	sub	sp, #24
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	68db      	ldr	r3, [r3, #12]
 8015bec:	68db      	ldr	r3, [r3, #12]
 8015bee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015bf0:	693b      	ldr	r3, [r7, #16]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d10d      	bne.n	8015c12 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8015bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bfa:	b672      	cpsid	i
 8015bfc:	f383 8811 	msr	BASEPRI, r3
 8015c00:	f3bf 8f6f 	isb	sy
 8015c04:	f3bf 8f4f 	dsb	sy
 8015c08:	b662      	cpsie	i
 8015c0a:	60fb      	str	r3, [r7, #12]
}
 8015c0c:	bf00      	nop
 8015c0e:	bf00      	nop
 8015c10:	e7fd      	b.n	8015c0e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015c12:	693b      	ldr	r3, [r7, #16]
 8015c14:	3318      	adds	r3, #24
 8015c16:	4618      	mov	r0, r3
 8015c18:	f7fe fd72 	bl	8014700 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8015c94 <xTaskRemoveFromEventList+0xb4>)
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d11c      	bne.n	8015c5e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015c24:	693b      	ldr	r3, [r7, #16]
 8015c26:	3304      	adds	r3, #4
 8015c28:	4618      	mov	r0, r3
 8015c2a:	f7fe fd69 	bl	8014700 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015c2e:	693b      	ldr	r3, [r7, #16]
 8015c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c32:	2201      	movs	r2, #1
 8015c34:	409a      	lsls	r2, r3
 8015c36:	4b18      	ldr	r3, [pc, #96]	@ (8015c98 <xTaskRemoveFromEventList+0xb8>)
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	4313      	orrs	r3, r2
 8015c3c:	4a16      	ldr	r2, [pc, #88]	@ (8015c98 <xTaskRemoveFromEventList+0xb8>)
 8015c3e:	6013      	str	r3, [r2, #0]
 8015c40:	693b      	ldr	r3, [r7, #16]
 8015c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c44:	4613      	mov	r3, r2
 8015c46:	009b      	lsls	r3, r3, #2
 8015c48:	4413      	add	r3, r2
 8015c4a:	009b      	lsls	r3, r3, #2
 8015c4c:	4a13      	ldr	r2, [pc, #76]	@ (8015c9c <xTaskRemoveFromEventList+0xbc>)
 8015c4e:	441a      	add	r2, r3
 8015c50:	693b      	ldr	r3, [r7, #16]
 8015c52:	3304      	adds	r3, #4
 8015c54:	4619      	mov	r1, r3
 8015c56:	4610      	mov	r0, r2
 8015c58:	f7fe fcf5 	bl	8014646 <vListInsertEnd>
 8015c5c:	e005      	b.n	8015c6a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015c5e:	693b      	ldr	r3, [r7, #16]
 8015c60:	3318      	adds	r3, #24
 8015c62:	4619      	mov	r1, r3
 8015c64:	480e      	ldr	r0, [pc, #56]	@ (8015ca0 <xTaskRemoveFromEventList+0xc0>)
 8015c66:	f7fe fcee 	bl	8014646 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015c6a:	693b      	ldr	r3, [r7, #16]
 8015c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8015ca4 <xTaskRemoveFromEventList+0xc4>)
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c74:	429a      	cmp	r2, r3
 8015c76:	d905      	bls.n	8015c84 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015c78:	2301      	movs	r3, #1
 8015c7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8015ca8 <xTaskRemoveFromEventList+0xc8>)
 8015c7e:	2201      	movs	r2, #1
 8015c80:	601a      	str	r2, [r3, #0]
 8015c82:	e001      	b.n	8015c88 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8015c84:	2300      	movs	r3, #0
 8015c86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015c88:	697b      	ldr	r3, [r7, #20]
}
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	3718      	adds	r7, #24
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	bd80      	pop	{r7, pc}
 8015c92:	bf00      	nop
 8015c94:	20001b40 	.word	0x20001b40
 8015c98:	20001b20 	.word	0x20001b20
 8015c9c:	20001a1c 	.word	0x20001a1c
 8015ca0:	20001ad8 	.word	0x20001ad8
 8015ca4:	20001a18 	.word	0x20001a18
 8015ca8:	20001b2c 	.word	0x20001b2c

08015cac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015cac:	b480      	push	{r7}
 8015cae:	b083      	sub	sp, #12
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015cb4:	4b06      	ldr	r3, [pc, #24]	@ (8015cd0 <vTaskInternalSetTimeOutState+0x24>)
 8015cb6:	681a      	ldr	r2, [r3, #0]
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015cbc:	4b05      	ldr	r3, [pc, #20]	@ (8015cd4 <vTaskInternalSetTimeOutState+0x28>)
 8015cbe:	681a      	ldr	r2, [r3, #0]
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	605a      	str	r2, [r3, #4]
}
 8015cc4:	bf00      	nop
 8015cc6:	370c      	adds	r7, #12
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cce:	4770      	bx	lr
 8015cd0:	20001b30 	.word	0x20001b30
 8015cd4:	20001b1c 	.word	0x20001b1c

08015cd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015cd8:	b580      	push	{r7, lr}
 8015cda:	b088      	sub	sp, #32
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	6078      	str	r0, [r7, #4]
 8015ce0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d10d      	bne.n	8015d04 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8015ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015cec:	b672      	cpsid	i
 8015cee:	f383 8811 	msr	BASEPRI, r3
 8015cf2:	f3bf 8f6f 	isb	sy
 8015cf6:	f3bf 8f4f 	dsb	sy
 8015cfa:	b662      	cpsie	i
 8015cfc:	613b      	str	r3, [r7, #16]
}
 8015cfe:	bf00      	nop
 8015d00:	bf00      	nop
 8015d02:	e7fd      	b.n	8015d00 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8015d04:	683b      	ldr	r3, [r7, #0]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d10d      	bne.n	8015d26 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8015d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d0e:	b672      	cpsid	i
 8015d10:	f383 8811 	msr	BASEPRI, r3
 8015d14:	f3bf 8f6f 	isb	sy
 8015d18:	f3bf 8f4f 	dsb	sy
 8015d1c:	b662      	cpsie	i
 8015d1e:	60fb      	str	r3, [r7, #12]
}
 8015d20:	bf00      	nop
 8015d22:	bf00      	nop
 8015d24:	e7fd      	b.n	8015d22 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8015d26:	f000 fb41 	bl	80163ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8015da0 <xTaskCheckForTimeOut+0xc8>)
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	685b      	ldr	r3, [r3, #4]
 8015d34:	69ba      	ldr	r2, [r7, #24]
 8015d36:	1ad3      	subs	r3, r2, r3
 8015d38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015d3a:	683b      	ldr	r3, [r7, #0]
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d42:	d102      	bne.n	8015d4a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015d44:	2300      	movs	r3, #0
 8015d46:	61fb      	str	r3, [r7, #28]
 8015d48:	e023      	b.n	8015d92 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	681a      	ldr	r2, [r3, #0]
 8015d4e:	4b15      	ldr	r3, [pc, #84]	@ (8015da4 <xTaskCheckForTimeOut+0xcc>)
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	429a      	cmp	r2, r3
 8015d54:	d007      	beq.n	8015d66 <xTaskCheckForTimeOut+0x8e>
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	685b      	ldr	r3, [r3, #4]
 8015d5a:	69ba      	ldr	r2, [r7, #24]
 8015d5c:	429a      	cmp	r2, r3
 8015d5e:	d302      	bcc.n	8015d66 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015d60:	2301      	movs	r3, #1
 8015d62:	61fb      	str	r3, [r7, #28]
 8015d64:	e015      	b.n	8015d92 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015d66:	683b      	ldr	r3, [r7, #0]
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	697a      	ldr	r2, [r7, #20]
 8015d6c:	429a      	cmp	r2, r3
 8015d6e:	d20b      	bcs.n	8015d88 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015d70:	683b      	ldr	r3, [r7, #0]
 8015d72:	681a      	ldr	r2, [r3, #0]
 8015d74:	697b      	ldr	r3, [r7, #20]
 8015d76:	1ad2      	subs	r2, r2, r3
 8015d78:	683b      	ldr	r3, [r7, #0]
 8015d7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015d7c:	6878      	ldr	r0, [r7, #4]
 8015d7e:	f7ff ff95 	bl	8015cac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015d82:	2300      	movs	r3, #0
 8015d84:	61fb      	str	r3, [r7, #28]
 8015d86:	e004      	b.n	8015d92 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8015d88:	683b      	ldr	r3, [r7, #0]
 8015d8a:	2200      	movs	r2, #0
 8015d8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015d8e:	2301      	movs	r3, #1
 8015d90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015d92:	f000 fb41 	bl	8016418 <vPortExitCritical>

	return xReturn;
 8015d96:	69fb      	ldr	r3, [r7, #28]
}
 8015d98:	4618      	mov	r0, r3
 8015d9a:	3720      	adds	r7, #32
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	bd80      	pop	{r7, pc}
 8015da0:	20001b1c 	.word	0x20001b1c
 8015da4:	20001b30 	.word	0x20001b30

08015da8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015da8:	b480      	push	{r7}
 8015daa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015dac:	4b03      	ldr	r3, [pc, #12]	@ (8015dbc <vTaskMissedYield+0x14>)
 8015dae:	2201      	movs	r2, #1
 8015db0:	601a      	str	r2, [r3, #0]
}
 8015db2:	bf00      	nop
 8015db4:	46bd      	mov	sp, r7
 8015db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dba:	4770      	bx	lr
 8015dbc:	20001b2c 	.word	0x20001b2c

08015dc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b082      	sub	sp, #8
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015dc8:	f000 f854 	bl	8015e74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015dcc:	4b07      	ldr	r3, [pc, #28]	@ (8015dec <prvIdleTask+0x2c>)
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	2b01      	cmp	r3, #1
 8015dd2:	d907      	bls.n	8015de4 <prvIdleTask+0x24>
			{
				taskYIELD();
 8015dd4:	4b06      	ldr	r3, [pc, #24]	@ (8015df0 <prvIdleTask+0x30>)
 8015dd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015dda:	601a      	str	r2, [r3, #0]
 8015ddc:	f3bf 8f4f 	dsb	sy
 8015de0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8015de4:	f7eb fe36 	bl	8001a54 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8015de8:	e7ee      	b.n	8015dc8 <prvIdleTask+0x8>
 8015dea:	bf00      	nop
 8015dec:	20001a1c 	.word	0x20001a1c
 8015df0:	e000ed04 	.word	0xe000ed04

08015df4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b082      	sub	sp, #8
 8015df8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	607b      	str	r3, [r7, #4]
 8015dfe:	e00c      	b.n	8015e1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015e00:	687a      	ldr	r2, [r7, #4]
 8015e02:	4613      	mov	r3, r2
 8015e04:	009b      	lsls	r3, r3, #2
 8015e06:	4413      	add	r3, r2
 8015e08:	009b      	lsls	r3, r3, #2
 8015e0a:	4a12      	ldr	r2, [pc, #72]	@ (8015e54 <prvInitialiseTaskLists+0x60>)
 8015e0c:	4413      	add	r3, r2
 8015e0e:	4618      	mov	r0, r3
 8015e10:	f7fe fbec 	bl	80145ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	3301      	adds	r3, #1
 8015e18:	607b      	str	r3, [r7, #4]
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	2b06      	cmp	r3, #6
 8015e1e:	d9ef      	bls.n	8015e00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015e20:	480d      	ldr	r0, [pc, #52]	@ (8015e58 <prvInitialiseTaskLists+0x64>)
 8015e22:	f7fe fbe3 	bl	80145ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015e26:	480d      	ldr	r0, [pc, #52]	@ (8015e5c <prvInitialiseTaskLists+0x68>)
 8015e28:	f7fe fbe0 	bl	80145ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015e2c:	480c      	ldr	r0, [pc, #48]	@ (8015e60 <prvInitialiseTaskLists+0x6c>)
 8015e2e:	f7fe fbdd 	bl	80145ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015e32:	480c      	ldr	r0, [pc, #48]	@ (8015e64 <prvInitialiseTaskLists+0x70>)
 8015e34:	f7fe fbda 	bl	80145ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015e38:	480b      	ldr	r0, [pc, #44]	@ (8015e68 <prvInitialiseTaskLists+0x74>)
 8015e3a:	f7fe fbd7 	bl	80145ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8015e6c <prvInitialiseTaskLists+0x78>)
 8015e40:	4a05      	ldr	r2, [pc, #20]	@ (8015e58 <prvInitialiseTaskLists+0x64>)
 8015e42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015e44:	4b0a      	ldr	r3, [pc, #40]	@ (8015e70 <prvInitialiseTaskLists+0x7c>)
 8015e46:	4a05      	ldr	r2, [pc, #20]	@ (8015e5c <prvInitialiseTaskLists+0x68>)
 8015e48:	601a      	str	r2, [r3, #0]
}
 8015e4a:	bf00      	nop
 8015e4c:	3708      	adds	r7, #8
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	bd80      	pop	{r7, pc}
 8015e52:	bf00      	nop
 8015e54:	20001a1c 	.word	0x20001a1c
 8015e58:	20001aa8 	.word	0x20001aa8
 8015e5c:	20001abc 	.word	0x20001abc
 8015e60:	20001ad8 	.word	0x20001ad8
 8015e64:	20001aec 	.word	0x20001aec
 8015e68:	20001b04 	.word	0x20001b04
 8015e6c:	20001ad0 	.word	0x20001ad0
 8015e70:	20001ad4 	.word	0x20001ad4

08015e74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015e74:	b580      	push	{r7, lr}
 8015e76:	b082      	sub	sp, #8
 8015e78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015e7a:	e019      	b.n	8015eb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015e7c:	f000 fa96 	bl	80163ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015e80:	4b10      	ldr	r3, [pc, #64]	@ (8015ec4 <prvCheckTasksWaitingTermination+0x50>)
 8015e82:	68db      	ldr	r3, [r3, #12]
 8015e84:	68db      	ldr	r3, [r3, #12]
 8015e86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	3304      	adds	r3, #4
 8015e8c:	4618      	mov	r0, r3
 8015e8e:	f7fe fc37 	bl	8014700 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015e92:	4b0d      	ldr	r3, [pc, #52]	@ (8015ec8 <prvCheckTasksWaitingTermination+0x54>)
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	3b01      	subs	r3, #1
 8015e98:	4a0b      	ldr	r2, [pc, #44]	@ (8015ec8 <prvCheckTasksWaitingTermination+0x54>)
 8015e9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8015ecc <prvCheckTasksWaitingTermination+0x58>)
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	3b01      	subs	r3, #1
 8015ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8015ecc <prvCheckTasksWaitingTermination+0x58>)
 8015ea4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015ea6:	f000 fab7 	bl	8016418 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015eaa:	6878      	ldr	r0, [r7, #4]
 8015eac:	f000 f810 	bl	8015ed0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015eb0:	4b06      	ldr	r3, [pc, #24]	@ (8015ecc <prvCheckTasksWaitingTermination+0x58>)
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d1e1      	bne.n	8015e7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015eb8:	bf00      	nop
 8015eba:	bf00      	nop
 8015ebc:	3708      	adds	r7, #8
 8015ebe:	46bd      	mov	sp, r7
 8015ec0:	bd80      	pop	{r7, pc}
 8015ec2:	bf00      	nop
 8015ec4:	20001aec 	.word	0x20001aec
 8015ec8:	20001b18 	.word	0x20001b18
 8015ecc:	20001b00 	.word	0x20001b00

08015ed0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015ed0:	b580      	push	{r7, lr}
 8015ed2:	b084      	sub	sp, #16
 8015ed4:	af00      	add	r7, sp, #0
 8015ed6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d108      	bne.n	8015ef4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015ee6:	4618      	mov	r0, r3
 8015ee8:	f000 fc60 	bl	80167ac <vPortFree>
				vPortFree( pxTCB );
 8015eec:	6878      	ldr	r0, [r7, #4]
 8015eee:	f000 fc5d 	bl	80167ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015ef2:	e01b      	b.n	8015f2c <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8015efa:	2b01      	cmp	r3, #1
 8015efc:	d103      	bne.n	8015f06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015efe:	6878      	ldr	r0, [r7, #4]
 8015f00:	f000 fc54 	bl	80167ac <vPortFree>
	}
 8015f04:	e012      	b.n	8015f2c <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8015f0c:	2b02      	cmp	r3, #2
 8015f0e:	d00d      	beq.n	8015f2c <prvDeleteTCB+0x5c>
	__asm volatile
 8015f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f14:	b672      	cpsid	i
 8015f16:	f383 8811 	msr	BASEPRI, r3
 8015f1a:	f3bf 8f6f 	isb	sy
 8015f1e:	f3bf 8f4f 	dsb	sy
 8015f22:	b662      	cpsie	i
 8015f24:	60fb      	str	r3, [r7, #12]
}
 8015f26:	bf00      	nop
 8015f28:	bf00      	nop
 8015f2a:	e7fd      	b.n	8015f28 <prvDeleteTCB+0x58>
	}
 8015f2c:	bf00      	nop
 8015f2e:	3710      	adds	r7, #16
 8015f30:	46bd      	mov	sp, r7
 8015f32:	bd80      	pop	{r7, pc}

08015f34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015f34:	b480      	push	{r7}
 8015f36:	b083      	sub	sp, #12
 8015f38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8015f6c <prvResetNextTaskUnblockTime+0x38>)
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d104      	bne.n	8015f4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015f44:	4b0a      	ldr	r3, [pc, #40]	@ (8015f70 <prvResetNextTaskUnblockTime+0x3c>)
 8015f46:	f04f 32ff 	mov.w	r2, #4294967295
 8015f4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015f4c:	e008      	b.n	8015f60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015f4e:	4b07      	ldr	r3, [pc, #28]	@ (8015f6c <prvResetNextTaskUnblockTime+0x38>)
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	68db      	ldr	r3, [r3, #12]
 8015f54:	68db      	ldr	r3, [r3, #12]
 8015f56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	685b      	ldr	r3, [r3, #4]
 8015f5c:	4a04      	ldr	r2, [pc, #16]	@ (8015f70 <prvResetNextTaskUnblockTime+0x3c>)
 8015f5e:	6013      	str	r3, [r2, #0]
}
 8015f60:	bf00      	nop
 8015f62:	370c      	adds	r7, #12
 8015f64:	46bd      	mov	sp, r7
 8015f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f6a:	4770      	bx	lr
 8015f6c:	20001ad0 	.word	0x20001ad0
 8015f70:	20001b38 	.word	0x20001b38

08015f74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015f74:	b480      	push	{r7}
 8015f76:	b083      	sub	sp, #12
 8015f78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8015fa8 <xTaskGetSchedulerState+0x34>)
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d102      	bne.n	8015f88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015f82:	2301      	movs	r3, #1
 8015f84:	607b      	str	r3, [r7, #4]
 8015f86:	e008      	b.n	8015f9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015f88:	4b08      	ldr	r3, [pc, #32]	@ (8015fac <xTaskGetSchedulerState+0x38>)
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d102      	bne.n	8015f96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015f90:	2302      	movs	r3, #2
 8015f92:	607b      	str	r3, [r7, #4]
 8015f94:	e001      	b.n	8015f9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015f96:	2300      	movs	r3, #0
 8015f98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015f9a:	687b      	ldr	r3, [r7, #4]
	}
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	370c      	adds	r7, #12
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa6:	4770      	bx	lr
 8015fa8:	20001b24 	.word	0x20001b24
 8015fac:	20001b40 	.word	0x20001b40

08015fb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015fb0:	b580      	push	{r7, lr}
 8015fb2:	b086      	sub	sp, #24
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015fbc:	2300      	movs	r3, #0
 8015fbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d074      	beq.n	80160b0 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015fc6:	4b3d      	ldr	r3, [pc, #244]	@ (80160bc <xTaskPriorityDisinherit+0x10c>)
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	693a      	ldr	r2, [r7, #16]
 8015fcc:	429a      	cmp	r2, r3
 8015fce:	d00d      	beq.n	8015fec <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8015fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fd4:	b672      	cpsid	i
 8015fd6:	f383 8811 	msr	BASEPRI, r3
 8015fda:	f3bf 8f6f 	isb	sy
 8015fde:	f3bf 8f4f 	dsb	sy
 8015fe2:	b662      	cpsie	i
 8015fe4:	60fb      	str	r3, [r7, #12]
}
 8015fe6:	bf00      	nop
 8015fe8:	bf00      	nop
 8015fea:	e7fd      	b.n	8015fe8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8015fec:	693b      	ldr	r3, [r7, #16]
 8015fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d10d      	bne.n	8016010 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8015ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ff8:	b672      	cpsid	i
 8015ffa:	f383 8811 	msr	BASEPRI, r3
 8015ffe:	f3bf 8f6f 	isb	sy
 8016002:	f3bf 8f4f 	dsb	sy
 8016006:	b662      	cpsie	i
 8016008:	60bb      	str	r3, [r7, #8]
}
 801600a:	bf00      	nop
 801600c:	bf00      	nop
 801600e:	e7fd      	b.n	801600c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8016010:	693b      	ldr	r3, [r7, #16]
 8016012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016014:	1e5a      	subs	r2, r3, #1
 8016016:	693b      	ldr	r3, [r7, #16]
 8016018:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801601a:	693b      	ldr	r3, [r7, #16]
 801601c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801601e:	693b      	ldr	r3, [r7, #16]
 8016020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016022:	429a      	cmp	r2, r3
 8016024:	d044      	beq.n	80160b0 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016026:	693b      	ldr	r3, [r7, #16]
 8016028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801602a:	2b00      	cmp	r3, #0
 801602c:	d140      	bne.n	80160b0 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801602e:	693b      	ldr	r3, [r7, #16]
 8016030:	3304      	adds	r3, #4
 8016032:	4618      	mov	r0, r3
 8016034:	f7fe fb64 	bl	8014700 <uxListRemove>
 8016038:	4603      	mov	r3, r0
 801603a:	2b00      	cmp	r3, #0
 801603c:	d115      	bne.n	801606a <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801603e:	693b      	ldr	r3, [r7, #16]
 8016040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016042:	491f      	ldr	r1, [pc, #124]	@ (80160c0 <xTaskPriorityDisinherit+0x110>)
 8016044:	4613      	mov	r3, r2
 8016046:	009b      	lsls	r3, r3, #2
 8016048:	4413      	add	r3, r2
 801604a:	009b      	lsls	r3, r3, #2
 801604c:	440b      	add	r3, r1
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	2b00      	cmp	r3, #0
 8016052:	d10a      	bne.n	801606a <xTaskPriorityDisinherit+0xba>
 8016054:	693b      	ldr	r3, [r7, #16]
 8016056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016058:	2201      	movs	r2, #1
 801605a:	fa02 f303 	lsl.w	r3, r2, r3
 801605e:	43da      	mvns	r2, r3
 8016060:	4b18      	ldr	r3, [pc, #96]	@ (80160c4 <xTaskPriorityDisinherit+0x114>)
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	4013      	ands	r3, r2
 8016066:	4a17      	ldr	r2, [pc, #92]	@ (80160c4 <xTaskPriorityDisinherit+0x114>)
 8016068:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801606a:	693b      	ldr	r3, [r7, #16]
 801606c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801606e:	693b      	ldr	r3, [r7, #16]
 8016070:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016072:	693b      	ldr	r3, [r7, #16]
 8016074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016076:	f1c3 0207 	rsb	r2, r3, #7
 801607a:	693b      	ldr	r3, [r7, #16]
 801607c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801607e:	693b      	ldr	r3, [r7, #16]
 8016080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016082:	2201      	movs	r2, #1
 8016084:	409a      	lsls	r2, r3
 8016086:	4b0f      	ldr	r3, [pc, #60]	@ (80160c4 <xTaskPriorityDisinherit+0x114>)
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	4313      	orrs	r3, r2
 801608c:	4a0d      	ldr	r2, [pc, #52]	@ (80160c4 <xTaskPriorityDisinherit+0x114>)
 801608e:	6013      	str	r3, [r2, #0]
 8016090:	693b      	ldr	r3, [r7, #16]
 8016092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016094:	4613      	mov	r3, r2
 8016096:	009b      	lsls	r3, r3, #2
 8016098:	4413      	add	r3, r2
 801609a:	009b      	lsls	r3, r3, #2
 801609c:	4a08      	ldr	r2, [pc, #32]	@ (80160c0 <xTaskPriorityDisinherit+0x110>)
 801609e:	441a      	add	r2, r3
 80160a0:	693b      	ldr	r3, [r7, #16]
 80160a2:	3304      	adds	r3, #4
 80160a4:	4619      	mov	r1, r3
 80160a6:	4610      	mov	r0, r2
 80160a8:	f7fe facd 	bl	8014646 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80160ac:	2301      	movs	r3, #1
 80160ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80160b0:	697b      	ldr	r3, [r7, #20]
	}
 80160b2:	4618      	mov	r0, r3
 80160b4:	3718      	adds	r7, #24
 80160b6:	46bd      	mov	sp, r7
 80160b8:	bd80      	pop	{r7, pc}
 80160ba:	bf00      	nop
 80160bc:	20001a18 	.word	0x20001a18
 80160c0:	20001a1c 	.word	0x20001a1c
 80160c4:	20001b20 	.word	0x20001b20

080160c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b084      	sub	sp, #16
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	6078      	str	r0, [r7, #4]
 80160d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80160d2:	4b29      	ldr	r3, [pc, #164]	@ (8016178 <prvAddCurrentTaskToDelayedList+0xb0>)
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80160d8:	4b28      	ldr	r3, [pc, #160]	@ (801617c <prvAddCurrentTaskToDelayedList+0xb4>)
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	3304      	adds	r3, #4
 80160de:	4618      	mov	r0, r3
 80160e0:	f7fe fb0e 	bl	8014700 <uxListRemove>
 80160e4:	4603      	mov	r3, r0
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d10b      	bne.n	8016102 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80160ea:	4b24      	ldr	r3, [pc, #144]	@ (801617c <prvAddCurrentTaskToDelayedList+0xb4>)
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160f0:	2201      	movs	r2, #1
 80160f2:	fa02 f303 	lsl.w	r3, r2, r3
 80160f6:	43da      	mvns	r2, r3
 80160f8:	4b21      	ldr	r3, [pc, #132]	@ (8016180 <prvAddCurrentTaskToDelayedList+0xb8>)
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	4013      	ands	r3, r2
 80160fe:	4a20      	ldr	r2, [pc, #128]	@ (8016180 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016100:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016108:	d10a      	bne.n	8016120 <prvAddCurrentTaskToDelayedList+0x58>
 801610a:	683b      	ldr	r3, [r7, #0]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d007      	beq.n	8016120 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016110:	4b1a      	ldr	r3, [pc, #104]	@ (801617c <prvAddCurrentTaskToDelayedList+0xb4>)
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	3304      	adds	r3, #4
 8016116:	4619      	mov	r1, r3
 8016118:	481a      	ldr	r0, [pc, #104]	@ (8016184 <prvAddCurrentTaskToDelayedList+0xbc>)
 801611a:	f7fe fa94 	bl	8014646 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801611e:	e026      	b.n	801616e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016120:	68fa      	ldr	r2, [r7, #12]
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	4413      	add	r3, r2
 8016126:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016128:	4b14      	ldr	r3, [pc, #80]	@ (801617c <prvAddCurrentTaskToDelayedList+0xb4>)
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	68ba      	ldr	r2, [r7, #8]
 801612e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016130:	68ba      	ldr	r2, [r7, #8]
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	429a      	cmp	r2, r3
 8016136:	d209      	bcs.n	801614c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016138:	4b13      	ldr	r3, [pc, #76]	@ (8016188 <prvAddCurrentTaskToDelayedList+0xc0>)
 801613a:	681a      	ldr	r2, [r3, #0]
 801613c:	4b0f      	ldr	r3, [pc, #60]	@ (801617c <prvAddCurrentTaskToDelayedList+0xb4>)
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	3304      	adds	r3, #4
 8016142:	4619      	mov	r1, r3
 8016144:	4610      	mov	r0, r2
 8016146:	f7fe faa2 	bl	801468e <vListInsert>
}
 801614a:	e010      	b.n	801616e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801614c:	4b0f      	ldr	r3, [pc, #60]	@ (801618c <prvAddCurrentTaskToDelayedList+0xc4>)
 801614e:	681a      	ldr	r2, [r3, #0]
 8016150:	4b0a      	ldr	r3, [pc, #40]	@ (801617c <prvAddCurrentTaskToDelayedList+0xb4>)
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	3304      	adds	r3, #4
 8016156:	4619      	mov	r1, r3
 8016158:	4610      	mov	r0, r2
 801615a:	f7fe fa98 	bl	801468e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801615e:	4b0c      	ldr	r3, [pc, #48]	@ (8016190 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	68ba      	ldr	r2, [r7, #8]
 8016164:	429a      	cmp	r2, r3
 8016166:	d202      	bcs.n	801616e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016168:	4a09      	ldr	r2, [pc, #36]	@ (8016190 <prvAddCurrentTaskToDelayedList+0xc8>)
 801616a:	68bb      	ldr	r3, [r7, #8]
 801616c:	6013      	str	r3, [r2, #0]
}
 801616e:	bf00      	nop
 8016170:	3710      	adds	r7, #16
 8016172:	46bd      	mov	sp, r7
 8016174:	bd80      	pop	{r7, pc}
 8016176:	bf00      	nop
 8016178:	20001b1c 	.word	0x20001b1c
 801617c:	20001a18 	.word	0x20001a18
 8016180:	20001b20 	.word	0x20001b20
 8016184:	20001b04 	.word	0x20001b04
 8016188:	20001ad4 	.word	0x20001ad4
 801618c:	20001ad0 	.word	0x20001ad0
 8016190:	20001b38 	.word	0x20001b38

08016194 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016194:	b480      	push	{r7}
 8016196:	b085      	sub	sp, #20
 8016198:	af00      	add	r7, sp, #0
 801619a:	60f8      	str	r0, [r7, #12]
 801619c:	60b9      	str	r1, [r7, #8]
 801619e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	3b04      	subs	r3, #4
 80161a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80161ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	3b04      	subs	r3, #4
 80161b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80161b4:	68bb      	ldr	r3, [r7, #8]
 80161b6:	f023 0201 	bic.w	r2, r3, #1
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	3b04      	subs	r3, #4
 80161c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80161c4:	4a0c      	ldr	r2, [pc, #48]	@ (80161f8 <pxPortInitialiseStack+0x64>)
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	3b14      	subs	r3, #20
 80161ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80161d0:	687a      	ldr	r2, [r7, #4]
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	3b04      	subs	r3, #4
 80161da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	f06f 0202 	mvn.w	r2, #2
 80161e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	3b20      	subs	r3, #32
 80161e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80161ea:	68fb      	ldr	r3, [r7, #12]
}
 80161ec:	4618      	mov	r0, r3
 80161ee:	3714      	adds	r7, #20
 80161f0:	46bd      	mov	sp, r7
 80161f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f6:	4770      	bx	lr
 80161f8:	080161fd 	.word	0x080161fd

080161fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80161fc:	b480      	push	{r7}
 80161fe:	b085      	sub	sp, #20
 8016200:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016202:	2300      	movs	r3, #0
 8016204:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016206:	4b15      	ldr	r3, [pc, #84]	@ (801625c <prvTaskExitError+0x60>)
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801620e:	d00d      	beq.n	801622c <prvTaskExitError+0x30>
	__asm volatile
 8016210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016214:	b672      	cpsid	i
 8016216:	f383 8811 	msr	BASEPRI, r3
 801621a:	f3bf 8f6f 	isb	sy
 801621e:	f3bf 8f4f 	dsb	sy
 8016222:	b662      	cpsie	i
 8016224:	60fb      	str	r3, [r7, #12]
}
 8016226:	bf00      	nop
 8016228:	bf00      	nop
 801622a:	e7fd      	b.n	8016228 <prvTaskExitError+0x2c>
	__asm volatile
 801622c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016230:	b672      	cpsid	i
 8016232:	f383 8811 	msr	BASEPRI, r3
 8016236:	f3bf 8f6f 	isb	sy
 801623a:	f3bf 8f4f 	dsb	sy
 801623e:	b662      	cpsie	i
 8016240:	60bb      	str	r3, [r7, #8]
}
 8016242:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016244:	bf00      	nop
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d0fc      	beq.n	8016246 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801624c:	bf00      	nop
 801624e:	bf00      	nop
 8016250:	3714      	adds	r7, #20
 8016252:	46bd      	mov	sp, r7
 8016254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016258:	4770      	bx	lr
 801625a:	bf00      	nop
 801625c:	20000070 	.word	0x20000070

08016260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016260:	4b07      	ldr	r3, [pc, #28]	@ (8016280 <pxCurrentTCBConst2>)
 8016262:	6819      	ldr	r1, [r3, #0]
 8016264:	6808      	ldr	r0, [r1, #0]
 8016266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801626a:	f380 8809 	msr	PSP, r0
 801626e:	f3bf 8f6f 	isb	sy
 8016272:	f04f 0000 	mov.w	r0, #0
 8016276:	f380 8811 	msr	BASEPRI, r0
 801627a:	4770      	bx	lr
 801627c:	f3af 8000 	nop.w

08016280 <pxCurrentTCBConst2>:
 8016280:	20001a18 	.word	0x20001a18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016284:	bf00      	nop
 8016286:	bf00      	nop

08016288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016288:	4808      	ldr	r0, [pc, #32]	@ (80162ac <prvPortStartFirstTask+0x24>)
 801628a:	6800      	ldr	r0, [r0, #0]
 801628c:	6800      	ldr	r0, [r0, #0]
 801628e:	f380 8808 	msr	MSP, r0
 8016292:	f04f 0000 	mov.w	r0, #0
 8016296:	f380 8814 	msr	CONTROL, r0
 801629a:	b662      	cpsie	i
 801629c:	b661      	cpsie	f
 801629e:	f3bf 8f4f 	dsb	sy
 80162a2:	f3bf 8f6f 	isb	sy
 80162a6:	df00      	svc	0
 80162a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80162aa:	bf00      	nop
 80162ac:	e000ed08 	.word	0xe000ed08

080162b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b084      	sub	sp, #16
 80162b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80162b6:	4b37      	ldr	r3, [pc, #220]	@ (8016394 <xPortStartScheduler+0xe4>)
 80162b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	781b      	ldrb	r3, [r3, #0]
 80162be:	b2db      	uxtb	r3, r3
 80162c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	22ff      	movs	r2, #255	@ 0xff
 80162c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	781b      	ldrb	r3, [r3, #0]
 80162cc:	b2db      	uxtb	r3, r3
 80162ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80162d0:	78fb      	ldrb	r3, [r7, #3]
 80162d2:	b2db      	uxtb	r3, r3
 80162d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80162d8:	b2da      	uxtb	r2, r3
 80162da:	4b2f      	ldr	r3, [pc, #188]	@ (8016398 <xPortStartScheduler+0xe8>)
 80162dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80162de:	4b2f      	ldr	r3, [pc, #188]	@ (801639c <xPortStartScheduler+0xec>)
 80162e0:	2207      	movs	r2, #7
 80162e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80162e4:	e009      	b.n	80162fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80162e6:	4b2d      	ldr	r3, [pc, #180]	@ (801639c <xPortStartScheduler+0xec>)
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	3b01      	subs	r3, #1
 80162ec:	4a2b      	ldr	r2, [pc, #172]	@ (801639c <xPortStartScheduler+0xec>)
 80162ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80162f0:	78fb      	ldrb	r3, [r7, #3]
 80162f2:	b2db      	uxtb	r3, r3
 80162f4:	005b      	lsls	r3, r3, #1
 80162f6:	b2db      	uxtb	r3, r3
 80162f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80162fa:	78fb      	ldrb	r3, [r7, #3]
 80162fc:	b2db      	uxtb	r3, r3
 80162fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016302:	2b80      	cmp	r3, #128	@ 0x80
 8016304:	d0ef      	beq.n	80162e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016306:	4b25      	ldr	r3, [pc, #148]	@ (801639c <xPortStartScheduler+0xec>)
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	f1c3 0307 	rsb	r3, r3, #7
 801630e:	2b04      	cmp	r3, #4
 8016310:	d00d      	beq.n	801632e <xPortStartScheduler+0x7e>
	__asm volatile
 8016312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016316:	b672      	cpsid	i
 8016318:	f383 8811 	msr	BASEPRI, r3
 801631c:	f3bf 8f6f 	isb	sy
 8016320:	f3bf 8f4f 	dsb	sy
 8016324:	b662      	cpsie	i
 8016326:	60bb      	str	r3, [r7, #8]
}
 8016328:	bf00      	nop
 801632a:	bf00      	nop
 801632c:	e7fd      	b.n	801632a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801632e:	4b1b      	ldr	r3, [pc, #108]	@ (801639c <xPortStartScheduler+0xec>)
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	021b      	lsls	r3, r3, #8
 8016334:	4a19      	ldr	r2, [pc, #100]	@ (801639c <xPortStartScheduler+0xec>)
 8016336:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016338:	4b18      	ldr	r3, [pc, #96]	@ (801639c <xPortStartScheduler+0xec>)
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016340:	4a16      	ldr	r2, [pc, #88]	@ (801639c <xPortStartScheduler+0xec>)
 8016342:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	b2da      	uxtb	r2, r3
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801634c:	4b14      	ldr	r3, [pc, #80]	@ (80163a0 <xPortStartScheduler+0xf0>)
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	4a13      	ldr	r2, [pc, #76]	@ (80163a0 <xPortStartScheduler+0xf0>)
 8016352:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8016356:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016358:	4b11      	ldr	r3, [pc, #68]	@ (80163a0 <xPortStartScheduler+0xf0>)
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	4a10      	ldr	r2, [pc, #64]	@ (80163a0 <xPortStartScheduler+0xf0>)
 801635e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8016362:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016364:	f000 f8dc 	bl	8016520 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016368:	4b0e      	ldr	r3, [pc, #56]	@ (80163a4 <xPortStartScheduler+0xf4>)
 801636a:	2200      	movs	r2, #0
 801636c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801636e:	f000 f8fb 	bl	8016568 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016372:	4b0d      	ldr	r3, [pc, #52]	@ (80163a8 <xPortStartScheduler+0xf8>)
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	4a0c      	ldr	r2, [pc, #48]	@ (80163a8 <xPortStartScheduler+0xf8>)
 8016378:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801637c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801637e:	f7ff ff83 	bl	8016288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016382:	f7ff fb81 	bl	8015a88 <vTaskSwitchContext>
	prvTaskExitError();
 8016386:	f7ff ff39 	bl	80161fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801638a:	2300      	movs	r3, #0
}
 801638c:	4618      	mov	r0, r3
 801638e:	3710      	adds	r7, #16
 8016390:	46bd      	mov	sp, r7
 8016392:	bd80      	pop	{r7, pc}
 8016394:	e000e400 	.word	0xe000e400
 8016398:	20001b44 	.word	0x20001b44
 801639c:	20001b48 	.word	0x20001b48
 80163a0:	e000ed20 	.word	0xe000ed20
 80163a4:	20000070 	.word	0x20000070
 80163a8:	e000ef34 	.word	0xe000ef34

080163ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80163ac:	b480      	push	{r7}
 80163ae:	b083      	sub	sp, #12
 80163b0:	af00      	add	r7, sp, #0
	__asm volatile
 80163b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163b6:	b672      	cpsid	i
 80163b8:	f383 8811 	msr	BASEPRI, r3
 80163bc:	f3bf 8f6f 	isb	sy
 80163c0:	f3bf 8f4f 	dsb	sy
 80163c4:	b662      	cpsie	i
 80163c6:	607b      	str	r3, [r7, #4]
}
 80163c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80163ca:	4b11      	ldr	r3, [pc, #68]	@ (8016410 <vPortEnterCritical+0x64>)
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	3301      	adds	r3, #1
 80163d0:	4a0f      	ldr	r2, [pc, #60]	@ (8016410 <vPortEnterCritical+0x64>)
 80163d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80163d4:	4b0e      	ldr	r3, [pc, #56]	@ (8016410 <vPortEnterCritical+0x64>)
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	2b01      	cmp	r3, #1
 80163da:	d112      	bne.n	8016402 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80163dc:	4b0d      	ldr	r3, [pc, #52]	@ (8016414 <vPortEnterCritical+0x68>)
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	b2db      	uxtb	r3, r3
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d00d      	beq.n	8016402 <vPortEnterCritical+0x56>
	__asm volatile
 80163e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163ea:	b672      	cpsid	i
 80163ec:	f383 8811 	msr	BASEPRI, r3
 80163f0:	f3bf 8f6f 	isb	sy
 80163f4:	f3bf 8f4f 	dsb	sy
 80163f8:	b662      	cpsie	i
 80163fa:	603b      	str	r3, [r7, #0]
}
 80163fc:	bf00      	nop
 80163fe:	bf00      	nop
 8016400:	e7fd      	b.n	80163fe <vPortEnterCritical+0x52>
	}
}
 8016402:	bf00      	nop
 8016404:	370c      	adds	r7, #12
 8016406:	46bd      	mov	sp, r7
 8016408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801640c:	4770      	bx	lr
 801640e:	bf00      	nop
 8016410:	20000070 	.word	0x20000070
 8016414:	e000ed04 	.word	0xe000ed04

08016418 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016418:	b480      	push	{r7}
 801641a:	b083      	sub	sp, #12
 801641c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801641e:	4b13      	ldr	r3, [pc, #76]	@ (801646c <vPortExitCritical+0x54>)
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d10d      	bne.n	8016442 <vPortExitCritical+0x2a>
	__asm volatile
 8016426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801642a:	b672      	cpsid	i
 801642c:	f383 8811 	msr	BASEPRI, r3
 8016430:	f3bf 8f6f 	isb	sy
 8016434:	f3bf 8f4f 	dsb	sy
 8016438:	b662      	cpsie	i
 801643a:	607b      	str	r3, [r7, #4]
}
 801643c:	bf00      	nop
 801643e:	bf00      	nop
 8016440:	e7fd      	b.n	801643e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8016442:	4b0a      	ldr	r3, [pc, #40]	@ (801646c <vPortExitCritical+0x54>)
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	3b01      	subs	r3, #1
 8016448:	4a08      	ldr	r2, [pc, #32]	@ (801646c <vPortExitCritical+0x54>)
 801644a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801644c:	4b07      	ldr	r3, [pc, #28]	@ (801646c <vPortExitCritical+0x54>)
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d105      	bne.n	8016460 <vPortExitCritical+0x48>
 8016454:	2300      	movs	r3, #0
 8016456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016458:	683b      	ldr	r3, [r7, #0]
 801645a:	f383 8811 	msr	BASEPRI, r3
}
 801645e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016460:	bf00      	nop
 8016462:	370c      	adds	r7, #12
 8016464:	46bd      	mov	sp, r7
 8016466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801646a:	4770      	bx	lr
 801646c:	20000070 	.word	0x20000070

08016470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016470:	f3ef 8009 	mrs	r0, PSP
 8016474:	f3bf 8f6f 	isb	sy
 8016478:	4b15      	ldr	r3, [pc, #84]	@ (80164d0 <pxCurrentTCBConst>)
 801647a:	681a      	ldr	r2, [r3, #0]
 801647c:	f01e 0f10 	tst.w	lr, #16
 8016480:	bf08      	it	eq
 8016482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801648a:	6010      	str	r0, [r2, #0]
 801648c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016490:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8016494:	b672      	cpsid	i
 8016496:	f380 8811 	msr	BASEPRI, r0
 801649a:	f3bf 8f4f 	dsb	sy
 801649e:	f3bf 8f6f 	isb	sy
 80164a2:	b662      	cpsie	i
 80164a4:	f7ff faf0 	bl	8015a88 <vTaskSwitchContext>
 80164a8:	f04f 0000 	mov.w	r0, #0
 80164ac:	f380 8811 	msr	BASEPRI, r0
 80164b0:	bc09      	pop	{r0, r3}
 80164b2:	6819      	ldr	r1, [r3, #0]
 80164b4:	6808      	ldr	r0, [r1, #0]
 80164b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164ba:	f01e 0f10 	tst.w	lr, #16
 80164be:	bf08      	it	eq
 80164c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80164c4:	f380 8809 	msr	PSP, r0
 80164c8:	f3bf 8f6f 	isb	sy
 80164cc:	4770      	bx	lr
 80164ce:	bf00      	nop

080164d0 <pxCurrentTCBConst>:
 80164d0:	20001a18 	.word	0x20001a18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80164d4:	bf00      	nop
 80164d6:	bf00      	nop

080164d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80164d8:	b580      	push	{r7, lr}
 80164da:	b082      	sub	sp, #8
 80164dc:	af00      	add	r7, sp, #0
	__asm volatile
 80164de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80164e2:	b672      	cpsid	i
 80164e4:	f383 8811 	msr	BASEPRI, r3
 80164e8:	f3bf 8f6f 	isb	sy
 80164ec:	f3bf 8f4f 	dsb	sy
 80164f0:	b662      	cpsie	i
 80164f2:	607b      	str	r3, [r7, #4]
}
 80164f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80164f6:	f7ff fa0b 	bl	8015910 <xTaskIncrementTick>
 80164fa:	4603      	mov	r3, r0
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d003      	beq.n	8016508 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016500:	4b06      	ldr	r3, [pc, #24]	@ (801651c <SysTick_Handler+0x44>)
 8016502:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016506:	601a      	str	r2, [r3, #0]
 8016508:	2300      	movs	r3, #0
 801650a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801650c:	683b      	ldr	r3, [r7, #0]
 801650e:	f383 8811 	msr	BASEPRI, r3
}
 8016512:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016514:	bf00      	nop
 8016516:	3708      	adds	r7, #8
 8016518:	46bd      	mov	sp, r7
 801651a:	bd80      	pop	{r7, pc}
 801651c:	e000ed04 	.word	0xe000ed04

08016520 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016520:	b480      	push	{r7}
 8016522:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016524:	4b0b      	ldr	r3, [pc, #44]	@ (8016554 <vPortSetupTimerInterrupt+0x34>)
 8016526:	2200      	movs	r2, #0
 8016528:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801652a:	4b0b      	ldr	r3, [pc, #44]	@ (8016558 <vPortSetupTimerInterrupt+0x38>)
 801652c:	2200      	movs	r2, #0
 801652e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016530:	4b0a      	ldr	r3, [pc, #40]	@ (801655c <vPortSetupTimerInterrupt+0x3c>)
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	4a0a      	ldr	r2, [pc, #40]	@ (8016560 <vPortSetupTimerInterrupt+0x40>)
 8016536:	fba2 2303 	umull	r2, r3, r2, r3
 801653a:	099b      	lsrs	r3, r3, #6
 801653c:	4a09      	ldr	r2, [pc, #36]	@ (8016564 <vPortSetupTimerInterrupt+0x44>)
 801653e:	3b01      	subs	r3, #1
 8016540:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016542:	4b04      	ldr	r3, [pc, #16]	@ (8016554 <vPortSetupTimerInterrupt+0x34>)
 8016544:	2207      	movs	r2, #7
 8016546:	601a      	str	r2, [r3, #0]
}
 8016548:	bf00      	nop
 801654a:	46bd      	mov	sp, r7
 801654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016550:	4770      	bx	lr
 8016552:	bf00      	nop
 8016554:	e000e010 	.word	0xe000e010
 8016558:	e000e018 	.word	0xe000e018
 801655c:	2000001c 	.word	0x2000001c
 8016560:	10624dd3 	.word	0x10624dd3
 8016564:	e000e014 	.word	0xe000e014

08016568 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016568:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8016578 <vPortEnableVFP+0x10>
 801656c:	6801      	ldr	r1, [r0, #0]
 801656e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8016572:	6001      	str	r1, [r0, #0]
 8016574:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016576:	bf00      	nop
 8016578:	e000ed88 	.word	0xe000ed88

0801657c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801657c:	b480      	push	{r7}
 801657e:	b085      	sub	sp, #20
 8016580:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016582:	f3ef 8305 	mrs	r3, IPSR
 8016586:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	2b0f      	cmp	r3, #15
 801658c:	d917      	bls.n	80165be <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801658e:	4a1a      	ldr	r2, [pc, #104]	@ (80165f8 <vPortValidateInterruptPriority+0x7c>)
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	4413      	add	r3, r2
 8016594:	781b      	ldrb	r3, [r3, #0]
 8016596:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016598:	4b18      	ldr	r3, [pc, #96]	@ (80165fc <vPortValidateInterruptPriority+0x80>)
 801659a:	781b      	ldrb	r3, [r3, #0]
 801659c:	7afa      	ldrb	r2, [r7, #11]
 801659e:	429a      	cmp	r2, r3
 80165a0:	d20d      	bcs.n	80165be <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80165a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165a6:	b672      	cpsid	i
 80165a8:	f383 8811 	msr	BASEPRI, r3
 80165ac:	f3bf 8f6f 	isb	sy
 80165b0:	f3bf 8f4f 	dsb	sy
 80165b4:	b662      	cpsie	i
 80165b6:	607b      	str	r3, [r7, #4]
}
 80165b8:	bf00      	nop
 80165ba:	bf00      	nop
 80165bc:	e7fd      	b.n	80165ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80165be:	4b10      	ldr	r3, [pc, #64]	@ (8016600 <vPortValidateInterruptPriority+0x84>)
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80165c6:	4b0f      	ldr	r3, [pc, #60]	@ (8016604 <vPortValidateInterruptPriority+0x88>)
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	429a      	cmp	r2, r3
 80165cc:	d90d      	bls.n	80165ea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80165ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165d2:	b672      	cpsid	i
 80165d4:	f383 8811 	msr	BASEPRI, r3
 80165d8:	f3bf 8f6f 	isb	sy
 80165dc:	f3bf 8f4f 	dsb	sy
 80165e0:	b662      	cpsie	i
 80165e2:	603b      	str	r3, [r7, #0]
}
 80165e4:	bf00      	nop
 80165e6:	bf00      	nop
 80165e8:	e7fd      	b.n	80165e6 <vPortValidateInterruptPriority+0x6a>
	}
 80165ea:	bf00      	nop
 80165ec:	3714      	adds	r7, #20
 80165ee:	46bd      	mov	sp, r7
 80165f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f4:	4770      	bx	lr
 80165f6:	bf00      	nop
 80165f8:	e000e3f0 	.word	0xe000e3f0
 80165fc:	20001b44 	.word	0x20001b44
 8016600:	e000ed0c 	.word	0xe000ed0c
 8016604:	20001b48 	.word	0x20001b48

08016608 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016608:	b580      	push	{r7, lr}
 801660a:	b08a      	sub	sp, #40	@ 0x28
 801660c:	af00      	add	r7, sp, #0
 801660e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016610:	2300      	movs	r3, #0
 8016612:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016614:	f7ff f8ac 	bl	8015770 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016618:	4b5f      	ldr	r3, [pc, #380]	@ (8016798 <pvPortMalloc+0x190>)
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d101      	bne.n	8016624 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016620:	f000 f924 	bl	801686c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016624:	4b5d      	ldr	r3, [pc, #372]	@ (801679c <pvPortMalloc+0x194>)
 8016626:	681a      	ldr	r2, [r3, #0]
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	4013      	ands	r3, r2
 801662c:	2b00      	cmp	r3, #0
 801662e:	f040 8094 	bne.w	801675a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d020      	beq.n	801667a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8016638:	2208      	movs	r2, #8
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	4413      	add	r3, r2
 801663e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	f003 0307 	and.w	r3, r3, #7
 8016646:	2b00      	cmp	r3, #0
 8016648:	d017      	beq.n	801667a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	f023 0307 	bic.w	r3, r3, #7
 8016650:	3308      	adds	r3, #8
 8016652:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	f003 0307 	and.w	r3, r3, #7
 801665a:	2b00      	cmp	r3, #0
 801665c:	d00d      	beq.n	801667a <pvPortMalloc+0x72>
	__asm volatile
 801665e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016662:	b672      	cpsid	i
 8016664:	f383 8811 	msr	BASEPRI, r3
 8016668:	f3bf 8f6f 	isb	sy
 801666c:	f3bf 8f4f 	dsb	sy
 8016670:	b662      	cpsie	i
 8016672:	617b      	str	r3, [r7, #20]
}
 8016674:	bf00      	nop
 8016676:	bf00      	nop
 8016678:	e7fd      	b.n	8016676 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	2b00      	cmp	r3, #0
 801667e:	d06c      	beq.n	801675a <pvPortMalloc+0x152>
 8016680:	4b47      	ldr	r3, [pc, #284]	@ (80167a0 <pvPortMalloc+0x198>)
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	687a      	ldr	r2, [r7, #4]
 8016686:	429a      	cmp	r2, r3
 8016688:	d867      	bhi.n	801675a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801668a:	4b46      	ldr	r3, [pc, #280]	@ (80167a4 <pvPortMalloc+0x19c>)
 801668c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801668e:	4b45      	ldr	r3, [pc, #276]	@ (80167a4 <pvPortMalloc+0x19c>)
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016694:	e004      	b.n	80166a0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8016696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016698:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80166a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166a2:	685b      	ldr	r3, [r3, #4]
 80166a4:	687a      	ldr	r2, [r7, #4]
 80166a6:	429a      	cmp	r2, r3
 80166a8:	d903      	bls.n	80166b2 <pvPortMalloc+0xaa>
 80166aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d1f1      	bne.n	8016696 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80166b2:	4b39      	ldr	r3, [pc, #228]	@ (8016798 <pvPortMalloc+0x190>)
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80166b8:	429a      	cmp	r2, r3
 80166ba:	d04e      	beq.n	801675a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80166bc:	6a3b      	ldr	r3, [r7, #32]
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	2208      	movs	r2, #8
 80166c2:	4413      	add	r3, r2
 80166c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80166c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166c8:	681a      	ldr	r2, [r3, #0]
 80166ca:	6a3b      	ldr	r3, [r7, #32]
 80166cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80166ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166d0:	685a      	ldr	r2, [r3, #4]
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	1ad2      	subs	r2, r2, r3
 80166d6:	2308      	movs	r3, #8
 80166d8:	005b      	lsls	r3, r3, #1
 80166da:	429a      	cmp	r2, r3
 80166dc:	d922      	bls.n	8016724 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80166de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	4413      	add	r3, r2
 80166e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80166e6:	69bb      	ldr	r3, [r7, #24]
 80166e8:	f003 0307 	and.w	r3, r3, #7
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d00d      	beq.n	801670c <pvPortMalloc+0x104>
	__asm volatile
 80166f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166f4:	b672      	cpsid	i
 80166f6:	f383 8811 	msr	BASEPRI, r3
 80166fa:	f3bf 8f6f 	isb	sy
 80166fe:	f3bf 8f4f 	dsb	sy
 8016702:	b662      	cpsie	i
 8016704:	613b      	str	r3, [r7, #16]
}
 8016706:	bf00      	nop
 8016708:	bf00      	nop
 801670a:	e7fd      	b.n	8016708 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801670c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801670e:	685a      	ldr	r2, [r3, #4]
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	1ad2      	subs	r2, r2, r3
 8016714:	69bb      	ldr	r3, [r7, #24]
 8016716:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801671a:	687a      	ldr	r2, [r7, #4]
 801671c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801671e:	69b8      	ldr	r0, [r7, #24]
 8016720:	f000 f906 	bl	8016930 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016724:	4b1e      	ldr	r3, [pc, #120]	@ (80167a0 <pvPortMalloc+0x198>)
 8016726:	681a      	ldr	r2, [r3, #0]
 8016728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801672a:	685b      	ldr	r3, [r3, #4]
 801672c:	1ad3      	subs	r3, r2, r3
 801672e:	4a1c      	ldr	r2, [pc, #112]	@ (80167a0 <pvPortMalloc+0x198>)
 8016730:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016732:	4b1b      	ldr	r3, [pc, #108]	@ (80167a0 <pvPortMalloc+0x198>)
 8016734:	681a      	ldr	r2, [r3, #0]
 8016736:	4b1c      	ldr	r3, [pc, #112]	@ (80167a8 <pvPortMalloc+0x1a0>)
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	429a      	cmp	r2, r3
 801673c:	d203      	bcs.n	8016746 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801673e:	4b18      	ldr	r3, [pc, #96]	@ (80167a0 <pvPortMalloc+0x198>)
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	4a19      	ldr	r2, [pc, #100]	@ (80167a8 <pvPortMalloc+0x1a0>)
 8016744:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016748:	685a      	ldr	r2, [r3, #4]
 801674a:	4b14      	ldr	r3, [pc, #80]	@ (801679c <pvPortMalloc+0x194>)
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	431a      	orrs	r2, r3
 8016750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016752:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016756:	2200      	movs	r2, #0
 8016758:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801675a:	f7ff f817 	bl	801578c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801675e:	69fb      	ldr	r3, [r7, #28]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d101      	bne.n	8016768 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8016764:	f7eb f988 	bl	8001a78 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016768:	69fb      	ldr	r3, [r7, #28]
 801676a:	f003 0307 	and.w	r3, r3, #7
 801676e:	2b00      	cmp	r3, #0
 8016770:	d00d      	beq.n	801678e <pvPortMalloc+0x186>
	__asm volatile
 8016772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016776:	b672      	cpsid	i
 8016778:	f383 8811 	msr	BASEPRI, r3
 801677c:	f3bf 8f6f 	isb	sy
 8016780:	f3bf 8f4f 	dsb	sy
 8016784:	b662      	cpsie	i
 8016786:	60fb      	str	r3, [r7, #12]
}
 8016788:	bf00      	nop
 801678a:	bf00      	nop
 801678c:	e7fd      	b.n	801678a <pvPortMalloc+0x182>
	return pvReturn;
 801678e:	69fb      	ldr	r3, [r7, #28]
}
 8016790:	4618      	mov	r0, r3
 8016792:	3728      	adds	r7, #40	@ 0x28
 8016794:	46bd      	mov	sp, r7
 8016796:	bd80      	pop	{r7, pc}
 8016798:	20011b54 	.word	0x20011b54
 801679c:	20011b60 	.word	0x20011b60
 80167a0:	20011b58 	.word	0x20011b58
 80167a4:	20011b4c 	.word	0x20011b4c
 80167a8:	20011b5c 	.word	0x20011b5c

080167ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b086      	sub	sp, #24
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d04e      	beq.n	801685c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80167be:	2308      	movs	r3, #8
 80167c0:	425b      	negs	r3, r3
 80167c2:	697a      	ldr	r2, [r7, #20]
 80167c4:	4413      	add	r3, r2
 80167c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80167c8:	697b      	ldr	r3, [r7, #20]
 80167ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80167cc:	693b      	ldr	r3, [r7, #16]
 80167ce:	685a      	ldr	r2, [r3, #4]
 80167d0:	4b24      	ldr	r3, [pc, #144]	@ (8016864 <vPortFree+0xb8>)
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	4013      	ands	r3, r2
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d10d      	bne.n	80167f6 <vPortFree+0x4a>
	__asm volatile
 80167da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167de:	b672      	cpsid	i
 80167e0:	f383 8811 	msr	BASEPRI, r3
 80167e4:	f3bf 8f6f 	isb	sy
 80167e8:	f3bf 8f4f 	dsb	sy
 80167ec:	b662      	cpsie	i
 80167ee:	60fb      	str	r3, [r7, #12]
}
 80167f0:	bf00      	nop
 80167f2:	bf00      	nop
 80167f4:	e7fd      	b.n	80167f2 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80167f6:	693b      	ldr	r3, [r7, #16]
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d00d      	beq.n	801681a <vPortFree+0x6e>
	__asm volatile
 80167fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016802:	b672      	cpsid	i
 8016804:	f383 8811 	msr	BASEPRI, r3
 8016808:	f3bf 8f6f 	isb	sy
 801680c:	f3bf 8f4f 	dsb	sy
 8016810:	b662      	cpsie	i
 8016812:	60bb      	str	r3, [r7, #8]
}
 8016814:	bf00      	nop
 8016816:	bf00      	nop
 8016818:	e7fd      	b.n	8016816 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801681a:	693b      	ldr	r3, [r7, #16]
 801681c:	685a      	ldr	r2, [r3, #4]
 801681e:	4b11      	ldr	r3, [pc, #68]	@ (8016864 <vPortFree+0xb8>)
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	4013      	ands	r3, r2
 8016824:	2b00      	cmp	r3, #0
 8016826:	d019      	beq.n	801685c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016828:	693b      	ldr	r3, [r7, #16]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	2b00      	cmp	r3, #0
 801682e:	d115      	bne.n	801685c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016830:	693b      	ldr	r3, [r7, #16]
 8016832:	685a      	ldr	r2, [r3, #4]
 8016834:	4b0b      	ldr	r3, [pc, #44]	@ (8016864 <vPortFree+0xb8>)
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	43db      	mvns	r3, r3
 801683a:	401a      	ands	r2, r3
 801683c:	693b      	ldr	r3, [r7, #16]
 801683e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016840:	f7fe ff96 	bl	8015770 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016844:	693b      	ldr	r3, [r7, #16]
 8016846:	685a      	ldr	r2, [r3, #4]
 8016848:	4b07      	ldr	r3, [pc, #28]	@ (8016868 <vPortFree+0xbc>)
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	4413      	add	r3, r2
 801684e:	4a06      	ldr	r2, [pc, #24]	@ (8016868 <vPortFree+0xbc>)
 8016850:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016852:	6938      	ldr	r0, [r7, #16]
 8016854:	f000 f86c 	bl	8016930 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8016858:	f7fe ff98 	bl	801578c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801685c:	bf00      	nop
 801685e:	3718      	adds	r7, #24
 8016860:	46bd      	mov	sp, r7
 8016862:	bd80      	pop	{r7, pc}
 8016864:	20011b60 	.word	0x20011b60
 8016868:	20011b58 	.word	0x20011b58

0801686c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801686c:	b480      	push	{r7}
 801686e:	b085      	sub	sp, #20
 8016870:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016872:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8016876:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016878:	4b27      	ldr	r3, [pc, #156]	@ (8016918 <prvHeapInit+0xac>)
 801687a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	f003 0307 	and.w	r3, r3, #7
 8016882:	2b00      	cmp	r3, #0
 8016884:	d00c      	beq.n	80168a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	3307      	adds	r3, #7
 801688a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	f023 0307 	bic.w	r3, r3, #7
 8016892:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016894:	68ba      	ldr	r2, [r7, #8]
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	1ad3      	subs	r3, r2, r3
 801689a:	4a1f      	ldr	r2, [pc, #124]	@ (8016918 <prvHeapInit+0xac>)
 801689c:	4413      	add	r3, r2
 801689e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80168a4:	4a1d      	ldr	r2, [pc, #116]	@ (801691c <prvHeapInit+0xb0>)
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80168aa:	4b1c      	ldr	r3, [pc, #112]	@ (801691c <prvHeapInit+0xb0>)
 80168ac:	2200      	movs	r2, #0
 80168ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	68ba      	ldr	r2, [r7, #8]
 80168b4:	4413      	add	r3, r2
 80168b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80168b8:	2208      	movs	r2, #8
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	1a9b      	subs	r3, r3, r2
 80168be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	f023 0307 	bic.w	r3, r3, #7
 80168c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	4a15      	ldr	r2, [pc, #84]	@ (8016920 <prvHeapInit+0xb4>)
 80168cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80168ce:	4b14      	ldr	r3, [pc, #80]	@ (8016920 <prvHeapInit+0xb4>)
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	2200      	movs	r2, #0
 80168d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80168d6:	4b12      	ldr	r3, [pc, #72]	@ (8016920 <prvHeapInit+0xb4>)
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	2200      	movs	r2, #0
 80168dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80168e2:	683b      	ldr	r3, [r7, #0]
 80168e4:	68fa      	ldr	r2, [r7, #12]
 80168e6:	1ad2      	subs	r2, r2, r3
 80168e8:	683b      	ldr	r3, [r7, #0]
 80168ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80168ec:	4b0c      	ldr	r3, [pc, #48]	@ (8016920 <prvHeapInit+0xb4>)
 80168ee:	681a      	ldr	r2, [r3, #0]
 80168f0:	683b      	ldr	r3, [r7, #0]
 80168f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80168f4:	683b      	ldr	r3, [r7, #0]
 80168f6:	685b      	ldr	r3, [r3, #4]
 80168f8:	4a0a      	ldr	r2, [pc, #40]	@ (8016924 <prvHeapInit+0xb8>)
 80168fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80168fc:	683b      	ldr	r3, [r7, #0]
 80168fe:	685b      	ldr	r3, [r3, #4]
 8016900:	4a09      	ldr	r2, [pc, #36]	@ (8016928 <prvHeapInit+0xbc>)
 8016902:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016904:	4b09      	ldr	r3, [pc, #36]	@ (801692c <prvHeapInit+0xc0>)
 8016906:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801690a:	601a      	str	r2, [r3, #0]
}
 801690c:	bf00      	nop
 801690e:	3714      	adds	r7, #20
 8016910:	46bd      	mov	sp, r7
 8016912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016916:	4770      	bx	lr
 8016918:	20001b4c 	.word	0x20001b4c
 801691c:	20011b4c 	.word	0x20011b4c
 8016920:	20011b54 	.word	0x20011b54
 8016924:	20011b5c 	.word	0x20011b5c
 8016928:	20011b58 	.word	0x20011b58
 801692c:	20011b60 	.word	0x20011b60

08016930 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016930:	b480      	push	{r7}
 8016932:	b085      	sub	sp, #20
 8016934:	af00      	add	r7, sp, #0
 8016936:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016938:	4b28      	ldr	r3, [pc, #160]	@ (80169dc <prvInsertBlockIntoFreeList+0xac>)
 801693a:	60fb      	str	r3, [r7, #12]
 801693c:	e002      	b.n	8016944 <prvInsertBlockIntoFreeList+0x14>
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	60fb      	str	r3, [r7, #12]
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	687a      	ldr	r2, [r7, #4]
 801694a:	429a      	cmp	r2, r3
 801694c:	d8f7      	bhi.n	801693e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	685b      	ldr	r3, [r3, #4]
 8016956:	68ba      	ldr	r2, [r7, #8]
 8016958:	4413      	add	r3, r2
 801695a:	687a      	ldr	r2, [r7, #4]
 801695c:	429a      	cmp	r2, r3
 801695e:	d108      	bne.n	8016972 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	685a      	ldr	r2, [r3, #4]
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	685b      	ldr	r3, [r3, #4]
 8016968:	441a      	add	r2, r3
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	685b      	ldr	r3, [r3, #4]
 801697a:	68ba      	ldr	r2, [r7, #8]
 801697c:	441a      	add	r2, r3
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	429a      	cmp	r2, r3
 8016984:	d118      	bne.n	80169b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	681a      	ldr	r2, [r3, #0]
 801698a:	4b15      	ldr	r3, [pc, #84]	@ (80169e0 <prvInsertBlockIntoFreeList+0xb0>)
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	429a      	cmp	r2, r3
 8016990:	d00d      	beq.n	80169ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	685a      	ldr	r2, [r3, #4]
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	685b      	ldr	r3, [r3, #4]
 801699c:	441a      	add	r2, r3
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	681a      	ldr	r2, [r3, #0]
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	601a      	str	r2, [r3, #0]
 80169ac:	e008      	b.n	80169c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80169ae:	4b0c      	ldr	r3, [pc, #48]	@ (80169e0 <prvInsertBlockIntoFreeList+0xb0>)
 80169b0:	681a      	ldr	r2, [r3, #0]
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	601a      	str	r2, [r3, #0]
 80169b6:	e003      	b.n	80169c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	681a      	ldr	r2, [r3, #0]
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80169c0:	68fa      	ldr	r2, [r7, #12]
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	429a      	cmp	r2, r3
 80169c6:	d002      	beq.n	80169ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	687a      	ldr	r2, [r7, #4]
 80169cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80169ce:	bf00      	nop
 80169d0:	3714      	adds	r7, #20
 80169d2:	46bd      	mov	sp, r7
 80169d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d8:	4770      	bx	lr
 80169da:	bf00      	nop
 80169dc:	20011b4c 	.word	0x20011b4c
 80169e0:	20011b54 	.word	0x20011b54

080169e4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b082      	sub	sp, #8
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80169f2:	4618      	mov	r0, r3
 80169f4:	f7fa fc8c 	bl	8011310 <USBH_LL_IncTimer>
}
 80169f8:	bf00      	nop
 80169fa:	3708      	adds	r7, #8
 80169fc:	46bd      	mov	sp, r7
 80169fe:	bd80      	pop	{r7, pc}

08016a00 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8016a00:	b580      	push	{r7, lr}
 8016a02:	b082      	sub	sp, #8
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8016a0e:	4618      	mov	r0, r3
 8016a10:	f7fa fccc 	bl	80113ac <USBH_LL_Connect>
}
 8016a14:	bf00      	nop
 8016a16:	3708      	adds	r7, #8
 8016a18:	46bd      	mov	sp, r7
 8016a1a:	bd80      	pop	{r7, pc}

08016a1c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b082      	sub	sp, #8
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	f7fa fcd9 	bl	80113e2 <USBH_LL_Disconnect>
}
 8016a30:	bf00      	nop
 8016a32:	3708      	adds	r7, #8
 8016a34:	46bd      	mov	sp, r7
 8016a36:	bd80      	pop	{r7, pc}

08016a38 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b082      	sub	sp, #8
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	6078      	str	r0, [r7, #4]
 8016a40:	460b      	mov	r3, r1
 8016a42:	70fb      	strb	r3, [r7, #3]
 8016a44:	4613      	mov	r3, r2
 8016a46:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8016a4e:	4618      	mov	r0, r3
 8016a50:	f7fa fd18 	bl	8011484 <USBH_LL_NotifyURBChange>
#endif
}
 8016a54:	bf00      	nop
 8016a56:	3708      	adds	r7, #8
 8016a58:	46bd      	mov	sp, r7
 8016a5a:	bd80      	pop	{r7, pc}

08016a5c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b082      	sub	sp, #8
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	f7fa fc7a 	bl	8011364 <USBH_LL_PortEnabled>
}
 8016a70:	bf00      	nop
 8016a72:	3708      	adds	r7, #8
 8016a74:	46bd      	mov	sp, r7
 8016a76:	bd80      	pop	{r7, pc}

08016a78 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b082      	sub	sp, #8
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8016a86:	4618      	mov	r0, r3
 8016a88:	f7fa fc7e 	bl	8011388 <USBH_LL_PortDisabled>
}
 8016a8c:	bf00      	nop
 8016a8e:	3708      	adds	r7, #8
 8016a90:	46bd      	mov	sp, r7
 8016a92:	bd80      	pop	{r7, pc}

08016a94 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b084      	sub	sp, #16
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8016aaa:	4618      	mov	r0, r3
 8016aac:	f7f1 fa11 	bl	8007ed2 <HAL_HCD_Stop>
 8016ab0:	4603      	mov	r3, r0
 8016ab2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8016ab4:	7bfb      	ldrb	r3, [r7, #15]
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	f000 f808 	bl	8016acc <USBH_Get_USB_Status>
 8016abc:	4603      	mov	r3, r0
 8016abe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ac0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	3710      	adds	r7, #16
 8016ac6:	46bd      	mov	sp, r7
 8016ac8:	bd80      	pop	{r7, pc}
	...

08016acc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016acc:	b480      	push	{r7}
 8016ace:	b085      	sub	sp, #20
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016ada:	79fb      	ldrb	r3, [r7, #7]
 8016adc:	2b03      	cmp	r3, #3
 8016ade:	d817      	bhi.n	8016b10 <USBH_Get_USB_Status+0x44>
 8016ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8016ae8 <USBH_Get_USB_Status+0x1c>)
 8016ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ae6:	bf00      	nop
 8016ae8:	08016af9 	.word	0x08016af9
 8016aec:	08016aff 	.word	0x08016aff
 8016af0:	08016b05 	.word	0x08016b05
 8016af4:	08016b0b 	.word	0x08016b0b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8016af8:	2300      	movs	r3, #0
 8016afa:	73fb      	strb	r3, [r7, #15]
    break;
 8016afc:	e00b      	b.n	8016b16 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8016afe:	2302      	movs	r3, #2
 8016b00:	73fb      	strb	r3, [r7, #15]
    break;
 8016b02:	e008      	b.n	8016b16 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8016b04:	2301      	movs	r3, #1
 8016b06:	73fb      	strb	r3, [r7, #15]
    break;
 8016b08:	e005      	b.n	8016b16 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8016b0a:	2302      	movs	r3, #2
 8016b0c:	73fb      	strb	r3, [r7, #15]
    break;
 8016b0e:	e002      	b.n	8016b16 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8016b10:	2302      	movs	r3, #2
 8016b12:	73fb      	strb	r3, [r7, #15]
    break;
 8016b14:	bf00      	nop
  }
  return usb_status;
 8016b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b18:	4618      	mov	r0, r3
 8016b1a:	3714      	adds	r7, #20
 8016b1c:	46bd      	mov	sp, r7
 8016b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b22:	4770      	bx	lr

08016b24 <sbrk_aligned>:
 8016b24:	b570      	push	{r4, r5, r6, lr}
 8016b26:	4e0f      	ldr	r6, [pc, #60]	@ (8016b64 <sbrk_aligned+0x40>)
 8016b28:	460c      	mov	r4, r1
 8016b2a:	6831      	ldr	r1, [r6, #0]
 8016b2c:	4605      	mov	r5, r0
 8016b2e:	b911      	cbnz	r1, 8016b36 <sbrk_aligned+0x12>
 8016b30:	f000 fab8 	bl	80170a4 <_sbrk_r>
 8016b34:	6030      	str	r0, [r6, #0]
 8016b36:	4621      	mov	r1, r4
 8016b38:	4628      	mov	r0, r5
 8016b3a:	f000 fab3 	bl	80170a4 <_sbrk_r>
 8016b3e:	1c43      	adds	r3, r0, #1
 8016b40:	d103      	bne.n	8016b4a <sbrk_aligned+0x26>
 8016b42:	f04f 34ff 	mov.w	r4, #4294967295
 8016b46:	4620      	mov	r0, r4
 8016b48:	bd70      	pop	{r4, r5, r6, pc}
 8016b4a:	1cc4      	adds	r4, r0, #3
 8016b4c:	f024 0403 	bic.w	r4, r4, #3
 8016b50:	42a0      	cmp	r0, r4
 8016b52:	d0f8      	beq.n	8016b46 <sbrk_aligned+0x22>
 8016b54:	1a21      	subs	r1, r4, r0
 8016b56:	4628      	mov	r0, r5
 8016b58:	f000 faa4 	bl	80170a4 <_sbrk_r>
 8016b5c:	3001      	adds	r0, #1
 8016b5e:	d1f2      	bne.n	8016b46 <sbrk_aligned+0x22>
 8016b60:	e7ef      	b.n	8016b42 <sbrk_aligned+0x1e>
 8016b62:	bf00      	nop
 8016b64:	20011f44 	.word	0x20011f44

08016b68 <_malloc_r>:
 8016b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b6c:	1ccd      	adds	r5, r1, #3
 8016b6e:	f025 0503 	bic.w	r5, r5, #3
 8016b72:	3508      	adds	r5, #8
 8016b74:	2d0c      	cmp	r5, #12
 8016b76:	bf38      	it	cc
 8016b78:	250c      	movcc	r5, #12
 8016b7a:	2d00      	cmp	r5, #0
 8016b7c:	4606      	mov	r6, r0
 8016b7e:	db01      	blt.n	8016b84 <_malloc_r+0x1c>
 8016b80:	42a9      	cmp	r1, r5
 8016b82:	d904      	bls.n	8016b8e <_malloc_r+0x26>
 8016b84:	230c      	movs	r3, #12
 8016b86:	6033      	str	r3, [r6, #0]
 8016b88:	2000      	movs	r0, #0
 8016b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016c64 <_malloc_r+0xfc>
 8016b92:	f000 f869 	bl	8016c68 <__malloc_lock>
 8016b96:	f8d8 3000 	ldr.w	r3, [r8]
 8016b9a:	461c      	mov	r4, r3
 8016b9c:	bb44      	cbnz	r4, 8016bf0 <_malloc_r+0x88>
 8016b9e:	4629      	mov	r1, r5
 8016ba0:	4630      	mov	r0, r6
 8016ba2:	f7ff ffbf 	bl	8016b24 <sbrk_aligned>
 8016ba6:	1c43      	adds	r3, r0, #1
 8016ba8:	4604      	mov	r4, r0
 8016baa:	d158      	bne.n	8016c5e <_malloc_r+0xf6>
 8016bac:	f8d8 4000 	ldr.w	r4, [r8]
 8016bb0:	4627      	mov	r7, r4
 8016bb2:	2f00      	cmp	r7, #0
 8016bb4:	d143      	bne.n	8016c3e <_malloc_r+0xd6>
 8016bb6:	2c00      	cmp	r4, #0
 8016bb8:	d04b      	beq.n	8016c52 <_malloc_r+0xea>
 8016bba:	6823      	ldr	r3, [r4, #0]
 8016bbc:	4639      	mov	r1, r7
 8016bbe:	4630      	mov	r0, r6
 8016bc0:	eb04 0903 	add.w	r9, r4, r3
 8016bc4:	f000 fa6e 	bl	80170a4 <_sbrk_r>
 8016bc8:	4581      	cmp	r9, r0
 8016bca:	d142      	bne.n	8016c52 <_malloc_r+0xea>
 8016bcc:	6821      	ldr	r1, [r4, #0]
 8016bce:	1a6d      	subs	r5, r5, r1
 8016bd0:	4629      	mov	r1, r5
 8016bd2:	4630      	mov	r0, r6
 8016bd4:	f7ff ffa6 	bl	8016b24 <sbrk_aligned>
 8016bd8:	3001      	adds	r0, #1
 8016bda:	d03a      	beq.n	8016c52 <_malloc_r+0xea>
 8016bdc:	6823      	ldr	r3, [r4, #0]
 8016bde:	442b      	add	r3, r5
 8016be0:	6023      	str	r3, [r4, #0]
 8016be2:	f8d8 3000 	ldr.w	r3, [r8]
 8016be6:	685a      	ldr	r2, [r3, #4]
 8016be8:	bb62      	cbnz	r2, 8016c44 <_malloc_r+0xdc>
 8016bea:	f8c8 7000 	str.w	r7, [r8]
 8016bee:	e00f      	b.n	8016c10 <_malloc_r+0xa8>
 8016bf0:	6822      	ldr	r2, [r4, #0]
 8016bf2:	1b52      	subs	r2, r2, r5
 8016bf4:	d420      	bmi.n	8016c38 <_malloc_r+0xd0>
 8016bf6:	2a0b      	cmp	r2, #11
 8016bf8:	d917      	bls.n	8016c2a <_malloc_r+0xc2>
 8016bfa:	1961      	adds	r1, r4, r5
 8016bfc:	42a3      	cmp	r3, r4
 8016bfe:	6025      	str	r5, [r4, #0]
 8016c00:	bf18      	it	ne
 8016c02:	6059      	strne	r1, [r3, #4]
 8016c04:	6863      	ldr	r3, [r4, #4]
 8016c06:	bf08      	it	eq
 8016c08:	f8c8 1000 	streq.w	r1, [r8]
 8016c0c:	5162      	str	r2, [r4, r5]
 8016c0e:	604b      	str	r3, [r1, #4]
 8016c10:	4630      	mov	r0, r6
 8016c12:	f000 f82f 	bl	8016c74 <__malloc_unlock>
 8016c16:	f104 000b 	add.w	r0, r4, #11
 8016c1a:	1d23      	adds	r3, r4, #4
 8016c1c:	f020 0007 	bic.w	r0, r0, #7
 8016c20:	1ac2      	subs	r2, r0, r3
 8016c22:	bf1c      	itt	ne
 8016c24:	1a1b      	subne	r3, r3, r0
 8016c26:	50a3      	strne	r3, [r4, r2]
 8016c28:	e7af      	b.n	8016b8a <_malloc_r+0x22>
 8016c2a:	6862      	ldr	r2, [r4, #4]
 8016c2c:	42a3      	cmp	r3, r4
 8016c2e:	bf0c      	ite	eq
 8016c30:	f8c8 2000 	streq.w	r2, [r8]
 8016c34:	605a      	strne	r2, [r3, #4]
 8016c36:	e7eb      	b.n	8016c10 <_malloc_r+0xa8>
 8016c38:	4623      	mov	r3, r4
 8016c3a:	6864      	ldr	r4, [r4, #4]
 8016c3c:	e7ae      	b.n	8016b9c <_malloc_r+0x34>
 8016c3e:	463c      	mov	r4, r7
 8016c40:	687f      	ldr	r7, [r7, #4]
 8016c42:	e7b6      	b.n	8016bb2 <_malloc_r+0x4a>
 8016c44:	461a      	mov	r2, r3
 8016c46:	685b      	ldr	r3, [r3, #4]
 8016c48:	42a3      	cmp	r3, r4
 8016c4a:	d1fb      	bne.n	8016c44 <_malloc_r+0xdc>
 8016c4c:	2300      	movs	r3, #0
 8016c4e:	6053      	str	r3, [r2, #4]
 8016c50:	e7de      	b.n	8016c10 <_malloc_r+0xa8>
 8016c52:	230c      	movs	r3, #12
 8016c54:	6033      	str	r3, [r6, #0]
 8016c56:	4630      	mov	r0, r6
 8016c58:	f000 f80c 	bl	8016c74 <__malloc_unlock>
 8016c5c:	e794      	b.n	8016b88 <_malloc_r+0x20>
 8016c5e:	6005      	str	r5, [r0, #0]
 8016c60:	e7d6      	b.n	8016c10 <_malloc_r+0xa8>
 8016c62:	bf00      	nop
 8016c64:	20011f48 	.word	0x20011f48

08016c68 <__malloc_lock>:
 8016c68:	4801      	ldr	r0, [pc, #4]	@ (8016c70 <__malloc_lock+0x8>)
 8016c6a:	f000 ba68 	b.w	801713e <__retarget_lock_acquire_recursive>
 8016c6e:	bf00      	nop
 8016c70:	2001208c 	.word	0x2001208c

08016c74 <__malloc_unlock>:
 8016c74:	4801      	ldr	r0, [pc, #4]	@ (8016c7c <__malloc_unlock+0x8>)
 8016c76:	f000 ba63 	b.w	8017140 <__retarget_lock_release_recursive>
 8016c7a:	bf00      	nop
 8016c7c:	2001208c 	.word	0x2001208c

08016c80 <std>:
 8016c80:	2300      	movs	r3, #0
 8016c82:	b510      	push	{r4, lr}
 8016c84:	4604      	mov	r4, r0
 8016c86:	e9c0 3300 	strd	r3, r3, [r0]
 8016c8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016c8e:	6083      	str	r3, [r0, #8]
 8016c90:	8181      	strh	r1, [r0, #12]
 8016c92:	6643      	str	r3, [r0, #100]	@ 0x64
 8016c94:	81c2      	strh	r2, [r0, #14]
 8016c96:	6183      	str	r3, [r0, #24]
 8016c98:	4619      	mov	r1, r3
 8016c9a:	2208      	movs	r2, #8
 8016c9c:	305c      	adds	r0, #92	@ 0x5c
 8016c9e:	f000 f99b 	bl	8016fd8 <memset>
 8016ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8016cd8 <std+0x58>)
 8016ca4:	6263      	str	r3, [r4, #36]	@ 0x24
 8016ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8016cdc <std+0x5c>)
 8016ca8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016caa:	4b0d      	ldr	r3, [pc, #52]	@ (8016ce0 <std+0x60>)
 8016cac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016cae:	4b0d      	ldr	r3, [pc, #52]	@ (8016ce4 <std+0x64>)
 8016cb0:	6323      	str	r3, [r4, #48]	@ 0x30
 8016cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8016ce8 <std+0x68>)
 8016cb4:	6224      	str	r4, [r4, #32]
 8016cb6:	429c      	cmp	r4, r3
 8016cb8:	d006      	beq.n	8016cc8 <std+0x48>
 8016cba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016cbe:	4294      	cmp	r4, r2
 8016cc0:	d002      	beq.n	8016cc8 <std+0x48>
 8016cc2:	33d0      	adds	r3, #208	@ 0xd0
 8016cc4:	429c      	cmp	r4, r3
 8016cc6:	d105      	bne.n	8016cd4 <std+0x54>
 8016cc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016cd0:	f000 ba34 	b.w	801713c <__retarget_lock_init_recursive>
 8016cd4:	bd10      	pop	{r4, pc}
 8016cd6:	bf00      	nop
 8016cd8:	08016ed9 	.word	0x08016ed9
 8016cdc:	08016efb 	.word	0x08016efb
 8016ce0:	08016f33 	.word	0x08016f33
 8016ce4:	08016f57 	.word	0x08016f57
 8016ce8:	20011f4c 	.word	0x20011f4c

08016cec <stdio_exit_handler>:
 8016cec:	4a02      	ldr	r2, [pc, #8]	@ (8016cf8 <stdio_exit_handler+0xc>)
 8016cee:	4903      	ldr	r1, [pc, #12]	@ (8016cfc <stdio_exit_handler+0x10>)
 8016cf0:	4803      	ldr	r0, [pc, #12]	@ (8016d00 <stdio_exit_handler+0x14>)
 8016cf2:	f000 b869 	b.w	8016dc8 <_fwalk_sglue>
 8016cf6:	bf00      	nop
 8016cf8:	20000074 	.word	0x20000074
 8016cfc:	08017b49 	.word	0x08017b49
 8016d00:	20000084 	.word	0x20000084

08016d04 <cleanup_stdio>:
 8016d04:	6841      	ldr	r1, [r0, #4]
 8016d06:	4b0c      	ldr	r3, [pc, #48]	@ (8016d38 <cleanup_stdio+0x34>)
 8016d08:	4299      	cmp	r1, r3
 8016d0a:	b510      	push	{r4, lr}
 8016d0c:	4604      	mov	r4, r0
 8016d0e:	d001      	beq.n	8016d14 <cleanup_stdio+0x10>
 8016d10:	f000 ff1a 	bl	8017b48 <_fflush_r>
 8016d14:	68a1      	ldr	r1, [r4, #8]
 8016d16:	4b09      	ldr	r3, [pc, #36]	@ (8016d3c <cleanup_stdio+0x38>)
 8016d18:	4299      	cmp	r1, r3
 8016d1a:	d002      	beq.n	8016d22 <cleanup_stdio+0x1e>
 8016d1c:	4620      	mov	r0, r4
 8016d1e:	f000 ff13 	bl	8017b48 <_fflush_r>
 8016d22:	68e1      	ldr	r1, [r4, #12]
 8016d24:	4b06      	ldr	r3, [pc, #24]	@ (8016d40 <cleanup_stdio+0x3c>)
 8016d26:	4299      	cmp	r1, r3
 8016d28:	d004      	beq.n	8016d34 <cleanup_stdio+0x30>
 8016d2a:	4620      	mov	r0, r4
 8016d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d30:	f000 bf0a 	b.w	8017b48 <_fflush_r>
 8016d34:	bd10      	pop	{r4, pc}
 8016d36:	bf00      	nop
 8016d38:	20011f4c 	.word	0x20011f4c
 8016d3c:	20011fb4 	.word	0x20011fb4
 8016d40:	2001201c 	.word	0x2001201c

08016d44 <global_stdio_init.part.0>:
 8016d44:	b510      	push	{r4, lr}
 8016d46:	4b0b      	ldr	r3, [pc, #44]	@ (8016d74 <global_stdio_init.part.0+0x30>)
 8016d48:	4c0b      	ldr	r4, [pc, #44]	@ (8016d78 <global_stdio_init.part.0+0x34>)
 8016d4a:	4a0c      	ldr	r2, [pc, #48]	@ (8016d7c <global_stdio_init.part.0+0x38>)
 8016d4c:	601a      	str	r2, [r3, #0]
 8016d4e:	4620      	mov	r0, r4
 8016d50:	2200      	movs	r2, #0
 8016d52:	2104      	movs	r1, #4
 8016d54:	f7ff ff94 	bl	8016c80 <std>
 8016d58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016d5c:	2201      	movs	r2, #1
 8016d5e:	2109      	movs	r1, #9
 8016d60:	f7ff ff8e 	bl	8016c80 <std>
 8016d64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016d68:	2202      	movs	r2, #2
 8016d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d6e:	2112      	movs	r1, #18
 8016d70:	f7ff bf86 	b.w	8016c80 <std>
 8016d74:	20012084 	.word	0x20012084
 8016d78:	20011f4c 	.word	0x20011f4c
 8016d7c:	08016ced 	.word	0x08016ced

08016d80 <__sfp_lock_acquire>:
 8016d80:	4801      	ldr	r0, [pc, #4]	@ (8016d88 <__sfp_lock_acquire+0x8>)
 8016d82:	f000 b9dc 	b.w	801713e <__retarget_lock_acquire_recursive>
 8016d86:	bf00      	nop
 8016d88:	2001208d 	.word	0x2001208d

08016d8c <__sfp_lock_release>:
 8016d8c:	4801      	ldr	r0, [pc, #4]	@ (8016d94 <__sfp_lock_release+0x8>)
 8016d8e:	f000 b9d7 	b.w	8017140 <__retarget_lock_release_recursive>
 8016d92:	bf00      	nop
 8016d94:	2001208d 	.word	0x2001208d

08016d98 <__sinit>:
 8016d98:	b510      	push	{r4, lr}
 8016d9a:	4604      	mov	r4, r0
 8016d9c:	f7ff fff0 	bl	8016d80 <__sfp_lock_acquire>
 8016da0:	6a23      	ldr	r3, [r4, #32]
 8016da2:	b11b      	cbz	r3, 8016dac <__sinit+0x14>
 8016da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016da8:	f7ff bff0 	b.w	8016d8c <__sfp_lock_release>
 8016dac:	4b04      	ldr	r3, [pc, #16]	@ (8016dc0 <__sinit+0x28>)
 8016dae:	6223      	str	r3, [r4, #32]
 8016db0:	4b04      	ldr	r3, [pc, #16]	@ (8016dc4 <__sinit+0x2c>)
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d1f5      	bne.n	8016da4 <__sinit+0xc>
 8016db8:	f7ff ffc4 	bl	8016d44 <global_stdio_init.part.0>
 8016dbc:	e7f2      	b.n	8016da4 <__sinit+0xc>
 8016dbe:	bf00      	nop
 8016dc0:	08016d05 	.word	0x08016d05
 8016dc4:	20012084 	.word	0x20012084

08016dc8 <_fwalk_sglue>:
 8016dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016dcc:	4607      	mov	r7, r0
 8016dce:	4688      	mov	r8, r1
 8016dd0:	4614      	mov	r4, r2
 8016dd2:	2600      	movs	r6, #0
 8016dd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016dd8:	f1b9 0901 	subs.w	r9, r9, #1
 8016ddc:	d505      	bpl.n	8016dea <_fwalk_sglue+0x22>
 8016dde:	6824      	ldr	r4, [r4, #0]
 8016de0:	2c00      	cmp	r4, #0
 8016de2:	d1f7      	bne.n	8016dd4 <_fwalk_sglue+0xc>
 8016de4:	4630      	mov	r0, r6
 8016de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016dea:	89ab      	ldrh	r3, [r5, #12]
 8016dec:	2b01      	cmp	r3, #1
 8016dee:	d907      	bls.n	8016e00 <_fwalk_sglue+0x38>
 8016df0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016df4:	3301      	adds	r3, #1
 8016df6:	d003      	beq.n	8016e00 <_fwalk_sglue+0x38>
 8016df8:	4629      	mov	r1, r5
 8016dfa:	4638      	mov	r0, r7
 8016dfc:	47c0      	blx	r8
 8016dfe:	4306      	orrs	r6, r0
 8016e00:	3568      	adds	r5, #104	@ 0x68
 8016e02:	e7e9      	b.n	8016dd8 <_fwalk_sglue+0x10>

08016e04 <iprintf>:
 8016e04:	b40f      	push	{r0, r1, r2, r3}
 8016e06:	b507      	push	{r0, r1, r2, lr}
 8016e08:	4906      	ldr	r1, [pc, #24]	@ (8016e24 <iprintf+0x20>)
 8016e0a:	ab04      	add	r3, sp, #16
 8016e0c:	6808      	ldr	r0, [r1, #0]
 8016e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e12:	6881      	ldr	r1, [r0, #8]
 8016e14:	9301      	str	r3, [sp, #4]
 8016e16:	f000 fb6f 	bl	80174f8 <_vfiprintf_r>
 8016e1a:	b003      	add	sp, #12
 8016e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016e20:	b004      	add	sp, #16
 8016e22:	4770      	bx	lr
 8016e24:	20000080 	.word	0x20000080

08016e28 <sniprintf>:
 8016e28:	b40c      	push	{r2, r3}
 8016e2a:	b530      	push	{r4, r5, lr}
 8016e2c:	4b18      	ldr	r3, [pc, #96]	@ (8016e90 <sniprintf+0x68>)
 8016e2e:	1e0c      	subs	r4, r1, #0
 8016e30:	681d      	ldr	r5, [r3, #0]
 8016e32:	b09d      	sub	sp, #116	@ 0x74
 8016e34:	da08      	bge.n	8016e48 <sniprintf+0x20>
 8016e36:	238b      	movs	r3, #139	@ 0x8b
 8016e38:	602b      	str	r3, [r5, #0]
 8016e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8016e3e:	b01d      	add	sp, #116	@ 0x74
 8016e40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e44:	b002      	add	sp, #8
 8016e46:	4770      	bx	lr
 8016e48:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016e4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016e50:	f04f 0300 	mov.w	r3, #0
 8016e54:	931b      	str	r3, [sp, #108]	@ 0x6c
 8016e56:	bf14      	ite	ne
 8016e58:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016e5c:	4623      	moveq	r3, r4
 8016e5e:	9304      	str	r3, [sp, #16]
 8016e60:	9307      	str	r3, [sp, #28]
 8016e62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016e66:	9002      	str	r0, [sp, #8]
 8016e68:	9006      	str	r0, [sp, #24]
 8016e6a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016e6e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016e70:	ab21      	add	r3, sp, #132	@ 0x84
 8016e72:	a902      	add	r1, sp, #8
 8016e74:	4628      	mov	r0, r5
 8016e76:	9301      	str	r3, [sp, #4]
 8016e78:	f000 fa18 	bl	80172ac <_svfiprintf_r>
 8016e7c:	1c43      	adds	r3, r0, #1
 8016e7e:	bfbc      	itt	lt
 8016e80:	238b      	movlt	r3, #139	@ 0x8b
 8016e82:	602b      	strlt	r3, [r5, #0]
 8016e84:	2c00      	cmp	r4, #0
 8016e86:	d0da      	beq.n	8016e3e <sniprintf+0x16>
 8016e88:	9b02      	ldr	r3, [sp, #8]
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	701a      	strb	r2, [r3, #0]
 8016e8e:	e7d6      	b.n	8016e3e <sniprintf+0x16>
 8016e90:	20000080 	.word	0x20000080

08016e94 <siprintf>:
 8016e94:	b40e      	push	{r1, r2, r3}
 8016e96:	b510      	push	{r4, lr}
 8016e98:	b09d      	sub	sp, #116	@ 0x74
 8016e9a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8016e9c:	9002      	str	r0, [sp, #8]
 8016e9e:	9006      	str	r0, [sp, #24]
 8016ea0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016ea4:	480a      	ldr	r0, [pc, #40]	@ (8016ed0 <siprintf+0x3c>)
 8016ea6:	9107      	str	r1, [sp, #28]
 8016ea8:	9104      	str	r1, [sp, #16]
 8016eaa:	490a      	ldr	r1, [pc, #40]	@ (8016ed4 <siprintf+0x40>)
 8016eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8016eb0:	9105      	str	r1, [sp, #20]
 8016eb2:	2400      	movs	r4, #0
 8016eb4:	a902      	add	r1, sp, #8
 8016eb6:	6800      	ldr	r0, [r0, #0]
 8016eb8:	9301      	str	r3, [sp, #4]
 8016eba:	941b      	str	r4, [sp, #108]	@ 0x6c
 8016ebc:	f000 f9f6 	bl	80172ac <_svfiprintf_r>
 8016ec0:	9b02      	ldr	r3, [sp, #8]
 8016ec2:	701c      	strb	r4, [r3, #0]
 8016ec4:	b01d      	add	sp, #116	@ 0x74
 8016ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016eca:	b003      	add	sp, #12
 8016ecc:	4770      	bx	lr
 8016ece:	bf00      	nop
 8016ed0:	20000080 	.word	0x20000080
 8016ed4:	ffff0208 	.word	0xffff0208

08016ed8 <__sread>:
 8016ed8:	b510      	push	{r4, lr}
 8016eda:	460c      	mov	r4, r1
 8016edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ee0:	f000 f8ce 	bl	8017080 <_read_r>
 8016ee4:	2800      	cmp	r0, #0
 8016ee6:	bfab      	itete	ge
 8016ee8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016eea:	89a3      	ldrhlt	r3, [r4, #12]
 8016eec:	181b      	addge	r3, r3, r0
 8016eee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016ef2:	bfac      	ite	ge
 8016ef4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016ef6:	81a3      	strhlt	r3, [r4, #12]
 8016ef8:	bd10      	pop	{r4, pc}

08016efa <__swrite>:
 8016efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016efe:	461f      	mov	r7, r3
 8016f00:	898b      	ldrh	r3, [r1, #12]
 8016f02:	05db      	lsls	r3, r3, #23
 8016f04:	4605      	mov	r5, r0
 8016f06:	460c      	mov	r4, r1
 8016f08:	4616      	mov	r6, r2
 8016f0a:	d505      	bpl.n	8016f18 <__swrite+0x1e>
 8016f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f10:	2302      	movs	r3, #2
 8016f12:	2200      	movs	r2, #0
 8016f14:	f000 f8a2 	bl	801705c <_lseek_r>
 8016f18:	89a3      	ldrh	r3, [r4, #12]
 8016f1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016f22:	81a3      	strh	r3, [r4, #12]
 8016f24:	4632      	mov	r2, r6
 8016f26:	463b      	mov	r3, r7
 8016f28:	4628      	mov	r0, r5
 8016f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f2e:	f000 b8c9 	b.w	80170c4 <_write_r>

08016f32 <__sseek>:
 8016f32:	b510      	push	{r4, lr}
 8016f34:	460c      	mov	r4, r1
 8016f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f3a:	f000 f88f 	bl	801705c <_lseek_r>
 8016f3e:	1c43      	adds	r3, r0, #1
 8016f40:	89a3      	ldrh	r3, [r4, #12]
 8016f42:	bf15      	itete	ne
 8016f44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016f46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016f4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016f4e:	81a3      	strheq	r3, [r4, #12]
 8016f50:	bf18      	it	ne
 8016f52:	81a3      	strhne	r3, [r4, #12]
 8016f54:	bd10      	pop	{r4, pc}

08016f56 <__sclose>:
 8016f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f5a:	f000 b86f 	b.w	801703c <_close_r>

08016f5e <_vsniprintf_r>:
 8016f5e:	b530      	push	{r4, r5, lr}
 8016f60:	4614      	mov	r4, r2
 8016f62:	2c00      	cmp	r4, #0
 8016f64:	b09b      	sub	sp, #108	@ 0x6c
 8016f66:	4605      	mov	r5, r0
 8016f68:	461a      	mov	r2, r3
 8016f6a:	da05      	bge.n	8016f78 <_vsniprintf_r+0x1a>
 8016f6c:	238b      	movs	r3, #139	@ 0x8b
 8016f6e:	6003      	str	r3, [r0, #0]
 8016f70:	f04f 30ff 	mov.w	r0, #4294967295
 8016f74:	b01b      	add	sp, #108	@ 0x6c
 8016f76:	bd30      	pop	{r4, r5, pc}
 8016f78:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016f7c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016f80:	f04f 0300 	mov.w	r3, #0
 8016f84:	9319      	str	r3, [sp, #100]	@ 0x64
 8016f86:	bf14      	ite	ne
 8016f88:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016f8c:	4623      	moveq	r3, r4
 8016f8e:	9302      	str	r3, [sp, #8]
 8016f90:	9305      	str	r3, [sp, #20]
 8016f92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016f96:	9100      	str	r1, [sp, #0]
 8016f98:	9104      	str	r1, [sp, #16]
 8016f9a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016f9e:	4669      	mov	r1, sp
 8016fa0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016fa2:	f000 f983 	bl	80172ac <_svfiprintf_r>
 8016fa6:	1c43      	adds	r3, r0, #1
 8016fa8:	bfbc      	itt	lt
 8016faa:	238b      	movlt	r3, #139	@ 0x8b
 8016fac:	602b      	strlt	r3, [r5, #0]
 8016fae:	2c00      	cmp	r4, #0
 8016fb0:	d0e0      	beq.n	8016f74 <_vsniprintf_r+0x16>
 8016fb2:	9b00      	ldr	r3, [sp, #0]
 8016fb4:	2200      	movs	r2, #0
 8016fb6:	701a      	strb	r2, [r3, #0]
 8016fb8:	e7dc      	b.n	8016f74 <_vsniprintf_r+0x16>
	...

08016fbc <vsniprintf>:
 8016fbc:	b507      	push	{r0, r1, r2, lr}
 8016fbe:	9300      	str	r3, [sp, #0]
 8016fc0:	4613      	mov	r3, r2
 8016fc2:	460a      	mov	r2, r1
 8016fc4:	4601      	mov	r1, r0
 8016fc6:	4803      	ldr	r0, [pc, #12]	@ (8016fd4 <vsniprintf+0x18>)
 8016fc8:	6800      	ldr	r0, [r0, #0]
 8016fca:	f7ff ffc8 	bl	8016f5e <_vsniprintf_r>
 8016fce:	b003      	add	sp, #12
 8016fd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8016fd4:	20000080 	.word	0x20000080

08016fd8 <memset>:
 8016fd8:	4402      	add	r2, r0
 8016fda:	4603      	mov	r3, r0
 8016fdc:	4293      	cmp	r3, r2
 8016fde:	d100      	bne.n	8016fe2 <memset+0xa>
 8016fe0:	4770      	bx	lr
 8016fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8016fe6:	e7f9      	b.n	8016fdc <memset+0x4>

08016fe8 <strncpy>:
 8016fe8:	b510      	push	{r4, lr}
 8016fea:	3901      	subs	r1, #1
 8016fec:	4603      	mov	r3, r0
 8016fee:	b132      	cbz	r2, 8016ffe <strncpy+0x16>
 8016ff0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016ff4:	f803 4b01 	strb.w	r4, [r3], #1
 8016ff8:	3a01      	subs	r2, #1
 8016ffa:	2c00      	cmp	r4, #0
 8016ffc:	d1f7      	bne.n	8016fee <strncpy+0x6>
 8016ffe:	441a      	add	r2, r3
 8017000:	2100      	movs	r1, #0
 8017002:	4293      	cmp	r3, r2
 8017004:	d100      	bne.n	8017008 <strncpy+0x20>
 8017006:	bd10      	pop	{r4, pc}
 8017008:	f803 1b01 	strb.w	r1, [r3], #1
 801700c:	e7f9      	b.n	8017002 <strncpy+0x1a>

0801700e <strstr>:
 801700e:	780a      	ldrb	r2, [r1, #0]
 8017010:	b570      	push	{r4, r5, r6, lr}
 8017012:	b96a      	cbnz	r2, 8017030 <strstr+0x22>
 8017014:	bd70      	pop	{r4, r5, r6, pc}
 8017016:	429a      	cmp	r2, r3
 8017018:	d109      	bne.n	801702e <strstr+0x20>
 801701a:	460c      	mov	r4, r1
 801701c:	4605      	mov	r5, r0
 801701e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017022:	2b00      	cmp	r3, #0
 8017024:	d0f6      	beq.n	8017014 <strstr+0x6>
 8017026:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801702a:	429e      	cmp	r6, r3
 801702c:	d0f7      	beq.n	801701e <strstr+0x10>
 801702e:	3001      	adds	r0, #1
 8017030:	7803      	ldrb	r3, [r0, #0]
 8017032:	2b00      	cmp	r3, #0
 8017034:	d1ef      	bne.n	8017016 <strstr+0x8>
 8017036:	4618      	mov	r0, r3
 8017038:	e7ec      	b.n	8017014 <strstr+0x6>
	...

0801703c <_close_r>:
 801703c:	b538      	push	{r3, r4, r5, lr}
 801703e:	4d06      	ldr	r5, [pc, #24]	@ (8017058 <_close_r+0x1c>)
 8017040:	2300      	movs	r3, #0
 8017042:	4604      	mov	r4, r0
 8017044:	4608      	mov	r0, r1
 8017046:	602b      	str	r3, [r5, #0]
 8017048:	f7ed fef5 	bl	8004e36 <_close>
 801704c:	1c43      	adds	r3, r0, #1
 801704e:	d102      	bne.n	8017056 <_close_r+0x1a>
 8017050:	682b      	ldr	r3, [r5, #0]
 8017052:	b103      	cbz	r3, 8017056 <_close_r+0x1a>
 8017054:	6023      	str	r3, [r4, #0]
 8017056:	bd38      	pop	{r3, r4, r5, pc}
 8017058:	20012088 	.word	0x20012088

0801705c <_lseek_r>:
 801705c:	b538      	push	{r3, r4, r5, lr}
 801705e:	4d07      	ldr	r5, [pc, #28]	@ (801707c <_lseek_r+0x20>)
 8017060:	4604      	mov	r4, r0
 8017062:	4608      	mov	r0, r1
 8017064:	4611      	mov	r1, r2
 8017066:	2200      	movs	r2, #0
 8017068:	602a      	str	r2, [r5, #0]
 801706a:	461a      	mov	r2, r3
 801706c:	f7ed ff0a 	bl	8004e84 <_lseek>
 8017070:	1c43      	adds	r3, r0, #1
 8017072:	d102      	bne.n	801707a <_lseek_r+0x1e>
 8017074:	682b      	ldr	r3, [r5, #0]
 8017076:	b103      	cbz	r3, 801707a <_lseek_r+0x1e>
 8017078:	6023      	str	r3, [r4, #0]
 801707a:	bd38      	pop	{r3, r4, r5, pc}
 801707c:	20012088 	.word	0x20012088

08017080 <_read_r>:
 8017080:	b538      	push	{r3, r4, r5, lr}
 8017082:	4d07      	ldr	r5, [pc, #28]	@ (80170a0 <_read_r+0x20>)
 8017084:	4604      	mov	r4, r0
 8017086:	4608      	mov	r0, r1
 8017088:	4611      	mov	r1, r2
 801708a:	2200      	movs	r2, #0
 801708c:	602a      	str	r2, [r5, #0]
 801708e:	461a      	mov	r2, r3
 8017090:	f7ed fe98 	bl	8004dc4 <_read>
 8017094:	1c43      	adds	r3, r0, #1
 8017096:	d102      	bne.n	801709e <_read_r+0x1e>
 8017098:	682b      	ldr	r3, [r5, #0]
 801709a:	b103      	cbz	r3, 801709e <_read_r+0x1e>
 801709c:	6023      	str	r3, [r4, #0]
 801709e:	bd38      	pop	{r3, r4, r5, pc}
 80170a0:	20012088 	.word	0x20012088

080170a4 <_sbrk_r>:
 80170a4:	b538      	push	{r3, r4, r5, lr}
 80170a6:	4d06      	ldr	r5, [pc, #24]	@ (80170c0 <_sbrk_r+0x1c>)
 80170a8:	2300      	movs	r3, #0
 80170aa:	4604      	mov	r4, r0
 80170ac:	4608      	mov	r0, r1
 80170ae:	602b      	str	r3, [r5, #0]
 80170b0:	f7ed fef6 	bl	8004ea0 <_sbrk>
 80170b4:	1c43      	adds	r3, r0, #1
 80170b6:	d102      	bne.n	80170be <_sbrk_r+0x1a>
 80170b8:	682b      	ldr	r3, [r5, #0]
 80170ba:	b103      	cbz	r3, 80170be <_sbrk_r+0x1a>
 80170bc:	6023      	str	r3, [r4, #0]
 80170be:	bd38      	pop	{r3, r4, r5, pc}
 80170c0:	20012088 	.word	0x20012088

080170c4 <_write_r>:
 80170c4:	b538      	push	{r3, r4, r5, lr}
 80170c6:	4d07      	ldr	r5, [pc, #28]	@ (80170e4 <_write_r+0x20>)
 80170c8:	4604      	mov	r4, r0
 80170ca:	4608      	mov	r0, r1
 80170cc:	4611      	mov	r1, r2
 80170ce:	2200      	movs	r2, #0
 80170d0:	602a      	str	r2, [r5, #0]
 80170d2:	461a      	mov	r2, r3
 80170d4:	f7ed fe93 	bl	8004dfe <_write>
 80170d8:	1c43      	adds	r3, r0, #1
 80170da:	d102      	bne.n	80170e2 <_write_r+0x1e>
 80170dc:	682b      	ldr	r3, [r5, #0]
 80170de:	b103      	cbz	r3, 80170e2 <_write_r+0x1e>
 80170e0:	6023      	str	r3, [r4, #0]
 80170e2:	bd38      	pop	{r3, r4, r5, pc}
 80170e4:	20012088 	.word	0x20012088

080170e8 <__errno>:
 80170e8:	4b01      	ldr	r3, [pc, #4]	@ (80170f0 <__errno+0x8>)
 80170ea:	6818      	ldr	r0, [r3, #0]
 80170ec:	4770      	bx	lr
 80170ee:	bf00      	nop
 80170f0:	20000080 	.word	0x20000080

080170f4 <__libc_init_array>:
 80170f4:	b570      	push	{r4, r5, r6, lr}
 80170f6:	4d0d      	ldr	r5, [pc, #52]	@ (801712c <__libc_init_array+0x38>)
 80170f8:	4c0d      	ldr	r4, [pc, #52]	@ (8017130 <__libc_init_array+0x3c>)
 80170fa:	1b64      	subs	r4, r4, r5
 80170fc:	10a4      	asrs	r4, r4, #2
 80170fe:	2600      	movs	r6, #0
 8017100:	42a6      	cmp	r6, r4
 8017102:	d109      	bne.n	8017118 <__libc_init_array+0x24>
 8017104:	4d0b      	ldr	r5, [pc, #44]	@ (8017134 <__libc_init_array+0x40>)
 8017106:	4c0c      	ldr	r4, [pc, #48]	@ (8017138 <__libc_init_array+0x44>)
 8017108:	f000 feae 	bl	8017e68 <_init>
 801710c:	1b64      	subs	r4, r4, r5
 801710e:	10a4      	asrs	r4, r4, #2
 8017110:	2600      	movs	r6, #0
 8017112:	42a6      	cmp	r6, r4
 8017114:	d105      	bne.n	8017122 <__libc_init_array+0x2e>
 8017116:	bd70      	pop	{r4, r5, r6, pc}
 8017118:	f855 3b04 	ldr.w	r3, [r5], #4
 801711c:	4798      	blx	r3
 801711e:	3601      	adds	r6, #1
 8017120:	e7ee      	b.n	8017100 <__libc_init_array+0xc>
 8017122:	f855 3b04 	ldr.w	r3, [r5], #4
 8017126:	4798      	blx	r3
 8017128:	3601      	adds	r6, #1
 801712a:	e7f2      	b.n	8017112 <__libc_init_array+0x1e>
 801712c:	0801b52c 	.word	0x0801b52c
 8017130:	0801b52c 	.word	0x0801b52c
 8017134:	0801b52c 	.word	0x0801b52c
 8017138:	0801b530 	.word	0x0801b530

0801713c <__retarget_lock_init_recursive>:
 801713c:	4770      	bx	lr

0801713e <__retarget_lock_acquire_recursive>:
 801713e:	4770      	bx	lr

08017140 <__retarget_lock_release_recursive>:
 8017140:	4770      	bx	lr

08017142 <memcpy>:
 8017142:	440a      	add	r2, r1
 8017144:	4291      	cmp	r1, r2
 8017146:	f100 33ff 	add.w	r3, r0, #4294967295
 801714a:	d100      	bne.n	801714e <memcpy+0xc>
 801714c:	4770      	bx	lr
 801714e:	b510      	push	{r4, lr}
 8017150:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017154:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017158:	4291      	cmp	r1, r2
 801715a:	d1f9      	bne.n	8017150 <memcpy+0xe>
 801715c:	bd10      	pop	{r4, pc}
	...

08017160 <_free_r>:
 8017160:	b538      	push	{r3, r4, r5, lr}
 8017162:	4605      	mov	r5, r0
 8017164:	2900      	cmp	r1, #0
 8017166:	d041      	beq.n	80171ec <_free_r+0x8c>
 8017168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801716c:	1f0c      	subs	r4, r1, #4
 801716e:	2b00      	cmp	r3, #0
 8017170:	bfb8      	it	lt
 8017172:	18e4      	addlt	r4, r4, r3
 8017174:	f7ff fd78 	bl	8016c68 <__malloc_lock>
 8017178:	4a1d      	ldr	r2, [pc, #116]	@ (80171f0 <_free_r+0x90>)
 801717a:	6813      	ldr	r3, [r2, #0]
 801717c:	b933      	cbnz	r3, 801718c <_free_r+0x2c>
 801717e:	6063      	str	r3, [r4, #4]
 8017180:	6014      	str	r4, [r2, #0]
 8017182:	4628      	mov	r0, r5
 8017184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017188:	f7ff bd74 	b.w	8016c74 <__malloc_unlock>
 801718c:	42a3      	cmp	r3, r4
 801718e:	d908      	bls.n	80171a2 <_free_r+0x42>
 8017190:	6820      	ldr	r0, [r4, #0]
 8017192:	1821      	adds	r1, r4, r0
 8017194:	428b      	cmp	r3, r1
 8017196:	bf01      	itttt	eq
 8017198:	6819      	ldreq	r1, [r3, #0]
 801719a:	685b      	ldreq	r3, [r3, #4]
 801719c:	1809      	addeq	r1, r1, r0
 801719e:	6021      	streq	r1, [r4, #0]
 80171a0:	e7ed      	b.n	801717e <_free_r+0x1e>
 80171a2:	461a      	mov	r2, r3
 80171a4:	685b      	ldr	r3, [r3, #4]
 80171a6:	b10b      	cbz	r3, 80171ac <_free_r+0x4c>
 80171a8:	42a3      	cmp	r3, r4
 80171aa:	d9fa      	bls.n	80171a2 <_free_r+0x42>
 80171ac:	6811      	ldr	r1, [r2, #0]
 80171ae:	1850      	adds	r0, r2, r1
 80171b0:	42a0      	cmp	r0, r4
 80171b2:	d10b      	bne.n	80171cc <_free_r+0x6c>
 80171b4:	6820      	ldr	r0, [r4, #0]
 80171b6:	4401      	add	r1, r0
 80171b8:	1850      	adds	r0, r2, r1
 80171ba:	4283      	cmp	r3, r0
 80171bc:	6011      	str	r1, [r2, #0]
 80171be:	d1e0      	bne.n	8017182 <_free_r+0x22>
 80171c0:	6818      	ldr	r0, [r3, #0]
 80171c2:	685b      	ldr	r3, [r3, #4]
 80171c4:	6053      	str	r3, [r2, #4]
 80171c6:	4408      	add	r0, r1
 80171c8:	6010      	str	r0, [r2, #0]
 80171ca:	e7da      	b.n	8017182 <_free_r+0x22>
 80171cc:	d902      	bls.n	80171d4 <_free_r+0x74>
 80171ce:	230c      	movs	r3, #12
 80171d0:	602b      	str	r3, [r5, #0]
 80171d2:	e7d6      	b.n	8017182 <_free_r+0x22>
 80171d4:	6820      	ldr	r0, [r4, #0]
 80171d6:	1821      	adds	r1, r4, r0
 80171d8:	428b      	cmp	r3, r1
 80171da:	bf04      	itt	eq
 80171dc:	6819      	ldreq	r1, [r3, #0]
 80171de:	685b      	ldreq	r3, [r3, #4]
 80171e0:	6063      	str	r3, [r4, #4]
 80171e2:	bf04      	itt	eq
 80171e4:	1809      	addeq	r1, r1, r0
 80171e6:	6021      	streq	r1, [r4, #0]
 80171e8:	6054      	str	r4, [r2, #4]
 80171ea:	e7ca      	b.n	8017182 <_free_r+0x22>
 80171ec:	bd38      	pop	{r3, r4, r5, pc}
 80171ee:	bf00      	nop
 80171f0:	20011f48 	.word	0x20011f48

080171f4 <__ssputs_r>:
 80171f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171f8:	688e      	ldr	r6, [r1, #8]
 80171fa:	461f      	mov	r7, r3
 80171fc:	42be      	cmp	r6, r7
 80171fe:	680b      	ldr	r3, [r1, #0]
 8017200:	4682      	mov	sl, r0
 8017202:	460c      	mov	r4, r1
 8017204:	4690      	mov	r8, r2
 8017206:	d82d      	bhi.n	8017264 <__ssputs_r+0x70>
 8017208:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801720c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017210:	d026      	beq.n	8017260 <__ssputs_r+0x6c>
 8017212:	6965      	ldr	r5, [r4, #20]
 8017214:	6909      	ldr	r1, [r1, #16]
 8017216:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801721a:	eba3 0901 	sub.w	r9, r3, r1
 801721e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017222:	1c7b      	adds	r3, r7, #1
 8017224:	444b      	add	r3, r9
 8017226:	106d      	asrs	r5, r5, #1
 8017228:	429d      	cmp	r5, r3
 801722a:	bf38      	it	cc
 801722c:	461d      	movcc	r5, r3
 801722e:	0553      	lsls	r3, r2, #21
 8017230:	d527      	bpl.n	8017282 <__ssputs_r+0x8e>
 8017232:	4629      	mov	r1, r5
 8017234:	f7ff fc98 	bl	8016b68 <_malloc_r>
 8017238:	4606      	mov	r6, r0
 801723a:	b360      	cbz	r0, 8017296 <__ssputs_r+0xa2>
 801723c:	6921      	ldr	r1, [r4, #16]
 801723e:	464a      	mov	r2, r9
 8017240:	f7ff ff7f 	bl	8017142 <memcpy>
 8017244:	89a3      	ldrh	r3, [r4, #12]
 8017246:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801724a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801724e:	81a3      	strh	r3, [r4, #12]
 8017250:	6126      	str	r6, [r4, #16]
 8017252:	6165      	str	r5, [r4, #20]
 8017254:	444e      	add	r6, r9
 8017256:	eba5 0509 	sub.w	r5, r5, r9
 801725a:	6026      	str	r6, [r4, #0]
 801725c:	60a5      	str	r5, [r4, #8]
 801725e:	463e      	mov	r6, r7
 8017260:	42be      	cmp	r6, r7
 8017262:	d900      	bls.n	8017266 <__ssputs_r+0x72>
 8017264:	463e      	mov	r6, r7
 8017266:	6820      	ldr	r0, [r4, #0]
 8017268:	4632      	mov	r2, r6
 801726a:	4641      	mov	r1, r8
 801726c:	f000 fd28 	bl	8017cc0 <memmove>
 8017270:	68a3      	ldr	r3, [r4, #8]
 8017272:	1b9b      	subs	r3, r3, r6
 8017274:	60a3      	str	r3, [r4, #8]
 8017276:	6823      	ldr	r3, [r4, #0]
 8017278:	4433      	add	r3, r6
 801727a:	6023      	str	r3, [r4, #0]
 801727c:	2000      	movs	r0, #0
 801727e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017282:	462a      	mov	r2, r5
 8017284:	f000 fd36 	bl	8017cf4 <_realloc_r>
 8017288:	4606      	mov	r6, r0
 801728a:	2800      	cmp	r0, #0
 801728c:	d1e0      	bne.n	8017250 <__ssputs_r+0x5c>
 801728e:	6921      	ldr	r1, [r4, #16]
 8017290:	4650      	mov	r0, sl
 8017292:	f7ff ff65 	bl	8017160 <_free_r>
 8017296:	230c      	movs	r3, #12
 8017298:	f8ca 3000 	str.w	r3, [sl]
 801729c:	89a3      	ldrh	r3, [r4, #12]
 801729e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80172a2:	81a3      	strh	r3, [r4, #12]
 80172a4:	f04f 30ff 	mov.w	r0, #4294967295
 80172a8:	e7e9      	b.n	801727e <__ssputs_r+0x8a>
	...

080172ac <_svfiprintf_r>:
 80172ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172b0:	4698      	mov	r8, r3
 80172b2:	898b      	ldrh	r3, [r1, #12]
 80172b4:	061b      	lsls	r3, r3, #24
 80172b6:	b09d      	sub	sp, #116	@ 0x74
 80172b8:	4607      	mov	r7, r0
 80172ba:	460d      	mov	r5, r1
 80172bc:	4614      	mov	r4, r2
 80172be:	d510      	bpl.n	80172e2 <_svfiprintf_r+0x36>
 80172c0:	690b      	ldr	r3, [r1, #16]
 80172c2:	b973      	cbnz	r3, 80172e2 <_svfiprintf_r+0x36>
 80172c4:	2140      	movs	r1, #64	@ 0x40
 80172c6:	f7ff fc4f 	bl	8016b68 <_malloc_r>
 80172ca:	6028      	str	r0, [r5, #0]
 80172cc:	6128      	str	r0, [r5, #16]
 80172ce:	b930      	cbnz	r0, 80172de <_svfiprintf_r+0x32>
 80172d0:	230c      	movs	r3, #12
 80172d2:	603b      	str	r3, [r7, #0]
 80172d4:	f04f 30ff 	mov.w	r0, #4294967295
 80172d8:	b01d      	add	sp, #116	@ 0x74
 80172da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172de:	2340      	movs	r3, #64	@ 0x40
 80172e0:	616b      	str	r3, [r5, #20]
 80172e2:	2300      	movs	r3, #0
 80172e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80172e6:	2320      	movs	r3, #32
 80172e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80172ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80172f0:	2330      	movs	r3, #48	@ 0x30
 80172f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017490 <_svfiprintf_r+0x1e4>
 80172f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80172fa:	f04f 0901 	mov.w	r9, #1
 80172fe:	4623      	mov	r3, r4
 8017300:	469a      	mov	sl, r3
 8017302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017306:	b10a      	cbz	r2, 801730c <_svfiprintf_r+0x60>
 8017308:	2a25      	cmp	r2, #37	@ 0x25
 801730a:	d1f9      	bne.n	8017300 <_svfiprintf_r+0x54>
 801730c:	ebba 0b04 	subs.w	fp, sl, r4
 8017310:	d00b      	beq.n	801732a <_svfiprintf_r+0x7e>
 8017312:	465b      	mov	r3, fp
 8017314:	4622      	mov	r2, r4
 8017316:	4629      	mov	r1, r5
 8017318:	4638      	mov	r0, r7
 801731a:	f7ff ff6b 	bl	80171f4 <__ssputs_r>
 801731e:	3001      	adds	r0, #1
 8017320:	f000 80a7 	beq.w	8017472 <_svfiprintf_r+0x1c6>
 8017324:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017326:	445a      	add	r2, fp
 8017328:	9209      	str	r2, [sp, #36]	@ 0x24
 801732a:	f89a 3000 	ldrb.w	r3, [sl]
 801732e:	2b00      	cmp	r3, #0
 8017330:	f000 809f 	beq.w	8017472 <_svfiprintf_r+0x1c6>
 8017334:	2300      	movs	r3, #0
 8017336:	f04f 32ff 	mov.w	r2, #4294967295
 801733a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801733e:	f10a 0a01 	add.w	sl, sl, #1
 8017342:	9304      	str	r3, [sp, #16]
 8017344:	9307      	str	r3, [sp, #28]
 8017346:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801734a:	931a      	str	r3, [sp, #104]	@ 0x68
 801734c:	4654      	mov	r4, sl
 801734e:	2205      	movs	r2, #5
 8017350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017354:	484e      	ldr	r0, [pc, #312]	@ (8017490 <_svfiprintf_r+0x1e4>)
 8017356:	f7e8 ff73 	bl	8000240 <memchr>
 801735a:	9a04      	ldr	r2, [sp, #16]
 801735c:	b9d8      	cbnz	r0, 8017396 <_svfiprintf_r+0xea>
 801735e:	06d0      	lsls	r0, r2, #27
 8017360:	bf44      	itt	mi
 8017362:	2320      	movmi	r3, #32
 8017364:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017368:	0711      	lsls	r1, r2, #28
 801736a:	bf44      	itt	mi
 801736c:	232b      	movmi	r3, #43	@ 0x2b
 801736e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017372:	f89a 3000 	ldrb.w	r3, [sl]
 8017376:	2b2a      	cmp	r3, #42	@ 0x2a
 8017378:	d015      	beq.n	80173a6 <_svfiprintf_r+0xfa>
 801737a:	9a07      	ldr	r2, [sp, #28]
 801737c:	4654      	mov	r4, sl
 801737e:	2000      	movs	r0, #0
 8017380:	f04f 0c0a 	mov.w	ip, #10
 8017384:	4621      	mov	r1, r4
 8017386:	f811 3b01 	ldrb.w	r3, [r1], #1
 801738a:	3b30      	subs	r3, #48	@ 0x30
 801738c:	2b09      	cmp	r3, #9
 801738e:	d94b      	bls.n	8017428 <_svfiprintf_r+0x17c>
 8017390:	b1b0      	cbz	r0, 80173c0 <_svfiprintf_r+0x114>
 8017392:	9207      	str	r2, [sp, #28]
 8017394:	e014      	b.n	80173c0 <_svfiprintf_r+0x114>
 8017396:	eba0 0308 	sub.w	r3, r0, r8
 801739a:	fa09 f303 	lsl.w	r3, r9, r3
 801739e:	4313      	orrs	r3, r2
 80173a0:	9304      	str	r3, [sp, #16]
 80173a2:	46a2      	mov	sl, r4
 80173a4:	e7d2      	b.n	801734c <_svfiprintf_r+0xa0>
 80173a6:	9b03      	ldr	r3, [sp, #12]
 80173a8:	1d19      	adds	r1, r3, #4
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	9103      	str	r1, [sp, #12]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	bfbb      	ittet	lt
 80173b2:	425b      	neglt	r3, r3
 80173b4:	f042 0202 	orrlt.w	r2, r2, #2
 80173b8:	9307      	strge	r3, [sp, #28]
 80173ba:	9307      	strlt	r3, [sp, #28]
 80173bc:	bfb8      	it	lt
 80173be:	9204      	strlt	r2, [sp, #16]
 80173c0:	7823      	ldrb	r3, [r4, #0]
 80173c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80173c4:	d10a      	bne.n	80173dc <_svfiprintf_r+0x130>
 80173c6:	7863      	ldrb	r3, [r4, #1]
 80173c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80173ca:	d132      	bne.n	8017432 <_svfiprintf_r+0x186>
 80173cc:	9b03      	ldr	r3, [sp, #12]
 80173ce:	1d1a      	adds	r2, r3, #4
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	9203      	str	r2, [sp, #12]
 80173d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80173d8:	3402      	adds	r4, #2
 80173da:	9305      	str	r3, [sp, #20]
 80173dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80174a0 <_svfiprintf_r+0x1f4>
 80173e0:	7821      	ldrb	r1, [r4, #0]
 80173e2:	2203      	movs	r2, #3
 80173e4:	4650      	mov	r0, sl
 80173e6:	f7e8 ff2b 	bl	8000240 <memchr>
 80173ea:	b138      	cbz	r0, 80173fc <_svfiprintf_r+0x150>
 80173ec:	9b04      	ldr	r3, [sp, #16]
 80173ee:	eba0 000a 	sub.w	r0, r0, sl
 80173f2:	2240      	movs	r2, #64	@ 0x40
 80173f4:	4082      	lsls	r2, r0
 80173f6:	4313      	orrs	r3, r2
 80173f8:	3401      	adds	r4, #1
 80173fa:	9304      	str	r3, [sp, #16]
 80173fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017400:	4824      	ldr	r0, [pc, #144]	@ (8017494 <_svfiprintf_r+0x1e8>)
 8017402:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017406:	2206      	movs	r2, #6
 8017408:	f7e8 ff1a 	bl	8000240 <memchr>
 801740c:	2800      	cmp	r0, #0
 801740e:	d036      	beq.n	801747e <_svfiprintf_r+0x1d2>
 8017410:	4b21      	ldr	r3, [pc, #132]	@ (8017498 <_svfiprintf_r+0x1ec>)
 8017412:	bb1b      	cbnz	r3, 801745c <_svfiprintf_r+0x1b0>
 8017414:	9b03      	ldr	r3, [sp, #12]
 8017416:	3307      	adds	r3, #7
 8017418:	f023 0307 	bic.w	r3, r3, #7
 801741c:	3308      	adds	r3, #8
 801741e:	9303      	str	r3, [sp, #12]
 8017420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017422:	4433      	add	r3, r6
 8017424:	9309      	str	r3, [sp, #36]	@ 0x24
 8017426:	e76a      	b.n	80172fe <_svfiprintf_r+0x52>
 8017428:	fb0c 3202 	mla	r2, ip, r2, r3
 801742c:	460c      	mov	r4, r1
 801742e:	2001      	movs	r0, #1
 8017430:	e7a8      	b.n	8017384 <_svfiprintf_r+0xd8>
 8017432:	2300      	movs	r3, #0
 8017434:	3401      	adds	r4, #1
 8017436:	9305      	str	r3, [sp, #20]
 8017438:	4619      	mov	r1, r3
 801743a:	f04f 0c0a 	mov.w	ip, #10
 801743e:	4620      	mov	r0, r4
 8017440:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017444:	3a30      	subs	r2, #48	@ 0x30
 8017446:	2a09      	cmp	r2, #9
 8017448:	d903      	bls.n	8017452 <_svfiprintf_r+0x1a6>
 801744a:	2b00      	cmp	r3, #0
 801744c:	d0c6      	beq.n	80173dc <_svfiprintf_r+0x130>
 801744e:	9105      	str	r1, [sp, #20]
 8017450:	e7c4      	b.n	80173dc <_svfiprintf_r+0x130>
 8017452:	fb0c 2101 	mla	r1, ip, r1, r2
 8017456:	4604      	mov	r4, r0
 8017458:	2301      	movs	r3, #1
 801745a:	e7f0      	b.n	801743e <_svfiprintf_r+0x192>
 801745c:	ab03      	add	r3, sp, #12
 801745e:	9300      	str	r3, [sp, #0]
 8017460:	462a      	mov	r2, r5
 8017462:	4b0e      	ldr	r3, [pc, #56]	@ (801749c <_svfiprintf_r+0x1f0>)
 8017464:	a904      	add	r1, sp, #16
 8017466:	4638      	mov	r0, r7
 8017468:	f3af 8000 	nop.w
 801746c:	1c42      	adds	r2, r0, #1
 801746e:	4606      	mov	r6, r0
 8017470:	d1d6      	bne.n	8017420 <_svfiprintf_r+0x174>
 8017472:	89ab      	ldrh	r3, [r5, #12]
 8017474:	065b      	lsls	r3, r3, #25
 8017476:	f53f af2d 	bmi.w	80172d4 <_svfiprintf_r+0x28>
 801747a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801747c:	e72c      	b.n	80172d8 <_svfiprintf_r+0x2c>
 801747e:	ab03      	add	r3, sp, #12
 8017480:	9300      	str	r3, [sp, #0]
 8017482:	462a      	mov	r2, r5
 8017484:	4b05      	ldr	r3, [pc, #20]	@ (801749c <_svfiprintf_r+0x1f0>)
 8017486:	a904      	add	r1, sp, #16
 8017488:	4638      	mov	r0, r7
 801748a:	f000 f9bb 	bl	8017804 <_printf_i>
 801748e:	e7ed      	b.n	801746c <_svfiprintf_r+0x1c0>
 8017490:	0801b4ee 	.word	0x0801b4ee
 8017494:	0801b4f8 	.word	0x0801b4f8
 8017498:	00000000 	.word	0x00000000
 801749c:	080171f5 	.word	0x080171f5
 80174a0:	0801b4f4 	.word	0x0801b4f4

080174a4 <__sfputc_r>:
 80174a4:	6893      	ldr	r3, [r2, #8]
 80174a6:	3b01      	subs	r3, #1
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	b410      	push	{r4}
 80174ac:	6093      	str	r3, [r2, #8]
 80174ae:	da08      	bge.n	80174c2 <__sfputc_r+0x1e>
 80174b0:	6994      	ldr	r4, [r2, #24]
 80174b2:	42a3      	cmp	r3, r4
 80174b4:	db01      	blt.n	80174ba <__sfputc_r+0x16>
 80174b6:	290a      	cmp	r1, #10
 80174b8:	d103      	bne.n	80174c2 <__sfputc_r+0x1e>
 80174ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80174be:	f000 bb6b 	b.w	8017b98 <__swbuf_r>
 80174c2:	6813      	ldr	r3, [r2, #0]
 80174c4:	1c58      	adds	r0, r3, #1
 80174c6:	6010      	str	r0, [r2, #0]
 80174c8:	7019      	strb	r1, [r3, #0]
 80174ca:	4608      	mov	r0, r1
 80174cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80174d0:	4770      	bx	lr

080174d2 <__sfputs_r>:
 80174d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174d4:	4606      	mov	r6, r0
 80174d6:	460f      	mov	r7, r1
 80174d8:	4614      	mov	r4, r2
 80174da:	18d5      	adds	r5, r2, r3
 80174dc:	42ac      	cmp	r4, r5
 80174de:	d101      	bne.n	80174e4 <__sfputs_r+0x12>
 80174e0:	2000      	movs	r0, #0
 80174e2:	e007      	b.n	80174f4 <__sfputs_r+0x22>
 80174e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174e8:	463a      	mov	r2, r7
 80174ea:	4630      	mov	r0, r6
 80174ec:	f7ff ffda 	bl	80174a4 <__sfputc_r>
 80174f0:	1c43      	adds	r3, r0, #1
 80174f2:	d1f3      	bne.n	80174dc <__sfputs_r+0xa>
 80174f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080174f8 <_vfiprintf_r>:
 80174f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174fc:	460d      	mov	r5, r1
 80174fe:	b09d      	sub	sp, #116	@ 0x74
 8017500:	4614      	mov	r4, r2
 8017502:	4698      	mov	r8, r3
 8017504:	4606      	mov	r6, r0
 8017506:	b118      	cbz	r0, 8017510 <_vfiprintf_r+0x18>
 8017508:	6a03      	ldr	r3, [r0, #32]
 801750a:	b90b      	cbnz	r3, 8017510 <_vfiprintf_r+0x18>
 801750c:	f7ff fc44 	bl	8016d98 <__sinit>
 8017510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017512:	07d9      	lsls	r1, r3, #31
 8017514:	d405      	bmi.n	8017522 <_vfiprintf_r+0x2a>
 8017516:	89ab      	ldrh	r3, [r5, #12]
 8017518:	059a      	lsls	r2, r3, #22
 801751a:	d402      	bmi.n	8017522 <_vfiprintf_r+0x2a>
 801751c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801751e:	f7ff fe0e 	bl	801713e <__retarget_lock_acquire_recursive>
 8017522:	89ab      	ldrh	r3, [r5, #12]
 8017524:	071b      	lsls	r3, r3, #28
 8017526:	d501      	bpl.n	801752c <_vfiprintf_r+0x34>
 8017528:	692b      	ldr	r3, [r5, #16]
 801752a:	b99b      	cbnz	r3, 8017554 <_vfiprintf_r+0x5c>
 801752c:	4629      	mov	r1, r5
 801752e:	4630      	mov	r0, r6
 8017530:	f000 fb70 	bl	8017c14 <__swsetup_r>
 8017534:	b170      	cbz	r0, 8017554 <_vfiprintf_r+0x5c>
 8017536:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017538:	07dc      	lsls	r4, r3, #31
 801753a:	d504      	bpl.n	8017546 <_vfiprintf_r+0x4e>
 801753c:	f04f 30ff 	mov.w	r0, #4294967295
 8017540:	b01d      	add	sp, #116	@ 0x74
 8017542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017546:	89ab      	ldrh	r3, [r5, #12]
 8017548:	0598      	lsls	r0, r3, #22
 801754a:	d4f7      	bmi.n	801753c <_vfiprintf_r+0x44>
 801754c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801754e:	f7ff fdf7 	bl	8017140 <__retarget_lock_release_recursive>
 8017552:	e7f3      	b.n	801753c <_vfiprintf_r+0x44>
 8017554:	2300      	movs	r3, #0
 8017556:	9309      	str	r3, [sp, #36]	@ 0x24
 8017558:	2320      	movs	r3, #32
 801755a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801755e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017562:	2330      	movs	r3, #48	@ 0x30
 8017564:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017714 <_vfiprintf_r+0x21c>
 8017568:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801756c:	f04f 0901 	mov.w	r9, #1
 8017570:	4623      	mov	r3, r4
 8017572:	469a      	mov	sl, r3
 8017574:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017578:	b10a      	cbz	r2, 801757e <_vfiprintf_r+0x86>
 801757a:	2a25      	cmp	r2, #37	@ 0x25
 801757c:	d1f9      	bne.n	8017572 <_vfiprintf_r+0x7a>
 801757e:	ebba 0b04 	subs.w	fp, sl, r4
 8017582:	d00b      	beq.n	801759c <_vfiprintf_r+0xa4>
 8017584:	465b      	mov	r3, fp
 8017586:	4622      	mov	r2, r4
 8017588:	4629      	mov	r1, r5
 801758a:	4630      	mov	r0, r6
 801758c:	f7ff ffa1 	bl	80174d2 <__sfputs_r>
 8017590:	3001      	adds	r0, #1
 8017592:	f000 80a7 	beq.w	80176e4 <_vfiprintf_r+0x1ec>
 8017596:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017598:	445a      	add	r2, fp
 801759a:	9209      	str	r2, [sp, #36]	@ 0x24
 801759c:	f89a 3000 	ldrb.w	r3, [sl]
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	f000 809f 	beq.w	80176e4 <_vfiprintf_r+0x1ec>
 80175a6:	2300      	movs	r3, #0
 80175a8:	f04f 32ff 	mov.w	r2, #4294967295
 80175ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80175b0:	f10a 0a01 	add.w	sl, sl, #1
 80175b4:	9304      	str	r3, [sp, #16]
 80175b6:	9307      	str	r3, [sp, #28]
 80175b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80175bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80175be:	4654      	mov	r4, sl
 80175c0:	2205      	movs	r2, #5
 80175c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175c6:	4853      	ldr	r0, [pc, #332]	@ (8017714 <_vfiprintf_r+0x21c>)
 80175c8:	f7e8 fe3a 	bl	8000240 <memchr>
 80175cc:	9a04      	ldr	r2, [sp, #16]
 80175ce:	b9d8      	cbnz	r0, 8017608 <_vfiprintf_r+0x110>
 80175d0:	06d1      	lsls	r1, r2, #27
 80175d2:	bf44      	itt	mi
 80175d4:	2320      	movmi	r3, #32
 80175d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80175da:	0713      	lsls	r3, r2, #28
 80175dc:	bf44      	itt	mi
 80175de:	232b      	movmi	r3, #43	@ 0x2b
 80175e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80175e4:	f89a 3000 	ldrb.w	r3, [sl]
 80175e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80175ea:	d015      	beq.n	8017618 <_vfiprintf_r+0x120>
 80175ec:	9a07      	ldr	r2, [sp, #28]
 80175ee:	4654      	mov	r4, sl
 80175f0:	2000      	movs	r0, #0
 80175f2:	f04f 0c0a 	mov.w	ip, #10
 80175f6:	4621      	mov	r1, r4
 80175f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80175fc:	3b30      	subs	r3, #48	@ 0x30
 80175fe:	2b09      	cmp	r3, #9
 8017600:	d94b      	bls.n	801769a <_vfiprintf_r+0x1a2>
 8017602:	b1b0      	cbz	r0, 8017632 <_vfiprintf_r+0x13a>
 8017604:	9207      	str	r2, [sp, #28]
 8017606:	e014      	b.n	8017632 <_vfiprintf_r+0x13a>
 8017608:	eba0 0308 	sub.w	r3, r0, r8
 801760c:	fa09 f303 	lsl.w	r3, r9, r3
 8017610:	4313      	orrs	r3, r2
 8017612:	9304      	str	r3, [sp, #16]
 8017614:	46a2      	mov	sl, r4
 8017616:	e7d2      	b.n	80175be <_vfiprintf_r+0xc6>
 8017618:	9b03      	ldr	r3, [sp, #12]
 801761a:	1d19      	adds	r1, r3, #4
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	9103      	str	r1, [sp, #12]
 8017620:	2b00      	cmp	r3, #0
 8017622:	bfbb      	ittet	lt
 8017624:	425b      	neglt	r3, r3
 8017626:	f042 0202 	orrlt.w	r2, r2, #2
 801762a:	9307      	strge	r3, [sp, #28]
 801762c:	9307      	strlt	r3, [sp, #28]
 801762e:	bfb8      	it	lt
 8017630:	9204      	strlt	r2, [sp, #16]
 8017632:	7823      	ldrb	r3, [r4, #0]
 8017634:	2b2e      	cmp	r3, #46	@ 0x2e
 8017636:	d10a      	bne.n	801764e <_vfiprintf_r+0x156>
 8017638:	7863      	ldrb	r3, [r4, #1]
 801763a:	2b2a      	cmp	r3, #42	@ 0x2a
 801763c:	d132      	bne.n	80176a4 <_vfiprintf_r+0x1ac>
 801763e:	9b03      	ldr	r3, [sp, #12]
 8017640:	1d1a      	adds	r2, r3, #4
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	9203      	str	r2, [sp, #12]
 8017646:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801764a:	3402      	adds	r4, #2
 801764c:	9305      	str	r3, [sp, #20]
 801764e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017724 <_vfiprintf_r+0x22c>
 8017652:	7821      	ldrb	r1, [r4, #0]
 8017654:	2203      	movs	r2, #3
 8017656:	4650      	mov	r0, sl
 8017658:	f7e8 fdf2 	bl	8000240 <memchr>
 801765c:	b138      	cbz	r0, 801766e <_vfiprintf_r+0x176>
 801765e:	9b04      	ldr	r3, [sp, #16]
 8017660:	eba0 000a 	sub.w	r0, r0, sl
 8017664:	2240      	movs	r2, #64	@ 0x40
 8017666:	4082      	lsls	r2, r0
 8017668:	4313      	orrs	r3, r2
 801766a:	3401      	adds	r4, #1
 801766c:	9304      	str	r3, [sp, #16]
 801766e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017672:	4829      	ldr	r0, [pc, #164]	@ (8017718 <_vfiprintf_r+0x220>)
 8017674:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017678:	2206      	movs	r2, #6
 801767a:	f7e8 fde1 	bl	8000240 <memchr>
 801767e:	2800      	cmp	r0, #0
 8017680:	d03f      	beq.n	8017702 <_vfiprintf_r+0x20a>
 8017682:	4b26      	ldr	r3, [pc, #152]	@ (801771c <_vfiprintf_r+0x224>)
 8017684:	bb1b      	cbnz	r3, 80176ce <_vfiprintf_r+0x1d6>
 8017686:	9b03      	ldr	r3, [sp, #12]
 8017688:	3307      	adds	r3, #7
 801768a:	f023 0307 	bic.w	r3, r3, #7
 801768e:	3308      	adds	r3, #8
 8017690:	9303      	str	r3, [sp, #12]
 8017692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017694:	443b      	add	r3, r7
 8017696:	9309      	str	r3, [sp, #36]	@ 0x24
 8017698:	e76a      	b.n	8017570 <_vfiprintf_r+0x78>
 801769a:	fb0c 3202 	mla	r2, ip, r2, r3
 801769e:	460c      	mov	r4, r1
 80176a0:	2001      	movs	r0, #1
 80176a2:	e7a8      	b.n	80175f6 <_vfiprintf_r+0xfe>
 80176a4:	2300      	movs	r3, #0
 80176a6:	3401      	adds	r4, #1
 80176a8:	9305      	str	r3, [sp, #20]
 80176aa:	4619      	mov	r1, r3
 80176ac:	f04f 0c0a 	mov.w	ip, #10
 80176b0:	4620      	mov	r0, r4
 80176b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80176b6:	3a30      	subs	r2, #48	@ 0x30
 80176b8:	2a09      	cmp	r2, #9
 80176ba:	d903      	bls.n	80176c4 <_vfiprintf_r+0x1cc>
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d0c6      	beq.n	801764e <_vfiprintf_r+0x156>
 80176c0:	9105      	str	r1, [sp, #20]
 80176c2:	e7c4      	b.n	801764e <_vfiprintf_r+0x156>
 80176c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80176c8:	4604      	mov	r4, r0
 80176ca:	2301      	movs	r3, #1
 80176cc:	e7f0      	b.n	80176b0 <_vfiprintf_r+0x1b8>
 80176ce:	ab03      	add	r3, sp, #12
 80176d0:	9300      	str	r3, [sp, #0]
 80176d2:	462a      	mov	r2, r5
 80176d4:	4b12      	ldr	r3, [pc, #72]	@ (8017720 <_vfiprintf_r+0x228>)
 80176d6:	a904      	add	r1, sp, #16
 80176d8:	4630      	mov	r0, r6
 80176da:	f3af 8000 	nop.w
 80176de:	4607      	mov	r7, r0
 80176e0:	1c78      	adds	r0, r7, #1
 80176e2:	d1d6      	bne.n	8017692 <_vfiprintf_r+0x19a>
 80176e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80176e6:	07d9      	lsls	r1, r3, #31
 80176e8:	d405      	bmi.n	80176f6 <_vfiprintf_r+0x1fe>
 80176ea:	89ab      	ldrh	r3, [r5, #12]
 80176ec:	059a      	lsls	r2, r3, #22
 80176ee:	d402      	bmi.n	80176f6 <_vfiprintf_r+0x1fe>
 80176f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80176f2:	f7ff fd25 	bl	8017140 <__retarget_lock_release_recursive>
 80176f6:	89ab      	ldrh	r3, [r5, #12]
 80176f8:	065b      	lsls	r3, r3, #25
 80176fa:	f53f af1f 	bmi.w	801753c <_vfiprintf_r+0x44>
 80176fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017700:	e71e      	b.n	8017540 <_vfiprintf_r+0x48>
 8017702:	ab03      	add	r3, sp, #12
 8017704:	9300      	str	r3, [sp, #0]
 8017706:	462a      	mov	r2, r5
 8017708:	4b05      	ldr	r3, [pc, #20]	@ (8017720 <_vfiprintf_r+0x228>)
 801770a:	a904      	add	r1, sp, #16
 801770c:	4630      	mov	r0, r6
 801770e:	f000 f879 	bl	8017804 <_printf_i>
 8017712:	e7e4      	b.n	80176de <_vfiprintf_r+0x1e6>
 8017714:	0801b4ee 	.word	0x0801b4ee
 8017718:	0801b4f8 	.word	0x0801b4f8
 801771c:	00000000 	.word	0x00000000
 8017720:	080174d3 	.word	0x080174d3
 8017724:	0801b4f4 	.word	0x0801b4f4

08017728 <_printf_common>:
 8017728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801772c:	4616      	mov	r6, r2
 801772e:	4698      	mov	r8, r3
 8017730:	688a      	ldr	r2, [r1, #8]
 8017732:	690b      	ldr	r3, [r1, #16]
 8017734:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017738:	4293      	cmp	r3, r2
 801773a:	bfb8      	it	lt
 801773c:	4613      	movlt	r3, r2
 801773e:	6033      	str	r3, [r6, #0]
 8017740:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017744:	4607      	mov	r7, r0
 8017746:	460c      	mov	r4, r1
 8017748:	b10a      	cbz	r2, 801774e <_printf_common+0x26>
 801774a:	3301      	adds	r3, #1
 801774c:	6033      	str	r3, [r6, #0]
 801774e:	6823      	ldr	r3, [r4, #0]
 8017750:	0699      	lsls	r1, r3, #26
 8017752:	bf42      	ittt	mi
 8017754:	6833      	ldrmi	r3, [r6, #0]
 8017756:	3302      	addmi	r3, #2
 8017758:	6033      	strmi	r3, [r6, #0]
 801775a:	6825      	ldr	r5, [r4, #0]
 801775c:	f015 0506 	ands.w	r5, r5, #6
 8017760:	d106      	bne.n	8017770 <_printf_common+0x48>
 8017762:	f104 0a19 	add.w	sl, r4, #25
 8017766:	68e3      	ldr	r3, [r4, #12]
 8017768:	6832      	ldr	r2, [r6, #0]
 801776a:	1a9b      	subs	r3, r3, r2
 801776c:	42ab      	cmp	r3, r5
 801776e:	dc26      	bgt.n	80177be <_printf_common+0x96>
 8017770:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017774:	6822      	ldr	r2, [r4, #0]
 8017776:	3b00      	subs	r3, #0
 8017778:	bf18      	it	ne
 801777a:	2301      	movne	r3, #1
 801777c:	0692      	lsls	r2, r2, #26
 801777e:	d42b      	bmi.n	80177d8 <_printf_common+0xb0>
 8017780:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017784:	4641      	mov	r1, r8
 8017786:	4638      	mov	r0, r7
 8017788:	47c8      	blx	r9
 801778a:	3001      	adds	r0, #1
 801778c:	d01e      	beq.n	80177cc <_printf_common+0xa4>
 801778e:	6823      	ldr	r3, [r4, #0]
 8017790:	6922      	ldr	r2, [r4, #16]
 8017792:	f003 0306 	and.w	r3, r3, #6
 8017796:	2b04      	cmp	r3, #4
 8017798:	bf02      	ittt	eq
 801779a:	68e5      	ldreq	r5, [r4, #12]
 801779c:	6833      	ldreq	r3, [r6, #0]
 801779e:	1aed      	subeq	r5, r5, r3
 80177a0:	68a3      	ldr	r3, [r4, #8]
 80177a2:	bf0c      	ite	eq
 80177a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80177a8:	2500      	movne	r5, #0
 80177aa:	4293      	cmp	r3, r2
 80177ac:	bfc4      	itt	gt
 80177ae:	1a9b      	subgt	r3, r3, r2
 80177b0:	18ed      	addgt	r5, r5, r3
 80177b2:	2600      	movs	r6, #0
 80177b4:	341a      	adds	r4, #26
 80177b6:	42b5      	cmp	r5, r6
 80177b8:	d11a      	bne.n	80177f0 <_printf_common+0xc8>
 80177ba:	2000      	movs	r0, #0
 80177bc:	e008      	b.n	80177d0 <_printf_common+0xa8>
 80177be:	2301      	movs	r3, #1
 80177c0:	4652      	mov	r2, sl
 80177c2:	4641      	mov	r1, r8
 80177c4:	4638      	mov	r0, r7
 80177c6:	47c8      	blx	r9
 80177c8:	3001      	adds	r0, #1
 80177ca:	d103      	bne.n	80177d4 <_printf_common+0xac>
 80177cc:	f04f 30ff 	mov.w	r0, #4294967295
 80177d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177d4:	3501      	adds	r5, #1
 80177d6:	e7c6      	b.n	8017766 <_printf_common+0x3e>
 80177d8:	18e1      	adds	r1, r4, r3
 80177da:	1c5a      	adds	r2, r3, #1
 80177dc:	2030      	movs	r0, #48	@ 0x30
 80177de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80177e2:	4422      	add	r2, r4
 80177e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80177e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80177ec:	3302      	adds	r3, #2
 80177ee:	e7c7      	b.n	8017780 <_printf_common+0x58>
 80177f0:	2301      	movs	r3, #1
 80177f2:	4622      	mov	r2, r4
 80177f4:	4641      	mov	r1, r8
 80177f6:	4638      	mov	r0, r7
 80177f8:	47c8      	blx	r9
 80177fa:	3001      	adds	r0, #1
 80177fc:	d0e6      	beq.n	80177cc <_printf_common+0xa4>
 80177fe:	3601      	adds	r6, #1
 8017800:	e7d9      	b.n	80177b6 <_printf_common+0x8e>
	...

08017804 <_printf_i>:
 8017804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017808:	7e0f      	ldrb	r7, [r1, #24]
 801780a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801780c:	2f78      	cmp	r7, #120	@ 0x78
 801780e:	4691      	mov	r9, r2
 8017810:	4680      	mov	r8, r0
 8017812:	460c      	mov	r4, r1
 8017814:	469a      	mov	sl, r3
 8017816:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801781a:	d807      	bhi.n	801782c <_printf_i+0x28>
 801781c:	2f62      	cmp	r7, #98	@ 0x62
 801781e:	d80a      	bhi.n	8017836 <_printf_i+0x32>
 8017820:	2f00      	cmp	r7, #0
 8017822:	f000 80d1 	beq.w	80179c8 <_printf_i+0x1c4>
 8017826:	2f58      	cmp	r7, #88	@ 0x58
 8017828:	f000 80b8 	beq.w	801799c <_printf_i+0x198>
 801782c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017830:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017834:	e03a      	b.n	80178ac <_printf_i+0xa8>
 8017836:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801783a:	2b15      	cmp	r3, #21
 801783c:	d8f6      	bhi.n	801782c <_printf_i+0x28>
 801783e:	a101      	add	r1, pc, #4	@ (adr r1, 8017844 <_printf_i+0x40>)
 8017840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017844:	0801789d 	.word	0x0801789d
 8017848:	080178b1 	.word	0x080178b1
 801784c:	0801782d 	.word	0x0801782d
 8017850:	0801782d 	.word	0x0801782d
 8017854:	0801782d 	.word	0x0801782d
 8017858:	0801782d 	.word	0x0801782d
 801785c:	080178b1 	.word	0x080178b1
 8017860:	0801782d 	.word	0x0801782d
 8017864:	0801782d 	.word	0x0801782d
 8017868:	0801782d 	.word	0x0801782d
 801786c:	0801782d 	.word	0x0801782d
 8017870:	080179af 	.word	0x080179af
 8017874:	080178db 	.word	0x080178db
 8017878:	08017969 	.word	0x08017969
 801787c:	0801782d 	.word	0x0801782d
 8017880:	0801782d 	.word	0x0801782d
 8017884:	080179d1 	.word	0x080179d1
 8017888:	0801782d 	.word	0x0801782d
 801788c:	080178db 	.word	0x080178db
 8017890:	0801782d 	.word	0x0801782d
 8017894:	0801782d 	.word	0x0801782d
 8017898:	08017971 	.word	0x08017971
 801789c:	6833      	ldr	r3, [r6, #0]
 801789e:	1d1a      	adds	r2, r3, #4
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	6032      	str	r2, [r6, #0]
 80178a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80178a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80178ac:	2301      	movs	r3, #1
 80178ae:	e09c      	b.n	80179ea <_printf_i+0x1e6>
 80178b0:	6833      	ldr	r3, [r6, #0]
 80178b2:	6820      	ldr	r0, [r4, #0]
 80178b4:	1d19      	adds	r1, r3, #4
 80178b6:	6031      	str	r1, [r6, #0]
 80178b8:	0606      	lsls	r6, r0, #24
 80178ba:	d501      	bpl.n	80178c0 <_printf_i+0xbc>
 80178bc:	681d      	ldr	r5, [r3, #0]
 80178be:	e003      	b.n	80178c8 <_printf_i+0xc4>
 80178c0:	0645      	lsls	r5, r0, #25
 80178c2:	d5fb      	bpl.n	80178bc <_printf_i+0xb8>
 80178c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80178c8:	2d00      	cmp	r5, #0
 80178ca:	da03      	bge.n	80178d4 <_printf_i+0xd0>
 80178cc:	232d      	movs	r3, #45	@ 0x2d
 80178ce:	426d      	negs	r5, r5
 80178d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80178d4:	4858      	ldr	r0, [pc, #352]	@ (8017a38 <_printf_i+0x234>)
 80178d6:	230a      	movs	r3, #10
 80178d8:	e011      	b.n	80178fe <_printf_i+0xfa>
 80178da:	6821      	ldr	r1, [r4, #0]
 80178dc:	6833      	ldr	r3, [r6, #0]
 80178de:	0608      	lsls	r0, r1, #24
 80178e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80178e4:	d402      	bmi.n	80178ec <_printf_i+0xe8>
 80178e6:	0649      	lsls	r1, r1, #25
 80178e8:	bf48      	it	mi
 80178ea:	b2ad      	uxthmi	r5, r5
 80178ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80178ee:	4852      	ldr	r0, [pc, #328]	@ (8017a38 <_printf_i+0x234>)
 80178f0:	6033      	str	r3, [r6, #0]
 80178f2:	bf14      	ite	ne
 80178f4:	230a      	movne	r3, #10
 80178f6:	2308      	moveq	r3, #8
 80178f8:	2100      	movs	r1, #0
 80178fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80178fe:	6866      	ldr	r6, [r4, #4]
 8017900:	60a6      	str	r6, [r4, #8]
 8017902:	2e00      	cmp	r6, #0
 8017904:	db05      	blt.n	8017912 <_printf_i+0x10e>
 8017906:	6821      	ldr	r1, [r4, #0]
 8017908:	432e      	orrs	r6, r5
 801790a:	f021 0104 	bic.w	r1, r1, #4
 801790e:	6021      	str	r1, [r4, #0]
 8017910:	d04b      	beq.n	80179aa <_printf_i+0x1a6>
 8017912:	4616      	mov	r6, r2
 8017914:	fbb5 f1f3 	udiv	r1, r5, r3
 8017918:	fb03 5711 	mls	r7, r3, r1, r5
 801791c:	5dc7      	ldrb	r7, [r0, r7]
 801791e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017922:	462f      	mov	r7, r5
 8017924:	42bb      	cmp	r3, r7
 8017926:	460d      	mov	r5, r1
 8017928:	d9f4      	bls.n	8017914 <_printf_i+0x110>
 801792a:	2b08      	cmp	r3, #8
 801792c:	d10b      	bne.n	8017946 <_printf_i+0x142>
 801792e:	6823      	ldr	r3, [r4, #0]
 8017930:	07df      	lsls	r7, r3, #31
 8017932:	d508      	bpl.n	8017946 <_printf_i+0x142>
 8017934:	6923      	ldr	r3, [r4, #16]
 8017936:	6861      	ldr	r1, [r4, #4]
 8017938:	4299      	cmp	r1, r3
 801793a:	bfde      	ittt	le
 801793c:	2330      	movle	r3, #48	@ 0x30
 801793e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017942:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017946:	1b92      	subs	r2, r2, r6
 8017948:	6122      	str	r2, [r4, #16]
 801794a:	f8cd a000 	str.w	sl, [sp]
 801794e:	464b      	mov	r3, r9
 8017950:	aa03      	add	r2, sp, #12
 8017952:	4621      	mov	r1, r4
 8017954:	4640      	mov	r0, r8
 8017956:	f7ff fee7 	bl	8017728 <_printf_common>
 801795a:	3001      	adds	r0, #1
 801795c:	d14a      	bne.n	80179f4 <_printf_i+0x1f0>
 801795e:	f04f 30ff 	mov.w	r0, #4294967295
 8017962:	b004      	add	sp, #16
 8017964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017968:	6823      	ldr	r3, [r4, #0]
 801796a:	f043 0320 	orr.w	r3, r3, #32
 801796e:	6023      	str	r3, [r4, #0]
 8017970:	4832      	ldr	r0, [pc, #200]	@ (8017a3c <_printf_i+0x238>)
 8017972:	2778      	movs	r7, #120	@ 0x78
 8017974:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017978:	6823      	ldr	r3, [r4, #0]
 801797a:	6831      	ldr	r1, [r6, #0]
 801797c:	061f      	lsls	r7, r3, #24
 801797e:	f851 5b04 	ldr.w	r5, [r1], #4
 8017982:	d402      	bmi.n	801798a <_printf_i+0x186>
 8017984:	065f      	lsls	r7, r3, #25
 8017986:	bf48      	it	mi
 8017988:	b2ad      	uxthmi	r5, r5
 801798a:	6031      	str	r1, [r6, #0]
 801798c:	07d9      	lsls	r1, r3, #31
 801798e:	bf44      	itt	mi
 8017990:	f043 0320 	orrmi.w	r3, r3, #32
 8017994:	6023      	strmi	r3, [r4, #0]
 8017996:	b11d      	cbz	r5, 80179a0 <_printf_i+0x19c>
 8017998:	2310      	movs	r3, #16
 801799a:	e7ad      	b.n	80178f8 <_printf_i+0xf4>
 801799c:	4826      	ldr	r0, [pc, #152]	@ (8017a38 <_printf_i+0x234>)
 801799e:	e7e9      	b.n	8017974 <_printf_i+0x170>
 80179a0:	6823      	ldr	r3, [r4, #0]
 80179a2:	f023 0320 	bic.w	r3, r3, #32
 80179a6:	6023      	str	r3, [r4, #0]
 80179a8:	e7f6      	b.n	8017998 <_printf_i+0x194>
 80179aa:	4616      	mov	r6, r2
 80179ac:	e7bd      	b.n	801792a <_printf_i+0x126>
 80179ae:	6833      	ldr	r3, [r6, #0]
 80179b0:	6825      	ldr	r5, [r4, #0]
 80179b2:	6961      	ldr	r1, [r4, #20]
 80179b4:	1d18      	adds	r0, r3, #4
 80179b6:	6030      	str	r0, [r6, #0]
 80179b8:	062e      	lsls	r6, r5, #24
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	d501      	bpl.n	80179c2 <_printf_i+0x1be>
 80179be:	6019      	str	r1, [r3, #0]
 80179c0:	e002      	b.n	80179c8 <_printf_i+0x1c4>
 80179c2:	0668      	lsls	r0, r5, #25
 80179c4:	d5fb      	bpl.n	80179be <_printf_i+0x1ba>
 80179c6:	8019      	strh	r1, [r3, #0]
 80179c8:	2300      	movs	r3, #0
 80179ca:	6123      	str	r3, [r4, #16]
 80179cc:	4616      	mov	r6, r2
 80179ce:	e7bc      	b.n	801794a <_printf_i+0x146>
 80179d0:	6833      	ldr	r3, [r6, #0]
 80179d2:	1d1a      	adds	r2, r3, #4
 80179d4:	6032      	str	r2, [r6, #0]
 80179d6:	681e      	ldr	r6, [r3, #0]
 80179d8:	6862      	ldr	r2, [r4, #4]
 80179da:	2100      	movs	r1, #0
 80179dc:	4630      	mov	r0, r6
 80179de:	f7e8 fc2f 	bl	8000240 <memchr>
 80179e2:	b108      	cbz	r0, 80179e8 <_printf_i+0x1e4>
 80179e4:	1b80      	subs	r0, r0, r6
 80179e6:	6060      	str	r0, [r4, #4]
 80179e8:	6863      	ldr	r3, [r4, #4]
 80179ea:	6123      	str	r3, [r4, #16]
 80179ec:	2300      	movs	r3, #0
 80179ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80179f2:	e7aa      	b.n	801794a <_printf_i+0x146>
 80179f4:	6923      	ldr	r3, [r4, #16]
 80179f6:	4632      	mov	r2, r6
 80179f8:	4649      	mov	r1, r9
 80179fa:	4640      	mov	r0, r8
 80179fc:	47d0      	blx	sl
 80179fe:	3001      	adds	r0, #1
 8017a00:	d0ad      	beq.n	801795e <_printf_i+0x15a>
 8017a02:	6823      	ldr	r3, [r4, #0]
 8017a04:	079b      	lsls	r3, r3, #30
 8017a06:	d413      	bmi.n	8017a30 <_printf_i+0x22c>
 8017a08:	68e0      	ldr	r0, [r4, #12]
 8017a0a:	9b03      	ldr	r3, [sp, #12]
 8017a0c:	4298      	cmp	r0, r3
 8017a0e:	bfb8      	it	lt
 8017a10:	4618      	movlt	r0, r3
 8017a12:	e7a6      	b.n	8017962 <_printf_i+0x15e>
 8017a14:	2301      	movs	r3, #1
 8017a16:	4632      	mov	r2, r6
 8017a18:	4649      	mov	r1, r9
 8017a1a:	4640      	mov	r0, r8
 8017a1c:	47d0      	blx	sl
 8017a1e:	3001      	adds	r0, #1
 8017a20:	d09d      	beq.n	801795e <_printf_i+0x15a>
 8017a22:	3501      	adds	r5, #1
 8017a24:	68e3      	ldr	r3, [r4, #12]
 8017a26:	9903      	ldr	r1, [sp, #12]
 8017a28:	1a5b      	subs	r3, r3, r1
 8017a2a:	42ab      	cmp	r3, r5
 8017a2c:	dcf2      	bgt.n	8017a14 <_printf_i+0x210>
 8017a2e:	e7eb      	b.n	8017a08 <_printf_i+0x204>
 8017a30:	2500      	movs	r5, #0
 8017a32:	f104 0619 	add.w	r6, r4, #25
 8017a36:	e7f5      	b.n	8017a24 <_printf_i+0x220>
 8017a38:	0801b4ff 	.word	0x0801b4ff
 8017a3c:	0801b510 	.word	0x0801b510

08017a40 <__sflush_r>:
 8017a40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a48:	0716      	lsls	r6, r2, #28
 8017a4a:	4605      	mov	r5, r0
 8017a4c:	460c      	mov	r4, r1
 8017a4e:	d454      	bmi.n	8017afa <__sflush_r+0xba>
 8017a50:	684b      	ldr	r3, [r1, #4]
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	dc02      	bgt.n	8017a5c <__sflush_r+0x1c>
 8017a56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	dd48      	ble.n	8017aee <__sflush_r+0xae>
 8017a5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017a5e:	2e00      	cmp	r6, #0
 8017a60:	d045      	beq.n	8017aee <__sflush_r+0xae>
 8017a62:	2300      	movs	r3, #0
 8017a64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017a68:	682f      	ldr	r7, [r5, #0]
 8017a6a:	6a21      	ldr	r1, [r4, #32]
 8017a6c:	602b      	str	r3, [r5, #0]
 8017a6e:	d030      	beq.n	8017ad2 <__sflush_r+0x92>
 8017a70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017a72:	89a3      	ldrh	r3, [r4, #12]
 8017a74:	0759      	lsls	r1, r3, #29
 8017a76:	d505      	bpl.n	8017a84 <__sflush_r+0x44>
 8017a78:	6863      	ldr	r3, [r4, #4]
 8017a7a:	1ad2      	subs	r2, r2, r3
 8017a7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017a7e:	b10b      	cbz	r3, 8017a84 <__sflush_r+0x44>
 8017a80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017a82:	1ad2      	subs	r2, r2, r3
 8017a84:	2300      	movs	r3, #0
 8017a86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017a88:	6a21      	ldr	r1, [r4, #32]
 8017a8a:	4628      	mov	r0, r5
 8017a8c:	47b0      	blx	r6
 8017a8e:	1c43      	adds	r3, r0, #1
 8017a90:	89a3      	ldrh	r3, [r4, #12]
 8017a92:	d106      	bne.n	8017aa2 <__sflush_r+0x62>
 8017a94:	6829      	ldr	r1, [r5, #0]
 8017a96:	291d      	cmp	r1, #29
 8017a98:	d82b      	bhi.n	8017af2 <__sflush_r+0xb2>
 8017a9a:	4a2a      	ldr	r2, [pc, #168]	@ (8017b44 <__sflush_r+0x104>)
 8017a9c:	40ca      	lsrs	r2, r1
 8017a9e:	07d6      	lsls	r6, r2, #31
 8017aa0:	d527      	bpl.n	8017af2 <__sflush_r+0xb2>
 8017aa2:	2200      	movs	r2, #0
 8017aa4:	6062      	str	r2, [r4, #4]
 8017aa6:	04d9      	lsls	r1, r3, #19
 8017aa8:	6922      	ldr	r2, [r4, #16]
 8017aaa:	6022      	str	r2, [r4, #0]
 8017aac:	d504      	bpl.n	8017ab8 <__sflush_r+0x78>
 8017aae:	1c42      	adds	r2, r0, #1
 8017ab0:	d101      	bne.n	8017ab6 <__sflush_r+0x76>
 8017ab2:	682b      	ldr	r3, [r5, #0]
 8017ab4:	b903      	cbnz	r3, 8017ab8 <__sflush_r+0x78>
 8017ab6:	6560      	str	r0, [r4, #84]	@ 0x54
 8017ab8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017aba:	602f      	str	r7, [r5, #0]
 8017abc:	b1b9      	cbz	r1, 8017aee <__sflush_r+0xae>
 8017abe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017ac2:	4299      	cmp	r1, r3
 8017ac4:	d002      	beq.n	8017acc <__sflush_r+0x8c>
 8017ac6:	4628      	mov	r0, r5
 8017ac8:	f7ff fb4a 	bl	8017160 <_free_r>
 8017acc:	2300      	movs	r3, #0
 8017ace:	6363      	str	r3, [r4, #52]	@ 0x34
 8017ad0:	e00d      	b.n	8017aee <__sflush_r+0xae>
 8017ad2:	2301      	movs	r3, #1
 8017ad4:	4628      	mov	r0, r5
 8017ad6:	47b0      	blx	r6
 8017ad8:	4602      	mov	r2, r0
 8017ada:	1c50      	adds	r0, r2, #1
 8017adc:	d1c9      	bne.n	8017a72 <__sflush_r+0x32>
 8017ade:	682b      	ldr	r3, [r5, #0]
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d0c6      	beq.n	8017a72 <__sflush_r+0x32>
 8017ae4:	2b1d      	cmp	r3, #29
 8017ae6:	d001      	beq.n	8017aec <__sflush_r+0xac>
 8017ae8:	2b16      	cmp	r3, #22
 8017aea:	d11e      	bne.n	8017b2a <__sflush_r+0xea>
 8017aec:	602f      	str	r7, [r5, #0]
 8017aee:	2000      	movs	r0, #0
 8017af0:	e022      	b.n	8017b38 <__sflush_r+0xf8>
 8017af2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017af6:	b21b      	sxth	r3, r3
 8017af8:	e01b      	b.n	8017b32 <__sflush_r+0xf2>
 8017afa:	690f      	ldr	r7, [r1, #16]
 8017afc:	2f00      	cmp	r7, #0
 8017afe:	d0f6      	beq.n	8017aee <__sflush_r+0xae>
 8017b00:	0793      	lsls	r3, r2, #30
 8017b02:	680e      	ldr	r6, [r1, #0]
 8017b04:	bf08      	it	eq
 8017b06:	694b      	ldreq	r3, [r1, #20]
 8017b08:	600f      	str	r7, [r1, #0]
 8017b0a:	bf18      	it	ne
 8017b0c:	2300      	movne	r3, #0
 8017b0e:	eba6 0807 	sub.w	r8, r6, r7
 8017b12:	608b      	str	r3, [r1, #8]
 8017b14:	f1b8 0f00 	cmp.w	r8, #0
 8017b18:	dde9      	ble.n	8017aee <__sflush_r+0xae>
 8017b1a:	6a21      	ldr	r1, [r4, #32]
 8017b1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017b1e:	4643      	mov	r3, r8
 8017b20:	463a      	mov	r2, r7
 8017b22:	4628      	mov	r0, r5
 8017b24:	47b0      	blx	r6
 8017b26:	2800      	cmp	r0, #0
 8017b28:	dc08      	bgt.n	8017b3c <__sflush_r+0xfc>
 8017b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b32:	81a3      	strh	r3, [r4, #12]
 8017b34:	f04f 30ff 	mov.w	r0, #4294967295
 8017b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b3c:	4407      	add	r7, r0
 8017b3e:	eba8 0800 	sub.w	r8, r8, r0
 8017b42:	e7e7      	b.n	8017b14 <__sflush_r+0xd4>
 8017b44:	20400001 	.word	0x20400001

08017b48 <_fflush_r>:
 8017b48:	b538      	push	{r3, r4, r5, lr}
 8017b4a:	690b      	ldr	r3, [r1, #16]
 8017b4c:	4605      	mov	r5, r0
 8017b4e:	460c      	mov	r4, r1
 8017b50:	b913      	cbnz	r3, 8017b58 <_fflush_r+0x10>
 8017b52:	2500      	movs	r5, #0
 8017b54:	4628      	mov	r0, r5
 8017b56:	bd38      	pop	{r3, r4, r5, pc}
 8017b58:	b118      	cbz	r0, 8017b62 <_fflush_r+0x1a>
 8017b5a:	6a03      	ldr	r3, [r0, #32]
 8017b5c:	b90b      	cbnz	r3, 8017b62 <_fflush_r+0x1a>
 8017b5e:	f7ff f91b 	bl	8016d98 <__sinit>
 8017b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d0f3      	beq.n	8017b52 <_fflush_r+0xa>
 8017b6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017b6c:	07d0      	lsls	r0, r2, #31
 8017b6e:	d404      	bmi.n	8017b7a <_fflush_r+0x32>
 8017b70:	0599      	lsls	r1, r3, #22
 8017b72:	d402      	bmi.n	8017b7a <_fflush_r+0x32>
 8017b74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017b76:	f7ff fae2 	bl	801713e <__retarget_lock_acquire_recursive>
 8017b7a:	4628      	mov	r0, r5
 8017b7c:	4621      	mov	r1, r4
 8017b7e:	f7ff ff5f 	bl	8017a40 <__sflush_r>
 8017b82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017b84:	07da      	lsls	r2, r3, #31
 8017b86:	4605      	mov	r5, r0
 8017b88:	d4e4      	bmi.n	8017b54 <_fflush_r+0xc>
 8017b8a:	89a3      	ldrh	r3, [r4, #12]
 8017b8c:	059b      	lsls	r3, r3, #22
 8017b8e:	d4e1      	bmi.n	8017b54 <_fflush_r+0xc>
 8017b90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017b92:	f7ff fad5 	bl	8017140 <__retarget_lock_release_recursive>
 8017b96:	e7dd      	b.n	8017b54 <_fflush_r+0xc>

08017b98 <__swbuf_r>:
 8017b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b9a:	460e      	mov	r6, r1
 8017b9c:	4614      	mov	r4, r2
 8017b9e:	4605      	mov	r5, r0
 8017ba0:	b118      	cbz	r0, 8017baa <__swbuf_r+0x12>
 8017ba2:	6a03      	ldr	r3, [r0, #32]
 8017ba4:	b90b      	cbnz	r3, 8017baa <__swbuf_r+0x12>
 8017ba6:	f7ff f8f7 	bl	8016d98 <__sinit>
 8017baa:	69a3      	ldr	r3, [r4, #24]
 8017bac:	60a3      	str	r3, [r4, #8]
 8017bae:	89a3      	ldrh	r3, [r4, #12]
 8017bb0:	071a      	lsls	r2, r3, #28
 8017bb2:	d501      	bpl.n	8017bb8 <__swbuf_r+0x20>
 8017bb4:	6923      	ldr	r3, [r4, #16]
 8017bb6:	b943      	cbnz	r3, 8017bca <__swbuf_r+0x32>
 8017bb8:	4621      	mov	r1, r4
 8017bba:	4628      	mov	r0, r5
 8017bbc:	f000 f82a 	bl	8017c14 <__swsetup_r>
 8017bc0:	b118      	cbz	r0, 8017bca <__swbuf_r+0x32>
 8017bc2:	f04f 37ff 	mov.w	r7, #4294967295
 8017bc6:	4638      	mov	r0, r7
 8017bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bca:	6823      	ldr	r3, [r4, #0]
 8017bcc:	6922      	ldr	r2, [r4, #16]
 8017bce:	1a98      	subs	r0, r3, r2
 8017bd0:	6963      	ldr	r3, [r4, #20]
 8017bd2:	b2f6      	uxtb	r6, r6
 8017bd4:	4283      	cmp	r3, r0
 8017bd6:	4637      	mov	r7, r6
 8017bd8:	dc05      	bgt.n	8017be6 <__swbuf_r+0x4e>
 8017bda:	4621      	mov	r1, r4
 8017bdc:	4628      	mov	r0, r5
 8017bde:	f7ff ffb3 	bl	8017b48 <_fflush_r>
 8017be2:	2800      	cmp	r0, #0
 8017be4:	d1ed      	bne.n	8017bc2 <__swbuf_r+0x2a>
 8017be6:	68a3      	ldr	r3, [r4, #8]
 8017be8:	3b01      	subs	r3, #1
 8017bea:	60a3      	str	r3, [r4, #8]
 8017bec:	6823      	ldr	r3, [r4, #0]
 8017bee:	1c5a      	adds	r2, r3, #1
 8017bf0:	6022      	str	r2, [r4, #0]
 8017bf2:	701e      	strb	r6, [r3, #0]
 8017bf4:	6962      	ldr	r2, [r4, #20]
 8017bf6:	1c43      	adds	r3, r0, #1
 8017bf8:	429a      	cmp	r2, r3
 8017bfa:	d004      	beq.n	8017c06 <__swbuf_r+0x6e>
 8017bfc:	89a3      	ldrh	r3, [r4, #12]
 8017bfe:	07db      	lsls	r3, r3, #31
 8017c00:	d5e1      	bpl.n	8017bc6 <__swbuf_r+0x2e>
 8017c02:	2e0a      	cmp	r6, #10
 8017c04:	d1df      	bne.n	8017bc6 <__swbuf_r+0x2e>
 8017c06:	4621      	mov	r1, r4
 8017c08:	4628      	mov	r0, r5
 8017c0a:	f7ff ff9d 	bl	8017b48 <_fflush_r>
 8017c0e:	2800      	cmp	r0, #0
 8017c10:	d0d9      	beq.n	8017bc6 <__swbuf_r+0x2e>
 8017c12:	e7d6      	b.n	8017bc2 <__swbuf_r+0x2a>

08017c14 <__swsetup_r>:
 8017c14:	b538      	push	{r3, r4, r5, lr}
 8017c16:	4b29      	ldr	r3, [pc, #164]	@ (8017cbc <__swsetup_r+0xa8>)
 8017c18:	4605      	mov	r5, r0
 8017c1a:	6818      	ldr	r0, [r3, #0]
 8017c1c:	460c      	mov	r4, r1
 8017c1e:	b118      	cbz	r0, 8017c28 <__swsetup_r+0x14>
 8017c20:	6a03      	ldr	r3, [r0, #32]
 8017c22:	b90b      	cbnz	r3, 8017c28 <__swsetup_r+0x14>
 8017c24:	f7ff f8b8 	bl	8016d98 <__sinit>
 8017c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c2c:	0719      	lsls	r1, r3, #28
 8017c2e:	d422      	bmi.n	8017c76 <__swsetup_r+0x62>
 8017c30:	06da      	lsls	r2, r3, #27
 8017c32:	d407      	bmi.n	8017c44 <__swsetup_r+0x30>
 8017c34:	2209      	movs	r2, #9
 8017c36:	602a      	str	r2, [r5, #0]
 8017c38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017c3c:	81a3      	strh	r3, [r4, #12]
 8017c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8017c42:	e033      	b.n	8017cac <__swsetup_r+0x98>
 8017c44:	0758      	lsls	r0, r3, #29
 8017c46:	d512      	bpl.n	8017c6e <__swsetup_r+0x5a>
 8017c48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017c4a:	b141      	cbz	r1, 8017c5e <__swsetup_r+0x4a>
 8017c4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017c50:	4299      	cmp	r1, r3
 8017c52:	d002      	beq.n	8017c5a <__swsetup_r+0x46>
 8017c54:	4628      	mov	r0, r5
 8017c56:	f7ff fa83 	bl	8017160 <_free_r>
 8017c5a:	2300      	movs	r3, #0
 8017c5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8017c5e:	89a3      	ldrh	r3, [r4, #12]
 8017c60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017c64:	81a3      	strh	r3, [r4, #12]
 8017c66:	2300      	movs	r3, #0
 8017c68:	6063      	str	r3, [r4, #4]
 8017c6a:	6923      	ldr	r3, [r4, #16]
 8017c6c:	6023      	str	r3, [r4, #0]
 8017c6e:	89a3      	ldrh	r3, [r4, #12]
 8017c70:	f043 0308 	orr.w	r3, r3, #8
 8017c74:	81a3      	strh	r3, [r4, #12]
 8017c76:	6923      	ldr	r3, [r4, #16]
 8017c78:	b94b      	cbnz	r3, 8017c8e <__swsetup_r+0x7a>
 8017c7a:	89a3      	ldrh	r3, [r4, #12]
 8017c7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017c80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017c84:	d003      	beq.n	8017c8e <__swsetup_r+0x7a>
 8017c86:	4621      	mov	r1, r4
 8017c88:	4628      	mov	r0, r5
 8017c8a:	f000 f887 	bl	8017d9c <__smakebuf_r>
 8017c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c92:	f013 0201 	ands.w	r2, r3, #1
 8017c96:	d00a      	beq.n	8017cae <__swsetup_r+0x9a>
 8017c98:	2200      	movs	r2, #0
 8017c9a:	60a2      	str	r2, [r4, #8]
 8017c9c:	6962      	ldr	r2, [r4, #20]
 8017c9e:	4252      	negs	r2, r2
 8017ca0:	61a2      	str	r2, [r4, #24]
 8017ca2:	6922      	ldr	r2, [r4, #16]
 8017ca4:	b942      	cbnz	r2, 8017cb8 <__swsetup_r+0xa4>
 8017ca6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017caa:	d1c5      	bne.n	8017c38 <__swsetup_r+0x24>
 8017cac:	bd38      	pop	{r3, r4, r5, pc}
 8017cae:	0799      	lsls	r1, r3, #30
 8017cb0:	bf58      	it	pl
 8017cb2:	6962      	ldrpl	r2, [r4, #20]
 8017cb4:	60a2      	str	r2, [r4, #8]
 8017cb6:	e7f4      	b.n	8017ca2 <__swsetup_r+0x8e>
 8017cb8:	2000      	movs	r0, #0
 8017cba:	e7f7      	b.n	8017cac <__swsetup_r+0x98>
 8017cbc:	20000080 	.word	0x20000080

08017cc0 <memmove>:
 8017cc0:	4288      	cmp	r0, r1
 8017cc2:	b510      	push	{r4, lr}
 8017cc4:	eb01 0402 	add.w	r4, r1, r2
 8017cc8:	d902      	bls.n	8017cd0 <memmove+0x10>
 8017cca:	4284      	cmp	r4, r0
 8017ccc:	4623      	mov	r3, r4
 8017cce:	d807      	bhi.n	8017ce0 <memmove+0x20>
 8017cd0:	1e43      	subs	r3, r0, #1
 8017cd2:	42a1      	cmp	r1, r4
 8017cd4:	d008      	beq.n	8017ce8 <memmove+0x28>
 8017cd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017cda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017cde:	e7f8      	b.n	8017cd2 <memmove+0x12>
 8017ce0:	4402      	add	r2, r0
 8017ce2:	4601      	mov	r1, r0
 8017ce4:	428a      	cmp	r2, r1
 8017ce6:	d100      	bne.n	8017cea <memmove+0x2a>
 8017ce8:	bd10      	pop	{r4, pc}
 8017cea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017cee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017cf2:	e7f7      	b.n	8017ce4 <memmove+0x24>

08017cf4 <_realloc_r>:
 8017cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cf8:	4607      	mov	r7, r0
 8017cfa:	4614      	mov	r4, r2
 8017cfc:	460d      	mov	r5, r1
 8017cfe:	b921      	cbnz	r1, 8017d0a <_realloc_r+0x16>
 8017d00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d04:	4611      	mov	r1, r2
 8017d06:	f7fe bf2f 	b.w	8016b68 <_malloc_r>
 8017d0a:	b92a      	cbnz	r2, 8017d18 <_realloc_r+0x24>
 8017d0c:	f7ff fa28 	bl	8017160 <_free_r>
 8017d10:	4625      	mov	r5, r4
 8017d12:	4628      	mov	r0, r5
 8017d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d18:	f000 f89e 	bl	8017e58 <_malloc_usable_size_r>
 8017d1c:	4284      	cmp	r4, r0
 8017d1e:	4606      	mov	r6, r0
 8017d20:	d802      	bhi.n	8017d28 <_realloc_r+0x34>
 8017d22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017d26:	d8f4      	bhi.n	8017d12 <_realloc_r+0x1e>
 8017d28:	4621      	mov	r1, r4
 8017d2a:	4638      	mov	r0, r7
 8017d2c:	f7fe ff1c 	bl	8016b68 <_malloc_r>
 8017d30:	4680      	mov	r8, r0
 8017d32:	b908      	cbnz	r0, 8017d38 <_realloc_r+0x44>
 8017d34:	4645      	mov	r5, r8
 8017d36:	e7ec      	b.n	8017d12 <_realloc_r+0x1e>
 8017d38:	42b4      	cmp	r4, r6
 8017d3a:	4622      	mov	r2, r4
 8017d3c:	4629      	mov	r1, r5
 8017d3e:	bf28      	it	cs
 8017d40:	4632      	movcs	r2, r6
 8017d42:	f7ff f9fe 	bl	8017142 <memcpy>
 8017d46:	4629      	mov	r1, r5
 8017d48:	4638      	mov	r0, r7
 8017d4a:	f7ff fa09 	bl	8017160 <_free_r>
 8017d4e:	e7f1      	b.n	8017d34 <_realloc_r+0x40>

08017d50 <__swhatbuf_r>:
 8017d50:	b570      	push	{r4, r5, r6, lr}
 8017d52:	460c      	mov	r4, r1
 8017d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d58:	2900      	cmp	r1, #0
 8017d5a:	b096      	sub	sp, #88	@ 0x58
 8017d5c:	4615      	mov	r5, r2
 8017d5e:	461e      	mov	r6, r3
 8017d60:	da0d      	bge.n	8017d7e <__swhatbuf_r+0x2e>
 8017d62:	89a3      	ldrh	r3, [r4, #12]
 8017d64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017d68:	f04f 0100 	mov.w	r1, #0
 8017d6c:	bf14      	ite	ne
 8017d6e:	2340      	movne	r3, #64	@ 0x40
 8017d70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017d74:	2000      	movs	r0, #0
 8017d76:	6031      	str	r1, [r6, #0]
 8017d78:	602b      	str	r3, [r5, #0]
 8017d7a:	b016      	add	sp, #88	@ 0x58
 8017d7c:	bd70      	pop	{r4, r5, r6, pc}
 8017d7e:	466a      	mov	r2, sp
 8017d80:	f000 f848 	bl	8017e14 <_fstat_r>
 8017d84:	2800      	cmp	r0, #0
 8017d86:	dbec      	blt.n	8017d62 <__swhatbuf_r+0x12>
 8017d88:	9901      	ldr	r1, [sp, #4]
 8017d8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017d8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017d92:	4259      	negs	r1, r3
 8017d94:	4159      	adcs	r1, r3
 8017d96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017d9a:	e7eb      	b.n	8017d74 <__swhatbuf_r+0x24>

08017d9c <__smakebuf_r>:
 8017d9c:	898b      	ldrh	r3, [r1, #12]
 8017d9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017da0:	079d      	lsls	r5, r3, #30
 8017da2:	4606      	mov	r6, r0
 8017da4:	460c      	mov	r4, r1
 8017da6:	d507      	bpl.n	8017db8 <__smakebuf_r+0x1c>
 8017da8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017dac:	6023      	str	r3, [r4, #0]
 8017dae:	6123      	str	r3, [r4, #16]
 8017db0:	2301      	movs	r3, #1
 8017db2:	6163      	str	r3, [r4, #20]
 8017db4:	b003      	add	sp, #12
 8017db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017db8:	ab01      	add	r3, sp, #4
 8017dba:	466a      	mov	r2, sp
 8017dbc:	f7ff ffc8 	bl	8017d50 <__swhatbuf_r>
 8017dc0:	9f00      	ldr	r7, [sp, #0]
 8017dc2:	4605      	mov	r5, r0
 8017dc4:	4639      	mov	r1, r7
 8017dc6:	4630      	mov	r0, r6
 8017dc8:	f7fe fece 	bl	8016b68 <_malloc_r>
 8017dcc:	b948      	cbnz	r0, 8017de2 <__smakebuf_r+0x46>
 8017dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017dd2:	059a      	lsls	r2, r3, #22
 8017dd4:	d4ee      	bmi.n	8017db4 <__smakebuf_r+0x18>
 8017dd6:	f023 0303 	bic.w	r3, r3, #3
 8017dda:	f043 0302 	orr.w	r3, r3, #2
 8017dde:	81a3      	strh	r3, [r4, #12]
 8017de0:	e7e2      	b.n	8017da8 <__smakebuf_r+0xc>
 8017de2:	89a3      	ldrh	r3, [r4, #12]
 8017de4:	6020      	str	r0, [r4, #0]
 8017de6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017dea:	81a3      	strh	r3, [r4, #12]
 8017dec:	9b01      	ldr	r3, [sp, #4]
 8017dee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017df2:	b15b      	cbz	r3, 8017e0c <__smakebuf_r+0x70>
 8017df4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017df8:	4630      	mov	r0, r6
 8017dfa:	f000 f81d 	bl	8017e38 <_isatty_r>
 8017dfe:	b128      	cbz	r0, 8017e0c <__smakebuf_r+0x70>
 8017e00:	89a3      	ldrh	r3, [r4, #12]
 8017e02:	f023 0303 	bic.w	r3, r3, #3
 8017e06:	f043 0301 	orr.w	r3, r3, #1
 8017e0a:	81a3      	strh	r3, [r4, #12]
 8017e0c:	89a3      	ldrh	r3, [r4, #12]
 8017e0e:	431d      	orrs	r5, r3
 8017e10:	81a5      	strh	r5, [r4, #12]
 8017e12:	e7cf      	b.n	8017db4 <__smakebuf_r+0x18>

08017e14 <_fstat_r>:
 8017e14:	b538      	push	{r3, r4, r5, lr}
 8017e16:	4d07      	ldr	r5, [pc, #28]	@ (8017e34 <_fstat_r+0x20>)
 8017e18:	2300      	movs	r3, #0
 8017e1a:	4604      	mov	r4, r0
 8017e1c:	4608      	mov	r0, r1
 8017e1e:	4611      	mov	r1, r2
 8017e20:	602b      	str	r3, [r5, #0]
 8017e22:	f7ed f814 	bl	8004e4e <_fstat>
 8017e26:	1c43      	adds	r3, r0, #1
 8017e28:	d102      	bne.n	8017e30 <_fstat_r+0x1c>
 8017e2a:	682b      	ldr	r3, [r5, #0]
 8017e2c:	b103      	cbz	r3, 8017e30 <_fstat_r+0x1c>
 8017e2e:	6023      	str	r3, [r4, #0]
 8017e30:	bd38      	pop	{r3, r4, r5, pc}
 8017e32:	bf00      	nop
 8017e34:	20012088 	.word	0x20012088

08017e38 <_isatty_r>:
 8017e38:	b538      	push	{r3, r4, r5, lr}
 8017e3a:	4d06      	ldr	r5, [pc, #24]	@ (8017e54 <_isatty_r+0x1c>)
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	4604      	mov	r4, r0
 8017e40:	4608      	mov	r0, r1
 8017e42:	602b      	str	r3, [r5, #0]
 8017e44:	f7ed f813 	bl	8004e6e <_isatty>
 8017e48:	1c43      	adds	r3, r0, #1
 8017e4a:	d102      	bne.n	8017e52 <_isatty_r+0x1a>
 8017e4c:	682b      	ldr	r3, [r5, #0]
 8017e4e:	b103      	cbz	r3, 8017e52 <_isatty_r+0x1a>
 8017e50:	6023      	str	r3, [r4, #0]
 8017e52:	bd38      	pop	{r3, r4, r5, pc}
 8017e54:	20012088 	.word	0x20012088

08017e58 <_malloc_usable_size_r>:
 8017e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e5c:	1f18      	subs	r0, r3, #4
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	bfbc      	itt	lt
 8017e62:	580b      	ldrlt	r3, [r1, r0]
 8017e64:	18c0      	addlt	r0, r0, r3
 8017e66:	4770      	bx	lr

08017e68 <_init>:
 8017e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e6a:	bf00      	nop
 8017e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e6e:	bc08      	pop	{r3}
 8017e70:	469e      	mov	lr, r3
 8017e72:	4770      	bx	lr

08017e74 <_fini>:
 8017e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e76:	bf00      	nop
 8017e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e7a:	bc08      	pop	{r3}
 8017e7c:	469e      	mov	lr, r3
 8017e7e:	4770      	bx	lr
