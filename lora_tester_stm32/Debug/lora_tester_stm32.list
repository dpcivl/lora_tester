
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016464  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000391c  08016634  08016634  00017634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019f50  08019f50  0001b204  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08019f50  08019f50  0001af50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019f58  08019f58  0001b204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019f58  08019f58  0001af58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019f5c  08019f5c  0001af5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  08019f60  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000c4  0801a024  0001b0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000164  0801a0c4  0001b164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00011e64  20000204  0801a164  0001b204  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20012068  0801a164  0001c068  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001b204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004243e  00000000  00000000  0001b234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008f8e  00000000  00000000  0005d672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003748  00000000  00000000  00066600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002b1a  00000000  00000000  00069d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003715c  00000000  00000000  0006c862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004af03  00000000  00000000  000a39be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012c6fb  00000000  00000000  000ee8c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0021afbc  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f074  00000000  00000000  0021b000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  0022a074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000204 	.word	0x20000204
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801661c 	.word	0x0801661c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000208 	.word	0x20000208
 800020c:	0801661c 	.word	0x0801661c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <CommandSender_Send>:
#include <stddef.h>
#include <string.h>
#include <stdio.h>

void CommandSender_Send(const char* command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (command != NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d051      	beq.n	80006be <CommandSender_Send+0xb2>
        int len = strlen(command);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe02 	bl	8000224 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
        
        // 전송할 명령어를 명확히 로깅 (특수 문자도 표시)
        LOG_INFO("📤 TX: '%s' (%d bytes)", command, len);
 8000624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4929      	ldr	r1, [pc, #164]	@ (80006d0 <CommandSender_Send+0xc4>)
 800062a:	2001      	movs	r0, #1
 800062c:	f004 fa34 	bl	8004a98 <LOGGER_SendFormatted>
        
        // 헥스 덤프도 표시 (처음 20바이트까지)
        if (len > 0) {
 8000630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000632:	2b00      	cmp	r3, #0
 8000634:	dd2c      	ble.n	8000690 <CommandSender_Send+0x84>
            char hex_dump[64] = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f015 fbf2 	bl	8015e28 <memset>
            int dump_len = (len > 20) ? 20 : len;
 8000644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000646:	2b14      	cmp	r3, #20
 8000648:	bfa8      	it	ge
 800064a:	2314      	movge	r3, #20
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < dump_len; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
 8000652:	e012      	b.n	800067a <CommandSender_Send+0x6e>
                snprintf(hex_dump + i*3, 4, "%02X ", (unsigned char)command[i]);
 8000654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	1898      	adds	r0, r3, r2
 8000664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <CommandSender_Send+0xc8>)
 800066e:	2104      	movs	r1, #4
 8000670:	f015 fb46 	bl	8015d00 <sniprintf>
            for (int i = 0; i < dump_len; i++) {
 8000674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000676:	3301      	adds	r3, #1
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
 800067a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800067c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800067e:	429a      	cmp	r2, r3
 8000680:	dbe8      	blt.n	8000654 <CommandSender_Send+0x48>
            }
            LOG_DEBUG("[CommandSender] Hex: %s", hex_dump);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	461a      	mov	r2, r3
 8000688:	4913      	ldr	r1, [pc, #76]	@ (80006d8 <CommandSender_Send+0xcc>)
 800068a:	2000      	movs	r0, #0
 800068c:	f004 fa04 	bl	8004a98 <LOGGER_SendFormatted>
        }
        
        UartStatus status = UART_Send(command);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f004 fae5 	bl	8004c60 <UART_Send>
 8000696:	4603      	mov	r3, r0
 8000698:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        
        if (status == UART_STATUS_OK) {
 800069c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d104      	bne.n	80006ae <CommandSender_Send+0xa2>
            LOG_DEBUG("[CommandSender] ✓ Command sent successfully");
 80006a4:	490d      	ldr	r1, [pc, #52]	@ (80006dc <CommandSender_Send+0xd0>)
 80006a6:	2000      	movs	r0, #0
 80006a8:	f004 f9f6 	bl	8004a98 <LOGGER_SendFormatted>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
        }
    } else {
        LOG_WARN("[CommandSender] Attempted to send NULL command");
    }
}
 80006ac:	e00b      	b.n	80006c6 <CommandSender_Send+0xba>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
 80006ae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006b2:	461a      	mov	r2, r3
 80006b4:	490a      	ldr	r1, [pc, #40]	@ (80006e0 <CommandSender_Send+0xd4>)
 80006b6:	2003      	movs	r0, #3
 80006b8:	f004 f9ee 	bl	8004a98 <LOGGER_SendFormatted>
}
 80006bc:	e003      	b.n	80006c6 <CommandSender_Send+0xba>
        LOG_WARN("[CommandSender] Attempted to send NULL command");
 80006be:	4909      	ldr	r1, [pc, #36]	@ (80006e4 <CommandSender_Send+0xd8>)
 80006c0:	2002      	movs	r0, #2
 80006c2:	f004 f9e9 	bl	8004a98 <LOGGER_SendFormatted>
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	@ 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	08016634 	.word	0x08016634
 80006d4:	08016650 	.word	0x08016650
 80006d8:	08016658 	.word	0x08016658
 80006dc:	08016670 	.word	0x08016670
 80006e0:	080166a0 	.word	0x080166a0
 80006e4:	080166d8 	.word	0x080166d8

080006e8 <get_state_name>:
};

const int LORA_DEFAULT_INIT_COMMANDS_COUNT = sizeof(LORA_DEFAULT_INIT_COMMANDS) / sizeof(LORA_DEFAULT_INIT_COMMANDS[0]);

// 상태 이름을 문자열로 변환하는 헬퍼 함수
static const char* get_state_name(LoraState state) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b0a      	cmp	r3, #10
 80006f6:	d82f      	bhi.n	8000758 <get_state_name+0x70>
 80006f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <get_state_name+0x18>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	0800072d 	.word	0x0800072d
 8000704:	08000731 	.word	0x08000731
 8000708:	08000735 	.word	0x08000735
 800070c:	08000739 	.word	0x08000739
 8000710:	0800073d 	.word	0x0800073d
 8000714:	08000741 	.word	0x08000741
 8000718:	08000745 	.word	0x08000745
 800071c:	08000749 	.word	0x08000749
 8000720:	0800074d 	.word	0x0800074d
 8000724:	08000751 	.word	0x08000751
 8000728:	08000755 	.word	0x08000755
        case LORA_STATE_INIT: return "INIT";
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <get_state_name+0x80>)
 800072e:	e014      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_CMD: return "SEND_CMD";
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <get_state_name+0x84>)
 8000732:	e012      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_OK: return "WAIT_OK";
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <get_state_name+0x88>)
 8000736:	e010      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_JOIN: return "SEND_JOIN";
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <get_state_name+0x8c>)
 800073a:	e00e      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_JOIN_OK: return "WAIT_JOIN_OK";
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <get_state_name+0x90>)
 800073e:	e00c      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_PERIODIC: return "SEND_PERIODIC";
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <get_state_name+0x94>)
 8000742:	e00a      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_RESPONSE: return "WAIT_SEND_RESPONSE";
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <get_state_name+0x98>)
 8000746:	e008      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_INTERVAL: return "WAIT_SEND_INTERVAL";
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <get_state_name+0x9c>)
 800074a:	e006      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_JOIN_RETRY: return "JOIN_RETRY";
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <get_state_name+0xa0>)
 800074e:	e004      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_DONE: return "DONE";
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <get_state_name+0xa4>)
 8000752:	e002      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_ERROR: return "ERROR";
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <get_state_name+0xa8>)
 8000756:	e000      	b.n	800075a <get_state_name+0x72>
        default: return "UNKNOWN";
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <get_state_name+0xac>)
    }
}
 800075a:	4618      	mov	r0, r3
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	08016744 	.word	0x08016744
 800076c:	0801674c 	.word	0x0801674c
 8000770:	08016758 	.word	0x08016758
 8000774:	08016760 	.word	0x08016760
 8000778:	0801676c 	.word	0x0801676c
 800077c:	0801677c 	.word	0x0801677c
 8000780:	0801678c 	.word	0x0801678c
 8000784:	080167a0 	.word	0x080167a0
 8000788:	080167b4 	.word	0x080167b4
 800078c:	080167c0 	.word	0x080167c0
 8000790:	080167c8 	.word	0x080167c8
 8000794:	080167d0 	.word	0x080167d0

08000798 <LoraStarter_InitWithDefaults>:
    UART_Connect(port);
    LOG_INFO("[LoRa] UART connected to %s", port);
}

void LoraStarter_InitWithDefaults(LoraStarterContext* ctx, const char* send_message)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d032      	beq.n	800080e <LoraStarter_InitWithDefaults+0x76>
    
    ctx->state = LORA_STATE_INIT;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
    ctx->cmd_index = 0;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
    ctx->commands = LORA_DEFAULT_INIT_COMMANDS;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a18      	ldr	r2, [pc, #96]	@ (8000818 <LoraStarter_InitWithDefaults+0x80>)
 80007b8:	609a      	str	r2, [r3, #8]
    ctx->num_commands = LORA_DEFAULT_INIT_COMMANDS_COUNT;
 80007ba:	2205      	movs	r2, #5
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	60da      	str	r2, [r3, #12]
    ctx->send_message = (send_message != NULL) ? send_message : "TEST";
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <LoraStarter_InitWithDefaults+0x32>
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	e000      	b.n	80007cc <LoraStarter_InitWithDefaults+0x34>
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <LoraStarter_InitWithDefaults+0x84>)
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	61d3      	str	r3, [r2, #28]
    ctx->max_retry_count = 3;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2203      	movs	r2, #3
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->send_interval_ms = 300000;  // 5분 간격
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a11      	ldr	r2, [pc, #68]	@ (8000820 <LoraStarter_InitWithDefaults+0x88>)
 80007da:	615a      	str	r2, [r3, #20]
    ctx->last_send_time = 0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
    ctx->send_count = 0;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
    ctx->error_count = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
    ctx->last_retry_time = 0;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->retry_delay_ms = 1000;  // 1초 초기 지연
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    LOG_INFO("[LoRa] Initialized with defaults - Commands: %d, Message: %s", 
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	68da      	ldr	r2, [r3, #12]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	4907      	ldr	r1, [pc, #28]	@ (8000824 <LoraStarter_InitWithDefaults+0x8c>)
 8000806:	2001      	movs	r0, #1
 8000808:	f004 f946 	bl	8004a98 <LOGGER_SendFormatted>
 800080c:	e000      	b.n	8000810 <LoraStarter_InitWithDefaults+0x78>
    if (ctx == NULL) return;
 800080e:	bf00      	nop
             ctx->num_commands, ctx->send_message);
}
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000000 	.word	0x20000000
 800081c:	080167f4 	.word	0x080167f4
 8000820:	000493e0 	.word	0x000493e0
 8000824:	080167fc 	.word	0x080167fc

08000828 <LoraStarter_Process>:

void LoraStarter_Process(LoraStarterContext* ctx, const char* uart_rx)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b0bf      	sub	sp, #252	@ 0xfc
 800082c:	af02      	add	r7, sp, #8
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	f000 8289 	beq.w	8000d4c <LoraStarter_Process+0x524>

    LoraState old_state = ctx->state;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb

    switch(ctx->state) {
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b08      	cmp	r3, #8
 8000848:	f200 8261 	bhi.w	8000d0e <LoraStarter_Process+0x4e6>
 800084c:	a201      	add	r2, pc, #4	@ (adr r2, 8000854 <LoraStarter_Process+0x2c>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000879 	.word	0x08000879
 8000858:	080008c7 	.word	0x080008c7
 800085c:	0800091d 	.word	0x0800091d
 8000860:	080009d7 	.word	0x080009d7
 8000864:	080009ed 	.word	0x080009ed
 8000868:	08000a3b 	.word	0x08000a3b
 800086c:	08000af9 	.word	0x08000af9
 8000870:	08000c35 	.word	0x08000c35
 8000874:	08000c9b 	.word	0x08000c9b
        case LORA_STATE_INIT:
            ctx->cmd_index = 0;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
            ctx->error_count = 0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
            ctx->state = LORA_STATE_SEND_CMD;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
            // 기본값 설정
            if (ctx->max_retry_count == 0) ctx->max_retry_count = 0; // 0이면 무제한
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800088e:	2b00      	cmp	r3, #0
 8000890:	d102      	bne.n	8000898 <LoraStarter_Process+0x70>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24
            if (ctx->send_message == NULL) ctx->send_message = "Hello";
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <LoraStarter_Process+0x7e>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4aaa      	ldr	r2, [pc, #680]	@ (8000b4c <LoraStarter_Process+0x324>)
 80008a4:	61da      	str	r2, [r3, #28]
            ctx->last_retry_time = 0;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	@ 0x28
            ctx->retry_delay_ms = 1000; // 초기 재시도 지연: 1초
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
            LOG_INFO("[LoRa] Initialized with message: %s, max_retries: %d", 
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	69da      	ldr	r2, [r3, #28]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008bc:	49a4      	ldr	r1, [pc, #656]	@ (8000b50 <LoraStarter_Process+0x328>)
 80008be:	2001      	movs	r0, #1
 80008c0:	f004 f8ea 	bl	8004a98 <LOGGER_SendFormatted>
                    ctx->send_message, ctx->max_retry_count);
            break;
 80008c4:	e22a      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_SEND_CMD:
            if (ctx->cmd_index < ctx->num_commands) {
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	da20      	bge.n	8000914 <LoraStarter_Process+0xec>
                LOG_DEBUG("[LoRa] Sending command %d/%d: %s", 
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	1c59      	adds	r1, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68d8      	ldr	r0, [r3, #12]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689a      	ldr	r2, [r3, #8]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4413      	add	r3, r2
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	4603      	mov	r3, r0
 80008ee:	460a      	mov	r2, r1
 80008f0:	4998      	ldr	r1, [pc, #608]	@ (8000b54 <LoraStarter_Process+0x32c>)
 80008f2:	2000      	movs	r0, #0
 80008f4:	f004 f8d0 	bl	8004a98 <LOGGER_SendFormatted>
                         ctx->cmd_index + 1, ctx->num_commands, ctx->commands[ctx->cmd_index]);
                CommandSender_Send(ctx->commands[ctx->cmd_index]);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fe80 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_OK;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2202      	movs	r2, #2
 8000910:	701a      	strb	r2, [r3, #0]
            } else {
                ctx->state = LORA_STATE_SEND_JOIN;
            }
            break;
 8000912:	e203      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                ctx->state = LORA_STATE_SEND_JOIN;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2203      	movs	r2, #3
 8000918:	701a      	strb	r2, [r3, #0]
            break;
 800091a:	e1ff      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_WAIT_OK:
            if (uart_rx) {
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 81f7 	beq.w	8000d12 <LoraStarter_Process+0x4ea>
                if (is_response_ok(uart_rx)) {
 8000924:	6838      	ldr	r0, [r7, #0]
 8000926:	f000 fa99 	bl	8000e5c <is_response_ok>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d010      	beq.n	8000952 <LoraStarter_Process+0x12a>
                    LOG_DEBUG("[LoRa] Command %d OK received", ctx->cmd_index + 1);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	3301      	adds	r3, #1
 8000936:	461a      	mov	r2, r3
 8000938:	4987      	ldr	r1, [pc, #540]	@ (8000b58 <LoraStarter_Process+0x330>)
 800093a:	2000      	movs	r0, #0
 800093c:	f004 f8ac 	bl	8004a98 <LOGGER_SendFormatted>
                    ctx->cmd_index++;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	605a      	str	r2, [r3, #4]
                    ctx->state = LORA_STATE_SEND_CMD;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 에러 카운터 리셋
                        ctx->state = LORA_STATE_SEND_CMD;
                    }
                }
            }
            break;
 8000950:	e1df      	b.n	8000d12 <LoraStarter_Process+0x4ea>
                } else if (strstr(uart_rx, "ERROR") || strstr(uart_rx, "AT_COMMAND_NOT_FOUND")) {
 8000952:	4982      	ldr	r1, [pc, #520]	@ (8000b5c <LoraStarter_Process+0x334>)
 8000954:	6838      	ldr	r0, [r7, #0]
 8000956:	f015 fa82 	bl	8015e5e <strstr>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d107      	bne.n	8000970 <LoraStarter_Process+0x148>
 8000960:	497f      	ldr	r1, [pc, #508]	@ (8000b60 <LoraStarter_Process+0x338>)
 8000962:	6838      	ldr	r0, [r7, #0]
 8000964:	f015 fa7b 	bl	8015e5e <strstr>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	f000 81d1 	beq.w	8000d12 <LoraStarter_Process+0x4ea>
                    LOG_WARN("[LoRa] Command %d failed: %s", ctx->cmd_index + 1, uart_rx);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	497a      	ldr	r1, [pc, #488]	@ (8000b64 <LoraStarter_Process+0x33c>)
 800097a:	2002      	movs	r0, #2
 800097c:	f004 f88c 	bl	8004a98 <LOGGER_SendFormatted>
                    ctx->error_count++;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6a1b      	ldr	r3, [r3, #32]
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	621a      	str	r2, [r3, #32]
                    if (ctx->error_count < 3) {
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	2b02      	cmp	r3, #2
 8000990:	dc0d      	bgt.n	80009ae <LoraStarter_Process+0x186>
                        LOG_INFO("[LoRa] Retrying command %d (attempt %d/3)", ctx->cmd_index + 1, ctx->error_count + 1);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6a1b      	ldr	r3, [r3, #32]
 800099c:	3301      	adds	r3, #1
 800099e:	4972      	ldr	r1, [pc, #456]	@ (8000b68 <LoraStarter_Process+0x340>)
 80009a0:	2001      	movs	r0, #1
 80009a2:	f004 f879 	bl	8004a98 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_CMD; // 같은 명령 재시도
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
            break;
 80009ac:	e1b1      	b.n	8000d12 <LoraStarter_Process+0x4ea>
                        LOG_WARN("[LoRa] Command %d failed after 3 attempts, skipping to next", ctx->cmd_index + 1);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	461a      	mov	r2, r3
 80009b6:	496d      	ldr	r1, [pc, #436]	@ (8000b6c <LoraStarter_Process+0x344>)
 80009b8:	2002      	movs	r0, #2
 80009ba:	f004 f86d 	bl	8004a98 <LOGGER_SendFormatted>
                        ctx->cmd_index++; // 다음 명령으로 건너뛰기
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	605a      	str	r2, [r3, #4]
                        ctx->error_count = 0; // 에러 카운터 리셋
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
                        ctx->state = LORA_STATE_SEND_CMD;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
            break;
 80009d4:	e19d      	b.n	8000d12 <LoraStarter_Process+0x4ea>
        case LORA_STATE_SEND_JOIN:
            LORA_LOG_JOIN_ATTEMPT();
 80009d6:	4966      	ldr	r1, [pc, #408]	@ (8000b70 <LoraStarter_Process+0x348>)
 80009d8:	2002      	movs	r0, #2
 80009da:	f004 f85d 	bl	8004a98 <LOGGER_SendFormatted>
            CommandSender_Send("AT+JOIN\r\n");
 80009de:	4865      	ldr	r0, [pc, #404]	@ (8000b74 <LoraStarter_Process+0x34c>)
 80009e0:	f7ff fe14 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_JOIN_OK;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2204      	movs	r2, #4
 80009e8:	701a      	strb	r2, [r3, #0]
            break;
 80009ea:	e197      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_WAIT_JOIN_OK:
            if (uart_rx && is_join_response_ok(uart_rx)) {
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 8191 	beq.w	8000d16 <LoraStarter_Process+0x4ee>
 80009f4:	6838      	ldr	r0, [r7, #0]
 80009f6:	f000 fa99 	bl	8000f2c <is_join_response_ok>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	f000 818a 	beq.w	8000d16 <LoraStarter_Process+0x4ee>
                LORA_LOG_JOIN_SUCCESS();
 8000a02:	495d      	ldr	r1, [pc, #372]	@ (8000b78 <LoraStarter_Process+0x350>)
 8000a04:	2002      	movs	r0, #2
 8000a06:	f004 f847 	bl	8004a98 <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_SEND_PERIODIC;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2205      	movs	r2, #5
 8000a0e:	701a      	strb	r2, [r3, #0]
                ctx->send_count = 0;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
                ctx->error_count = 0; // JOIN 성공 시 에러 카운터 리셋
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
                ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->last_retry_time = 0; // 재시도 시간 리셋
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	@ 0x28
                LOG_WARN("[LoRa] 🚀 PERIODIC SEND STARTED with message: %s", ctx->send_message);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4952      	ldr	r1, [pc, #328]	@ (8000b7c <LoraStarter_Process+0x354>)
 8000a32:	2002      	movs	r0, #2
 8000a34:	f004 f830 	bl	8004a98 <LOGGER_SendFormatted>
            }
            break;
 8000a38:	e16d      	b.n	8000d16 <LoraStarter_Process+0x4ee>
        case LORA_STATE_SEND_PERIODIC:
            {
                char send_cmd[128];
                char hex_data[64];
                const char* message = (ctx->send_message != NULL) ? ctx->send_message : "Hello";
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d002      	beq.n	8000a48 <LoraStarter_Process+0x220>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	e000      	b.n	8000a4a <LoraStarter_Process+0x222>
 8000a48:	4b40      	ldr	r3, [pc, #256]	@ (8000b4c <LoraStarter_Process+0x324>)
 8000a4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                
                // 문자열을 헥사 문자열로 변환
                int len = strlen(message);
 8000a4e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8000a52:	f7ff fbe7 	bl	8000224 <strlen>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a62:	e014      	b.n	8000a8e <LoraStarter_Process+0x266>
                    sprintf(&hex_data[i*2], "%02X", (unsigned char)message[i]);
 8000a64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	f107 020c 	add.w	r2, r7, #12
 8000a6e:	18d0      	adds	r0, r2, r3
 8000a70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a74:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000a78:	4413      	add	r3, r2
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4940      	ldr	r1, [pc, #256]	@ (8000b80 <LoraStarter_Process+0x358>)
 8000a80:	f015 f974 	bl	8015d6c <siprintf>
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000a84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a88:	3301      	adds	r3, #1
 8000a8a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a8e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000a92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a96:	429a      	cmp	r2, r3
 8000a98:	da03      	bge.n	8000aa2 <LoraStarter_Process+0x27a>
 8000a9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a9e:	2b1e      	cmp	r3, #30
 8000aa0:	dde0      	ble.n	8000a64 <LoraStarter_Process+0x23c>
                }
                hex_data[len*2] = '\0';
 8000aa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	33f0      	adds	r3, #240	@ 0xf0
 8000aaa:	443b      	add	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	f803 2ce4 	strb.w	r2, [r3, #-228]
                
                snprintf(send_cmd, sizeof(send_cmd), "AT+SEND=1:%s\r\n", hex_data);
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000aba:	4a32      	ldr	r2, [pc, #200]	@ (8000b84 <LoraStarter_Process+0x35c>)
 8000abc:	2180      	movs	r1, #128	@ 0x80
 8000abe:	f015 f91f 	bl	8015d00 <sniprintf>
                LORA_LOG_SEND_ATTEMPT(message);
 8000ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000ac6:	4930      	ldr	r1, [pc, #192]	@ (8000b88 <LoraStarter_Process+0x360>)
 8000ac8:	2002      	movs	r0, #2
 8000aca:	f003 ffe5 	bl	8004a98 <LOGGER_SendFormatted>
                CommandSender_Send(send_cmd);
 8000ace:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fd9a 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_SEND_RESPONSE;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2206      	movs	r2, #6
 8000adc:	701a      	strb	r2, [r3, #0]
                ctx->send_count++;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	619a      	str	r2, [r3, #24]
                LOG_DEBUG("[LoRa] Send count: %d", ctx->send_count);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4927      	ldr	r1, [pc, #156]	@ (8000b8c <LoraStarter_Process+0x364>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f003 ffd1 	bl	8004a98 <LOGGER_SendFormatted>
            }
            break;
 8000af6:	e111      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_WAIT_SEND_RESPONSE:
            if (uart_rx) {
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 810d 	beq.w	8000d1a <LoraStarter_Process+0x4f2>
                ResponseType response_type = ResponseHandler_ParseSendResponse(uart_rx);
 8000b00:	6838      	ldr	r0, [r7, #0]
 8000b02:	f000 fa97 	bl	8001034 <ResponseHandler_ParseSendResponse>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
                switch(response_type) {
 8000b0c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d03f      	beq.n	8000b94 <LoraStarter_Process+0x36c>
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	f300 8086 	bgt.w	8000c26 <LoraStarter_Process+0x3fe>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <LoraStarter_Process+0x2fc>
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d04c      	beq.n	8000bbc <LoraStarter_Process+0x394>
 8000b22:	e080      	b.n	8000c26 <LoraStarter_Process+0x3fe>
                    case RESPONSE_OK:
                        LORA_LOG_SEND_SUCCESS();
 8000b24:	491a      	ldr	r1, [pc, #104]	@ (8000b90 <LoraStarter_Process+0x368>)
 8000b26:	2002      	movs	r0, #2
 8000b28:	f003 ffb6 	bl	8004a98 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2207      	movs	r2, #7
 8000b30:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000b40:	f003 ff3c 	bl	80049bc <TIME_GetCurrentMs>
 8000b44:	4602      	mov	r2, r0
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	611a      	str	r2, [r3, #16]
                        break;
 8000b4a:	e072      	b.n	8000c32 <LoraStarter_Process+0x40a>
 8000b4c:	0801683c 	.word	0x0801683c
 8000b50:	08016844 	.word	0x08016844
 8000b54:	0801687c 	.word	0x0801687c
 8000b58:	080168a0 	.word	0x080168a0
 8000b5c:	080167c8 	.word	0x080167c8
 8000b60:	080168c0 	.word	0x080168c0
 8000b64:	080168d8 	.word	0x080168d8
 8000b68:	080168f8 	.word	0x080168f8
 8000b6c:	08016924 	.word	0x08016924
 8000b70:	08016960 	.word	0x08016960
 8000b74:	08016984 	.word	0x08016984
 8000b78:	08016990 	.word	0x08016990
 8000b7c:	080169ac 	.word	0x080169ac
 8000b80:	080169e0 	.word	0x080169e0
 8000b84:	080169e8 	.word	0x080169e8
 8000b88:	080169f8 	.word	0x080169f8
 8000b8c:	08016a18 	.word	0x08016a18
 8000b90:	08016a30 	.word	0x08016a30
                    case RESPONSE_TIMEOUT:
                        LOG_WARN("[LoRa] SEND timeout");
 8000b94:	496f      	ldr	r1, [pc, #444]	@ (8000d54 <LoraStarter_Process+0x52c>)
 8000b96:	2002      	movs	r0, #2
 8000b98:	f003 ff7e 	bl	8004a98 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bae:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000bb0:	f003 ff04 	bl	80049bc <TIME_GetCurrentMs>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	611a      	str	r2, [r3, #16]
                        break;
 8000bba:	e03a      	b.n	8000c32 <LoraStarter_Process+0x40a>
                    case RESPONSE_ERROR:
                        LORA_LOG_SEND_FAILED("Network error");
 8000bbc:	4a66      	ldr	r2, [pc, #408]	@ (8000d58 <LoraStarter_Process+0x530>)
 8000bbe:	4967      	ldr	r1, [pc, #412]	@ (8000d5c <LoraStarter_Process+0x534>)
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	f003 ff69 	bl	8004a98 <LOGGER_SendFormatted>
                        ctx->error_count++;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a1b      	ldr	r3, [r3, #32]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	621a      	str	r2, [r3, #32]
                        LORA_LOG_ERROR_COUNT(ctx->error_count);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4962      	ldr	r1, [pc, #392]	@ (8000d60 <LoraStarter_Process+0x538>)
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f003 ff5d 	bl	8004a98 <LOGGER_SendFormatted>
                        // 무제한 재시도 (max_retry_count가 0이거나 아직 제한에 도달하지 않은 경우)
                        if (ctx->max_retry_count == 0 || ctx->error_count < ctx->max_retry_count) {
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d005      	beq.n	8000bf2 <LoraStarter_Process+0x3ca>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a1a      	ldr	r2, [r3, #32]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	da11      	bge.n	8000c16 <LoraStarter_Process+0x3ee>
                            LORA_LOG_RETRY_ATTEMPT(ctx->error_count, ctx->max_retry_count);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a1a      	ldr	r2, [r3, #32]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <LoraStarter_Process+0x3dc>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c02:	e000      	b.n	8000c06 <LoraStarter_Process+0x3de>
 8000c04:	4b57      	ldr	r3, [pc, #348]	@ (8000d64 <LoraStarter_Process+0x53c>)
 8000c06:	4958      	ldr	r1, [pc, #352]	@ (8000d68 <LoraStarter_Process+0x540>)
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f003 ff45 	bl	8004a98 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_JOIN_RETRY; // JOIN 재시도
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2208      	movs	r2, #8
 8000c12:	701a      	strb	r2, [r3, #0]
                        } else {
                            LORA_LOG_MAX_RETRIES_REACHED();
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
                        }
                        break;
 8000c14:	e00d      	b.n	8000c32 <LoraStarter_Process+0x40a>
                            LORA_LOG_MAX_RETRIES_REACHED();
 8000c16:	4955      	ldr	r1, [pc, #340]	@ (8000d6c <LoraStarter_Process+0x544>)
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f003 ff3d 	bl	8004a98 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	220a      	movs	r2, #10
 8000c22:	701a      	strb	r2, [r3, #0]
                        break;
 8000c24:	e005      	b.n	8000c32 <LoraStarter_Process+0x40a>
                    default:
                        // 알 수 없는 응답은 무시하고 계속 대기
                        LOG_DEBUG("[LoRa] Unknown response: %s", uart_rx);
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	4951      	ldr	r1, [pc, #324]	@ (8000d70 <LoraStarter_Process+0x548>)
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f003 ff34 	bl	8004a98 <LOGGER_SendFormatted>
                        break;
 8000c30:	bf00      	nop
                }
            }
            break;
 8000c32:	e072      	b.n	8000d1a <LoraStarter_Process+0x4f2>
        case LORA_STATE_WAIT_SEND_INTERVAL:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c34:	f003 fec2 	bl	80049bc <TIME_GetCurrentMs>
 8000c38:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
                uint32_t interval_ms = (ctx->send_interval_ms > 0) ? ctx->send_interval_ms : 30000; // 기본값 30초
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d002      	beq.n	8000c4a <LoraStarter_Process+0x422>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	e001      	b.n	8000c4e <LoraStarter_Process+0x426>
 8000c4a:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                
                if ((current_time - ctx->last_send_time) >= interval_ms) {
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d809      	bhi.n	8000c78 <LoraStarter_Process+0x450>
                    LOG_DEBUG("[LoRa] Send interval passed (%u ms), ready for next send", interval_ms);
 8000c64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c68:	4942      	ldr	r1, [pc, #264]	@ (8000d74 <LoraStarter_Process+0x54c>)
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f003 ff14 	bl	8004a98 <LOGGER_SendFormatted>
                    ctx->state = LORA_STATE_SEND_PERIODIC;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2205      	movs	r2, #5
 8000c74:	701a      	strb	r2, [r3, #0]
                    // 아직 대기 시간이 남았으므로 상태 유지
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
                }
            }
            break;
 8000c76:	e051      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	691a      	ldr	r2, [r3, #16]
 8000c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c86:	4413      	add	r3, r2
 8000c88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
 8000c8c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000c90:	4939      	ldr	r1, [pc, #228]	@ (8000d78 <LoraStarter_Process+0x550>)
 8000c92:	2000      	movs	r0, #0
 8000c94:	f003 ff00 	bl	8004a98 <LOGGER_SendFormatted>
            break;
 8000c98:	e040      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_JOIN_RETRY:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c9a:	f003 fe8f 	bl	80049bc <TIME_GetCurrentMs>
 8000c9e:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
                
                if (ctx->last_retry_time == 0) {
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10b      	bne.n	8000cc2 <LoraStarter_Process+0x49a>
                    // 첫 재시도: 바로 SEND_JOIN
                    LOG_DEBUG("[LoRa] First JOIN retry");
 8000caa:	4934      	ldr	r1, [pc, #208]	@ (8000d7c <LoraStarter_Process+0x554>)
 8000cac:	2000      	movs	r0, #0
 8000cae:	f003 fef3 	bl	8004a98 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cb8:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	701a      	strb	r2, [r3, #0]
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
                             ctx->retry_delay_ms - (current_time - ctx->last_retry_time));
                    // 아무것도 하지 않음
                }
            }
            break;
 8000cc0:	e02c      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                } else if ((current_time - ctx->last_retry_time) >= ctx->retry_delay_ms) {
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cca:	1ad2      	subs	r2, r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d30e      	bcc.n	8000cf2 <LoraStarter_Process+0x4ca>
                    LOG_DEBUG("[LoRa] JOIN retry after %lu ms delay", ctx->retry_delay_ms);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4929      	ldr	r1, [pc, #164]	@ (8000d80 <LoraStarter_Process+0x558>)
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f003 fedb 	bl	8004a98 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000ce8:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2203      	movs	r2, #3
 8000cee:	701a      	strb	r2, [r3, #0]
            break;
 8000cf0:	e014      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cfe:	1acb      	subs	r3, r1, r3
 8000d00:	4413      	add	r3, r2
 8000d02:	461a      	mov	r2, r3
 8000d04:	491f      	ldr	r1, [pc, #124]	@ (8000d84 <LoraStarter_Process+0x55c>)
 8000d06:	2000      	movs	r0, #0
 8000d08:	f003 fec6 	bl	8004a98 <LOGGER_SendFormatted>
            break;
 8000d0c:	e006      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_DONE:
        case LORA_STATE_ERROR:
        default:
            // 이미 완료된 상태이므로 아무것도 하지 않음
            break;
 8000d0e:	bf00      	nop
 8000d10:	e004      	b.n	8000d1c <LoraStarter_Process+0x4f4>
            break;
 8000d12:	bf00      	nop
 8000d14:	e002      	b.n	8000d1c <LoraStarter_Process+0x4f4>
            break;
 8000d16:	bf00      	nop
 8000d18:	e000      	b.n	8000d1c <LoraStarter_Process+0x4f4>
            break;
 8000d1a:	bf00      	nop
    }

    // 상태 변경 로깅
    if (old_state != ctx->state) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d012      	beq.n	8000d4e <LoraStarter_Process+0x526>
        LORA_LOG_STATE_CHANGE(get_state_name(old_state), get_state_name(ctx->state));
 8000d28:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fcdb 	bl	80006e8 <get_state_name>
 8000d32:	4604      	mov	r4, r0
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fcd5 	bl	80006e8 <get_state_name>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4622      	mov	r2, r4
 8000d42:	4911      	ldr	r1, [pc, #68]	@ (8000d88 <LoraStarter_Process+0x560>)
 8000d44:	2000      	movs	r0, #0
 8000d46:	f003 fea7 	bl	8004a98 <LOGGER_SendFormatted>
 8000d4a:	e000      	b.n	8000d4e <LoraStarter_Process+0x526>
    if (ctx == NULL) return;
 8000d4c:	bf00      	nop
    }
}
 8000d4e:	37f4      	adds	r7, #244	@ 0xf4
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd90      	pop	{r4, r7, pc}
 8000d54:	08016a4c 	.word	0x08016a4c
 8000d58:	08016a60 	.word	0x08016a60
 8000d5c:	08016a70 	.word	0x08016a70
 8000d60:	08016a88 	.word	0x08016a88
 8000d64:	08016aa0 	.word	0x08016aa0
 8000d68:	08016aa4 	.word	0x08016aa4
 8000d6c:	08016ac0 	.word	0x08016ac0
 8000d70:	08016ae4 	.word	0x08016ae4
 8000d74:	08016b00 	.word	0x08016b00
 8000d78:	08016b3c 	.word	0x08016b3c
 8000d7c:	08016b70 	.word	0x08016b70
 8000d80:	08016b88 	.word	0x08016b88
 8000d84:	08016bb0 	.word	0x08016bb0
 8000d88:	08016be4 	.word	0x08016be4

08000d8c <Network_SendBinary>:
    
    return NETWORK_OK;
}

int Network_SendBinary(const void* data, size_t size)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
    if (!g_connected) {
 8000d96:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <Network_SendBinary+0x8c>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	f083 0301 	eor.w	r3, r3, #1
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <Network_SendBinary+0x1e>
        return NETWORK_NOT_CONNECTED;
 8000da4:	f06f 0301 	mvn.w	r3, #1
 8000da8:	e032      	b.n	8000e10 <Network_SendBinary+0x84>
    }
    
    if (data == NULL || size == 0) {
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d002      	beq.n	8000db6 <Network_SendBinary+0x2a>
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d102      	bne.n	8000dbc <Network_SendBinary+0x30>
        return NETWORK_INVALID_PARAM;
 8000db6:	f06f 0303 	mvn.w	r3, #3
 8000dba:	e029      	b.n	8000e10 <Network_SendBinary+0x84>
    }
    
    // 백엔드에 따른 분기 처리
    switch (g_backend) {
 8000dbc:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <Network_SendBinary+0x90>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d002      	beq.n	8000dca <Network_SendBinary+0x3e>
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d002      	beq.n	8000dce <Network_SendBinary+0x42>
 8000dc8:	e020      	b.n	8000e0c <Network_SendBinary+0x80>
        case NETWORK_BACKEND_SOCKET:
            // 실제 구현에서는 소켓을 통한 데이터 전송
            // 지금은 테스트를 위한 최소 구현
            return NETWORK_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e020      	b.n	8000e10 <Network_SendBinary+0x84>
            
        case NETWORK_BACKEND_SD_CARD:
            {
                int result = SDStorage_WriteLog(data, size);
 8000dce:	6839      	ldr	r1, [r7, #0]
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f000 fbdd 	bl	8001590 <SDStorage_WriteLog>
 8000dd6:	60f8      	str	r0, [r7, #12]
                switch (result) {
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d00b      	beq.n	8000df6 <Network_SendBinary+0x6a>
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	dc10      	bgt.n	8000e06 <Network_SendBinary+0x7a>
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f113 0f05 	cmn.w	r3, #5
 8000dea:	d009      	beq.n	8000e00 <Network_SendBinary+0x74>
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f113 0f02 	cmn.w	r3, #2
 8000df2:	d002      	beq.n	8000dfa <Network_SendBinary+0x6e>
 8000df4:	e007      	b.n	8000e06 <Network_SendBinary+0x7a>
                    case SDSTORAGE_OK:
                        return NETWORK_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e00a      	b.n	8000e10 <Network_SendBinary+0x84>
                    case SDSTORAGE_NOT_READY:
                        return NETWORK_NOT_CONNECTED;
 8000dfa:	f06f 0301 	mvn.w	r3, #1
 8000dfe:	e007      	b.n	8000e10 <Network_SendBinary+0x84>
                    case SDSTORAGE_INVALID_PARAM:
                        return NETWORK_INVALID_PARAM;
 8000e00:	f06f 0303 	mvn.w	r3, #3
 8000e04:	e004      	b.n	8000e10 <Network_SendBinary+0x84>
                    case SDSTORAGE_DISK_FULL:
                    case SDSTORAGE_FILE_ERROR:
                    default:
                        return NETWORK_ERROR;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	e001      	b.n	8000e10 <Network_SendBinary+0x84>
                }
            }
            
        default:
            return NETWORK_ERROR;
 8000e0c:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000220 	.word	0x20000220
 8000e1c:	20000221 	.word	0x20000221

08000e20 <Network_IsConnected>:

bool Network_IsConnected(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
    if (g_backend == NETWORK_BACKEND_SD_CARD) {
 8000e24:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <Network_IsConnected+0x34>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d10f      	bne.n	8000e4c <Network_IsConnected+0x2c>
        return g_connected && SDStorage_IsReady();
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <Network_IsConnected+0x38>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d006      	beq.n	8000e42 <Network_IsConnected+0x22>
 8000e34:	f000 fcbe 	bl	80017b4 <SDStorage_IsReady>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <Network_IsConnected+0x22>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e000      	b.n	8000e44 <Network_IsConnected+0x24>
 8000e42:	2300      	movs	r3, #0
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	e001      	b.n	8000e50 <Network_IsConnected+0x30>
    }
    return g_connected;
 8000e4c:	4b02      	ldr	r3, [pc, #8]	@ (8000e58 <Network_IsConnected+0x38>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000221 	.word	0x20000221
 8000e58:	20000220 	.word	0x20000220

08000e5c <is_response_ok>:
#include "ResponseHandler.h"
#include "logger.h"
#include <string.h>

bool is_response_ok(const char* response)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d105      	bne.n	8000e76 <is_response_ok+0x1a>
        LOG_DEBUG("[ResponseHandler] is_response_ok: NULL response");
 8000e6a:	4925      	ldr	r1, [pc, #148]	@ (8000f00 <is_response_ok+0xa4>)
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f003 fe13 	bl	8004a98 <LOGGER_SendFormatted>
        return false;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e03f      	b.n	8000ef6 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking OK response: '%s'", response);
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	4922      	ldr	r1, [pc, #136]	@ (8000f04 <is_response_ok+0xa8>)
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f003 fe0c 	bl	8004a98 <LOGGER_SendFormatted>
    
    // OK 또는 OK\r\n, OK\n 등 허용
    if (strcmp(response, "OK") == 0) {
 8000e80:	4921      	ldr	r1, [pc, #132]	@ (8000f08 <is_response_ok+0xac>)
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff f9c4 	bl	8000210 <strcmp>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d105      	bne.n	8000e9a <is_response_ok+0x3e>
        LOG_DEBUG("[ResponseHandler] OK response confirmed");
 8000e8e:	491f      	ldr	r1, [pc, #124]	@ (8000f0c <is_response_ok+0xb0>)
 8000e90:	2000      	movs	r0, #0
 8000e92:	f003 fe01 	bl	8004a98 <LOGGER_SendFormatted>
        return true;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e02d      	b.n	8000ef6 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\r\n") == 0) {
 8000e9a:	491d      	ldr	r1, [pc, #116]	@ (8000f10 <is_response_ok+0xb4>)
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff f9b7 	bl	8000210 <strcmp>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d105      	bne.n	8000eb4 <is_response_ok+0x58>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with CRLF)");
 8000ea8:	491a      	ldr	r1, [pc, #104]	@ (8000f14 <is_response_ok+0xb8>)
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f003 fdf4 	bl	8004a98 <LOGGER_SendFormatted>
        return true;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e020      	b.n	8000ef6 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\n") == 0) {
 8000eb4:	4918      	ldr	r1, [pc, #96]	@ (8000f18 <is_response_ok+0xbc>)
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff f9aa 	bl	8000210 <strcmp>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d105      	bne.n	8000ece <is_response_ok+0x72>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with LF)");
 8000ec2:	4916      	ldr	r1, [pc, #88]	@ (8000f1c <is_response_ok+0xc0>)
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f003 fde7 	bl	8004a98 <LOGGER_SendFormatted>
        return true;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e013      	b.n	8000ef6 <is_response_ok+0x9a>
    }
    
    // AT+VER 버전 응답도 성공으로 간주 (RUI_로 시작하는 응답)
    if (strstr(response, "RUI_") != NULL) {
 8000ece:	4914      	ldr	r1, [pc, #80]	@ (8000f20 <is_response_ok+0xc4>)
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f014 ffc4 	bl	8015e5e <strstr>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d006      	beq.n	8000eea <is_response_ok+0x8e>
        LOG_DEBUG("[ResponseHandler] Version response confirmed: %s", response);
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	4911      	ldr	r1, [pc, #68]	@ (8000f24 <is_response_ok+0xc8>)
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f003 fdd9 	bl	8004a98 <LOGGER_SendFormatted>
        return true;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e005      	b.n	8000ef6 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Not an OK response: '%s'", response);
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	490e      	ldr	r1, [pc, #56]	@ (8000f28 <is_response_ok+0xcc>)
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f003 fdd2 	bl	8004a98 <LOGGER_SendFormatted>
    return false;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	08016c04 	.word	0x08016c04
 8000f04:	08016c34 	.word	0x08016c34
 8000f08:	08016c64 	.word	0x08016c64
 8000f0c:	08016c68 	.word	0x08016c68
 8000f10:	08016c90 	.word	0x08016c90
 8000f14:	08016c98 	.word	0x08016c98
 8000f18:	08016ccc 	.word	0x08016ccc
 8000f1c:	08016cd0 	.word	0x08016cd0
 8000f20:	08016d04 	.word	0x08016d04
 8000f24:	08016d0c 	.word	0x08016d0c
 8000f28:	08016d40 	.word	0x08016d40

08000f2c <is_join_response_ok>:

bool is_join_response_ok(const char* response)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f38:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f3c:	6018      	str	r0, [r3, #0]
    if (response == NULL) {
 8000f3e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f42:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d105      	bne.n	8000f58 <is_join_response_ok+0x2c>
        LOG_DEBUG("[ResponseHandler] is_join_response_ok: NULL response");
 8000f4c:	4934      	ldr	r1, [pc, #208]	@ (8001020 <is_join_response_ok+0xf4>)
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f003 fda2 	bl	8004a98 <LOGGER_SendFormatted>
        return false;
 8000f54:	2300      	movs	r3, #0
 8000f56:	e05e      	b.n	8001016 <is_join_response_ok+0xea>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking JOIN response: '%s'", response);
 8000f58:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f5c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4930      	ldr	r1, [pc, #192]	@ (8001024 <is_join_response_ok+0xf8>)
 8000f64:	2000      	movs	r0, #0
 8000f66:	f003 fd97 	bl	8004a98 <LOGGER_SendFormatted>
    
    // 개행 문자 제거하여 비교
    char clean_response[512];
    strncpy(clean_response, response, sizeof(clean_response) - 1);
 8000f6a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f6e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f72:	f107 0008 	add.w	r0, r7, #8
 8000f76:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000f7a:	6819      	ldr	r1, [r3, #0]
 8000f7c:	f014 ff5c 	bl	8015e38 <strncpy>
    clean_response[sizeof(clean_response) - 1] = '\0';
 8000f80:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f84:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    
    // 개행 문자 제거
    char* pos = clean_response;
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000f96:	e013      	b.n	8000fc0 <is_join_response_ok+0x94>
        if (*pos == '\r' || *pos == '\n') {
 8000f98:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b0d      	cmp	r3, #13
 8000fa0:	d004      	beq.n	8000fac <is_join_response_ok+0x80>
 8000fa2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b0a      	cmp	r3, #10
 8000faa:	d104      	bne.n	8000fb6 <is_join_response_ok+0x8a>
            *pos = '\0';
 8000fac:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
            break;
 8000fb4:	e009      	b.n	8000fca <is_join_response_ok+0x9e>
        }
        pos++;
 8000fb6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fba:	3301      	adds	r3, #1
 8000fbc:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000fc0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1e6      	bne.n	8000f98 <is_join_response_ok+0x6c>
    }
    
    bool result = (strcmp(clean_response, "+EVT:JOINED") == 0);
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	4916      	ldr	r1, [pc, #88]	@ (8001028 <is_join_response_ok+0xfc>)
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff f91d 	bl	8000210 <strcmp>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	bf0c      	ite	eq
 8000fdc:	2301      	moveq	r3, #1
 8000fde:	2300      	movne	r3, #0
 8000fe0:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    
    if (result) {
 8000fe4:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d009      	beq.n	8001000 <is_join_response_ok+0xd4>
        LOG_WARN("[ResponseHandler] ✅ JOIN SUCCESS: %s", response);
 8000fec:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000ff0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	490d      	ldr	r1, [pc, #52]	@ (800102c <is_join_response_ok+0x100>)
 8000ff8:	2002      	movs	r0, #2
 8000ffa:	f003 fd4d 	bl	8004a98 <LOGGER_SendFormatted>
 8000ffe:	e008      	b.n	8001012 <is_join_response_ok+0xe6>
    } else {
        LOG_DEBUG("[ResponseHandler] Not a JOIN response: '%s'", response);
 8001000:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001004:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4909      	ldr	r1, [pc, #36]	@ (8001030 <is_join_response_ok+0x104>)
 800100c:	2000      	movs	r0, #0
 800100e:	f003 fd43 	bl	8004a98 <LOGGER_SendFormatted>
    }
    
    return result;
 8001012:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
}
 8001016:	4618      	mov	r0, r3
 8001018:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	08016d6c 	.word	0x08016d6c
 8001024:	08016da4 	.word	0x08016da4
 8001028:	08016dd4 	.word	0x08016dd4
 800102c:	08016de0 	.word	0x08016de0
 8001030:	08016e08 	.word	0x08016e08

08001034 <ResponseHandler_ParseSendResponse>:

ResponseType ResponseHandler_ParseSendResponse(const char* response)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d105      	bne.n	800104e <ResponseHandler_ParseSendResponse+0x1a>
        LOG_DEBUG("[ResponseHandler] ParseSendResponse: NULL response");
 8001042:	491e      	ldr	r1, [pc, #120]	@ (80010bc <ResponseHandler_ParseSendResponse+0x88>)
 8001044:	2000      	movs	r0, #0
 8001046:	f003 fd27 	bl	8004a98 <LOGGER_SendFormatted>
        return RESPONSE_UNKNOWN;
 800104a:	2303      	movs	r3, #3
 800104c:	e031      	b.n	80010b2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing SEND response: '%s'", response);
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	491b      	ldr	r1, [pc, #108]	@ (80010c0 <ResponseHandler_ParseSendResponse+0x8c>)
 8001052:	2000      	movs	r0, #0
 8001054:	f003 fd20 	bl	8004a98 <LOGGER_SendFormatted>
    
    if (strstr(response, "+EVT:SEND_CONFIRMED_OK") != NULL) {
 8001058:	491a      	ldr	r1, [pc, #104]	@ (80010c4 <ResponseHandler_ParseSendResponse+0x90>)
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f014 feff 	bl	8015e5e <strstr>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d005      	beq.n	8001072 <ResponseHandler_ParseSendResponse+0x3e>
        LOG_WARN("[ResponseHandler] ✅ SEND SUCCESS: CONFIRMED_OK");
 8001066:	4918      	ldr	r1, [pc, #96]	@ (80010c8 <ResponseHandler_ParseSendResponse+0x94>)
 8001068:	2002      	movs	r0, #2
 800106a:	f003 fd15 	bl	8004a98 <LOGGER_SendFormatted>
        return RESPONSE_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e01f      	b.n	80010b2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strstr(response, "+EVT:SEND_CONFIRMED_FAILED") != NULL) {
 8001072:	4916      	ldr	r1, [pc, #88]	@ (80010cc <ResponseHandler_ParseSendResponse+0x98>)
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f014 fef2 	bl	8015e5e <strstr>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d005      	beq.n	800108c <ResponseHandler_ParseSendResponse+0x58>
        LOG_WARN("[ResponseHandler] SEND response: CONFIRMED_FAILED");
 8001080:	4913      	ldr	r1, [pc, #76]	@ (80010d0 <ResponseHandler_ParseSendResponse+0x9c>)
 8001082:	2002      	movs	r0, #2
 8001084:	f003 fd08 	bl	8004a98 <LOGGER_SendFormatted>
        return RESPONSE_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e012      	b.n	80010b2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strcmp(response, "TIMEOUT") == 0) {
 800108c:	4911      	ldr	r1, [pc, #68]	@ (80010d4 <ResponseHandler_ParseSendResponse+0xa0>)
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff f8be 	bl	8000210 <strcmp>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d105      	bne.n	80010a6 <ResponseHandler_ParseSendResponse+0x72>
        LOG_WARN("[ResponseHandler] SEND response: TIMEOUT");
 800109a:	490f      	ldr	r1, [pc, #60]	@ (80010d8 <ResponseHandler_ParseSendResponse+0xa4>)
 800109c:	2002      	movs	r0, #2
 800109e:	f003 fcfb 	bl	8004a98 <LOGGER_SendFormatted>
        return RESPONSE_TIMEOUT;
 80010a2:	2302      	movs	r3, #2
 80010a4:	e005      	b.n	80010b2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Unknown SEND response: '%s'", response);
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	490c      	ldr	r1, [pc, #48]	@ (80010dc <ResponseHandler_ParseSendResponse+0xa8>)
 80010aa:	2000      	movs	r0, #0
 80010ac:	f003 fcf4 	bl	8004a98 <LOGGER_SendFormatted>
    return RESPONSE_UNKNOWN;
 80010b0:	2303      	movs	r3, #3
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	08016e34 	.word	0x08016e34
 80010c0:	08016e68 	.word	0x08016e68
 80010c4:	08016e98 	.word	0x08016e98
 80010c8:	08016eb0 	.word	0x08016eb0
 80010cc:	08016ee4 	.word	0x08016ee4
 80010d0:	08016f00 	.word	0x08016f00
 80010d4:	08016f34 	.word	0x08016f34
 80010d8:	08016f3c 	.word	0x08016f3c
 80010dc:	08016f68 	.word	0x08016f68

080010e0 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80010e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <SCB_CleanInvalidateDCache+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010ee:	f3bf 8f4f 	dsb	sy
}
 80010f2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80010f4:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <SCB_CleanInvalidateDCache+0x74>)
 80010f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010fa:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	0b5b      	lsrs	r3, r3, #13
 8001100:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001104:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	08db      	lsrs	r3, r3, #3
 800110a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800110e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	015a      	lsls	r2, r3, #5
 8001114:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001118:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800111e:	490d      	ldr	r1, [pc, #52]	@ (8001154 <SCB_CleanInvalidateDCache+0x74>)
 8001120:	4313      	orrs	r3, r2
 8001122:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1e5a      	subs	r2, r3, #1
 800112a:	60ba      	str	r2, [r7, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1ef      	bne.n	8001110 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	1e5a      	subs	r2, r3, #1
 8001134:	60fa      	str	r2, [r7, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1e5      	bne.n	8001106 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <SDStorage_Init>:
static int _create_log_directory(void);
static int _generate_log_filename(char* filename, size_t max_len);
// static uint32_t _get_current_timestamp(void); - unused function removed

int SDStorage_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af02      	add	r7, sp, #8
#ifdef STM32F746xx
    // STM32 환경: FatFs 초기화 및 진단
    LOG_INFO("[SDStorage] Starting SD card initialization...");
 800115e:	49af      	ldr	r1, [pc, #700]	@ (800141c <SDStorage_Init+0x2c4>)
 8001160:	2001      	movs	r0, #1
 8001162:	f003 fc99 	bl	8004a98 <LOGGER_SendFormatted>
    
    // 1. 하드웨어 상태 진단 및 TRANSFER 상태까지 대기
    extern SD_HandleTypeDef hsd1;
    HAL_SD_CardStateTypeDef card_state = HAL_SD_GetCardState(&hsd1);
 8001166:	48ae      	ldr	r0, [pc, #696]	@ (8001420 <SDStorage_Init+0x2c8>)
 8001168:	f00b f866 	bl	800c238 <HAL_SD_GetCardState>
 800116c:	6178      	str	r0, [r7, #20]
    LOG_INFO("[SDStorage] Initial SD card state: %d", card_state);
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	49ac      	ldr	r1, [pc, #688]	@ (8001424 <SDStorage_Init+0x2cc>)
 8001172:	2001      	movs	r0, #1
 8001174:	f003 fc90 	bl	8004a98 <LOGGER_SendFormatted>
    
    // SD 카드가 TRANSFER 상태가 될 때까지 대기 (성공 프로젝트 패턴)
    int wait_count = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
    while (card_state != HAL_SD_CARD_TRANSFER && wait_count < 50) {  // 최대 5초 대기
 800117c:	e010      	b.n	80011a0 <SDStorage_Init+0x48>
        LOG_INFO("[SDStorage] Waiting for SD card TRANSFER state... (attempt %d)", wait_count + 1);
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	3301      	adds	r3, #1
 8001182:	461a      	mov	r2, r3
 8001184:	49a8      	ldr	r1, [pc, #672]	@ (8001428 <SDStorage_Init+0x2d0>)
 8001186:	2001      	movs	r0, #1
 8001188:	f003 fc86 	bl	8004a98 <LOGGER_SendFormatted>
        HAL_Delay(100);
 800118c:	2064      	movs	r0, #100	@ 0x64
 800118e:	f003 ffcd 	bl	800512c <HAL_Delay>
        card_state = HAL_SD_GetCardState(&hsd1);
 8001192:	48a3      	ldr	r0, [pc, #652]	@ (8001420 <SDStorage_Init+0x2c8>)
 8001194:	f00b f850 	bl	800c238 <HAL_SD_GetCardState>
 8001198:	6178      	str	r0, [r7, #20]
        wait_count++;
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	3301      	adds	r3, #1
 800119e:	613b      	str	r3, [r7, #16]
    while (card_state != HAL_SD_CARD_TRANSFER && wait_count < 50) {  // 최대 5초 대기
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	d002      	beq.n	80011ac <SDStorage_Init+0x54>
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	2b31      	cmp	r3, #49	@ 0x31
 80011aa:	dde8      	ble.n	800117e <SDStorage_Init+0x26>
    }
    
    if (card_state == HAL_SD_CARD_TRANSFER) {
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	d128      	bne.n	8001204 <SDStorage_Init+0xac>
        LOG_INFO("[SDStorage] ✅ SD card reached TRANSFER state successfully");
 80011b2:	499e      	ldr	r1, [pc, #632]	@ (800142c <SDStorage_Init+0x2d4>)
 80011b4:	2001      	movs	r0, #1
 80011b6:	f003 fc6f 	bl	8004a98 <LOGGER_SendFormatted>
        
        // SDMMC 에러 코드 상세 체크 (성공 프로젝트 패턴)
        if (hsd1.ErrorCode != HAL_SD_ERROR_NONE) {
 80011ba:	4b99      	ldr	r3, [pc, #612]	@ (8001420 <SDStorage_Init+0x2c8>)
 80011bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d02f      	beq.n	8001222 <SDStorage_Init+0xca>
            LOG_WARN("[SDStorage] SDMMC ErrorCode detected: 0x%08X", hsd1.ErrorCode);
 80011c2:	4b97      	ldr	r3, [pc, #604]	@ (8001420 <SDStorage_Init+0x2c8>)
 80011c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011c6:	461a      	mov	r2, r3
 80011c8:	4999      	ldr	r1, [pc, #612]	@ (8001430 <SDStorage_Init+0x2d8>)
 80011ca:	2002      	movs	r0, #2
 80011cc:	f003 fc64 	bl	8004a98 <LOGGER_SendFormatted>
            
            if (hsd1.ErrorCode & SDMMC_ERROR_TX_UNDERRUN) {
 80011d0:	4b93      	ldr	r3, [pc, #588]	@ (8001420 <SDStorage_Init+0x2c8>)
 80011d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011d4:	f003 0310 	and.w	r3, r3, #16
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <SDStorage_Init+0x8c>
                LOG_WARN("[SDStorage] TX_UNDERRUN detected - clock may be too fast");
 80011dc:	4995      	ldr	r1, [pc, #596]	@ (8001434 <SDStorage_Init+0x2dc>)
 80011de:	2002      	movs	r0, #2
 80011e0:	f003 fc5a 	bl	8004a98 <LOGGER_SendFormatted>
            }
            if (hsd1.ErrorCode & SDMMC_ERROR_DATA_CRC_FAIL) {
 80011e4:	4b8e      	ldr	r3, [pc, #568]	@ (8001420 <SDStorage_Init+0x2c8>)
 80011e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <SDStorage_Init+0xa4>
                LOG_WARN("[SDStorage] CRC_FAIL detected - cache issue possible");
 80011f0:	4991      	ldr	r1, [pc, #580]	@ (8001438 <SDStorage_Init+0x2e0>)
 80011f2:	2002      	movs	r0, #2
 80011f4:	f003 fc50 	bl	8004a98 <LOGGER_SendFormatted>
                SCB_CleanInvalidateDCache();
 80011f8:	f7ff ff72 	bl	80010e0 <SCB_CleanInvalidateDCache>
            }
            
            // 에러 코드 클리어
            hsd1.ErrorCode = HAL_SD_ERROR_NONE;
 80011fc:	4b88      	ldr	r3, [pc, #544]	@ (8001420 <SDStorage_Init+0x2c8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	639a      	str	r2, [r3, #56]	@ 0x38
 8001202:	e00e      	b.n	8001222 <SDStorage_Init+0xca>
        }
    } else {
        LOG_ERROR("[SDStorage] ❌ SD card failed to reach TRANSFER state (state: %d)", card_state);
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	498d      	ldr	r1, [pc, #564]	@ (800143c <SDStorage_Init+0x2e4>)
 8001208:	2003      	movs	r0, #3
 800120a:	f003 fc45 	bl	8004a98 <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] SDMMC ErrorCode: 0x%08X", hsd1.ErrorCode);
 800120e:	4b84      	ldr	r3, [pc, #528]	@ (8001420 <SDStorage_Init+0x2c8>)
 8001210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001212:	461a      	mov	r2, r3
 8001214:	498a      	ldr	r1, [pc, #552]	@ (8001440 <SDStorage_Init+0x2e8>)
 8001216:	2003      	movs	r0, #3
 8001218:	f003 fc3e 	bl	8004a98 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	e199      	b.n	8001556 <SDStorage_Init+0x3fe>
    }
    
    DSTATUS disk_status = disk_initialize(0);
 8001222:	2000      	movs	r0, #0
 8001224:	f00f fbd2 	bl	80109cc <disk_initialize>
 8001228:	4603      	mov	r3, r0
 800122a:	71fb      	strb	r3, [r7, #7]
    LOG_INFO("[SDStorage] disk_initialize result: 0x%02X", disk_status);
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	461a      	mov	r2, r3
 8001230:	4984      	ldr	r1, [pc, #528]	@ (8001444 <SDStorage_Init+0x2ec>)
 8001232:	2001      	movs	r0, #1
 8001234:	f003 fc30 	bl	8004a98 <LOGGER_SendFormatted>
    
    // disk_initialize 실패 시 조기 종료 (블로킹 방지)
    if (disk_status != 0) {
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00a      	beq.n	8001254 <SDStorage_Init+0xfc>
        LOG_ERROR("[SDStorage] disk_initialize failed - SD card not ready");
 800123e:	4982      	ldr	r1, [pc, #520]	@ (8001448 <SDStorage_Init+0x2f0>)
 8001240:	2003      	movs	r0, #3
 8001242:	f003 fc29 	bl	8004a98 <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] Possible causes: write-protected, bad card, or BSP/HAL conflict");
 8001246:	4981      	ldr	r1, [pc, #516]	@ (800144c <SDStorage_Init+0x2f4>)
 8001248:	2003      	movs	r0, #3
 800124a:	f003 fc25 	bl	8004a98 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	e180      	b.n	8001556 <SDStorage_Init+0x3fe>
    }
    
    // 2. 파일시스템 마운트 시도 (지연 마운트로 변경 - 블로킹 방지)
    LOG_INFO("[SDStorage] Using deferred mount (flag=0) to avoid blocking...");
 8001254:	497e      	ldr	r1, [pc, #504]	@ (8001450 <SDStorage_Init+0x2f8>)
 8001256:	2001      	movs	r0, #1
 8001258:	f003 fc1e 	bl	8004a98 <LOGGER_SendFormatted>
    
    // f_mount 호출 전에 충분한 지연 (SD 카드 안정화)
    #ifdef STM32F746xx
    LOG_INFO("[SDStorage] Waiting for SD card stabilization (500ms)...");
 800125c:	497d      	ldr	r1, [pc, #500]	@ (8001454 <SDStorage_Init+0x2fc>)
 800125e:	2001      	movs	r0, #1
 8001260:	f003 fc1a 	bl	8004a98 <LOGGER_SendFormatted>
    HAL_Delay(500);
 8001264:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001268:	f003 ff60 	bl	800512c <HAL_Delay>
    #endif
    
    // f_mount 블로킹 문제 - 완전 우회 시도
    LOG_WARN("[SDStorage] f_mount consistently blocks despite all fixes");
 800126c:	497a      	ldr	r1, [pc, #488]	@ (8001458 <SDStorage_Init+0x300>)
 800126e:	2002      	movs	r0, #2
 8001270:	f003 fc12 	bl	8004a98 <LOGGER_SendFormatted>
    LOG_INFO("[SDStorage] Attempting direct file operations without f_mount...");
 8001274:	4979      	ldr	r1, [pc, #484]	@ (800145c <SDStorage_Init+0x304>)
 8001276:	2001      	movs	r0, #1
 8001278:	f003 fc0e 	bl	8004a98 <LOGGER_SendFormatted>
    LOG_INFO("[SDStorage] Some FatFs implementations support auto-mount on first file access");
 800127c:	4978      	ldr	r1, [pc, #480]	@ (8001460 <SDStorage_Init+0x308>)
 800127e:	2001      	movs	r0, #1
 8001280:	f003 fc0a 	bl	8004a98 <LOGGER_SendFormatted>
    
    // f_mount 여러 번 재시도 (성공 프로젝트 패턴)
    LOG_INFO("[SDStorage] Attempting f_mount with retry logic...");
 8001284:	4977      	ldr	r1, [pc, #476]	@ (8001464 <SDStorage_Init+0x30c>)
 8001286:	2001      	movs	r0, #1
 8001288:	f003 fc06 	bl	8004a98 <LOGGER_SendFormatted>
    FRESULT mount_result = FR_DISK_ERR;  // 초기값
 800128c:	2301      	movs	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]
    
    for (int retry = 0; retry < 3; retry++) {
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	e035      	b.n	8001302 <SDStorage_Init+0x1aa>
        LOG_INFO("[SDStorage] f_mount attempt %d/3...", retry + 1);
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	3301      	adds	r3, #1
 800129a:	461a      	mov	r2, r3
 800129c:	4972      	ldr	r1, [pc, #456]	@ (8001468 <SDStorage_Init+0x310>)
 800129e:	2001      	movs	r0, #1
 80012a0:	f003 fbfa 	bl	8004a98 <LOGGER_SendFormatted>
        mount_result = f_mount(&SDFatFS, SDPath, 1);  // 즉시 마운트
 80012a4:	2201      	movs	r2, #1
 80012a6:	4971      	ldr	r1, [pc, #452]	@ (800146c <SDStorage_Init+0x314>)
 80012a8:	4871      	ldr	r0, [pc, #452]	@ (8001470 <SDStorage_Init+0x318>)
 80012aa:	f011 f8b1 	bl	8012410 <f_mount>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
        LOG_INFO("[SDStorage] f_mount result: %d", mount_result);
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	461a      	mov	r2, r3
 80012b6:	496f      	ldr	r1, [pc, #444]	@ (8001474 <SDStorage_Init+0x31c>)
 80012b8:	2001      	movs	r0, #1
 80012ba:	f003 fbed 	bl	8004a98 <LOGGER_SendFormatted>
        
        if (mount_result == FR_OK) {
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d107      	bne.n	80012d4 <SDStorage_Init+0x17c>
            LOG_INFO("[SDStorage] ✅ f_mount successful on attempt %d", retry + 1);
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	3301      	adds	r3, #1
 80012c8:	461a      	mov	r2, r3
 80012ca:	496b      	ldr	r1, [pc, #428]	@ (8001478 <SDStorage_Init+0x320>)
 80012cc:	2001      	movs	r0, #1
 80012ce:	f003 fbe3 	bl	8004a98 <LOGGER_SendFormatted>
            break;
 80012d2:	e019      	b.n	8001308 <SDStorage_Init+0x1b0>
        } else {
            LOG_WARN("[SDStorage] f_mount failed on attempt %d, retrying in 1000ms...", retry + 1);
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	3301      	adds	r3, #1
 80012d8:	461a      	mov	r2, r3
 80012da:	4968      	ldr	r1, [pc, #416]	@ (800147c <SDStorage_Init+0x324>)
 80012dc:	2002      	movs	r0, #2
 80012de:	f003 fbdb 	bl	8004a98 <LOGGER_SendFormatted>
            if (retry < 2) {  // 마지막 시도가 아니면 대기
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	dc09      	bgt.n	80012fc <SDStorage_Init+0x1a4>
                // STM32F7 D-Cache 클리어 (성공 프로젝트 패턴)
                LOG_INFO("[SDStorage] Clearing D-Cache for STM32F7 compatibility...");
 80012e8:	4965      	ldr	r1, [pc, #404]	@ (8001480 <SDStorage_Init+0x328>)
 80012ea:	2001      	movs	r0, #1
 80012ec:	f003 fbd4 	bl	8004a98 <LOGGER_SendFormatted>
                SCB_CleanInvalidateDCache();
 80012f0:	f7ff fef6 	bl	80010e0 <SCB_CleanInvalidateDCache>
                HAL_Delay(1000);
 80012f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012f8:	f003 ff18 	bl	800512c <HAL_Delay>
    for (int retry = 0; retry < 3; retry++) {
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	3301      	adds	r3, #1
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	2b02      	cmp	r3, #2
 8001306:	ddc6      	ble.n	8001296 <SDStorage_Init+0x13e>
            }
        }
    }
    
    // 즉시 마운트 성공 시 쓰기 준비 완료
    if (mount_result == FR_OK) {
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d103      	bne.n	8001316 <SDStorage_Init+0x1be>
        LOG_INFO("[SDStorage] Immediate mount successful - SD ready for write operations");
 800130e:	495d      	ldr	r1, [pc, #372]	@ (8001484 <SDStorage_Init+0x32c>)
 8001310:	2001      	movs	r0, #1
 8001312:	f003 fbc1 	bl	8004a98 <LOGGER_SendFormatted>
    }
    
    if (mount_result != FR_OK) {
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 80f8 	beq.w	800150e <SDStorage_Init+0x3b6>
        LOG_WARN("[SDStorage] f_mount failed with result: %d", mount_result);
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	461a      	mov	r2, r3
 8001322:	4959      	ldr	r1, [pc, #356]	@ (8001488 <SDStorage_Init+0x330>)
 8001324:	2002      	movs	r0, #2
 8001326:	f003 fbb7 	bl	8004a98 <LOGGER_SendFormatted>
        
        // SD 카드가 이미 포맷되어 있다면 f_mkfs 시도하지 않고 다른 접근법 사용
        if (mount_result == FR_DISK_ERR) {
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d12f      	bne.n	8001390 <SDStorage_Init+0x238>
            LOG_WARN("[SDStorage] FR_DISK_ERR detected - SD card may be formatted but incompatible");
 8001330:	4956      	ldr	r1, [pc, #344]	@ (800148c <SDStorage_Init+0x334>)
 8001332:	2002      	movs	r0, #2
 8001334:	f003 fbb0 	bl	8004a98 <LOGGER_SendFormatted>
            LOG_INFO("[SDStorage] Skipping f_mkfs since SD card is already FAT32 formatted");
 8001338:	4955      	ldr	r1, [pc, #340]	@ (8001490 <SDStorage_Init+0x338>)
 800133a:	2001      	movs	r0, #1
 800133c:	f003 fbac 	bl	8004a98 <LOGGER_SendFormatted>
            LOG_INFO("[SDStorage] Trying alternative mount approach...");
 8001340:	4954      	ldr	r1, [pc, #336]	@ (8001494 <SDStorage_Init+0x33c>)
 8001342:	2001      	movs	r0, #1
 8001344:	f003 fba8 	bl	8004a98 <LOGGER_SendFormatted>
            
            // 다른 마운트 방식 시도 (지연 마운트)
            LOG_INFO("[SDStorage] Attempting deferred mount (flag=0)...");
 8001348:	4953      	ldr	r1, [pc, #332]	@ (8001498 <SDStorage_Init+0x340>)
 800134a:	2001      	movs	r0, #1
 800134c:	f003 fba4 	bl	8004a98 <LOGGER_SendFormatted>
            mount_result = f_mount(&SDFatFS, SDPath, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	4946      	ldr	r1, [pc, #280]	@ (800146c <SDStorage_Init+0x314>)
 8001354:	4846      	ldr	r0, [pc, #280]	@ (8001470 <SDStorage_Init+0x318>)
 8001356:	f011 f85b 	bl	8012410 <f_mount>
 800135a:	4603      	mov	r3, r0
 800135c:	73fb      	strb	r3, [r7, #15]
            LOG_INFO("[SDStorage] Deferred mount result: %d", mount_result);
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	461a      	mov	r2, r3
 8001362:	494e      	ldr	r1, [pc, #312]	@ (800149c <SDStorage_Init+0x344>)
 8001364:	2001      	movs	r0, #1
 8001366:	f003 fb97 	bl	8004a98 <LOGGER_SendFormatted>
            
            if (mount_result == FR_OK) {
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d104      	bne.n	800137a <SDStorage_Init+0x222>
                LOG_INFO("[SDStorage] Deferred mount successful!");
 8001370:	494b      	ldr	r1, [pc, #300]	@ (80014a0 <SDStorage_Init+0x348>)
 8001372:	2001      	movs	r0, #1
 8001374:	f003 fb90 	bl	8004a98 <LOGGER_SendFormatted>
 8001378:	e0c9      	b.n	800150e <SDStorage_Init+0x3b6>
            } else {
                LOG_ERROR("[SDStorage] Both immediate and deferred mount failed");
 800137a:	494a      	ldr	r1, [pc, #296]	@ (80014a4 <SDStorage_Init+0x34c>)
 800137c:	2003      	movs	r0, #3
 800137e:	f003 fb8b 	bl	8004a98 <LOGGER_SendFormatted>
                LOG_ERROR("[SDStorage] SD card may have hardware compatibility issues");
 8001382:	4949      	ldr	r1, [pc, #292]	@ (80014a8 <SDStorage_Init+0x350>)
 8001384:	2003      	movs	r0, #3
 8001386:	f003 fb87 	bl	8004a98 <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	e0e2      	b.n	8001556 <SDStorage_Init+0x3fe>
            }
        }
        else if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	2b03      	cmp	r3, #3
 8001394:	d003      	beq.n	800139e <SDStorage_Init+0x246>
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	2b0d      	cmp	r3, #13
 800139a:	f040 80ae 	bne.w	80014fa <SDStorage_Init+0x3a2>
            // 작업 버퍼 할당 (전역 또는 스택)
            static BYTE work[_MAX_SS];
            
            // 실제 f_mkfs 시도
            LOG_INFO("[SDStorage] Attempting to create filesystem with f_mkfs...");
 800139e:	4943      	ldr	r1, [pc, #268]	@ (80014ac <SDStorage_Init+0x354>)
 80013a0:	2001      	movs	r0, #1
 80013a2:	f003 fb79 	bl	8004a98 <LOGGER_SendFormatted>
            FRESULT mkfs_result = f_mkfs(SDPath, FM_ANY, 0, work, sizeof(work));
 80013a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	4b40      	ldr	r3, [pc, #256]	@ (80014b0 <SDStorage_Init+0x358>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	2107      	movs	r1, #7
 80013b2:	482e      	ldr	r0, [pc, #184]	@ (800146c <SDStorage_Init+0x314>)
 80013b4:	f011 fd50 	bl	8012e58 <f_mkfs>
 80013b8:	4603      	mov	r3, r0
 80013ba:	71bb      	strb	r3, [r7, #6]
            LOG_INFO("[SDStorage] f_mkfs(FM_ANY) result: %d", mkfs_result);
 80013bc:	79bb      	ldrb	r3, [r7, #6]
 80013be:	461a      	mov	r2, r3
 80013c0:	493c      	ldr	r1, [pc, #240]	@ (80014b4 <SDStorage_Init+0x35c>)
 80013c2:	2001      	movs	r0, #1
 80013c4:	f003 fb68 	bl	8004a98 <LOGGER_SendFormatted>
            
            if (mkfs_result != FR_OK) {
 80013c8:	79bb      	ldrb	r3, [r7, #6]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d07c      	beq.n	80014c8 <SDStorage_Init+0x370>
                // FAT32로 다시 시도
                LOG_INFO("[SDStorage] Retrying with explicit FAT32 format...");
 80013ce:	493a      	ldr	r1, [pc, #232]	@ (80014b8 <SDStorage_Init+0x360>)
 80013d0:	2001      	movs	r0, #1
 80013d2:	f003 fb61 	bl	8004a98 <LOGGER_SendFormatted>
                mkfs_result = f_mkfs(SDPath, FM_FAT32, 4096, work, sizeof(work));
 80013d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	4b34      	ldr	r3, [pc, #208]	@ (80014b0 <SDStorage_Init+0x358>)
 80013de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013e2:	2102      	movs	r1, #2
 80013e4:	4821      	ldr	r0, [pc, #132]	@ (800146c <SDStorage_Init+0x314>)
 80013e6:	f011 fd37 	bl	8012e58 <f_mkfs>
 80013ea:	4603      	mov	r3, r0
 80013ec:	71bb      	strb	r3, [r7, #6]
                LOG_INFO("[SDStorage] f_mkfs(FM_FAT32) result: %d", mkfs_result);
 80013ee:	79bb      	ldrb	r3, [r7, #6]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4932      	ldr	r1, [pc, #200]	@ (80014bc <SDStorage_Init+0x364>)
 80013f4:	2001      	movs	r0, #1
 80013f6:	f003 fb4f 	bl	8004a98 <LOGGER_SendFormatted>
                
                if (mkfs_result != FR_OK) {
 80013fa:	79bb      	ldrb	r3, [r7, #6]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d063      	beq.n	80014c8 <SDStorage_Init+0x370>
                    LOG_ERROR("[SDStorage] File system creation failed: %d", mkfs_result);
 8001400:	79bb      	ldrb	r3, [r7, #6]
 8001402:	461a      	mov	r2, r3
 8001404:	492e      	ldr	r1, [pc, #184]	@ (80014c0 <SDStorage_Init+0x368>)
 8001406:	2003      	movs	r0, #3
 8001408:	f003 fb46 	bl	8004a98 <LOGGER_SendFormatted>
                    LOG_ERROR("[SDStorage] Possible SD card hardware issue - try different card");
 800140c:	492d      	ldr	r1, [pc, #180]	@ (80014c4 <SDStorage_Init+0x36c>)
 800140e:	2003      	movs	r0, #3
 8001410:	f003 fb42 	bl	8004a98 <LOGGER_SendFormatted>
                    return SDSTORAGE_ERROR;
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
 8001418:	e09d      	b.n	8001556 <SDStorage_Init+0x3fe>
 800141a:	bf00      	nop
 800141c:	08016f98 	.word	0x08016f98
 8001420:	20000e60 	.word	0x20000e60
 8001424:	08016fc8 	.word	0x08016fc8
 8001428:	08016ff0 	.word	0x08016ff0
 800142c:	08017030 	.word	0x08017030
 8001430:	0801706c 	.word	0x0801706c
 8001434:	0801709c 	.word	0x0801709c
 8001438:	080170d8 	.word	0x080170d8
 800143c:	08017110 	.word	0x08017110
 8001440:	08017154 	.word	0x08017154
 8001444:	08017178 	.word	0x08017178
 8001448:	080171a4 	.word	0x080171a4
 800144c:	080171dc 	.word	0x080171dc
 8001450:	08017228 	.word	0x08017228
 8001454:	08017268 	.word	0x08017268
 8001458:	080172a4 	.word	0x080172a4
 800145c:	080172e0 	.word	0x080172e0
 8001460:	08017324 	.word	0x08017324
 8001464:	08017374 	.word	0x08017374
 8001468:	080173a8 	.word	0x080173a8
 800146c:	20001788 	.word	0x20001788
 8001470:	2000178c 	.word	0x2000178c
 8001474:	080173cc 	.word	0x080173cc
 8001478:	080173ec 	.word	0x080173ec
 800147c:	08017420 	.word	0x08017420
 8001480:	08017460 	.word	0x08017460
 8001484:	0801749c 	.word	0x0801749c
 8001488:	080174e4 	.word	0x080174e4
 800148c:	08017510 	.word	0x08017510
 8001490:	08017560 	.word	0x08017560
 8001494:	080175a8 	.word	0x080175a8
 8001498:	080175dc 	.word	0x080175dc
 800149c:	08017610 	.word	0x08017610
 80014a0:	08017638 	.word	0x08017638
 80014a4:	08017660 	.word	0x08017660
 80014a8:	08017698 	.word	0x08017698
 80014ac:	080176d4 	.word	0x080176d4
 80014b0:	20000560 	.word	0x20000560
 80014b4:	08017710 	.word	0x08017710
 80014b8:	08017738 	.word	0x08017738
 80014bc:	0801776c 	.word	0x0801776c
 80014c0:	08017794 	.word	0x08017794
 80014c4:	080177c0 	.word	0x080177c0
                }
            }
            
            // 파일시스템 생성 후 재마운트 시도
            mount_result = f_mount(&SDFatFS, SDPath, 1);
 80014c8:	2201      	movs	r2, #1
 80014ca:	4925      	ldr	r1, [pc, #148]	@ (8001560 <SDStorage_Init+0x408>)
 80014cc:	4825      	ldr	r0, [pc, #148]	@ (8001564 <SDStorage_Init+0x40c>)
 80014ce:	f010 ff9f 	bl	8012410 <f_mount>
 80014d2:	4603      	mov	r3, r0
 80014d4:	73fb      	strb	r3, [r7, #15]
            LOG_INFO("[SDStorage] Re-mount after mkfs result: %d", mount_result);
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	461a      	mov	r2, r3
 80014da:	4923      	ldr	r1, [pc, #140]	@ (8001568 <SDStorage_Init+0x410>)
 80014dc:	2001      	movs	r0, #1
 80014de:	f003 fadb 	bl	8004a98 <LOGGER_SendFormatted>
            
            if (mount_result != FR_OK) {
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d011      	beq.n	800150c <SDStorage_Init+0x3b4>
                LOG_ERROR("[SDStorage] Re-mount failed after mkfs: %d", mount_result);
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	461a      	mov	r2, r3
 80014ec:	491f      	ldr	r1, [pc, #124]	@ (800156c <SDStorage_Init+0x414>)
 80014ee:	2003      	movs	r0, #3
 80014f0:	f003 fad2 	bl	8004a98 <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295
 80014f8:	e02d      	b.n	8001556 <SDStorage_Init+0x3fe>
            }
        } else {
            LOG_ERROR("[SDStorage] Mount failed with unrecoverable error: %d", mount_result);
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	461a      	mov	r2, r3
 80014fe:	491c      	ldr	r1, [pc, #112]	@ (8001570 <SDStorage_Init+0x418>)
 8001500:	2003      	movs	r0, #3
 8001502:	f003 fac9 	bl	8004a98 <LOGGER_SendFormatted>
            return SDSTORAGE_ERROR;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	e024      	b.n	8001556 <SDStorage_Init+0x3fe>
        else if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 800150c:	bf00      	nop
        }
    }
    
    LOG_INFO("[SDStorage] File system mount successful");
 800150e:	4919      	ldr	r1, [pc, #100]	@ (8001574 <SDStorage_Init+0x41c>)
 8001510:	2001      	movs	r0, #1
 8001512:	f003 fac1 	bl	8004a98 <LOGGER_SendFormatted>
#endif

    // FatFs 마운트 성공 확인됨
    
    // 디렉토리 생성 시도
    LOG_INFO("[SDStorage] Creating log directory...");
 8001516:	4918      	ldr	r1, [pc, #96]	@ (8001578 <SDStorage_Init+0x420>)
 8001518:	2001      	movs	r0, #1
 800151a:	f003 fabd 	bl	8004a98 <LOGGER_SendFormatted>
    int dir_result = _create_log_directory();
 800151e:	f000 f9cf 	bl	80018c0 <_create_log_directory>
 8001522:	6038      	str	r0, [r7, #0]
    g_directory_available = (dir_result == SDSTORAGE_OK);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	bf0c      	ite	eq
 800152a:	2301      	moveq	r3, #1
 800152c:	2300      	movne	r3, #0
 800152e:	b2da      	uxtb	r2, r3
 8001530:	4b12      	ldr	r3, [pc, #72]	@ (800157c <SDStorage_Init+0x424>)
 8001532:	701a      	strb	r2, [r3, #0]
    
    g_sd_ready = true;
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <SDStorage_Init+0x428>)
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]
    g_current_log_size = 0;
 800153a:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <SDStorage_Init+0x42c>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
    memset(g_current_log_file, 0, sizeof(g_current_log_file));
 8001540:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001544:	2100      	movs	r1, #0
 8001546:	4810      	ldr	r0, [pc, #64]	@ (8001588 <SDStorage_Init+0x430>)
 8001548:	f014 fc6e 	bl	8015e28 <memset>
    
    LOG_INFO("[SDStorage] Initialization completed successfully");
 800154c:	490f      	ldr	r1, [pc, #60]	@ (800158c <SDStorage_Init+0x434>)
 800154e:	2001      	movs	r0, #1
 8001550:	f003 faa2 	bl	8004a98 <LOGGER_SendFormatted>
    return SDSTORAGE_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20001788 	.word	0x20001788
 8001564:	2000178c 	.word	0x2000178c
 8001568:	08017804 	.word	0x08017804
 800156c:	08017830 	.word	0x08017830
 8001570:	0801785c 	.word	0x0801785c
 8001574:	08017894 	.word	0x08017894
 8001578:	080178c0 	.word	0x080178c0
 800157c:	20000328 	.word	0x20000328
 8001580:	20000222 	.word	0x20000222
 8001584:	20000324 	.word	0x20000324
 8001588:	20000224 	.word	0x20000224
 800158c:	080178e8 	.word	0x080178e8

08001590 <SDStorage_WriteLog>:

int SDStorage_WriteLog(const void* data, size_t size)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
    if (!g_sd_ready) {
 800159a:	4b6d      	ldr	r3, [pc, #436]	@ (8001750 <SDStorage_WriteLog+0x1c0>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	f083 0301 	eor.w	r3, r3, #1
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <SDStorage_WriteLog+0x1e>
        return SDSTORAGE_NOT_READY;
 80015a8:	f06f 0301 	mvn.w	r3, #1
 80015ac:	e0cc      	b.n	8001748 <SDStorage_WriteLog+0x1b8>
    }
    
    if (data == NULL || size == 0) {
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d002      	beq.n	80015ba <SDStorage_WriteLog+0x2a>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d102      	bne.n	80015c0 <SDStorage_WriteLog+0x30>
        return SDSTORAGE_INVALID_PARAM;
 80015ba:	f06f 0304 	mvn.w	r3, #4
 80015be:	e0c3      	b.n	8001748 <SDStorage_WriteLog+0x1b8>
    }
    
    // 새 로그 파일이 필요한 경우 생성
    if (strlen(g_current_log_file) == 0 || 
 80015c0:	4b64      	ldr	r3, [pc, #400]	@ (8001754 <SDStorage_WriteLog+0x1c4>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <SDStorage_WriteLog+0x46>
        g_current_log_size + size > SDSTORAGE_MAX_LOG_SIZE) {
 80015c8:	4b63      	ldr	r3, [pc, #396]	@ (8001758 <SDStorage_WriteLog+0x1c8>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	4413      	add	r3, r2
    if (strlen(g_current_log_file) == 0 || 
 80015d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80015d4:	d907      	bls.n	80015e6 <SDStorage_WriteLog+0x56>
        if (SDStorage_CreateNewLogFile() != SDSTORAGE_OK) {
 80015d6:	f000 f8f9 	bl	80017cc <SDStorage_CreateNewLogFile>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <SDStorage_WriteLog+0x56>
            return SDSTORAGE_FILE_ERROR;
 80015e0:	f06f 0302 	mvn.w	r3, #2
 80015e4:	e0b0      	b.n	8001748 <SDStorage_WriteLog+0x1b8>
        }
    }

#ifdef STM32F746xx
    // STM32 환경: 안전한 파일 쓰기 (블로킹 방지)
    LOG_INFO("[SDStorage] WriteLog: size=%d bytes, file_open=%s", 
 80015e6:	4b5d      	ldr	r3, [pc, #372]	@ (800175c <SDStorage_WriteLog+0x1cc>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SDStorage_WriteLog+0x62>
 80015ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001760 <SDStorage_WriteLog+0x1d0>)
 80015f0:	e000      	b.n	80015f4 <SDStorage_WriteLog+0x64>
 80015f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001764 <SDStorage_WriteLog+0x1d4>)
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	495c      	ldr	r1, [pc, #368]	@ (8001768 <SDStorage_WriteLog+0x1d8>)
 80015f8:	2001      	movs	r0, #1
 80015fa:	f003 fa4d 	bl	8004a98 <LOGGER_SendFormatted>
             size, g_file_open ? "true" : "false");
    
    if (!g_file_open) {
 80015fe:	4b57      	ldr	r3, [pc, #348]	@ (800175c <SDStorage_WriteLog+0x1cc>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	f083 0301 	eor.w	r3, r3, #1
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d037      	beq.n	800167c <SDStorage_WriteLog+0xec>
        LOG_INFO("[SDStorage] Attempting safe f_open for writing...");
 800160c:	4957      	ldr	r1, [pc, #348]	@ (800176c <SDStorage_WriteLog+0x1dc>)
 800160e:	2001      	movs	r0, #1
 8001610:	f003 fa42 	bl	8004a98 <LOGGER_SendFormatted>
        
        // 간단한 파일명으로 다시 시도 (긴 경로명 문제 가능성)
        LOG_INFO("[SDStorage] Trying simple filename to avoid path issues...");
 8001614:	4956      	ldr	r1, [pc, #344]	@ (8001770 <SDStorage_WriteLog+0x1e0>)
 8001616:	2001      	movs	r0, #1
 8001618:	f003 fa3e 	bl	8004a98 <LOGGER_SendFormatted>
        
        // 루트 디렉토리에 간단한 파일명 사용
        strcpy(g_current_log_file, "log.txt");
 800161c:	4b4d      	ldr	r3, [pc, #308]	@ (8001754 <SDStorage_WriteLog+0x1c4>)
 800161e:	4a55      	ldr	r2, [pc, #340]	@ (8001774 <SDStorage_WriteLog+0x1e4>)
 8001620:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001624:	e883 0003 	stmia.w	r3, {r0, r1}
        LOG_INFO("[SDStorage] Using simple filename: %s", g_current_log_file);
 8001628:	4a4a      	ldr	r2, [pc, #296]	@ (8001754 <SDStorage_WriteLog+0x1c4>)
 800162a:	4953      	ldr	r1, [pc, #332]	@ (8001778 <SDStorage_WriteLog+0x1e8>)
 800162c:	2001      	movs	r0, #1
 800162e:	f003 fa33 	bl	8004a98 <LOGGER_SendFormatted>
        
        // FatFs f_open 시도
        LOG_INFO("[SDStorage] Attempting FatFs f_open for Windows-compatible logging");
 8001632:	4952      	ldr	r1, [pc, #328]	@ (800177c <SDStorage_WriteLog+0x1ec>)
 8001634:	2001      	movs	r0, #1
 8001636:	f003 fa2f 	bl	8004a98 <LOGGER_SendFormatted>
        
        // 실제 f_open 시도 (test.txt와 동일한 방식)
        FRESULT open_result = f_open(&g_log_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 800163a:	220a      	movs	r2, #10
 800163c:	4945      	ldr	r1, [pc, #276]	@ (8001754 <SDStorage_WriteLog+0x1c4>)
 800163e:	4850      	ldr	r0, [pc, #320]	@ (8001780 <SDStorage_WriteLog+0x1f0>)
 8001640:	f010 ff2c 	bl	801249c <f_open>
 8001644:	4603      	mov	r3, r0
 8001646:	73fb      	strb	r3, [r7, #15]
        LOG_INFO("[SDStorage] f_open result: %d", open_result);
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	461a      	mov	r2, r3
 800164c:	494d      	ldr	r1, [pc, #308]	@ (8001784 <SDStorage_WriteLog+0x1f4>)
 800164e:	2001      	movs	r0, #1
 8001650:	f003 fa22 	bl	8004a98 <LOGGER_SendFormatted>
        
        if (open_result == FR_OK) {
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d107      	bne.n	800166a <SDStorage_WriteLog+0xda>
            g_file_open = true;
 800165a:	4b40      	ldr	r3, [pc, #256]	@ (800175c <SDStorage_WriteLog+0x1cc>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
            LOG_INFO("[SDStorage] File opened successfully for writing");
 8001660:	4949      	ldr	r1, [pc, #292]	@ (8001788 <SDStorage_WriteLog+0x1f8>)
 8001662:	2001      	movs	r0, #1
 8001664:	f003 fa18 	bl	8004a98 <LOGGER_SendFormatted>
 8001668:	e008      	b.n	800167c <SDStorage_WriteLog+0xec>
        } else {
            LOG_ERROR("[SDStorage] f_open failed: %d - SD logging will be disabled", open_result);
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	461a      	mov	r2, r3
 800166e:	4947      	ldr	r1, [pc, #284]	@ (800178c <SDStorage_WriteLog+0x1fc>)
 8001670:	2003      	movs	r0, #3
 8001672:	f003 fa11 	bl	8004a98 <LOGGER_SendFormatted>
            g_file_open = false;  // FatFs 모드 비활성화
 8001676:	4b39      	ldr	r3, [pc, #228]	@ (800175c <SDStorage_WriteLog+0x1cc>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
        }
    }
    
    if (g_file_open) {
 800167c:	4b37      	ldr	r3, [pc, #220]	@ (800175c <SDStorage_WriteLog+0x1cc>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d039      	beq.n	80016f8 <SDStorage_WriteLog+0x168>
        // FatFs 파일 쓰기 (Windows 호환)
        LOG_INFO("[SDStorage] Writing %d bytes using FatFs (for Windows compatibility)", size);
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	4942      	ldr	r1, [pc, #264]	@ (8001790 <SDStorage_WriteLog+0x200>)
 8001688:	2001      	movs	r0, #1
 800168a:	f003 fa05 	bl	8004a98 <LOGGER_SendFormatted>
        
        UINT bytes_written;
        FRESULT write_result = f_write(&g_log_file, data, size, &bytes_written);
 800168e:	f107 0308 	add.w	r3, r7, #8
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	483a      	ldr	r0, [pc, #232]	@ (8001780 <SDStorage_WriteLog+0x1f0>)
 8001698:	f011 f8ba 	bl	8012810 <f_write>
 800169c:	4603      	mov	r3, r0
 800169e:	73bb      	strb	r3, [r7, #14]
        LOG_INFO("[SDStorage] f_write result: %d, bytes_written: %d", write_result, bytes_written);
 80016a0:	7bba      	ldrb	r2, [r7, #14]
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	493b      	ldr	r1, [pc, #236]	@ (8001794 <SDStorage_WriteLog+0x204>)
 80016a6:	2001      	movs	r0, #1
 80016a8:	f003 f9f6 	bl	8004a98 <LOGGER_SendFormatted>
        
        if (write_result != FR_OK) {
 80016ac:	7bbb      	ldrb	r3, [r7, #14]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d009      	beq.n	80016c6 <SDStorage_WriteLog+0x136>
            LOG_ERROR("[SDStorage] f_write failed: %d - SD logging disabled", write_result);
 80016b2:	7bbb      	ldrb	r3, [r7, #14]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4938      	ldr	r1, [pc, #224]	@ (8001798 <SDStorage_WriteLog+0x208>)
 80016b8:	2003      	movs	r0, #3
 80016ba:	f003 f9ed 	bl	8004a98 <LOGGER_SendFormatted>
            g_file_open = false;  // FatFs 모드 비활성화
 80016be:	4b27      	ldr	r3, [pc, #156]	@ (800175c <SDStorage_WriteLog+0x1cc>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
 80016c4:	e018      	b.n	80016f8 <SDStorage_WriteLog+0x168>
        } else if (bytes_written != size) {
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d008      	beq.n	80016e0 <SDStorage_WriteLog+0x150>
            LOG_WARN("[SDStorage] Partial write: %d/%d bytes", bytes_written, size);
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	4932      	ldr	r1, [pc, #200]	@ (800179c <SDStorage_WriteLog+0x20c>)
 80016d4:	2002      	movs	r0, #2
 80016d6:	f003 f9df 	bl	8004a98 <LOGGER_SendFormatted>
            return SDSTORAGE_DISK_FULL;
 80016da:	f06f 0303 	mvn.w	r3, #3
 80016de:	e033      	b.n	8001748 <SDStorage_WriteLog+0x1b8>
        } else {
            // FatFs 쓰기 성공
            LOG_INFO("[SDStorage] FatFs write successful");
 80016e0:	492f      	ldr	r1, [pc, #188]	@ (80017a0 <SDStorage_WriteLog+0x210>)
 80016e2:	2001      	movs	r0, #1
 80016e4:	f003 f9d8 	bl	8004a98 <LOGGER_SendFormatted>
            g_current_log_size += bytes_written;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001758 <SDStorage_WriteLog+0x1c8>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	4413      	add	r3, r2
 80016f0:	4a19      	ldr	r2, [pc, #100]	@ (8001758 <SDStorage_WriteLog+0x1c8>)
 80016f2:	6013      	str	r3, [r2, #0]
            return SDSTORAGE_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	e027      	b.n	8001748 <SDStorage_WriteLog+0x1b8>
        }
    }
    
    if (!g_file_open) {
 80016f8:	4b18      	ldr	r3, [pc, #96]	@ (800175c <SDStorage_WriteLog+0x1cc>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	f083 0301 	eor.w	r3, r3, #1
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00a      	beq.n	800171c <SDStorage_WriteLog+0x18c>
        // FatFs 파일이 열리지 않은 경우 - 에러 반환
        LOG_ERROR("[SDStorage] File not open and FatFs f_open failed");
 8001706:	4927      	ldr	r1, [pc, #156]	@ (80017a4 <SDStorage_WriteLog+0x214>)
 8001708:	2003      	movs	r0, #3
 800170a:	f003 f9c5 	bl	8004a98 <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] Cannot write log data - SD logging unavailable");
 800170e:	4926      	ldr	r1, [pc, #152]	@ (80017a8 <SDStorage_WriteLog+0x218>)
 8001710:	2003      	movs	r0, #3
 8001712:	f003 f9c1 	bl	8004a98 <LOGGER_SendFormatted>
        return SDSTORAGE_FILE_ERROR;
 8001716:	f06f 0302 	mvn.w	r3, #2
 800171a:	e015      	b.n	8001748 <SDStorage_WriteLog+0x1b8>
    }
    
    // 즉시 플러시하여 데이터 안정성 확보
    LOG_INFO("[SDStorage] Syncing file to SD card...");
 800171c:	4923      	ldr	r1, [pc, #140]	@ (80017ac <SDStorage_WriteLog+0x21c>)
 800171e:	2001      	movs	r0, #1
 8001720:	f003 f9ba 	bl	8004a98 <LOGGER_SendFormatted>
    FRESULT sync_result = f_sync(&g_log_file);
 8001724:	4816      	ldr	r0, [pc, #88]	@ (8001780 <SDStorage_WriteLog+0x1f0>)
 8001726:	f011 f9e8 	bl	8012afa <f_sync>
 800172a:	4603      	mov	r3, r0
 800172c:	737b      	strb	r3, [r7, #13]
    LOG_INFO("[SDStorage] f_sync result: %d", sync_result);
 800172e:	7b7b      	ldrb	r3, [r7, #13]
 8001730:	461a      	mov	r2, r3
 8001732:	491f      	ldr	r1, [pc, #124]	@ (80017b0 <SDStorage_WriteLog+0x220>)
 8001734:	2001      	movs	r0, #1
 8001736:	f003 f9af 	bl	8004a98 <LOGGER_SendFormatted>
#else
    // PC/테스트 환경: 파일 I/O 시뮬레이션 (항상 성공)
    // 실제 파일 쓰기 없이 성공으로 처리
#endif

    g_current_log_size += size;
 800173a:	4b07      	ldr	r3, [pc, #28]	@ (8001758 <SDStorage_WriteLog+0x1c8>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	4413      	add	r3, r2
 8001742:	4a05      	ldr	r2, [pc, #20]	@ (8001758 <SDStorage_WriteLog+0x1c8>)
 8001744:	6013      	str	r3, [r2, #0]
    return SDSTORAGE_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000222 	.word	0x20000222
 8001754:	20000224 	.word	0x20000224
 8001758:	20000324 	.word	0x20000324
 800175c:	2000055c 	.word	0x2000055c
 8001760:	0801791c 	.word	0x0801791c
 8001764:	08017924 	.word	0x08017924
 8001768:	0801792c 	.word	0x0801792c
 800176c:	08017960 	.word	0x08017960
 8001770:	08017994 	.word	0x08017994
 8001774:	080179d0 	.word	0x080179d0
 8001778:	080179d8 	.word	0x080179d8
 800177c:	08017a00 	.word	0x08017a00
 8001780:	2000032c 	.word	0x2000032c
 8001784:	08017a44 	.word	0x08017a44
 8001788:	08017a64 	.word	0x08017a64
 800178c:	08017a98 	.word	0x08017a98
 8001790:	08017ad4 	.word	0x08017ad4
 8001794:	08017b1c 	.word	0x08017b1c
 8001798:	08017b50 	.word	0x08017b50
 800179c:	08017b88 	.word	0x08017b88
 80017a0:	08017bb0 	.word	0x08017bb0
 80017a4:	08017bd4 	.word	0x08017bd4
 80017a8:	08017c08 	.word	0x08017c08
 80017ac:	08017c44 	.word	0x08017c44
 80017b0:	08017c6c 	.word	0x08017c6c

080017b4 <SDStorage_IsReady>:

bool SDStorage_IsReady(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
    return g_sd_ready;
 80017b8:	4b03      	ldr	r3, [pc, #12]	@ (80017c8 <SDStorage_IsReady+0x14>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000222 	.word	0x20000222

080017cc <SDStorage_CreateNewLogFile>:
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
    }
}

int SDStorage_CreateNewLogFile(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
    if (!g_sd_ready) {
 80017d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001890 <SDStorage_CreateNewLogFile+0xc4>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	f083 0301 	eor.w	r3, r3, #1
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d002      	beq.n	80017e6 <SDStorage_CreateNewLogFile+0x1a>
        return SDSTORAGE_NOT_READY;
 80017e0:	f06f 0301 	mvn.w	r3, #1
 80017e4:	e050      	b.n	8001888 <SDStorage_CreateNewLogFile+0xbc>
    }
    
    // 이전 파일이 열려있다면 닫기
#ifdef STM32F746xx
    if (g_file_open) {
 80017e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001894 <SDStorage_CreateNewLogFile+0xc8>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <SDStorage_CreateNewLogFile+0x2e>
        f_close(&g_log_file);
 80017ee:	482a      	ldr	r0, [pc, #168]	@ (8001898 <SDStorage_CreateNewLogFile+0xcc>)
 80017f0:	f011 fa01 	bl	8012bf6 <f_close>
        g_file_open = false;
 80017f4:	4b27      	ldr	r3, [pc, #156]	@ (8001894 <SDStorage_CreateNewLogFile+0xc8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
        g_log_file = NULL;
    }
#endif
    
    // 새 파일명 생성
    if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 80017fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017fe:	4827      	ldr	r0, [pc, #156]	@ (800189c <SDStorage_CreateNewLogFile+0xd0>)
 8001800:	f000 f8c0 	bl	8001984 <_generate_log_filename>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <SDStorage_CreateNewLogFile+0x44>
        return SDSTORAGE_ERROR;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
 800180e:	e03b      	b.n	8001888 <SDStorage_CreateNewLogFile+0xbc>
    }
    
    // 파일 생성 확인 (SD 쓰기 문제로 인한 블로킹 방지)
#ifdef STM32F746xx
    LOG_INFO("[SDStorage] Attempting to create log file: %s", g_current_log_file);
 8001810:	4a22      	ldr	r2, [pc, #136]	@ (800189c <SDStorage_CreateNewLogFile+0xd0>)
 8001812:	4923      	ldr	r1, [pc, #140]	@ (80018a0 <SDStorage_CreateNewLogFile+0xd4>)
 8001814:	2001      	movs	r0, #1
 8001816:	f003 f93f 	bl	8004a98 <LOGGER_SendFormatted>
    
    // 실제 파일 생성 시도 (test.txt와 동일한 플래그 사용)
    LOG_INFO("[SDStorage] Attempting to create new log file: %s", g_current_log_file);
 800181a:	4a20      	ldr	r2, [pc, #128]	@ (800189c <SDStorage_CreateNewLogFile+0xd0>)
 800181c:	4921      	ldr	r1, [pc, #132]	@ (80018a4 <SDStorage_CreateNewLogFile+0xd8>)
 800181e:	2001      	movs	r0, #1
 8001820:	f003 f93a 	bl	8004a98 <LOGGER_SendFormatted>
    FRESULT open_result = f_open(&g_log_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 8001824:	220a      	movs	r2, #10
 8001826:	491d      	ldr	r1, [pc, #116]	@ (800189c <SDStorage_CreateNewLogFile+0xd0>)
 8001828:	481b      	ldr	r0, [pc, #108]	@ (8001898 <SDStorage_CreateNewLogFile+0xcc>)
 800182a:	f010 fe37 	bl	801249c <f_open>
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
    LOG_INFO("[SDStorage] f_open result: %d", open_result);
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	461a      	mov	r2, r3
 8001836:	491c      	ldr	r1, [pc, #112]	@ (80018a8 <SDStorage_CreateNewLogFile+0xdc>)
 8001838:	2001      	movs	r0, #1
 800183a:	f003 f92d 	bl	8004a98 <LOGGER_SendFormatted>
    
    if (open_result != FR_OK) {
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00f      	beq.n	8001864 <SDStorage_CreateNewLogFile+0x98>
        LOG_ERROR("[SDStorage] f_open failed: %d - SD write problem detected", open_result);
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	461a      	mov	r2, r3
 8001848:	4918      	ldr	r1, [pc, #96]	@ (80018ac <SDStorage_CreateNewLogFile+0xe0>)
 800184a:	2003      	movs	r0, #3
 800184c:	f003 f924 	bl	8004a98 <LOGGER_SendFormatted>
        LOG_WARN("[SDStorage] Disabling SD logging due to file creation failure");
 8001850:	4917      	ldr	r1, [pc, #92]	@ (80018b0 <SDStorage_CreateNewLogFile+0xe4>)
 8001852:	2002      	movs	r0, #2
 8001854:	f003 f920 	bl	8004a98 <LOGGER_SendFormatted>
        g_sd_ready = false;  // SD 로깅 비활성화
 8001858:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <SDStorage_CreateNewLogFile+0xc4>)
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
        return SDSTORAGE_FILE_ERROR;
 800185e:	f06f 0302 	mvn.w	r3, #2
 8001862:	e011      	b.n	8001888 <SDStorage_CreateNewLogFile+0xbc>
    }
    
    LOG_INFO("[SDStorage] File created successfully, closing...");
 8001864:	4913      	ldr	r1, [pc, #76]	@ (80018b4 <SDStorage_CreateNewLogFile+0xe8>)
 8001866:	2001      	movs	r0, #1
 8001868:	f003 f916 	bl	8004a98 <LOGGER_SendFormatted>
    f_close(&g_log_file);
 800186c:	480a      	ldr	r0, [pc, #40]	@ (8001898 <SDStorage_CreateNewLogFile+0xcc>)
 800186e:	f011 f9c2 	bl	8012bf6 <f_close>
    g_file_open = false;
 8001872:	4b08      	ldr	r3, [pc, #32]	@ (8001894 <SDStorage_CreateNewLogFile+0xc8>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
    LOG_INFO("[SDStorage] File closed, ready for logging");
 8001878:	490f      	ldr	r1, [pc, #60]	@ (80018b8 <SDStorage_CreateNewLogFile+0xec>)
 800187a:	2001      	movs	r0, #1
 800187c:	f003 f90c 	bl	8004a98 <LOGGER_SendFormatted>
#else
    // PC/테스트 환경: 파일 생성 시뮬레이션 (항상 성공)
    LOG_INFO("[SDStorage] Test environment - file creation simulated");
#endif
    
    g_current_log_size = 0;
 8001880:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <SDStorage_CreateNewLogFile+0xf0>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
    return SDSTORAGE_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000222 	.word	0x20000222
 8001894:	2000055c 	.word	0x2000055c
 8001898:	2000032c 	.word	0x2000032c
 800189c:	20000224 	.word	0x20000224
 80018a0:	08017c8c 	.word	0x08017c8c
 80018a4:	08017cbc 	.word	0x08017cbc
 80018a8:	08017a44 	.word	0x08017a44
 80018ac:	08017cf0 	.word	0x08017cf0
 80018b0:	08017d2c 	.word	0x08017d2c
 80018b4:	08017d6c 	.word	0x08017d6c
 80018b8:	08017da0 	.word	0x08017da0
 80018bc:	20000324 	.word	0x20000324

080018c0 <_create_log_directory>:
    return g_current_log_size;
}

// 내부 함수 구현
static int _create_log_directory(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    // FatFs가 이미 정상 동작하므로 HAL 테스트 불필요
    
    // f_mkdir 전에 볼륨 상태 재확인 (에러 6 방지)
    LOG_INFO("[SDStorage] Verifying volume state before f_mkdir...");
 80018c6:	4924      	ldr	r1, [pc, #144]	@ (8001958 <_create_log_directory+0x98>)
 80018c8:	2001      	movs	r0, #1
 80018ca:	f003 f8e5 	bl	8004a98 <LOGGER_SendFormatted>
    
    // 볼륨 재마운트 시도 (상태 안정화)
    FRESULT remount_result = f_mount(&SDFatFS, SDPath, 1);
 80018ce:	2201      	movs	r2, #1
 80018d0:	4922      	ldr	r1, [pc, #136]	@ (800195c <_create_log_directory+0x9c>)
 80018d2:	4823      	ldr	r0, [pc, #140]	@ (8001960 <_create_log_directory+0xa0>)
 80018d4:	f010 fd9c 	bl	8012410 <f_mount>
 80018d8:	4603      	mov	r3, r0
 80018da:	71bb      	strb	r3, [r7, #6]
    LOG_INFO("[SDStorage] Volume re-mount result: %d", remount_result);
 80018dc:	79bb      	ldrb	r3, [r7, #6]
 80018de:	461a      	mov	r2, r3
 80018e0:	4920      	ldr	r1, [pc, #128]	@ (8001964 <_create_log_directory+0xa4>)
 80018e2:	2001      	movs	r0, #1
 80018e4:	f003 f8d8 	bl	8004a98 <LOGGER_SendFormatted>
    
    FRESULT mkdir_result = FR_NOT_ENABLED;  // 초기값 설정
 80018e8:	230c      	movs	r3, #12
 80018ea:	71fb      	strb	r3, [r7, #7]
    
    if (remount_result == FR_OK) {
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10f      	bne.n	8001912 <_create_log_directory+0x52>
        LOG_INFO("[SDStorage] Volume ready - attempting f_mkdir...");
 80018f2:	491d      	ldr	r1, [pc, #116]	@ (8001968 <_create_log_directory+0xa8>)
 80018f4:	2001      	movs	r0, #1
 80018f6:	f003 f8cf 	bl	8004a98 <LOGGER_SendFormatted>
        mkdir_result = f_mkdir("lora_logs");
 80018fa:	481c      	ldr	r0, [pc, #112]	@ (800196c <_create_log_directory+0xac>)
 80018fc:	f011 f9a5 	bl	8012c4a <f_mkdir>
 8001900:	4603      	mov	r3, r0
 8001902:	71fb      	strb	r3, [r7, #7]
        LOG_INFO("[SDStorage] f_mkdir result: %d", mkdir_result);
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	461a      	mov	r2, r3
 8001908:	4919      	ldr	r1, [pc, #100]	@ (8001970 <_create_log_directory+0xb0>)
 800190a:	2001      	movs	r0, #1
 800190c:	f003 f8c4 	bl	8004a98 <LOGGER_SendFormatted>
 8001910:	e005      	b.n	800191e <_create_log_directory+0x5e>
    } else {
        LOG_ERROR("[SDStorage] Volume re-mount failed: %d", remount_result);
 8001912:	79bb      	ldrb	r3, [r7, #6]
 8001914:	461a      	mov	r2, r3
 8001916:	4917      	ldr	r1, [pc, #92]	@ (8001974 <_create_log_directory+0xb4>)
 8001918:	2003      	movs	r0, #3
 800191a:	f003 f8bd 	bl	8004a98 <LOGGER_SendFormatted>
    }
    
    // FR_EXIST(9)는 이미 존재함을 의미하므로 성공으로 처리
    if (mkdir_result == FR_OK || mkdir_result == FR_EXIST) {
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d002      	beq.n	800192a <_create_log_directory+0x6a>
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	2b08      	cmp	r3, #8
 8001928:	d105      	bne.n	8001936 <_create_log_directory+0x76>
        LOG_INFO("[SDStorage] Directory ready (created or already exists)");
 800192a:	4913      	ldr	r1, [pc, #76]	@ (8001978 <_create_log_directory+0xb8>)
 800192c:	2001      	movs	r0, #1
 800192e:	f003 f8b3 	bl	8004a98 <LOGGER_SendFormatted>
        return SDSTORAGE_OK;  // 디렉토리 성공
 8001932:	2300      	movs	r3, #0
 8001934:	e00b      	b.n	800194e <_create_log_directory+0x8e>
    } else {
        LOG_ERROR("[SDStorage] f_mkdir failed: %d - FatFs level problem", mkdir_result);
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	461a      	mov	r2, r3
 800193a:	4910      	ldr	r1, [pc, #64]	@ (800197c <_create_log_directory+0xbc>)
 800193c:	2003      	movs	r0, #3
 800193e:	f003 f8ab 	bl	8004a98 <LOGGER_SendFormatted>
        LOG_INFO("[SDStorage] Will try direct file creation without directory");
 8001942:	490f      	ldr	r1, [pc, #60]	@ (8001980 <_create_log_directory+0xc0>)
 8001944:	2001      	movs	r0, #1
 8001946:	f003 f8a7 	bl	8004a98 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;  // 디렉토리 실패
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
#else
    // PC: mkdir 시뮬레이션 (테스트에서는 성공으로 가정)
    LOG_INFO("[SDStorage] Test environment - directory creation simulated");
    return SDSTORAGE_OK;
#endif
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	08017dcc 	.word	0x08017dcc
 800195c:	20001788 	.word	0x20001788
 8001960:	2000178c 	.word	0x2000178c
 8001964:	08017e04 	.word	0x08017e04
 8001968:	08017e2c 	.word	0x08017e2c
 800196c:	08017e60 	.word	0x08017e60
 8001970:	08017e6c 	.word	0x08017e6c
 8001974:	08017e8c 	.word	0x08017e8c
 8001978:	08017eb4 	.word	0x08017eb4
 800197c:	08017eec 	.word	0x08017eec
 8001980:	08017f24 	.word	0x08017f24

08001984 <_generate_log_filename>:

static int _generate_log_filename(char* filename, size_t max_len)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
    // 8.3 형식 파일명 생성 (시간 불필요)
    static int file_counter = 1;
    
    // 디렉토리 사용 가능 여부에 따라 경로 결정
    int result;
    if (g_directory_available) {
 800198e:	4b14      	ldr	r3, [pc, #80]	@ (80019e0 <_generate_log_filename+0x5c>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d008      	beq.n	80019a8 <_generate_log_filename+0x24>
        // lora_logs 디렉토리에 파일 생성 (8.3 형식)
        result = snprintf(filename, max_len, "lora_logs/LORA%04d.BIN", file_counter);
 8001996:	4b13      	ldr	r3, [pc, #76]	@ (80019e4 <_generate_log_filename+0x60>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a13      	ldr	r2, [pc, #76]	@ (80019e8 <_generate_log_filename+0x64>)
 800199c:	6839      	ldr	r1, [r7, #0]
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f014 f9ae 	bl	8015d00 <sniprintf>
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	e007      	b.n	80019b8 <_generate_log_filename+0x34>
    } else {
        // 루트 디렉토리에 파일 생성 (8.3 형식)
        result = snprintf(filename, max_len, "LORA%04d.BIN", file_counter);
 80019a8:	4b0e      	ldr	r3, [pc, #56]	@ (80019e4 <_generate_log_filename+0x60>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0f      	ldr	r2, [pc, #60]	@ (80019ec <_generate_log_filename+0x68>)
 80019ae:	6839      	ldr	r1, [r7, #0]
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f014 f9a5 	bl	8015d00 <sniprintf>
 80019b6:	60f8      	str	r0, [r7, #12]
    }
    
    file_counter++;
 80019b8:	4b0a      	ldr	r3, [pc, #40]	@ (80019e4 <_generate_log_filename+0x60>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	3301      	adds	r3, #1
 80019be:	4a09      	ldr	r2, [pc, #36]	@ (80019e4 <_generate_log_filename+0x60>)
 80019c0:	6013      	str	r3, [r2, #0]
    
    if (result < 0 || (size_t)result >= max_len) {
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	db03      	blt.n	80019d0 <_generate_log_filename+0x4c>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d802      	bhi.n	80019d6 <_generate_log_filename+0x52>
        return SDSTORAGE_ERROR;
 80019d0:	f04f 33ff 	mov.w	r3, #4294967295
 80019d4:	e000      	b.n	80019d8 <_generate_log_filename+0x54>
    }
    
    return SDSTORAGE_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000328 	.word	0x20000328
 80019e4:	20000014 	.word	0x20000014
 80019e8:	08017f60 	.word	0x08017f60
 80019ec:	08017f78 	.word	0x08017f78

080019f0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4a07      	ldr	r2, [pc, #28]	@ (8001a50 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	4a06      	ldr	r2, [pc, #24]	@ (8001a54 <vApplicationGetIdleTaskMemory+0x30>)
 8001a3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2280      	movs	r2, #128	@ 0x80
 8001a40:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000760 	.word	0x20000760
 8001a54:	200007b8 	.word	0x200007b8

08001a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a58:	b5b0      	push	{r4, r5, r7, lr}
 8001a5a:	b08c      	sub	sp, #48	@ 0x30
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // 리셋 카운터 추가
  static uint32_t reset_count = 0;
  reset_count++;
 8001a5e:	4b87      	ldr	r3, [pc, #540]	@ (8001c7c <main+0x224>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	3301      	adds	r3, #1
 8001a64:	4a85      	ldr	r2, [pc, #532]	@ (8001c7c <main+0x224>)
 8001a66:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a68:	f003 fb33 	bl	80050d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a6c:	f000 f944 	bl	8001cf8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a70:	f000 f9b4 	bl	8001ddc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a74:	f001 f976 	bl	8002d64 <MX_GPIO_Init>
  MX_DMA_Init();  // DMA는 UART보다 먼저 초기화
 8001a78:	f001 fd70 	bl	800355c <MX_DMA_Init>
  MX_USART6_DMA_Init();  // USART6 DMA 초기화 (UART보다 먼저)
 8001a7c:	f001 fd94 	bl	80035a8 <MX_USART6_DMA_Init>
  MX_ADC3_Init();
 8001a80:	f000 f9de 	bl	8001e40 <MX_ADC3_Init>
  MX_CRC_Init();
 8001a84:	f000 fa2e 	bl	8001ee4 <MX_CRC_Init>
  MX_DCMI_Init();
 8001a88:	f000 fa4e 	bl	8001f28 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001a8c:	f000 fa80 	bl	8001f90 <MX_DMA2D_Init>
  MX_ETH_Init();
 8001a90:	f000 fab0 	bl	8001ff4 <MX_ETH_Init>
  MX_FMC_Init();
 8001a94:	f001 f916 	bl	8002cc4 <MX_FMC_Init>
  MX_I2C1_Init();
 8001a98:	f000 fafa 	bl	8002090 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001a9c:	f000 fb38 	bl	8002110 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001aa0:	f000 fb76 	bl	8002190 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001aa4:	f000 fbf6 	bl	8002294 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001aa8:	f000 fc20 	bl	80022ec <MX_RTC_Init>
  MX_SAI2_Init();
 8001aac:	f000 fcc2 	bl	8002434 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001ab0:	f000 fd68 	bl	8002584 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001ab4:	f000 fd8c 	bl	80025d0 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8001ab8:	f000 fdba 	bl	8002630 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001abc:	f000 fdf6 	bl	80026ac <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ac0:	f000 fea0 	bl	8002804 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ac4:	f000 ff14 	bl	80028f0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001ac8:	f000 ff8a 	bl	80029e0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001acc:	f001 f800 	bl	8002ad0 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001ad0:	f001 f852 	bl	8002b78 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001ad4:	f001 f896 	bl	8002c04 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001ad8:	f001 f8c4 	bl	8002c64 <MX_USART6_UART_Init>
  
  // UART 초기화 후 DMA 핸들 다시 연결 (HAL_UART_Init에서 리셋될 수 있음)
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8001adc:	4b68      	ldr	r3, [pc, #416]	@ (8001c80 <main+0x228>)
 8001ade:	4a69      	ldr	r2, [pc, #420]	@ (8001c84 <main+0x22c>)
 8001ae0:	675a      	str	r2, [r3, #116]	@ 0x74
 8001ae2:	4b68      	ldr	r3, [pc, #416]	@ (8001c84 <main+0x22c>)
 8001ae4:	4a66      	ldr	r2, [pc, #408]	@ (8001c80 <main+0x228>)
 8001ae6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  // UART IDLE 인터럽트 활성화 (DMA 기반 수신을 위해)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8001ae8:	4b65      	ldr	r3, [pc, #404]	@ (8001c80 <main+0x228>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	4b64      	ldr	r3, [pc, #400]	@ (8001c80 <main+0x228>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0210 	orr.w	r2, r2, #16
 8001af6:	601a      	str	r2, [r3, #0]
  MX_FATFS_Init();
 8001af8:	f00e fc5c 	bl	80103b4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  
  // Logger 초기화 (터미널 출력만 사용)
  LOGGER_Connect("STM32", 0);
 8001afc:	2100      	movs	r1, #0
 8001afe:	4862      	ldr	r0, [pc, #392]	@ (8001c88 <main+0x230>)
 8001b00:	f002 ff6a 	bl	80049d8 <LOGGER_Connect>
  
  // 리셋 원인 확인
  LOG_INFO("=== SYSTEM START (Reset #%lu) ===", reset_count);
 8001b04:	4b5d      	ldr	r3, [pc, #372]	@ (8001c7c <main+0x224>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4960      	ldr	r1, [pc, #384]	@ (8001c8c <main+0x234>)
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f002 ffc3 	bl	8004a98 <LOGGER_SendFormatted>
  
  // RCC 리셋 플래그 확인
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) LOG_WARN("Reset: BOR (Brown-out)");
 8001b12:	4b5f      	ldr	r3, [pc, #380]	@ (8001c90 <main+0x238>)
 8001b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <main+0xce>
 8001b1e:	495d      	ldr	r1, [pc, #372]	@ (8001c94 <main+0x23c>)
 8001b20:	2002      	movs	r0, #2
 8001b22:	f002 ffb9 	bl	8004a98 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) LOG_WARN("Reset: PIN (External)");
 8001b26:	4b5a      	ldr	r3, [pc, #360]	@ (8001c90 <main+0x238>)
 8001b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <main+0xe2>
 8001b32:	4959      	ldr	r1, [pc, #356]	@ (8001c98 <main+0x240>)
 8001b34:	2002      	movs	r0, #2
 8001b36:	f002 ffaf 	bl	8004a98 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) LOG_WARN("Reset: POR (Power-on)");
 8001b3a:	4b55      	ldr	r3, [pc, #340]	@ (8001c90 <main+0x238>)
 8001b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <main+0xf6>
 8001b46:	4955      	ldr	r1, [pc, #340]	@ (8001c9c <main+0x244>)
 8001b48:	2002      	movs	r0, #2
 8001b4a:	f002 ffa5 	bl	8004a98 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) LOG_WARN("Reset: SOFTWARE");
 8001b4e:	4b50      	ldr	r3, [pc, #320]	@ (8001c90 <main+0x238>)
 8001b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <main+0x10a>
 8001b5a:	4951      	ldr	r1, [pc, #324]	@ (8001ca0 <main+0x248>)
 8001b5c:	2002      	movs	r0, #2
 8001b5e:	f002 ff9b 	bl	8004a98 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) LOG_WARN("Reset: IWDG (Watchdog)");
 8001b62:	4b4b      	ldr	r3, [pc, #300]	@ (8001c90 <main+0x238>)
 8001b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <main+0x11e>
 8001b6e:	494d      	ldr	r1, [pc, #308]	@ (8001ca4 <main+0x24c>)
 8001b70:	2002      	movs	r0, #2
 8001b72:	f002 ff91 	bl	8004a98 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) LOG_WARN("Reset: WWDG (Window Watchdog)");
 8001b76:	4b46      	ldr	r3, [pc, #280]	@ (8001c90 <main+0x238>)
 8001b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b7a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <main+0x132>
 8001b82:	4949      	ldr	r1, [pc, #292]	@ (8001ca8 <main+0x250>)
 8001b84:	2002      	movs	r0, #2
 8001b86:	f002 ff87 	bl	8004a98 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) LOG_WARN("Reset: LPWR (Low Power)");
 8001b8a:	4b41      	ldr	r3, [pc, #260]	@ (8001c90 <main+0x238>)
 8001b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	da03      	bge.n	8001b9a <main+0x142>
 8001b92:	4946      	ldr	r1, [pc, #280]	@ (8001cac <main+0x254>)
 8001b94:	2002      	movs	r0, #2
 8001b96:	f002 ff7f 	bl	8004a98 <LOGGER_SendFormatted>
  
  // 플래그 클리어
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8001b9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c90 <main+0x238>)
 8001b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b9e:	4a3c      	ldr	r2, [pc, #240]	@ (8001c90 <main+0x238>)
 8001ba0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ba4:	6753      	str	r3, [r2, #116]	@ 0x74
  
  // ===== 하드웨어 초기화만 main()에서 수행 =====
  
  // SD카드 초기화는 FreeRTOS 태스크에서 수행 (커널 시작 후)
  LOG_INFO("🔄 SD card initialization will be performed in FreeRTOS task");
 8001ba6:	4942      	ldr	r1, [pc, #264]	@ (8001cb0 <main+0x258>)
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f002 ff75 	bl	8004a98 <LOGGER_SendFormatted>
  g_sd_initialization_result = -1;  // 초기화 안됨 상태
 8001bae:	4b41      	ldr	r3, [pc, #260]	@ (8001cb4 <main+0x25c>)
 8001bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb4:	601a      	str	r2, [r3, #0]
  
  // UART6 DMA 초기화 건너뛰기 (이미 main 초기화에서 완료됨)
  LOG_INFO("📤 UART DMA already initialized in main() - skipping");
 8001bb6:	4940      	ldr	r1, [pc, #256]	@ (8001cb8 <main+0x260>)
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f002 ff6d 	bl	8004a98 <LOGGER_SendFormatted>
  
  // IDLE 인터럽트만 활성화 (메시지 끝 감지용)
  LOG_INFO("📤 Enabling UART IDLE interrupt...");
 8001bbe:	493f      	ldr	r1, [pc, #252]	@ (8001cbc <main+0x264>)
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f002 ff69 	bl	8004a98 <LOGGER_SendFormatted>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8001bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8001c80 <main+0x228>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b2c      	ldr	r3, [pc, #176]	@ (8001c80 <main+0x228>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0210 	orr.w	r2, r2, #16
 8001bd4:	601a      	str	r2, [r3, #0]
  LOG_INFO("✅ UART setup completed");
 8001bd6:	493a      	ldr	r1, [pc, #232]	@ (8001cc0 <main+0x268>)
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f002 ff5d 	bl	8004a98 <LOGGER_SendFormatted>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  // SD 로깅 큐 생성 (안전성 체크 포함)
  LOG_INFO("📤 Creating SD logging queue (size: %d, item: %d bytes)", 
 8001bde:	2388      	movs	r3, #136	@ 0x88
 8001be0:	220a      	movs	r2, #10
 8001be2:	4938      	ldr	r1, [pc, #224]	@ (8001cc4 <main+0x26c>)
 8001be4:	2001      	movs	r0, #1
 8001be6:	f002 ff57 	bl	8004a98 <LOGGER_SendFormatted>
           SD_LOG_QUEUE_SIZE, sizeof(SDLogEntry_t));
  
  osMessageQDef(sdLogQueue, SD_LOG_QUEUE_SIZE, SDLogEntry_t);
 8001bea:	4b37      	ldr	r3, [pc, #220]	@ (8001cc8 <main+0x270>)
 8001bec:	f107 0420 	add.w	r4, r7, #32
 8001bf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bf2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  sdLogQueueHandle = osMessageCreate(osMessageQ(sdLogQueue), NULL);
 8001bf6:	f107 0320 	add.w	r3, r7, #32
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f011 fe5f 	bl	80138c0 <osMessageCreate>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4a31      	ldr	r2, [pc, #196]	@ (8001ccc <main+0x274>)
 8001c06:	6013      	str	r3, [r2, #0]
  
  if (sdLogQueueHandle == NULL) {
 8001c08:	4b30      	ldr	r3, [pc, #192]	@ (8001ccc <main+0x274>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d104      	bne.n	8001c1a <main+0x1c2>
    LOG_ERROR("❌ SD logging queue creation FAILED - insufficient memory");
 8001c10:	492f      	ldr	r1, [pc, #188]	@ (8001cd0 <main+0x278>)
 8001c12:	2003      	movs	r0, #3
 8001c14:	f002 ff40 	bl	8004a98 <LOGGER_SendFormatted>
 8001c18:	e003      	b.n	8001c22 <main+0x1ca>
  } else {
    LOG_INFO("✅ SD logging queue created successfully");
 8001c1a:	492e      	ldr	r1, [pc, #184]	@ (8001cd4 <main+0x27c>)
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f002 ff3b 	bl	8004a98 <LOGGER_SendFormatted>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 8192);
 8001c22:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd8 <main+0x280>)
 8001c24:	1d3c      	adds	r4, r7, #4
 8001c26:	461d      	mov	r5, r3
 8001c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f011 fde1 	bl	8013800 <osThreadCreate>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	4a26      	ldr	r2, [pc, #152]	@ (8001cdc <main+0x284>)
 8001c42:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* 수신 태스크 비활성화 - SD 카드 테스트에는 불필요 */
  LOG_INFO("📤 Receive Task disabled for SD card testing");
 8001c44:	4926      	ldr	r1, [pc, #152]	@ (8001ce0 <main+0x288>)
 8001c46:	2001      	movs	r0, #1
 8001c48:	f002 ff26 	bl	8004a98 <LOGGER_SendFormatted>
  LOG_INFO("📤 This eliminates UART receive errors during SD testing");
 8001c4c:	4925      	ldr	r1, [pc, #148]	@ (8001ce4 <main+0x28c>)
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f002 ff22 	bl	8004a98 <LOGGER_SendFormatted>
  
  /* SD 로깅 태스크 임시 비활성화 - 메모리 부족 문제 */
  LOG_INFO("📤 SD Logging Task disabled temporarily due to memory constraints");
 8001c54:	4924      	ldr	r1, [pc, #144]	@ (8001ce8 <main+0x290>)
 8001c56:	2001      	movs	r0, #1
 8001c58:	f002 ff1e 	bl	8004a98 <LOGGER_SendFormatted>
  LOG_INFO("📤 SD card testing will be performed in Default Task instead");
 8001c5c:	4923      	ldr	r1, [pc, #140]	@ (8001cec <main+0x294>)
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f002 ff1a 	bl	8004a98 <LOGGER_SendFormatted>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  LOG_INFO("🚀 Starting FreeRTOS scheduler...");
 8001c64:	4922      	ldr	r1, [pc, #136]	@ (8001cf0 <main+0x298>)
 8001c66:	2001      	movs	r0, #1
 8001c68:	f002 ff16 	bl	8004a98 <LOGGER_SendFormatted>
  osKernelStart();
 8001c6c:	f011 fda5 	bl	80137ba <osKernelStart>
  
  // 이 부분은 절대 실행되면 안됨 (스케줄러가 제어를 가져가야 함)
  LOG_ERROR("❌ FATAL: Scheduler failed to start - system halted");
 8001c70:	4920      	ldr	r1, [pc, #128]	@ (8001cf4 <main+0x29c>)
 8001c72:	2003      	movs	r0, #3
 8001c74:	f002 ff10 	bl	8004a98 <LOGGER_SendFormatted>

  /* We should never get here as control is now taken by the scheduler */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <main+0x220>
 8001c7c:	20001510 	.word	0x20001510
 8001c80:	200011e4 	.word	0x200011e4
 8001c84:	200014b0 	.word	0x200014b0
 8001c88:	08017f88 	.word	0x08017f88
 8001c8c:	08017f90 	.word	0x08017f90
 8001c90:	40023800 	.word	0x40023800
 8001c94:	08017fb4 	.word	0x08017fb4
 8001c98:	08017fcc 	.word	0x08017fcc
 8001c9c:	08017fe4 	.word	0x08017fe4
 8001ca0:	08017ffc 	.word	0x08017ffc
 8001ca4:	0801800c 	.word	0x0801800c
 8001ca8:	08018024 	.word	0x08018024
 8001cac:	08018044 	.word	0x08018044
 8001cb0:	0801805c 	.word	0x0801805c
 8001cb4:	20000018 	.word	0x20000018
 8001cb8:	0801809c 	.word	0x0801809c
 8001cbc:	080180d4 	.word	0x080180d4
 8001cc0:	080180fc 	.word	0x080180fc
 8001cc4:	08018118 	.word	0x08018118
 8001cc8:	08018308 	.word	0x08018308
 8001ccc:	200012a4 	.word	0x200012a4
 8001cd0:	08018154 	.word	0x08018154
 8001cd4:	08018190 	.word	0x08018190
 8001cd8:	08018324 	.word	0x08018324
 8001cdc:	200012a0 	.word	0x200012a0
 8001ce0:	080181bc 	.word	0x080181bc
 8001ce4:	080181ec 	.word	0x080181ec
 8001ce8:	08018228 	.word	0x08018228
 8001cec:	0801826c 	.word	0x0801826c
 8001cf0:	080182ac 	.word	0x080182ac
 8001cf4:	080182d0 	.word	0x080182d0

08001cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b094      	sub	sp, #80	@ 0x50
 8001cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cfe:	f107 0320 	add.w	r3, r7, #32
 8001d02:	2230      	movs	r2, #48	@ 0x30
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f014 f88e 	bl	8015e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d1c:	f007 fc12 	bl	8009544 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d20:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd4 <SystemClock_Config+0xdc>)
 8001d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d24:	4a2b      	ldr	r2, [pc, #172]	@ (8001dd4 <SystemClock_Config+0xdc>)
 8001d26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2c:	4b29      	ldr	r3, [pc, #164]	@ (8001dd4 <SystemClock_Config+0xdc>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d38:	4b27      	ldr	r3, [pc, #156]	@ (8001dd8 <SystemClock_Config+0xe0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a26      	ldr	r2, [pc, #152]	@ (8001dd8 <SystemClock_Config+0xe0>)
 8001d3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	4b24      	ldr	r3, [pc, #144]	@ (8001dd8 <SystemClock_Config+0xe0>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001d50:	2309      	movs	r3, #9
 8001d52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d62:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001d68:	2319      	movs	r3, #25
 8001d6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001d6c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001d70:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d72:	2302      	movs	r3, #2
 8001d74:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001d76:	2309      	movs	r3, #9
 8001d78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d7a:	f107 0320 	add.w	r3, r7, #32
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f007 fd02 	bl	8009788 <HAL_RCC_OscConfig>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d8a:	f001 fbe1 	bl	8003550 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001d8e:	f007 fbe9 	bl	8009564 <HAL_PWREx_EnableOverDrive>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001d98:	f001 fbda 	bl	8003550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d9c:	230f      	movs	r3, #15
 8001d9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001da0:	2302      	movs	r3, #2
 8001da2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001da8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001dac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001db2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	2106      	movs	r1, #6
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f007 ff88 	bl	8009cd0 <HAL_RCC_ClockConfig>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001dc6:	f001 fbc3 	bl	8003550 <Error_Handler>
  }
}
 8001dca:	bf00      	nop
 8001dcc:	3750      	adds	r7, #80	@ 0x50
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40007000 	.word	0x40007000

08001ddc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b0a2      	sub	sp, #136	@ 0x88
 8001de0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	2284      	movs	r2, #132	@ 0x84
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f014 f81d 	bl	8015e28 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8001dee:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <PeriphCommonClock_Config+0x60>)
 8001df0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001df2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001df6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001df8:	2305      	movs	r3, #5
 8001dfa:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001e00:	2303      	movs	r3, #3
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001e04:	2301      	movs	r3, #1
 8001e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001e08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e0c:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001e12:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001e16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	4618      	mov	r0, r3
 8001e24:	f008 f96c 	bl	800a100 <HAL_RCCEx_PeriphCLKConfig>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001e2e:	f001 fb8f 	bl	8003550 <Error_Handler>
  }
}
 8001e32:	bf00      	nop
 8001e34:	3788      	adds	r7, #136	@ 0x88
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	00b00008 	.word	0x00b00008

08001e40 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e46:	463b      	mov	r3, r7
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001e52:	4b21      	ldr	r3, [pc, #132]	@ (8001ed8 <MX_ADC3_Init+0x98>)
 8001e54:	4a21      	ldr	r2, [pc, #132]	@ (8001edc <MX_ADC3_Init+0x9c>)
 8001e56:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e58:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed8 <MX_ADC3_Init+0x98>)
 8001e5a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e5e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001e60:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed8 <MX_ADC3_Init+0x98>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed8 <MX_ADC3_Init+0x98>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed8 <MX_ADC3_Init+0x98>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001e72:	4b19      	ldr	r3, [pc, #100]	@ (8001ed8 <MX_ADC3_Init+0x98>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e7a:	4b17      	ldr	r3, [pc, #92]	@ (8001ed8 <MX_ADC3_Init+0x98>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e80:	4b15      	ldr	r3, [pc, #84]	@ (8001ed8 <MX_ADC3_Init+0x98>)
 8001e82:	4a17      	ldr	r2, [pc, #92]	@ (8001ee0 <MX_ADC3_Init+0xa0>)
 8001e84:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e86:	4b14      	ldr	r3, [pc, #80]	@ (8001ed8 <MX_ADC3_Init+0x98>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001e8c:	4b12      	ldr	r3, [pc, #72]	@ (8001ed8 <MX_ADC3_Init+0x98>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001e92:	4b11      	ldr	r3, [pc, #68]	@ (8001ed8 <MX_ADC3_Init+0x98>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed8 <MX_ADC3_Init+0x98>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001ea0:	480d      	ldr	r0, [pc, #52]	@ (8001ed8 <MX_ADC3_Init+0x98>)
 8001ea2:	f003 f967 	bl	8005174 <HAL_ADC_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001eac:	f001 fb50 	bl	8003550 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001eb0:	2304      	movs	r3, #4
 8001eb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ebc:	463b      	mov	r3, r7
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4805      	ldr	r0, [pc, #20]	@ (8001ed8 <MX_ADC3_Init+0x98>)
 8001ec2:	f003 f99b 	bl	80051fc <HAL_ADC_ConfigChannel>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001ecc:	f001 fb40 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001ed0:	bf00      	nop
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	200009f0 	.word	0x200009f0
 8001edc:	40012200 	.word	0x40012200
 8001ee0:	0f000001 	.word	0x0f000001

08001ee4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f20 <MX_CRC_Init+0x3c>)
 8001eea:	4a0e      	ldr	r2, [pc, #56]	@ (8001f24 <MX_CRC_Init+0x40>)
 8001eec:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001eee:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <MX_CRC_Init+0x3c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <MX_CRC_Init+0x3c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001efa:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <MX_CRC_Init+0x3c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001f00:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <MX_CRC_Init+0x3c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001f06:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <MX_CRC_Init+0x3c>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001f0c:	4804      	ldr	r0, [pc, #16]	@ (8001f20 <MX_CRC_Init+0x3c>)
 8001f0e:	f003 fcab 	bl	8005868 <HAL_CRC_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001f18:	f001 fb1a 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000a38 	.word	0x20000a38
 8001f24:	40023000 	.word	0x40023000

08001f28 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001f2c:	4b16      	ldr	r3, [pc, #88]	@ (8001f88 <MX_DCMI_Init+0x60>)
 8001f2e:	4a17      	ldr	r2, [pc, #92]	@ (8001f8c <MX_DCMI_Init+0x64>)
 8001f30:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001f32:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <MX_DCMI_Init+0x60>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001f38:	4b13      	ldr	r3, [pc, #76]	@ (8001f88 <MX_DCMI_Init+0x60>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001f3e:	4b12      	ldr	r3, [pc, #72]	@ (8001f88 <MX_DCMI_Init+0x60>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001f44:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <MX_DCMI_Init+0x60>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f88 <MX_DCMI_Init+0x60>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001f50:	4b0d      	ldr	r3, [pc, #52]	@ (8001f88 <MX_DCMI_Init+0x60>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001f56:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <MX_DCMI_Init+0x60>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <MX_DCMI_Init+0x60>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001f62:	4b09      	ldr	r3, [pc, #36]	@ (8001f88 <MX_DCMI_Init+0x60>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001f68:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <MX_DCMI_Init+0x60>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001f6e:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <MX_DCMI_Init+0x60>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001f74:	4804      	ldr	r0, [pc, #16]	@ (8001f88 <MX_DCMI_Init+0x60>)
 8001f76:	f003 fd69 	bl	8005a4c <HAL_DCMI_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001f80:	f001 fae6 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000a5c 	.word	0x20000a5c
 8001f8c:	50050000 	.word	0x50050000

08001f90 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001f94:	4b15      	ldr	r3, [pc, #84]	@ (8001fec <MX_DMA2D_Init+0x5c>)
 8001f96:	4a16      	ldr	r2, [pc, #88]	@ (8001ff0 <MX_DMA2D_Init+0x60>)
 8001f98:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001f9a:	4b14      	ldr	r3, [pc, #80]	@ (8001fec <MX_DMA2D_Init+0x5c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001fa0:	4b12      	ldr	r3, [pc, #72]	@ (8001fec <MX_DMA2D_Init+0x5c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001fa6:	4b11      	ldr	r3, [pc, #68]	@ (8001fec <MX_DMA2D_Init+0x5c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001fac:	4b0f      	ldr	r3, [pc, #60]	@ (8001fec <MX_DMA2D_Init+0x5c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fec <MX_DMA2D_Init+0x5c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <MX_DMA2D_Init+0x5c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <MX_DMA2D_Init+0x5c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001fc4:	4809      	ldr	r0, [pc, #36]	@ (8001fec <MX_DMA2D_Init+0x5c>)
 8001fc6:	f004 f9d1 	bl	800636c <HAL_DMA2D_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001fd0:	f001 fabe 	bl	8003550 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	4805      	ldr	r0, [pc, #20]	@ (8001fec <MX_DMA2D_Init+0x5c>)
 8001fd8:	f004 fb22 	bl	8006620 <HAL_DMA2D_ConfigLayer>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001fe2:	f001 fab5 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000aac 	.word	0x20000aac
 8001ff0:	4002b000 	.word	0x4002b000

08001ff4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8002078 <MX_ETH_Init+0x84>)
 8001ffa:	4a20      	ldr	r2, [pc, #128]	@ (800207c <MX_ETH_Init+0x88>)
 8001ffc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001ffe:	4b20      	ldr	r3, [pc, #128]	@ (8002080 <MX_ETH_Init+0x8c>)
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002004:	4b1e      	ldr	r3, [pc, #120]	@ (8002080 <MX_ETH_Init+0x8c>)
 8002006:	2280      	movs	r2, #128	@ 0x80
 8002008:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800200a:	4b1d      	ldr	r3, [pc, #116]	@ (8002080 <MX_ETH_Init+0x8c>)
 800200c:	22e1      	movs	r2, #225	@ 0xe1
 800200e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002010:	4b1b      	ldr	r3, [pc, #108]	@ (8002080 <MX_ETH_Init+0x8c>)
 8002012:	2200      	movs	r2, #0
 8002014:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002016:	4b1a      	ldr	r3, [pc, #104]	@ (8002080 <MX_ETH_Init+0x8c>)
 8002018:	2200      	movs	r2, #0
 800201a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800201c:	4b18      	ldr	r3, [pc, #96]	@ (8002080 <MX_ETH_Init+0x8c>)
 800201e:	2200      	movs	r2, #0
 8002020:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002022:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <MX_ETH_Init+0x84>)
 8002024:	4a16      	ldr	r2, [pc, #88]	@ (8002080 <MX_ETH_Init+0x8c>)
 8002026:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002028:	4b13      	ldr	r3, [pc, #76]	@ (8002078 <MX_ETH_Init+0x84>)
 800202a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800202e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002030:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <MX_ETH_Init+0x84>)
 8002032:	4a14      	ldr	r2, [pc, #80]	@ (8002084 <MX_ETH_Init+0x90>)
 8002034:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002036:	4b10      	ldr	r3, [pc, #64]	@ (8002078 <MX_ETH_Init+0x84>)
 8002038:	4a13      	ldr	r2, [pc, #76]	@ (8002088 <MX_ETH_Init+0x94>)
 800203a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800203c:	4b0e      	ldr	r3, [pc, #56]	@ (8002078 <MX_ETH_Init+0x84>)
 800203e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002042:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002044:	480c      	ldr	r0, [pc, #48]	@ (8002078 <MX_ETH_Init+0x84>)
 8002046:	f004 fb7d 	bl	8006744 <HAL_ETH_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8002050:	f001 fa7e 	bl	8003550 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002054:	2238      	movs	r2, #56	@ 0x38
 8002056:	2100      	movs	r1, #0
 8002058:	480c      	ldr	r0, [pc, #48]	@ (800208c <MX_ETH_Init+0x98>)
 800205a:	f013 fee5 	bl	8015e28 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800205e:	4b0b      	ldr	r3, [pc, #44]	@ (800208c <MX_ETH_Init+0x98>)
 8002060:	2221      	movs	r2, #33	@ 0x21
 8002062:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002064:	4b09      	ldr	r3, [pc, #36]	@ (800208c <MX_ETH_Init+0x98>)
 8002066:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800206a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800206c:	4b07      	ldr	r3, [pc, #28]	@ (800208c <MX_ETH_Init+0x98>)
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000aec 	.word	0x20000aec
 800207c:	40028000 	.word	0x40028000
 8002080:	20001514 	.word	0x20001514
 8002084:	20000164 	.word	0x20000164
 8002088:	200000c4 	.word	0x200000c4
 800208c:	200009b8 	.word	0x200009b8

08002090 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002094:	4b1b      	ldr	r3, [pc, #108]	@ (8002104 <MX_I2C1_Init+0x74>)
 8002096:	4a1c      	ldr	r2, [pc, #112]	@ (8002108 <MX_I2C1_Init+0x78>)
 8002098:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800209a:	4b1a      	ldr	r3, [pc, #104]	@ (8002104 <MX_I2C1_Init+0x74>)
 800209c:	4a1b      	ldr	r2, [pc, #108]	@ (800210c <MX_I2C1_Init+0x7c>)
 800209e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80020a0:	4b18      	ldr	r3, [pc, #96]	@ (8002104 <MX_I2C1_Init+0x74>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020a6:	4b17      	ldr	r3, [pc, #92]	@ (8002104 <MX_I2C1_Init+0x74>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020ac:	4b15      	ldr	r3, [pc, #84]	@ (8002104 <MX_I2C1_Init+0x74>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80020b2:	4b14      	ldr	r3, [pc, #80]	@ (8002104 <MX_I2C1_Init+0x74>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020b8:	4b12      	ldr	r3, [pc, #72]	@ (8002104 <MX_I2C1_Init+0x74>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020be:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <MX_I2C1_Init+0x74>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002104 <MX_I2C1_Init+0x74>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020ca:	480e      	ldr	r0, [pc, #56]	@ (8002104 <MX_I2C1_Init+0x74>)
 80020cc:	f006 fdf4 	bl	8008cb8 <HAL_I2C_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80020d6:	f001 fa3b 	bl	8003550 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020da:	2100      	movs	r1, #0
 80020dc:	4809      	ldr	r0, [pc, #36]	@ (8002104 <MX_I2C1_Init+0x74>)
 80020de:	f006 fe87 	bl	8008df0 <HAL_I2CEx_ConfigAnalogFilter>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80020e8:	f001 fa32 	bl	8003550 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020ec:	2100      	movs	r1, #0
 80020ee:	4805      	ldr	r0, [pc, #20]	@ (8002104 <MX_I2C1_Init+0x74>)
 80020f0:	f006 fec9 	bl	8008e86 <HAL_I2CEx_ConfigDigitalFilter>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80020fa:	f001 fa29 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000b9c 	.word	0x20000b9c
 8002108:	40005400 	.word	0x40005400
 800210c:	00c0eaff 	.word	0x00c0eaff

08002110 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002114:	4b1b      	ldr	r3, [pc, #108]	@ (8002184 <MX_I2C3_Init+0x74>)
 8002116:	4a1c      	ldr	r2, [pc, #112]	@ (8002188 <MX_I2C3_Init+0x78>)
 8002118:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800211a:	4b1a      	ldr	r3, [pc, #104]	@ (8002184 <MX_I2C3_Init+0x74>)
 800211c:	4a1b      	ldr	r2, [pc, #108]	@ (800218c <MX_I2C3_Init+0x7c>)
 800211e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002120:	4b18      	ldr	r3, [pc, #96]	@ (8002184 <MX_I2C3_Init+0x74>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002126:	4b17      	ldr	r3, [pc, #92]	@ (8002184 <MX_I2C3_Init+0x74>)
 8002128:	2201      	movs	r2, #1
 800212a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800212c:	4b15      	ldr	r3, [pc, #84]	@ (8002184 <MX_I2C3_Init+0x74>)
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002132:	4b14      	ldr	r3, [pc, #80]	@ (8002184 <MX_I2C3_Init+0x74>)
 8002134:	2200      	movs	r2, #0
 8002136:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002138:	4b12      	ldr	r3, [pc, #72]	@ (8002184 <MX_I2C3_Init+0x74>)
 800213a:	2200      	movs	r2, #0
 800213c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800213e:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <MX_I2C3_Init+0x74>)
 8002140:	2200      	movs	r2, #0
 8002142:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002144:	4b0f      	ldr	r3, [pc, #60]	@ (8002184 <MX_I2C3_Init+0x74>)
 8002146:	2200      	movs	r2, #0
 8002148:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800214a:	480e      	ldr	r0, [pc, #56]	@ (8002184 <MX_I2C3_Init+0x74>)
 800214c:	f006 fdb4 	bl	8008cb8 <HAL_I2C_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002156:	f001 f9fb 	bl	8003550 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800215a:	2100      	movs	r1, #0
 800215c:	4809      	ldr	r0, [pc, #36]	@ (8002184 <MX_I2C3_Init+0x74>)
 800215e:	f006 fe47 	bl	8008df0 <HAL_I2CEx_ConfigAnalogFilter>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002168:	f001 f9f2 	bl	8003550 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800216c:	2100      	movs	r1, #0
 800216e:	4805      	ldr	r0, [pc, #20]	@ (8002184 <MX_I2C3_Init+0x74>)
 8002170:	f006 fe89 	bl	8008e86 <HAL_I2CEx_ConfigDigitalFilter>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800217a:	f001 f9e9 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000bf0 	.word	0x20000bf0
 8002188:	40005c00 	.word	0x40005c00
 800218c:	00c0eaff 	.word	0x00c0eaff

08002190 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08e      	sub	sp, #56	@ 0x38
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	2234      	movs	r2, #52	@ 0x34
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f013 fe43 	bl	8015e28 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80021a2:	4b3a      	ldr	r3, [pc, #232]	@ (800228c <MX_LTDC_Init+0xfc>)
 80021a4:	4a3a      	ldr	r2, [pc, #232]	@ (8002290 <MX_LTDC_Init+0x100>)
 80021a6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80021a8:	4b38      	ldr	r3, [pc, #224]	@ (800228c <MX_LTDC_Init+0xfc>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80021ae:	4b37      	ldr	r3, [pc, #220]	@ (800228c <MX_LTDC_Init+0xfc>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80021b4:	4b35      	ldr	r3, [pc, #212]	@ (800228c <MX_LTDC_Init+0xfc>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80021ba:	4b34      	ldr	r3, [pc, #208]	@ (800228c <MX_LTDC_Init+0xfc>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80021c0:	4b32      	ldr	r3, [pc, #200]	@ (800228c <MX_LTDC_Init+0xfc>)
 80021c2:	2228      	movs	r2, #40	@ 0x28
 80021c4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80021c6:	4b31      	ldr	r3, [pc, #196]	@ (800228c <MX_LTDC_Init+0xfc>)
 80021c8:	2209      	movs	r2, #9
 80021ca:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80021cc:	4b2f      	ldr	r3, [pc, #188]	@ (800228c <MX_LTDC_Init+0xfc>)
 80021ce:	2235      	movs	r2, #53	@ 0x35
 80021d0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80021d2:	4b2e      	ldr	r3, [pc, #184]	@ (800228c <MX_LTDC_Init+0xfc>)
 80021d4:	220b      	movs	r2, #11
 80021d6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80021d8:	4b2c      	ldr	r3, [pc, #176]	@ (800228c <MX_LTDC_Init+0xfc>)
 80021da:	f240 2215 	movw	r2, #533	@ 0x215
 80021de:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80021e0:	4b2a      	ldr	r3, [pc, #168]	@ (800228c <MX_LTDC_Init+0xfc>)
 80021e2:	f240 121b 	movw	r2, #283	@ 0x11b
 80021e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 80021e8:	4b28      	ldr	r3, [pc, #160]	@ (800228c <MX_LTDC_Init+0xfc>)
 80021ea:	f240 2235 	movw	r2, #565	@ 0x235
 80021ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 80021f0:	4b26      	ldr	r3, [pc, #152]	@ (800228c <MX_LTDC_Init+0xfc>)
 80021f2:	f240 121d 	movw	r2, #285	@ 0x11d
 80021f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80021f8:	4b24      	ldr	r3, [pc, #144]	@ (800228c <MX_LTDC_Init+0xfc>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002200:	4b22      	ldr	r3, [pc, #136]	@ (800228c <MX_LTDC_Init+0xfc>)
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002208:	4b20      	ldr	r3, [pc, #128]	@ (800228c <MX_LTDC_Init+0xfc>)
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002210:	481e      	ldr	r0, [pc, #120]	@ (800228c <MX_LTDC_Init+0xfc>)
 8002212:	f006 fe84 	bl	8008f1e <HAL_LTDC_Init>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800221c:	f001 f998 	bl	8003550 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002224:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002228:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800222e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002232:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002234:	2302      	movs	r3, #2
 8002236:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002238:	23ff      	movs	r3, #255	@ 0xff
 800223a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002240:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002244:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002246:	2307      	movs	r3, #7
 8002248:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800224a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800224e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8002250:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8002256:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800225a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	2200      	movs	r2, #0
 8002272:	4619      	mov	r1, r3
 8002274:	4805      	ldr	r0, [pc, #20]	@ (800228c <MX_LTDC_Init+0xfc>)
 8002276:	f006 ffb1 	bl	80091dc <HAL_LTDC_ConfigLayer>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8002280:	f001 f966 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002284:	bf00      	nop
 8002286:	3738      	adds	r7, #56	@ 0x38
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000c44 	.word	0x20000c44
 8002290:	40016800 	.word	0x40016800

08002294 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002298:	4b12      	ldr	r3, [pc, #72]	@ (80022e4 <MX_QUADSPI_Init+0x50>)
 800229a:	4a13      	ldr	r2, [pc, #76]	@ (80022e8 <MX_QUADSPI_Init+0x54>)
 800229c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800229e:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <MX_QUADSPI_Init+0x50>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80022a4:	4b0f      	ldr	r3, [pc, #60]	@ (80022e4 <MX_QUADSPI_Init+0x50>)
 80022a6:	2204      	movs	r2, #4
 80022a8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80022aa:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <MX_QUADSPI_Init+0x50>)
 80022ac:	2210      	movs	r2, #16
 80022ae:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80022b0:	4b0c      	ldr	r3, [pc, #48]	@ (80022e4 <MX_QUADSPI_Init+0x50>)
 80022b2:	2218      	movs	r2, #24
 80022b4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80022b6:	4b0b      	ldr	r3, [pc, #44]	@ (80022e4 <MX_QUADSPI_Init+0x50>)
 80022b8:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80022bc:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80022be:	4b09      	ldr	r3, [pc, #36]	@ (80022e4 <MX_QUADSPI_Init+0x50>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80022c4:	4b07      	ldr	r3, [pc, #28]	@ (80022e4 <MX_QUADSPI_Init+0x50>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80022ca:	4b06      	ldr	r3, [pc, #24]	@ (80022e4 <MX_QUADSPI_Init+0x50>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80022d0:	4804      	ldr	r0, [pc, #16]	@ (80022e4 <MX_QUADSPI_Init+0x50>)
 80022d2:	f007 f997 	bl	8009604 <HAL_QSPI_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80022dc:	f001 f938 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000cec 	.word	0x20000cec
 80022e8:	a0001000 	.word	0xa0001000

080022ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b090      	sub	sp, #64	@ 0x40
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80022f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]
 80022fe:	60da      	str	r2, [r3, #12]
 8002300:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002302:	2300      	movs	r3, #0
 8002304:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002306:	463b      	mov	r3, r7
 8002308:	2228      	movs	r2, #40	@ 0x28
 800230a:	2100      	movs	r1, #0
 800230c:	4618      	mov	r0, r3
 800230e:	f013 fd8b 	bl	8015e28 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002312:	4b46      	ldr	r3, [pc, #280]	@ (800242c <MX_RTC_Init+0x140>)
 8002314:	4a46      	ldr	r2, [pc, #280]	@ (8002430 <MX_RTC_Init+0x144>)
 8002316:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002318:	4b44      	ldr	r3, [pc, #272]	@ (800242c <MX_RTC_Init+0x140>)
 800231a:	2200      	movs	r2, #0
 800231c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800231e:	4b43      	ldr	r3, [pc, #268]	@ (800242c <MX_RTC_Init+0x140>)
 8002320:	227f      	movs	r2, #127	@ 0x7f
 8002322:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002324:	4b41      	ldr	r3, [pc, #260]	@ (800242c <MX_RTC_Init+0x140>)
 8002326:	22ff      	movs	r2, #255	@ 0xff
 8002328:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800232a:	4b40      	ldr	r3, [pc, #256]	@ (800242c <MX_RTC_Init+0x140>)
 800232c:	2200      	movs	r2, #0
 800232e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002330:	4b3e      	ldr	r3, [pc, #248]	@ (800242c <MX_RTC_Init+0x140>)
 8002332:	2200      	movs	r2, #0
 8002334:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002336:	4b3d      	ldr	r3, [pc, #244]	@ (800242c <MX_RTC_Init+0x140>)
 8002338:	2200      	movs	r2, #0
 800233a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800233c:	483b      	ldr	r0, [pc, #236]	@ (800242c <MX_RTC_Init+0x140>)
 800233e:	f008 fc0f 	bl	800ab60 <HAL_RTC_Init>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002348:	f001 f902 	bl	8003550 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800234c:	2300      	movs	r3, #0
 800234e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8002352:	2300      	movs	r3, #0
 8002354:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8002358:	2300      	movs	r3, #0
 800235a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800235e:	2300      	movs	r3, #0
 8002360:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002366:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800236a:	2201      	movs	r2, #1
 800236c:	4619      	mov	r1, r3
 800236e:	482f      	ldr	r0, [pc, #188]	@ (800242c <MX_RTC_Init+0x140>)
 8002370:	f008 fc78 	bl	800ac64 <HAL_RTC_SetTime>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800237a:	f001 f8e9 	bl	8003550 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800237e:	2301      	movs	r3, #1
 8002380:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002384:	2301      	movs	r3, #1
 8002386:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 800238a:	2301      	movs	r3, #1
 800238c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8002390:	2300      	movs	r3, #0
 8002392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002396:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800239a:	2201      	movs	r2, #1
 800239c:	4619      	mov	r1, r3
 800239e:	4823      	ldr	r0, [pc, #140]	@ (800242c <MX_RTC_Init+0x140>)
 80023a0:	f008 fcfa 	bl	800ad98 <HAL_RTC_SetDate>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80023aa:	f001 f8d1 	bl	8003550 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80023d2:	2301      	movs	r3, #1
 80023d4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80023d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80023de:	463b      	mov	r3, r7
 80023e0:	2201      	movs	r2, #1
 80023e2:	4619      	mov	r1, r3
 80023e4:	4811      	ldr	r0, [pc, #68]	@ (800242c <MX_RTC_Init+0x140>)
 80023e6:	f008 fd5b 	bl	800aea0 <HAL_RTC_SetAlarm>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80023f0:	f001 f8ae 	bl	8003550 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80023f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80023fa:	463b      	mov	r3, r7
 80023fc:	2201      	movs	r2, #1
 80023fe:	4619      	mov	r1, r3
 8002400:	480a      	ldr	r0, [pc, #40]	@ (800242c <MX_RTC_Init+0x140>)
 8002402:	f008 fd4d 	bl	800aea0 <HAL_RTC_SetAlarm>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 800240c:	f001 f8a0 	bl	8003550 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002410:	2202      	movs	r2, #2
 8002412:	2100      	movs	r1, #0
 8002414:	4805      	ldr	r0, [pc, #20]	@ (800242c <MX_RTC_Init+0x140>)
 8002416:	f008 ff0d 	bl	800b234 <HAL_RTCEx_SetTimeStamp>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002420:	f001 f896 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002424:	bf00      	nop
 8002426:	3740      	adds	r7, #64	@ 0x40
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000d38 	.word	0x20000d38
 8002430:	40002800 	.word	0x40002800

08002434 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8002438:	4b4d      	ldr	r3, [pc, #308]	@ (8002570 <MX_SAI2_Init+0x13c>)
 800243a:	4a4e      	ldr	r2, [pc, #312]	@ (8002574 <MX_SAI2_Init+0x140>)
 800243c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800243e:	4b4c      	ldr	r3, [pc, #304]	@ (8002570 <MX_SAI2_Init+0x13c>)
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002444:	4b4a      	ldr	r3, [pc, #296]	@ (8002570 <MX_SAI2_Init+0x13c>)
 8002446:	2200      	movs	r2, #0
 8002448:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800244a:	4b49      	ldr	r3, [pc, #292]	@ (8002570 <MX_SAI2_Init+0x13c>)
 800244c:	2240      	movs	r2, #64	@ 0x40
 800244e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002450:	4b47      	ldr	r3, [pc, #284]	@ (8002570 <MX_SAI2_Init+0x13c>)
 8002452:	2200      	movs	r2, #0
 8002454:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002456:	4b46      	ldr	r3, [pc, #280]	@ (8002570 <MX_SAI2_Init+0x13c>)
 8002458:	2200      	movs	r2, #0
 800245a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800245c:	4b44      	ldr	r3, [pc, #272]	@ (8002570 <MX_SAI2_Init+0x13c>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002462:	4b43      	ldr	r3, [pc, #268]	@ (8002570 <MX_SAI2_Init+0x13c>)
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002468:	4b41      	ldr	r3, [pc, #260]	@ (8002570 <MX_SAI2_Init+0x13c>)
 800246a:	2200      	movs	r2, #0
 800246c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800246e:	4b40      	ldr	r3, [pc, #256]	@ (8002570 <MX_SAI2_Init+0x13c>)
 8002470:	2200      	movs	r2, #0
 8002472:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002474:	4b3e      	ldr	r3, [pc, #248]	@ (8002570 <MX_SAI2_Init+0x13c>)
 8002476:	4a40      	ldr	r2, [pc, #256]	@ (8002578 <MX_SAI2_Init+0x144>)
 8002478:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800247a:	4b3d      	ldr	r3, [pc, #244]	@ (8002570 <MX_SAI2_Init+0x13c>)
 800247c:	2200      	movs	r2, #0
 800247e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002480:	4b3b      	ldr	r3, [pc, #236]	@ (8002570 <MX_SAI2_Init+0x13c>)
 8002482:	2200      	movs	r2, #0
 8002484:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002486:	4b3a      	ldr	r3, [pc, #232]	@ (8002570 <MX_SAI2_Init+0x13c>)
 8002488:	2200      	movs	r2, #0
 800248a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800248c:	4b38      	ldr	r3, [pc, #224]	@ (8002570 <MX_SAI2_Init+0x13c>)
 800248e:	2200      	movs	r2, #0
 8002490:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8002492:	4b37      	ldr	r3, [pc, #220]	@ (8002570 <MX_SAI2_Init+0x13c>)
 8002494:	2208      	movs	r2, #8
 8002496:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8002498:	4b35      	ldr	r3, [pc, #212]	@ (8002570 <MX_SAI2_Init+0x13c>)
 800249a:	2201      	movs	r2, #1
 800249c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800249e:	4b34      	ldr	r3, [pc, #208]	@ (8002570 <MX_SAI2_Init+0x13c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80024a4:	4b32      	ldr	r3, [pc, #200]	@ (8002570 <MX_SAI2_Init+0x13c>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80024aa:	4b31      	ldr	r3, [pc, #196]	@ (8002570 <MX_SAI2_Init+0x13c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80024b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002570 <MX_SAI2_Init+0x13c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80024b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002570 <MX_SAI2_Init+0x13c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80024bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002570 <MX_SAI2_Init+0x13c>)
 80024be:	2201      	movs	r2, #1
 80024c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80024c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002570 <MX_SAI2_Init+0x13c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80024c8:	4829      	ldr	r0, [pc, #164]	@ (8002570 <MX_SAI2_Init+0x13c>)
 80024ca:	f008 ff1b 	bl	800b304 <HAL_SAI_Init>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80024d4:	f001 f83c 	bl	8003550 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80024d8:	4b28      	ldr	r3, [pc, #160]	@ (800257c <MX_SAI2_Init+0x148>)
 80024da:	4a29      	ldr	r2, [pc, #164]	@ (8002580 <MX_SAI2_Init+0x14c>)
 80024dc:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80024de:	4b27      	ldr	r3, [pc, #156]	@ (800257c <MX_SAI2_Init+0x148>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80024e4:	4b25      	ldr	r3, [pc, #148]	@ (800257c <MX_SAI2_Init+0x148>)
 80024e6:	2203      	movs	r2, #3
 80024e8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80024ea:	4b24      	ldr	r3, [pc, #144]	@ (800257c <MX_SAI2_Init+0x148>)
 80024ec:	2240      	movs	r2, #64	@ 0x40
 80024ee:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80024f0:	4b22      	ldr	r3, [pc, #136]	@ (800257c <MX_SAI2_Init+0x148>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80024f6:	4b21      	ldr	r3, [pc, #132]	@ (800257c <MX_SAI2_Init+0x148>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80024fc:	4b1f      	ldr	r3, [pc, #124]	@ (800257c <MX_SAI2_Init+0x148>)
 80024fe:	2201      	movs	r2, #1
 8002500:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002502:	4b1e      	ldr	r3, [pc, #120]	@ (800257c <MX_SAI2_Init+0x148>)
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002508:	4b1c      	ldr	r3, [pc, #112]	@ (800257c <MX_SAI2_Init+0x148>)
 800250a:	2200      	movs	r2, #0
 800250c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800250e:	4b1b      	ldr	r3, [pc, #108]	@ (800257c <MX_SAI2_Init+0x148>)
 8002510:	2200      	movs	r2, #0
 8002512:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002514:	4b19      	ldr	r3, [pc, #100]	@ (800257c <MX_SAI2_Init+0x148>)
 8002516:	2200      	movs	r2, #0
 8002518:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800251a:	4b18      	ldr	r3, [pc, #96]	@ (800257c <MX_SAI2_Init+0x148>)
 800251c:	2200      	movs	r2, #0
 800251e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002520:	4b16      	ldr	r3, [pc, #88]	@ (800257c <MX_SAI2_Init+0x148>)
 8002522:	2200      	movs	r2, #0
 8002524:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8002526:	4b15      	ldr	r3, [pc, #84]	@ (800257c <MX_SAI2_Init+0x148>)
 8002528:	2208      	movs	r2, #8
 800252a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800252c:	4b13      	ldr	r3, [pc, #76]	@ (800257c <MX_SAI2_Init+0x148>)
 800252e:	2201      	movs	r2, #1
 8002530:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002532:	4b12      	ldr	r3, [pc, #72]	@ (800257c <MX_SAI2_Init+0x148>)
 8002534:	2200      	movs	r2, #0
 8002536:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002538:	4b10      	ldr	r3, [pc, #64]	@ (800257c <MX_SAI2_Init+0x148>)
 800253a:	2200      	movs	r2, #0
 800253c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800253e:	4b0f      	ldr	r3, [pc, #60]	@ (800257c <MX_SAI2_Init+0x148>)
 8002540:	2200      	movs	r2, #0
 8002542:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8002544:	4b0d      	ldr	r3, [pc, #52]	@ (800257c <MX_SAI2_Init+0x148>)
 8002546:	2200      	movs	r2, #0
 8002548:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800254a:	4b0c      	ldr	r3, [pc, #48]	@ (800257c <MX_SAI2_Init+0x148>)
 800254c:	2200      	movs	r2, #0
 800254e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8002550:	4b0a      	ldr	r3, [pc, #40]	@ (800257c <MX_SAI2_Init+0x148>)
 8002552:	2201      	movs	r2, #1
 8002554:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8002556:	4b09      	ldr	r3, [pc, #36]	@ (800257c <MX_SAI2_Init+0x148>)
 8002558:	2200      	movs	r2, #0
 800255a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800255c:	4807      	ldr	r0, [pc, #28]	@ (800257c <MX_SAI2_Init+0x148>)
 800255e:	f008 fed1 	bl	800b304 <HAL_SAI_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8002568:	f000 fff2 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800256c:	bf00      	nop
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20000d58 	.word	0x20000d58
 8002574:	40015c04 	.word	0x40015c04
 8002578:	0002ee00 	.word	0x0002ee00
 800257c:	20000ddc 	.word	0x20000ddc
 8002580:	40015c24 	.word	0x40015c24

08002584 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002588:	4b0f      	ldr	r3, [pc, #60]	@ (80025c8 <MX_SDMMC1_SD_Init+0x44>)
 800258a:	4a10      	ldr	r2, [pc, #64]	@ (80025cc <MX_SDMMC1_SD_Init+0x48>)
 800258c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800258e:	4b0e      	ldr	r3, [pc, #56]	@ (80025c8 <MX_SDMMC1_SD_Init+0x44>)
 8002590:	2200      	movs	r2, #0
 8002592:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002594:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <MX_SDMMC1_SD_Init+0x44>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800259a:	4b0b      	ldr	r3, [pc, #44]	@ (80025c8 <MX_SDMMC1_SD_Init+0x44>)
 800259c:	2200      	movs	r2, #0
 800259e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;  // ST 커뮤니티 가이드: 1-bit 모드로 변경
 80025a0:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <MX_SDMMC1_SD_Init+0x44>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;  // 하드웨어 플로우 컨트롤 활성화 (안정성 향상)
 80025a6:	4b08      	ldr	r3, [pc, #32]	@ (80025c8 <MX_SDMMC1_SD_Init+0x44>)
 80025a8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025ac:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 8;  // 클럭 분주비 증가 (2→8, STM32F7 안정화 권장값)
 80025ae:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <MX_SDMMC1_SD_Init+0x44>)
 80025b0:	2208      	movs	r2, #8
 80025b2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  
  // Initialize SD card with HAL
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80025b4:	4804      	ldr	r0, [pc, #16]	@ (80025c8 <MX_SDMMC1_SD_Init+0x44>)
 80025b6:	f009 f85b 	bl	800b670 <HAL_SD_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 80025c0:	f000 ffc6 	bl	8003550 <Error_Handler>
  }

  /* USER CODE END SDMMC1_Init 2 */

}
 80025c4:	bf00      	nop
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000e60 	.word	0x20000e60
 80025cc:	40012c00 	.word	0x40012c00

080025d0 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80025d4:	4b15      	ldr	r3, [pc, #84]	@ (800262c <MX_SPDIFRX_Init+0x5c>)
 80025d6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80025da:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80025dc:	4b13      	ldr	r3, [pc, #76]	@ (800262c <MX_SPDIFRX_Init+0x5c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80025e2:	4b12      	ldr	r3, [pc, #72]	@ (800262c <MX_SPDIFRX_Init+0x5c>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80025e8:	4b10      	ldr	r3, [pc, #64]	@ (800262c <MX_SPDIFRX_Init+0x5c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80025ee:	4b0f      	ldr	r3, [pc, #60]	@ (800262c <MX_SPDIFRX_Init+0x5c>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80025f4:	4b0d      	ldr	r3, [pc, #52]	@ (800262c <MX_SPDIFRX_Init+0x5c>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80025fa:	4b0c      	ldr	r3, [pc, #48]	@ (800262c <MX_SPDIFRX_Init+0x5c>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002600:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <MX_SPDIFRX_Init+0x5c>)
 8002602:	2200      	movs	r2, #0
 8002604:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8002606:	4b09      	ldr	r3, [pc, #36]	@ (800262c <MX_SPDIFRX_Init+0x5c>)
 8002608:	2200      	movs	r2, #0
 800260a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800260c:	4b07      	ldr	r3, [pc, #28]	@ (800262c <MX_SPDIFRX_Init+0x5c>)
 800260e:	2200      	movs	r2, #0
 8002610:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002612:	4b06      	ldr	r3, [pc, #24]	@ (800262c <MX_SPDIFRX_Init+0x5c>)
 8002614:	2200      	movs	r2, #0
 8002616:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8002618:	4804      	ldr	r0, [pc, #16]	@ (800262c <MX_SPDIFRX_Init+0x5c>)
 800261a:	f009 ffe5 	bl	800c5e8 <HAL_SPDIFRX_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8002624:	f000 ff94 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000ee4 	.word	0x20000ee4

08002630 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002634:	4b1b      	ldr	r3, [pc, #108]	@ (80026a4 <MX_SPI2_Init+0x74>)
 8002636:	4a1c      	ldr	r2, [pc, #112]	@ (80026a8 <MX_SPI2_Init+0x78>)
 8002638:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800263a:	4b1a      	ldr	r3, [pc, #104]	@ (80026a4 <MX_SPI2_Init+0x74>)
 800263c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002640:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002642:	4b18      	ldr	r3, [pc, #96]	@ (80026a4 <MX_SPI2_Init+0x74>)
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002648:	4b16      	ldr	r3, [pc, #88]	@ (80026a4 <MX_SPI2_Init+0x74>)
 800264a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800264e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002650:	4b14      	ldr	r3, [pc, #80]	@ (80026a4 <MX_SPI2_Init+0x74>)
 8002652:	2200      	movs	r2, #0
 8002654:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002656:	4b13      	ldr	r3, [pc, #76]	@ (80026a4 <MX_SPI2_Init+0x74>)
 8002658:	2200      	movs	r2, #0
 800265a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800265c:	4b11      	ldr	r3, [pc, #68]	@ (80026a4 <MX_SPI2_Init+0x74>)
 800265e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002662:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002664:	4b0f      	ldr	r3, [pc, #60]	@ (80026a4 <MX_SPI2_Init+0x74>)
 8002666:	2200      	movs	r2, #0
 8002668:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800266a:	4b0e      	ldr	r3, [pc, #56]	@ (80026a4 <MX_SPI2_Init+0x74>)
 800266c:	2200      	movs	r2, #0
 800266e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002670:	4b0c      	ldr	r3, [pc, #48]	@ (80026a4 <MX_SPI2_Init+0x74>)
 8002672:	2200      	movs	r2, #0
 8002674:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002676:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <MX_SPI2_Init+0x74>)
 8002678:	2200      	movs	r2, #0
 800267a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800267c:	4b09      	ldr	r3, [pc, #36]	@ (80026a4 <MX_SPI2_Init+0x74>)
 800267e:	2207      	movs	r2, #7
 8002680:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002682:	4b08      	ldr	r3, [pc, #32]	@ (80026a4 <MX_SPI2_Init+0x74>)
 8002684:	2200      	movs	r2, #0
 8002686:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002688:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <MX_SPI2_Init+0x74>)
 800268a:	2208      	movs	r2, #8
 800268c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800268e:	4805      	ldr	r0, [pc, #20]	@ (80026a4 <MX_SPI2_Init+0x74>)
 8002690:	f00a f806 	bl	800c6a0 <HAL_SPI_Init>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800269a:	f000 ff59 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000f30 	.word	0x20000f30
 80026a8:	40003800 	.word	0x40003800

080026ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b09a      	sub	sp, #104	@ 0x68
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026b2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
 80026dc:	615a      	str	r2, [r3, #20]
 80026de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	222c      	movs	r2, #44	@ 0x2c
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f013 fb9e 	bl	8015e28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026ec:	4b43      	ldr	r3, [pc, #268]	@ (80027fc <MX_TIM1_Init+0x150>)
 80026ee:	4a44      	ldr	r2, [pc, #272]	@ (8002800 <MX_TIM1_Init+0x154>)
 80026f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80026f2:	4b42      	ldr	r3, [pc, #264]	@ (80027fc <MX_TIM1_Init+0x150>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f8:	4b40      	ldr	r3, [pc, #256]	@ (80027fc <MX_TIM1_Init+0x150>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80026fe:	4b3f      	ldr	r3, [pc, #252]	@ (80027fc <MX_TIM1_Init+0x150>)
 8002700:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002704:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002706:	4b3d      	ldr	r3, [pc, #244]	@ (80027fc <MX_TIM1_Init+0x150>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800270c:	4b3b      	ldr	r3, [pc, #236]	@ (80027fc <MX_TIM1_Init+0x150>)
 800270e:	2200      	movs	r2, #0
 8002710:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002712:	4b3a      	ldr	r3, [pc, #232]	@ (80027fc <MX_TIM1_Init+0x150>)
 8002714:	2200      	movs	r2, #0
 8002716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002718:	4838      	ldr	r0, [pc, #224]	@ (80027fc <MX_TIM1_Init+0x150>)
 800271a:	f00a f86c 	bl	800c7f6 <HAL_TIM_Base_Init>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002724:	f000 ff14 	bl	8003550 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002728:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800272c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800272e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002732:	4619      	mov	r1, r3
 8002734:	4831      	ldr	r0, [pc, #196]	@ (80027fc <MX_TIM1_Init+0x150>)
 8002736:	f00a fb9f 	bl	800ce78 <HAL_TIM_ConfigClockSource>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002740:	f000 ff06 	bl	8003550 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002744:	482d      	ldr	r0, [pc, #180]	@ (80027fc <MX_TIM1_Init+0x150>)
 8002746:	f00a f925 	bl	800c994 <HAL_TIM_PWM_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002750:	f000 fefe 	bl	8003550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002754:	2300      	movs	r3, #0
 8002756:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002758:	2300      	movs	r3, #0
 800275a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800275c:	2300      	movs	r3, #0
 800275e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002760:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002764:	4619      	mov	r1, r3
 8002766:	4825      	ldr	r0, [pc, #148]	@ (80027fc <MX_TIM1_Init+0x150>)
 8002768:	f00b f816 	bl	800d798 <HAL_TIMEx_MasterConfigSynchronization>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002772:	f000 feed 	bl	8003550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002776:	2360      	movs	r3, #96	@ 0x60
 8002778:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800277e:	2300      	movs	r3, #0
 8002780:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002782:	2300      	movs	r3, #0
 8002784:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002786:	2300      	movs	r3, #0
 8002788:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800278a:	2300      	movs	r3, #0
 800278c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800278e:	2300      	movs	r3, #0
 8002790:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002792:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002796:	2200      	movs	r2, #0
 8002798:	4619      	mov	r1, r3
 800279a:	4818      	ldr	r0, [pc, #96]	@ (80027fc <MX_TIM1_Init+0x150>)
 800279c:	f00a fa58 	bl	800cc50 <HAL_TIM_PWM_ConfigChannel>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80027a6:	f000 fed3 	bl	8003550 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80027cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80027da:	1d3b      	adds	r3, r7, #4
 80027dc:	4619      	mov	r1, r3
 80027de:	4807      	ldr	r0, [pc, #28]	@ (80027fc <MX_TIM1_Init+0x150>)
 80027e0:	f00b f868 	bl	800d8b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80027ea:	f000 feb1 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80027ee:	4803      	ldr	r0, [pc, #12]	@ (80027fc <MX_TIM1_Init+0x150>)
 80027f0:	f001 fd22 	bl	8004238 <HAL_TIM_MspPostInit>

}
 80027f4:	bf00      	nop
 80027f6:	3768      	adds	r7, #104	@ 0x68
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000f94 	.word	0x20000f94
 8002800:	40010000 	.word	0x40010000

08002804 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08e      	sub	sp, #56	@ 0x38
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800280a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	609a      	str	r2, [r3, #8]
 8002816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002818:	f107 031c 	add.w	r3, r7, #28
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002824:	463b      	mov	r3, r7
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	609a      	str	r2, [r3, #8]
 800282e:	60da      	str	r2, [r3, #12]
 8002830:	611a      	str	r2, [r3, #16]
 8002832:	615a      	str	r2, [r3, #20]
 8002834:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002836:	4b2d      	ldr	r3, [pc, #180]	@ (80028ec <MX_TIM2_Init+0xe8>)
 8002838:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800283c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800283e:	4b2b      	ldr	r3, [pc, #172]	@ (80028ec <MX_TIM2_Init+0xe8>)
 8002840:	2200      	movs	r2, #0
 8002842:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002844:	4b29      	ldr	r3, [pc, #164]	@ (80028ec <MX_TIM2_Init+0xe8>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800284a:	4b28      	ldr	r3, [pc, #160]	@ (80028ec <MX_TIM2_Init+0xe8>)
 800284c:	f04f 32ff 	mov.w	r2, #4294967295
 8002850:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002852:	4b26      	ldr	r3, [pc, #152]	@ (80028ec <MX_TIM2_Init+0xe8>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002858:	4b24      	ldr	r3, [pc, #144]	@ (80028ec <MX_TIM2_Init+0xe8>)
 800285a:	2200      	movs	r2, #0
 800285c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800285e:	4823      	ldr	r0, [pc, #140]	@ (80028ec <MX_TIM2_Init+0xe8>)
 8002860:	f009 ffc9 	bl	800c7f6 <HAL_TIM_Base_Init>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800286a:	f000 fe71 	bl	8003550 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800286e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002872:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002874:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002878:	4619      	mov	r1, r3
 800287a:	481c      	ldr	r0, [pc, #112]	@ (80028ec <MX_TIM2_Init+0xe8>)
 800287c:	f00a fafc 	bl	800ce78 <HAL_TIM_ConfigClockSource>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002886:	f000 fe63 	bl	8003550 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800288a:	4818      	ldr	r0, [pc, #96]	@ (80028ec <MX_TIM2_Init+0xe8>)
 800288c:	f00a f882 	bl	800c994 <HAL_TIM_PWM_Init>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002896:	f000 fe5b 	bl	8003550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028a2:	f107 031c 	add.w	r3, r7, #28
 80028a6:	4619      	mov	r1, r3
 80028a8:	4810      	ldr	r0, [pc, #64]	@ (80028ec <MX_TIM2_Init+0xe8>)
 80028aa:	f00a ff75 	bl	800d798 <HAL_TIMEx_MasterConfigSynchronization>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80028b4:	f000 fe4c 	bl	8003550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028b8:	2360      	movs	r3, #96	@ 0x60
 80028ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028c8:	463b      	mov	r3, r7
 80028ca:	2200      	movs	r2, #0
 80028cc:	4619      	mov	r1, r3
 80028ce:	4807      	ldr	r0, [pc, #28]	@ (80028ec <MX_TIM2_Init+0xe8>)
 80028d0:	f00a f9be 	bl	800cc50 <HAL_TIM_PWM_ConfigChannel>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80028da:	f000 fe39 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80028de:	4803      	ldr	r0, [pc, #12]	@ (80028ec <MX_TIM2_Init+0xe8>)
 80028e0:	f001 fcaa 	bl	8004238 <HAL_TIM_MspPostInit>

}
 80028e4:	bf00      	nop
 80028e6:	3738      	adds	r7, #56	@ 0x38
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000fe0 	.word	0x20000fe0

080028f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08e      	sub	sp, #56	@ 0x38
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	609a      	str	r2, [r3, #8]
 8002902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002904:	f107 031c 	add.w	r3, r7, #28
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002910:	463b      	mov	r3, r7
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	605a      	str	r2, [r3, #4]
 8002918:	609a      	str	r2, [r3, #8]
 800291a:	60da      	str	r2, [r3, #12]
 800291c:	611a      	str	r2, [r3, #16]
 800291e:	615a      	str	r2, [r3, #20]
 8002920:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002922:	4b2d      	ldr	r3, [pc, #180]	@ (80029d8 <MX_TIM3_Init+0xe8>)
 8002924:	4a2d      	ldr	r2, [pc, #180]	@ (80029dc <MX_TIM3_Init+0xec>)
 8002926:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002928:	4b2b      	ldr	r3, [pc, #172]	@ (80029d8 <MX_TIM3_Init+0xe8>)
 800292a:	2200      	movs	r2, #0
 800292c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292e:	4b2a      	ldr	r3, [pc, #168]	@ (80029d8 <MX_TIM3_Init+0xe8>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002934:	4b28      	ldr	r3, [pc, #160]	@ (80029d8 <MX_TIM3_Init+0xe8>)
 8002936:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800293a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800293c:	4b26      	ldr	r3, [pc, #152]	@ (80029d8 <MX_TIM3_Init+0xe8>)
 800293e:	2200      	movs	r2, #0
 8002940:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002942:	4b25      	ldr	r3, [pc, #148]	@ (80029d8 <MX_TIM3_Init+0xe8>)
 8002944:	2200      	movs	r2, #0
 8002946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002948:	4823      	ldr	r0, [pc, #140]	@ (80029d8 <MX_TIM3_Init+0xe8>)
 800294a:	f009 ff54 	bl	800c7f6 <HAL_TIM_Base_Init>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002954:	f000 fdfc 	bl	8003550 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002958:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800295c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800295e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002962:	4619      	mov	r1, r3
 8002964:	481c      	ldr	r0, [pc, #112]	@ (80029d8 <MX_TIM3_Init+0xe8>)
 8002966:	f00a fa87 	bl	800ce78 <HAL_TIM_ConfigClockSource>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002970:	f000 fdee 	bl	8003550 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002974:	4818      	ldr	r0, [pc, #96]	@ (80029d8 <MX_TIM3_Init+0xe8>)
 8002976:	f00a f80d 	bl	800c994 <HAL_TIM_PWM_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002980:	f000 fde6 	bl	8003550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800298c:	f107 031c 	add.w	r3, r7, #28
 8002990:	4619      	mov	r1, r3
 8002992:	4811      	ldr	r0, [pc, #68]	@ (80029d8 <MX_TIM3_Init+0xe8>)
 8002994:	f00a ff00 	bl	800d798 <HAL_TIMEx_MasterConfigSynchronization>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800299e:	f000 fdd7 	bl	8003550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029a2:	2360      	movs	r3, #96	@ 0x60
 80029a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029b2:	463b      	mov	r3, r7
 80029b4:	2200      	movs	r2, #0
 80029b6:	4619      	mov	r1, r3
 80029b8:	4807      	ldr	r0, [pc, #28]	@ (80029d8 <MX_TIM3_Init+0xe8>)
 80029ba:	f00a f949 	bl	800cc50 <HAL_TIM_PWM_ConfigChannel>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80029c4:	f000 fdc4 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80029c8:	4803      	ldr	r0, [pc, #12]	@ (80029d8 <MX_TIM3_Init+0xe8>)
 80029ca:	f001 fc35 	bl	8004238 <HAL_TIM_MspPostInit>

}
 80029ce:	bf00      	nop
 80029d0:	3738      	adds	r7, #56	@ 0x38
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	2000102c 	.word	0x2000102c
 80029dc:	40000400 	.word	0x40000400

080029e0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08e      	sub	sp, #56	@ 0x38
 80029e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	609a      	str	r2, [r3, #8]
 80029f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029f4:	f107 031c 	add.w	r3, r7, #28
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a00:	463b      	mov	r3, r7
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]
 8002a08:	609a      	str	r2, [r3, #8]
 8002a0a:	60da      	str	r2, [r3, #12]
 8002a0c:	611a      	str	r2, [r3, #16]
 8002a0e:	615a      	str	r2, [r3, #20]
 8002a10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002a12:	4b2d      	ldr	r3, [pc, #180]	@ (8002ac8 <MX_TIM5_Init+0xe8>)
 8002a14:	4a2d      	ldr	r2, [pc, #180]	@ (8002acc <MX_TIM5_Init+0xec>)
 8002a16:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002a18:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac8 <MX_TIM5_Init+0xe8>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ac8 <MX_TIM5_Init+0xe8>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002a24:	4b28      	ldr	r3, [pc, #160]	@ (8002ac8 <MX_TIM5_Init+0xe8>)
 8002a26:	f04f 32ff 	mov.w	r2, #4294967295
 8002a2a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a2c:	4b26      	ldr	r3, [pc, #152]	@ (8002ac8 <MX_TIM5_Init+0xe8>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a32:	4b25      	ldr	r3, [pc, #148]	@ (8002ac8 <MX_TIM5_Init+0xe8>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002a38:	4823      	ldr	r0, [pc, #140]	@ (8002ac8 <MX_TIM5_Init+0xe8>)
 8002a3a:	f009 fedc 	bl	800c7f6 <HAL_TIM_Base_Init>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002a44:	f000 fd84 	bl	8003550 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002a4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a52:	4619      	mov	r1, r3
 8002a54:	481c      	ldr	r0, [pc, #112]	@ (8002ac8 <MX_TIM5_Init+0xe8>)
 8002a56:	f00a fa0f 	bl	800ce78 <HAL_TIM_ConfigClockSource>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002a60:	f000 fd76 	bl	8003550 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002a64:	4818      	ldr	r0, [pc, #96]	@ (8002ac8 <MX_TIM5_Init+0xe8>)
 8002a66:	f009 ff95 	bl	800c994 <HAL_TIM_PWM_Init>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002a70:	f000 fd6e 	bl	8003550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a74:	2300      	movs	r3, #0
 8002a76:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a7c:	f107 031c 	add.w	r3, r7, #28
 8002a80:	4619      	mov	r1, r3
 8002a82:	4811      	ldr	r0, [pc, #68]	@ (8002ac8 <MX_TIM5_Init+0xe8>)
 8002a84:	f00a fe88 	bl	800d798 <HAL_TIMEx_MasterConfigSynchronization>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002a8e:	f000 fd5f 	bl	8003550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a92:	2360      	movs	r3, #96	@ 0x60
 8002a94:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002aa2:	463b      	mov	r3, r7
 8002aa4:	220c      	movs	r2, #12
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4807      	ldr	r0, [pc, #28]	@ (8002ac8 <MX_TIM5_Init+0xe8>)
 8002aaa:	f00a f8d1 	bl	800cc50 <HAL_TIM_PWM_ConfigChannel>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002ab4:	f000 fd4c 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002ab8:	4803      	ldr	r0, [pc, #12]	@ (8002ac8 <MX_TIM5_Init+0xe8>)
 8002aba:	f001 fbbd 	bl	8004238 <HAL_TIM_MspPostInit>

}
 8002abe:	bf00      	nop
 8002ac0:	3738      	adds	r7, #56	@ 0x38
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20001078 	.word	0x20001078
 8002acc:	40000c00 	.word	0x40000c00

08002ad0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ad6:	f107 0310 	add.w	r3, r7, #16
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	605a      	str	r2, [r3, #4]
 8002ae0:	609a      	str	r2, [r3, #8]
 8002ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae4:	1d3b      	adds	r3, r7, #4
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002aee:	4b20      	ldr	r3, [pc, #128]	@ (8002b70 <MX_TIM8_Init+0xa0>)
 8002af0:	4a20      	ldr	r2, [pc, #128]	@ (8002b74 <MX_TIM8_Init+0xa4>)
 8002af2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002af4:	4b1e      	ldr	r3, [pc, #120]	@ (8002b70 <MX_TIM8_Init+0xa0>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002afa:	4b1d      	ldr	r3, [pc, #116]	@ (8002b70 <MX_TIM8_Init+0xa0>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002b00:	4b1b      	ldr	r3, [pc, #108]	@ (8002b70 <MX_TIM8_Init+0xa0>)
 8002b02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b06:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b08:	4b19      	ldr	r3, [pc, #100]	@ (8002b70 <MX_TIM8_Init+0xa0>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002b0e:	4b18      	ldr	r3, [pc, #96]	@ (8002b70 <MX_TIM8_Init+0xa0>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b14:	4b16      	ldr	r3, [pc, #88]	@ (8002b70 <MX_TIM8_Init+0xa0>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002b1a:	4815      	ldr	r0, [pc, #84]	@ (8002b70 <MX_TIM8_Init+0xa0>)
 8002b1c:	f009 fe6b 	bl	800c7f6 <HAL_TIM_Base_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002b26:	f000 fd13 	bl	8003550 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002b30:	f107 0310 	add.w	r3, r7, #16
 8002b34:	4619      	mov	r1, r3
 8002b36:	480e      	ldr	r0, [pc, #56]	@ (8002b70 <MX_TIM8_Init+0xa0>)
 8002b38:	f00a f99e 	bl	800ce78 <HAL_TIM_ConfigClockSource>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002b42:	f000 fd05 	bl	8003550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b46:	2300      	movs	r3, #0
 8002b48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002b52:	1d3b      	adds	r3, r7, #4
 8002b54:	4619      	mov	r1, r3
 8002b56:	4806      	ldr	r0, [pc, #24]	@ (8002b70 <MX_TIM8_Init+0xa0>)
 8002b58:	f00a fe1e 	bl	800d798 <HAL_TIMEx_MasterConfigSynchronization>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002b62:	f000 fcf5 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002b66:	bf00      	nop
 8002b68:	3720      	adds	r7, #32
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	200010c4 	.word	0x200010c4
 8002b74:	40010400 	.word	0x40010400

08002b78 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b7e:	1d3b      	adds	r3, r7, #4
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	611a      	str	r2, [r3, #16]
 8002b8c:	615a      	str	r2, [r3, #20]
 8002b8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002b90:	4b1a      	ldr	r3, [pc, #104]	@ (8002bfc <MX_TIM12_Init+0x84>)
 8002b92:	4a1b      	ldr	r2, [pc, #108]	@ (8002c00 <MX_TIM12_Init+0x88>)
 8002b94:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002b96:	4b19      	ldr	r3, [pc, #100]	@ (8002bfc <MX_TIM12_Init+0x84>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b9c:	4b17      	ldr	r3, [pc, #92]	@ (8002bfc <MX_TIM12_Init+0x84>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002ba2:	4b16      	ldr	r3, [pc, #88]	@ (8002bfc <MX_TIM12_Init+0x84>)
 8002ba4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ba8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002baa:	4b14      	ldr	r3, [pc, #80]	@ (8002bfc <MX_TIM12_Init+0x84>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bb0:	4b12      	ldr	r3, [pc, #72]	@ (8002bfc <MX_TIM12_Init+0x84>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002bb6:	4811      	ldr	r0, [pc, #68]	@ (8002bfc <MX_TIM12_Init+0x84>)
 8002bb8:	f009 feec 	bl	800c994 <HAL_TIM_PWM_Init>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002bc2:	f000 fcc5 	bl	8003550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bc6:	2360      	movs	r3, #96	@ 0x60
 8002bc8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bd6:	1d3b      	adds	r3, r7, #4
 8002bd8:	2200      	movs	r2, #0
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4807      	ldr	r0, [pc, #28]	@ (8002bfc <MX_TIM12_Init+0x84>)
 8002bde:	f00a f837 	bl	800cc50 <HAL_TIM_PWM_ConfigChannel>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002be8:	f000 fcb2 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002bec:	4803      	ldr	r0, [pc, #12]	@ (8002bfc <MX_TIM12_Init+0x84>)
 8002bee:	f001 fb23 	bl	8004238 <HAL_TIM_MspPostInit>

}
 8002bf2:	bf00      	nop
 8002bf4:	3720      	adds	r7, #32
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20001110 	.word	0x20001110
 8002c00:	40001800 	.word	0x40001800

08002c04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c08:	4b14      	ldr	r3, [pc, #80]	@ (8002c5c <MX_USART1_UART_Init+0x58>)
 8002c0a:	4a15      	ldr	r2, [pc, #84]	@ (8002c60 <MX_USART1_UART_Init+0x5c>)
 8002c0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c0e:	4b13      	ldr	r3, [pc, #76]	@ (8002c5c <MX_USART1_UART_Init+0x58>)
 8002c10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c16:	4b11      	ldr	r3, [pc, #68]	@ (8002c5c <MX_USART1_UART_Init+0x58>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c5c <MX_USART1_UART_Init+0x58>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c22:	4b0e      	ldr	r3, [pc, #56]	@ (8002c5c <MX_USART1_UART_Init+0x58>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c28:	4b0c      	ldr	r3, [pc, #48]	@ (8002c5c <MX_USART1_UART_Init+0x58>)
 8002c2a:	220c      	movs	r2, #12
 8002c2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c5c <MX_USART1_UART_Init+0x58>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c34:	4b09      	ldr	r3, [pc, #36]	@ (8002c5c <MX_USART1_UART_Init+0x58>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c3a:	4b08      	ldr	r3, [pc, #32]	@ (8002c5c <MX_USART1_UART_Init+0x58>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c40:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <MX_USART1_UART_Init+0x58>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c46:	4805      	ldr	r0, [pc, #20]	@ (8002c5c <MX_USART1_UART_Init+0x58>)
 8002c48:	f00a fed0 	bl	800d9ec <HAL_UART_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002c52:	f000 fc7d 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	2000115c 	.word	0x2000115c
 8002c60:	40011000 	.word	0x40011000

08002c64 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002c68:	4b14      	ldr	r3, [pc, #80]	@ (8002cbc <MX_USART6_UART_Init+0x58>)
 8002c6a:	4a15      	ldr	r2, [pc, #84]	@ (8002cc0 <MX_USART6_UART_Init+0x5c>)
 8002c6c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002c6e:	4b13      	ldr	r3, [pc, #76]	@ (8002cbc <MX_USART6_UART_Init+0x58>)
 8002c70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c74:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002c76:	4b11      	ldr	r3, [pc, #68]	@ (8002cbc <MX_USART6_UART_Init+0x58>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002cbc <MX_USART6_UART_Init+0x58>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002c82:	4b0e      	ldr	r3, [pc, #56]	@ (8002cbc <MX_USART6_UART_Init+0x58>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002c88:	4b0c      	ldr	r3, [pc, #48]	@ (8002cbc <MX_USART6_UART_Init+0x58>)
 8002c8a:	220c      	movs	r2, #12
 8002c8c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002cbc <MX_USART6_UART_Init+0x58>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c94:	4b09      	ldr	r3, [pc, #36]	@ (8002cbc <MX_USART6_UART_Init+0x58>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c9a:	4b08      	ldr	r3, [pc, #32]	@ (8002cbc <MX_USART6_UART_Init+0x58>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ca0:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <MX_USART6_UART_Init+0x58>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002ca6:	4805      	ldr	r0, [pc, #20]	@ (8002cbc <MX_USART6_UART_Init+0x58>)
 8002ca8:	f00a fea0 	bl	800d9ec <HAL_UART_Init>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002cb2:	f000 fc4d 	bl	8003550 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	200011e4 	.word	0x200011e4
 8002cc0:	40011400 	.word	0x40011400

08002cc4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002cca:	1d3b      	adds	r3, r7, #4
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	611a      	str	r2, [r3, #16]
 8002cd8:	615a      	str	r2, [r3, #20]
 8002cda:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8002d5c <MX_FMC_Init+0x98>)
 8002cde:	4a20      	ldr	r2, [pc, #128]	@ (8002d60 <MX_FMC_Init+0x9c>)
 8002ce0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d5c <MX_FMC_Init+0x98>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d5c <MX_FMC_Init+0x98>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002cee:	4b1b      	ldr	r3, [pc, #108]	@ (8002d5c <MX_FMC_Init+0x98>)
 8002cf0:	2204      	movs	r2, #4
 8002cf2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002cf4:	4b19      	ldr	r3, [pc, #100]	@ (8002d5c <MX_FMC_Init+0x98>)
 8002cf6:	2210      	movs	r2, #16
 8002cf8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002cfa:	4b18      	ldr	r3, [pc, #96]	@ (8002d5c <MX_FMC_Init+0x98>)
 8002cfc:	2240      	movs	r2, #64	@ 0x40
 8002cfe:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002d00:	4b16      	ldr	r3, [pc, #88]	@ (8002d5c <MX_FMC_Init+0x98>)
 8002d02:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002d06:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002d08:	4b14      	ldr	r3, [pc, #80]	@ (8002d5c <MX_FMC_Init+0x98>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002d0e:	4b13      	ldr	r3, [pc, #76]	@ (8002d5c <MX_FMC_Init+0x98>)
 8002d10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d14:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002d16:	4b11      	ldr	r3, [pc, #68]	@ (8002d5c <MX_FMC_Init+0x98>)
 8002d18:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d5c <MX_FMC_Init+0x98>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002d24:	2302      	movs	r3, #2
 8002d26:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002d28:	2307      	movs	r3, #7
 8002d2a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002d2c:	2304      	movs	r3, #4
 8002d2e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002d30:	2307      	movs	r3, #7
 8002d32:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002d34:	2303      	movs	r3, #3
 8002d36:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002d40:	1d3b      	adds	r3, r7, #4
 8002d42:	4619      	mov	r1, r3
 8002d44:	4805      	ldr	r0, [pc, #20]	@ (8002d5c <MX_FMC_Init+0x98>)
 8002d46:	f009 fc1b 	bl	800c580 <HAL_SDRAM_Init>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002d50:	f000 fbfe 	bl	8003550 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002d54:	bf00      	nop
 8002d56:	3720      	adds	r7, #32
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	2000126c 	.word	0x2000126c
 8002d60:	a0000140 	.word	0xa0000140

08002d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b090      	sub	sp, #64	@ 0x40
 8002d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	605a      	str	r2, [r3, #4]
 8002d74:	609a      	str	r2, [r3, #8]
 8002d76:	60da      	str	r2, [r3, #12]
 8002d78:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d7a:	4bb0      	ldr	r3, [pc, #704]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7e:	4aaf      	ldr	r2, [pc, #700]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002d80:	f043 0310 	orr.w	r3, r3, #16
 8002d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d86:	4bad      	ldr	r3, [pc, #692]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8a:	f003 0310 	and.w	r3, r3, #16
 8002d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d92:	4baa      	ldr	r3, [pc, #680]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	4aa9      	ldr	r2, [pc, #676]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002d98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d9e:	4ba7      	ldr	r3, [pc, #668]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002daa:	4ba4      	ldr	r3, [pc, #656]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	4aa3      	ldr	r2, [pc, #652]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002db0:	f043 0302 	orr.w	r3, r3, #2
 8002db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002db6:	4ba1      	ldr	r3, [pc, #644]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	623b      	str	r3, [r7, #32]
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dc2:	4b9e      	ldr	r3, [pc, #632]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc6:	4a9d      	ldr	r2, [pc, #628]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002dc8:	f043 0308 	orr.w	r3, r3, #8
 8002dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dce:	4b9b      	ldr	r3, [pc, #620]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	61fb      	str	r3, [r7, #28]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dda:	4b98      	ldr	r3, [pc, #608]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	4a97      	ldr	r2, [pc, #604]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002de0:	f043 0304 	orr.w	r3, r3, #4
 8002de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de6:	4b95      	ldr	r3, [pc, #596]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df2:	4b92      	ldr	r3, [pc, #584]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	4a91      	ldr	r2, [pc, #580]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dfe:	4b8f      	ldr	r3, [pc, #572]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002e0a:	4b8c      	ldr	r3, [pc, #560]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0e:	4a8b      	ldr	r2, [pc, #556]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002e10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e16:	4b89      	ldr	r3, [pc, #548]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e22:	4b86      	ldr	r3, [pc, #536]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	4a85      	ldr	r2, [pc, #532]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e2e:	4b83      	ldr	r3, [pc, #524]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002e3a:	4b80      	ldr	r3, [pc, #512]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3e:	4a7f      	ldr	r2, [pc, #508]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002e40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e46:	4b7d      	ldr	r3, [pc, #500]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e52:	4b7a      	ldr	r3, [pc, #488]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e56:	4a79      	ldr	r2, [pc, #484]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002e58:	f043 0320 	orr.w	r3, r3, #32
 8002e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e5e:	4b77      	ldr	r3, [pc, #476]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	607b      	str	r3, [r7, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e6a:	4b74      	ldr	r3, [pc, #464]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	4a73      	ldr	r2, [pc, #460]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e76:	4b71      	ldr	r3, [pc, #452]	@ (800303c <MX_GPIO_Init+0x2d8>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002e82:	2201      	movs	r2, #1
 8002e84:	2120      	movs	r1, #32
 8002e86:	486e      	ldr	r0, [pc, #440]	@ (8003040 <MX_GPIO_Init+0x2dc>)
 8002e88:	f004 f956 	bl	8007138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	210c      	movs	r1, #12
 8002e90:	486c      	ldr	r0, [pc, #432]	@ (8003044 <MX_GPIO_Init+0x2e0>)
 8002e92:	f004 f951 	bl	8007138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002e96:	2201      	movs	r2, #1
 8002e98:	2108      	movs	r1, #8
 8002e9a:	486b      	ldr	r0, [pc, #428]	@ (8003048 <MX_GPIO_Init+0x2e4>)
 8002e9c:	f004 f94c 	bl	8007138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ea6:	4867      	ldr	r0, [pc, #412]	@ (8003044 <MX_GPIO_Init+0x2e0>)
 8002ea8:	f004 f946 	bl	8007138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002eac:	2200      	movs	r2, #0
 8002eae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002eb2:	4866      	ldr	r0, [pc, #408]	@ (800304c <MX_GPIO_Init+0x2e8>)
 8002eb4:	f004 f940 	bl	8007138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	21c8      	movs	r1, #200	@ 0xc8
 8002ebc:	4864      	ldr	r0, [pc, #400]	@ (8003050 <MX_GPIO_Init+0x2ec>)
 8002ebe:	f004 f93b 	bl	8007138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002ec2:	2308      	movs	r3, #8
 8002ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002ece:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	485f      	ldr	r0, [pc, #380]	@ (8003054 <MX_GPIO_Init+0x2f0>)
 8002ed6:	f003 ff83 	bl	8006de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002eda:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8002ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002eec:	230a      	movs	r3, #10
 8002eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4858      	ldr	r0, [pc, #352]	@ (8003058 <MX_GPIO_Init+0x2f4>)
 8002ef8:	f003 ff72 	bl	8006de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002efc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f02:	2300      	movs	r3, #0
 8002f04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002f0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4852      	ldr	r0, [pc, #328]	@ (800305c <MX_GPIO_Init+0x2f8>)
 8002f12:	f003 ff65 	bl	8006de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002f16:	2340      	movs	r3, #64	@ 0x40
 8002f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002f1a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002f1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002f24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4845      	ldr	r0, [pc, #276]	@ (8003040 <MX_GPIO_Init+0x2dc>)
 8002f2c:	f003 ff58 	bl	8006de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002f30:	2320      	movs	r3, #32
 8002f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f34:	2301      	movs	r3, #1
 8002f36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002f40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f44:	4619      	mov	r1, r3
 8002f46:	483e      	ldr	r0, [pc, #248]	@ (8003040 <MX_GPIO_Init+0x2dc>)
 8002f48:	f003 ff4a 	bl	8006de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8002f4c:	f241 030c 	movw	r3, #4108	@ 0x100c
 8002f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f52:	2301      	movs	r3, #1
 8002f54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002f5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f62:	4619      	mov	r1, r3
 8002f64:	4837      	ldr	r0, [pc, #220]	@ (8003044 <MX_GPIO_Init+0x2e0>)
 8002f66:	f003 ff3b 	bl	8006de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002f6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f70:	2300      	movs	r3, #0
 8002f72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002f78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4838      	ldr	r0, [pc, #224]	@ (8003060 <MX_GPIO_Init+0x2fc>)
 8002f80:	f003 ff2e 	bl	8006de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002f84:	2308      	movs	r3, #8
 8002f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f90:	2300      	movs	r3, #0
 8002f92:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002f94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f98:	4619      	mov	r1, r3
 8002f9a:	482b      	ldr	r0, [pc, #172]	@ (8003048 <MX_GPIO_Init+0x2e4>)
 8002f9c:	f003 ff20 	bl	8006de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002fa0:	2310      	movs	r3, #16
 8002fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002fac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4823      	ldr	r0, [pc, #140]	@ (8003040 <MX_GPIO_Init+0x2dc>)
 8002fb4:	f003 ff14 	bl	8006de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002fb8:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002fc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fca:	4619      	mov	r1, r3
 8002fcc:	481f      	ldr	r0, [pc, #124]	@ (800304c <MX_GPIO_Init+0x2e8>)
 8002fce:	f003 ff07 	bl	8006de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002fd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002fe4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4818      	ldr	r0, [pc, #96]	@ (800304c <MX_GPIO_Init+0x2e8>)
 8002fec:	f003 fef8 	bl	8006de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002ff0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002ff6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002ffa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8003000:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003004:	4619      	mov	r1, r3
 8003006:	480f      	ldr	r0, [pc, #60]	@ (8003044 <MX_GPIO_Init+0x2e0>)
 8003008:	f003 feea 	bl	8006de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800300c:	2310      	movs	r3, #16
 800300e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003010:	2302      	movs	r3, #2
 8003012:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003018:	2303      	movs	r3, #3
 800301a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800301c:	230a      	movs	r3, #10
 800301e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8003020:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003024:	4619      	mov	r1, r3
 8003026:	4809      	ldr	r0, [pc, #36]	@ (800304c <MX_GPIO_Init+0x2e8>)
 8003028:	f003 feda 	bl	8006de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800302c:	23c8      	movs	r3, #200	@ 0xc8
 800302e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003030:	2301      	movs	r3, #1
 8003032:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	637b      	str	r3, [r7, #52]	@ 0x34
 8003038:	e014      	b.n	8003064 <MX_GPIO_Init+0x300>
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800
 8003040:	40020c00 	.word	0x40020c00
 8003044:	40022000 	.word	0x40022000
 8003048:	40022800 	.word	0x40022800
 800304c:	40021c00 	.word	0x40021c00
 8003050:	40021800 	.word	0x40021800
 8003054:	40021000 	.word	0x40021000
 8003058:	40020400 	.word	0x40020400
 800305c:	40022400 	.word	0x40022400
 8003060:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003064:	2300      	movs	r3, #0
 8003066:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003068:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800306c:	4619      	mov	r1, r3
 800306e:	4819      	ldr	r0, [pc, #100]	@ (80030d4 <MX_GPIO_Init+0x370>)
 8003070:	f003 feb6 	bl	8006de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8003074:	2305      	movs	r3, #5
 8003076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003078:	2302      	movs	r3, #2
 800307a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003080:	2303      	movs	r3, #3
 8003082:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003084:	230a      	movs	r3, #10
 8003086:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003088:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800308c:	4619      	mov	r1, r3
 800308e:	4812      	ldr	r0, [pc, #72]	@ (80030d8 <MX_GPIO_Init+0x374>)
 8003090:	f003 fea6 	bl	8006de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8003094:	2304      	movs	r3, #4
 8003096:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003098:	2300      	movs	r3, #0
 800309a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309c:	2300      	movs	r3, #0
 800309e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80030a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030a4:	4619      	mov	r1, r3
 80030a6:	480b      	ldr	r0, [pc, #44]	@ (80030d4 <MX_GPIO_Init+0x370>)
 80030a8:	f003 fe9a 	bl	8006de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80030ac:	2328      	movs	r3, #40	@ 0x28
 80030ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b0:	2302      	movs	r3, #2
 80030b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030b8:	2303      	movs	r3, #3
 80030ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80030bc:	230a      	movs	r3, #10
 80030be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030c4:	4619      	mov	r1, r3
 80030c6:	4805      	ldr	r0, [pc, #20]	@ (80030dc <MX_GPIO_Init+0x378>)
 80030c8:	f003 fe8a 	bl	8006de0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80030cc:	bf00      	nop
 80030ce:	3740      	adds	r7, #64	@ 0x40
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40021800 	.word	0x40021800
 80030d8:	40020800 	.word	0x40020800
 80030dc:	40020000 	.word	0x40020000

080030e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b0b6      	sub	sp, #216	@ 0xd8
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST - 임시 비활성화 (SD 카드 테스트용) */
  LOG_WARN("USB Host initialization temporarily disabled to avoid RTOS task conflicts");
 80030e8:	49c9      	ldr	r1, [pc, #804]	@ (8003410 <StartDefaultTask+0x330>)
 80030ea:	2002      	movs	r0, #2
 80030ec:	f001 fcd4 	bl	8004a98 <LOGGER_SendFormatted>
  LOG_INFO("This eliminates USBH_Thread vs defaultTask priority conflicts");
 80030f0:	49c8      	ldr	r1, [pc, #800]	@ (8003414 <StartDefaultTask+0x334>)
 80030f2:	2001      	movs	r0, #1
 80030f4:	f001 fcd0 	bl	8004a98 <LOGGER_SendFormatted>
  // MX_USB_HOST_Init();  // SD 카드 테스트 완료 후 재활성화 예정
  /* USER CODE BEGIN 5 */
  
  // SD Card 초기화는 이미 main()에서 우선 완료됨
  LOG_INFO("📋 SD card initialization completed in main() - checking status...");
 80030f8:	49c7      	ldr	r1, [pc, #796]	@ (8003418 <StartDefaultTask+0x338>)
 80030fa:	2001      	movs	r0, #1
 80030fc:	f001 fccc 	bl	8004a98 <LOGGER_SendFormatted>
  
  LOG_INFO("=== STM32F746G-DISCO UART6 Test Started ===");
 8003100:	49c6      	ldr	r1, [pc, #792]	@ (800341c <StartDefaultTask+0x33c>)
 8003102:	2001      	movs	r0, #1
 8003104:	f001 fcc8 	bl	8004a98 <LOGGER_SendFormatted>
  LOG_INFO("System Clock: %lu MHz", SystemCoreClock / 1000000);
 8003108:	4bc5      	ldr	r3, [pc, #788]	@ (8003420 <StartDefaultTask+0x340>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4ac5      	ldr	r2, [pc, #788]	@ (8003424 <StartDefaultTask+0x344>)
 800310e:	fba2 2303 	umull	r2, r3, r2, r3
 8003112:	0c9b      	lsrs	r3, r3, #18
 8003114:	461a      	mov	r2, r3
 8003116:	49c4      	ldr	r1, [pc, #784]	@ (8003428 <StartDefaultTask+0x348>)
 8003118:	2001      	movs	r0, #1
 800311a:	f001 fcbd 	bl	8004a98 <LOGGER_SendFormatted>
  LOG_INFO("UART6 Configuration: 115200 baud, 8N1");
 800311e:	49c3      	ldr	r1, [pc, #780]	@ (800342c <StartDefaultTask+0x34c>)
 8003120:	2001      	movs	r0, #1
 8003122:	f001 fcb9 	bl	8004a98 <LOGGER_SendFormatted>
  LOG_INFO("📌 CRITICAL: For loopback test, connect PC6(TX) to PC7(RX) with a wire!");
 8003126:	49c2      	ldr	r1, [pc, #776]	@ (8003430 <StartDefaultTask+0x350>)
 8003128:	2001      	movs	r0, #1
 800312a:	f001 fcb5 	bl	8004a98 <LOGGER_SendFormatted>
  LOG_INFO("📌 UART6 Pins: PC6(TX) = Arduino D1, PC7(RX) = Arduino D0");
 800312e:	49c1      	ldr	r1, [pc, #772]	@ (8003434 <StartDefaultTask+0x354>)
 8003130:	2001      	movs	r0, #1
 8003132:	f001 fcb1 	bl	8004a98 <LOGGER_SendFormatted>
  
  // SD 카드 기본 기능 테스트 (Default Task에서 수행)
  LOG_INFO("📤 [TX_TASK] Starting SD card basic functionality test...");
 8003136:	49c0      	ldr	r1, [pc, #768]	@ (8003438 <StartDefaultTask+0x358>)
 8003138:	2001      	movs	r0, #1
 800313a:	f001 fcad 	bl	8004a98 <LOGGER_SendFormatted>
  
  // SD 초기화 시도
  LOG_INFO("📤 [TX_TASK] Attempting SD card initialization...");
 800313e:	49bf      	ldr	r1, [pc, #764]	@ (800343c <StartDefaultTask+0x35c>)
 8003140:	2001      	movs	r0, #1
 8003142:	f001 fca9 	bl	8004a98 <LOGGER_SendFormatted>
  g_sd_initialization_result = SDStorage_Init();
 8003146:	f7fe f807 	bl	8001158 <SDStorage_Init>
 800314a:	4603      	mov	r3, r0
 800314c:	4abc      	ldr	r2, [pc, #752]	@ (8003440 <StartDefaultTask+0x360>)
 800314e:	6013      	str	r3, [r2, #0]
  
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 8003150:	4bbb      	ldr	r3, [pc, #748]	@ (8003440 <StartDefaultTask+0x360>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d12a      	bne.n	80031ae <StartDefaultTask+0xce>
    LOG_INFO("✅ [TX_TASK] SD card initialization SUCCESS");
 8003158:	49ba      	ldr	r1, [pc, #744]	@ (8003444 <StartDefaultTask+0x364>)
 800315a:	2001      	movs	r0, #1
 800315c:	f001 fc9c 	bl	8004a98 <LOGGER_SendFormatted>
    
    // 기본 쓰기 테스트
    LOG_INFO("📤 [TX_TASK] Testing SD card write operation...");
 8003160:	49b9      	ldr	r1, [pc, #740]	@ (8003448 <StartDefaultTask+0x368>)
 8003162:	2001      	movs	r0, #1
 8003164:	f001 fc98 	bl	8004a98 <LOGGER_SendFormatted>
    const char* test_message = "SD Card Test - Hello World from FreeRTOS!\n";
 8003168:	4bb8      	ldr	r3, [pc, #736]	@ (800344c <StartDefaultTask+0x36c>)
 800316a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    int write_result = SDStorage_WriteLog(test_message, strlen(test_message));
 800316e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8003172:	f7fd f857 	bl	8000224 <strlen>
 8003176:	4603      	mov	r3, r0
 8003178:	4619      	mov	r1, r3
 800317a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800317e:	f7fe fa07 	bl	8001590 <SDStorage_WriteLog>
 8003182:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
    
    if (write_result == SDSTORAGE_OK) {
 8003186:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800318a:	2b00      	cmp	r3, #0
 800318c:	d108      	bne.n	80031a0 <StartDefaultTask+0xc0>
      LOG_INFO("✅ [TX_TASK] SD card write operation SUCCESS");
 800318e:	49b0      	ldr	r1, [pc, #704]	@ (8003450 <StartDefaultTask+0x370>)
 8003190:	2001      	movs	r0, #1
 8003192:	f001 fc81 	bl	8004a98 <LOGGER_SendFormatted>
      LOG_INFO("🎉 [TX_TASK] SD card functionality confirmed - ready for long-term logging");
 8003196:	49af      	ldr	r1, [pc, #700]	@ (8003454 <StartDefaultTask+0x374>)
 8003198:	2001      	movs	r0, #1
 800319a:	f001 fc7d 	bl	8004a98 <LOGGER_SendFormatted>
 800319e:	e011      	b.n	80031c4 <StartDefaultTask+0xe4>
    } else {
      LOG_ERROR("❌ [TX_TASK] SD card write operation FAILED (code: %d)", write_result);
 80031a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80031a4:	49ac      	ldr	r1, [pc, #688]	@ (8003458 <StartDefaultTask+0x378>)
 80031a6:	2003      	movs	r0, #3
 80031a8:	f001 fc76 	bl	8004a98 <LOGGER_SendFormatted>
 80031ac:	e00a      	b.n	80031c4 <StartDefaultTask+0xe4>
    }
  } else {
    LOG_ERROR("❌ [TX_TASK] SD card initialization FAILED (code: %d)", g_sd_initialization_result);
 80031ae:	4ba4      	ldr	r3, [pc, #656]	@ (8003440 <StartDefaultTask+0x360>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	49a9      	ldr	r1, [pc, #676]	@ (800345c <StartDefaultTask+0x37c>)
 80031b6:	2003      	movs	r0, #3
 80031b8:	f001 fc6e 	bl	8004a98 <LOGGER_SendFormatted>
    LOG_INFO("📺 [TX_TASK] Continuing with terminal-only logging");
 80031bc:	49a8      	ldr	r1, [pc, #672]	@ (8003460 <StartDefaultTask+0x380>)
 80031be:	2001      	movs	r0, #1
 80031c0:	f001 fc6a 	bl	8004a98 <LOGGER_SendFormatted>
  }

  // SD 카드 테스트 완료 - 간단한 주기적 SD 로깅 테스트
  LOG_INFO("📤 [TX_TASK] Starting periodic SD logging test...");
 80031c4:	49a7      	ldr	r1, [pc, #668]	@ (8003464 <StartDefaultTask+0x384>)
 80031c6:	2001      	movs	r0, #1
 80031c8:	f001 fc66 	bl	8004a98 <LOGGER_SendFormatted>
  
  int test_counter = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  
  for(;;) {
    test_counter++;
 80031d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80031d6:	3301      	adds	r3, #1
 80031d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    
    if (g_sd_initialization_result == SDSTORAGE_OK) {
 80031dc:	4b98      	ldr	r3, [pc, #608]	@ (8003440 <StartDefaultTask+0x360>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d12d      	bne.n	8003240 <StartDefaultTask+0x160>
      // SD 카드에 주기적으로 로그 작성
      char test_log[128];
      snprintf(test_log, sizeof(test_log), 
 80031e4:	f001 ff96 	bl	8005114 <HAL_GetTick>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f107 0008 	add.w	r0, r7, #8
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80031f4:	4a9c      	ldr	r2, [pc, #624]	@ (8003468 <StartDefaultTask+0x388>)
 80031f6:	2180      	movs	r1, #128	@ 0x80
 80031f8:	f012 fd82 	bl	8015d00 <sniprintf>
               "Periodic test #%d - Time: %lu ms\n", 
               test_counter, HAL_GetTick());
      
      int write_result = SDStorage_WriteLog(test_log, strlen(test_log));
 80031fc:	f107 0308 	add.w	r3, r7, #8
 8003200:	4618      	mov	r0, r3
 8003202:	f7fd f80f 	bl	8000224 <strlen>
 8003206:	4602      	mov	r2, r0
 8003208:	f107 0308 	add.w	r3, r7, #8
 800320c:	4611      	mov	r1, r2
 800320e:	4618      	mov	r0, r3
 8003210:	f7fe f9be 	bl	8001590 <SDStorage_WriteLog>
 8003214:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
      if (write_result == SDSTORAGE_OK) {
 8003218:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d106      	bne.n	800322e <StartDefaultTask+0x14e>
        LOG_INFO("✅ [TX_TASK] Periodic SD write #%d SUCCESS", test_counter);
 8003220:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003224:	4991      	ldr	r1, [pc, #580]	@ (800346c <StartDefaultTask+0x38c>)
 8003226:	2001      	movs	r0, #1
 8003228:	f001 fc36 	bl	8004a98 <LOGGER_SendFormatted>
 800322c:	e00e      	b.n	800324c <StartDefaultTask+0x16c>
      } else {
        LOG_ERROR("❌ [TX_TASK] Periodic SD write #%d FAILED (code: %d)", 
 800322e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003232:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003236:	498e      	ldr	r1, [pc, #568]	@ (8003470 <StartDefaultTask+0x390>)
 8003238:	2003      	movs	r0, #3
 800323a:	f001 fc2d 	bl	8004a98 <LOGGER_SendFormatted>
 800323e:	e005      	b.n	800324c <StartDefaultTask+0x16c>
                  test_counter, write_result);
      }
    } else {
      LOG_INFO("📺 [TX_TASK] Terminal log #%d - SD not available", test_counter);
 8003240:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003244:	498b      	ldr	r1, [pc, #556]	@ (8003474 <StartDefaultTask+0x394>)
 8003246:	2001      	movs	r0, #1
 8003248:	f001 fc26 	bl	8004a98 <LOGGER_SendFormatted>
    }
    
    // 30초 간격으로 테스트
    osDelay(30000);
 800324c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8003250:	f010 fb22 	bl	8013898 <osDelay>
    
    // 10회 테스트 후 종료
    if (test_counter >= 10) {
 8003254:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003258:	2b09      	cmp	r3, #9
 800325a:	ddba      	ble.n	80031d2 <StartDefaultTask+0xf2>
      LOG_INFO("🎉 [TX_TASK] SD card testing completed (10 cycles)");
 800325c:	4986      	ldr	r1, [pc, #536]	@ (8003478 <StartDefaultTask+0x398>)
 800325e:	2001      	movs	r0, #1
 8003260:	f001 fc1a 	bl	8004a98 <LOGGER_SendFormatted>
      break;
 8003264:	bf00      	nop
    }
  }
  
  LOG_INFO("📤 [TX_TASK] Starting LoRa initialization and JOIN...");
 8003266:	4985      	ldr	r1, [pc, #532]	@ (800347c <StartDefaultTask+0x39c>)
 8003268:	2001      	movs	r0, #1
 800326a:	f001 fc15 	bl	8004a98 <LOGGER_SendFormatted>
  LOG_INFO("📤 [TX_TASK] Waiting for LoRa module boot-up (5 seconds - optimized for long-term test)...");
 800326e:	4984      	ldr	r1, [pc, #528]	@ (8003480 <StartDefaultTask+0x3a0>)
 8003270:	2001      	movs	r0, #1
 8003272:	f001 fc11 	bl	8004a98 <LOGGER_SendFormatted>
  osDelay(5000); // 5초 대기 (장기 테스트를 위해 단축)
 8003276:	f241 3088 	movw	r0, #5000	@ 0x1388
 800327a:	f010 fb0d 	bl	8013898 <osDelay>
  
  // LoraStarter 컨텍스트 초기화 (TDD 검증된 기본 설정 사용)
  LoraStarterContext lora_ctx;
  LoraStarter_InitWithDefaults(&lora_ctx, "TEST");
 800327e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8003282:	4980      	ldr	r1, [pc, #512]	@ (8003484 <StartDefaultTask+0x3a4>)
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd fa87 	bl	8000798 <LoraStarter_InitWithDefaults>
  
  LOG_INFO("=== LoRa Initialization ===");
 800328a:	497f      	ldr	r1, [pc, #508]	@ (8003488 <StartDefaultTask+0x3a8>)
 800328c:	2001      	movs	r0, #1
 800328e:	f001 fc03 	bl	8004a98 <LOGGER_SendFormatted>
  LOG_INFO("📤 Commands: %d, Message: %s, Max retries: %d", 
 8003292:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003296:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800329a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	460b      	mov	r3, r1
 80032a2:	497a      	ldr	r1, [pc, #488]	@ (800348c <StartDefaultTask+0x3ac>)
 80032a4:	2001      	movs	r0, #1
 80032a6:	f001 fbf7 	bl	8004a98 <LOGGER_SendFormatted>
           lora_ctx.num_commands, lora_ctx.send_message, lora_ctx.max_retry_count);
           
  // SD 테스트 건너뛰기 - 장기 테스트를 위한 블로킹 방지
  LOG_INFO("📤 [TX_TASK] SD card tests bypassed for long-term stability");
 80032aa:	4979      	ldr	r1, [pc, #484]	@ (8003490 <StartDefaultTask+0x3b0>)
 80032ac:	2001      	movs	r0, #1
 80032ae:	f001 fbf3 	bl	8004a98 <LOGGER_SendFormatted>
      LOG_INFO("🗂️ LoRa logs location: lora_logs/ directory on SD card");
    } else {
      LOG_WARN("⚠️ SD logging setup failed (code: %d) - using terminal only", network_result);
    }
  } else {
    LOG_INFO("📺 LoRa logs will be displayed on terminal only (SD not available)");
 80032b2:	4978      	ldr	r1, [pc, #480]	@ (8003494 <StartDefaultTask+0x3b4>)
 80032b4:	2001      	movs	r0, #1
 80032b6:	f001 fbef 	bl	8004a98 <LOGGER_SendFormatted>
  }
  
  // LoRa 시작 전: 로깅 모드 전환 (터미널 → SD 전용)
  LOG_INFO("🔄 Switching to SD-only logging for LoRa operations...");
 80032ba:	4977      	ldr	r1, [pc, #476]	@ (8003498 <StartDefaultTask+0x3b8>)
 80032bc:	2001      	movs	r0, #1
 80032be:	f001 fbeb 	bl	8004a98 <LOGGER_SendFormatted>
  LOG_INFO("🎯 Only WARN/ERROR level logs will be saved to SD card");
 80032c2:	4976      	ldr	r1, [pc, #472]	@ (800349c <StartDefaultTask+0x3bc>)
 80032c4:	2001      	movs	r0, #1
 80032c6:	f001 fbe7 	bl	8004a98 <LOGGER_SendFormatted>
  
  // SD 태스크 상태에 따라 로깅 모드 동적 결정 (나중에 SD 준비되면 자동 전환)
  if (g_sd_logging_active) {
 80032ca:	4b75      	ldr	r3, [pc, #468]	@ (80034a0 <StartDefaultTask+0x3c0>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <StartDefaultTask+0x208>
    LOGGER_SetMode(LOGGER_MODE_DUAL);
 80032d2:	2002      	movs	r0, #2
 80032d4:	f001 fbbc 	bl	8004a50 <LOGGER_SetMode>
    LOGGER_SetFilterLevel(LOG_LEVEL_WARN);  // SD에는 WARN 이상만 저장
 80032d8:	2002      	movs	r0, #2
 80032da:	f001 fba9 	bl	8004a30 <LOGGER_SetFilterLevel>
    LOG_WARN("✅ Logger switched to DUAL mode (Terminal + SD async)");
 80032de:	4971      	ldr	r1, [pc, #452]	@ (80034a4 <StartDefaultTask+0x3c4>)
 80032e0:	2002      	movs	r0, #2
 80032e2:	f001 fbd9 	bl	8004a98 <LOGGER_SendFormatted>
 80032e6:	e009      	b.n	80032fc <StartDefaultTask+0x21c>
  } else {
    LOGGER_SetMode(LOGGER_MODE_TERMINAL_ONLY);
 80032e8:	2000      	movs	r0, #0
 80032ea:	f001 fbb1 	bl	8004a50 <LOGGER_SetMode>
    LOGGER_SetFilterLevel(LOG_LEVEL_INFO);
 80032ee:	2001      	movs	r0, #1
 80032f0:	f001 fb9e 	bl	8004a30 <LOGGER_SetFilterLevel>
    LOG_INFO("📺 Logger starting in terminal-only mode (SD init in progress)");
 80032f4:	496c      	ldr	r1, [pc, #432]	@ (80034a8 <StartDefaultTask+0x3c8>)
 80032f6:	2001      	movs	r0, #1
 80032f8:	f001 fbce 	bl	8004a98 <LOGGER_SendFormatted>
  
  // LoRa 프로세스 루프 (초기화 → JOIN → 주기적 전송)
  for(;;)
  {
    // 수신된 응답이 있으면 LoraStarter에 전달
    const char* rx_data = NULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (lora_new_response) {
 8003302:	4b6a      	ldr	r3, [pc, #424]	@ (80034ac <StartDefaultTask+0x3cc>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00b      	beq.n	8003324 <StartDefaultTask+0x244>
      rx_data = lora_rx_response;
 800330c:	4b68      	ldr	r3, [pc, #416]	@ (80034b0 <StartDefaultTask+0x3d0>)
 800330e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      lora_new_response = false; // 플래그 클리어
 8003312:	4b66      	ldr	r3, [pc, #408]	@ (80034ac <StartDefaultTask+0x3cc>)
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
      LOG_DEBUG("[TX_TASK] Processing LoRa response: %.20s...", rx_data);
 8003318:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800331c:	4965      	ldr	r1, [pc, #404]	@ (80034b4 <StartDefaultTask+0x3d4>)
 800331e:	2000      	movs	r0, #0
 8003320:	f001 fbba 	bl	8004a98 <LOGGER_SendFormatted>
    }
    
    // LoraStarter 프로세스 실행
    LoraStarter_Process(&lora_ctx, rx_data);
 8003324:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8003328:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 800332c:	4618      	mov	r0, r3
 800332e:	f7fd fa7b 	bl	8000828 <LoraStarter_Process>
    
    // 상태별 처리 간격 및 디버깅
    LOG_DEBUG("[TX_TASK] LoRa State: %d, cmd_index: %d/%d", 
 8003332:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8003336:	4619      	mov	r1, r3
 8003338:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800333c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	4613      	mov	r3, r2
 8003344:	460a      	mov	r2, r1
 8003346:	495c      	ldr	r1, [pc, #368]	@ (80034b8 <StartDefaultTask+0x3d8>)
 8003348:	2000      	movs	r0, #0
 800334a:	f001 fba5 	bl	8004a98 <LOGGER_SendFormatted>
              lora_ctx.state, lora_ctx.cmd_index, lora_ctx.num_commands);
    
    switch(lora_ctx.state) {
 800334e:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8003352:	2b0a      	cmp	r3, #10
 8003354:	f200 80c9 	bhi.w	80034ea <StartDefaultTask+0x40a>
 8003358:	a201      	add	r2, pc, #4	@ (adr r2, 8003360 <StartDefaultTask+0x280>)
 800335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335e:	bf00      	nop
 8003360:	0800338d 	.word	0x0800338d
 8003364:	08003397 	.word	0x08003397
 8003368:	080033b3 	.word	0x080033b3
 800336c:	080033cd 	.word	0x080033cd
 8003370:	080033d7 	.word	0x080033d7
 8003374:	080033cd 	.word	0x080033cd
 8003378:	080033d7 	.word	0x080033d7
 800337c:	080033e1 	.word	0x080033e1
 8003380:	080033f9 	.word	0x080033f9
 8003384:	08003403 	.word	0x08003403
 8003388:	08003403 	.word	0x08003403
      case LORA_STATE_INIT:
        osDelay(500); // 초기화 상태는 빠르게
 800338c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003390:	f010 fa82 	bl	8013898 <osDelay>
        break;
 8003394:	e0ae      	b.n	80034f4 <StartDefaultTask+0x414>
      case LORA_STATE_SEND_CMD:
        LOG_INFO("[TX_TASK] 📤 Sending command %d/%d", 
 8003396:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033a0:	4946      	ldr	r1, [pc, #280]	@ (80034bc <StartDefaultTask+0x3dc>)
 80033a2:	2001      	movs	r0, #1
 80033a4:	f001 fb78 	bl	8004a98 <LOGGER_SendFormatted>
                lora_ctx.cmd_index + 1, lora_ctx.num_commands);
        osDelay(1000); // 명령어 전송 후 1초 대기
 80033a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80033ac:	f010 fa74 	bl	8013898 <osDelay>
        break;
 80033b0:	e0a0      	b.n	80034f4 <StartDefaultTask+0x414>
      case LORA_STATE_WAIT_OK:
        LOG_DEBUG("[TX_TASK] ⏳ Waiting for OK response to command %d", 
 80033b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033b6:	3301      	adds	r3, #1
 80033b8:	461a      	mov	r2, r3
 80033ba:	4941      	ldr	r1, [pc, #260]	@ (80034c0 <StartDefaultTask+0x3e0>)
 80033bc:	2000      	movs	r0, #0
 80033be:	f001 fb6b 	bl	8004a98 <LOGGER_SendFormatted>
                 lora_ctx.cmd_index + 1);
        osDelay(2000); // OK 응답 대기 중 2초 간격
 80033c2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80033c6:	f010 fa67 	bl	8013898 <osDelay>
        break;
 80033ca:	e093      	b.n	80034f4 <StartDefaultTask+0x414>
      case LORA_STATE_SEND_JOIN:
      case LORA_STATE_SEND_PERIODIC:
        osDelay(2000); // JOIN/SEND 명령어 전송 후 2초 대기
 80033cc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80033d0:	f010 fa62 	bl	8013898 <osDelay>
        break;
 80033d4:	e08e      	b.n	80034f4 <StartDefaultTask+0x414>
      case LORA_STATE_WAIT_JOIN_OK:
      case LORA_STATE_WAIT_SEND_RESPONSE:
        osDelay(3000); // JOIN/SEND 응답 대기 중 3초 간격
 80033d6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80033da:	f010 fa5d 	bl	8013898 <osDelay>
        break;
 80033de:	e089      	b.n	80034f4 <StartDefaultTask+0x414>
      case LORA_STATE_WAIT_SEND_INTERVAL:
        LOG_DEBUG("[TX_TASK] ⏳ Waiting for send interval (%u ms)", lora_ctx.send_interval_ms);
 80033e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033e4:	461a      	mov	r2, r3
 80033e6:	4937      	ldr	r1, [pc, #220]	@ (80034c4 <StartDefaultTask+0x3e4>)
 80033e8:	2000      	movs	r0, #0
 80033ea:	f001 fb55 	bl	8004a98 <LOGGER_SendFormatted>
        osDelay(5000); // 주기적 전송 대기 중 5초 간격으로 체크
 80033ee:	f241 3088 	movw	r0, #5000	@ 0x1388
 80033f2:	f010 fa51 	bl	8013898 <osDelay>
        break;
 80033f6:	e07d      	b.n	80034f4 <StartDefaultTask+0x414>
      case LORA_STATE_JOIN_RETRY:
        osDelay(5000); // 재시도 대기 5초
 80033f8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80033fc:	f010 fa4c 	bl	8013898 <osDelay>
        break;
 8003400:	e078      	b.n	80034f4 <StartDefaultTask+0x414>
      case LORA_STATE_DONE:
      case LORA_STATE_ERROR:
        LOG_INFO("📤 [TX_TASK] LoRa process completed with state: %s", 
 8003402:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8003406:	2b09      	cmp	r3, #9
 8003408:	d160      	bne.n	80034cc <StartDefaultTask+0x3ec>
 800340a:	4b2f      	ldr	r3, [pc, #188]	@ (80034c8 <StartDefaultTask+0x3e8>)
 800340c:	e05f      	b.n	80034ce <StartDefaultTask+0x3ee>
 800340e:	bf00      	nop
 8003410:	08018340 	.word	0x08018340
 8003414:	0801838c 	.word	0x0801838c
 8003418:	080183cc 	.word	0x080183cc
 800341c:	08018414 	.word	0x08018414
 8003420:	2000001c 	.word	0x2000001c
 8003424:	431bde83 	.word	0x431bde83
 8003428:	08018440 	.word	0x08018440
 800342c:	08018458 	.word	0x08018458
 8003430:	08018480 	.word	0x08018480
 8003434:	080184cc 	.word	0x080184cc
 8003438:	08018508 	.word	0x08018508
 800343c:	08018544 	.word	0x08018544
 8003440:	20000018 	.word	0x20000018
 8003444:	08018578 	.word	0x08018578
 8003448:	080185a8 	.word	0x080185a8
 800344c:	080185dc 	.word	0x080185dc
 8003450:	08018608 	.word	0x08018608
 8003454:	08018638 	.word	0x08018638
 8003458:	08018688 	.word	0x08018688
 800345c:	080186c0 	.word	0x080186c0
 8003460:	080186f8 	.word	0x080186f8
 8003464:	08018730 	.word	0x08018730
 8003468:	08018764 	.word	0x08018764
 800346c:	08018788 	.word	0x08018788
 8003470:	080187b4 	.word	0x080187b4
 8003474:	080187ec 	.word	0x080187ec
 8003478:	08018820 	.word	0x08018820
 800347c:	08018858 	.word	0x08018858
 8003480:	08018890 	.word	0x08018890
 8003484:	080188f0 	.word	0x080188f0
 8003488:	080188f8 	.word	0x080188f8
 800348c:	08018914 	.word	0x08018914
 8003490:	08018944 	.word	0x08018944
 8003494:	08018984 	.word	0x08018984
 8003498:	080189cc 	.word	0x080189cc
 800349c:	08018a08 	.word	0x08018a08
 80034a0:	200012a8 	.word	0x200012a8
 80034a4:	08018a44 	.word	0x08018a44
 80034a8:	08018a7c 	.word	0x08018a7c
 80034ac:	200014ac 	.word	0x200014ac
 80034b0:	200012ac 	.word	0x200012ac
 80034b4:	08018ac0 	.word	0x08018ac0
 80034b8:	08018af0 	.word	0x08018af0
 80034bc:	08018b1c 	.word	0x08018b1c
 80034c0:	08018b44 	.word	0x08018b44
 80034c4:	08018b78 	.word	0x08018b78
 80034c8:	08018ba8 	.word	0x08018ba8
 80034cc:	4b13      	ldr	r3, [pc, #76]	@ (800351c <StartDefaultTask+0x43c>)
 80034ce:	461a      	mov	r2, r3
 80034d0:	4913      	ldr	r1, [pc, #76]	@ (8003520 <StartDefaultTask+0x440>)
 80034d2:	2001      	movs	r0, #1
 80034d4:	f001 fae0 	bl	8004a98 <LOGGER_SendFormatted>
                lora_ctx.state == LORA_STATE_DONE ? "DONE" : "ERROR");
        goto idle_loop;
 80034d8:	bf00      	nop
    }
  }

idle_loop:
  /* Infinite idle loop */
  LOG_INFO("📤 [TX_TASK] Entering idle mode...");
 80034da:	4912      	ldr	r1, [pc, #72]	@ (8003524 <StartDefaultTask+0x444>)
 80034dc:	2001      	movs	r0, #1
 80034de:	f001 fadb 	bl	8004a98 <LOGGER_SendFormatted>
  uint32_t idle_counter = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034e8:	e005      	b.n	80034f6 <StartDefaultTask+0x416>
        osDelay(1000);
 80034ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80034ee:	f010 f9d3 	bl	8013898 <osDelay>
        break;
 80034f2:	bf00      	nop
  {
 80034f4:	e702      	b.n	80032fc <StartDefaultTask+0x21c>
  
  for(;;)
  {
    // 30초마다 idle 상태 표시
    osDelay(30000);
 80034f6:	f247 5030 	movw	r0, #30000	@ 0x7530
 80034fa:	f010 f9cd 	bl	8013898 <osDelay>
    idle_counter++;
 80034fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003502:	3301      	adds	r3, #1
 8003504:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    LOG_INFO("📤 [TX_TASK] Idle mode: %lu minutes elapsed", idle_counter / 2);
 8003508:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800350c:	085b      	lsrs	r3, r3, #1
 800350e:	461a      	mov	r2, r3
 8003510:	4905      	ldr	r1, [pc, #20]	@ (8003528 <StartDefaultTask+0x448>)
 8003512:	2001      	movs	r0, #1
 8003514:	f001 fac0 	bl	8004a98 <LOGGER_SendFormatted>
    osDelay(30000);
 8003518:	bf00      	nop
 800351a:	e7ec      	b.n	80034f6 <StartDefaultTask+0x416>
 800351c:	08018bb0 	.word	0x08018bb0
 8003520:	08018bb8 	.word	0x08018bb8
 8003524:	08018bf0 	.word	0x08018bf0
 8003528:	08018c18 	.word	0x08018c18

0800352c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a04      	ldr	r2, [pc, #16]	@ (800354c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d101      	bne.n	8003542 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800353e:	f001 fdd5 	bl	80050ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40001000 	.word	0x40001000

08003550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003554:	b672      	cpsid	i
}
 8003556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003558:	bf00      	nop
 800355a:	e7fd      	b.n	8003558 <Error_Handler+0x8>

0800355c <MX_DMA_Init>:
  * @brief DMA Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003562:	4b10      	ldr	r3, [pc, #64]	@ (80035a4 <MX_DMA_Init+0x48>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003566:	4a0f      	ldr	r2, [pc, #60]	@ (80035a4 <MX_DMA_Init+0x48>)
 8003568:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800356c:	6313      	str	r3, [r2, #48]	@ 0x30
 800356e:	4b0d      	ldr	r3, [pc, #52]	@ (80035a4 <MX_DMA_Init+0x48>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003572:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003576:	607b      	str	r3, [r7, #4]
 8003578:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration - USART6_RX */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800357a:	2200      	movs	r2, #0
 800357c:	2105      	movs	r1, #5
 800357e:	2039      	movs	r0, #57	@ 0x39
 8003580:	f002 f948 	bl	8005814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003584:	2039      	movs	r0, #57	@ 0x39
 8003586:	f002 f961 	bl	800584c <HAL_NVIC_EnableIRQ>
  
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800358a:	2200      	movs	r2, #0
 800358c:	2105      	movs	r1, #5
 800358e:	2047      	movs	r0, #71	@ 0x47
 8003590:	f002 f940 	bl	8005814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003594:	2047      	movs	r0, #71	@ 0x47
 8003596:	f002 f959 	bl	800584c <HAL_NVIC_EnableIRQ>
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800

080035a8 <MX_USART6_DMA_Init>:
  * @brief DMA2 Stream1 DMA configuration for USART6 RX
  * @param None
  * @retval None
  */
void MX_USART6_DMA_Init(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
  // DMA 이미 초기화되었는지 체크
  if (hdma_usart6_rx.Instance != NULL) {
 80035ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003628 <MX_USART6_DMA_Init+0x80>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d133      	bne.n	800361e <MX_USART6_DMA_Init+0x76>
    return; // 이미 초기화됨
  }
  
  /* Configure DMA for USART6 RX */
  hdma_usart6_rx.Instance = DMA2_Stream1;
 80035b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003628 <MX_USART6_DMA_Init+0x80>)
 80035b8:	4a1c      	ldr	r2, [pc, #112]	@ (800362c <MX_USART6_DMA_Init+0x84>)
 80035ba:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80035bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003628 <MX_USART6_DMA_Init+0x80>)
 80035be:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80035c2:	605a      	str	r2, [r3, #4]
  hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035c4:	4b18      	ldr	r3, [pc, #96]	@ (8003628 <MX_USART6_DMA_Init+0x80>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	609a      	str	r2, [r3, #8]
  hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ca:	4b17      	ldr	r3, [pc, #92]	@ (8003628 <MX_USART6_DMA_Init+0x80>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	60da      	str	r2, [r3, #12]
  hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035d0:	4b15      	ldr	r3, [pc, #84]	@ (8003628 <MX_USART6_DMA_Init+0x80>)
 80035d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035d6:	611a      	str	r2, [r3, #16]
  hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035d8:	4b13      	ldr	r3, [pc, #76]	@ (8003628 <MX_USART6_DMA_Init+0x80>)
 80035da:	2200      	movs	r2, #0
 80035dc:	615a      	str	r2, [r3, #20]
  hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035de:	4b12      	ldr	r3, [pc, #72]	@ (8003628 <MX_USART6_DMA_Init+0x80>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	619a      	str	r2, [r3, #24]
  hdma_usart6_rx.Init.Mode = DMA_NORMAL;    // 일반 모드로 변경
 80035e4:	4b10      	ldr	r3, [pc, #64]	@ (8003628 <MX_USART6_DMA_Init+0x80>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	61da      	str	r2, [r3, #28]
  hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80035ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003628 <MX_USART6_DMA_Init+0x80>)
 80035ec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80035f0:	621a      	str	r2, [r3, #32]
  hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003628 <MX_USART6_DMA_Init+0x80>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	625a      	str	r2, [r3, #36]	@ 0x24
  
  HAL_StatusTypeDef dma_result = HAL_DMA_Init(&hdma_usart6_rx);
 80035f8:	480b      	ldr	r0, [pc, #44]	@ (8003628 <MX_USART6_DMA_Init+0x80>)
 80035fa:	f002 faa1 	bl	8005b40 <HAL_DMA_Init>
 80035fe:	4603      	mov	r3, r0
 8003600:	71fb      	strb	r3, [r7, #7]
  if (dma_result != HAL_OK)
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <MX_USART6_DMA_Init+0x68>
  {
    // 에러 처리하되 Error_Handler() 호출하지 않음 (시스템 중단 방지)
    hdma_usart6_rx.Instance = NULL; // 실패 표시
 8003608:	4b07      	ldr	r3, [pc, #28]	@ (8003628 <MX_USART6_DMA_Init+0x80>)
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
    return;
 800360e:	e007      	b.n	8003620 <MX_USART6_DMA_Init+0x78>
  }

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8003610:	4b07      	ldr	r3, [pc, #28]	@ (8003630 <MX_USART6_DMA_Init+0x88>)
 8003612:	4a05      	ldr	r2, [pc, #20]	@ (8003628 <MX_USART6_DMA_Init+0x80>)
 8003614:	675a      	str	r2, [r3, #116]	@ 0x74
 8003616:	4b04      	ldr	r3, [pc, #16]	@ (8003628 <MX_USART6_DMA_Init+0x80>)
 8003618:	4a05      	ldr	r2, [pc, #20]	@ (8003630 <MX_USART6_DMA_Init+0x88>)
 800361a:	639a      	str	r2, [r3, #56]	@ 0x38
 800361c:	e000      	b.n	8003620 <MX_USART6_DMA_Init+0x78>
    return; // 이미 초기화됨
 800361e:	bf00      	nop
}
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	200014b0 	.word	0x200014b0
 800362c:	40026428 	.word	0x40026428
 8003630:	200011e4 	.word	0x200011e4

08003634 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800363a:	4b11      	ldr	r3, [pc, #68]	@ (8003680 <HAL_MspInit+0x4c>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	4a10      	ldr	r2, [pc, #64]	@ (8003680 <HAL_MspInit+0x4c>)
 8003640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003644:	6413      	str	r3, [r2, #64]	@ 0x40
 8003646:	4b0e      	ldr	r3, [pc, #56]	@ (8003680 <HAL_MspInit+0x4c>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800364e:	607b      	str	r3, [r7, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003652:	4b0b      	ldr	r3, [pc, #44]	@ (8003680 <HAL_MspInit+0x4c>)
 8003654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003656:	4a0a      	ldr	r2, [pc, #40]	@ (8003680 <HAL_MspInit+0x4c>)
 8003658:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800365c:	6453      	str	r3, [r2, #68]	@ 0x44
 800365e:	4b08      	ldr	r3, [pc, #32]	@ (8003680 <HAL_MspInit+0x4c>)
 8003660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800366a:	2200      	movs	r2, #0
 800366c:	210f      	movs	r1, #15
 800366e:	f06f 0001 	mvn.w	r0, #1
 8003672:	f002 f8cf 	bl	8005814 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40023800 	.word	0x40023800

08003684 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08a      	sub	sp, #40	@ 0x28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800368c:	f107 0314 	add.w	r3, r7, #20
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	60da      	str	r2, [r3, #12]
 800369a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a21      	ldr	r2, [pc, #132]	@ (8003728 <HAL_ADC_MspInit+0xa4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d13c      	bne.n	8003720 <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80036a6:	4b21      	ldr	r3, [pc, #132]	@ (800372c <HAL_ADC_MspInit+0xa8>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036aa:	4a20      	ldr	r2, [pc, #128]	@ (800372c <HAL_ADC_MspInit+0xa8>)
 80036ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80036b2:	4b1e      	ldr	r3, [pc, #120]	@ (800372c <HAL_ADC_MspInit+0xa8>)
 80036b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80036be:	4b1b      	ldr	r3, [pc, #108]	@ (800372c <HAL_ADC_MspInit+0xa8>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c2:	4a1a      	ldr	r2, [pc, #104]	@ (800372c <HAL_ADC_MspInit+0xa8>)
 80036c4:	f043 0320 	orr.w	r3, r3, #32
 80036c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ca:	4b18      	ldr	r3, [pc, #96]	@ (800372c <HAL_ADC_MspInit+0xa8>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d6:	4b15      	ldr	r3, [pc, #84]	@ (800372c <HAL_ADC_MspInit+0xa8>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036da:	4a14      	ldr	r2, [pc, #80]	@ (800372c <HAL_ADC_MspInit+0xa8>)
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036e2:	4b12      	ldr	r3, [pc, #72]	@ (800372c <HAL_ADC_MspInit+0xa8>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80036ee:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80036f2:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036f4:	2303      	movs	r3, #3
 80036f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036fc:	f107 0314 	add.w	r3, r7, #20
 8003700:	4619      	mov	r1, r3
 8003702:	480b      	ldr	r0, [pc, #44]	@ (8003730 <HAL_ADC_MspInit+0xac>)
 8003704:	f003 fb6c 	bl	8006de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8003708:	2301      	movs	r3, #1
 800370a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800370c:	2303      	movs	r3, #3
 800370e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003710:	2300      	movs	r3, #0
 8003712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8003714:	f107 0314 	add.w	r3, r7, #20
 8003718:	4619      	mov	r1, r3
 800371a:	4806      	ldr	r0, [pc, #24]	@ (8003734 <HAL_ADC_MspInit+0xb0>)
 800371c:	f003 fb60 	bl	8006de0 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 8003720:	bf00      	nop
 8003722:	3728      	adds	r7, #40	@ 0x28
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40012200 	.word	0x40012200
 800372c:	40023800 	.word	0x40023800
 8003730:	40021400 	.word	0x40021400
 8003734:	40020000 	.word	0x40020000

08003738 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a0a      	ldr	r2, [pc, #40]	@ (8003770 <HAL_CRC_MspInit+0x38>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d10b      	bne.n	8003762 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800374a:	4b0a      	ldr	r3, [pc, #40]	@ (8003774 <HAL_CRC_MspInit+0x3c>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374e:	4a09      	ldr	r2, [pc, #36]	@ (8003774 <HAL_CRC_MspInit+0x3c>)
 8003750:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003754:	6313      	str	r3, [r2, #48]	@ 0x30
 8003756:	4b07      	ldr	r3, [pc, #28]	@ (8003774 <HAL_CRC_MspInit+0x3c>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40023000 	.word	0x40023000
 8003774:	40023800 	.word	0x40023800

08003778 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08e      	sub	sp, #56	@ 0x38
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	60da      	str	r2, [r3, #12]
 800378e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a50      	ldr	r2, [pc, #320]	@ (80038d8 <HAL_DCMI_MspInit+0x160>)
 8003796:	4293      	cmp	r3, r2
 8003798:	f040 809a 	bne.w	80038d0 <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800379c:	4b4f      	ldr	r3, [pc, #316]	@ (80038dc <HAL_DCMI_MspInit+0x164>)
 800379e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a0:	4a4e      	ldr	r2, [pc, #312]	@ (80038dc <HAL_DCMI_MspInit+0x164>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6353      	str	r3, [r2, #52]	@ 0x34
 80037a8:	4b4c      	ldr	r3, [pc, #304]	@ (80038dc <HAL_DCMI_MspInit+0x164>)
 80037aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	623b      	str	r3, [r7, #32]
 80037b2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80037b4:	4b49      	ldr	r3, [pc, #292]	@ (80038dc <HAL_DCMI_MspInit+0x164>)
 80037b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b8:	4a48      	ldr	r2, [pc, #288]	@ (80038dc <HAL_DCMI_MspInit+0x164>)
 80037ba:	f043 0310 	orr.w	r3, r3, #16
 80037be:	6313      	str	r3, [r2, #48]	@ 0x30
 80037c0:	4b46      	ldr	r3, [pc, #280]	@ (80038dc <HAL_DCMI_MspInit+0x164>)
 80037c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037cc:	4b43      	ldr	r3, [pc, #268]	@ (80038dc <HAL_DCMI_MspInit+0x164>)
 80037ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d0:	4a42      	ldr	r2, [pc, #264]	@ (80038dc <HAL_DCMI_MspInit+0x164>)
 80037d2:	f043 0308 	orr.w	r3, r3, #8
 80037d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80037d8:	4b40      	ldr	r3, [pc, #256]	@ (80038dc <HAL_DCMI_MspInit+0x164>)
 80037da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80037e4:	4b3d      	ldr	r3, [pc, #244]	@ (80038dc <HAL_DCMI_MspInit+0x164>)
 80037e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e8:	4a3c      	ldr	r2, [pc, #240]	@ (80038dc <HAL_DCMI_MspInit+0x164>)
 80037ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80037f0:	4b3a      	ldr	r3, [pc, #232]	@ (80038dc <HAL_DCMI_MspInit+0x164>)
 80037f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80037fc:	4b37      	ldr	r3, [pc, #220]	@ (80038dc <HAL_DCMI_MspInit+0x164>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003800:	4a36      	ldr	r2, [pc, #216]	@ (80038dc <HAL_DCMI_MspInit+0x164>)
 8003802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003806:	6313      	str	r3, [r2, #48]	@ 0x30
 8003808:	4b34      	ldr	r3, [pc, #208]	@ (80038dc <HAL_DCMI_MspInit+0x164>)
 800380a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003814:	4b31      	ldr	r3, [pc, #196]	@ (80038dc <HAL_DCMI_MspInit+0x164>)
 8003816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003818:	4a30      	ldr	r2, [pc, #192]	@ (80038dc <HAL_DCMI_MspInit+0x164>)
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003820:	4b2e      	ldr	r3, [pc, #184]	@ (80038dc <HAL_DCMI_MspInit+0x164>)
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800382c:	2360      	movs	r3, #96	@ 0x60
 800382e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003830:	2302      	movs	r3, #2
 8003832:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003834:	2300      	movs	r3, #0
 8003836:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003838:	2300      	movs	r3, #0
 800383a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800383c:	230d      	movs	r3, #13
 800383e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003840:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003844:	4619      	mov	r1, r3
 8003846:	4826      	ldr	r0, [pc, #152]	@ (80038e0 <HAL_DCMI_MspInit+0x168>)
 8003848:	f003 faca 	bl	8006de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800384c:	2308      	movs	r3, #8
 800384e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003850:	2302      	movs	r3, #2
 8003852:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003854:	2300      	movs	r3, #0
 8003856:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003858:	2300      	movs	r3, #0
 800385a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800385c:	230d      	movs	r3, #13
 800385e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8003860:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003864:	4619      	mov	r1, r3
 8003866:	481f      	ldr	r0, [pc, #124]	@ (80038e4 <HAL_DCMI_MspInit+0x16c>)
 8003868:	f003 faba 	bl	8006de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800386c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003870:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003872:	2302      	movs	r3, #2
 8003874:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003876:	2300      	movs	r3, #0
 8003878:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387a:	2300      	movs	r3, #0
 800387c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800387e:	230d      	movs	r3, #13
 8003880:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8003882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003886:	4619      	mov	r1, r3
 8003888:	4817      	ldr	r0, [pc, #92]	@ (80038e8 <HAL_DCMI_MspInit+0x170>)
 800388a:	f003 faa9 	bl	8006de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800388e:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8003892:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003894:	2302      	movs	r3, #2
 8003896:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003898:	2300      	movs	r3, #0
 800389a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800389c:	2300      	movs	r3, #0
 800389e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80038a0:	230d      	movs	r3, #13
 80038a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80038a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038a8:	4619      	mov	r1, r3
 80038aa:	4810      	ldr	r0, [pc, #64]	@ (80038ec <HAL_DCMI_MspInit+0x174>)
 80038ac:	f003 fa98 	bl	8006de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80038b0:	2350      	movs	r3, #80	@ 0x50
 80038b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b4:	2302      	movs	r3, #2
 80038b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038bc:	2300      	movs	r3, #0
 80038be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80038c0:	230d      	movs	r3, #13
 80038c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038c8:	4619      	mov	r1, r3
 80038ca:	4809      	ldr	r0, [pc, #36]	@ (80038f0 <HAL_DCMI_MspInit+0x178>)
 80038cc:	f003 fa88 	bl	8006de0 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 80038d0:	bf00      	nop
 80038d2:	3738      	adds	r7, #56	@ 0x38
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	50050000 	.word	0x50050000
 80038dc:	40023800 	.word	0x40023800
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40020c00 	.word	0x40020c00
 80038e8:	40021800 	.word	0x40021800
 80038ec:	40021c00 	.word	0x40021c00
 80038f0:	40020000 	.word	0x40020000

080038f4 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0d      	ldr	r2, [pc, #52]	@ (8003938 <HAL_DMA2D_MspInit+0x44>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d113      	bne.n	800392e <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003906:	4b0d      	ldr	r3, [pc, #52]	@ (800393c <HAL_DMA2D_MspInit+0x48>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390a:	4a0c      	ldr	r2, [pc, #48]	@ (800393c <HAL_DMA2D_MspInit+0x48>)
 800390c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003910:	6313      	str	r3, [r2, #48]	@ 0x30
 8003912:	4b0a      	ldr	r3, [pc, #40]	@ (800393c <HAL_DMA2D_MspInit+0x48>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003916:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800391e:	2200      	movs	r2, #0
 8003920:	2105      	movs	r1, #5
 8003922:	205a      	movs	r0, #90	@ 0x5a
 8003924:	f001 ff76 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003928:	205a      	movs	r0, #90	@ 0x5a
 800392a:	f001 ff8f 	bl	800584c <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800392e:	bf00      	nop
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	4002b000 	.word	0x4002b000
 800393c:	40023800 	.word	0x40023800

08003940 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08e      	sub	sp, #56	@ 0x38
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003948:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	60da      	str	r2, [r3, #12]
 8003956:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a3f      	ldr	r2, [pc, #252]	@ (8003a5c <HAL_ETH_MspInit+0x11c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d178      	bne.n	8003a54 <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003962:	4b3f      	ldr	r3, [pc, #252]	@ (8003a60 <HAL_ETH_MspInit+0x120>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003966:	4a3e      	ldr	r2, [pc, #248]	@ (8003a60 <HAL_ETH_MspInit+0x120>)
 8003968:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800396c:	6313      	str	r3, [r2, #48]	@ 0x30
 800396e:	4b3c      	ldr	r3, [pc, #240]	@ (8003a60 <HAL_ETH_MspInit+0x120>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003976:	623b      	str	r3, [r7, #32]
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	4b39      	ldr	r3, [pc, #228]	@ (8003a60 <HAL_ETH_MspInit+0x120>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397e:	4a38      	ldr	r2, [pc, #224]	@ (8003a60 <HAL_ETH_MspInit+0x120>)
 8003980:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003984:	6313      	str	r3, [r2, #48]	@ 0x30
 8003986:	4b36      	ldr	r3, [pc, #216]	@ (8003a60 <HAL_ETH_MspInit+0x120>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800398e:	61fb      	str	r3, [r7, #28]
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	4b33      	ldr	r3, [pc, #204]	@ (8003a60 <HAL_ETH_MspInit+0x120>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	4a32      	ldr	r2, [pc, #200]	@ (8003a60 <HAL_ETH_MspInit+0x120>)
 8003998:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800399c:	6313      	str	r3, [r2, #48]	@ 0x30
 800399e:	4b30      	ldr	r3, [pc, #192]	@ (8003a60 <HAL_ETH_MspInit+0x120>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039a6:	61bb      	str	r3, [r7, #24]
 80039a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80039aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003a60 <HAL_ETH_MspInit+0x120>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ae:	4a2c      	ldr	r2, [pc, #176]	@ (8003a60 <HAL_ETH_MspInit+0x120>)
 80039b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80039b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a60 <HAL_ETH_MspInit+0x120>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039c2:	4b27      	ldr	r3, [pc, #156]	@ (8003a60 <HAL_ETH_MspInit+0x120>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c6:	4a26      	ldr	r2, [pc, #152]	@ (8003a60 <HAL_ETH_MspInit+0x120>)
 80039c8:	f043 0304 	orr.w	r3, r3, #4
 80039cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80039ce:	4b24      	ldr	r3, [pc, #144]	@ (8003a60 <HAL_ETH_MspInit+0x120>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039da:	4b21      	ldr	r3, [pc, #132]	@ (8003a60 <HAL_ETH_MspInit+0x120>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039de:	4a20      	ldr	r2, [pc, #128]	@ (8003a60 <HAL_ETH_MspInit+0x120>)
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80039e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003a60 <HAL_ETH_MspInit+0x120>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80039f2:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80039f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f8:	2302      	movs	r3, #2
 80039fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a00:	2303      	movs	r3, #3
 8003a02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a04:	230b      	movs	r3, #11
 8003a06:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4815      	ldr	r0, [pc, #84]	@ (8003a64 <HAL_ETH_MspInit+0x124>)
 8003a10:	f003 f9e6 	bl	8006de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003a14:	2332      	movs	r3, #50	@ 0x32
 8003a16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a20:	2303      	movs	r3, #3
 8003a22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a24:	230b      	movs	r3, #11
 8003a26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	480e      	ldr	r0, [pc, #56]	@ (8003a68 <HAL_ETH_MspInit+0x128>)
 8003a30:	f003 f9d6 	bl	8006de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003a34:	2386      	movs	r3, #134	@ 0x86
 8003a36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a40:	2303      	movs	r3, #3
 8003a42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a44:	230b      	movs	r3, #11
 8003a46:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4807      	ldr	r0, [pc, #28]	@ (8003a6c <HAL_ETH_MspInit+0x12c>)
 8003a50:	f003 f9c6 	bl	8006de0 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8003a54:	bf00      	nop
 8003a56:	3738      	adds	r7, #56	@ 0x38
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40028000 	.word	0x40028000
 8003a60:	40023800 	.word	0x40023800
 8003a64:	40021800 	.word	0x40021800
 8003a68:	40020800 	.word	0x40020800
 8003a6c:	40020000 	.word	0x40020000

08003a70 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b0ac      	sub	sp, #176	@ 0xb0
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a78:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	609a      	str	r2, [r3, #8]
 8003a84:	60da      	str	r2, [r3, #12]
 8003a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a88:	f107 0318 	add.w	r3, r7, #24
 8003a8c:	2284      	movs	r2, #132	@ 0x84
 8003a8e:	2100      	movs	r1, #0
 8003a90:	4618      	mov	r0, r3
 8003a92:	f012 f9c9 	bl	8015e28 <memset>
  if(hi2c->Instance==I2C1)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a44      	ldr	r2, [pc, #272]	@ (8003bac <HAL_I2C_MspInit+0x13c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d13d      	bne.n	8003b1c <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003aa0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003aa4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003aaa:	f107 0318 	add.w	r3, r7, #24
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f006 fb26 	bl	800a100 <HAL_RCCEx_PeriphCLKConfig>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003aba:	f7ff fd49 	bl	8003550 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003abe:	4b3c      	ldr	r3, [pc, #240]	@ (8003bb0 <HAL_I2C_MspInit+0x140>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac2:	4a3b      	ldr	r2, [pc, #236]	@ (8003bb0 <HAL_I2C_MspInit+0x140>)
 8003ac4:	f043 0302 	orr.w	r3, r3, #2
 8003ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aca:	4b39      	ldr	r3, [pc, #228]	@ (8003bb0 <HAL_I2C_MspInit+0x140>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003ad6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003ada:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ade:	2312      	movs	r3, #18
 8003ae0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003af0:	2304      	movs	r3, #4
 8003af2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003afa:	4619      	mov	r1, r3
 8003afc:	482d      	ldr	r0, [pc, #180]	@ (8003bb4 <HAL_I2C_MspInit+0x144>)
 8003afe:	f003 f96f 	bl	8006de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b02:	4b2b      	ldr	r3, [pc, #172]	@ (8003bb0 <HAL_I2C_MspInit+0x140>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	4a2a      	ldr	r2, [pc, #168]	@ (8003bb0 <HAL_I2C_MspInit+0x140>)
 8003b08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b0e:	4b28      	ldr	r3, [pc, #160]	@ (8003bb0 <HAL_I2C_MspInit+0x140>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003b1a:	e042      	b.n	8003ba2 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a25      	ldr	r2, [pc, #148]	@ (8003bb8 <HAL_I2C_MspInit+0x148>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d13d      	bne.n	8003ba2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003b26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b32:	f107 0318 	add.w	r3, r7, #24
 8003b36:	4618      	mov	r0, r3
 8003b38:	f006 fae2 	bl	800a100 <HAL_RCCEx_PeriphCLKConfig>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8003b42:	f7ff fd05 	bl	8003550 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b46:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb0 <HAL_I2C_MspInit+0x140>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4a:	4a19      	ldr	r2, [pc, #100]	@ (8003bb0 <HAL_I2C_MspInit+0x140>)
 8003b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b52:	4b17      	ldr	r3, [pc, #92]	@ (8003bb0 <HAL_I2C_MspInit+0x140>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003b5e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003b62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b66:	2312      	movs	r3, #18
 8003b68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b72:	2303      	movs	r3, #3
 8003b74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b78:	2304      	movs	r3, #4
 8003b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003b7e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003b82:	4619      	mov	r1, r3
 8003b84:	480d      	ldr	r0, [pc, #52]	@ (8003bbc <HAL_I2C_MspInit+0x14c>)
 8003b86:	f003 f92b 	bl	8006de0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003b8a:	4b09      	ldr	r3, [pc, #36]	@ (8003bb0 <HAL_I2C_MspInit+0x140>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	4a08      	ldr	r2, [pc, #32]	@ (8003bb0 <HAL_I2C_MspInit+0x140>)
 8003b90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b96:	4b06      	ldr	r3, [pc, #24]	@ (8003bb0 <HAL_I2C_MspInit+0x140>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
}
 8003ba2:	bf00      	nop
 8003ba4:	37b0      	adds	r7, #176	@ 0xb0
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40005400 	.word	0x40005400
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40020400 	.word	0x40020400
 8003bb8:	40005c00 	.word	0x40005c00
 8003bbc:	40021c00 	.word	0x40021c00

08003bc0 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08e      	sub	sp, #56	@ 0x38
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	60da      	str	r2, [r3, #12]
 8003bd6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a55      	ldr	r2, [pc, #340]	@ (8003d34 <HAL_LTDC_MspInit+0x174>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	f040 80a3 	bne.w	8003d2a <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003be4:	4b54      	ldr	r3, [pc, #336]	@ (8003d38 <HAL_LTDC_MspInit+0x178>)
 8003be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be8:	4a53      	ldr	r2, [pc, #332]	@ (8003d38 <HAL_LTDC_MspInit+0x178>)
 8003bea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003bee:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bf0:	4b51      	ldr	r3, [pc, #324]	@ (8003d38 <HAL_LTDC_MspInit+0x178>)
 8003bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003bf8:	623b      	str	r3, [r7, #32]
 8003bfa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003bfc:	4b4e      	ldr	r3, [pc, #312]	@ (8003d38 <HAL_LTDC_MspInit+0x178>)
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c00:	4a4d      	ldr	r2, [pc, #308]	@ (8003d38 <HAL_LTDC_MspInit+0x178>)
 8003c02:	f043 0310 	orr.w	r3, r3, #16
 8003c06:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c08:	4b4b      	ldr	r3, [pc, #300]	@ (8003d38 <HAL_LTDC_MspInit+0x178>)
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0c:	f003 0310 	and.w	r3, r3, #16
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003c14:	4b48      	ldr	r3, [pc, #288]	@ (8003d38 <HAL_LTDC_MspInit+0x178>)
 8003c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c18:	4a47      	ldr	r2, [pc, #284]	@ (8003d38 <HAL_LTDC_MspInit+0x178>)
 8003c1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c20:	4b45      	ldr	r3, [pc, #276]	@ (8003d38 <HAL_LTDC_MspInit+0x178>)
 8003c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c28:	61bb      	str	r3, [r7, #24]
 8003c2a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003c2c:	4b42      	ldr	r3, [pc, #264]	@ (8003d38 <HAL_LTDC_MspInit+0x178>)
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c30:	4a41      	ldr	r2, [pc, #260]	@ (8003d38 <HAL_LTDC_MspInit+0x178>)
 8003c32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c36:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c38:	4b3f      	ldr	r3, [pc, #252]	@ (8003d38 <HAL_LTDC_MspInit+0x178>)
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c44:	4b3c      	ldr	r3, [pc, #240]	@ (8003d38 <HAL_LTDC_MspInit+0x178>)
 8003c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c48:	4a3b      	ldr	r2, [pc, #236]	@ (8003d38 <HAL_LTDC_MspInit+0x178>)
 8003c4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c50:	4b39      	ldr	r3, [pc, #228]	@ (8003d38 <HAL_LTDC_MspInit+0x178>)
 8003c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003c5c:	4b36      	ldr	r3, [pc, #216]	@ (8003d38 <HAL_LTDC_MspInit+0x178>)
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c60:	4a35      	ldr	r2, [pc, #212]	@ (8003d38 <HAL_LTDC_MspInit+0x178>)
 8003c62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c66:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c68:	4b33      	ldr	r3, [pc, #204]	@ (8003d38 <HAL_LTDC_MspInit+0x178>)
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003c74:	2310      	movs	r3, #16
 8003c76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c80:	2300      	movs	r3, #0
 8003c82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003c84:	230e      	movs	r3, #14
 8003c86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	482b      	ldr	r0, [pc, #172]	@ (8003d3c <HAL_LTDC_MspInit+0x17c>)
 8003c90:	f003 f8a6 	bl	8006de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003c94:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003c98:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ca6:	230e      	movs	r3, #14
 8003ca8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003caa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4823      	ldr	r0, [pc, #140]	@ (8003d40 <HAL_LTDC_MspInit+0x180>)
 8003cb2:	f003 f895 	bl	8006de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003cb6:	23f7      	movs	r3, #247	@ 0xf7
 8003cb8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003cc6:	230e      	movs	r3, #14
 8003cc8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cce:	4619      	mov	r1, r3
 8003cd0:	481c      	ldr	r0, [pc, #112]	@ (8003d44 <HAL_LTDC_MspInit+0x184>)
 8003cd2:	f003 f885 	bl	8006de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003cd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cdc:	2302      	movs	r3, #2
 8003cde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003ce8:	2309      	movs	r3, #9
 8003cea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4815      	ldr	r0, [pc, #84]	@ (8003d48 <HAL_LTDC_MspInit+0x188>)
 8003cf4:	f003 f874 	bl	8006de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003cf8:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8003cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cfe:	2302      	movs	r3, #2
 8003d00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d06:	2300      	movs	r3, #0
 8003d08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d0a:	230e      	movs	r3, #14
 8003d0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d12:	4619      	mov	r1, r3
 8003d14:	480d      	ldr	r0, [pc, #52]	@ (8003d4c <HAL_LTDC_MspInit+0x18c>)
 8003d16:	f003 f863 	bl	8006de0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2105      	movs	r1, #5
 8003d1e:	2058      	movs	r0, #88	@ 0x58
 8003d20:	f001 fd78 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003d24:	2058      	movs	r0, #88	@ 0x58
 8003d26:	f001 fd91 	bl	800584c <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8003d2a:	bf00      	nop
 8003d2c:	3738      	adds	r7, #56	@ 0x38
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40016800 	.word	0x40016800
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	40022400 	.word	0x40022400
 8003d44:	40022800 	.word	0x40022800
 8003d48:	40021800 	.word	0x40021800
 8003d4c:	40022000 	.word	0x40022000

08003d50 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08c      	sub	sp, #48	@ 0x30
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d58:	f107 031c 	add.w	r3, r7, #28
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	605a      	str	r2, [r3, #4]
 8003d62:	609a      	str	r2, [r3, #8]
 8003d64:	60da      	str	r2, [r3, #12]
 8003d66:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a3b      	ldr	r2, [pc, #236]	@ (8003e5c <HAL_QSPI_MspInit+0x10c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d170      	bne.n	8003e54 <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003d72:	4b3b      	ldr	r3, [pc, #236]	@ (8003e60 <HAL_QSPI_MspInit+0x110>)
 8003d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d76:	4a3a      	ldr	r2, [pc, #232]	@ (8003e60 <HAL_QSPI_MspInit+0x110>)
 8003d78:	f043 0302 	orr.w	r3, r3, #2
 8003d7c:	6393      	str	r3, [r2, #56]	@ 0x38
 8003d7e:	4b38      	ldr	r3, [pc, #224]	@ (8003e60 <HAL_QSPI_MspInit+0x110>)
 8003d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	61bb      	str	r3, [r7, #24]
 8003d88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d8a:	4b35      	ldr	r3, [pc, #212]	@ (8003e60 <HAL_QSPI_MspInit+0x110>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8e:	4a34      	ldr	r2, [pc, #208]	@ (8003e60 <HAL_QSPI_MspInit+0x110>)
 8003d90:	f043 0310 	orr.w	r3, r3, #16
 8003d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d96:	4b32      	ldr	r3, [pc, #200]	@ (8003e60 <HAL_QSPI_MspInit+0x110>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9a:	f003 0310 	and.w	r3, r3, #16
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003da2:	4b2f      	ldr	r3, [pc, #188]	@ (8003e60 <HAL_QSPI_MspInit+0x110>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da6:	4a2e      	ldr	r2, [pc, #184]	@ (8003e60 <HAL_QSPI_MspInit+0x110>)
 8003da8:	f043 0302 	orr.w	r3, r3, #2
 8003dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dae:	4b2c      	ldr	r3, [pc, #176]	@ (8003e60 <HAL_QSPI_MspInit+0x110>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dba:	4b29      	ldr	r3, [pc, #164]	@ (8003e60 <HAL_QSPI_MspInit+0x110>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbe:	4a28      	ldr	r2, [pc, #160]	@ (8003e60 <HAL_QSPI_MspInit+0x110>)
 8003dc0:	f043 0308 	orr.w	r3, r3, #8
 8003dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dc6:	4b26      	ldr	r3, [pc, #152]	@ (8003e60 <HAL_QSPI_MspInit+0x110>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003dd2:	2304      	movs	r3, #4
 8003dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dde:	2303      	movs	r3, #3
 8003de0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003de2:	2309      	movs	r3, #9
 8003de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003de6:	f107 031c 	add.w	r3, r7, #28
 8003dea:	4619      	mov	r1, r3
 8003dec:	481d      	ldr	r0, [pc, #116]	@ (8003e64 <HAL_QSPI_MspInit+0x114>)
 8003dee:	f002 fff7 	bl	8006de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003df2:	2340      	movs	r3, #64	@ 0x40
 8003df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df6:	2302      	movs	r3, #2
 8003df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003e02:	230a      	movs	r3, #10
 8003e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003e06:	f107 031c 	add.w	r3, r7, #28
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4816      	ldr	r0, [pc, #88]	@ (8003e68 <HAL_QSPI_MspInit+0x118>)
 8003e0e:	f002 ffe7 	bl	8006de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e12:	2304      	movs	r3, #4
 8003e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e16:	2302      	movs	r3, #2
 8003e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003e22:	2309      	movs	r3, #9
 8003e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e26:	f107 031c 	add.w	r3, r7, #28
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	480e      	ldr	r0, [pc, #56]	@ (8003e68 <HAL_QSPI_MspInit+0x118>)
 8003e2e:	f002 ffd7 	bl	8006de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003e32:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e40:	2303      	movs	r3, #3
 8003e42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003e44:	2309      	movs	r3, #9
 8003e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e48:	f107 031c 	add.w	r3, r7, #28
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4807      	ldr	r0, [pc, #28]	@ (8003e6c <HAL_QSPI_MspInit+0x11c>)
 8003e50:	f002 ffc6 	bl	8006de0 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8003e54:	bf00      	nop
 8003e56:	3730      	adds	r7, #48	@ 0x30
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	a0001000 	.word	0xa0001000
 8003e60:	40023800 	.word	0x40023800
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40020400 	.word	0x40020400
 8003e6c:	40020c00 	.word	0x40020c00

08003e70 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b0a4      	sub	sp, #144	@ 0x90
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e78:	f107 030c 	add.w	r3, r7, #12
 8003e7c:	2284      	movs	r2, #132	@ 0x84
 8003e7e:	2100      	movs	r1, #0
 8003e80:	4618      	mov	r0, r3
 8003e82:	f011 ffd1 	bl	8015e28 <memset>
  if(hrtc->Instance==RTC)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a0e      	ldr	r2, [pc, #56]	@ (8003ec4 <HAL_RTC_MspInit+0x54>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d114      	bne.n	8003eba <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003e90:	2320      	movs	r3, #32
 8003e92:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003e94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e9a:	f107 030c 	add.w	r3, r7, #12
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f006 f92e 	bl	800a100 <HAL_RCCEx_PeriphCLKConfig>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003eaa:	f7ff fb51 	bl	8003550 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003eae:	4b06      	ldr	r3, [pc, #24]	@ (8003ec8 <HAL_RTC_MspInit+0x58>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb2:	4a05      	ldr	r2, [pc, #20]	@ (8003ec8 <HAL_RTC_MspInit+0x58>)
 8003eb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eb8:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8003eba:	bf00      	nop
 8003ebc:	3790      	adds	r7, #144	@ 0x90
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40002800 	.word	0x40002800
 8003ec8:	40023800 	.word	0x40023800

08003ecc <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08a      	sub	sp, #40	@ 0x28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ed4:	f107 0314 	add.w	r3, r7, #20
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	605a      	str	r2, [r3, #4]
 8003ede:	609a      	str	r2, [r3, #8]
 8003ee0:	60da      	str	r2, [r3, #12]
 8003ee2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a25      	ldr	r2, [pc, #148]	@ (8003f80 <HAL_SD_MspInit+0xb4>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d144      	bne.n	8003f78 <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003eee:	4b25      	ldr	r3, [pc, #148]	@ (8003f84 <HAL_SD_MspInit+0xb8>)
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef2:	4a24      	ldr	r2, [pc, #144]	@ (8003f84 <HAL_SD_MspInit+0xb8>)
 8003ef4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003ef8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003efa:	4b22      	ldr	r3, [pc, #136]	@ (8003f84 <HAL_SD_MspInit+0xb8>)
 8003efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f02:	613b      	str	r3, [r7, #16]
 8003f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f06:	4b1f      	ldr	r3, [pc, #124]	@ (8003f84 <HAL_SD_MspInit+0xb8>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8003f84 <HAL_SD_MspInit+0xb8>)
 8003f0c:	f043 0304 	orr.w	r3, r3, #4
 8003f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f12:	4b1c      	ldr	r3, [pc, #112]	@ (8003f84 <HAL_SD_MspInit+0xb8>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f16:	f003 0304 	and.w	r3, r3, #4
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f1e:	4b19      	ldr	r3, [pc, #100]	@ (8003f84 <HAL_SD_MspInit+0xb8>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f22:	4a18      	ldr	r2, [pc, #96]	@ (8003f84 <HAL_SD_MspInit+0xb8>)
 8003f24:	f043 0308 	orr.w	r3, r3, #8
 8003f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f2a:	4b16      	ldr	r3, [pc, #88]	@ (8003f84 <HAL_SD_MspInit+0xb8>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003f36:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003f3a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f44:	2303      	movs	r3, #3
 8003f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003f48:	230c      	movs	r3, #12
 8003f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f4c:	f107 0314 	add.w	r3, r7, #20
 8003f50:	4619      	mov	r1, r3
 8003f52:	480d      	ldr	r0, [pc, #52]	@ (8003f88 <HAL_SD_MspInit+0xbc>)
 8003f54:	f002 ff44 	bl	8006de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003f58:	2304      	movs	r3, #4
 8003f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f64:	2303      	movs	r3, #3
 8003f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003f68:	230c      	movs	r3, #12
 8003f6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003f6c:	f107 0314 	add.w	r3, r7, #20
 8003f70:	4619      	mov	r1, r3
 8003f72:	4806      	ldr	r0, [pc, #24]	@ (8003f8c <HAL_SD_MspInit+0xc0>)
 8003f74:	f002 ff34 	bl	8006de0 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8003f78:	bf00      	nop
 8003f7a:	3728      	adds	r7, #40	@ 0x28
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40012c00 	.word	0x40012c00
 8003f84:	40023800 	.word	0x40023800
 8003f88:	40020800 	.word	0x40020800
 8003f8c:	40020c00 	.word	0x40020c00

08003f90 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b0aa      	sub	sp, #168	@ 0xa8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f98:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	605a      	str	r2, [r3, #4]
 8003fa2:	609a      	str	r2, [r3, #8]
 8003fa4:	60da      	str	r2, [r3, #12]
 8003fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fa8:	f107 0310 	add.w	r3, r7, #16
 8003fac:	2284      	movs	r2, #132	@ 0x84
 8003fae:	2100      	movs	r1, #0
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f011 ff39 	bl	8015e28 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8003fbe:	d143      	bne.n	8004048 <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8003fc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fc4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8003fc6:	2364      	movs	r3, #100	@ 0x64
 8003fc8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fda:	f107 0310 	add.w	r3, r7, #16
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f006 f88e 	bl	800a100 <HAL_RCCEx_PeriphCLKConfig>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8003fea:	f7ff fab1 	bl	8003550 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003fee:	4b18      	ldr	r3, [pc, #96]	@ (8004050 <HAL_SPDIFRX_MspInit+0xc0>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	4a17      	ldr	r2, [pc, #92]	@ (8004050 <HAL_SPDIFRX_MspInit+0xc0>)
 8003ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ffa:	4b15      	ldr	r3, [pc, #84]	@ (8004050 <HAL_SPDIFRX_MspInit+0xc0>)
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004006:	4b12      	ldr	r3, [pc, #72]	@ (8004050 <HAL_SPDIFRX_MspInit+0xc0>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400a:	4a11      	ldr	r2, [pc, #68]	@ (8004050 <HAL_SPDIFRX_MspInit+0xc0>)
 800400c:	f043 0308 	orr.w	r3, r3, #8
 8004010:	6313      	str	r3, [r2, #48]	@ 0x30
 8004012:	4b0f      	ldr	r3, [pc, #60]	@ (8004050 <HAL_SPDIFRX_MspInit+0xc0>)
 8004014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	60bb      	str	r3, [r7, #8]
 800401c:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800401e:	2380      	movs	r3, #128	@ 0x80
 8004020:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004024:	2302      	movs	r3, #2
 8004026:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402a:	2300      	movs	r3, #0
 800402c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004030:	2300      	movs	r3, #0
 8004032:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8004036:	2308      	movs	r3, #8
 8004038:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800403c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004040:	4619      	mov	r1, r3
 8004042:	4804      	ldr	r0, [pc, #16]	@ (8004054 <HAL_SPDIFRX_MspInit+0xc4>)
 8004044:	f002 fecc 	bl	8006de0 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8004048:	bf00      	nop
 800404a:	37a8      	adds	r7, #168	@ 0xa8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40023800 	.word	0x40023800
 8004054:	40020c00 	.word	0x40020c00

08004058 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08a      	sub	sp, #40	@ 0x28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004060:	f107 0314 	add.w	r3, r7, #20
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	609a      	str	r2, [r3, #8]
 800406c:	60da      	str	r2, [r3, #12]
 800406e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a25      	ldr	r2, [pc, #148]	@ (800410c <HAL_SPI_MspInit+0xb4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d144      	bne.n	8004104 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800407a:	4b25      	ldr	r3, [pc, #148]	@ (8004110 <HAL_SPI_MspInit+0xb8>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	4a24      	ldr	r2, [pc, #144]	@ (8004110 <HAL_SPI_MspInit+0xb8>)
 8004080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004084:	6413      	str	r3, [r2, #64]	@ 0x40
 8004086:	4b22      	ldr	r3, [pc, #136]	@ (8004110 <HAL_SPI_MspInit+0xb8>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004092:	4b1f      	ldr	r3, [pc, #124]	@ (8004110 <HAL_SPI_MspInit+0xb8>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004096:	4a1e      	ldr	r2, [pc, #120]	@ (8004110 <HAL_SPI_MspInit+0xb8>)
 8004098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800409c:	6313      	str	r3, [r2, #48]	@ 0x30
 800409e:	4b1c      	ldr	r3, [pc, #112]	@ (8004110 <HAL_SPI_MspInit+0xb8>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040aa:	4b19      	ldr	r3, [pc, #100]	@ (8004110 <HAL_SPI_MspInit+0xb8>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ae:	4a18      	ldr	r2, [pc, #96]	@ (8004110 <HAL_SPI_MspInit+0xb8>)
 80040b0:	f043 0302 	orr.w	r3, r3, #2
 80040b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80040b6:	4b16      	ldr	r3, [pc, #88]	@ (8004110 <HAL_SPI_MspInit+0xb8>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	60bb      	str	r3, [r7, #8]
 80040c0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80040c2:	2302      	movs	r3, #2
 80040c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c6:	2302      	movs	r3, #2
 80040c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ce:	2300      	movs	r3, #0
 80040d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80040d2:	2305      	movs	r3, #5
 80040d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80040d6:	f107 0314 	add.w	r3, r7, #20
 80040da:	4619      	mov	r1, r3
 80040dc:	480d      	ldr	r0, [pc, #52]	@ (8004114 <HAL_SPI_MspInit+0xbc>)
 80040de:	f002 fe7f 	bl	8006de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80040e2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80040e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e8:	2302      	movs	r3, #2
 80040ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f0:	2300      	movs	r3, #0
 80040f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80040f4:	2305      	movs	r3, #5
 80040f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040f8:	f107 0314 	add.w	r3, r7, #20
 80040fc:	4619      	mov	r1, r3
 80040fe:	4806      	ldr	r0, [pc, #24]	@ (8004118 <HAL_SPI_MspInit+0xc0>)
 8004100:	f002 fe6e 	bl	8006de0 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004104:	bf00      	nop
 8004106:	3728      	adds	r7, #40	@ 0x28
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40003800 	.word	0x40003800
 8004110:	40023800 	.word	0x40023800
 8004114:	40022000 	.word	0x40022000
 8004118:	40020400 	.word	0x40020400

0800411c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800411c:	b480      	push	{r7}
 800411e:	b089      	sub	sp, #36	@ 0x24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a2e      	ldr	r2, [pc, #184]	@ (80041e4 <HAL_TIM_Base_MspInit+0xc8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d10c      	bne.n	8004148 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800412e:	4b2e      	ldr	r3, [pc, #184]	@ (80041e8 <HAL_TIM_Base_MspInit+0xcc>)
 8004130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004132:	4a2d      	ldr	r2, [pc, #180]	@ (80041e8 <HAL_TIM_Base_MspInit+0xcc>)
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	6453      	str	r3, [r2, #68]	@ 0x44
 800413a:	4b2b      	ldr	r3, [pc, #172]	@ (80041e8 <HAL_TIM_Base_MspInit+0xcc>)
 800413c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	61fb      	str	r3, [r7, #28]
 8004144:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004146:	e046      	b.n	80041d6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004150:	d10c      	bne.n	800416c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004152:	4b25      	ldr	r3, [pc, #148]	@ (80041e8 <HAL_TIM_Base_MspInit+0xcc>)
 8004154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004156:	4a24      	ldr	r2, [pc, #144]	@ (80041e8 <HAL_TIM_Base_MspInit+0xcc>)
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	6413      	str	r3, [r2, #64]	@ 0x40
 800415e:	4b22      	ldr	r3, [pc, #136]	@ (80041e8 <HAL_TIM_Base_MspInit+0xcc>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	61bb      	str	r3, [r7, #24]
 8004168:	69bb      	ldr	r3, [r7, #24]
}
 800416a:	e034      	b.n	80041d6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a1e      	ldr	r2, [pc, #120]	@ (80041ec <HAL_TIM_Base_MspInit+0xd0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d10c      	bne.n	8004190 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004176:	4b1c      	ldr	r3, [pc, #112]	@ (80041e8 <HAL_TIM_Base_MspInit+0xcc>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	4a1b      	ldr	r2, [pc, #108]	@ (80041e8 <HAL_TIM_Base_MspInit+0xcc>)
 800417c:	f043 0302 	orr.w	r3, r3, #2
 8004180:	6413      	str	r3, [r2, #64]	@ 0x40
 8004182:	4b19      	ldr	r3, [pc, #100]	@ (80041e8 <HAL_TIM_Base_MspInit+0xcc>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	697b      	ldr	r3, [r7, #20]
}
 800418e:	e022      	b.n	80041d6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a16      	ldr	r2, [pc, #88]	@ (80041f0 <HAL_TIM_Base_MspInit+0xd4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d10c      	bne.n	80041b4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800419a:	4b13      	ldr	r3, [pc, #76]	@ (80041e8 <HAL_TIM_Base_MspInit+0xcc>)
 800419c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419e:	4a12      	ldr	r2, [pc, #72]	@ (80041e8 <HAL_TIM_Base_MspInit+0xcc>)
 80041a0:	f043 0308 	orr.w	r3, r3, #8
 80041a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80041a6:	4b10      	ldr	r3, [pc, #64]	@ (80041e8 <HAL_TIM_Base_MspInit+0xcc>)
 80041a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	613b      	str	r3, [r7, #16]
 80041b0:	693b      	ldr	r3, [r7, #16]
}
 80041b2:	e010      	b.n	80041d6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a0e      	ldr	r2, [pc, #56]	@ (80041f4 <HAL_TIM_Base_MspInit+0xd8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d10b      	bne.n	80041d6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80041be:	4b0a      	ldr	r3, [pc, #40]	@ (80041e8 <HAL_TIM_Base_MspInit+0xcc>)
 80041c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c2:	4a09      	ldr	r2, [pc, #36]	@ (80041e8 <HAL_TIM_Base_MspInit+0xcc>)
 80041c4:	f043 0302 	orr.w	r3, r3, #2
 80041c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80041ca:	4b07      	ldr	r3, [pc, #28]	@ (80041e8 <HAL_TIM_Base_MspInit+0xcc>)
 80041cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
}
 80041d6:	bf00      	nop
 80041d8:	3724      	adds	r7, #36	@ 0x24
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40010000 	.word	0x40010000
 80041e8:	40023800 	.word	0x40023800
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000c00 	.word	0x40000c00
 80041f4:	40010400 	.word	0x40010400

080041f8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a0a      	ldr	r2, [pc, #40]	@ (8004230 <HAL_TIM_PWM_MspInit+0x38>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d10b      	bne.n	8004222 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800420a:	4b0a      	ldr	r3, [pc, #40]	@ (8004234 <HAL_TIM_PWM_MspInit+0x3c>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	4a09      	ldr	r2, [pc, #36]	@ (8004234 <HAL_TIM_PWM_MspInit+0x3c>)
 8004210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004214:	6413      	str	r3, [r2, #64]	@ 0x40
 8004216:	4b07      	ldr	r3, [pc, #28]	@ (8004234 <HAL_TIM_PWM_MspInit+0x3c>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 8004222:	bf00      	nop
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40001800 	.word	0x40001800
 8004234:	40023800 	.word	0x40023800

08004238 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08c      	sub	sp, #48	@ 0x30
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004240:	f107 031c 	add.w	r3, r7, #28
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	60da      	str	r2, [r3, #12]
 800424e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a56      	ldr	r2, [pc, #344]	@ (80043b0 <HAL_TIM_MspPostInit+0x178>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d11d      	bne.n	8004296 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800425a:	4b56      	ldr	r3, [pc, #344]	@ (80043b4 <HAL_TIM_MspPostInit+0x17c>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425e:	4a55      	ldr	r2, [pc, #340]	@ (80043b4 <HAL_TIM_MspPostInit+0x17c>)
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	6313      	str	r3, [r2, #48]	@ 0x30
 8004266:	4b53      	ldr	r3, [pc, #332]	@ (80043b4 <HAL_TIM_MspPostInit+0x17c>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	61bb      	str	r3, [r7, #24]
 8004270:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8004272:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004278:	2302      	movs	r3, #2
 800427a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427c:	2300      	movs	r3, #0
 800427e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004280:	2300      	movs	r3, #0
 8004282:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004284:	2301      	movs	r3, #1
 8004286:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8004288:	f107 031c 	add.w	r3, r7, #28
 800428c:	4619      	mov	r1, r3
 800428e:	484a      	ldr	r0, [pc, #296]	@ (80043b8 <HAL_TIM_MspPostInit+0x180>)
 8004290:	f002 fda6 	bl	8006de0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004294:	e087      	b.n	80043a6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800429e:	d11d      	bne.n	80042dc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042a0:	4b44      	ldr	r3, [pc, #272]	@ (80043b4 <HAL_TIM_MspPostInit+0x17c>)
 80042a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a4:	4a43      	ldr	r2, [pc, #268]	@ (80043b4 <HAL_TIM_MspPostInit+0x17c>)
 80042a6:	f043 0301 	orr.w	r3, r3, #1
 80042aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80042ac:	4b41      	ldr	r3, [pc, #260]	@ (80043b4 <HAL_TIM_MspPostInit+0x17c>)
 80042ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80042b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042be:	2302      	movs	r3, #2
 80042c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c6:	2300      	movs	r3, #0
 80042c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80042ca:	2301      	movs	r3, #1
 80042cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80042ce:	f107 031c 	add.w	r3, r7, #28
 80042d2:	4619      	mov	r1, r3
 80042d4:	4838      	ldr	r0, [pc, #224]	@ (80043b8 <HAL_TIM_MspPostInit+0x180>)
 80042d6:	f002 fd83 	bl	8006de0 <HAL_GPIO_Init>
}
 80042da:	e064      	b.n	80043a6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a36      	ldr	r2, [pc, #216]	@ (80043bc <HAL_TIM_MspPostInit+0x184>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d11c      	bne.n	8004320 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042e6:	4b33      	ldr	r3, [pc, #204]	@ (80043b4 <HAL_TIM_MspPostInit+0x17c>)
 80042e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ea:	4a32      	ldr	r2, [pc, #200]	@ (80043b4 <HAL_TIM_MspPostInit+0x17c>)
 80042ec:	f043 0302 	orr.w	r3, r3, #2
 80042f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80042f2:	4b30      	ldr	r3, [pc, #192]	@ (80043b4 <HAL_TIM_MspPostInit+0x17c>)
 80042f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80042fe:	2310      	movs	r3, #16
 8004300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004302:	2302      	movs	r3, #2
 8004304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004306:	2300      	movs	r3, #0
 8004308:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800430a:	2300      	movs	r3, #0
 800430c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800430e:	2302      	movs	r3, #2
 8004310:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8004312:	f107 031c 	add.w	r3, r7, #28
 8004316:	4619      	mov	r1, r3
 8004318:	4829      	ldr	r0, [pc, #164]	@ (80043c0 <HAL_TIM_MspPostInit+0x188>)
 800431a:	f002 fd61 	bl	8006de0 <HAL_GPIO_Init>
}
 800431e:	e042      	b.n	80043a6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a27      	ldr	r2, [pc, #156]	@ (80043c4 <HAL_TIM_MspPostInit+0x18c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d11c      	bne.n	8004364 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800432a:	4b22      	ldr	r3, [pc, #136]	@ (80043b4 <HAL_TIM_MspPostInit+0x17c>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432e:	4a21      	ldr	r2, [pc, #132]	@ (80043b4 <HAL_TIM_MspPostInit+0x17c>)
 8004330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004334:	6313      	str	r3, [r2, #48]	@ 0x30
 8004336:	4b1f      	ldr	r3, [pc, #124]	@ (80043b4 <HAL_TIM_MspPostInit+0x17c>)
 8004338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8004342:	2301      	movs	r3, #1
 8004344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004346:	2302      	movs	r3, #2
 8004348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434a:	2300      	movs	r3, #0
 800434c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800434e:	2300      	movs	r3, #0
 8004350:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004352:	2302      	movs	r3, #2
 8004354:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8004356:	f107 031c 	add.w	r3, r7, #28
 800435a:	4619      	mov	r1, r3
 800435c:	481a      	ldr	r0, [pc, #104]	@ (80043c8 <HAL_TIM_MspPostInit+0x190>)
 800435e:	f002 fd3f 	bl	8006de0 <HAL_GPIO_Init>
}
 8004362:	e020      	b.n	80043a6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a18      	ldr	r2, [pc, #96]	@ (80043cc <HAL_TIM_MspPostInit+0x194>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d11b      	bne.n	80043a6 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800436e:	4b11      	ldr	r3, [pc, #68]	@ (80043b4 <HAL_TIM_MspPostInit+0x17c>)
 8004370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004372:	4a10      	ldr	r2, [pc, #64]	@ (80043b4 <HAL_TIM_MspPostInit+0x17c>)
 8004374:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004378:	6313      	str	r3, [r2, #48]	@ 0x30
 800437a:	4b0e      	ldr	r3, [pc, #56]	@ (80043b4 <HAL_TIM_MspPostInit+0x17c>)
 800437c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004382:	60bb      	str	r3, [r7, #8]
 8004384:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8004386:	2340      	movs	r3, #64	@ 0x40
 8004388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438a:	2302      	movs	r3, #2
 800438c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438e:	2300      	movs	r3, #0
 8004390:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004392:	2300      	movs	r3, #0
 8004394:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004396:	2309      	movs	r3, #9
 8004398:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800439a:	f107 031c 	add.w	r3, r7, #28
 800439e:	4619      	mov	r1, r3
 80043a0:	480b      	ldr	r0, [pc, #44]	@ (80043d0 <HAL_TIM_MspPostInit+0x198>)
 80043a2:	f002 fd1d 	bl	8006de0 <HAL_GPIO_Init>
}
 80043a6:	bf00      	nop
 80043a8:	3730      	adds	r7, #48	@ 0x30
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40023800 	.word	0x40023800
 80043b8:	40020000 	.word	0x40020000
 80043bc:	40000400 	.word	0x40000400
 80043c0:	40020400 	.word	0x40020400
 80043c4:	40000c00 	.word	0x40000c00
 80043c8:	40022000 	.word	0x40022000
 80043cc:	40001800 	.word	0x40001800
 80043d0:	40021c00 	.word	0x40021c00

080043d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b0ae      	sub	sp, #184	@ 0xb8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	605a      	str	r2, [r3, #4]
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	60da      	str	r2, [r3, #12]
 80043ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043ec:	f107 0320 	add.w	r3, r7, #32
 80043f0:	2284      	movs	r2, #132	@ 0x84
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f011 fd17 	bl	8015e28 <memset>
  if(huart->Instance==USART1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a53      	ldr	r2, [pc, #332]	@ (800454c <HAL_UART_MspInit+0x178>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d15d      	bne.n	80044c0 <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004404:	2340      	movs	r3, #64	@ 0x40
 8004406:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004408:	2300      	movs	r3, #0
 800440a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800440c:	f107 0320 	add.w	r3, r7, #32
 8004410:	4618      	mov	r0, r3
 8004412:	f005 fe75 	bl	800a100 <HAL_RCCEx_PeriphCLKConfig>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800441c:	f7ff f898 	bl	8003550 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004420:	4b4b      	ldr	r3, [pc, #300]	@ (8004550 <HAL_UART_MspInit+0x17c>)
 8004422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004424:	4a4a      	ldr	r2, [pc, #296]	@ (8004550 <HAL_UART_MspInit+0x17c>)
 8004426:	f043 0310 	orr.w	r3, r3, #16
 800442a:	6453      	str	r3, [r2, #68]	@ 0x44
 800442c:	4b48      	ldr	r3, [pc, #288]	@ (8004550 <HAL_UART_MspInit+0x17c>)
 800442e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004430:	f003 0310 	and.w	r3, r3, #16
 8004434:	61fb      	str	r3, [r7, #28]
 8004436:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004438:	4b45      	ldr	r3, [pc, #276]	@ (8004550 <HAL_UART_MspInit+0x17c>)
 800443a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443c:	4a44      	ldr	r2, [pc, #272]	@ (8004550 <HAL_UART_MspInit+0x17c>)
 800443e:	f043 0302 	orr.w	r3, r3, #2
 8004442:	6313      	str	r3, [r2, #48]	@ 0x30
 8004444:	4b42      	ldr	r3, [pc, #264]	@ (8004550 <HAL_UART_MspInit+0x17c>)
 8004446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004450:	4b3f      	ldr	r3, [pc, #252]	@ (8004550 <HAL_UART_MspInit+0x17c>)
 8004452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004454:	4a3e      	ldr	r2, [pc, #248]	@ (8004550 <HAL_UART_MspInit+0x17c>)
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	6313      	str	r3, [r2, #48]	@ 0x30
 800445c:	4b3c      	ldr	r3, [pc, #240]	@ (8004550 <HAL_UART_MspInit+0x17c>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004468:	2380      	movs	r3, #128	@ 0x80
 800446a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800446e:	2302      	movs	r3, #2
 8004470:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004474:	2300      	movs	r3, #0
 8004476:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800447a:	2300      	movs	r3, #0
 800447c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004480:	2307      	movs	r3, #7
 8004482:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004486:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800448a:	4619      	mov	r1, r3
 800448c:	4831      	ldr	r0, [pc, #196]	@ (8004554 <HAL_UART_MspInit+0x180>)
 800448e:	f002 fca7 	bl	8006de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004492:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004496:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800449a:	2302      	movs	r3, #2
 800449c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044a6:	2300      	movs	r3, #0
 80044a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80044ac:	2307      	movs	r3, #7
 80044ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80044b2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80044b6:	4619      	mov	r1, r3
 80044b8:	4827      	ldr	r0, [pc, #156]	@ (8004558 <HAL_UART_MspInit+0x184>)
 80044ba:	f002 fc91 	bl	8006de0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 80044be:	e040      	b.n	8004542 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a25      	ldr	r2, [pc, #148]	@ (800455c <HAL_UART_MspInit+0x188>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d13b      	bne.n	8004542 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80044ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80044ce:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80044d0:	2300      	movs	r3, #0
 80044d2:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044d4:	f107 0320 	add.w	r3, r7, #32
 80044d8:	4618      	mov	r0, r3
 80044da:	f005 fe11 	bl	800a100 <HAL_RCCEx_PeriphCLKConfig>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <HAL_UART_MspInit+0x114>
      Error_Handler();
 80044e4:	f7ff f834 	bl	8003550 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80044e8:	4b19      	ldr	r3, [pc, #100]	@ (8004550 <HAL_UART_MspInit+0x17c>)
 80044ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ec:	4a18      	ldr	r2, [pc, #96]	@ (8004550 <HAL_UART_MspInit+0x17c>)
 80044ee:	f043 0320 	orr.w	r3, r3, #32
 80044f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80044f4:	4b16      	ldr	r3, [pc, #88]	@ (8004550 <HAL_UART_MspInit+0x17c>)
 80044f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004500:	4b13      	ldr	r3, [pc, #76]	@ (8004550 <HAL_UART_MspInit+0x17c>)
 8004502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004504:	4a12      	ldr	r2, [pc, #72]	@ (8004550 <HAL_UART_MspInit+0x17c>)
 8004506:	f043 0304 	orr.w	r3, r3, #4
 800450a:	6313      	str	r3, [r2, #48]	@ 0x30
 800450c:	4b10      	ldr	r3, [pc, #64]	@ (8004550 <HAL_UART_MspInit+0x17c>)
 800450e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004518:	23c0      	movs	r3, #192	@ 0xc0
 800451a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800451e:	2302      	movs	r3, #2
 8004520:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004524:	2300      	movs	r3, #0
 8004526:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800452a:	2303      	movs	r3, #3
 800452c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004530:	2308      	movs	r3, #8
 8004532:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004536:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800453a:	4619      	mov	r1, r3
 800453c:	4808      	ldr	r0, [pc, #32]	@ (8004560 <HAL_UART_MspInit+0x18c>)
 800453e:	f002 fc4f 	bl	8006de0 <HAL_GPIO_Init>
}
 8004542:	bf00      	nop
 8004544:	37b8      	adds	r7, #184	@ 0xb8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40011000 	.word	0x40011000
 8004550:	40023800 	.word	0x40023800
 8004554:	40020400 	.word	0x40020400
 8004558:	40020000 	.word	0x40020000
 800455c:	40011400 	.word	0x40011400
 8004560:	40020800 	.word	0x40020800

08004564 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800456a:	1d3b      	adds	r3, r7, #4
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	609a      	str	r2, [r3, #8]
 8004574:	60da      	str	r2, [r3, #12]
 8004576:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004578:	4b3a      	ldr	r3, [pc, #232]	@ (8004664 <HAL_FMC_MspInit+0x100>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d16d      	bne.n	800465c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8004580:	4b38      	ldr	r3, [pc, #224]	@ (8004664 <HAL_FMC_MspInit+0x100>)
 8004582:	2201      	movs	r2, #1
 8004584:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004586:	4b38      	ldr	r3, [pc, #224]	@ (8004668 <HAL_FMC_MspInit+0x104>)
 8004588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458a:	4a37      	ldr	r2, [pc, #220]	@ (8004668 <HAL_FMC_MspInit+0x104>)
 800458c:	f043 0301 	orr.w	r3, r3, #1
 8004590:	6393      	str	r3, [r2, #56]	@ 0x38
 8004592:	4b35      	ldr	r3, [pc, #212]	@ (8004668 <HAL_FMC_MspInit+0x104>)
 8004594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800459e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80045a2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a4:	2302      	movs	r3, #2
 80045a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ac:	2303      	movs	r3, #3
 80045ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80045b0:	230c      	movs	r3, #12
 80045b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045b4:	1d3b      	adds	r3, r7, #4
 80045b6:	4619      	mov	r1, r3
 80045b8:	482c      	ldr	r0, [pc, #176]	@ (800466c <HAL_FMC_MspInit+0x108>)
 80045ba:	f002 fc11 	bl	8006de0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80045be:	f248 1333 	movw	r3, #33075	@ 0x8133
 80045c2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c4:	2302      	movs	r3, #2
 80045c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045cc:	2303      	movs	r3, #3
 80045ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80045d0:	230c      	movs	r3, #12
 80045d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045d4:	1d3b      	adds	r3, r7, #4
 80045d6:	4619      	mov	r1, r3
 80045d8:	4825      	ldr	r0, [pc, #148]	@ (8004670 <HAL_FMC_MspInit+0x10c>)
 80045da:	f002 fc01 	bl	8006de0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80045de:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80045e2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e4:	2302      	movs	r3, #2
 80045e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ec:	2303      	movs	r3, #3
 80045ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80045f0:	230c      	movs	r3, #12
 80045f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045f4:	1d3b      	adds	r3, r7, #4
 80045f6:	4619      	mov	r1, r3
 80045f8:	481e      	ldr	r0, [pc, #120]	@ (8004674 <HAL_FMC_MspInit+0x110>)
 80045fa:	f002 fbf1 	bl	8006de0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80045fe:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004602:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004604:	2302      	movs	r3, #2
 8004606:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800460c:	2303      	movs	r3, #3
 800460e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004610:	230c      	movs	r3, #12
 8004612:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004614:	1d3b      	adds	r3, r7, #4
 8004616:	4619      	mov	r1, r3
 8004618:	4817      	ldr	r0, [pc, #92]	@ (8004678 <HAL_FMC_MspInit+0x114>)
 800461a:	f002 fbe1 	bl	8006de0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800461e:	2328      	movs	r3, #40	@ 0x28
 8004620:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004622:	2302      	movs	r3, #2
 8004624:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800462a:	2303      	movs	r3, #3
 800462c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800462e:	230c      	movs	r3, #12
 8004630:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004632:	1d3b      	adds	r3, r7, #4
 8004634:	4619      	mov	r1, r3
 8004636:	4811      	ldr	r0, [pc, #68]	@ (800467c <HAL_FMC_MspInit+0x118>)
 8004638:	f002 fbd2 	bl	8006de0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800463c:	2308      	movs	r3, #8
 800463e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004640:	2302      	movs	r3, #2
 8004642:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004648:	2303      	movs	r3, #3
 800464a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800464c:	230c      	movs	r3, #12
 800464e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8004650:	1d3b      	adds	r3, r7, #4
 8004652:	4619      	mov	r1, r3
 8004654:	480a      	ldr	r0, [pc, #40]	@ (8004680 <HAL_FMC_MspInit+0x11c>)
 8004656:	f002 fbc3 	bl	8006de0 <HAL_GPIO_Init>
 800465a:	e000      	b.n	800465e <HAL_FMC_MspInit+0xfa>
    return;
 800465c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800465e:	3718      	adds	r7, #24
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	2000151c 	.word	0x2000151c
 8004668:	40023800 	.word	0x40023800
 800466c:	40021000 	.word	0x40021000
 8004670:	40021800 	.word	0x40021800
 8004674:	40020c00 	.word	0x40020c00
 8004678:	40021400 	.word	0x40021400
 800467c:	40021c00 	.word	0x40021c00
 8004680:	40020800 	.word	0x40020800

08004684 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800468c:	f7ff ff6a 	bl	8004564 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004690:	bf00      	nop
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08a      	sub	sp, #40	@ 0x28
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a2b      	ldr	r2, [pc, #172]	@ (8004754 <HAL_SAI_MspInit+0xbc>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d124      	bne.n	80046f4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80046aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004758 <HAL_SAI_MspInit+0xc0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10b      	bne.n	80046ca <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80046b2:	4b2a      	ldr	r3, [pc, #168]	@ (800475c <HAL_SAI_MspInit+0xc4>)
 80046b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b6:	4a29      	ldr	r2, [pc, #164]	@ (800475c <HAL_SAI_MspInit+0xc4>)
 80046b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80046be:	4b27      	ldr	r3, [pc, #156]	@ (800475c <HAL_SAI_MspInit+0xc4>)
 80046c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046c6:	613b      	str	r3, [r7, #16]
 80046c8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80046ca:	4b23      	ldr	r3, [pc, #140]	@ (8004758 <HAL_SAI_MspInit+0xc0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3301      	adds	r3, #1
 80046d0:	4a21      	ldr	r2, [pc, #132]	@ (8004758 <HAL_SAI_MspInit+0xc0>)
 80046d2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80046d4:	23f0      	movs	r3, #240	@ 0xf0
 80046d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d8:	2302      	movs	r3, #2
 80046da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046dc:	2300      	movs	r3, #0
 80046de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e0:	2300      	movs	r3, #0
 80046e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80046e4:	230a      	movs	r3, #10
 80046e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80046e8:	f107 0314 	add.w	r3, r7, #20
 80046ec:	4619      	mov	r1, r3
 80046ee:	481c      	ldr	r0, [pc, #112]	@ (8004760 <HAL_SAI_MspInit+0xc8>)
 80046f0:	f002 fb76 	bl	8006de0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1a      	ldr	r2, [pc, #104]	@ (8004764 <HAL_SAI_MspInit+0xcc>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d125      	bne.n	800474a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80046fe:	4b16      	ldr	r3, [pc, #88]	@ (8004758 <HAL_SAI_MspInit+0xc0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10b      	bne.n	800471e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004706:	4b15      	ldr	r3, [pc, #84]	@ (800475c <HAL_SAI_MspInit+0xc4>)
 8004708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470a:	4a14      	ldr	r2, [pc, #80]	@ (800475c <HAL_SAI_MspInit+0xc4>)
 800470c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004710:	6453      	str	r3, [r2, #68]	@ 0x44
 8004712:	4b12      	ldr	r3, [pc, #72]	@ (800475c <HAL_SAI_MspInit+0xc4>)
 8004714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004716:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800471e:	4b0e      	ldr	r3, [pc, #56]	@ (8004758 <HAL_SAI_MspInit+0xc0>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3301      	adds	r3, #1
 8004724:	4a0c      	ldr	r2, [pc, #48]	@ (8004758 <HAL_SAI_MspInit+0xc0>)
 8004726:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8004728:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800472c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472e:	2302      	movs	r3, #2
 8004730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004732:	2300      	movs	r3, #0
 8004734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004736:	2300      	movs	r3, #0
 8004738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800473a:	230a      	movs	r3, #10
 800473c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800473e:	f107 0314 	add.w	r3, r7, #20
 8004742:	4619      	mov	r1, r3
 8004744:	4808      	ldr	r0, [pc, #32]	@ (8004768 <HAL_SAI_MspInit+0xd0>)
 8004746:	f002 fb4b 	bl	8006de0 <HAL_GPIO_Init>

    }
}
 800474a:	bf00      	nop
 800474c:	3728      	adds	r7, #40	@ 0x28
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40015c04 	.word	0x40015c04
 8004758:	20001520 	.word	0x20001520
 800475c:	40023800 	.word	0x40023800
 8004760:	40022000 	.word	0x40022000
 8004764:	40015c24 	.word	0x40015c24
 8004768:	40021800 	.word	0x40021800

0800476c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b08e      	sub	sp, #56	@ 0x38
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800477c:	4b33      	ldr	r3, [pc, #204]	@ (800484c <HAL_InitTick+0xe0>)
 800477e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004780:	4a32      	ldr	r2, [pc, #200]	@ (800484c <HAL_InitTick+0xe0>)
 8004782:	f043 0310 	orr.w	r3, r3, #16
 8004786:	6413      	str	r3, [r2, #64]	@ 0x40
 8004788:	4b30      	ldr	r3, [pc, #192]	@ (800484c <HAL_InitTick+0xe0>)
 800478a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004794:	f107 0210 	add.w	r2, r7, #16
 8004798:	f107 0314 	add.w	r3, r7, #20
 800479c:	4611      	mov	r1, r2
 800479e:	4618      	mov	r0, r3
 80047a0:	f005 fc7c 	bl	800a09c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80047a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d103      	bne.n	80047b6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80047ae:	f005 fc4d 	bl	800a04c <HAL_RCC_GetPCLK1Freq>
 80047b2:	6378      	str	r0, [r7, #52]	@ 0x34
 80047b4:	e004      	b.n	80047c0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80047b6:	f005 fc49 	bl	800a04c <HAL_RCC_GetPCLK1Freq>
 80047ba:	4603      	mov	r3, r0
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80047c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047c2:	4a23      	ldr	r2, [pc, #140]	@ (8004850 <HAL_InitTick+0xe4>)
 80047c4:	fba2 2303 	umull	r2, r3, r2, r3
 80047c8:	0c9b      	lsrs	r3, r3, #18
 80047ca:	3b01      	subs	r3, #1
 80047cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80047ce:	4b21      	ldr	r3, [pc, #132]	@ (8004854 <HAL_InitTick+0xe8>)
 80047d0:	4a21      	ldr	r2, [pc, #132]	@ (8004858 <HAL_InitTick+0xec>)
 80047d2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80047d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004854 <HAL_InitTick+0xe8>)
 80047d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80047da:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80047dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004854 <HAL_InitTick+0xe8>)
 80047de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80047e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004854 <HAL_InitTick+0xe8>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004854 <HAL_InitTick+0xe8>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047ee:	4b19      	ldr	r3, [pc, #100]	@ (8004854 <HAL_InitTick+0xe8>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80047f4:	4817      	ldr	r0, [pc, #92]	@ (8004854 <HAL_InitTick+0xe8>)
 80047f6:	f007 fffe 	bl	800c7f6 <HAL_TIM_Base_Init>
 80047fa:	4603      	mov	r3, r0
 80047fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004800:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004804:	2b00      	cmp	r3, #0
 8004806:	d11b      	bne.n	8004840 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004808:	4812      	ldr	r0, [pc, #72]	@ (8004854 <HAL_InitTick+0xe8>)
 800480a:	f008 f84b 	bl	800c8a4 <HAL_TIM_Base_Start_IT>
 800480e:	4603      	mov	r3, r0
 8004810:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004814:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004818:	2b00      	cmp	r3, #0
 800481a:	d111      	bne.n	8004840 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800481c:	2036      	movs	r0, #54	@ 0x36
 800481e:	f001 f815 	bl	800584c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b0f      	cmp	r3, #15
 8004826:	d808      	bhi.n	800483a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004828:	2200      	movs	r2, #0
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	2036      	movs	r0, #54	@ 0x36
 800482e:	f000 fff1 	bl	8005814 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004832:	4a0a      	ldr	r2, [pc, #40]	@ (800485c <HAL_InitTick+0xf0>)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	e002      	b.n	8004840 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004840:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004844:	4618      	mov	r0, r3
 8004846:	3738      	adds	r7, #56	@ 0x38
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40023800 	.word	0x40023800
 8004850:	431bde83 	.word	0x431bde83
 8004854:	20001524 	.word	0x20001524
 8004858:	40001000 	.word	0x40001000
 800485c:	20000068 	.word	0x20000068

08004860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004864:	bf00      	nop
 8004866:	e7fd      	b.n	8004864 <NMI_Handler+0x4>

08004868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800486c:	bf00      	nop
 800486e:	e7fd      	b.n	800486c <HardFault_Handler+0x4>

08004870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004874:	bf00      	nop
 8004876:	e7fd      	b.n	8004874 <MemManage_Handler+0x4>

08004878 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800487c:	bf00      	nop
 800487e:	e7fd      	b.n	800487c <BusFault_Handler+0x4>

08004880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004884:	bf00      	nop
 8004886:	e7fd      	b.n	8004884 <UsageFault_Handler+0x4>

08004888 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800488c:	bf00      	nop
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
	...

08004898 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800489c:	4802      	ldr	r0, [pc, #8]	@ (80048a8 <TIM6_DAC_IRQHandler+0x10>)
 800489e:	f008 f8d0 	bl	800ca42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80048a2:	bf00      	nop
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20001524 	.word	0x20001524

080048ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80048b0:	4802      	ldr	r0, [pc, #8]	@ (80048bc <OTG_FS_IRQHandler+0x10>)
 80048b2:	f002 fc5a 	bl	800716a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80048b6:	bf00      	nop
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	20011b40 	.word	0x20011b40

080048c0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80048c4:	4802      	ldr	r0, [pc, #8]	@ (80048d0 <LTDC_IRQHandler+0x10>)
 80048c6:	f004 fbc7 	bl	8009058 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80048ca:	bf00      	nop
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	20000c44 	.word	0x20000c44

080048d4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80048d8:	4802      	ldr	r0, [pc, #8]	@ (80048e4 <DMA2D_IRQHandler+0x10>)
 80048da:	f001 fd91 	bl	8006400 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80048de:	bf00      	nop
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20000aac 	.word	0x20000aac

080048e8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt (USART6_RX).
  */
void DMA2_Stream1_IRQHandler(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80048ec:	4802      	ldr	r0, [pc, #8]	@ (80048f8 <DMA2_Stream1_IRQHandler+0x10>)
 80048ee:	f001 fac7 	bl	8005e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80048f2:	bf00      	nop
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	200014b0 	.word	0x200014b0

080048fc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  
  // IDLE 인터럽트 체크 (메시지 끝 감지)
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 8004900:	4b09      	ldr	r3, [pc, #36]	@ (8004928 <USART6_IRQHandler+0x2c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f003 0310 	and.w	r3, r3, #16
 800490a:	2b10      	cmp	r3, #16
 800490c:	d106      	bne.n	800491c <USART6_IRQHandler+0x20>
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);  // IDLE 플래그 클리어
 800490e:	4b06      	ldr	r3, [pc, #24]	@ (8004928 <USART6_IRQHandler+0x2c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2210      	movs	r2, #16
 8004914:	621a      	str	r2, [r3, #32]
    
    // 외부 함수 호출
    extern void USER_UART_IDLECallback(UART_HandleTypeDef *huart);
    USER_UART_IDLECallback(&huart6);
 8004916:	4804      	ldr	r0, [pc, #16]	@ (8004928 <USART6_IRQHandler+0x2c>)
 8004918:	f000 fb1e 	bl	8004f58 <USER_UART_IDLECallback>
  }

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800491c:	4802      	ldr	r0, [pc, #8]	@ (8004928 <USART6_IRQHandler+0x2c>)
 800491e:	f009 fadb 	bl	800ded8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004922:	bf00      	nop
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	200011e4 	.word	0x200011e4

0800492c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004934:	4a14      	ldr	r2, [pc, #80]	@ (8004988 <_sbrk+0x5c>)
 8004936:	4b15      	ldr	r3, [pc, #84]	@ (800498c <_sbrk+0x60>)
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004940:	4b13      	ldr	r3, [pc, #76]	@ (8004990 <_sbrk+0x64>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d102      	bne.n	800494e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004948:	4b11      	ldr	r3, [pc, #68]	@ (8004990 <_sbrk+0x64>)
 800494a:	4a12      	ldr	r2, [pc, #72]	@ (8004994 <_sbrk+0x68>)
 800494c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800494e:	4b10      	ldr	r3, [pc, #64]	@ (8004990 <_sbrk+0x64>)
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4413      	add	r3, r2
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	429a      	cmp	r2, r3
 800495a:	d207      	bcs.n	800496c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800495c:	f011 faa6 	bl	8015eac <__errno>
 8004960:	4603      	mov	r3, r0
 8004962:	220c      	movs	r2, #12
 8004964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004966:	f04f 33ff 	mov.w	r3, #4294967295
 800496a:	e009      	b.n	8004980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800496c:	4b08      	ldr	r3, [pc, #32]	@ (8004990 <_sbrk+0x64>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004972:	4b07      	ldr	r3, [pc, #28]	@ (8004990 <_sbrk+0x64>)
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4413      	add	r3, r2
 800497a:	4a05      	ldr	r2, [pc, #20]	@ (8004990 <_sbrk+0x64>)
 800497c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800497e:	68fb      	ldr	r3, [r7, #12]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	20050000 	.word	0x20050000
 800498c:	00000400 	.word	0x00000400
 8004990:	20001570 	.word	0x20001570
 8004994:	20012068 	.word	0x20012068

08004998 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800499c:	4b06      	ldr	r3, [pc, #24]	@ (80049b8 <SystemInit+0x20>)
 800499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a2:	4a05      	ldr	r2, [pc, #20]	@ (80049b8 <SystemInit+0x20>)
 80049a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049ac:	bf00      	nop
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	e000ed00 	.word	0xe000ed00

080049bc <TIME_GetCurrentMs>:
// ============================================================================
// 기본 시간 함수
// ============================================================================

uint32_t TIME_GetCurrentMs(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
    return TIME_Platform_GetCurrentMs();
 80049c0:	f000 f803 	bl	80049ca <TIME_Platform_GetCurrentMs>
 80049c4:	4603      	mov	r3, r0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	bd80      	pop	{r7, pc}

080049ca <TIME_Platform_GetCurrentMs>:
#include "time.h"
#include "stm32f7xx_hal.h"

// STM32용 플랫폼 함수들
uint32_t TIME_Platform_GetCurrentMs(void)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // HAL_GetTick()은 1ms 단위로 시간을 반환
 80049ce:	f000 fba1 	bl	8005114 <HAL_GetTick>
 80049d2:	4603      	mov	r3, r0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d102      	bne.n	80049ee <LOGGER_Connect+0x16>
 80049e8:	f04f 33ff 	mov.w	r3, #4294967295
 80049ec:	e016      	b.n	8004a1c <LOGGER_Connect+0x44>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 80049ee:	223f      	movs	r2, #63	@ 0x3f
 80049f0:	6879      	ldr	r1, [r7, #4]
 80049f2:	480c      	ldr	r0, [pc, #48]	@ (8004a24 <LOGGER_Connect+0x4c>)
 80049f4:	f011 fa20 	bl	8015e38 <strncpy>
    current_config.server_port = port;
 80049f8:	4a0b      	ldr	r2, [pc, #44]	@ (8004a28 <LOGGER_Connect+0x50>)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 80049fe:	6839      	ldr	r1, [r7, #0]
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f8f1 	bl	8004be8 <LOGGER_Platform_Connect>
 8004a06:	4603      	mov	r3, r0
 8004a08:	73fb      	strb	r3, [r7, #15]
    if (status == LOGGER_STATUS_OK) {
 8004a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d102      	bne.n	8004a18 <LOGGER_Connect+0x40>
        logger_connected = true;
 8004a12:	4b06      	ldr	r3, [pc, #24]	@ (8004a2c <LOGGER_Connect+0x54>)
 8004a14:	2201      	movs	r2, #1
 8004a16:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8004a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	20000023 	.word	0x20000023
 8004a28:	20000020 	.word	0x20000020
 8004a2c:	20001574 	.word	0x20001574

08004a30 <LOGGER_SetFilterLevel>:
bool LOGGER_IsConnected(void) {
    return logger_connected;
}

// Logger 제어 함수들
void LOGGER_SetFilterLevel(LogLevel min_level) {
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	71fb      	strb	r3, [r7, #7]
    filter_level = min_level;
 8004a3a:	4a04      	ldr	r2, [pc, #16]	@ (8004a4c <LOGGER_SetFilterLevel+0x1c>)
 8004a3c:	79fb      	ldrb	r3, [r7, #7]
 8004a3e:	7013      	strb	r3, [r2, #0]
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	20001576 	.word	0x20001576

08004a50 <LOGGER_SetMode>:

void LOGGER_SetMode(LoggerMode_t mode) {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	4603      	mov	r3, r0
 8004a58:	71fb      	strb	r3, [r7, #7]
    current_mode = mode;
 8004a5a:	4a0d      	ldr	r2, [pc, #52]	@ (8004a90 <LOGGER_SetMode+0x40>)
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	7013      	strb	r3, [r2, #0]
    
    // 모드에 따른 연결 상태 설정
    if (mode == LOGGER_MODE_TERMINAL_ONLY) {
 8004a60:	79fb      	ldrb	r3, [r7, #7]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d103      	bne.n	8004a6e <LOGGER_SetMode+0x1e>
        logger_connected = true;  // 터미널은 항상 연결됨
 8004a66:	4b0b      	ldr	r3, [pc, #44]	@ (8004a94 <LOGGER_SetMode+0x44>)
 8004a68:	2201      	movs	r2, #1
 8004a6a:	701a      	strb	r2, [r3, #0]
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
        // SD 백엔드 사용 시 Network 연결 상태에 따라 결정
        logger_connected = Network_IsConnected();
    }
}
 8004a6c:	e00b      	b.n	8004a86 <LOGGER_SetMode+0x36>
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
 8004a6e:	79fb      	ldrb	r3, [r7, #7]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d002      	beq.n	8004a7a <LOGGER_SetMode+0x2a>
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d105      	bne.n	8004a86 <LOGGER_SetMode+0x36>
        logger_connected = Network_IsConnected();
 8004a7a:	f7fc f9d1 	bl	8000e20 <Network_IsConnected>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	461a      	mov	r2, r3
 8004a82:	4b04      	ldr	r3, [pc, #16]	@ (8004a94 <LOGGER_SetMode+0x44>)
 8004a84:	701a      	strb	r2, [r3, #0]
}
 8004a86:	bf00      	nop
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20001575 	.word	0x20001575
 8004a94:	20001574 	.word	0x20001574

08004a98 <LOGGER_SendFormatted>:

LoggerMode_t LOGGER_GetMode(void) {
    return current_mode;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 8004a98:	b40e      	push	{r1, r2, r3}
 8004a9a:	b590      	push	{r4, r7, lr}
 8004a9c:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004aa8:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8004aac:	701a      	strb	r2, [r3, #0]
    // 필터 레벨 체크
    if (level < filter_level) return;
 8004aae:	4b49      	ldr	r3, [pc, #292]	@ (8004bd4 <LOGGER_SendFormatted+0x13c>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004ab6:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 8004aba:	7812      	ldrb	r2, [r2, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d37b      	bcc.n	8004bb8 <LOGGER_SendFormatted+0x120>
    if (level < current_config.level) return;
 8004ac0:	4b45      	ldr	r3, [pc, #276]	@ (8004bd8 <LOGGER_SendFormatted+0x140>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004ac8:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 8004acc:	7812      	ldrb	r2, [r2, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d374      	bcc.n	8004bbc <LOGGER_SendFormatted+0x124>
    
    char buffer[512];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 8004ad2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ad6:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004ada:	4a40      	ldr	r2, [pc, #256]	@ (8004bdc <LOGGER_SendFormatted+0x144>)
 8004adc:	461c      	mov	r4, r3
 8004ade:	4613      	mov	r3, r2
 8004ae0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ae2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 레벨 문자열 추가
    int offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 8004ae6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004aea:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8004aee:	781a      	ldrb	r2, [r3, #0]
 8004af0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004af4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004afc:	f107 001c 	add.w	r0, r7, #28
 8004b00:	4a37      	ldr	r2, [pc, #220]	@ (8004be0 <LOGGER_SendFormatted+0x148>)
 8004b02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004b06:	f011 f8fb 	bl	8015d00 <sniprintf>
 8004b0a:	f8c7 021c 	str.w	r0, [r7, #540]	@ 0x21c
    
    // 가변 인수 처리
    va_list args;
    va_start(args, format);
 8004b0e:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8004b12:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b16:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004b1a:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, sizeof(buffer) - offset, format, args);
 8004b1c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004b20:	f107 021c 	add.w	r2, r7, #28
 8004b24:	18d0      	adds	r0, r2, r3
 8004b26:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004b2a:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 8004b2e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b32:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8004b3c:	f011 f966 	bl	8015e0c <vsniprintf>
    va_end(args);
    
    // 모드에 따른 출력 처리
    switch (current_mode) {
 8004b40:	4b28      	ldr	r3, [pc, #160]	@ (8004be4 <LOGGER_SendFormatted+0x14c>)
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d01f      	beq.n	8004b88 <LOGGER_SendFormatted+0xf0>
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	dc3c      	bgt.n	8004bc6 <LOGGER_SendFormatted+0x12e>
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <LOGGER_SendFormatted+0xbe>
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d006      	beq.n	8004b62 <LOGGER_SendFormatted+0xca>
 8004b54:	e037      	b.n	8004bc6 <LOGGER_SendFormatted+0x12e>
        case LOGGER_MODE_TERMINAL_ONLY:
            LOGGER_Platform_Send(buffer);
 8004b56:	f107 031c 	add.w	r3, r7, #28
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 f850 	bl	8004c00 <LOGGER_Platform_Send>
            break;
 8004b60:	e031      	b.n	8004bc6 <LOGGER_SendFormatted+0x12e>
            
        case LOGGER_MODE_SD_ONLY:
            if (Network_IsConnected()) {
 8004b62:	f7fc f95d 	bl	8000e20 <Network_IsConnected>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d029      	beq.n	8004bc0 <LOGGER_SendFormatted+0x128>
                Network_SendBinary(buffer, strlen(buffer) + 1);
 8004b6c:	f107 031c 	add.w	r3, r7, #28
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fb fb57 	bl	8000224 <strlen>
 8004b76:	4603      	mov	r3, r0
 8004b78:	1c5a      	adds	r2, r3, #1
 8004b7a:	f107 031c 	add.w	r3, r7, #28
 8004b7e:	4611      	mov	r1, r2
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fc f903 	bl	8000d8c <Network_SendBinary>
            }
            break;
 8004b86:	e01b      	b.n	8004bc0 <LOGGER_SendFormatted+0x128>
            
        case LOGGER_MODE_DUAL:
            // 터미널 출력 (실시간)
            LOGGER_Platform_Send(buffer);
 8004b88:	f107 031c 	add.w	r3, r7, #28
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 f837 	bl	8004c00 <LOGGER_Platform_Send>
            // SD 출력 (에러 무시)
            if (Network_IsConnected()) {
 8004b92:	f7fc f945 	bl	8000e20 <Network_IsConnected>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d013      	beq.n	8004bc4 <LOGGER_SendFormatted+0x12c>
                Network_SendBinary(buffer, strlen(buffer) + 1);
 8004b9c:	f107 031c 	add.w	r3, r7, #28
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fb fb3f 	bl	8000224 <strlen>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	f107 031c 	add.w	r3, r7, #28
 8004bae:	4611      	mov	r1, r2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7fc f8eb 	bl	8000d8c <Network_SendBinary>
            }
            break;
 8004bb6:	e005      	b.n	8004bc4 <LOGGER_SendFormatted+0x12c>
    if (level < filter_level) return;
 8004bb8:	bf00      	nop
 8004bba:	e004      	b.n	8004bc6 <LOGGER_SendFormatted+0x12e>
    if (level < current_config.level) return;
 8004bbc:	bf00      	nop
 8004bbe:	e002      	b.n	8004bc6 <LOGGER_SendFormatted+0x12e>
            break;
 8004bc0:	bf00      	nop
 8004bc2:	e000      	b.n	8004bc6 <LOGGER_SendFormatted+0x12e>
            break;
 8004bc4:	bf00      	nop
    }
}
 8004bc6:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004bd0:	b003      	add	sp, #12
 8004bd2:	4770      	bx	lr
 8004bd4:	20001576 	.word	0x20001576
 8004bd8:	20000020 	.word	0x20000020
 8004bdc:	08019094 	.word	0x08019094
 8004be0:	080190a4 	.word	0x080190a4
 8004be4:	20001575 	.word	0x20001575

08004be8 <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d102      	bne.n	8004c14 <LOGGER_Platform_Send+0x14>
 8004c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c12:	e01c      	b.n	8004c4e <LOGGER_Platform_Send+0x4e>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7fb fb05 	bl	8000224 <strlen>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	dd12      	ble.n	8004c4a <LOGGER_Platform_Send+0x4a>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c2c:	6879      	ldr	r1, [r7, #4]
 8004c2e:	480a      	ldr	r0, [pc, #40]	@ (8004c58 <LOGGER_Platform_Send+0x58>)
 8004c30:	f008 ff2a 	bl	800da88 <HAL_UART_Transmit>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d107      	bne.n	8004c4a <LOGGER_Platform_Send+0x4a>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 8004c3a:	2364      	movs	r3, #100	@ 0x64
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	4907      	ldr	r1, [pc, #28]	@ (8004c5c <LOGGER_Platform_Send+0x5c>)
 8004c40:	4805      	ldr	r0, [pc, #20]	@ (8004c58 <LOGGER_Platform_Send+0x58>)
 8004c42:	f008 ff21 	bl	800da88 <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	e001      	b.n	8004c4e <LOGGER_Platform_Send+0x4e>
        }
    }
    return LOGGER_STATUS_ERROR;
 8004c4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	2000115c 	.word	0x2000115c
 8004c5c:	080190a8 	.word	0x080190a8

08004c60 <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 8004c68:	4b19      	ldr	r3, [pc, #100]	@ (8004cd0 <UART_Send+0x70>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	f083 0301 	eor.w	r3, r3, #1
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d005      	beq.n	8004c82 <UART_Send+0x22>
        LOG_ERROR("[UART] Send failed: not connected");
 8004c76:	4917      	ldr	r1, [pc, #92]	@ (8004cd4 <UART_Send+0x74>)
 8004c78:	2003      	movs	r0, #3
 8004c7a:	f7ff ff0d 	bl	8004a98 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e022      	b.n	8004cc8 <UART_Send+0x68>
    }

    if (data == NULL) {
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d105      	bne.n	8004c94 <UART_Send+0x34>
        LOG_ERROR("[UART] Send failed: NULL data");
 8004c88:	4913      	ldr	r1, [pc, #76]	@ (8004cd8 <UART_Send+0x78>)
 8004c8a:	2003      	movs	r0, #3
 8004c8c:	f7ff ff04 	bl	8004a98 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e019      	b.n	8004cc8 <UART_Send+0x68>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	4911      	ldr	r1, [pc, #68]	@ (8004cdc <UART_Send+0x7c>)
 8004c98:	2000      	movs	r0, #0
 8004c9a:	f7ff fefd 	bl	8004a98 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f850 	bl	8004d44 <UART_Platform_Send>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d105      	bne.n	8004cba <UART_Send+0x5a>
        LOG_DEBUG("[UART] Send successful: %s", data);
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	490b      	ldr	r1, [pc, #44]	@ (8004ce0 <UART_Send+0x80>)
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	f7ff fef0 	bl	8004a98 <LOGGER_SendFormatted>
 8004cb8:	e005      	b.n	8004cc6 <UART_Send+0x66>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	4909      	ldr	r1, [pc, #36]	@ (8004ce4 <UART_Send+0x84>)
 8004cc0:	2003      	movs	r0, #3
 8004cc2:	f7ff fee9 	bl	8004a98 <LOGGER_SendFormatted>
    }

    return status;
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20001577 	.word	0x20001577
 8004cd4:	08019138 	.word	0x08019138
 8004cd8:	0801915c 	.word	0x0801915c
 8004cdc:	0801917c 	.word	0x0801917c
 8004ce0:	08019194 	.word	0x08019194
 8004ce4:	080191b0 	.word	0x080191b0

08004ce8 <flush_rx_buffer>:
// 내부 상태 변수들
static bool uart_initialized = false;
static bool dma_receiving = false;

// 수신 버퍼 플러시 함수
static void flush_rx_buffer(void) {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
    uint8_t dummy;
    int flush_count = 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	607b      	str	r3, [r7, #4]
    
    // 방법 1: 직접 레지스터 체크로 기존 데이터 클리어
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8004cf2:	e007      	b.n	8004d04 <flush_rx_buffer+0x1c>
        dummy = (uint8_t)(huart6.Instance->RDR & 0xFF);
 8004cf4:	4b12      	ldr	r3, [pc, #72]	@ (8004d40 <flush_rx_buffer+0x58>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	70fb      	strb	r3, [r7, #3]
        flush_count++;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3301      	adds	r3, #1
 8004d02:	607b      	str	r3, [r7, #4]
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8004d04:	4b0e      	ldr	r3, [pc, #56]	@ (8004d40 <flush_rx_buffer+0x58>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	f003 0320 	and.w	r3, r3, #32
 8004d0e:	2b20      	cmp	r3, #32
 8004d10:	d106      	bne.n	8004d20 <flush_rx_buffer+0x38>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b63      	cmp	r3, #99	@ 0x63
 8004d16:	dded      	ble.n	8004cf4 <flush_rx_buffer+0xc>
    }
    
    // 방법 2: HAL로 남은 데이터 클리어 (타임아웃 1ms)
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8004d18:	e002      	b.n	8004d20 <flush_rx_buffer+0x38>
        flush_count++;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	607b      	str	r3, [r7, #4]
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8004d20:	1cf9      	adds	r1, r7, #3
 8004d22:	2301      	movs	r3, #1
 8004d24:	2201      	movs	r2, #1
 8004d26:	4806      	ldr	r0, [pc, #24]	@ (8004d40 <flush_rx_buffer+0x58>)
 8004d28:	f008 ff37 	bl	800db9a <HAL_UART_Receive>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d102      	bne.n	8004d38 <flush_rx_buffer+0x50>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b63      	cmp	r3, #99	@ 0x63
 8004d36:	ddf0      	ble.n	8004d1a <flush_rx_buffer+0x32>
    }
}
 8004d38:	bf00      	nop
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	200011e4 	.word	0x200011e4

08004d44 <UART_Platform_Send>:
    uart_initialized = false;
    
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d006      	beq.n	8004d60 <UART_Platform_Send+0x1c>
 8004d52:	4b17      	ldr	r3, [pc, #92]	@ (8004db0 <UART_Platform_Send+0x6c>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	f083 0301 	eor.w	r3, r3, #1
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <UART_Platform_Send+0x20>
 8004d60:	2301      	movs	r3, #1
 8004d62:	e021      	b.n	8004da8 <UART_Platform_Send+0x64>
    
    int len = strlen(data);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7fb fa5d 	bl	8000224 <strlen>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	60fb      	str	r3, [r7, #12]
    if (len == 0) return UART_STATUS_OK;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <UART_Platform_Send+0x34>
 8004d74:	2300      	movs	r3, #0
 8004d76:	e017      	b.n	8004da8 <UART_Platform_Send+0x64>
    
    // 송신 전 수신 버퍼 플러시 (깨끗한 상태에서 시작)
    flush_rx_buffer();
 8004d78:	f7ff ffb6 	bl	8004ce8 <flush_rx_buffer>
    
    // 단순한 송신
    HAL_StatusTypeDef tx_status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	480b      	ldr	r0, [pc, #44]	@ (8004db4 <UART_Platform_Send+0x70>)
 8004d88:	f008 fe7e 	bl	800da88 <HAL_UART_Transmit>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	72fb      	strb	r3, [r7, #11]
    
    if (tx_status == HAL_OK) {
 8004d90:	7afb      	ldrb	r3, [r7, #11]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <UART_Platform_Send+0x56>
        return UART_STATUS_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	e006      	b.n	8004da8 <UART_Platform_Send+0x64>
    } else {
        LOG_ERROR("[UART_STM32] ✗ Transmission failed (HAL status: %d)", tx_status);
 8004d9a:	7afb      	ldrb	r3, [r7, #11]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4906      	ldr	r1, [pc, #24]	@ (8004db8 <UART_Platform_Send+0x74>)
 8004da0:	2003      	movs	r0, #3
 8004da2:	f7ff fe79 	bl	8004a98 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004da6:	2301      	movs	r3, #1
    }
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	2000177c 	.word	0x2000177c
 8004db4:	200011e4 	.word	0x200011e4
 8004db8:	08019744 	.word	0x08019744

08004dbc <HAL_UART_RxCpltCallback>:
// ============================================================================
// HAL UART 콜백 함수들 - main.c에서 이동됨
// ============================================================================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8004df4 <HAL_UART_RxCpltCallback+0x38>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d10e      	bne.n	8004dec <HAL_UART_RxCpltCallback+0x30>
  {
    // DMA 수신 완료 (전체 버퍼) - 거의 발생하지 않음
    uart_rx_complete_flag = 1;
 8004dce:	4b0a      	ldr	r3, [pc, #40]	@ (8004df8 <HAL_UART_RxCpltCallback+0x3c>)
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	701a      	strb	r2, [r3, #0]
    uart_rx_length = sizeof(rx_buffer);
 8004dd4:	4b09      	ldr	r3, [pc, #36]	@ (8004dfc <HAL_UART_RxCpltCallback+0x40>)
 8004dd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dda:	801a      	strh	r2, [r3, #0]
    LOG_INFO("[DMA] RxCpltCallback: Full buffer received (%d bytes)", uart_rx_length);
 8004ddc:	4b07      	ldr	r3, [pc, #28]	@ (8004dfc <HAL_UART_RxCpltCallback+0x40>)
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	461a      	mov	r2, r3
 8004de4:	4906      	ldr	r1, [pc, #24]	@ (8004e00 <HAL_UART_RxCpltCallback+0x44>)
 8004de6:	2001      	movs	r0, #1
 8004de8:	f7ff fe56 	bl	8004a98 <LOGGER_SendFormatted>
  }
}
 8004dec:	bf00      	nop
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40011400 	.word	0x40011400
 8004df8:	20001578 	.word	0x20001578
 8004dfc:	2000157a 	.word	0x2000157a
 8004e00:	08019908 	.word	0x08019908

08004e04 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a05      	ldr	r2, [pc, #20]	@ (8004e28 <HAL_UART_RxHalfCpltCallback+0x24>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d103      	bne.n	8004e1e <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    // DMA 수신 절반 완료 - NORMAL 모드에서는 처리하지 않음 (IDLE 인터럽트가 처리)
    LOG_WARN("[DMA] RxHalfCpltCallback: Half buffer reached but ignoring in NORMAL mode");
 8004e16:	4905      	ldr	r1, [pc, #20]	@ (8004e2c <HAL_UART_RxHalfCpltCallback+0x28>)
 8004e18:	2002      	movs	r0, #2
 8004e1a:	f7ff fe3d 	bl	8004a98 <LOGGER_SendFormatted>
    // uart_rx_complete_flag는 설정하지 않음 - IDLE 인터럽트에서만 설정
  }
}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40011400 	.word	0x40011400
 8004e2c:	08019940 	.word	0x08019940

08004e30 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a3c      	ldr	r2, [pc, #240]	@ (8004f30 <HAL_UART_ErrorCallback+0x100>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d171      	bne.n	8004f26 <HAL_UART_ErrorCallback+0xf6>
  {
    // UART 에러 발생
    uart_rx_error_flag = 1;
 8004e42:	4b3c      	ldr	r3, [pc, #240]	@ (8004f34 <HAL_UART_ErrorCallback+0x104>)
 8004e44:	2201      	movs	r2, #1
 8004e46:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[DMA] ErrorCallback: UART error occurred");
 8004e48:	493b      	ldr	r1, [pc, #236]	@ (8004f38 <HAL_UART_ErrorCallback+0x108>)
 8004e4a:	2002      	movs	r0, #2
 8004e4c:	f7ff fe24 	bl	8004a98 <LOGGER_SendFormatted>
    
    // 모든 에러 플래그 클리어
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	f003 0308 	and.w	r3, r3, #8
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	d107      	bne.n	8004e6e <HAL_UART_ErrorCallback+0x3e>
      __HAL_UART_CLEAR_OREFLAG(huart);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2208      	movs	r2, #8
 8004e64:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Overrun error cleared");
 8004e66:	4935      	ldr	r1, [pc, #212]	@ (8004f3c <HAL_UART_ErrorCallback+0x10c>)
 8004e68:	2002      	movs	r0, #2
 8004e6a:	f7ff fe15 	bl	8004a98 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d107      	bne.n	8004e8c <HAL_UART_ErrorCallback+0x5c>
      __HAL_UART_CLEAR_NEFLAG(huart);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2204      	movs	r2, #4
 8004e82:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Noise error cleared");
 8004e84:	492e      	ldr	r1, [pc, #184]	@ (8004f40 <HAL_UART_ErrorCallback+0x110>)
 8004e86:	2002      	movs	r0, #2
 8004e88:	f7ff fe06 	bl	8004a98 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) {
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d107      	bne.n	8004eaa <HAL_UART_ErrorCallback+0x7a>
      __HAL_UART_CLEAR_FEFLAG(huart);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Frame error cleared");
 8004ea2:	4928      	ldr	r1, [pc, #160]	@ (8004f44 <HAL_UART_ErrorCallback+0x114>)
 8004ea4:	2002      	movs	r0, #2
 8004ea6:	f7ff fdf7 	bl	8004a98 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) {
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d107      	bne.n	8004ec8 <HAL_UART_ErrorCallback+0x98>
      __HAL_UART_CLEAR_PEFLAG(huart);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Parity error cleared");
 8004ec0:	4921      	ldr	r1, [pc, #132]	@ (8004f48 <HAL_UART_ErrorCallback+0x118>)
 8004ec2:	2002      	movs	r0, #2
 8004ec4:	f7ff fde8 	bl	8004a98 <LOGGER_SendFormatted>
    }
    
    // UART와 DMA 상태 강제 리셋
    HAL_UART_DMAStop(huart);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f008 ff72 	bl	800ddb2 <HAL_UART_DMAStop>
    huart->gState = HAL_UART_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (huart->hdmarx != NULL) {
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d004      	beq.n	8004eee <HAL_UART_ErrorCallback+0xbe>
      huart->hdmarx->State = HAL_DMA_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 버퍼 클리어 후 DMA 재시작 (일반 모드)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8004eee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	4815      	ldr	r0, [pc, #84]	@ (8004f4c <HAL_UART_ErrorCallback+0x11c>)
 8004ef6:	f010 ff97 	bl	8015e28 <memset>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8004efa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004efe:	4913      	ldr	r1, [pc, #76]	@ (8004f4c <HAL_UART_ErrorCallback+0x11c>)
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f008 ff12 	bl	800dd2a <HAL_UART_Receive_DMA>
 8004f06:	4603      	mov	r3, r0
 8004f08:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d104      	bne.n	8004f1a <HAL_UART_ErrorCallback+0xea>
      LOG_INFO("[DMA] Error recovery: DMA restarted successfully");
 8004f10:	490f      	ldr	r1, [pc, #60]	@ (8004f50 <HAL_UART_ErrorCallback+0x120>)
 8004f12:	2001      	movs	r0, #1
 8004f14:	f7ff fdc0 	bl	8004a98 <LOGGER_SendFormatted>
    } else {
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
    }
  }
}
 8004f18:	e005      	b.n	8004f26 <HAL_UART_ErrorCallback+0xf6>
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	490d      	ldr	r1, [pc, #52]	@ (8004f54 <HAL_UART_ErrorCallback+0x124>)
 8004f20:	2003      	movs	r0, #3
 8004f22:	f7ff fdb9 	bl	8004a98 <LOGGER_SendFormatted>
}
 8004f26:	bf00      	nop
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40011400 	.word	0x40011400
 8004f34:	20001579 	.word	0x20001579
 8004f38:	0801998c 	.word	0x0801998c
 8004f3c:	080199b8 	.word	0x080199b8
 8004f40:	080199d4 	.word	0x080199d4
 8004f44:	080199f0 	.word	0x080199f0
 8004f48:	08019a0c 	.word	0x08019a0c
 8004f4c:	2000157c 	.word	0x2000157c
 8004f50:	08019a28 	.word	0x08019a28
 8004f54:	08019a5c 	.word	0x08019a5c

08004f58 <USER_UART_IDLECallback>:

// UART IDLE 인터럽트 콜백 (메시지 끝 감지)
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a3e      	ldr	r2, [pc, #248]	@ (8005060 <USER_UART_IDLECallback+0x108>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d175      	bne.n	8005056 <USER_UART_IDLECallback+0xfe>
  {
    // UART 에러 상태 체크
    uint32_t error_flags = 0;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) error_flags |= 0x01;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d103      	bne.n	8004f84 <USER_UART_IDLECallback+0x2c>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) error_flags |= 0x02;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d103      	bne.n	8004f9a <USER_UART_IDLECallback+0x42>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f043 0302 	orr.w	r3, r3, #2
 8004f98:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) error_flags |= 0x04;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d103      	bne.n	8004fb0 <USER_UART_IDLECallback+0x58>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f043 0304 	orr.w	r3, r3, #4
 8004fae:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) error_flags |= 0x08;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d103      	bne.n	8004fc6 <USER_UART_IDLECallback+0x6e>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f043 0308 	orr.w	r3, r3, #8
 8004fc4:	60fb      	str	r3, [r7, #12]
    
    // IDLE 감지 - 메시지 끝
    uint16_t remaining = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	817b      	strh	r3, [r7, #10]
    uart_rx_length = sizeof(rx_buffer) - remaining;
 8004fd0:	897b      	ldrh	r3, [r7, #10]
 8004fd2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	4b22      	ldr	r3, [pc, #136]	@ (8005064 <USER_UART_IDLECallback+0x10c>)
 8004fda:	801a      	strh	r2, [r3, #0]
    
    if (uart_rx_length > 0) {
 8004fdc:	4b21      	ldr	r3, [pc, #132]	@ (8005064 <USER_UART_IDLECallback+0x10c>)
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d033      	beq.n	800504e <USER_UART_IDLECallback+0xf6>
      uart_rx_complete_flag = 1;
 8004fe6:	4b20      	ldr	r3, [pc, #128]	@ (8005068 <USER_UART_IDLECallback+0x110>)
 8004fe8:	2201      	movs	r2, #1
 8004fea:	701a      	strb	r2, [r3, #0]
      if (error_flags != 0) {
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d009      	beq.n	8005006 <USER_UART_IDLECallback+0xae>
        LOG_WARN("[DMA] IDLE detected: %d bytes received (UART errors: 0x%02lX)", uart_rx_length, error_flags);
 8004ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8005064 <USER_UART_IDLECallback+0x10c>)
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	491b      	ldr	r1, [pc, #108]	@ (800506c <USER_UART_IDLECallback+0x114>)
 8004ffe:	2002      	movs	r0, #2
 8005000:	f7ff fd4a 	bl	8004a98 <LOGGER_SendFormatted>
 8005004:	e007      	b.n	8005016 <USER_UART_IDLECallback+0xbe>
      } else {
        LOG_INFO("[DMA] IDLE detected: %d bytes received", uart_rx_length);
 8005006:	4b17      	ldr	r3, [pc, #92]	@ (8005064 <USER_UART_IDLECallback+0x10c>)
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	b29b      	uxth	r3, r3
 800500c:	461a      	mov	r2, r3
 800500e:	4918      	ldr	r1, [pc, #96]	@ (8005070 <USER_UART_IDLECallback+0x118>)
 8005010:	2001      	movs	r0, #1
 8005012:	f7ff fd41 	bl	8004a98 <LOGGER_SendFormatted>
      }
      
      // 첫 몇 바이트 확인 (디버깅용)
      if (uart_rx_length >= 4) {
 8005016:	4b13      	ldr	r3, [pc, #76]	@ (8005064 <USER_UART_IDLECallback+0x10c>)
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	b29b      	uxth	r3, r3
 800501c:	2b03      	cmp	r3, #3
 800501e:	d912      	bls.n	8005046 <USER_UART_IDLECallback+0xee>
        LOG_DEBUG("[DMA] First 4 bytes: %02X %02X %02X %02X", 
 8005020:	4b14      	ldr	r3, [pc, #80]	@ (8005074 <USER_UART_IDLECallback+0x11c>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	4619      	mov	r1, r3
 8005026:	4b13      	ldr	r3, [pc, #76]	@ (8005074 <USER_UART_IDLECallback+0x11c>)
 8005028:	785b      	ldrb	r3, [r3, #1]
 800502a:	4618      	mov	r0, r3
 800502c:	4b11      	ldr	r3, [pc, #68]	@ (8005074 <USER_UART_IDLECallback+0x11c>)
 800502e:	789b      	ldrb	r3, [r3, #2]
 8005030:	461a      	mov	r2, r3
 8005032:	4b10      	ldr	r3, [pc, #64]	@ (8005074 <USER_UART_IDLECallback+0x11c>)
 8005034:	78db      	ldrb	r3, [r3, #3]
 8005036:	9301      	str	r3, [sp, #4]
 8005038:	9200      	str	r2, [sp, #0]
 800503a:	4603      	mov	r3, r0
 800503c:	460a      	mov	r2, r1
 800503e:	490e      	ldr	r1, [pc, #56]	@ (8005078 <USER_UART_IDLECallback+0x120>)
 8005040:	2000      	movs	r0, #0
 8005042:	f7ff fd29 	bl	8004a98 <LOGGER_SendFormatted>
                  rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
      }
      
      // DMA 중지 (일반 모드에서는 자동으로 완료됨)
      HAL_UART_DMAStop(huart);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f008 feb3 	bl	800ddb2 <HAL_UART_DMAStop>
      // 다음 수신을 위해 즉시 재시작하지 않음 - uart_stm32.c에서 처리
    } else {
      LOG_DEBUG("[DMA] IDLE detected but no data");
    }
  }
}
 800504c:	e003      	b.n	8005056 <USER_UART_IDLECallback+0xfe>
      LOG_DEBUG("[DMA] IDLE detected but no data");
 800504e:	490b      	ldr	r1, [pc, #44]	@ (800507c <USER_UART_IDLECallback+0x124>)
 8005050:	2000      	movs	r0, #0
 8005052:	f7ff fd21 	bl	8004a98 <LOGGER_SendFormatted>
}
 8005056:	bf00      	nop
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40011400 	.word	0x40011400
 8005064:	2000157a 	.word	0x2000157a
 8005068:	20001578 	.word	0x20001578
 800506c:	08019a94 	.word	0x08019a94
 8005070:	08019ad4 	.word	0x08019ad4
 8005074:	2000157c 	.word	0x2000157c
 8005078:	08019afc 	.word	0x08019afc
 800507c:	08019b28 	.word	0x08019b28

08005080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005080:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80050b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005084:	f7ff fc88 	bl	8004998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005088:	480c      	ldr	r0, [pc, #48]	@ (80050bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800508a:	490d      	ldr	r1, [pc, #52]	@ (80050c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800508c:	4a0d      	ldr	r2, [pc, #52]	@ (80050c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800508e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005090:	e002      	b.n	8005098 <LoopCopyDataInit>

08005092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005096:	3304      	adds	r3, #4

08005098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800509a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800509c:	d3f9      	bcc.n	8005092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800509e:	4a0a      	ldr	r2, [pc, #40]	@ (80050c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80050a0:	4c0a      	ldr	r4, [pc, #40]	@ (80050cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80050a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050a4:	e001      	b.n	80050aa <LoopFillZerobss>

080050a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050a8:	3204      	adds	r2, #4

080050aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050ac:	d3fb      	bcc.n	80050a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80050ae:	f010 ff03 	bl	8015eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050b2:	f7fc fcd1 	bl	8001a58 <main>
  bx  lr    
 80050b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80050b8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80050bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050c0:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80050c4:	08019f60 	.word	0x08019f60
  ldr r2, =_sbss
 80050c8:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 80050cc:	20012068 	.word	0x20012068

080050d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80050d0:	e7fe      	b.n	80050d0 <ADC_IRQHandler>

080050d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050d6:	2003      	movs	r0, #3
 80050d8:	f000 fb91 	bl	80057fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80050dc:	2000      	movs	r0, #0
 80050de:	f7ff fb45 	bl	800476c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80050e2:	f7fe faa7 	bl	8003634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050f0:	4b06      	ldr	r3, [pc, #24]	@ (800510c <HAL_IncTick+0x20>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	4b06      	ldr	r3, [pc, #24]	@ (8005110 <HAL_IncTick+0x24>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4413      	add	r3, r2
 80050fc:	4a04      	ldr	r2, [pc, #16]	@ (8005110 <HAL_IncTick+0x24>)
 80050fe:	6013      	str	r3, [r2, #0]
}
 8005100:	bf00      	nop
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	2000006c 	.word	0x2000006c
 8005110:	20001780 	.word	0x20001780

08005114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  return uwTick;
 8005118:	4b03      	ldr	r3, [pc, #12]	@ (8005128 <HAL_GetTick+0x14>)
 800511a:	681b      	ldr	r3, [r3, #0]
}
 800511c:	4618      	mov	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	20001780 	.word	0x20001780

0800512c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005134:	f7ff ffee 	bl	8005114 <HAL_GetTick>
 8005138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005144:	d005      	beq.n	8005152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005146:	4b0a      	ldr	r3, [pc, #40]	@ (8005170 <HAL_Delay+0x44>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4413      	add	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005152:	bf00      	nop
 8005154:	f7ff ffde 	bl	8005114 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	429a      	cmp	r2, r3
 8005162:	d8f7      	bhi.n	8005154 <HAL_Delay+0x28>
  {
  }
}
 8005164:	bf00      	nop
 8005166:	bf00      	nop
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	2000006c 	.word	0x2000006c

08005174 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800517c:	2300      	movs	r3, #0
 800517e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e031      	b.n	80051ee <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d109      	bne.n	80051a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fe fa76 	bl	8003684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051aa:	f003 0310 	and.w	r3, r3, #16
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d116      	bne.n	80051e0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051b6:	4b10      	ldr	r3, [pc, #64]	@ (80051f8 <HAL_ADC_Init+0x84>)
 80051b8:	4013      	ands	r3, r2
 80051ba:	f043 0202 	orr.w	r2, r3, #2
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f974 	bl	80054b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d2:	f023 0303 	bic.w	r3, r3, #3
 80051d6:	f043 0201 	orr.w	r2, r3, #1
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80051de:	e001      	b.n	80051e4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	ffffeefd 	.word	0xffffeefd

080051fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005206:	2300      	movs	r3, #0
 8005208:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_ADC_ConfigChannel+0x1c>
 8005214:	2302      	movs	r3, #2
 8005216:	e13a      	b.n	800548e <HAL_ADC_ConfigChannel+0x292>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b09      	cmp	r3, #9
 8005226:	d93a      	bls.n	800529e <HAL_ADC_ConfigChannel+0xa2>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005230:	d035      	beq.n	800529e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68d9      	ldr	r1, [r3, #12]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	b29b      	uxth	r3, r3
 800523e:	461a      	mov	r2, r3
 8005240:	4613      	mov	r3, r2
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	4413      	add	r3, r2
 8005246:	3b1e      	subs	r3, #30
 8005248:	2207      	movs	r2, #7
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	43da      	mvns	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	400a      	ands	r2, r1
 8005256:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a8f      	ldr	r2, [pc, #572]	@ (800549c <HAL_ADC_ConfigChannel+0x2a0>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d10a      	bne.n	8005278 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68d9      	ldr	r1, [r3, #12]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	061a      	lsls	r2, r3, #24
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005276:	e039      	b.n	80052ec <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68d9      	ldr	r1, [r3, #12]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	b29b      	uxth	r3, r3
 8005288:	4618      	mov	r0, r3
 800528a:	4603      	mov	r3, r0
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	4403      	add	r3, r0
 8005290:	3b1e      	subs	r3, #30
 8005292:	409a      	lsls	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800529c:	e026      	b.n	80052ec <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6919      	ldr	r1, [r3, #16]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	461a      	mov	r2, r3
 80052ac:	4613      	mov	r3, r2
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	4413      	add	r3, r2
 80052b2:	f003 031f 	and.w	r3, r3, #31
 80052b6:	2207      	movs	r2, #7
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	43da      	mvns	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	400a      	ands	r2, r1
 80052c4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6919      	ldr	r1, [r3, #16]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	4618      	mov	r0, r3
 80052d8:	4603      	mov	r3, r0
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	4403      	add	r3, r0
 80052de:	f003 031f 	and.w	r3, r3, #31
 80052e2:	409a      	lsls	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2b06      	cmp	r3, #6
 80052f2:	d824      	bhi.n	800533e <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	4613      	mov	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	3b05      	subs	r3, #5
 8005306:	221f      	movs	r2, #31
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	43da      	mvns	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	400a      	ands	r2, r1
 8005314:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	4618      	mov	r0, r3
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	4613      	mov	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	3b05      	subs	r3, #5
 8005330:	fa00 f203 	lsl.w	r2, r0, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	635a      	str	r2, [r3, #52]	@ 0x34
 800533c:	e04c      	b.n	80053d8 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b0c      	cmp	r3, #12
 8005344:	d824      	bhi.n	8005390 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	3b23      	subs	r3, #35	@ 0x23
 8005358:	221f      	movs	r2, #31
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	43da      	mvns	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	400a      	ands	r2, r1
 8005366:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	b29b      	uxth	r3, r3
 8005374:	4618      	mov	r0, r3
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	3b23      	subs	r3, #35	@ 0x23
 8005382:	fa00 f203 	lsl.w	r2, r0, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	631a      	str	r2, [r3, #48]	@ 0x30
 800538e:	e023      	b.n	80053d8 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	3b41      	subs	r3, #65	@ 0x41
 80053a2:	221f      	movs	r2, #31
 80053a4:	fa02 f303 	lsl.w	r3, r2, r3
 80053a8:	43da      	mvns	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	400a      	ands	r2, r1
 80053b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	b29b      	uxth	r3, r3
 80053be:	4618      	mov	r0, r3
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	3b41      	subs	r3, #65	@ 0x41
 80053cc:	fa00 f203 	lsl.w	r2, r0, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a30      	ldr	r2, [pc, #192]	@ (80054a0 <HAL_ADC_ConfigChannel+0x2a4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d10a      	bne.n	80053f8 <HAL_ADC_ConfigChannel+0x1fc>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053ea:	d105      	bne.n	80053f8 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80053ec:	4b2d      	ldr	r3, [pc, #180]	@ (80054a4 <HAL_ADC_ConfigChannel+0x2a8>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	4a2c      	ldr	r2, [pc, #176]	@ (80054a4 <HAL_ADC_ConfigChannel+0x2a8>)
 80053f2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80053f6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a28      	ldr	r2, [pc, #160]	@ (80054a0 <HAL_ADC_ConfigChannel+0x2a4>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d10f      	bne.n	8005422 <HAL_ADC_ConfigChannel+0x226>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b12      	cmp	r3, #18
 8005408:	d10b      	bne.n	8005422 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800540a:	4b26      	ldr	r3, [pc, #152]	@ (80054a4 <HAL_ADC_ConfigChannel+0x2a8>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	4a25      	ldr	r2, [pc, #148]	@ (80054a4 <HAL_ADC_ConfigChannel+0x2a8>)
 8005410:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005414:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005416:	4b23      	ldr	r3, [pc, #140]	@ (80054a4 <HAL_ADC_ConfigChannel+0x2a8>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	4a22      	ldr	r2, [pc, #136]	@ (80054a4 <HAL_ADC_ConfigChannel+0x2a8>)
 800541c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005420:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a1e      	ldr	r2, [pc, #120]	@ (80054a0 <HAL_ADC_ConfigChannel+0x2a4>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d12b      	bne.n	8005484 <HAL_ADC_ConfigChannel+0x288>
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a1a      	ldr	r2, [pc, #104]	@ (800549c <HAL_ADC_ConfigChannel+0x2a0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d003      	beq.n	800543e <HAL_ADC_ConfigChannel+0x242>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b11      	cmp	r3, #17
 800543c:	d122      	bne.n	8005484 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800543e:	4b19      	ldr	r3, [pc, #100]	@ (80054a4 <HAL_ADC_ConfigChannel+0x2a8>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	4a18      	ldr	r2, [pc, #96]	@ (80054a4 <HAL_ADC_ConfigChannel+0x2a8>)
 8005444:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005448:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800544a:	4b16      	ldr	r3, [pc, #88]	@ (80054a4 <HAL_ADC_ConfigChannel+0x2a8>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	4a15      	ldr	r2, [pc, #84]	@ (80054a4 <HAL_ADC_ConfigChannel+0x2a8>)
 8005450:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005454:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a10      	ldr	r2, [pc, #64]	@ (800549c <HAL_ADC_ConfigChannel+0x2a0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d111      	bne.n	8005484 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005460:	4b11      	ldr	r3, [pc, #68]	@ (80054a8 <HAL_ADC_ConfigChannel+0x2ac>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a11      	ldr	r2, [pc, #68]	@ (80054ac <HAL_ADC_ConfigChannel+0x2b0>)
 8005466:	fba2 2303 	umull	r2, r3, r2, r3
 800546a:	0c9a      	lsrs	r2, r3, #18
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005476:	e002      	b.n	800547e <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3b01      	subs	r3, #1
 800547c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1f9      	bne.n	8005478 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	10000012 	.word	0x10000012
 80054a0:	40012000 	.word	0x40012000
 80054a4:	40012300 	.word	0x40012300
 80054a8:	2000001c 	.word	0x2000001c
 80054ac:	431bde83 	.word	0x431bde83

080054b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80054b8:	4b78      	ldr	r3, [pc, #480]	@ (800569c <ADC_Init+0x1ec>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	4a77      	ldr	r2, [pc, #476]	@ (800569c <ADC_Init+0x1ec>)
 80054be:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80054c2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80054c4:	4b75      	ldr	r3, [pc, #468]	@ (800569c <ADC_Init+0x1ec>)
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	4973      	ldr	r1, [pc, #460]	@ (800569c <ADC_Init+0x1ec>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6859      	ldr	r1, [r3, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	021a      	lsls	r2, r3, #8
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005504:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6859      	ldr	r1, [r3, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005526:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6899      	ldr	r1, [r3, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553e:	4a58      	ldr	r2, [pc, #352]	@ (80056a0 <ADC_Init+0x1f0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d022      	beq.n	800558a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689a      	ldr	r2, [r3, #8]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005552:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6899      	ldr	r1, [r3, #8]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005574:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6899      	ldr	r1, [r3, #8]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	609a      	str	r2, [r3, #8]
 8005588:	e00f      	b.n	80055aa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005598:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80055a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0202 	bic.w	r2, r2, #2
 80055b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6899      	ldr	r1, [r3, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	005a      	lsls	r2, r3, #1
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01b      	beq.n	8005610 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80055f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6859      	ldr	r1, [r3, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005602:	3b01      	subs	r3, #1
 8005604:	035a      	lsls	r2, r3, #13
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	605a      	str	r2, [r3, #4]
 800560e:	e007      	b.n	8005620 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800561e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800562e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	3b01      	subs	r3, #1
 800563c:	051a      	lsls	r2, r3, #20
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005654:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6899      	ldr	r1, [r3, #8]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005662:	025a      	lsls	r2, r3, #9
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800567a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6899      	ldr	r1, [r3, #8]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	029a      	lsls	r2, r3, #10
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	609a      	str	r2, [r3, #8]
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	40012300 	.word	0x40012300
 80056a0:	0f000001 	.word	0x0f000001

080056a4 <__NVIC_SetPriorityGrouping>:
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056b4:	4b0b      	ldr	r3, [pc, #44]	@ (80056e4 <__NVIC_SetPriorityGrouping+0x40>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80056c0:	4013      	ands	r3, r2
 80056c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80056cc:	4b06      	ldr	r3, [pc, #24]	@ (80056e8 <__NVIC_SetPriorityGrouping+0x44>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056d2:	4a04      	ldr	r2, [pc, #16]	@ (80056e4 <__NVIC_SetPriorityGrouping+0x40>)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	60d3      	str	r3, [r2, #12]
}
 80056d8:	bf00      	nop
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	e000ed00 	.word	0xe000ed00
 80056e8:	05fa0000 	.word	0x05fa0000

080056ec <__NVIC_GetPriorityGrouping>:
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056f0:	4b04      	ldr	r3, [pc, #16]	@ (8005704 <__NVIC_GetPriorityGrouping+0x18>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	0a1b      	lsrs	r3, r3, #8
 80056f6:	f003 0307 	and.w	r3, r3, #7
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	e000ed00 	.word	0xe000ed00

08005708 <__NVIC_EnableIRQ>:
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	4603      	mov	r3, r0
 8005710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005716:	2b00      	cmp	r3, #0
 8005718:	db0b      	blt.n	8005732 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800571a:	79fb      	ldrb	r3, [r7, #7]
 800571c:	f003 021f 	and.w	r2, r3, #31
 8005720:	4907      	ldr	r1, [pc, #28]	@ (8005740 <__NVIC_EnableIRQ+0x38>)
 8005722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	2001      	movs	r0, #1
 800572a:	fa00 f202 	lsl.w	r2, r0, r2
 800572e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	e000e100 	.word	0xe000e100

08005744 <__NVIC_SetPriority>:
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	4603      	mov	r3, r0
 800574c:	6039      	str	r1, [r7, #0]
 800574e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005754:	2b00      	cmp	r3, #0
 8005756:	db0a      	blt.n	800576e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	b2da      	uxtb	r2, r3
 800575c:	490c      	ldr	r1, [pc, #48]	@ (8005790 <__NVIC_SetPriority+0x4c>)
 800575e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005762:	0112      	lsls	r2, r2, #4
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	440b      	add	r3, r1
 8005768:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800576c:	e00a      	b.n	8005784 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	b2da      	uxtb	r2, r3
 8005772:	4908      	ldr	r1, [pc, #32]	@ (8005794 <__NVIC_SetPriority+0x50>)
 8005774:	79fb      	ldrb	r3, [r7, #7]
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	3b04      	subs	r3, #4
 800577c:	0112      	lsls	r2, r2, #4
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	440b      	add	r3, r1
 8005782:	761a      	strb	r2, [r3, #24]
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	e000e100 	.word	0xe000e100
 8005794:	e000ed00 	.word	0xe000ed00

08005798 <NVIC_EncodePriority>:
{
 8005798:	b480      	push	{r7}
 800579a:	b089      	sub	sp, #36	@ 0x24
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	f1c3 0307 	rsb	r3, r3, #7
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	bf28      	it	cs
 80057b6:	2304      	movcs	r3, #4
 80057b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	3304      	adds	r3, #4
 80057be:	2b06      	cmp	r3, #6
 80057c0:	d902      	bls.n	80057c8 <NVIC_EncodePriority+0x30>
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	3b03      	subs	r3, #3
 80057c6:	e000      	b.n	80057ca <NVIC_EncodePriority+0x32>
 80057c8:	2300      	movs	r3, #0
 80057ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057cc:	f04f 32ff 	mov.w	r2, #4294967295
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	43da      	mvns	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	401a      	ands	r2, r3
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057e0:	f04f 31ff 	mov.w	r1, #4294967295
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ea:	43d9      	mvns	r1, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057f0:	4313      	orrs	r3, r2
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3724      	adds	r7, #36	@ 0x24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b082      	sub	sp, #8
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7ff ff4c 	bl	80056a4 <__NVIC_SetPriorityGrouping>
}
 800580c:	bf00      	nop
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	4603      	mov	r3, r0
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005822:	2300      	movs	r3, #0
 8005824:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005826:	f7ff ff61 	bl	80056ec <__NVIC_GetPriorityGrouping>
 800582a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	68b9      	ldr	r1, [r7, #8]
 8005830:	6978      	ldr	r0, [r7, #20]
 8005832:	f7ff ffb1 	bl	8005798 <NVIC_EncodePriority>
 8005836:	4602      	mov	r2, r0
 8005838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800583c:	4611      	mov	r1, r2
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff ff80 	bl	8005744 <__NVIC_SetPriority>
}
 8005844:	bf00      	nop
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	4603      	mov	r3, r0
 8005854:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800585a:	4618      	mov	r0, r3
 800585c:	f7ff ff54 	bl	8005708 <__NVIC_EnableIRQ>
}
 8005860:	bf00      	nop
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e054      	b.n	8005924 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	7f5b      	ldrb	r3, [r3, #29]
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d105      	bne.n	8005890 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7fd ff54 	bl	8003738 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	791b      	ldrb	r3, [r3, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10c      	bne.n	80058b8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a22      	ldr	r2, [pc, #136]	@ (800592c <HAL_CRC_Init+0xc4>)
 80058a4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0218 	bic.w	r2, r2, #24
 80058b4:	609a      	str	r2, [r3, #8]
 80058b6:	e00c      	b.n	80058d2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6899      	ldr	r1, [r3, #8]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	461a      	mov	r2, r3
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f834 	bl	8005930 <HAL_CRCEx_Polynomial_Set>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e028      	b.n	8005924 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	795b      	ldrb	r3, [r3, #5]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d105      	bne.n	80058e6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f04f 32ff 	mov.w	r2, #4294967295
 80058e2:	611a      	str	r2, [r3, #16]
 80058e4:	e004      	b.n	80058f0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6912      	ldr	r2, [r2, #16]
 80058ee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695a      	ldr	r2, [r3, #20]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699a      	ldr	r2, [r3, #24]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	04c11db7 	.word	0x04c11db7

08005930 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005940:	231f      	movs	r3, #31
 8005942:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d102      	bne.n	8005954 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	75fb      	strb	r3, [r7, #23]
 8005952:	e063      	b.n	8005a1c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005954:	bf00      	nop
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1e5a      	subs	r2, r3, #1
 800595a:	613a      	str	r2, [r7, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d009      	beq.n	8005974 <HAL_CRCEx_Polynomial_Set+0x44>
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f003 031f 	and.w	r3, r3, #31
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	fa22 f303 	lsr.w	r3, r2, r3
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0f0      	beq.n	8005956 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b18      	cmp	r3, #24
 8005978:	d846      	bhi.n	8005a08 <HAL_CRCEx_Polynomial_Set+0xd8>
 800597a:	a201      	add	r2, pc, #4	@ (adr r2, 8005980 <HAL_CRCEx_Polynomial_Set+0x50>)
 800597c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005980:	08005a0f 	.word	0x08005a0f
 8005984:	08005a09 	.word	0x08005a09
 8005988:	08005a09 	.word	0x08005a09
 800598c:	08005a09 	.word	0x08005a09
 8005990:	08005a09 	.word	0x08005a09
 8005994:	08005a09 	.word	0x08005a09
 8005998:	08005a09 	.word	0x08005a09
 800599c:	08005a09 	.word	0x08005a09
 80059a0:	080059fd 	.word	0x080059fd
 80059a4:	08005a09 	.word	0x08005a09
 80059a8:	08005a09 	.word	0x08005a09
 80059ac:	08005a09 	.word	0x08005a09
 80059b0:	08005a09 	.word	0x08005a09
 80059b4:	08005a09 	.word	0x08005a09
 80059b8:	08005a09 	.word	0x08005a09
 80059bc:	08005a09 	.word	0x08005a09
 80059c0:	080059f1 	.word	0x080059f1
 80059c4:	08005a09 	.word	0x08005a09
 80059c8:	08005a09 	.word	0x08005a09
 80059cc:	08005a09 	.word	0x08005a09
 80059d0:	08005a09 	.word	0x08005a09
 80059d4:	08005a09 	.word	0x08005a09
 80059d8:	08005a09 	.word	0x08005a09
 80059dc:	08005a09 	.word	0x08005a09
 80059e0:	080059e5 	.word	0x080059e5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	2b06      	cmp	r3, #6
 80059e8:	d913      	bls.n	8005a12 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80059ee:	e010      	b.n	8005a12 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	2b07      	cmp	r3, #7
 80059f4:	d90f      	bls.n	8005a16 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80059fa:	e00c      	b.n	8005a16 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	2b0f      	cmp	r3, #15
 8005a00:	d90b      	bls.n	8005a1a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005a06:	e008      	b.n	8005a1a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	75fb      	strb	r3, [r7, #23]
        break;
 8005a0c:	e006      	b.n	8005a1c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005a0e:	bf00      	nop
 8005a10:	e004      	b.n	8005a1c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005a12:	bf00      	nop
 8005a14:	e002      	b.n	8005a1c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005a16:	bf00      	nop
 8005a18:	e000      	b.n	8005a1c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005a1a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005a1c:	7dfb      	ldrb	r3, [r7, #23]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10d      	bne.n	8005a3e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f023 0118 	bic.w	r1, r3, #24
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	371c      	adds	r7, #28
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e069      	b.n	8005b32 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d102      	bne.n	8005a70 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7fd fe84 	bl	8003778 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6819      	ldr	r1, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	4b2a      	ldr	r3, [pc, #168]	@ (8005b3c <HAL_DCMI_Init+0xf0>)
 8005a92:	400b      	ands	r3, r1
 8005a94:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6819      	ldr	r1, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005aaa:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005ab6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005ac2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005ace:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005ada:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b10      	cmp	r3, #16
 8005aea:	d112      	bne.n	8005b12 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	7f1b      	ldrb	r3, [r3, #28]
 8005af0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	7f5b      	ldrb	r3, [r3, #29]
 8005af6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005af8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	7f9b      	ldrb	r3, [r3, #30]
 8005afe:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005b00:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	7fdb      	ldrb	r3, [r3, #31]
 8005b08:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005b0e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005b10:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f042 021e 	orr.w	r2, r2, #30
 8005b20:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	ffe0f007 	.word	0xffe0f007

08005b40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005b4c:	f7ff fae2 	bl	8005114 <HAL_GetTick>
 8005b50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e099      	b.n	8005c90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 0201 	bic.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b7c:	e00f      	b.n	8005b9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b7e:	f7ff fac9 	bl	8005114 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b05      	cmp	r3, #5
 8005b8a:	d908      	bls.n	8005b9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2203      	movs	r2, #3
 8005b96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e078      	b.n	8005c90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e8      	bne.n	8005b7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	4b38      	ldr	r3, [pc, #224]	@ (8005c98 <HAL_DMA_Init+0x158>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005be2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d107      	bne.n	8005c08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c00:	4313      	orrs	r3, r2
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f023 0307 	bic.w	r3, r3, #7
 8005c1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d117      	bne.n	8005c62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00e      	beq.n	8005c62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fb15 	bl	8006274 <DMA_CheckFifoParam>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d008      	beq.n	8005c62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2240      	movs	r2, #64	@ 0x40
 8005c54:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e016      	b.n	8005c90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 facc 	bl	8006208 <DMA_CalcBaseAndBitshift>
 8005c70:	4603      	mov	r3, r0
 8005c72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c78:	223f      	movs	r2, #63	@ 0x3f
 8005c7a:	409a      	lsls	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	f010803f 	.word	0xf010803f

08005c9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d101      	bne.n	8005cc2 <HAL_DMA_Start_IT+0x26>
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	e048      	b.n	8005d54 <HAL_DMA_Start_IT+0xb8>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d137      	bne.n	8005d46 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2202      	movs	r2, #2
 8005cda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	68b9      	ldr	r1, [r7, #8]
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 fa5e 	bl	80061ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf4:	223f      	movs	r2, #63	@ 0x3f
 8005cf6:	409a      	lsls	r2, r3
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0216 	orr.w	r2, r2, #22
 8005d0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	695a      	ldr	r2, [r3, #20]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d1a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d007      	beq.n	8005d34 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0208 	orr.w	r2, r2, #8
 8005d32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0201 	orr.w	r2, r2, #1
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	e005      	b.n	8005d52 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005d4e:	2302      	movs	r3, #2
 8005d50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3718      	adds	r7, #24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005d6a:	f7ff f9d3 	bl	8005114 <HAL_GetTick>
 8005d6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d008      	beq.n	8005d8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2280      	movs	r2, #128	@ 0x80
 8005d80:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e052      	b.n	8005e34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0216 	bic.w	r2, r2, #22
 8005d9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695a      	ldr	r2, [r3, #20]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005dac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d103      	bne.n	8005dbe <HAL_DMA_Abort+0x62>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d007      	beq.n	8005dce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 0208 	bic.w	r2, r2, #8
 8005dcc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0201 	bic.w	r2, r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dde:	e013      	b.n	8005e08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005de0:	f7ff f998 	bl	8005114 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b05      	cmp	r3, #5
 8005dec:	d90c      	bls.n	8005e08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2220      	movs	r2, #32
 8005df2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2203      	movs	r2, #3
 8005df8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e015      	b.n	8005e34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1e4      	bne.n	8005de0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e1a:	223f      	movs	r2, #63	@ 0x3f
 8005e1c:	409a      	lsls	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d004      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2280      	movs	r2, #128	@ 0x80
 8005e54:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e00c      	b.n	8005e74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2205      	movs	r2, #5
 8005e5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0201 	bic.w	r2, r2, #1
 8005e70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005e8c:	4b8e      	ldr	r3, [pc, #568]	@ (80060c8 <HAL_DMA_IRQHandler+0x248>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a8e      	ldr	r2, [pc, #568]	@ (80060cc <HAL_DMA_IRQHandler+0x24c>)
 8005e92:	fba2 2303 	umull	r2, r3, r2, r3
 8005e96:	0a9b      	lsrs	r3, r3, #10
 8005e98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eaa:	2208      	movs	r2, #8
 8005eac:	409a      	lsls	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d01a      	beq.n	8005eec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d013      	beq.n	8005eec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0204 	bic.w	r2, r2, #4
 8005ed2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ed8:	2208      	movs	r2, #8
 8005eda:	409a      	lsls	r2, r3
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee4:	f043 0201 	orr.w	r2, r3, #1
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	409a      	lsls	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d012      	beq.n	8005f22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00b      	beq.n	8005f22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f0e:	2201      	movs	r2, #1
 8005f10:	409a      	lsls	r2, r3
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f1a:	f043 0202 	orr.w	r2, r3, #2
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f26:	2204      	movs	r2, #4
 8005f28:	409a      	lsls	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d012      	beq.n	8005f58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00b      	beq.n	8005f58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f44:	2204      	movs	r2, #4
 8005f46:	409a      	lsls	r2, r3
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f50:	f043 0204 	orr.w	r2, r3, #4
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f5c:	2210      	movs	r2, #16
 8005f5e:	409a      	lsls	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4013      	ands	r3, r2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d043      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0308 	and.w	r3, r3, #8
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d03c      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f7a:	2210      	movs	r2, #16
 8005f7c:	409a      	lsls	r2, r3
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d018      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d108      	bne.n	8005fb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d024      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	4798      	blx	r3
 8005fae:	e01f      	b.n	8005ff0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01b      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	4798      	blx	r3
 8005fc0:	e016      	b.n	8005ff0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d107      	bne.n	8005fe0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 0208 	bic.w	r2, r2, #8
 8005fde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	409a      	lsls	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 808f 	beq.w	8006120 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0310 	and.w	r3, r3, #16
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 8087 	beq.w	8006120 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006016:	2220      	movs	r2, #32
 8006018:	409a      	lsls	r2, r3
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b05      	cmp	r3, #5
 8006028:	d136      	bne.n	8006098 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0216 	bic.w	r2, r2, #22
 8006038:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695a      	ldr	r2, [r3, #20]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006048:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	d103      	bne.n	800605a <HAL_DMA_IRQHandler+0x1da>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006056:	2b00      	cmp	r3, #0
 8006058:	d007      	beq.n	800606a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0208 	bic.w	r2, r2, #8
 8006068:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800606e:	223f      	movs	r2, #63	@ 0x3f
 8006070:	409a      	lsls	r2, r3
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800608a:	2b00      	cmp	r3, #0
 800608c:	d07e      	beq.n	800618c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	4798      	blx	r3
        }
        return;
 8006096:	e079      	b.n	800618c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d01d      	beq.n	80060e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10d      	bne.n	80060d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d031      	beq.n	8006120 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	4798      	blx	r3
 80060c4:	e02c      	b.n	8006120 <HAL_DMA_IRQHandler+0x2a0>
 80060c6:	bf00      	nop
 80060c8:	2000001c 	.word	0x2000001c
 80060cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d023      	beq.n	8006120 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	4798      	blx	r3
 80060e0:	e01e      	b.n	8006120 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10f      	bne.n	8006110 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0210 	bic.w	r2, r2, #16
 80060fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006124:	2b00      	cmp	r3, #0
 8006126:	d032      	beq.n	800618e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	d022      	beq.n	800617a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2205      	movs	r2, #5
 8006138:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 0201 	bic.w	r2, r2, #1
 800614a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	3301      	adds	r3, #1
 8006150:	60bb      	str	r3, [r7, #8]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	429a      	cmp	r2, r3
 8006156:	d307      	bcc.n	8006168 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1f2      	bne.n	800614c <HAL_DMA_IRQHandler+0x2cc>
 8006166:	e000      	b.n	800616a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006168:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800617e:	2b00      	cmp	r3, #0
 8006180:	d005      	beq.n	800618e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	4798      	blx	r3
 800618a:	e000      	b.n	800618e <HAL_DMA_IRQHandler+0x30e>
        return;
 800618c:	bf00      	nop
    }
  }
}
 800618e:	3718      	adds	r7, #24
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80061c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	2b40      	cmp	r3, #64	@ 0x40
 80061d8:	d108      	bne.n	80061ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80061ea:	e007      	b.n	80061fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	60da      	str	r2, [r3, #12]
}
 80061fc:	bf00      	nop
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	b2db      	uxtb	r3, r3
 8006216:	3b10      	subs	r3, #16
 8006218:	4a13      	ldr	r2, [pc, #76]	@ (8006268 <DMA_CalcBaseAndBitshift+0x60>)
 800621a:	fba2 2303 	umull	r2, r3, r2, r3
 800621e:	091b      	lsrs	r3, r3, #4
 8006220:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006222:	4a12      	ldr	r2, [pc, #72]	@ (800626c <DMA_CalcBaseAndBitshift+0x64>)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b03      	cmp	r3, #3
 8006234:	d908      	bls.n	8006248 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	461a      	mov	r2, r3
 800623c:	4b0c      	ldr	r3, [pc, #48]	@ (8006270 <DMA_CalcBaseAndBitshift+0x68>)
 800623e:	4013      	ands	r3, r2
 8006240:	1d1a      	adds	r2, r3, #4
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	659a      	str	r2, [r3, #88]	@ 0x58
 8006246:	e006      	b.n	8006256 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	461a      	mov	r2, r3
 800624e:	4b08      	ldr	r3, [pc, #32]	@ (8006270 <DMA_CalcBaseAndBitshift+0x68>)
 8006250:	4013      	ands	r3, r2
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800625a:	4618      	mov	r0, r3
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	aaaaaaab 	.word	0xaaaaaaab
 800626c:	08019e60 	.word	0x08019e60
 8006270:	fffffc00 	.word	0xfffffc00

08006274 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800627c:	2300      	movs	r3, #0
 800627e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006284:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d11f      	bne.n	80062ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2b03      	cmp	r3, #3
 8006292:	d856      	bhi.n	8006342 <DMA_CheckFifoParam+0xce>
 8006294:	a201      	add	r2, pc, #4	@ (adr r2, 800629c <DMA_CheckFifoParam+0x28>)
 8006296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629a:	bf00      	nop
 800629c:	080062ad 	.word	0x080062ad
 80062a0:	080062bf 	.word	0x080062bf
 80062a4:	080062ad 	.word	0x080062ad
 80062a8:	08006343 	.word	0x08006343
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d046      	beq.n	8006346 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062bc:	e043      	b.n	8006346 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80062c6:	d140      	bne.n	800634a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062cc:	e03d      	b.n	800634a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062d6:	d121      	bne.n	800631c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d837      	bhi.n	800634e <DMA_CheckFifoParam+0xda>
 80062de:	a201      	add	r2, pc, #4	@ (adr r2, 80062e4 <DMA_CheckFifoParam+0x70>)
 80062e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e4:	080062f5 	.word	0x080062f5
 80062e8:	080062fb 	.word	0x080062fb
 80062ec:	080062f5 	.word	0x080062f5
 80062f0:	0800630d 	.word	0x0800630d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	73fb      	strb	r3, [r7, #15]
      break;
 80062f8:	e030      	b.n	800635c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d025      	beq.n	8006352 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800630a:	e022      	b.n	8006352 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006310:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006314:	d11f      	bne.n	8006356 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800631a:	e01c      	b.n	8006356 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2b02      	cmp	r3, #2
 8006320:	d903      	bls.n	800632a <DMA_CheckFifoParam+0xb6>
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2b03      	cmp	r3, #3
 8006326:	d003      	beq.n	8006330 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006328:	e018      	b.n	800635c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	73fb      	strb	r3, [r7, #15]
      break;
 800632e:	e015      	b.n	800635c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006334:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00e      	beq.n	800635a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	73fb      	strb	r3, [r7, #15]
      break;
 8006340:	e00b      	b.n	800635a <DMA_CheckFifoParam+0xe6>
      break;
 8006342:	bf00      	nop
 8006344:	e00a      	b.n	800635c <DMA_CheckFifoParam+0xe8>
      break;
 8006346:	bf00      	nop
 8006348:	e008      	b.n	800635c <DMA_CheckFifoParam+0xe8>
      break;
 800634a:	bf00      	nop
 800634c:	e006      	b.n	800635c <DMA_CheckFifoParam+0xe8>
      break;
 800634e:	bf00      	nop
 8006350:	e004      	b.n	800635c <DMA_CheckFifoParam+0xe8>
      break;
 8006352:	bf00      	nop
 8006354:	e002      	b.n	800635c <DMA_CheckFifoParam+0xe8>
      break;   
 8006356:	bf00      	nop
 8006358:	e000      	b.n	800635c <DMA_CheckFifoParam+0xe8>
      break;
 800635a:	bf00      	nop
    }
  } 
  
  return status; 
 800635c:	7bfb      	ldrb	r3, [r7, #15]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop

0800636c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e039      	b.n	80063f2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d106      	bne.n	8006398 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7fd faae 	bl	80038f4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2202      	movs	r2, #2
 800639c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063bc:	f023 0107 	bic.w	r1, r3, #7
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063d2:	4b0a      	ldr	r3, [pc, #40]	@ (80063fc <HAL_DMA2D_Init+0x90>)
 80063d4:	4013      	ands	r3, r2
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	68d1      	ldr	r1, [r2, #12]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	6812      	ldr	r2, [r2, #0]
 80063de:	430b      	orrs	r3, r1
 80063e0:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	ffffc000 	.word	0xffffc000

08006400 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d026      	beq.n	8006470 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006428:	2b00      	cmp	r3, #0
 800642a:	d021      	beq.n	8006470 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800643a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006440:	f043 0201 	orr.w	r2, r3, #1
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2201      	movs	r2, #1
 800644e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2204      	movs	r2, #4
 8006454:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f003 0320 	and.w	r3, r3, #32
 8006476:	2b00      	cmp	r3, #0
 8006478:	d026      	beq.n	80064c8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d021      	beq.n	80064c8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006492:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2220      	movs	r2, #32
 800649a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a0:	f043 0202 	orr.w	r2, r3, #2
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2204      	movs	r2, #4
 80064ac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f003 0308 	and.w	r3, r3, #8
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d026      	beq.n	8006520 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d021      	beq.n	8006520 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064ea:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2208      	movs	r2, #8
 80064f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f8:	f043 0204 	orr.w	r2, r3, #4
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2204      	movs	r2, #4
 8006504:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d003      	beq.n	8006520 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b00      	cmp	r3, #0
 8006528:	d013      	beq.n	8006552 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00e      	beq.n	8006552 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006542:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2204      	movs	r2, #4
 800654a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f853 	bl	80065f8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d024      	beq.n	80065a6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006562:	2b00      	cmp	r3, #0
 8006564:	d01f      	beq.n	80065a6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006574:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2202      	movs	r2, #2
 800657c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f003 0310 	and.w	r3, r3, #16
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d01f      	beq.n	80065f0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d01a      	beq.n	80065f0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80065c8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2210      	movs	r2, #16
 80065d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f80e 	bl	800660c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80065f0:	bf00      	nop
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_DMA2D_ConfigLayer+0x20>
 800663c:	2302      	movs	r3, #2
 800663e:	e079      	b.n	8006734 <HAL_DMA2D_ConfigLayer+0x114>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	011b      	lsls	r3, r3, #4
 8006654:	3318      	adds	r3, #24
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	4413      	add	r3, r2
 800665a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	041b      	lsls	r3, r3, #16
 8006666:	4313      	orrs	r3, r2
 8006668:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800666a:	4b35      	ldr	r3, [pc, #212]	@ (8006740 <HAL_DMA2D_ConfigLayer+0x120>)
 800666c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	2b0a      	cmp	r3, #10
 8006674:	d003      	beq.n	800667e <HAL_DMA2D_ConfigLayer+0x5e>
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	2b09      	cmp	r3, #9
 800667c:	d107      	bne.n	800668e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	4313      	orrs	r3, r2
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	e005      	b.n	800669a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	061b      	lsls	r3, r3, #24
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d120      	bne.n	80066e2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	43db      	mvns	r3, r3
 80066aa:	ea02 0103 	and.w	r1, r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	6812      	ldr	r2, [r2, #0]
 80066c0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	2b0a      	cmp	r3, #10
 80066c8:	d003      	beq.n	80066d2 <HAL_DMA2D_ConfigLayer+0xb2>
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2b09      	cmp	r3, #9
 80066d0:	d127      	bne.n	8006722 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80066de:	629a      	str	r2, [r3, #40]	@ 0x28
 80066e0:	e01f      	b.n	8006722 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	69da      	ldr	r2, [r3, #28]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	43db      	mvns	r3, r3
 80066ec:	ea02 0103 	and.w	r1, r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	6812      	ldr	r2, [r2, #0]
 8006702:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	2b0a      	cmp	r3, #10
 800670a:	d003      	beq.n	8006714 <HAL_DMA2D_ConfigLayer+0xf4>
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	2b09      	cmp	r3, #9
 8006712:	d106      	bne.n	8006722 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006720:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	371c      	adds	r7, #28
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	ff03000f 	.word	0xff03000f

08006744 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e086      	b.n	8006864 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800675c:	2b00      	cmp	r3, #0
 800675e:	d106      	bne.n	800676e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2220      	movs	r2, #32
 8006764:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7fd f8e9 	bl	8003940 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800676e:	4b3f      	ldr	r3, [pc, #252]	@ (800686c <HAL_ETH_Init+0x128>)
 8006770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006772:	4a3e      	ldr	r2, [pc, #248]	@ (800686c <HAL_ETH_Init+0x128>)
 8006774:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006778:	6453      	str	r3, [r2, #68]	@ 0x44
 800677a:	4b3c      	ldr	r3, [pc, #240]	@ (800686c <HAL_ETH_Init+0x128>)
 800677c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800677e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006782:	60bb      	str	r3, [r7, #8]
 8006784:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8006786:	4b3a      	ldr	r3, [pc, #232]	@ (8006870 <HAL_ETH_Init+0x12c>)
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	4a39      	ldr	r2, [pc, #228]	@ (8006870 <HAL_ETH_Init+0x12c>)
 800678c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006790:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8006792:	4b37      	ldr	r3, [pc, #220]	@ (8006870 <HAL_ETH_Init+0x12c>)
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	4935      	ldr	r1, [pc, #212]	@ (8006870 <HAL_ETH_Init+0x12c>)
 800679c:	4313      	orrs	r3, r2
 800679e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80067a0:	4b33      	ldr	r3, [pc, #204]	@ (8006870 <HAL_ETH_Init+0x12c>)
 80067a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	6812      	ldr	r2, [r2, #0]
 80067b2:	f043 0301 	orr.w	r3, r3, #1
 80067b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80067ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067bc:	f7fe fcaa 	bl	8005114 <HAL_GetTick>
 80067c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80067c2:	e011      	b.n	80067e8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80067c4:	f7fe fca6 	bl	8005114 <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80067d2:	d909      	bls.n	80067e8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2204      	movs	r2, #4
 80067d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	22e0      	movs	r2, #224	@ 0xe0
 80067e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e03d      	b.n	8006864 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1e4      	bne.n	80067c4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f97a 	bl	8006af4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fa25 	bl	8006c50 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fa7b 	bl	8006d02 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	461a      	mov	r2, r3
 8006812:	2100      	movs	r1, #0
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f9e3 	bl	8006be0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8006828:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	4b0f      	ldr	r3, [pc, #60]	@ (8006874 <HAL_ETH_Init+0x130>)
 8006838:	430b      	orrs	r3, r1
 800683a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800684e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2210      	movs	r2, #16
 800685e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	40023800 	.word	0x40023800
 8006870:	40013800 	.word	0x40013800
 8006874:	00020060 	.word	0x00020060

08006878 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	4b53      	ldr	r3, [pc, #332]	@ (80069dc <ETH_SetMACConfig+0x164>)
 800688e:	4013      	ands	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	7b9b      	ldrb	r3, [r3, #14]
 8006896:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	7c12      	ldrb	r2, [r2, #16]
 800689c:	2a00      	cmp	r2, #0
 800689e:	d102      	bne.n	80068a6 <ETH_SetMACConfig+0x2e>
 80068a0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80068a4:	e000      	b.n	80068a8 <ETH_SetMACConfig+0x30>
 80068a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80068a8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	7c52      	ldrb	r2, [r2, #17]
 80068ae:	2a00      	cmp	r2, #0
 80068b0:	d102      	bne.n	80068b8 <ETH_SetMACConfig+0x40>
 80068b2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80068b6:	e000      	b.n	80068ba <ETH_SetMACConfig+0x42>
 80068b8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80068ba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80068c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	7fdb      	ldrb	r3, [r3, #31]
 80068c6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80068c8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80068ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	7f92      	ldrb	r2, [r2, #30]
 80068d4:	2a00      	cmp	r2, #0
 80068d6:	d102      	bne.n	80068de <ETH_SetMACConfig+0x66>
 80068d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80068dc:	e000      	b.n	80068e0 <ETH_SetMACConfig+0x68>
 80068de:	2200      	movs	r2, #0
                        macconf->Speed |
 80068e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	7f1b      	ldrb	r3, [r3, #28]
 80068e6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80068e8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80068ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	791b      	ldrb	r3, [r3, #4]
 80068f4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80068f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80068fe:	2a00      	cmp	r2, #0
 8006900:	d102      	bne.n	8006908 <ETH_SetMACConfig+0x90>
 8006902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006906:	e000      	b.n	800690a <ETH_SetMACConfig+0x92>
 8006908:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800690a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	7bdb      	ldrb	r3, [r3, #15]
 8006910:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8006912:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006918:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006920:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006922:	4313      	orrs	r3, r2
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800693a:	2001      	movs	r0, #1
 800693c:	f7fe fbf6 	bl	800512c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8006956:	4013      	ands	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800695e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8006966:	2a00      	cmp	r2, #0
 8006968:	d101      	bne.n	800696e <ETH_SetMACConfig+0xf6>
 800696a:	2280      	movs	r2, #128	@ 0x80
 800696c:	e000      	b.n	8006970 <ETH_SetMACConfig+0xf8>
 800696e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006970:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8006976:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800697e:	2a01      	cmp	r2, #1
 8006980:	d101      	bne.n	8006986 <ETH_SetMACConfig+0x10e>
 8006982:	2208      	movs	r2, #8
 8006984:	e000      	b.n	8006988 <ETH_SetMACConfig+0x110>
 8006986:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8006988:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800698a:	683a      	ldr	r2, [r7, #0]
 800698c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8006990:	2a01      	cmp	r2, #1
 8006992:	d101      	bne.n	8006998 <ETH_SetMACConfig+0x120>
 8006994:	2204      	movs	r2, #4
 8006996:	e000      	b.n	800699a <ETH_SetMACConfig+0x122>
 8006998:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800699a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80069a2:	2a01      	cmp	r2, #1
 80069a4:	d101      	bne.n	80069aa <ETH_SetMACConfig+0x132>
 80069a6:	2202      	movs	r2, #2
 80069a8:	e000      	b.n	80069ac <ETH_SetMACConfig+0x134>
 80069aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80069ac:	4313      	orrs	r3, r2
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80069c4:	2001      	movs	r0, #1
 80069c6:	f7fe fbb1 	bl	800512c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	619a      	str	r2, [r3, #24]
}
 80069d2:	bf00      	nop
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	fd20810f 	.word	0xfd20810f

080069e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	4b3d      	ldr	r3, [pc, #244]	@ (8006af0 <ETH_SetDMAConfig+0x110>)
 80069fa:	4013      	ands	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	7b1b      	ldrb	r3, [r3, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d102      	bne.n	8006a0c <ETH_SetDMAConfig+0x2c>
 8006a06:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006a0a:	e000      	b.n	8006a0e <ETH_SetDMAConfig+0x2e>
 8006a0c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	7b5b      	ldrb	r3, [r3, #13]
 8006a12:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006a14:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	7f52      	ldrb	r2, [r2, #29]
 8006a1a:	2a00      	cmp	r2, #0
 8006a1c:	d102      	bne.n	8006a24 <ETH_SetDMAConfig+0x44>
 8006a1e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006a22:	e000      	b.n	8006a26 <ETH_SetDMAConfig+0x46>
 8006a24:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006a26:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	7b9b      	ldrb	r3, [r3, #14]
 8006a2c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006a2e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006a34:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	7f1b      	ldrb	r3, [r3, #28]
 8006a3a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8006a3c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	7f9b      	ldrb	r3, [r3, #30]
 8006a42:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006a44:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006a4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006a52:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006a54:	4313      	orrs	r3, r2
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a64:	461a      	mov	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006a76:	2001      	movs	r0, #1
 8006a78:	f7fe fb58 	bl	800512c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a84:	461a      	mov	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	791b      	ldrb	r3, [r3, #4]
 8006a8e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006a94:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8006a9a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006aa0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006aa8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8006aaa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006ab2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006ab8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	6812      	ldr	r2, [r2, #0]
 8006abe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006ac2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006ac6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006ad4:	2001      	movs	r0, #1
 8006ad6:	f7fe fb29 	bl	800512c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6013      	str	r3, [r2, #0]
}
 8006ae8:	bf00      	nop
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	f8de3f23 	.word	0xf8de3f23

08006af4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b0a6      	sub	sp, #152	@ 0x98
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8006afc:	2301      	movs	r3, #1
 8006afe:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8006b02:	2301      	movs	r3, #1
 8006b04:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8006b12:	2301      	movs	r3, #1
 8006b14:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8006b24:	2301      	movs	r3, #1
 8006b26:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8006b30:	2300      	movs	r3, #0
 8006b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006b36:	2300      	movs	r3, #0
 8006b38:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8006b44:	2300      	movs	r3, #0
 8006b46:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006b50:	2300      	movs	r3, #0
 8006b52:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006b56:	2300      	movs	r3, #0
 8006b58:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006b5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006b60:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006b62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006b6e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff fe7f 	bl	8006878 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8006b82:	2301      	movs	r3, #1
 8006b84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8006b90:	2300      	movs	r3, #0
 8006b92:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8006b96:	2300      	movs	r3, #0
 8006b98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006baa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006bae:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006bb0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006bb4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006bb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006bba:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006bca:	f107 0308 	add.w	r3, r7, #8
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff ff05 	bl	80069e0 <ETH_SetDMAConfig>
}
 8006bd6:	bf00      	nop
 8006bd8:	3798      	adds	r7, #152	@ 0x98
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
	...

08006be0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b087      	sub	sp, #28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3305      	adds	r3, #5
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	021b      	lsls	r3, r3, #8
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	3204      	adds	r2, #4
 8006bf8:	7812      	ldrb	r2, [r2, #0]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	4b11      	ldr	r3, [pc, #68]	@ (8006c48 <ETH_MACAddressConfig+0x68>)
 8006c02:	4413      	add	r3, r2
 8006c04:	461a      	mov	r2, r3
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3303      	adds	r3, #3
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	061a      	lsls	r2, r3, #24
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	3302      	adds	r3, #2
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	041b      	lsls	r3, r3, #16
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	021b      	lsls	r3, r3, #8
 8006c24:	4313      	orrs	r3, r2
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	7812      	ldrb	r2, [r2, #0]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	4b06      	ldr	r3, [pc, #24]	@ (8006c4c <ETH_MACAddressConfig+0x6c>)
 8006c32:	4413      	add	r3, r2
 8006c34:	461a      	mov	r2, r3
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	6013      	str	r3, [r2, #0]
}
 8006c3a:	bf00      	nop
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	40028040 	.word	0x40028040
 8006c4c:	40028044 	.word	0x40028044

08006c50 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006c58:	2300      	movs	r3, #0
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	e03e      	b.n	8006cdc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68d9      	ldr	r1, [r3, #12]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4613      	mov	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	440b      	add	r3, r1
 8006c6e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2200      	movs	r2, #0
 8006c86:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006c88:	68b9      	ldr	r1, [r7, #8]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	3206      	adds	r2, #6
 8006c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d80c      	bhi.n	8006cc0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68d9      	ldr	r1, [r3, #12]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	00db      	lsls	r3, r3, #3
 8006cb6:	440b      	add	r3, r1
 8006cb8:	461a      	mov	r2, r3
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	60da      	str	r2, [r3, #12]
 8006cbe:	e004      	b.n	8006cca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d9bd      	bls.n	8006c5e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cf4:	611a      	str	r2, [r3, #16]
}
 8006cf6:	bf00      	nop
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b085      	sub	sp, #20
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	e048      	b.n	8006da2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6919      	ldr	r1, [r3, #16]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	4613      	mov	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	00db      	lsls	r3, r3, #3
 8006d1e:	440b      	add	r3, r1
 8006d20:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2200      	movs	r2, #0
 8006d32:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2200      	movs	r2, #0
 8006d38:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2200      	movs	r2, #0
 8006d44:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006d4c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006d66:	68b9      	ldr	r1, [r7, #8]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	3212      	adds	r2, #18
 8006d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d80c      	bhi.n	8006d92 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6919      	ldr	r1, [r3, #16]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	1c5a      	adds	r2, r3, #1
 8006d80:	4613      	mov	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	440b      	add	r3, r1
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	60da      	str	r2, [r3, #12]
 8006d90:	e004      	b.n	8006d9c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	461a      	mov	r2, r3
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b03      	cmp	r3, #3
 8006da6:	d9b3      	bls.n	8006d10 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691a      	ldr	r2, [r3, #16]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dd2:	60da      	str	r2, [r3, #12]
}
 8006dd4:	bf00      	nop
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b089      	sub	sp, #36	@ 0x24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006dea:	2300      	movs	r3, #0
 8006dec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006dee:	2300      	movs	r3, #0
 8006df0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006df2:	2300      	movs	r3, #0
 8006df4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006df6:	2300      	movs	r3, #0
 8006df8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	61fb      	str	r3, [r7, #28]
 8006dfe:	e175      	b.n	80070ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006e00:	2201      	movs	r2, #1
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	fa02 f303 	lsl.w	r3, r2, r3
 8006e08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	4013      	ands	r3, r2
 8006e12:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	f040 8164 	bne.w	80070e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f003 0303 	and.w	r3, r3, #3
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d005      	beq.n	8006e36 <HAL_GPIO_Init+0x56>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f003 0303 	and.w	r3, r3, #3
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d130      	bne.n	8006e98 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	005b      	lsls	r3, r3, #1
 8006e40:	2203      	movs	r2, #3
 8006e42:	fa02 f303 	lsl.w	r3, r2, r3
 8006e46:	43db      	mvns	r3, r3
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	68da      	ldr	r2, [r3, #12]
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	fa02 f303 	lsl.w	r3, r2, r3
 8006e74:	43db      	mvns	r3, r3
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	4013      	ands	r3, r2
 8006e7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	091b      	lsrs	r3, r3, #4
 8006e82:	f003 0201 	and.w	r2, r3, #1
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f003 0303 	and.w	r3, r3, #3
 8006ea0:	2b03      	cmp	r3, #3
 8006ea2:	d017      	beq.n	8006ed4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	005b      	lsls	r3, r3, #1
 8006eae:	2203      	movs	r2, #3
 8006eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb4:	43db      	mvns	r3, r3
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	4013      	ands	r3, r2
 8006eba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	005b      	lsls	r3, r3, #1
 8006ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	69ba      	ldr	r2, [r7, #24]
 8006ed2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f003 0303 	and.w	r3, r3, #3
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d123      	bne.n	8006f28 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	08da      	lsrs	r2, r3, #3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	3208      	adds	r2, #8
 8006ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	f003 0307 	and.w	r3, r3, #7
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	220f      	movs	r2, #15
 8006ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8006efc:	43db      	mvns	r3, r3
 8006efe:	69ba      	ldr	r2, [r7, #24]
 8006f00:	4013      	ands	r3, r2
 8006f02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	691a      	ldr	r2, [r3, #16]
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	f003 0307 	and.w	r3, r3, #7
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	fa02 f303 	lsl.w	r3, r2, r3
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	08da      	lsrs	r2, r3, #3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	3208      	adds	r2, #8
 8006f22:	69b9      	ldr	r1, [r7, #24]
 8006f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	005b      	lsls	r3, r3, #1
 8006f32:	2203      	movs	r2, #3
 8006f34:	fa02 f303 	lsl.w	r3, r2, r3
 8006f38:	43db      	mvns	r3, r3
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f003 0203 	and.w	r2, r3, #3
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	69ba      	ldr	r2, [r7, #24]
 8006f5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 80be 	beq.w	80070e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f6a:	4b66      	ldr	r3, [pc, #408]	@ (8007104 <HAL_GPIO_Init+0x324>)
 8006f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f6e:	4a65      	ldr	r2, [pc, #404]	@ (8007104 <HAL_GPIO_Init+0x324>)
 8006f70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8006f76:	4b63      	ldr	r3, [pc, #396]	@ (8007104 <HAL_GPIO_Init+0x324>)
 8006f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006f82:	4a61      	ldr	r2, [pc, #388]	@ (8007108 <HAL_GPIO_Init+0x328>)
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	089b      	lsrs	r3, r3, #2
 8006f88:	3302      	adds	r3, #2
 8006f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	f003 0303 	and.w	r3, r3, #3
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	220f      	movs	r2, #15
 8006f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9e:	43db      	mvns	r3, r3
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a58      	ldr	r2, [pc, #352]	@ (800710c <HAL_GPIO_Init+0x32c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d037      	beq.n	800701e <HAL_GPIO_Init+0x23e>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a57      	ldr	r2, [pc, #348]	@ (8007110 <HAL_GPIO_Init+0x330>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d031      	beq.n	800701a <HAL_GPIO_Init+0x23a>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a56      	ldr	r2, [pc, #344]	@ (8007114 <HAL_GPIO_Init+0x334>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d02b      	beq.n	8007016 <HAL_GPIO_Init+0x236>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a55      	ldr	r2, [pc, #340]	@ (8007118 <HAL_GPIO_Init+0x338>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d025      	beq.n	8007012 <HAL_GPIO_Init+0x232>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a54      	ldr	r2, [pc, #336]	@ (800711c <HAL_GPIO_Init+0x33c>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d01f      	beq.n	800700e <HAL_GPIO_Init+0x22e>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a53      	ldr	r2, [pc, #332]	@ (8007120 <HAL_GPIO_Init+0x340>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d019      	beq.n	800700a <HAL_GPIO_Init+0x22a>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a52      	ldr	r2, [pc, #328]	@ (8007124 <HAL_GPIO_Init+0x344>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d013      	beq.n	8007006 <HAL_GPIO_Init+0x226>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a51      	ldr	r2, [pc, #324]	@ (8007128 <HAL_GPIO_Init+0x348>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d00d      	beq.n	8007002 <HAL_GPIO_Init+0x222>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a50      	ldr	r2, [pc, #320]	@ (800712c <HAL_GPIO_Init+0x34c>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d007      	beq.n	8006ffe <HAL_GPIO_Init+0x21e>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a4f      	ldr	r2, [pc, #316]	@ (8007130 <HAL_GPIO_Init+0x350>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d101      	bne.n	8006ffa <HAL_GPIO_Init+0x21a>
 8006ff6:	2309      	movs	r3, #9
 8006ff8:	e012      	b.n	8007020 <HAL_GPIO_Init+0x240>
 8006ffa:	230a      	movs	r3, #10
 8006ffc:	e010      	b.n	8007020 <HAL_GPIO_Init+0x240>
 8006ffe:	2308      	movs	r3, #8
 8007000:	e00e      	b.n	8007020 <HAL_GPIO_Init+0x240>
 8007002:	2307      	movs	r3, #7
 8007004:	e00c      	b.n	8007020 <HAL_GPIO_Init+0x240>
 8007006:	2306      	movs	r3, #6
 8007008:	e00a      	b.n	8007020 <HAL_GPIO_Init+0x240>
 800700a:	2305      	movs	r3, #5
 800700c:	e008      	b.n	8007020 <HAL_GPIO_Init+0x240>
 800700e:	2304      	movs	r3, #4
 8007010:	e006      	b.n	8007020 <HAL_GPIO_Init+0x240>
 8007012:	2303      	movs	r3, #3
 8007014:	e004      	b.n	8007020 <HAL_GPIO_Init+0x240>
 8007016:	2302      	movs	r3, #2
 8007018:	e002      	b.n	8007020 <HAL_GPIO_Init+0x240>
 800701a:	2301      	movs	r3, #1
 800701c:	e000      	b.n	8007020 <HAL_GPIO_Init+0x240>
 800701e:	2300      	movs	r3, #0
 8007020:	69fa      	ldr	r2, [r7, #28]
 8007022:	f002 0203 	and.w	r2, r2, #3
 8007026:	0092      	lsls	r2, r2, #2
 8007028:	4093      	lsls	r3, r2
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	4313      	orrs	r3, r2
 800702e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007030:	4935      	ldr	r1, [pc, #212]	@ (8007108 <HAL_GPIO_Init+0x328>)
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	089b      	lsrs	r3, r3, #2
 8007036:	3302      	adds	r3, #2
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800703e:	4b3d      	ldr	r3, [pc, #244]	@ (8007134 <HAL_GPIO_Init+0x354>)
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	43db      	mvns	r3, r3
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	4013      	ands	r3, r2
 800704c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	4313      	orrs	r3, r2
 8007060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007062:	4a34      	ldr	r2, [pc, #208]	@ (8007134 <HAL_GPIO_Init+0x354>)
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007068:	4b32      	ldr	r3, [pc, #200]	@ (8007134 <HAL_GPIO_Init+0x354>)
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	43db      	mvns	r3, r3
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	4013      	ands	r3, r2
 8007076:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d003      	beq.n	800708c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	4313      	orrs	r3, r2
 800708a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800708c:	4a29      	ldr	r2, [pc, #164]	@ (8007134 <HAL_GPIO_Init+0x354>)
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007092:	4b28      	ldr	r3, [pc, #160]	@ (8007134 <HAL_GPIO_Init+0x354>)
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	43db      	mvns	r3, r3
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	4013      	ands	r3, r2
 80070a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80070ae:	69ba      	ldr	r2, [r7, #24]
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80070b6:	4a1f      	ldr	r2, [pc, #124]	@ (8007134 <HAL_GPIO_Init+0x354>)
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80070bc:	4b1d      	ldr	r3, [pc, #116]	@ (8007134 <HAL_GPIO_Init+0x354>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	43db      	mvns	r3, r3
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	4013      	ands	r3, r2
 80070ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	4313      	orrs	r3, r2
 80070de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80070e0:	4a14      	ldr	r2, [pc, #80]	@ (8007134 <HAL_GPIO_Init+0x354>)
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	3301      	adds	r3, #1
 80070ea:	61fb      	str	r3, [r7, #28]
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	2b0f      	cmp	r3, #15
 80070f0:	f67f ae86 	bls.w	8006e00 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop
 80070f8:	3724      	adds	r7, #36	@ 0x24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	40023800 	.word	0x40023800
 8007108:	40013800 	.word	0x40013800
 800710c:	40020000 	.word	0x40020000
 8007110:	40020400 	.word	0x40020400
 8007114:	40020800 	.word	0x40020800
 8007118:	40020c00 	.word	0x40020c00
 800711c:	40021000 	.word	0x40021000
 8007120:	40021400 	.word	0x40021400
 8007124:	40021800 	.word	0x40021800
 8007128:	40021c00 	.word	0x40021c00
 800712c:	40022000 	.word	0x40022000
 8007130:	40022400 	.word	0x40022400
 8007134:	40013c00 	.word	0x40013c00

08007138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	460b      	mov	r3, r1
 8007142:	807b      	strh	r3, [r7, #2]
 8007144:	4613      	mov	r3, r2
 8007146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007148:	787b      	ldrb	r3, [r7, #1]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800714e:	887a      	ldrh	r2, [r7, #2]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007154:	e003      	b.n	800715e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007156:	887b      	ldrh	r3, [r7, #2]
 8007158:	041a      	lsls	r2, r3, #16
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	619a      	str	r2, [r3, #24]
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b086      	sub	sp, #24
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4618      	mov	r0, r3
 8007182:	f008 ff09 	bl	800ff98 <USB_GetMode>
 8007186:	4603      	mov	r3, r0
 8007188:	2b01      	cmp	r3, #1
 800718a:	f040 80fb 	bne.w	8007384 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4618      	mov	r0, r3
 8007194:	f008 fecc 	bl	800ff30 <USB_ReadInterrupts>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 80f1 	beq.w	8007382 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f008 fec3 	bl	800ff30 <USB_ReadInterrupts>
 80071aa:	4603      	mov	r3, r0
 80071ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80071b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071b4:	d104      	bne.n	80071c0 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80071be:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f008 feb3 	bl	800ff30 <USB_ReadInterrupts>
 80071ca:	4603      	mov	r3, r0
 80071cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80071d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071d4:	d104      	bne.n	80071e0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80071de:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f008 fea3 	bl	800ff30 <USB_ReadInterrupts>
 80071ea:	4603      	mov	r3, r0
 80071ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80071f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071f4:	d104      	bne.n	8007200 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80071fe:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4618      	mov	r0, r3
 8007206:	f008 fe93 	bl	800ff30 <USB_ReadInterrupts>
 800720a:	4603      	mov	r3, r0
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b02      	cmp	r3, #2
 8007212:	d103      	bne.n	800721c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2202      	movs	r2, #2
 800721a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4618      	mov	r0, r3
 8007222:	f008 fe85 	bl	800ff30 <USB_ReadInterrupts>
 8007226:	4603      	mov	r3, r0
 8007228:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800722c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007230:	d120      	bne.n	8007274 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800723a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	2b00      	cmp	r3, #0
 800724a:	d113      	bne.n	8007274 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800724c:	2110      	movs	r1, #16
 800724e:	6938      	ldr	r0, [r7, #16]
 8007250:	f008 fdb6 	bl	800fdc0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8007254:	6938      	ldr	r0, [r7, #16]
 8007256:	f008 fde5 	bl	800fe24 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	7a5b      	ldrb	r3, [r3, #9]
 800725e:	2b02      	cmp	r3, #2
 8007260:	d105      	bne.n	800726e <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2101      	movs	r1, #1
 8007268:	4618      	mov	r0, r3
 800726a:	f008 fea3 	bl	800ffb4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f00e fc14 	bl	8015a9c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4618      	mov	r0, r3
 800727a:	f008 fe59 	bl	800ff30 <USB_ReadInterrupts>
 800727e:	4603      	mov	r3, r0
 8007280:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007284:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007288:	d102      	bne.n	8007290 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 fca1 	bl	8008bd2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4618      	mov	r0, r3
 8007296:	f008 fe4b 	bl	800ff30 <USB_ReadInterrupts>
 800729a:	4603      	mov	r3, r0
 800729c:	f003 0308 	and.w	r3, r3, #8
 80072a0:	2b08      	cmp	r3, #8
 80072a2:	d106      	bne.n	80072b2 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f00e fbdd 	bl	8015a64 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2208      	movs	r2, #8
 80072b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f008 fe3a 	bl	800ff30 <USB_ReadInterrupts>
 80072bc:	4603      	mov	r3, r0
 80072be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072c6:	d139      	bne.n	800733c <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f008 feae 	bl	801002e <USB_HC_ReadInterrupt>
 80072d2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80072d4:	2300      	movs	r3, #0
 80072d6:	617b      	str	r3, [r7, #20]
 80072d8:	e025      	b.n	8007326 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f003 030f 	and.w	r3, r3, #15
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	fa22 f303 	lsr.w	r3, r2, r3
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d018      	beq.n	8007320 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007300:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007304:	d106      	bne.n	8007314 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	b2db      	uxtb	r3, r3
 800730a:	4619      	mov	r1, r3
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f859 	bl	80073c4 <HCD_HC_IN_IRQHandler>
 8007312:	e005      	b.n	8007320 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	b2db      	uxtb	r3, r3
 8007318:	4619      	mov	r1, r3
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 febb 	bl	8008096 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	3301      	adds	r3, #1
 8007324:	617b      	str	r3, [r7, #20]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	795b      	ldrb	r3, [r3, #5]
 800732a:	461a      	mov	r2, r3
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	4293      	cmp	r3, r2
 8007330:	d3d3      	bcc.n	80072da <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800733a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4618      	mov	r0, r3
 8007342:	f008 fdf5 	bl	800ff30 <USB_ReadInterrupts>
 8007346:	4603      	mov	r3, r0
 8007348:	f003 0310 	and.w	r3, r3, #16
 800734c:	2b10      	cmp	r3, #16
 800734e:	d101      	bne.n	8007354 <HAL_HCD_IRQHandler+0x1ea>
 8007350:	2301      	movs	r3, #1
 8007352:	e000      	b.n	8007356 <HAL_HCD_IRQHandler+0x1ec>
 8007354:	2300      	movs	r3, #0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d014      	beq.n	8007384 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	699a      	ldr	r2, [r3, #24]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f022 0210 	bic.w	r2, r2, #16
 8007368:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f001 fb52 	bl	8008a14 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	699a      	ldr	r2, [r3, #24]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f042 0210 	orr.w	r2, r2, #16
 800737e:	619a      	str	r2, [r3, #24]
 8007380:	e000      	b.n	8007384 <HAL_HCD_IRQHandler+0x21a>
      return;
 8007382:	bf00      	nop
    }
  }
}
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b082      	sub	sp, #8
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8007398:	2b01      	cmp	r3, #1
 800739a:	d101      	bne.n	80073a0 <HAL_HCD_Stop+0x16>
 800739c:	2302      	movs	r3, #2
 800739e:	e00d      	b.n	80073bc <HAL_HCD_Stop+0x32>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4618      	mov	r0, r3
 80073ae:	f008 ff6f 	bl	8010290 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	460b      	mov	r3, r1
 80073ce:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	78fa      	ldrb	r2, [r7, #3]
 80073e0:	4611      	mov	r1, r2
 80073e2:	4618      	mov	r0, r3
 80073e4:	f008 fdb7 	bl	800ff56 <USB_ReadChInterrupts>
 80073e8:	4603      	mov	r3, r0
 80073ea:	f003 0304 	and.w	r3, r3, #4
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	d11a      	bne.n	8007428 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80073f2:	78fb      	ldrb	r3, [r7, #3]
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073fe:	461a      	mov	r2, r3
 8007400:	2304      	movs	r3, #4
 8007402:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007404:	78fa      	ldrb	r2, [r7, #3]
 8007406:	6879      	ldr	r1, [r7, #4]
 8007408:	4613      	mov	r3, r2
 800740a:	011b      	lsls	r3, r3, #4
 800740c:	1a9b      	subs	r3, r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	440b      	add	r3, r1
 8007412:	334d      	adds	r3, #77	@ 0x4d
 8007414:	2207      	movs	r2, #7
 8007416:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	78fa      	ldrb	r2, [r7, #3]
 800741e:	4611      	mov	r1, r2
 8007420:	4618      	mov	r0, r3
 8007422:	f008 fe15 	bl	8010050 <USB_HC_Halt>
 8007426:	e09e      	b.n	8007566 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	78fa      	ldrb	r2, [r7, #3]
 800742e:	4611      	mov	r1, r2
 8007430:	4618      	mov	r0, r3
 8007432:	f008 fd90 	bl	800ff56 <USB_ReadChInterrupts>
 8007436:	4603      	mov	r3, r0
 8007438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800743c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007440:	d11b      	bne.n	800747a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8007442:	78fb      	ldrb	r3, [r7, #3]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	4413      	add	r3, r2
 800744a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800744e:	461a      	mov	r2, r3
 8007450:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007454:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8007456:	78fa      	ldrb	r2, [r7, #3]
 8007458:	6879      	ldr	r1, [r7, #4]
 800745a:	4613      	mov	r3, r2
 800745c:	011b      	lsls	r3, r3, #4
 800745e:	1a9b      	subs	r3, r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	440b      	add	r3, r1
 8007464:	334d      	adds	r3, #77	@ 0x4d
 8007466:	2208      	movs	r2, #8
 8007468:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	78fa      	ldrb	r2, [r7, #3]
 8007470:	4611      	mov	r1, r2
 8007472:	4618      	mov	r0, r3
 8007474:	f008 fdec 	bl	8010050 <USB_HC_Halt>
 8007478:	e075      	b.n	8007566 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	78fa      	ldrb	r2, [r7, #3]
 8007480:	4611      	mov	r1, r2
 8007482:	4618      	mov	r0, r3
 8007484:	f008 fd67 	bl	800ff56 <USB_ReadChInterrupts>
 8007488:	4603      	mov	r3, r0
 800748a:	f003 0308 	and.w	r3, r3, #8
 800748e:	2b08      	cmp	r3, #8
 8007490:	d11a      	bne.n	80074c8 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8007492:	78fb      	ldrb	r3, [r7, #3]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	4413      	add	r3, r2
 800749a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800749e:	461a      	mov	r2, r3
 80074a0:	2308      	movs	r3, #8
 80074a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80074a4:	78fa      	ldrb	r2, [r7, #3]
 80074a6:	6879      	ldr	r1, [r7, #4]
 80074a8:	4613      	mov	r3, r2
 80074aa:	011b      	lsls	r3, r3, #4
 80074ac:	1a9b      	subs	r3, r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	440b      	add	r3, r1
 80074b2:	334d      	adds	r3, #77	@ 0x4d
 80074b4:	2206      	movs	r2, #6
 80074b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	78fa      	ldrb	r2, [r7, #3]
 80074be:	4611      	mov	r1, r2
 80074c0:	4618      	mov	r0, r3
 80074c2:	f008 fdc5 	bl	8010050 <USB_HC_Halt>
 80074c6:	e04e      	b.n	8007566 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	78fa      	ldrb	r2, [r7, #3]
 80074ce:	4611      	mov	r1, r2
 80074d0:	4618      	mov	r0, r3
 80074d2:	f008 fd40 	bl	800ff56 <USB_ReadChInterrupts>
 80074d6:	4603      	mov	r3, r0
 80074d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074e0:	d11b      	bne.n	800751a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80074e2:	78fb      	ldrb	r3, [r7, #3]
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074ee:	461a      	mov	r2, r3
 80074f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80074f6:	78fa      	ldrb	r2, [r7, #3]
 80074f8:	6879      	ldr	r1, [r7, #4]
 80074fa:	4613      	mov	r3, r2
 80074fc:	011b      	lsls	r3, r3, #4
 80074fe:	1a9b      	subs	r3, r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	440b      	add	r3, r1
 8007504:	334d      	adds	r3, #77	@ 0x4d
 8007506:	2209      	movs	r2, #9
 8007508:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	78fa      	ldrb	r2, [r7, #3]
 8007510:	4611      	mov	r1, r2
 8007512:	4618      	mov	r0, r3
 8007514:	f008 fd9c 	bl	8010050 <USB_HC_Halt>
 8007518:	e025      	b.n	8007566 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	78fa      	ldrb	r2, [r7, #3]
 8007520:	4611      	mov	r1, r2
 8007522:	4618      	mov	r0, r3
 8007524:	f008 fd17 	bl	800ff56 <USB_ReadChInterrupts>
 8007528:	4603      	mov	r3, r0
 800752a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800752e:	2b80      	cmp	r3, #128	@ 0x80
 8007530:	d119      	bne.n	8007566 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8007532:	78fb      	ldrb	r3, [r7, #3]
 8007534:	015a      	lsls	r2, r3, #5
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	4413      	add	r3, r2
 800753a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800753e:	461a      	mov	r2, r3
 8007540:	2380      	movs	r3, #128	@ 0x80
 8007542:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007544:	78fa      	ldrb	r2, [r7, #3]
 8007546:	6879      	ldr	r1, [r7, #4]
 8007548:	4613      	mov	r3, r2
 800754a:	011b      	lsls	r3, r3, #4
 800754c:	1a9b      	subs	r3, r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	440b      	add	r3, r1
 8007552:	334d      	adds	r3, #77	@ 0x4d
 8007554:	2207      	movs	r2, #7
 8007556:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	78fa      	ldrb	r2, [r7, #3]
 800755e:	4611      	mov	r1, r2
 8007560:	4618      	mov	r0, r3
 8007562:	f008 fd75 	bl	8010050 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	78fa      	ldrb	r2, [r7, #3]
 800756c:	4611      	mov	r1, r2
 800756e:	4618      	mov	r0, r3
 8007570:	f008 fcf1 	bl	800ff56 <USB_ReadChInterrupts>
 8007574:	4603      	mov	r3, r0
 8007576:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800757a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800757e:	d112      	bne.n	80075a6 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	78fa      	ldrb	r2, [r7, #3]
 8007586:	4611      	mov	r1, r2
 8007588:	4618      	mov	r0, r3
 800758a:	f008 fd61 	bl	8010050 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800758e:	78fb      	ldrb	r3, [r7, #3]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	4413      	add	r3, r2
 8007596:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800759a:	461a      	mov	r2, r3
 800759c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075a0:	6093      	str	r3, [r2, #8]
 80075a2:	f000 bd75 	b.w	8008090 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	78fa      	ldrb	r2, [r7, #3]
 80075ac:	4611      	mov	r1, r2
 80075ae:	4618      	mov	r0, r3
 80075b0:	f008 fcd1 	bl	800ff56 <USB_ReadChInterrupts>
 80075b4:	4603      	mov	r3, r0
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	f040 8128 	bne.w	8007810 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80075c0:	78fb      	ldrb	r3, [r7, #3]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075cc:	461a      	mov	r2, r3
 80075ce:	2320      	movs	r3, #32
 80075d0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80075d2:	78fa      	ldrb	r2, [r7, #3]
 80075d4:	6879      	ldr	r1, [r7, #4]
 80075d6:	4613      	mov	r3, r2
 80075d8:	011b      	lsls	r3, r3, #4
 80075da:	1a9b      	subs	r3, r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	440b      	add	r3, r1
 80075e0:	331b      	adds	r3, #27
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d119      	bne.n	800761c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80075e8:	78fa      	ldrb	r2, [r7, #3]
 80075ea:	6879      	ldr	r1, [r7, #4]
 80075ec:	4613      	mov	r3, r2
 80075ee:	011b      	lsls	r3, r3, #4
 80075f0:	1a9b      	subs	r3, r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	440b      	add	r3, r1
 80075f6:	331b      	adds	r3, #27
 80075f8:	2200      	movs	r2, #0
 80075fa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80075fc:	78fb      	ldrb	r3, [r7, #3]
 80075fe:	015a      	lsls	r2, r3, #5
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	4413      	add	r3, r2
 8007604:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	78fa      	ldrb	r2, [r7, #3]
 800760c:	0151      	lsls	r1, r2, #5
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	440a      	add	r2, r1
 8007612:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007616:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800761a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	799b      	ldrb	r3, [r3, #6]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d01b      	beq.n	800765c <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007624:	78fa      	ldrb	r2, [r7, #3]
 8007626:	6879      	ldr	r1, [r7, #4]
 8007628:	4613      	mov	r3, r2
 800762a:	011b      	lsls	r3, r3, #4
 800762c:	1a9b      	subs	r3, r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	440b      	add	r3, r1
 8007632:	3330      	adds	r3, #48	@ 0x30
 8007634:	6819      	ldr	r1, [r3, #0]
 8007636:	78fb      	ldrb	r3, [r7, #3]
 8007638:	015a      	lsls	r2, r3, #5
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	4413      	add	r3, r2
 800763e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007648:	78fa      	ldrb	r2, [r7, #3]
 800764a:	1ac9      	subs	r1, r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	4613      	mov	r3, r2
 8007650:	011b      	lsls	r3, r3, #4
 8007652:	1a9b      	subs	r3, r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4403      	add	r3, r0
 8007658:	3338      	adds	r3, #56	@ 0x38
 800765a:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800765c:	78fa      	ldrb	r2, [r7, #3]
 800765e:	6879      	ldr	r1, [r7, #4]
 8007660:	4613      	mov	r3, r2
 8007662:	011b      	lsls	r3, r3, #4
 8007664:	1a9b      	subs	r3, r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	440b      	add	r3, r1
 800766a:	334d      	adds	r3, #77	@ 0x4d
 800766c:	2201      	movs	r2, #1
 800766e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8007670:	78fa      	ldrb	r2, [r7, #3]
 8007672:	6879      	ldr	r1, [r7, #4]
 8007674:	4613      	mov	r3, r2
 8007676:	011b      	lsls	r3, r3, #4
 8007678:	1a9b      	subs	r3, r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	440b      	add	r3, r1
 800767e:	3344      	adds	r3, #68	@ 0x44
 8007680:	2200      	movs	r2, #0
 8007682:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	4413      	add	r3, r2
 800768c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007690:	461a      	mov	r2, r3
 8007692:	2301      	movs	r3, #1
 8007694:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007696:	78fa      	ldrb	r2, [r7, #3]
 8007698:	6879      	ldr	r1, [r7, #4]
 800769a:	4613      	mov	r3, r2
 800769c:	011b      	lsls	r3, r3, #4
 800769e:	1a9b      	subs	r3, r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	440b      	add	r3, r1
 80076a4:	3326      	adds	r3, #38	@ 0x26
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00a      	beq.n	80076c2 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80076ac:	78fa      	ldrb	r2, [r7, #3]
 80076ae:	6879      	ldr	r1, [r7, #4]
 80076b0:	4613      	mov	r3, r2
 80076b2:	011b      	lsls	r3, r3, #4
 80076b4:	1a9b      	subs	r3, r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	440b      	add	r3, r1
 80076ba:	3326      	adds	r3, #38	@ 0x26
 80076bc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d110      	bne.n	80076e4 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	78fa      	ldrb	r2, [r7, #3]
 80076c8:	4611      	mov	r1, r2
 80076ca:	4618      	mov	r0, r3
 80076cc:	f008 fcc0 	bl	8010050 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80076d0:	78fb      	ldrb	r3, [r7, #3]
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076dc:	461a      	mov	r2, r3
 80076de:	2310      	movs	r3, #16
 80076e0:	6093      	str	r3, [r2, #8]
 80076e2:	e03d      	b.n	8007760 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80076e4:	78fa      	ldrb	r2, [r7, #3]
 80076e6:	6879      	ldr	r1, [r7, #4]
 80076e8:	4613      	mov	r3, r2
 80076ea:	011b      	lsls	r3, r3, #4
 80076ec:	1a9b      	subs	r3, r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	440b      	add	r3, r1
 80076f2:	3326      	adds	r3, #38	@ 0x26
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	d00a      	beq.n	8007710 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80076fa:	78fa      	ldrb	r2, [r7, #3]
 80076fc:	6879      	ldr	r1, [r7, #4]
 80076fe:	4613      	mov	r3, r2
 8007700:	011b      	lsls	r3, r3, #4
 8007702:	1a9b      	subs	r3, r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	440b      	add	r3, r1
 8007708:	3326      	adds	r3, #38	@ 0x26
 800770a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800770c:	2b01      	cmp	r3, #1
 800770e:	d127      	bne.n	8007760 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007710:	78fb      	ldrb	r3, [r7, #3]
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	4413      	add	r3, r2
 8007718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	78fa      	ldrb	r2, [r7, #3]
 8007720:	0151      	lsls	r1, r2, #5
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	440a      	add	r2, r1
 8007726:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800772a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800772e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007730:	78fa      	ldrb	r2, [r7, #3]
 8007732:	6879      	ldr	r1, [r7, #4]
 8007734:	4613      	mov	r3, r2
 8007736:	011b      	lsls	r3, r3, #4
 8007738:	1a9b      	subs	r3, r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	440b      	add	r3, r1
 800773e:	334c      	adds	r3, #76	@ 0x4c
 8007740:	2201      	movs	r2, #1
 8007742:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007744:	78fa      	ldrb	r2, [r7, #3]
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	4613      	mov	r3, r2
 800774a:	011b      	lsls	r3, r3, #4
 800774c:	1a9b      	subs	r3, r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	440b      	add	r3, r1
 8007752:	334c      	adds	r3, #76	@ 0x4c
 8007754:	781a      	ldrb	r2, [r3, #0]
 8007756:	78fb      	ldrb	r3, [r7, #3]
 8007758:	4619      	mov	r1, r3
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f00e f9ac 	bl	8015ab8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	799b      	ldrb	r3, [r3, #6]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d13b      	bne.n	80077e0 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8007768:	78fa      	ldrb	r2, [r7, #3]
 800776a:	6879      	ldr	r1, [r7, #4]
 800776c:	4613      	mov	r3, r2
 800776e:	011b      	lsls	r3, r3, #4
 8007770:	1a9b      	subs	r3, r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	440b      	add	r3, r1
 8007776:	3338      	adds	r3, #56	@ 0x38
 8007778:	6819      	ldr	r1, [r3, #0]
 800777a:	78fa      	ldrb	r2, [r7, #3]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	4613      	mov	r3, r2
 8007780:	011b      	lsls	r3, r3, #4
 8007782:	1a9b      	subs	r3, r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4403      	add	r3, r0
 8007788:	3328      	adds	r3, #40	@ 0x28
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	440b      	add	r3, r1
 800778e:	1e59      	subs	r1, r3, #1
 8007790:	78fa      	ldrb	r2, [r7, #3]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	4613      	mov	r3, r2
 8007796:	011b      	lsls	r3, r3, #4
 8007798:	1a9b      	subs	r3, r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4403      	add	r3, r0
 800779e:	3328      	adds	r3, #40	@ 0x28
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f000 8470 	beq.w	8008090 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80077b0:	78fa      	ldrb	r2, [r7, #3]
 80077b2:	6879      	ldr	r1, [r7, #4]
 80077b4:	4613      	mov	r3, r2
 80077b6:	011b      	lsls	r3, r3, #4
 80077b8:	1a9b      	subs	r3, r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	440b      	add	r3, r1
 80077be:	333c      	adds	r3, #60	@ 0x3c
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	78fa      	ldrb	r2, [r7, #3]
 80077c4:	f083 0301 	eor.w	r3, r3, #1
 80077c8:	b2d8      	uxtb	r0, r3
 80077ca:	6879      	ldr	r1, [r7, #4]
 80077cc:	4613      	mov	r3, r2
 80077ce:	011b      	lsls	r3, r3, #4
 80077d0:	1a9b      	subs	r3, r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	440b      	add	r3, r1
 80077d6:	333c      	adds	r3, #60	@ 0x3c
 80077d8:	4602      	mov	r2, r0
 80077da:	701a      	strb	r2, [r3, #0]
 80077dc:	f000 bc58 	b.w	8008090 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80077e0:	78fa      	ldrb	r2, [r7, #3]
 80077e2:	6879      	ldr	r1, [r7, #4]
 80077e4:	4613      	mov	r3, r2
 80077e6:	011b      	lsls	r3, r3, #4
 80077e8:	1a9b      	subs	r3, r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	440b      	add	r3, r1
 80077ee:	333c      	adds	r3, #60	@ 0x3c
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	78fa      	ldrb	r2, [r7, #3]
 80077f4:	f083 0301 	eor.w	r3, r3, #1
 80077f8:	b2d8      	uxtb	r0, r3
 80077fa:	6879      	ldr	r1, [r7, #4]
 80077fc:	4613      	mov	r3, r2
 80077fe:	011b      	lsls	r3, r3, #4
 8007800:	1a9b      	subs	r3, r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	440b      	add	r3, r1
 8007806:	333c      	adds	r3, #60	@ 0x3c
 8007808:	4602      	mov	r2, r0
 800780a:	701a      	strb	r2, [r3, #0]
 800780c:	f000 bc40 	b.w	8008090 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	78fa      	ldrb	r2, [r7, #3]
 8007816:	4611      	mov	r1, r2
 8007818:	4618      	mov	r0, r3
 800781a:	f008 fb9c 	bl	800ff56 <USB_ReadChInterrupts>
 800781e:	4603      	mov	r3, r0
 8007820:	f003 0320 	and.w	r3, r3, #32
 8007824:	2b20      	cmp	r3, #32
 8007826:	d131      	bne.n	800788c <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007828:	78fb      	ldrb	r3, [r7, #3]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	4413      	add	r3, r2
 8007830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007834:	461a      	mov	r2, r3
 8007836:	2320      	movs	r3, #32
 8007838:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800783a:	78fa      	ldrb	r2, [r7, #3]
 800783c:	6879      	ldr	r1, [r7, #4]
 800783e:	4613      	mov	r3, r2
 8007840:	011b      	lsls	r3, r3, #4
 8007842:	1a9b      	subs	r3, r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	440b      	add	r3, r1
 8007848:	331a      	adds	r3, #26
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	2b01      	cmp	r3, #1
 800784e:	f040 841f 	bne.w	8008090 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8007852:	78fa      	ldrb	r2, [r7, #3]
 8007854:	6879      	ldr	r1, [r7, #4]
 8007856:	4613      	mov	r3, r2
 8007858:	011b      	lsls	r3, r3, #4
 800785a:	1a9b      	subs	r3, r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	440b      	add	r3, r1
 8007860:	331b      	adds	r3, #27
 8007862:	2201      	movs	r2, #1
 8007864:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8007866:	78fa      	ldrb	r2, [r7, #3]
 8007868:	6879      	ldr	r1, [r7, #4]
 800786a:	4613      	mov	r3, r2
 800786c:	011b      	lsls	r3, r3, #4
 800786e:	1a9b      	subs	r3, r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	440b      	add	r3, r1
 8007874:	334d      	adds	r3, #77	@ 0x4d
 8007876:	2203      	movs	r2, #3
 8007878:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	78fa      	ldrb	r2, [r7, #3]
 8007880:	4611      	mov	r1, r2
 8007882:	4618      	mov	r0, r3
 8007884:	f008 fbe4 	bl	8010050 <USB_HC_Halt>
 8007888:	f000 bc02 	b.w	8008090 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	78fa      	ldrb	r2, [r7, #3]
 8007892:	4611      	mov	r1, r2
 8007894:	4618      	mov	r0, r3
 8007896:	f008 fb5e 	bl	800ff56 <USB_ReadChInterrupts>
 800789a:	4603      	mov	r3, r0
 800789c:	f003 0302 	and.w	r3, r3, #2
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	f040 8305 	bne.w	8007eb0 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80078a6:	78fb      	ldrb	r3, [r7, #3]
 80078a8:	015a      	lsls	r2, r3, #5
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	4413      	add	r3, r2
 80078ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078b2:	461a      	mov	r2, r3
 80078b4:	2302      	movs	r3, #2
 80078b6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80078b8:	78fa      	ldrb	r2, [r7, #3]
 80078ba:	6879      	ldr	r1, [r7, #4]
 80078bc:	4613      	mov	r3, r2
 80078be:	011b      	lsls	r3, r3, #4
 80078c0:	1a9b      	subs	r3, r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	440b      	add	r3, r1
 80078c6:	334d      	adds	r3, #77	@ 0x4d
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d114      	bne.n	80078f8 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80078ce:	78fa      	ldrb	r2, [r7, #3]
 80078d0:	6879      	ldr	r1, [r7, #4]
 80078d2:	4613      	mov	r3, r2
 80078d4:	011b      	lsls	r3, r3, #4
 80078d6:	1a9b      	subs	r3, r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	440b      	add	r3, r1
 80078dc:	334d      	adds	r3, #77	@ 0x4d
 80078de:	2202      	movs	r2, #2
 80078e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80078e2:	78fa      	ldrb	r2, [r7, #3]
 80078e4:	6879      	ldr	r1, [r7, #4]
 80078e6:	4613      	mov	r3, r2
 80078e8:	011b      	lsls	r3, r3, #4
 80078ea:	1a9b      	subs	r3, r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	440b      	add	r3, r1
 80078f0:	334c      	adds	r3, #76	@ 0x4c
 80078f2:	2201      	movs	r2, #1
 80078f4:	701a      	strb	r2, [r3, #0]
 80078f6:	e2cc      	b.n	8007e92 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80078f8:	78fa      	ldrb	r2, [r7, #3]
 80078fa:	6879      	ldr	r1, [r7, #4]
 80078fc:	4613      	mov	r3, r2
 80078fe:	011b      	lsls	r3, r3, #4
 8007900:	1a9b      	subs	r3, r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	440b      	add	r3, r1
 8007906:	334d      	adds	r3, #77	@ 0x4d
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	2b06      	cmp	r3, #6
 800790c:	d114      	bne.n	8007938 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800790e:	78fa      	ldrb	r2, [r7, #3]
 8007910:	6879      	ldr	r1, [r7, #4]
 8007912:	4613      	mov	r3, r2
 8007914:	011b      	lsls	r3, r3, #4
 8007916:	1a9b      	subs	r3, r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	440b      	add	r3, r1
 800791c:	334d      	adds	r3, #77	@ 0x4d
 800791e:	2202      	movs	r2, #2
 8007920:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8007922:	78fa      	ldrb	r2, [r7, #3]
 8007924:	6879      	ldr	r1, [r7, #4]
 8007926:	4613      	mov	r3, r2
 8007928:	011b      	lsls	r3, r3, #4
 800792a:	1a9b      	subs	r3, r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	440b      	add	r3, r1
 8007930:	334c      	adds	r3, #76	@ 0x4c
 8007932:	2205      	movs	r2, #5
 8007934:	701a      	strb	r2, [r3, #0]
 8007936:	e2ac      	b.n	8007e92 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007938:	78fa      	ldrb	r2, [r7, #3]
 800793a:	6879      	ldr	r1, [r7, #4]
 800793c:	4613      	mov	r3, r2
 800793e:	011b      	lsls	r3, r3, #4
 8007940:	1a9b      	subs	r3, r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	440b      	add	r3, r1
 8007946:	334d      	adds	r3, #77	@ 0x4d
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	2b07      	cmp	r3, #7
 800794c:	d00b      	beq.n	8007966 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800794e:	78fa      	ldrb	r2, [r7, #3]
 8007950:	6879      	ldr	r1, [r7, #4]
 8007952:	4613      	mov	r3, r2
 8007954:	011b      	lsls	r3, r3, #4
 8007956:	1a9b      	subs	r3, r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	440b      	add	r3, r1
 800795c:	334d      	adds	r3, #77	@ 0x4d
 800795e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007960:	2b09      	cmp	r3, #9
 8007962:	f040 80a6 	bne.w	8007ab2 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007966:	78fa      	ldrb	r2, [r7, #3]
 8007968:	6879      	ldr	r1, [r7, #4]
 800796a:	4613      	mov	r3, r2
 800796c:	011b      	lsls	r3, r3, #4
 800796e:	1a9b      	subs	r3, r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	440b      	add	r3, r1
 8007974:	334d      	adds	r3, #77	@ 0x4d
 8007976:	2202      	movs	r2, #2
 8007978:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800797a:	78fa      	ldrb	r2, [r7, #3]
 800797c:	6879      	ldr	r1, [r7, #4]
 800797e:	4613      	mov	r3, r2
 8007980:	011b      	lsls	r3, r3, #4
 8007982:	1a9b      	subs	r3, r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	440b      	add	r3, r1
 8007988:	3344      	adds	r3, #68	@ 0x44
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	1c59      	adds	r1, r3, #1
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	4613      	mov	r3, r2
 8007992:	011b      	lsls	r3, r3, #4
 8007994:	1a9b      	subs	r3, r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4403      	add	r3, r0
 800799a:	3344      	adds	r3, #68	@ 0x44
 800799c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800799e:	78fa      	ldrb	r2, [r7, #3]
 80079a0:	6879      	ldr	r1, [r7, #4]
 80079a2:	4613      	mov	r3, r2
 80079a4:	011b      	lsls	r3, r3, #4
 80079a6:	1a9b      	subs	r3, r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	440b      	add	r3, r1
 80079ac:	3344      	adds	r3, #68	@ 0x44
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d943      	bls.n	8007a3c <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80079b4:	78fa      	ldrb	r2, [r7, #3]
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	4613      	mov	r3, r2
 80079ba:	011b      	lsls	r3, r3, #4
 80079bc:	1a9b      	subs	r3, r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	440b      	add	r3, r1
 80079c2:	3344      	adds	r3, #68	@ 0x44
 80079c4:	2200      	movs	r2, #0
 80079c6:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80079c8:	78fa      	ldrb	r2, [r7, #3]
 80079ca:	6879      	ldr	r1, [r7, #4]
 80079cc:	4613      	mov	r3, r2
 80079ce:	011b      	lsls	r3, r3, #4
 80079d0:	1a9b      	subs	r3, r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	440b      	add	r3, r1
 80079d6:	331a      	adds	r3, #26
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d123      	bne.n	8007a26 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80079de:	78fa      	ldrb	r2, [r7, #3]
 80079e0:	6879      	ldr	r1, [r7, #4]
 80079e2:	4613      	mov	r3, r2
 80079e4:	011b      	lsls	r3, r3, #4
 80079e6:	1a9b      	subs	r3, r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	440b      	add	r3, r1
 80079ec:	331b      	adds	r3, #27
 80079ee:	2200      	movs	r2, #0
 80079f0:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80079f2:	78fa      	ldrb	r2, [r7, #3]
 80079f4:	6879      	ldr	r1, [r7, #4]
 80079f6:	4613      	mov	r3, r2
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	1a9b      	subs	r3, r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	440b      	add	r3, r1
 8007a00:	331c      	adds	r3, #28
 8007a02:	2200      	movs	r2, #0
 8007a04:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007a06:	78fb      	ldrb	r3, [r7, #3]
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	78fa      	ldrb	r2, [r7, #3]
 8007a16:	0151      	lsls	r1, r2, #5
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	440a      	add	r2, r1
 8007a1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a24:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8007a26:	78fa      	ldrb	r2, [r7, #3]
 8007a28:	6879      	ldr	r1, [r7, #4]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	011b      	lsls	r3, r3, #4
 8007a2e:	1a9b      	subs	r3, r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	440b      	add	r3, r1
 8007a34:	334c      	adds	r3, #76	@ 0x4c
 8007a36:	2204      	movs	r2, #4
 8007a38:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007a3a:	e229      	b.n	8007e90 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007a3c:	78fa      	ldrb	r2, [r7, #3]
 8007a3e:	6879      	ldr	r1, [r7, #4]
 8007a40:	4613      	mov	r3, r2
 8007a42:	011b      	lsls	r3, r3, #4
 8007a44:	1a9b      	subs	r3, r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	440b      	add	r3, r1
 8007a4a:	334c      	adds	r3, #76	@ 0x4c
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007a50:	78fa      	ldrb	r2, [r7, #3]
 8007a52:	6879      	ldr	r1, [r7, #4]
 8007a54:	4613      	mov	r3, r2
 8007a56:	011b      	lsls	r3, r3, #4
 8007a58:	1a9b      	subs	r3, r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	440b      	add	r3, r1
 8007a5e:	3326      	adds	r3, #38	@ 0x26
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00b      	beq.n	8007a7e <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007a66:	78fa      	ldrb	r2, [r7, #3]
 8007a68:	6879      	ldr	r1, [r7, #4]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	011b      	lsls	r3, r3, #4
 8007a6e:	1a9b      	subs	r3, r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	440b      	add	r3, r1
 8007a74:	3326      	adds	r3, #38	@ 0x26
 8007a76:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	f040 8209 	bne.w	8007e90 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007a7e:	78fb      	ldrb	r3, [r7, #3]
 8007a80:	015a      	lsls	r2, r3, #5
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007a94:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a9c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007a9e:	78fb      	ldrb	r3, [r7, #3]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aaa:	461a      	mov	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007ab0:	e1ee      	b.n	8007e90 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8007ab2:	78fa      	ldrb	r2, [r7, #3]
 8007ab4:	6879      	ldr	r1, [r7, #4]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	011b      	lsls	r3, r3, #4
 8007aba:	1a9b      	subs	r3, r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	440b      	add	r3, r1
 8007ac0:	334d      	adds	r3, #77	@ 0x4d
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	2b05      	cmp	r3, #5
 8007ac6:	f040 80c8 	bne.w	8007c5a <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007aca:	78fa      	ldrb	r2, [r7, #3]
 8007acc:	6879      	ldr	r1, [r7, #4]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	011b      	lsls	r3, r3, #4
 8007ad2:	1a9b      	subs	r3, r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	440b      	add	r3, r1
 8007ad8:	334d      	adds	r3, #77	@ 0x4d
 8007ada:	2202      	movs	r2, #2
 8007adc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007ade:	78fa      	ldrb	r2, [r7, #3]
 8007ae0:	6879      	ldr	r1, [r7, #4]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	011b      	lsls	r3, r3, #4
 8007ae6:	1a9b      	subs	r3, r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	440b      	add	r3, r1
 8007aec:	331b      	adds	r3, #27
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	f040 81ce 	bne.w	8007e92 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8007af6:	78fa      	ldrb	r2, [r7, #3]
 8007af8:	6879      	ldr	r1, [r7, #4]
 8007afa:	4613      	mov	r3, r2
 8007afc:	011b      	lsls	r3, r3, #4
 8007afe:	1a9b      	subs	r3, r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	440b      	add	r3, r1
 8007b04:	3326      	adds	r3, #38	@ 0x26
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	2b03      	cmp	r3, #3
 8007b0a:	d16b      	bne.n	8007be4 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8007b0c:	78fa      	ldrb	r2, [r7, #3]
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	4613      	mov	r3, r2
 8007b12:	011b      	lsls	r3, r3, #4
 8007b14:	1a9b      	subs	r3, r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	440b      	add	r3, r1
 8007b1a:	3348      	adds	r3, #72	@ 0x48
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	1c59      	adds	r1, r3, #1
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	4613      	mov	r3, r2
 8007b24:	011b      	lsls	r3, r3, #4
 8007b26:	1a9b      	subs	r3, r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4403      	add	r3, r0
 8007b2c:	3348      	adds	r3, #72	@ 0x48
 8007b2e:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8007b30:	78fa      	ldrb	r2, [r7, #3]
 8007b32:	6879      	ldr	r1, [r7, #4]
 8007b34:	4613      	mov	r3, r2
 8007b36:	011b      	lsls	r3, r3, #4
 8007b38:	1a9b      	subs	r3, r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	440b      	add	r3, r1
 8007b3e:	3348      	adds	r3, #72	@ 0x48
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d943      	bls.n	8007bce <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8007b46:	78fa      	ldrb	r2, [r7, #3]
 8007b48:	6879      	ldr	r1, [r7, #4]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	011b      	lsls	r3, r3, #4
 8007b4e:	1a9b      	subs	r3, r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	440b      	add	r3, r1
 8007b54:	3348      	adds	r3, #72	@ 0x48
 8007b56:	2200      	movs	r2, #0
 8007b58:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8007b5a:	78fa      	ldrb	r2, [r7, #3]
 8007b5c:	6879      	ldr	r1, [r7, #4]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	011b      	lsls	r3, r3, #4
 8007b62:	1a9b      	subs	r3, r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	440b      	add	r3, r1
 8007b68:	331b      	adds	r3, #27
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8007b6e:	78fa      	ldrb	r2, [r7, #3]
 8007b70:	6879      	ldr	r1, [r7, #4]
 8007b72:	4613      	mov	r3, r2
 8007b74:	011b      	lsls	r3, r3, #4
 8007b76:	1a9b      	subs	r3, r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	440b      	add	r3, r1
 8007b7c:	3344      	adds	r3, #68	@ 0x44
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d809      	bhi.n	8007b98 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8007b84:	78fa      	ldrb	r2, [r7, #3]
 8007b86:	6879      	ldr	r1, [r7, #4]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	011b      	lsls	r3, r3, #4
 8007b8c:	1a9b      	subs	r3, r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	440b      	add	r3, r1
 8007b92:	331c      	adds	r3, #28
 8007b94:	2201      	movs	r2, #1
 8007b96:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007b98:	78fb      	ldrb	r3, [r7, #3]
 8007b9a:	015a      	lsls	r2, r3, #5
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	78fa      	ldrb	r2, [r7, #3]
 8007ba8:	0151      	lsls	r1, r2, #5
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	440a      	add	r2, r1
 8007bae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bb6:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8007bb8:	78fa      	ldrb	r2, [r7, #3]
 8007bba:	6879      	ldr	r1, [r7, #4]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	011b      	lsls	r3, r3, #4
 8007bc0:	1a9b      	subs	r3, r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	440b      	add	r3, r1
 8007bc6:	334c      	adds	r3, #76	@ 0x4c
 8007bc8:	2204      	movs	r2, #4
 8007bca:	701a      	strb	r2, [r3, #0]
 8007bcc:	e014      	b.n	8007bf8 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007bce:	78fa      	ldrb	r2, [r7, #3]
 8007bd0:	6879      	ldr	r1, [r7, #4]
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	011b      	lsls	r3, r3, #4
 8007bd6:	1a9b      	subs	r3, r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	440b      	add	r3, r1
 8007bdc:	334c      	adds	r3, #76	@ 0x4c
 8007bde:	2202      	movs	r2, #2
 8007be0:	701a      	strb	r2, [r3, #0]
 8007be2:	e009      	b.n	8007bf8 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007be4:	78fa      	ldrb	r2, [r7, #3]
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	4613      	mov	r3, r2
 8007bea:	011b      	lsls	r3, r3, #4
 8007bec:	1a9b      	subs	r3, r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	440b      	add	r3, r1
 8007bf2:	334c      	adds	r3, #76	@ 0x4c
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007bf8:	78fa      	ldrb	r2, [r7, #3]
 8007bfa:	6879      	ldr	r1, [r7, #4]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	011b      	lsls	r3, r3, #4
 8007c00:	1a9b      	subs	r3, r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	440b      	add	r3, r1
 8007c06:	3326      	adds	r3, #38	@ 0x26
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00b      	beq.n	8007c26 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007c0e:	78fa      	ldrb	r2, [r7, #3]
 8007c10:	6879      	ldr	r1, [r7, #4]
 8007c12:	4613      	mov	r3, r2
 8007c14:	011b      	lsls	r3, r3, #4
 8007c16:	1a9b      	subs	r3, r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	440b      	add	r3, r1
 8007c1c:	3326      	adds	r3, #38	@ 0x26
 8007c1e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	f040 8136 	bne.w	8007e92 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007c26:	78fb      	ldrb	r3, [r7, #3]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007c3c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c44:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007c46:	78fb      	ldrb	r3, [r7, #3]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c52:	461a      	mov	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	e11b      	b.n	8007e92 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8007c5a:	78fa      	ldrb	r2, [r7, #3]
 8007c5c:	6879      	ldr	r1, [r7, #4]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	011b      	lsls	r3, r3, #4
 8007c62:	1a9b      	subs	r3, r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	440b      	add	r3, r1
 8007c68:	334d      	adds	r3, #77	@ 0x4d
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	2b03      	cmp	r3, #3
 8007c6e:	f040 8081 	bne.w	8007d74 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007c72:	78fa      	ldrb	r2, [r7, #3]
 8007c74:	6879      	ldr	r1, [r7, #4]
 8007c76:	4613      	mov	r3, r2
 8007c78:	011b      	lsls	r3, r3, #4
 8007c7a:	1a9b      	subs	r3, r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	440b      	add	r3, r1
 8007c80:	334d      	adds	r3, #77	@ 0x4d
 8007c82:	2202      	movs	r2, #2
 8007c84:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007c86:	78fa      	ldrb	r2, [r7, #3]
 8007c88:	6879      	ldr	r1, [r7, #4]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	011b      	lsls	r3, r3, #4
 8007c8e:	1a9b      	subs	r3, r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	440b      	add	r3, r1
 8007c94:	331b      	adds	r3, #27
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	f040 80fa 	bne.w	8007e92 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007c9e:	78fa      	ldrb	r2, [r7, #3]
 8007ca0:	6879      	ldr	r1, [r7, #4]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	011b      	lsls	r3, r3, #4
 8007ca6:	1a9b      	subs	r3, r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	440b      	add	r3, r1
 8007cac:	334c      	adds	r3, #76	@ 0x4c
 8007cae:	2202      	movs	r2, #2
 8007cb0:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007cb2:	78fb      	ldrb	r3, [r7, #3]
 8007cb4:	015a      	lsls	r2, r3, #5
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	4413      	add	r3, r2
 8007cba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	78fa      	ldrb	r2, [r7, #3]
 8007cc2:	0151      	lsls	r1, r2, #5
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	440a      	add	r2, r1
 8007cc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cd0:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007cd2:	78fb      	ldrb	r3, [r7, #3]
 8007cd4:	015a      	lsls	r2, r3, #5
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	4413      	add	r3, r2
 8007cda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	78fa      	ldrb	r2, [r7, #3]
 8007ce2:	0151      	lsls	r1, r2, #5
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	440a      	add	r2, r1
 8007ce8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cf0:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8007cf2:	78fb      	ldrb	r3, [r7, #3]
 8007cf4:	015a      	lsls	r2, r3, #5
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	78fa      	ldrb	r2, [r7, #3]
 8007d02:	0151      	lsls	r1, r2, #5
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	440a      	add	r2, r1
 8007d08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d0c:	f023 0320 	bic.w	r3, r3, #32
 8007d10:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007d12:	78fa      	ldrb	r2, [r7, #3]
 8007d14:	6879      	ldr	r1, [r7, #4]
 8007d16:	4613      	mov	r3, r2
 8007d18:	011b      	lsls	r3, r3, #4
 8007d1a:	1a9b      	subs	r3, r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	440b      	add	r3, r1
 8007d20:	3326      	adds	r3, #38	@ 0x26
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00b      	beq.n	8007d40 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007d28:	78fa      	ldrb	r2, [r7, #3]
 8007d2a:	6879      	ldr	r1, [r7, #4]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	011b      	lsls	r3, r3, #4
 8007d30:	1a9b      	subs	r3, r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	440b      	add	r3, r1
 8007d36:	3326      	adds	r3, #38	@ 0x26
 8007d38:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	f040 80a9 	bne.w	8007e92 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007d40:	78fb      	ldrb	r3, [r7, #3]
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d56:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d5e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6013      	str	r3, [r2, #0]
 8007d72:	e08e      	b.n	8007e92 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8007d74:	78fa      	ldrb	r2, [r7, #3]
 8007d76:	6879      	ldr	r1, [r7, #4]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	011b      	lsls	r3, r3, #4
 8007d7c:	1a9b      	subs	r3, r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	440b      	add	r3, r1
 8007d82:	334d      	adds	r3, #77	@ 0x4d
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	2b04      	cmp	r3, #4
 8007d88:	d143      	bne.n	8007e12 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007d8a:	78fa      	ldrb	r2, [r7, #3]
 8007d8c:	6879      	ldr	r1, [r7, #4]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	011b      	lsls	r3, r3, #4
 8007d92:	1a9b      	subs	r3, r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	440b      	add	r3, r1
 8007d98:	334d      	adds	r3, #77	@ 0x4d
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007d9e:	78fa      	ldrb	r2, [r7, #3]
 8007da0:	6879      	ldr	r1, [r7, #4]
 8007da2:	4613      	mov	r3, r2
 8007da4:	011b      	lsls	r3, r3, #4
 8007da6:	1a9b      	subs	r3, r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	440b      	add	r3, r1
 8007dac:	334c      	adds	r3, #76	@ 0x4c
 8007dae:	2202      	movs	r2, #2
 8007db0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007db2:	78fa      	ldrb	r2, [r7, #3]
 8007db4:	6879      	ldr	r1, [r7, #4]
 8007db6:	4613      	mov	r3, r2
 8007db8:	011b      	lsls	r3, r3, #4
 8007dba:	1a9b      	subs	r3, r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	440b      	add	r3, r1
 8007dc0:	3326      	adds	r3, #38	@ 0x26
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00a      	beq.n	8007dde <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007dc8:	78fa      	ldrb	r2, [r7, #3]
 8007dca:	6879      	ldr	r1, [r7, #4]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	011b      	lsls	r3, r3, #4
 8007dd0:	1a9b      	subs	r3, r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	440b      	add	r3, r1
 8007dd6:	3326      	adds	r3, #38	@ 0x26
 8007dd8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d159      	bne.n	8007e92 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007dde:	78fb      	ldrb	r3, [r7, #3]
 8007de0:	015a      	lsls	r2, r3, #5
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	4413      	add	r3, r2
 8007de6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007df4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007dfc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007dfe:	78fb      	ldrb	r3, [r7, #3]
 8007e00:	015a      	lsls	r2, r3, #5
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	4413      	add	r3, r2
 8007e06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6013      	str	r3, [r2, #0]
 8007e10:	e03f      	b.n	8007e92 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8007e12:	78fa      	ldrb	r2, [r7, #3]
 8007e14:	6879      	ldr	r1, [r7, #4]
 8007e16:	4613      	mov	r3, r2
 8007e18:	011b      	lsls	r3, r3, #4
 8007e1a:	1a9b      	subs	r3, r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	440b      	add	r3, r1
 8007e20:	334d      	adds	r3, #77	@ 0x4d
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	2b08      	cmp	r3, #8
 8007e26:	d126      	bne.n	8007e76 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007e28:	78fa      	ldrb	r2, [r7, #3]
 8007e2a:	6879      	ldr	r1, [r7, #4]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	011b      	lsls	r3, r3, #4
 8007e30:	1a9b      	subs	r3, r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	440b      	add	r3, r1
 8007e36:	334d      	adds	r3, #77	@ 0x4d
 8007e38:	2202      	movs	r2, #2
 8007e3a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007e3c:	78fa      	ldrb	r2, [r7, #3]
 8007e3e:	6879      	ldr	r1, [r7, #4]
 8007e40:	4613      	mov	r3, r2
 8007e42:	011b      	lsls	r3, r3, #4
 8007e44:	1a9b      	subs	r3, r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	440b      	add	r3, r1
 8007e4a:	3344      	adds	r3, #68	@ 0x44
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	1c59      	adds	r1, r3, #1
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	4613      	mov	r3, r2
 8007e54:	011b      	lsls	r3, r3, #4
 8007e56:	1a9b      	subs	r3, r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4403      	add	r3, r0
 8007e5c:	3344      	adds	r3, #68	@ 0x44
 8007e5e:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8007e60:	78fa      	ldrb	r2, [r7, #3]
 8007e62:	6879      	ldr	r1, [r7, #4]
 8007e64:	4613      	mov	r3, r2
 8007e66:	011b      	lsls	r3, r3, #4
 8007e68:	1a9b      	subs	r3, r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	440b      	add	r3, r1
 8007e6e:	334c      	adds	r3, #76	@ 0x4c
 8007e70:	2204      	movs	r2, #4
 8007e72:	701a      	strb	r2, [r3, #0]
 8007e74:	e00d      	b.n	8007e92 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8007e76:	78fa      	ldrb	r2, [r7, #3]
 8007e78:	6879      	ldr	r1, [r7, #4]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	011b      	lsls	r3, r3, #4
 8007e7e:	1a9b      	subs	r3, r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	440b      	add	r3, r1
 8007e84:	334d      	adds	r3, #77	@ 0x4d
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	f000 8100 	beq.w	800808e <HCD_HC_IN_IRQHandler+0xcca>
 8007e8e:	e000      	b.n	8007e92 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007e90:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007e92:	78fa      	ldrb	r2, [r7, #3]
 8007e94:	6879      	ldr	r1, [r7, #4]
 8007e96:	4613      	mov	r3, r2
 8007e98:	011b      	lsls	r3, r3, #4
 8007e9a:	1a9b      	subs	r3, r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	440b      	add	r3, r1
 8007ea0:	334c      	adds	r3, #76	@ 0x4c
 8007ea2:	781a      	ldrb	r2, [r3, #0]
 8007ea4:	78fb      	ldrb	r3, [r7, #3]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f00d fe05 	bl	8015ab8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007eae:	e0ef      	b.n	8008090 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	78fa      	ldrb	r2, [r7, #3]
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f008 f84c 	bl	800ff56 <USB_ReadChInterrupts>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ec4:	2b40      	cmp	r3, #64	@ 0x40
 8007ec6:	d12f      	bne.n	8007f28 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007ec8:	78fb      	ldrb	r3, [r7, #3]
 8007eca:	015a      	lsls	r2, r3, #5
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	2340      	movs	r3, #64	@ 0x40
 8007ed8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8007eda:	78fa      	ldrb	r2, [r7, #3]
 8007edc:	6879      	ldr	r1, [r7, #4]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	011b      	lsls	r3, r3, #4
 8007ee2:	1a9b      	subs	r3, r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	440b      	add	r3, r1
 8007ee8:	334d      	adds	r3, #77	@ 0x4d
 8007eea:	2205      	movs	r2, #5
 8007eec:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8007eee:	78fa      	ldrb	r2, [r7, #3]
 8007ef0:	6879      	ldr	r1, [r7, #4]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	011b      	lsls	r3, r3, #4
 8007ef6:	1a9b      	subs	r3, r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	440b      	add	r3, r1
 8007efc:	331a      	adds	r3, #26
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d109      	bne.n	8007f18 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007f04:	78fa      	ldrb	r2, [r7, #3]
 8007f06:	6879      	ldr	r1, [r7, #4]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	011b      	lsls	r3, r3, #4
 8007f0c:	1a9b      	subs	r3, r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	440b      	add	r3, r1
 8007f12:	3344      	adds	r3, #68	@ 0x44
 8007f14:	2200      	movs	r2, #0
 8007f16:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	78fa      	ldrb	r2, [r7, #3]
 8007f1e:	4611      	mov	r1, r2
 8007f20:	4618      	mov	r0, r3
 8007f22:	f008 f895 	bl	8010050 <USB_HC_Halt>
 8007f26:	e0b3      	b.n	8008090 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	78fa      	ldrb	r2, [r7, #3]
 8007f2e:	4611      	mov	r1, r2
 8007f30:	4618      	mov	r0, r3
 8007f32:	f008 f810 	bl	800ff56 <USB_ReadChInterrupts>
 8007f36:	4603      	mov	r3, r0
 8007f38:	f003 0310 	and.w	r3, r3, #16
 8007f3c:	2b10      	cmp	r3, #16
 8007f3e:	f040 80a7 	bne.w	8008090 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8007f42:	78fa      	ldrb	r2, [r7, #3]
 8007f44:	6879      	ldr	r1, [r7, #4]
 8007f46:	4613      	mov	r3, r2
 8007f48:	011b      	lsls	r3, r3, #4
 8007f4a:	1a9b      	subs	r3, r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	440b      	add	r3, r1
 8007f50:	3326      	adds	r3, #38	@ 0x26
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	2b03      	cmp	r3, #3
 8007f56:	d11b      	bne.n	8007f90 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007f58:	78fa      	ldrb	r2, [r7, #3]
 8007f5a:	6879      	ldr	r1, [r7, #4]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	011b      	lsls	r3, r3, #4
 8007f60:	1a9b      	subs	r3, r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	440b      	add	r3, r1
 8007f66:	3344      	adds	r3, #68	@ 0x44
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8007f6c:	78fa      	ldrb	r2, [r7, #3]
 8007f6e:	6879      	ldr	r1, [r7, #4]
 8007f70:	4613      	mov	r3, r2
 8007f72:	011b      	lsls	r3, r3, #4
 8007f74:	1a9b      	subs	r3, r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	440b      	add	r3, r1
 8007f7a:	334d      	adds	r3, #77	@ 0x4d
 8007f7c:	2204      	movs	r2, #4
 8007f7e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	78fa      	ldrb	r2, [r7, #3]
 8007f86:	4611      	mov	r1, r2
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f008 f861 	bl	8010050 <USB_HC_Halt>
 8007f8e:	e03f      	b.n	8008010 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007f90:	78fa      	ldrb	r2, [r7, #3]
 8007f92:	6879      	ldr	r1, [r7, #4]
 8007f94:	4613      	mov	r3, r2
 8007f96:	011b      	lsls	r3, r3, #4
 8007f98:	1a9b      	subs	r3, r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	440b      	add	r3, r1
 8007f9e:	3326      	adds	r3, #38	@ 0x26
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00a      	beq.n	8007fbc <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007fa6:	78fa      	ldrb	r2, [r7, #3]
 8007fa8:	6879      	ldr	r1, [r7, #4]
 8007faa:	4613      	mov	r3, r2
 8007fac:	011b      	lsls	r3, r3, #4
 8007fae:	1a9b      	subs	r3, r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	440b      	add	r3, r1
 8007fb4:	3326      	adds	r3, #38	@ 0x26
 8007fb6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d129      	bne.n	8008010 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007fbc:	78fa      	ldrb	r2, [r7, #3]
 8007fbe:	6879      	ldr	r1, [r7, #4]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	011b      	lsls	r3, r3, #4
 8007fc4:	1a9b      	subs	r3, r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	440b      	add	r3, r1
 8007fca:	3344      	adds	r3, #68	@ 0x44
 8007fcc:	2200      	movs	r2, #0
 8007fce:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	799b      	ldrb	r3, [r3, #6]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00a      	beq.n	8007fee <HCD_HC_IN_IRQHandler+0xc2a>
 8007fd8:	78fa      	ldrb	r2, [r7, #3]
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	011b      	lsls	r3, r3, #4
 8007fe0:	1a9b      	subs	r3, r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	440b      	add	r3, r1
 8007fe6:	331b      	adds	r3, #27
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d110      	bne.n	8008010 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8007fee:	78fa      	ldrb	r2, [r7, #3]
 8007ff0:	6879      	ldr	r1, [r7, #4]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	011b      	lsls	r3, r3, #4
 8007ff6:	1a9b      	subs	r3, r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	440b      	add	r3, r1
 8007ffc:	334d      	adds	r3, #77	@ 0x4d
 8007ffe:	2204      	movs	r2, #4
 8008000:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	78fa      	ldrb	r2, [r7, #3]
 8008008:	4611      	mov	r1, r2
 800800a:	4618      	mov	r0, r3
 800800c:	f008 f820 	bl	8010050 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8008010:	78fa      	ldrb	r2, [r7, #3]
 8008012:	6879      	ldr	r1, [r7, #4]
 8008014:	4613      	mov	r3, r2
 8008016:	011b      	lsls	r3, r3, #4
 8008018:	1a9b      	subs	r3, r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	440b      	add	r3, r1
 800801e:	331b      	adds	r3, #27
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d129      	bne.n	800807a <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008026:	78fa      	ldrb	r2, [r7, #3]
 8008028:	6879      	ldr	r1, [r7, #4]
 800802a:	4613      	mov	r3, r2
 800802c:	011b      	lsls	r3, r3, #4
 800802e:	1a9b      	subs	r3, r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	440b      	add	r3, r1
 8008034:	331b      	adds	r3, #27
 8008036:	2200      	movs	r2, #0
 8008038:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800803a:	78fb      	ldrb	r3, [r7, #3]
 800803c:	015a      	lsls	r2, r3, #5
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	4413      	add	r3, r2
 8008042:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	78fa      	ldrb	r2, [r7, #3]
 800804a:	0151      	lsls	r1, r2, #5
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	440a      	add	r2, r1
 8008050:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008054:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008058:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800805a:	78fb      	ldrb	r3, [r7, #3]
 800805c:	015a      	lsls	r2, r3, #5
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	4413      	add	r3, r2
 8008062:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	78fa      	ldrb	r2, [r7, #3]
 800806a:	0151      	lsls	r1, r2, #5
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	440a      	add	r2, r1
 8008070:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008074:	f043 0320 	orr.w	r3, r3, #32
 8008078:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800807a:	78fb      	ldrb	r3, [r7, #3]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	4413      	add	r3, r2
 8008082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008086:	461a      	mov	r2, r3
 8008088:	2310      	movs	r3, #16
 800808a:	6093      	str	r3, [r2, #8]
 800808c:	e000      	b.n	8008090 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800808e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8008090:	3718      	adds	r7, #24
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b086      	sub	sp, #24
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	460b      	mov	r3, r1
 80080a0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	78fa      	ldrb	r2, [r7, #3]
 80080b2:	4611      	mov	r1, r2
 80080b4:	4618      	mov	r0, r3
 80080b6:	f007 ff4e 	bl	800ff56 <USB_ReadChInterrupts>
 80080ba:	4603      	mov	r3, r0
 80080bc:	f003 0304 	and.w	r3, r3, #4
 80080c0:	2b04      	cmp	r3, #4
 80080c2:	d11b      	bne.n	80080fc <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80080c4:	78fb      	ldrb	r3, [r7, #3]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080d0:	461a      	mov	r2, r3
 80080d2:	2304      	movs	r3, #4
 80080d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80080d6:	78fa      	ldrb	r2, [r7, #3]
 80080d8:	6879      	ldr	r1, [r7, #4]
 80080da:	4613      	mov	r3, r2
 80080dc:	011b      	lsls	r3, r3, #4
 80080de:	1a9b      	subs	r3, r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	440b      	add	r3, r1
 80080e4:	334d      	adds	r3, #77	@ 0x4d
 80080e6:	2207      	movs	r2, #7
 80080e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	78fa      	ldrb	r2, [r7, #3]
 80080f0:	4611      	mov	r1, r2
 80080f2:	4618      	mov	r0, r3
 80080f4:	f007 ffac 	bl	8010050 <USB_HC_Halt>
 80080f8:	f000 bc89 	b.w	8008a0e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	78fa      	ldrb	r2, [r7, #3]
 8008102:	4611      	mov	r1, r2
 8008104:	4618      	mov	r0, r3
 8008106:	f007 ff26 	bl	800ff56 <USB_ReadChInterrupts>
 800810a:	4603      	mov	r3, r0
 800810c:	f003 0320 	and.w	r3, r3, #32
 8008110:	2b20      	cmp	r3, #32
 8008112:	f040 8082 	bne.w	800821a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008116:	78fb      	ldrb	r3, [r7, #3]
 8008118:	015a      	lsls	r2, r3, #5
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	4413      	add	r3, r2
 800811e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008122:	461a      	mov	r2, r3
 8008124:	2320      	movs	r3, #32
 8008126:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8008128:	78fa      	ldrb	r2, [r7, #3]
 800812a:	6879      	ldr	r1, [r7, #4]
 800812c:	4613      	mov	r3, r2
 800812e:	011b      	lsls	r3, r3, #4
 8008130:	1a9b      	subs	r3, r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	440b      	add	r3, r1
 8008136:	3319      	adds	r3, #25
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d124      	bne.n	8008188 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800813e:	78fa      	ldrb	r2, [r7, #3]
 8008140:	6879      	ldr	r1, [r7, #4]
 8008142:	4613      	mov	r3, r2
 8008144:	011b      	lsls	r3, r3, #4
 8008146:	1a9b      	subs	r3, r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	440b      	add	r3, r1
 800814c:	3319      	adds	r3, #25
 800814e:	2200      	movs	r2, #0
 8008150:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008152:	78fa      	ldrb	r2, [r7, #3]
 8008154:	6879      	ldr	r1, [r7, #4]
 8008156:	4613      	mov	r3, r2
 8008158:	011b      	lsls	r3, r3, #4
 800815a:	1a9b      	subs	r3, r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	440b      	add	r3, r1
 8008160:	334c      	adds	r3, #76	@ 0x4c
 8008162:	2202      	movs	r2, #2
 8008164:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8008166:	78fa      	ldrb	r2, [r7, #3]
 8008168:	6879      	ldr	r1, [r7, #4]
 800816a:	4613      	mov	r3, r2
 800816c:	011b      	lsls	r3, r3, #4
 800816e:	1a9b      	subs	r3, r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	440b      	add	r3, r1
 8008174:	334d      	adds	r3, #77	@ 0x4d
 8008176:	2203      	movs	r2, #3
 8008178:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	78fa      	ldrb	r2, [r7, #3]
 8008180:	4611      	mov	r1, r2
 8008182:	4618      	mov	r0, r3
 8008184:	f007 ff64 	bl	8010050 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8008188:	78fa      	ldrb	r2, [r7, #3]
 800818a:	6879      	ldr	r1, [r7, #4]
 800818c:	4613      	mov	r3, r2
 800818e:	011b      	lsls	r3, r3, #4
 8008190:	1a9b      	subs	r3, r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	440b      	add	r3, r1
 8008196:	331a      	adds	r3, #26
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	2b01      	cmp	r3, #1
 800819c:	f040 8437 	bne.w	8008a0e <HCD_HC_OUT_IRQHandler+0x978>
 80081a0:	78fa      	ldrb	r2, [r7, #3]
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	4613      	mov	r3, r2
 80081a6:	011b      	lsls	r3, r3, #4
 80081a8:	1a9b      	subs	r3, r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	440b      	add	r3, r1
 80081ae:	331b      	adds	r3, #27
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f040 842b 	bne.w	8008a0e <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80081b8:	78fa      	ldrb	r2, [r7, #3]
 80081ba:	6879      	ldr	r1, [r7, #4]
 80081bc:	4613      	mov	r3, r2
 80081be:	011b      	lsls	r3, r3, #4
 80081c0:	1a9b      	subs	r3, r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	440b      	add	r3, r1
 80081c6:	3326      	adds	r3, #38	@ 0x26
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d009      	beq.n	80081e2 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80081ce:	78fa      	ldrb	r2, [r7, #3]
 80081d0:	6879      	ldr	r1, [r7, #4]
 80081d2:	4613      	mov	r3, r2
 80081d4:	011b      	lsls	r3, r3, #4
 80081d6:	1a9b      	subs	r3, r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	440b      	add	r3, r1
 80081dc:	331b      	adds	r3, #27
 80081de:	2201      	movs	r2, #1
 80081e0:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80081e2:	78fa      	ldrb	r2, [r7, #3]
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	4613      	mov	r3, r2
 80081e8:	011b      	lsls	r3, r3, #4
 80081ea:	1a9b      	subs	r3, r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	440b      	add	r3, r1
 80081f0:	334d      	adds	r3, #77	@ 0x4d
 80081f2:	2203      	movs	r2, #3
 80081f4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	78fa      	ldrb	r2, [r7, #3]
 80081fc:	4611      	mov	r1, r2
 80081fe:	4618      	mov	r0, r3
 8008200:	f007 ff26 	bl	8010050 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8008204:	78fa      	ldrb	r2, [r7, #3]
 8008206:	6879      	ldr	r1, [r7, #4]
 8008208:	4613      	mov	r3, r2
 800820a:	011b      	lsls	r3, r3, #4
 800820c:	1a9b      	subs	r3, r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	440b      	add	r3, r1
 8008212:	3344      	adds	r3, #68	@ 0x44
 8008214:	2200      	movs	r2, #0
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	e3f9      	b.n	8008a0e <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	78fa      	ldrb	r2, [r7, #3]
 8008220:	4611      	mov	r1, r2
 8008222:	4618      	mov	r0, r3
 8008224:	f007 fe97 	bl	800ff56 <USB_ReadChInterrupts>
 8008228:	4603      	mov	r3, r0
 800822a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800822e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008232:	d111      	bne.n	8008258 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8008234:	78fb      	ldrb	r3, [r7, #3]
 8008236:	015a      	lsls	r2, r3, #5
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	4413      	add	r3, r2
 800823c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008240:	461a      	mov	r2, r3
 8008242:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008246:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	78fa      	ldrb	r2, [r7, #3]
 800824e:	4611      	mov	r1, r2
 8008250:	4618      	mov	r0, r3
 8008252:	f007 fefd 	bl	8010050 <USB_HC_Halt>
 8008256:	e3da      	b.n	8008a0e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	78fa      	ldrb	r2, [r7, #3]
 800825e:	4611      	mov	r1, r2
 8008260:	4618      	mov	r0, r3
 8008262:	f007 fe78 	bl	800ff56 <USB_ReadChInterrupts>
 8008266:	4603      	mov	r3, r0
 8008268:	f003 0301 	and.w	r3, r3, #1
 800826c:	2b01      	cmp	r3, #1
 800826e:	d168      	bne.n	8008342 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8008270:	78fa      	ldrb	r2, [r7, #3]
 8008272:	6879      	ldr	r1, [r7, #4]
 8008274:	4613      	mov	r3, r2
 8008276:	011b      	lsls	r3, r3, #4
 8008278:	1a9b      	subs	r3, r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	440b      	add	r3, r1
 800827e:	3344      	adds	r3, #68	@ 0x44
 8008280:	2200      	movs	r2, #0
 8008282:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	78fa      	ldrb	r2, [r7, #3]
 800828a:	4611      	mov	r1, r2
 800828c:	4618      	mov	r0, r3
 800828e:	f007 fe62 	bl	800ff56 <USB_ReadChInterrupts>
 8008292:	4603      	mov	r3, r0
 8008294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008298:	2b40      	cmp	r3, #64	@ 0x40
 800829a:	d112      	bne.n	80082c2 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800829c:	78fa      	ldrb	r2, [r7, #3]
 800829e:	6879      	ldr	r1, [r7, #4]
 80082a0:	4613      	mov	r3, r2
 80082a2:	011b      	lsls	r3, r3, #4
 80082a4:	1a9b      	subs	r3, r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	440b      	add	r3, r1
 80082aa:	3319      	adds	r3, #25
 80082ac:	2201      	movs	r2, #1
 80082ae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80082b0:	78fb      	ldrb	r3, [r7, #3]
 80082b2:	015a      	lsls	r2, r3, #5
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	4413      	add	r3, r2
 80082b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082bc:	461a      	mov	r2, r3
 80082be:	2340      	movs	r3, #64	@ 0x40
 80082c0:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80082c2:	78fa      	ldrb	r2, [r7, #3]
 80082c4:	6879      	ldr	r1, [r7, #4]
 80082c6:	4613      	mov	r3, r2
 80082c8:	011b      	lsls	r3, r3, #4
 80082ca:	1a9b      	subs	r3, r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	440b      	add	r3, r1
 80082d0:	331b      	adds	r3, #27
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d019      	beq.n	800830c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80082d8:	78fa      	ldrb	r2, [r7, #3]
 80082da:	6879      	ldr	r1, [r7, #4]
 80082dc:	4613      	mov	r3, r2
 80082de:	011b      	lsls	r3, r3, #4
 80082e0:	1a9b      	subs	r3, r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	440b      	add	r3, r1
 80082e6:	331b      	adds	r3, #27
 80082e8:	2200      	movs	r2, #0
 80082ea:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80082ec:	78fb      	ldrb	r3, [r7, #3]
 80082ee:	015a      	lsls	r2, r3, #5
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	4413      	add	r3, r2
 80082f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	78fa      	ldrb	r2, [r7, #3]
 80082fc:	0151      	lsls	r1, r2, #5
 80082fe:	693a      	ldr	r2, [r7, #16]
 8008300:	440a      	add	r2, r1
 8008302:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800830a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800830c:	78fb      	ldrb	r3, [r7, #3]
 800830e:	015a      	lsls	r2, r3, #5
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	4413      	add	r3, r2
 8008314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008318:	461a      	mov	r2, r3
 800831a:	2301      	movs	r3, #1
 800831c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800831e:	78fa      	ldrb	r2, [r7, #3]
 8008320:	6879      	ldr	r1, [r7, #4]
 8008322:	4613      	mov	r3, r2
 8008324:	011b      	lsls	r3, r3, #4
 8008326:	1a9b      	subs	r3, r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	440b      	add	r3, r1
 800832c:	334d      	adds	r3, #77	@ 0x4d
 800832e:	2201      	movs	r2, #1
 8008330:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	78fa      	ldrb	r2, [r7, #3]
 8008338:	4611      	mov	r1, r2
 800833a:	4618      	mov	r0, r3
 800833c:	f007 fe88 	bl	8010050 <USB_HC_Halt>
 8008340:	e365      	b.n	8008a0e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	78fa      	ldrb	r2, [r7, #3]
 8008348:	4611      	mov	r1, r2
 800834a:	4618      	mov	r0, r3
 800834c:	f007 fe03 	bl	800ff56 <USB_ReadChInterrupts>
 8008350:	4603      	mov	r3, r0
 8008352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008356:	2b40      	cmp	r3, #64	@ 0x40
 8008358:	d139      	bne.n	80083ce <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800835a:	78fa      	ldrb	r2, [r7, #3]
 800835c:	6879      	ldr	r1, [r7, #4]
 800835e:	4613      	mov	r3, r2
 8008360:	011b      	lsls	r3, r3, #4
 8008362:	1a9b      	subs	r3, r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	440b      	add	r3, r1
 8008368:	334d      	adds	r3, #77	@ 0x4d
 800836a:	2205      	movs	r2, #5
 800836c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800836e:	78fa      	ldrb	r2, [r7, #3]
 8008370:	6879      	ldr	r1, [r7, #4]
 8008372:	4613      	mov	r3, r2
 8008374:	011b      	lsls	r3, r3, #4
 8008376:	1a9b      	subs	r3, r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	440b      	add	r3, r1
 800837c:	331a      	adds	r3, #26
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d109      	bne.n	8008398 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8008384:	78fa      	ldrb	r2, [r7, #3]
 8008386:	6879      	ldr	r1, [r7, #4]
 8008388:	4613      	mov	r3, r2
 800838a:	011b      	lsls	r3, r3, #4
 800838c:	1a9b      	subs	r3, r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	440b      	add	r3, r1
 8008392:	3319      	adds	r3, #25
 8008394:	2201      	movs	r2, #1
 8008396:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8008398:	78fa      	ldrb	r2, [r7, #3]
 800839a:	6879      	ldr	r1, [r7, #4]
 800839c:	4613      	mov	r3, r2
 800839e:	011b      	lsls	r3, r3, #4
 80083a0:	1a9b      	subs	r3, r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	440b      	add	r3, r1
 80083a6:	3344      	adds	r3, #68	@ 0x44
 80083a8:	2200      	movs	r2, #0
 80083aa:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	78fa      	ldrb	r2, [r7, #3]
 80083b2:	4611      	mov	r1, r2
 80083b4:	4618      	mov	r0, r3
 80083b6:	f007 fe4b 	bl	8010050 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80083ba:	78fb      	ldrb	r3, [r7, #3]
 80083bc:	015a      	lsls	r2, r3, #5
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	4413      	add	r3, r2
 80083c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083c6:	461a      	mov	r2, r3
 80083c8:	2340      	movs	r3, #64	@ 0x40
 80083ca:	6093      	str	r3, [r2, #8]
 80083cc:	e31f      	b.n	8008a0e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	78fa      	ldrb	r2, [r7, #3]
 80083d4:	4611      	mov	r1, r2
 80083d6:	4618      	mov	r0, r3
 80083d8:	f007 fdbd 	bl	800ff56 <USB_ReadChInterrupts>
 80083dc:	4603      	mov	r3, r0
 80083de:	f003 0308 	and.w	r3, r3, #8
 80083e2:	2b08      	cmp	r3, #8
 80083e4:	d11a      	bne.n	800841c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80083e6:	78fb      	ldrb	r3, [r7, #3]
 80083e8:	015a      	lsls	r2, r3, #5
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083f2:	461a      	mov	r2, r3
 80083f4:	2308      	movs	r3, #8
 80083f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80083f8:	78fa      	ldrb	r2, [r7, #3]
 80083fa:	6879      	ldr	r1, [r7, #4]
 80083fc:	4613      	mov	r3, r2
 80083fe:	011b      	lsls	r3, r3, #4
 8008400:	1a9b      	subs	r3, r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	440b      	add	r3, r1
 8008406:	334d      	adds	r3, #77	@ 0x4d
 8008408:	2206      	movs	r2, #6
 800840a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	78fa      	ldrb	r2, [r7, #3]
 8008412:	4611      	mov	r1, r2
 8008414:	4618      	mov	r0, r3
 8008416:	f007 fe1b 	bl	8010050 <USB_HC_Halt>
 800841a:	e2f8      	b.n	8008a0e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	78fa      	ldrb	r2, [r7, #3]
 8008422:	4611      	mov	r1, r2
 8008424:	4618      	mov	r0, r3
 8008426:	f007 fd96 	bl	800ff56 <USB_ReadChInterrupts>
 800842a:	4603      	mov	r3, r0
 800842c:	f003 0310 	and.w	r3, r3, #16
 8008430:	2b10      	cmp	r3, #16
 8008432:	d144      	bne.n	80084be <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8008434:	78fa      	ldrb	r2, [r7, #3]
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	4613      	mov	r3, r2
 800843a:	011b      	lsls	r3, r3, #4
 800843c:	1a9b      	subs	r3, r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	440b      	add	r3, r1
 8008442:	3344      	adds	r3, #68	@ 0x44
 8008444:	2200      	movs	r2, #0
 8008446:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8008448:	78fa      	ldrb	r2, [r7, #3]
 800844a:	6879      	ldr	r1, [r7, #4]
 800844c:	4613      	mov	r3, r2
 800844e:	011b      	lsls	r3, r3, #4
 8008450:	1a9b      	subs	r3, r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	440b      	add	r3, r1
 8008456:	334d      	adds	r3, #77	@ 0x4d
 8008458:	2204      	movs	r2, #4
 800845a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800845c:	78fa      	ldrb	r2, [r7, #3]
 800845e:	6879      	ldr	r1, [r7, #4]
 8008460:	4613      	mov	r3, r2
 8008462:	011b      	lsls	r3, r3, #4
 8008464:	1a9b      	subs	r3, r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	440b      	add	r3, r1
 800846a:	3319      	adds	r3, #25
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d114      	bne.n	800849c <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8008472:	78fa      	ldrb	r2, [r7, #3]
 8008474:	6879      	ldr	r1, [r7, #4]
 8008476:	4613      	mov	r3, r2
 8008478:	011b      	lsls	r3, r3, #4
 800847a:	1a9b      	subs	r3, r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	440b      	add	r3, r1
 8008480:	3318      	adds	r3, #24
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d109      	bne.n	800849c <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8008488:	78fa      	ldrb	r2, [r7, #3]
 800848a:	6879      	ldr	r1, [r7, #4]
 800848c:	4613      	mov	r3, r2
 800848e:	011b      	lsls	r3, r3, #4
 8008490:	1a9b      	subs	r3, r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	440b      	add	r3, r1
 8008496:	3319      	adds	r3, #25
 8008498:	2201      	movs	r2, #1
 800849a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	78fa      	ldrb	r2, [r7, #3]
 80084a2:	4611      	mov	r1, r2
 80084a4:	4618      	mov	r0, r3
 80084a6:	f007 fdd3 	bl	8010050 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80084aa:	78fb      	ldrb	r3, [r7, #3]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084b6:	461a      	mov	r2, r3
 80084b8:	2310      	movs	r3, #16
 80084ba:	6093      	str	r3, [r2, #8]
 80084bc:	e2a7      	b.n	8008a0e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	78fa      	ldrb	r2, [r7, #3]
 80084c4:	4611      	mov	r1, r2
 80084c6:	4618      	mov	r0, r3
 80084c8:	f007 fd45 	bl	800ff56 <USB_ReadChInterrupts>
 80084cc:	4603      	mov	r3, r0
 80084ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084d2:	2b80      	cmp	r3, #128	@ 0x80
 80084d4:	f040 8083 	bne.w	80085de <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	799b      	ldrb	r3, [r3, #6]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d111      	bne.n	8008504 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80084e0:	78fa      	ldrb	r2, [r7, #3]
 80084e2:	6879      	ldr	r1, [r7, #4]
 80084e4:	4613      	mov	r3, r2
 80084e6:	011b      	lsls	r3, r3, #4
 80084e8:	1a9b      	subs	r3, r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	440b      	add	r3, r1
 80084ee:	334d      	adds	r3, #77	@ 0x4d
 80084f0:	2207      	movs	r2, #7
 80084f2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	78fa      	ldrb	r2, [r7, #3]
 80084fa:	4611      	mov	r1, r2
 80084fc:	4618      	mov	r0, r3
 80084fe:	f007 fda7 	bl	8010050 <USB_HC_Halt>
 8008502:	e062      	b.n	80085ca <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8008504:	78fa      	ldrb	r2, [r7, #3]
 8008506:	6879      	ldr	r1, [r7, #4]
 8008508:	4613      	mov	r3, r2
 800850a:	011b      	lsls	r3, r3, #4
 800850c:	1a9b      	subs	r3, r3, r2
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	440b      	add	r3, r1
 8008512:	3344      	adds	r3, #68	@ 0x44
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	1c59      	adds	r1, r3, #1
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	4613      	mov	r3, r2
 800851c:	011b      	lsls	r3, r3, #4
 800851e:	1a9b      	subs	r3, r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	4403      	add	r3, r0
 8008524:	3344      	adds	r3, #68	@ 0x44
 8008526:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008528:	78fa      	ldrb	r2, [r7, #3]
 800852a:	6879      	ldr	r1, [r7, #4]
 800852c:	4613      	mov	r3, r2
 800852e:	011b      	lsls	r3, r3, #4
 8008530:	1a9b      	subs	r3, r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	440b      	add	r3, r1
 8008536:	3344      	adds	r3, #68	@ 0x44
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b02      	cmp	r3, #2
 800853c:	d922      	bls.n	8008584 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800853e:	78fa      	ldrb	r2, [r7, #3]
 8008540:	6879      	ldr	r1, [r7, #4]
 8008542:	4613      	mov	r3, r2
 8008544:	011b      	lsls	r3, r3, #4
 8008546:	1a9b      	subs	r3, r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	440b      	add	r3, r1
 800854c:	3344      	adds	r3, #68	@ 0x44
 800854e:	2200      	movs	r2, #0
 8008550:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008552:	78fa      	ldrb	r2, [r7, #3]
 8008554:	6879      	ldr	r1, [r7, #4]
 8008556:	4613      	mov	r3, r2
 8008558:	011b      	lsls	r3, r3, #4
 800855a:	1a9b      	subs	r3, r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	440b      	add	r3, r1
 8008560:	334c      	adds	r3, #76	@ 0x4c
 8008562:	2204      	movs	r2, #4
 8008564:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008566:	78fa      	ldrb	r2, [r7, #3]
 8008568:	6879      	ldr	r1, [r7, #4]
 800856a:	4613      	mov	r3, r2
 800856c:	011b      	lsls	r3, r3, #4
 800856e:	1a9b      	subs	r3, r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	440b      	add	r3, r1
 8008574:	334c      	adds	r3, #76	@ 0x4c
 8008576:	781a      	ldrb	r2, [r3, #0]
 8008578:	78fb      	ldrb	r3, [r7, #3]
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f00d fa9b 	bl	8015ab8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008582:	e022      	b.n	80085ca <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008584:	78fa      	ldrb	r2, [r7, #3]
 8008586:	6879      	ldr	r1, [r7, #4]
 8008588:	4613      	mov	r3, r2
 800858a:	011b      	lsls	r3, r3, #4
 800858c:	1a9b      	subs	r3, r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	440b      	add	r3, r1
 8008592:	334c      	adds	r3, #76	@ 0x4c
 8008594:	2202      	movs	r2, #2
 8008596:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008598:	78fb      	ldrb	r3, [r7, #3]
 800859a:	015a      	lsls	r2, r3, #5
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	4413      	add	r3, r2
 80085a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80085ae:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80085b6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80085b8:	78fb      	ldrb	r3, [r7, #3]
 80085ba:	015a      	lsls	r2, r3, #5
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	4413      	add	r3, r2
 80085c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085c4:	461a      	mov	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80085ca:	78fb      	ldrb	r3, [r7, #3]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085d6:	461a      	mov	r2, r3
 80085d8:	2380      	movs	r3, #128	@ 0x80
 80085da:	6093      	str	r3, [r2, #8]
 80085dc:	e217      	b.n	8008a0e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	78fa      	ldrb	r2, [r7, #3]
 80085e4:	4611      	mov	r1, r2
 80085e6:	4618      	mov	r0, r3
 80085e8:	f007 fcb5 	bl	800ff56 <USB_ReadChInterrupts>
 80085ec:	4603      	mov	r3, r0
 80085ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085f6:	d11b      	bne.n	8008630 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80085f8:	78fa      	ldrb	r2, [r7, #3]
 80085fa:	6879      	ldr	r1, [r7, #4]
 80085fc:	4613      	mov	r3, r2
 80085fe:	011b      	lsls	r3, r3, #4
 8008600:	1a9b      	subs	r3, r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	440b      	add	r3, r1
 8008606:	334d      	adds	r3, #77	@ 0x4d
 8008608:	2209      	movs	r2, #9
 800860a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	78fa      	ldrb	r2, [r7, #3]
 8008612:	4611      	mov	r1, r2
 8008614:	4618      	mov	r0, r3
 8008616:	f007 fd1b 	bl	8010050 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800861a:	78fb      	ldrb	r3, [r7, #3]
 800861c:	015a      	lsls	r2, r3, #5
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	4413      	add	r3, r2
 8008622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008626:	461a      	mov	r2, r3
 8008628:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800862c:	6093      	str	r3, [r2, #8]
 800862e:	e1ee      	b.n	8008a0e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	78fa      	ldrb	r2, [r7, #3]
 8008636:	4611      	mov	r1, r2
 8008638:	4618      	mov	r0, r3
 800863a:	f007 fc8c 	bl	800ff56 <USB_ReadChInterrupts>
 800863e:	4603      	mov	r3, r0
 8008640:	f003 0302 	and.w	r3, r3, #2
 8008644:	2b02      	cmp	r3, #2
 8008646:	f040 81df 	bne.w	8008a08 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	4413      	add	r3, r2
 8008652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008656:	461a      	mov	r2, r3
 8008658:	2302      	movs	r3, #2
 800865a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800865c:	78fa      	ldrb	r2, [r7, #3]
 800865e:	6879      	ldr	r1, [r7, #4]
 8008660:	4613      	mov	r3, r2
 8008662:	011b      	lsls	r3, r3, #4
 8008664:	1a9b      	subs	r3, r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	440b      	add	r3, r1
 800866a:	334d      	adds	r3, #77	@ 0x4d
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	2b01      	cmp	r3, #1
 8008670:	f040 8093 	bne.w	800879a <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008674:	78fa      	ldrb	r2, [r7, #3]
 8008676:	6879      	ldr	r1, [r7, #4]
 8008678:	4613      	mov	r3, r2
 800867a:	011b      	lsls	r3, r3, #4
 800867c:	1a9b      	subs	r3, r3, r2
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	440b      	add	r3, r1
 8008682:	334d      	adds	r3, #77	@ 0x4d
 8008684:	2202      	movs	r2, #2
 8008686:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008688:	78fa      	ldrb	r2, [r7, #3]
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	4613      	mov	r3, r2
 800868e:	011b      	lsls	r3, r3, #4
 8008690:	1a9b      	subs	r3, r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	440b      	add	r3, r1
 8008696:	334c      	adds	r3, #76	@ 0x4c
 8008698:	2201      	movs	r2, #1
 800869a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800869c:	78fa      	ldrb	r2, [r7, #3]
 800869e:	6879      	ldr	r1, [r7, #4]
 80086a0:	4613      	mov	r3, r2
 80086a2:	011b      	lsls	r3, r3, #4
 80086a4:	1a9b      	subs	r3, r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	440b      	add	r3, r1
 80086aa:	3326      	adds	r3, #38	@ 0x26
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d00b      	beq.n	80086ca <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80086b2:	78fa      	ldrb	r2, [r7, #3]
 80086b4:	6879      	ldr	r1, [r7, #4]
 80086b6:	4613      	mov	r3, r2
 80086b8:	011b      	lsls	r3, r3, #4
 80086ba:	1a9b      	subs	r3, r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	440b      	add	r3, r1
 80086c0:	3326      	adds	r3, #38	@ 0x26
 80086c2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80086c4:	2b03      	cmp	r3, #3
 80086c6:	f040 8190 	bne.w	80089ea <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	799b      	ldrb	r3, [r3, #6]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d115      	bne.n	80086fe <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80086d2:	78fa      	ldrb	r2, [r7, #3]
 80086d4:	6879      	ldr	r1, [r7, #4]
 80086d6:	4613      	mov	r3, r2
 80086d8:	011b      	lsls	r3, r3, #4
 80086da:	1a9b      	subs	r3, r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	440b      	add	r3, r1
 80086e0:	333d      	adds	r3, #61	@ 0x3d
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	78fa      	ldrb	r2, [r7, #3]
 80086e6:	f083 0301 	eor.w	r3, r3, #1
 80086ea:	b2d8      	uxtb	r0, r3
 80086ec:	6879      	ldr	r1, [r7, #4]
 80086ee:	4613      	mov	r3, r2
 80086f0:	011b      	lsls	r3, r3, #4
 80086f2:	1a9b      	subs	r3, r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	440b      	add	r3, r1
 80086f8:	333d      	adds	r3, #61	@ 0x3d
 80086fa:	4602      	mov	r2, r0
 80086fc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	799b      	ldrb	r3, [r3, #6]
 8008702:	2b01      	cmp	r3, #1
 8008704:	f040 8171 	bne.w	80089ea <HCD_HC_OUT_IRQHandler+0x954>
 8008708:	78fa      	ldrb	r2, [r7, #3]
 800870a:	6879      	ldr	r1, [r7, #4]
 800870c:	4613      	mov	r3, r2
 800870e:	011b      	lsls	r3, r3, #4
 8008710:	1a9b      	subs	r3, r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	440b      	add	r3, r1
 8008716:	3334      	adds	r3, #52	@ 0x34
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	f000 8165 	beq.w	80089ea <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8008720:	78fa      	ldrb	r2, [r7, #3]
 8008722:	6879      	ldr	r1, [r7, #4]
 8008724:	4613      	mov	r3, r2
 8008726:	011b      	lsls	r3, r3, #4
 8008728:	1a9b      	subs	r3, r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	440b      	add	r3, r1
 800872e:	3334      	adds	r3, #52	@ 0x34
 8008730:	6819      	ldr	r1, [r3, #0]
 8008732:	78fa      	ldrb	r2, [r7, #3]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	4613      	mov	r3, r2
 8008738:	011b      	lsls	r3, r3, #4
 800873a:	1a9b      	subs	r3, r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4403      	add	r3, r0
 8008740:	3328      	adds	r3, #40	@ 0x28
 8008742:	881b      	ldrh	r3, [r3, #0]
 8008744:	440b      	add	r3, r1
 8008746:	1e59      	subs	r1, r3, #1
 8008748:	78fa      	ldrb	r2, [r7, #3]
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	4613      	mov	r3, r2
 800874e:	011b      	lsls	r3, r3, #4
 8008750:	1a9b      	subs	r3, r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4403      	add	r3, r0
 8008756:	3328      	adds	r3, #40	@ 0x28
 8008758:	881b      	ldrh	r3, [r3, #0]
 800875a:	fbb1 f3f3 	udiv	r3, r1, r3
 800875e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b00      	cmp	r3, #0
 8008768:	f000 813f 	beq.w	80089ea <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800876c:	78fa      	ldrb	r2, [r7, #3]
 800876e:	6879      	ldr	r1, [r7, #4]
 8008770:	4613      	mov	r3, r2
 8008772:	011b      	lsls	r3, r3, #4
 8008774:	1a9b      	subs	r3, r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	440b      	add	r3, r1
 800877a:	333d      	adds	r3, #61	@ 0x3d
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	78fa      	ldrb	r2, [r7, #3]
 8008780:	f083 0301 	eor.w	r3, r3, #1
 8008784:	b2d8      	uxtb	r0, r3
 8008786:	6879      	ldr	r1, [r7, #4]
 8008788:	4613      	mov	r3, r2
 800878a:	011b      	lsls	r3, r3, #4
 800878c:	1a9b      	subs	r3, r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	440b      	add	r3, r1
 8008792:	333d      	adds	r3, #61	@ 0x3d
 8008794:	4602      	mov	r2, r0
 8008796:	701a      	strb	r2, [r3, #0]
 8008798:	e127      	b.n	80089ea <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800879a:	78fa      	ldrb	r2, [r7, #3]
 800879c:	6879      	ldr	r1, [r7, #4]
 800879e:	4613      	mov	r3, r2
 80087a0:	011b      	lsls	r3, r3, #4
 80087a2:	1a9b      	subs	r3, r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	440b      	add	r3, r1
 80087a8:	334d      	adds	r3, #77	@ 0x4d
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	2b03      	cmp	r3, #3
 80087ae:	d120      	bne.n	80087f2 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80087b0:	78fa      	ldrb	r2, [r7, #3]
 80087b2:	6879      	ldr	r1, [r7, #4]
 80087b4:	4613      	mov	r3, r2
 80087b6:	011b      	lsls	r3, r3, #4
 80087b8:	1a9b      	subs	r3, r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	440b      	add	r3, r1
 80087be:	334d      	adds	r3, #77	@ 0x4d
 80087c0:	2202      	movs	r2, #2
 80087c2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80087c4:	78fa      	ldrb	r2, [r7, #3]
 80087c6:	6879      	ldr	r1, [r7, #4]
 80087c8:	4613      	mov	r3, r2
 80087ca:	011b      	lsls	r3, r3, #4
 80087cc:	1a9b      	subs	r3, r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	440b      	add	r3, r1
 80087d2:	331b      	adds	r3, #27
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	f040 8107 	bne.w	80089ea <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80087dc:	78fa      	ldrb	r2, [r7, #3]
 80087de:	6879      	ldr	r1, [r7, #4]
 80087e0:	4613      	mov	r3, r2
 80087e2:	011b      	lsls	r3, r3, #4
 80087e4:	1a9b      	subs	r3, r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	440b      	add	r3, r1
 80087ea:	334c      	adds	r3, #76	@ 0x4c
 80087ec:	2202      	movs	r2, #2
 80087ee:	701a      	strb	r2, [r3, #0]
 80087f0:	e0fb      	b.n	80089ea <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80087f2:	78fa      	ldrb	r2, [r7, #3]
 80087f4:	6879      	ldr	r1, [r7, #4]
 80087f6:	4613      	mov	r3, r2
 80087f8:	011b      	lsls	r3, r3, #4
 80087fa:	1a9b      	subs	r3, r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	440b      	add	r3, r1
 8008800:	334d      	adds	r3, #77	@ 0x4d
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	2b04      	cmp	r3, #4
 8008806:	d13a      	bne.n	800887e <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008808:	78fa      	ldrb	r2, [r7, #3]
 800880a:	6879      	ldr	r1, [r7, #4]
 800880c:	4613      	mov	r3, r2
 800880e:	011b      	lsls	r3, r3, #4
 8008810:	1a9b      	subs	r3, r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	440b      	add	r3, r1
 8008816:	334d      	adds	r3, #77	@ 0x4d
 8008818:	2202      	movs	r2, #2
 800881a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800881c:	78fa      	ldrb	r2, [r7, #3]
 800881e:	6879      	ldr	r1, [r7, #4]
 8008820:	4613      	mov	r3, r2
 8008822:	011b      	lsls	r3, r3, #4
 8008824:	1a9b      	subs	r3, r3, r2
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	440b      	add	r3, r1
 800882a:	334c      	adds	r3, #76	@ 0x4c
 800882c:	2202      	movs	r2, #2
 800882e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008830:	78fa      	ldrb	r2, [r7, #3]
 8008832:	6879      	ldr	r1, [r7, #4]
 8008834:	4613      	mov	r3, r2
 8008836:	011b      	lsls	r3, r3, #4
 8008838:	1a9b      	subs	r3, r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	440b      	add	r3, r1
 800883e:	331b      	adds	r3, #27
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	2b01      	cmp	r3, #1
 8008844:	f040 80d1 	bne.w	80089ea <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8008848:	78fa      	ldrb	r2, [r7, #3]
 800884a:	6879      	ldr	r1, [r7, #4]
 800884c:	4613      	mov	r3, r2
 800884e:	011b      	lsls	r3, r3, #4
 8008850:	1a9b      	subs	r3, r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	440b      	add	r3, r1
 8008856:	331b      	adds	r3, #27
 8008858:	2200      	movs	r2, #0
 800885a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800885c:	78fb      	ldrb	r3, [r7, #3]
 800885e:	015a      	lsls	r2, r3, #5
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	4413      	add	r3, r2
 8008864:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	78fa      	ldrb	r2, [r7, #3]
 800886c:	0151      	lsls	r1, r2, #5
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	440a      	add	r2, r1
 8008872:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008876:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800887a:	6053      	str	r3, [r2, #4]
 800887c:	e0b5      	b.n	80089ea <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800887e:	78fa      	ldrb	r2, [r7, #3]
 8008880:	6879      	ldr	r1, [r7, #4]
 8008882:	4613      	mov	r3, r2
 8008884:	011b      	lsls	r3, r3, #4
 8008886:	1a9b      	subs	r3, r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	440b      	add	r3, r1
 800888c:	334d      	adds	r3, #77	@ 0x4d
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	2b05      	cmp	r3, #5
 8008892:	d114      	bne.n	80088be <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008894:	78fa      	ldrb	r2, [r7, #3]
 8008896:	6879      	ldr	r1, [r7, #4]
 8008898:	4613      	mov	r3, r2
 800889a:	011b      	lsls	r3, r3, #4
 800889c:	1a9b      	subs	r3, r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	440b      	add	r3, r1
 80088a2:	334d      	adds	r3, #77	@ 0x4d
 80088a4:	2202      	movs	r2, #2
 80088a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80088a8:	78fa      	ldrb	r2, [r7, #3]
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	4613      	mov	r3, r2
 80088ae:	011b      	lsls	r3, r3, #4
 80088b0:	1a9b      	subs	r3, r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	440b      	add	r3, r1
 80088b6:	334c      	adds	r3, #76	@ 0x4c
 80088b8:	2202      	movs	r2, #2
 80088ba:	701a      	strb	r2, [r3, #0]
 80088bc:	e095      	b.n	80089ea <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80088be:	78fa      	ldrb	r2, [r7, #3]
 80088c0:	6879      	ldr	r1, [r7, #4]
 80088c2:	4613      	mov	r3, r2
 80088c4:	011b      	lsls	r3, r3, #4
 80088c6:	1a9b      	subs	r3, r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	440b      	add	r3, r1
 80088cc:	334d      	adds	r3, #77	@ 0x4d
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	2b06      	cmp	r3, #6
 80088d2:	d114      	bne.n	80088fe <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80088d4:	78fa      	ldrb	r2, [r7, #3]
 80088d6:	6879      	ldr	r1, [r7, #4]
 80088d8:	4613      	mov	r3, r2
 80088da:	011b      	lsls	r3, r3, #4
 80088dc:	1a9b      	subs	r3, r3, r2
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	440b      	add	r3, r1
 80088e2:	334d      	adds	r3, #77	@ 0x4d
 80088e4:	2202      	movs	r2, #2
 80088e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80088e8:	78fa      	ldrb	r2, [r7, #3]
 80088ea:	6879      	ldr	r1, [r7, #4]
 80088ec:	4613      	mov	r3, r2
 80088ee:	011b      	lsls	r3, r3, #4
 80088f0:	1a9b      	subs	r3, r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	440b      	add	r3, r1
 80088f6:	334c      	adds	r3, #76	@ 0x4c
 80088f8:	2205      	movs	r2, #5
 80088fa:	701a      	strb	r2, [r3, #0]
 80088fc:	e075      	b.n	80089ea <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80088fe:	78fa      	ldrb	r2, [r7, #3]
 8008900:	6879      	ldr	r1, [r7, #4]
 8008902:	4613      	mov	r3, r2
 8008904:	011b      	lsls	r3, r3, #4
 8008906:	1a9b      	subs	r3, r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	440b      	add	r3, r1
 800890c:	334d      	adds	r3, #77	@ 0x4d
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	2b07      	cmp	r3, #7
 8008912:	d00a      	beq.n	800892a <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8008914:	78fa      	ldrb	r2, [r7, #3]
 8008916:	6879      	ldr	r1, [r7, #4]
 8008918:	4613      	mov	r3, r2
 800891a:	011b      	lsls	r3, r3, #4
 800891c:	1a9b      	subs	r3, r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	440b      	add	r3, r1
 8008922:	334d      	adds	r3, #77	@ 0x4d
 8008924:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008926:	2b09      	cmp	r3, #9
 8008928:	d170      	bne.n	8008a0c <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800892a:	78fa      	ldrb	r2, [r7, #3]
 800892c:	6879      	ldr	r1, [r7, #4]
 800892e:	4613      	mov	r3, r2
 8008930:	011b      	lsls	r3, r3, #4
 8008932:	1a9b      	subs	r3, r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	440b      	add	r3, r1
 8008938:	334d      	adds	r3, #77	@ 0x4d
 800893a:	2202      	movs	r2, #2
 800893c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800893e:	78fa      	ldrb	r2, [r7, #3]
 8008940:	6879      	ldr	r1, [r7, #4]
 8008942:	4613      	mov	r3, r2
 8008944:	011b      	lsls	r3, r3, #4
 8008946:	1a9b      	subs	r3, r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	440b      	add	r3, r1
 800894c:	3344      	adds	r3, #68	@ 0x44
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	1c59      	adds	r1, r3, #1
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	4613      	mov	r3, r2
 8008956:	011b      	lsls	r3, r3, #4
 8008958:	1a9b      	subs	r3, r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4403      	add	r3, r0
 800895e:	3344      	adds	r3, #68	@ 0x44
 8008960:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008962:	78fa      	ldrb	r2, [r7, #3]
 8008964:	6879      	ldr	r1, [r7, #4]
 8008966:	4613      	mov	r3, r2
 8008968:	011b      	lsls	r3, r3, #4
 800896a:	1a9b      	subs	r3, r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	440b      	add	r3, r1
 8008970:	3344      	adds	r3, #68	@ 0x44
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2b02      	cmp	r3, #2
 8008976:	d914      	bls.n	80089a2 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008978:	78fa      	ldrb	r2, [r7, #3]
 800897a:	6879      	ldr	r1, [r7, #4]
 800897c:	4613      	mov	r3, r2
 800897e:	011b      	lsls	r3, r3, #4
 8008980:	1a9b      	subs	r3, r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	440b      	add	r3, r1
 8008986:	3344      	adds	r3, #68	@ 0x44
 8008988:	2200      	movs	r2, #0
 800898a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800898c:	78fa      	ldrb	r2, [r7, #3]
 800898e:	6879      	ldr	r1, [r7, #4]
 8008990:	4613      	mov	r3, r2
 8008992:	011b      	lsls	r3, r3, #4
 8008994:	1a9b      	subs	r3, r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	440b      	add	r3, r1
 800899a:	334c      	adds	r3, #76	@ 0x4c
 800899c:	2204      	movs	r2, #4
 800899e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80089a0:	e022      	b.n	80089e8 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80089a2:	78fa      	ldrb	r2, [r7, #3]
 80089a4:	6879      	ldr	r1, [r7, #4]
 80089a6:	4613      	mov	r3, r2
 80089a8:	011b      	lsls	r3, r3, #4
 80089aa:	1a9b      	subs	r3, r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	440b      	add	r3, r1
 80089b0:	334c      	adds	r3, #76	@ 0x4c
 80089b2:	2202      	movs	r2, #2
 80089b4:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80089b6:	78fb      	ldrb	r3, [r7, #3]
 80089b8:	015a      	lsls	r2, r3, #5
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	4413      	add	r3, r2
 80089be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80089cc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80089d4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80089d6:	78fb      	ldrb	r3, [r7, #3]
 80089d8:	015a      	lsls	r2, r3, #5
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	4413      	add	r3, r2
 80089de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089e2:	461a      	mov	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80089e8:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80089ea:	78fa      	ldrb	r2, [r7, #3]
 80089ec:	6879      	ldr	r1, [r7, #4]
 80089ee:	4613      	mov	r3, r2
 80089f0:	011b      	lsls	r3, r3, #4
 80089f2:	1a9b      	subs	r3, r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	440b      	add	r3, r1
 80089f8:	334c      	adds	r3, #76	@ 0x4c
 80089fa:	781a      	ldrb	r2, [r3, #0]
 80089fc:	78fb      	ldrb	r3, [r7, #3]
 80089fe:	4619      	mov	r1, r3
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f00d f859 	bl	8015ab8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008a06:	e002      	b.n	8008a0e <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8008a08:	bf00      	nop
 8008a0a:	e000      	b.n	8008a0e <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8008a0c:	bf00      	nop
  }
}
 8008a0e:	3718      	adds	r7, #24
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b08a      	sub	sp, #40	@ 0x28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a24:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	6a1b      	ldr	r3, [r3, #32]
 8008a2c:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	f003 030f 	and.w	r3, r3, #15
 8008a34:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	0c5b      	lsrs	r3, r3, #17
 8008a3a:	f003 030f 	and.w	r3, r3, #15
 8008a3e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	091b      	lsrs	r3, r3, #4
 8008a44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a48:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d004      	beq.n	8008a5a <HCD_RXQLVL_IRQHandler+0x46>
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	2b05      	cmp	r3, #5
 8008a54:	f000 80b6 	beq.w	8008bc4 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8008a58:	e0b7      	b.n	8008bca <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 80b3 	beq.w	8008bc8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8008a62:	6879      	ldr	r1, [r7, #4]
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	4613      	mov	r3, r2
 8008a68:	011b      	lsls	r3, r3, #4
 8008a6a:	1a9b      	subs	r3, r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	440b      	add	r3, r1
 8008a70:	332c      	adds	r3, #44	@ 0x2c
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f000 80a7 	beq.w	8008bc8 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8008a7a:	6879      	ldr	r1, [r7, #4]
 8008a7c:	69ba      	ldr	r2, [r7, #24]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	011b      	lsls	r3, r3, #4
 8008a82:	1a9b      	subs	r3, r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	440b      	add	r3, r1
 8008a88:	3338      	adds	r3, #56	@ 0x38
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	18d1      	adds	r1, r2, r3
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	69ba      	ldr	r2, [r7, #24]
 8008a94:	4613      	mov	r3, r2
 8008a96:	011b      	lsls	r3, r3, #4
 8008a98:	1a9b      	subs	r3, r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	4403      	add	r3, r0
 8008a9e:	3334      	adds	r3, #52	@ 0x34
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4299      	cmp	r1, r3
 8008aa4:	f200 8083 	bhi.w	8008bae <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6818      	ldr	r0, [r3, #0]
 8008aac:	6879      	ldr	r1, [r7, #4]
 8008aae:	69ba      	ldr	r2, [r7, #24]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	011b      	lsls	r3, r3, #4
 8008ab4:	1a9b      	subs	r3, r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	440b      	add	r3, r1
 8008aba:	332c      	adds	r3, #44	@ 0x2c
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	b292      	uxth	r2, r2
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	f007 f9dc 	bl	800fe80 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8008ac8:	6879      	ldr	r1, [r7, #4]
 8008aca:	69ba      	ldr	r2, [r7, #24]
 8008acc:	4613      	mov	r3, r2
 8008ace:	011b      	lsls	r3, r3, #4
 8008ad0:	1a9b      	subs	r3, r3, r2
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	440b      	add	r3, r1
 8008ad6:	332c      	adds	r3, #44	@ 0x2c
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	18d1      	adds	r1, r2, r3
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	69ba      	ldr	r2, [r7, #24]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	011b      	lsls	r3, r3, #4
 8008ae6:	1a9b      	subs	r3, r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4403      	add	r3, r0
 8008aec:	332c      	adds	r3, #44	@ 0x2c
 8008aee:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8008af0:	6879      	ldr	r1, [r7, #4]
 8008af2:	69ba      	ldr	r2, [r7, #24]
 8008af4:	4613      	mov	r3, r2
 8008af6:	011b      	lsls	r3, r3, #4
 8008af8:	1a9b      	subs	r3, r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	440b      	add	r3, r1
 8008afe:	3338      	adds	r3, #56	@ 0x38
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	18d1      	adds	r1, r2, r3
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	69ba      	ldr	r2, [r7, #24]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	011b      	lsls	r3, r3, #4
 8008b0e:	1a9b      	subs	r3, r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4403      	add	r3, r0
 8008b14:	3338      	adds	r3, #56	@ 0x38
 8008b16:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	0cdb      	lsrs	r3, r3, #19
 8008b28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b2c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8008b2e:	6879      	ldr	r1, [r7, #4]
 8008b30:	69ba      	ldr	r2, [r7, #24]
 8008b32:	4613      	mov	r3, r2
 8008b34:	011b      	lsls	r3, r3, #4
 8008b36:	1a9b      	subs	r3, r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	440b      	add	r3, r1
 8008b3c:	3328      	adds	r3, #40	@ 0x28
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	461a      	mov	r2, r3
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d13f      	bne.n	8008bc8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d03c      	beq.n	8008bc8 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	015a      	lsls	r2, r3, #5
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	4413      	add	r3, r2
 8008b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008b64:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008b6c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8008b80:	6879      	ldr	r1, [r7, #4]
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	4613      	mov	r3, r2
 8008b86:	011b      	lsls	r3, r3, #4
 8008b88:	1a9b      	subs	r3, r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	440b      	add	r3, r1
 8008b8e:	333c      	adds	r3, #60	@ 0x3c
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	f083 0301 	eor.w	r3, r3, #1
 8008b96:	b2d8      	uxtb	r0, r3
 8008b98:	6879      	ldr	r1, [r7, #4]
 8008b9a:	69ba      	ldr	r2, [r7, #24]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	011b      	lsls	r3, r3, #4
 8008ba0:	1a9b      	subs	r3, r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	440b      	add	r3, r1
 8008ba6:	333c      	adds	r3, #60	@ 0x3c
 8008ba8:	4602      	mov	r2, r0
 8008baa:	701a      	strb	r2, [r3, #0]
      break;
 8008bac:	e00c      	b.n	8008bc8 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8008bae:	6879      	ldr	r1, [r7, #4]
 8008bb0:	69ba      	ldr	r2, [r7, #24]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	011b      	lsls	r3, r3, #4
 8008bb6:	1a9b      	subs	r3, r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	440b      	add	r3, r1
 8008bbc:	334c      	adds	r3, #76	@ 0x4c
 8008bbe:	2204      	movs	r2, #4
 8008bc0:	701a      	strb	r2, [r3, #0]
      break;
 8008bc2:	e001      	b.n	8008bc8 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8008bc4:	bf00      	nop
 8008bc6:	e000      	b.n	8008bca <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8008bc8:	bf00      	nop
  }
}
 8008bca:	bf00      	nop
 8008bcc:	3728      	adds	r7, #40	@ 0x28
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b086      	sub	sp, #24
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008bfe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f003 0302 	and.w	r3, r3, #2
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d10b      	bne.n	8008c22 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f003 0301 	and.w	r3, r3, #1
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d102      	bne.n	8008c1a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f00c ff33 	bl	8015a80 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	f043 0302 	orr.w	r3, r3, #2
 8008c20:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f003 0308 	and.w	r3, r3, #8
 8008c28:	2b08      	cmp	r3, #8
 8008c2a:	d132      	bne.n	8008c92 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	f043 0308 	orr.w	r3, r3, #8
 8008c32:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f003 0304 	and.w	r3, r3, #4
 8008c3a:	2b04      	cmp	r3, #4
 8008c3c:	d126      	bne.n	8008c8c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	7a5b      	ldrb	r3, [r3, #9]
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d113      	bne.n	8008c6e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8008c4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c50:	d106      	bne.n	8008c60 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2102      	movs	r1, #2
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f007 f9ab 	bl	800ffb4 <USB_InitFSLSPClkSel>
 8008c5e:	e011      	b.n	8008c84 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2101      	movs	r1, #1
 8008c66:	4618      	mov	r0, r3
 8008c68:	f007 f9a4 	bl	800ffb4 <USB_InitFSLSPClkSel>
 8008c6c:	e00a      	b.n	8008c84 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	79db      	ldrb	r3, [r3, #7]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d106      	bne.n	8008c84 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8008c82:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f00c ff29 	bl	8015adc <HAL_HCD_PortEnabled_Callback>
 8008c8a:	e002      	b.n	8008c92 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f00c ff33 	bl	8015af8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f003 0320 	and.w	r3, r3, #32
 8008c98:	2b20      	cmp	r3, #32
 8008c9a:	d103      	bne.n	8008ca4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	f043 0320 	orr.w	r3, r3, #32
 8008ca2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008caa:	461a      	mov	r2, r3
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	6013      	str	r3, [r2, #0]
}
 8008cb0:	bf00      	nop
 8008cb2:	3718      	adds	r7, #24
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d101      	bne.n	8008cca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e08b      	b.n	8008de2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d106      	bne.n	8008ce4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7fa fec6 	bl	8003a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2224      	movs	r2, #36	@ 0x24
 8008ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f022 0201 	bic.w	r2, r2, #1
 8008cfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685a      	ldr	r2, [r3, #4]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008d08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	689a      	ldr	r2, [r3, #8]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008d18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d107      	bne.n	8008d32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	689a      	ldr	r2, [r3, #8]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d2e:	609a      	str	r2, [r3, #8]
 8008d30:	e006      	b.n	8008d40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	689a      	ldr	r2, [r3, #8]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008d3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	d108      	bne.n	8008d5a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d56:	605a      	str	r2, [r3, #4]
 8008d58:	e007      	b.n	8008d6a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008d68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	6859      	ldr	r1, [r3, #4]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	4b1d      	ldr	r3, [pc, #116]	@ (8008dec <HAL_I2C_Init+0x134>)
 8008d76:	430b      	orrs	r3, r1
 8008d78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68da      	ldr	r2, [r3, #12]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008d88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	691a      	ldr	r2, [r3, #16]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	430a      	orrs	r2, r1
 8008da2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	69d9      	ldr	r1, [r3, #28]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a1a      	ldr	r2, [r3, #32]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	430a      	orrs	r2, r1
 8008db2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f042 0201 	orr.w	r2, r2, #1
 8008dc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2220      	movs	r2, #32
 8008dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	02008000 	.word	0x02008000

08008df0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b20      	cmp	r3, #32
 8008e04:	d138      	bne.n	8008e78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d101      	bne.n	8008e14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008e10:	2302      	movs	r3, #2
 8008e12:	e032      	b.n	8008e7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2224      	movs	r2, #36	@ 0x24
 8008e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f022 0201 	bic.w	r2, r2, #1
 8008e32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	6819      	ldr	r1, [r3, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	430a      	orrs	r2, r1
 8008e52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f042 0201 	orr.w	r2, r2, #1
 8008e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2220      	movs	r2, #32
 8008e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	e000      	b.n	8008e7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008e78:	2302      	movs	r3, #2
  }
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr

08008e86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008e86:	b480      	push	{r7}
 8008e88:	b085      	sub	sp, #20
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	2b20      	cmp	r3, #32
 8008e9a:	d139      	bne.n	8008f10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d101      	bne.n	8008eaa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008ea6:	2302      	movs	r3, #2
 8008ea8:	e033      	b.n	8008f12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2224      	movs	r2, #36	@ 0x24
 8008eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f022 0201 	bic.w	r2, r2, #1
 8008ec8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008ed8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	021b      	lsls	r3, r3, #8
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f042 0201 	orr.w	r2, r2, #1
 8008efa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2220      	movs	r2, #32
 8008f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	e000      	b.n	8008f12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008f10:	2302      	movs	r3, #2
  }
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3714      	adds	r7, #20
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e08f      	b.n	8009050 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d106      	bne.n	8008f4a <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7fa fe3b 	bl	8003bc0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2202      	movs	r2, #2
 8008f4e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	699a      	ldr	r2, [r3, #24]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008f60:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	6999      	ldr	r1, [r3, #24]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008f76:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	430a      	orrs	r2, r1
 8008f84:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	041b      	lsls	r3, r3, #16
 8008f8c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6999      	ldr	r1, [r3, #24]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	430a      	orrs	r2, r1
 8008f9a:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	69db      	ldr	r3, [r3, #28]
 8008fa0:	041b      	lsls	r3, r3, #16
 8008fa2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a19      	ldr	r1, [r3, #32]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	430a      	orrs	r2, r1
 8008fb0:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb6:	041b      	lsls	r3, r3, #16
 8008fb8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fcc:	041b      	lsls	r3, r3, #16
 8008fce:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	430a      	orrs	r2, r1
 8008fdc:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008fe4:	021b      	lsls	r3, r3, #8
 8008fe6:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008fee:	041b      	lsls	r3, r3, #16
 8008ff0:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009000:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	4313      	orrs	r3, r2
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8009014:	431a      	orrs	r2, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	430a      	orrs	r2, r1
 800901c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f042 0206 	orr.w	r2, r2, #6
 800902c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	699a      	ldr	r2, [r3, #24]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f042 0201 	orr.w	r2, r2, #1
 800903c:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009066:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800906e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f003 0304 	and.w	r3, r3, #4
 8009076:	2b00      	cmp	r3, #0
 8009078:	d023      	beq.n	80090c2 <HAL_LTDC_IRQHandler+0x6a>
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	f003 0304 	and.w	r3, r3, #4
 8009080:	2b00      	cmp	r3, #0
 8009082:	d01e      	beq.n	80090c2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f022 0204 	bic.w	r2, r2, #4
 8009092:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2204      	movs	r2, #4
 800909a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80090a2:	f043 0201 	orr.w	r2, r3, #1
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2204      	movs	r2, #4
 80090b0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f86f 	bl	80091a0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f003 0302 	and.w	r3, r3, #2
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d023      	beq.n	8009114 <HAL_LTDC_IRQHandler+0xbc>
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	f003 0302 	and.w	r3, r3, #2
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d01e      	beq.n	8009114 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f022 0202 	bic.w	r2, r2, #2
 80090e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2202      	movs	r2, #2
 80090ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80090f4:	f043 0202 	orr.w	r2, r3, #2
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2204      	movs	r2, #4
 8009102:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f846 	bl	80091a0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f003 0301 	and.w	r3, r3, #1
 800911a:	2b00      	cmp	r3, #0
 800911c:	d01b      	beq.n	8009156 <HAL_LTDC_IRQHandler+0xfe>
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	f003 0301 	and.w	r3, r3, #1
 8009124:	2b00      	cmp	r3, #0
 8009126:	d016      	beq.n	8009156 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f022 0201 	bic.w	r2, r2, #1
 8009136:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2201      	movs	r2, #1
 800913e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f82f 	bl	80091b4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f003 0308 	and.w	r3, r3, #8
 800915c:	2b00      	cmp	r3, #0
 800915e:	d01b      	beq.n	8009198 <HAL_LTDC_IRQHandler+0x140>
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	f003 0308 	and.w	r3, r3, #8
 8009166:	2b00      	cmp	r3, #0
 8009168:	d016      	beq.n	8009198 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f022 0208 	bic.w	r2, r2, #8
 8009178:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2208      	movs	r2, #8
 8009180:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2201      	movs	r2, #1
 8009186:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f818 	bl	80091c8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009198:	bf00      	nop
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80091dc:	b5b0      	push	{r4, r5, r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d101      	bne.n	80091f6 <HAL_LTDC_ConfigLayer+0x1a>
 80091f2:	2302      	movs	r3, #2
 80091f4:	e02c      	b.n	8009250 <HAL_LTDC_ConfigLayer+0x74>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2202      	movs	r2, #2
 8009202:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2134      	movs	r1, #52	@ 0x34
 800920c:	fb01 f303 	mul.w	r3, r1, r3
 8009210:	4413      	add	r3, r2
 8009212:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	4614      	mov	r4, r2
 800921a:	461d      	mov	r5, r3
 800921c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800921e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009228:	682b      	ldr	r3, [r5, #0]
 800922a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	68b9      	ldr	r1, [r7, #8]
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f000 f811 	bl	8009258 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2201      	movs	r2, #1
 800923c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2201      	movs	r2, #1
 8009242:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bdb0      	pop	{r4, r5, r7, pc}

08009258 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009258:	b480      	push	{r7}
 800925a:	b089      	sub	sp, #36	@ 0x24
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	685a      	ldr	r2, [r3, #4]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	0c1b      	lsrs	r3, r3, #16
 8009270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009274:	4413      	add	r3, r2
 8009276:	041b      	lsls	r3, r3, #16
 8009278:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	461a      	mov	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	01db      	lsls	r3, r3, #7
 8009284:	4413      	add	r3, r2
 8009286:	3384      	adds	r3, #132	@ 0x84
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	6812      	ldr	r2, [r2, #0]
 800928e:	4611      	mov	r1, r2
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	01d2      	lsls	r2, r2, #7
 8009294:	440a      	add	r2, r1
 8009296:	3284      	adds	r2, #132	@ 0x84
 8009298:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800929c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	0c1b      	lsrs	r3, r3, #16
 80092aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80092ae:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80092b0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4619      	mov	r1, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	01db      	lsls	r3, r3, #7
 80092bc:	440b      	add	r3, r1
 80092be:	3384      	adds	r3, #132	@ 0x84
 80092c0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80092c6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	68da      	ldr	r2, [r3, #12]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80092d6:	4413      	add	r3, r2
 80092d8:	041b      	lsls	r3, r3, #16
 80092da:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	461a      	mov	r2, r3
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	01db      	lsls	r3, r3, #7
 80092e6:	4413      	add	r3, r2
 80092e8:	3384      	adds	r3, #132	@ 0x84
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	6812      	ldr	r2, [r2, #0]
 80092f0:	4611      	mov	r1, r2
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	01d2      	lsls	r2, r2, #7
 80092f6:	440a      	add	r2, r1
 80092f8:	3284      	adds	r2, #132	@ 0x84
 80092fa:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80092fe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	689a      	ldr	r2, [r3, #8]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800930e:	4413      	add	r3, r2
 8009310:	1c5a      	adds	r2, r3, #1
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4619      	mov	r1, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	01db      	lsls	r3, r3, #7
 800931c:	440b      	add	r3, r1
 800931e:	3384      	adds	r3, #132	@ 0x84
 8009320:	4619      	mov	r1, r3
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	4313      	orrs	r3, r2
 8009326:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	461a      	mov	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	01db      	lsls	r3, r3, #7
 8009332:	4413      	add	r3, r2
 8009334:	3384      	adds	r3, #132	@ 0x84
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	6812      	ldr	r2, [r2, #0]
 800933c:	4611      	mov	r1, r2
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	01d2      	lsls	r2, r2, #7
 8009342:	440a      	add	r2, r1
 8009344:	3284      	adds	r2, #132	@ 0x84
 8009346:	f023 0307 	bic.w	r3, r3, #7
 800934a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	461a      	mov	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	01db      	lsls	r3, r3, #7
 8009356:	4413      	add	r3, r2
 8009358:	3384      	adds	r3, #132	@ 0x84
 800935a:	461a      	mov	r2, r3
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009368:	021b      	lsls	r3, r3, #8
 800936a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009372:	041b      	lsls	r3, r3, #16
 8009374:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	061b      	lsls	r3, r3, #24
 800937c:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009384:	461a      	mov	r2, r3
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	431a      	orrs	r2, r3
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	431a      	orrs	r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4619      	mov	r1, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	01db      	lsls	r3, r3, #7
 8009398:	440b      	add	r3, r1
 800939a:	3384      	adds	r3, #132	@ 0x84
 800939c:	4619      	mov	r1, r3
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	4313      	orrs	r3, r2
 80093a2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	461a      	mov	r2, r3
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	01db      	lsls	r3, r3, #7
 80093ae:	4413      	add	r3, r2
 80093b0:	3384      	adds	r3, #132	@ 0x84
 80093b2:	695b      	ldr	r3, [r3, #20]
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	6812      	ldr	r2, [r2, #0]
 80093b8:	4611      	mov	r1, r2
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	01d2      	lsls	r2, r2, #7
 80093be:	440a      	add	r2, r1
 80093c0:	3284      	adds	r2, #132	@ 0x84
 80093c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80093c6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	461a      	mov	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	01db      	lsls	r3, r3, #7
 80093d2:	4413      	add	r3, r2
 80093d4:	3384      	adds	r3, #132	@ 0x84
 80093d6:	461a      	mov	r2, r3
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	695b      	ldr	r3, [r3, #20]
 80093dc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	461a      	mov	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	01db      	lsls	r3, r3, #7
 80093e8:	4413      	add	r3, r2
 80093ea:	3384      	adds	r3, #132	@ 0x84
 80093ec:	69da      	ldr	r2, [r3, #28]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4619      	mov	r1, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	01db      	lsls	r3, r3, #7
 80093f8:	440b      	add	r3, r1
 80093fa:	3384      	adds	r3, #132	@ 0x84
 80093fc:	4619      	mov	r1, r3
 80093fe:	4b4f      	ldr	r3, [pc, #316]	@ (800953c <LTDC_SetConfig+0x2e4>)
 8009400:	4013      	ands	r3, r2
 8009402:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	69da      	ldr	r2, [r3, #28]
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	6a1b      	ldr	r3, [r3, #32]
 800940c:	68f9      	ldr	r1, [r7, #12]
 800940e:	6809      	ldr	r1, [r1, #0]
 8009410:	4608      	mov	r0, r1
 8009412:	6879      	ldr	r1, [r7, #4]
 8009414:	01c9      	lsls	r1, r1, #7
 8009416:	4401      	add	r1, r0
 8009418:	3184      	adds	r1, #132	@ 0x84
 800941a:	4313      	orrs	r3, r2
 800941c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	461a      	mov	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	01db      	lsls	r3, r3, #7
 8009428:	4413      	add	r3, r2
 800942a:	3384      	adds	r3, #132	@ 0x84
 800942c:	461a      	mov	r2, r3
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009432:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d102      	bne.n	8009442 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 800943c:	2304      	movs	r3, #4
 800943e:	61fb      	str	r3, [r7, #28]
 8009440:	e01b      	b.n	800947a <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	2b01      	cmp	r3, #1
 8009448:	d102      	bne.n	8009450 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 800944a:	2303      	movs	r3, #3
 800944c:	61fb      	str	r3, [r7, #28]
 800944e:	e014      	b.n	800947a <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	2b04      	cmp	r3, #4
 8009456:	d00b      	beq.n	8009470 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800945c:	2b02      	cmp	r3, #2
 800945e:	d007      	beq.n	8009470 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009464:	2b03      	cmp	r3, #3
 8009466:	d003      	beq.n	8009470 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800946c:	2b07      	cmp	r3, #7
 800946e:	d102      	bne.n	8009476 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 8009470:	2302      	movs	r3, #2
 8009472:	61fb      	str	r3, [r7, #28]
 8009474:	e001      	b.n	800947a <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 8009476:	2301      	movs	r3, #1
 8009478:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	461a      	mov	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	01db      	lsls	r3, r3, #7
 8009484:	4413      	add	r3, r2
 8009486:	3384      	adds	r3, #132	@ 0x84
 8009488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	6812      	ldr	r2, [r2, #0]
 800948e:	4611      	mov	r1, r2
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	01d2      	lsls	r2, r2, #7
 8009494:	440a      	add	r2, r1
 8009496:	3284      	adds	r2, #132	@ 0x84
 8009498:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800949c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a2:	69fa      	ldr	r2, [r7, #28]
 80094a4:	fb02 f303 	mul.w	r3, r2, r3
 80094a8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	6859      	ldr	r1, [r3, #4]
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	1acb      	subs	r3, r1, r3
 80094b4:	69f9      	ldr	r1, [r7, #28]
 80094b6:	fb01 f303 	mul.w	r3, r1, r3
 80094ba:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80094bc:	68f9      	ldr	r1, [r7, #12]
 80094be:	6809      	ldr	r1, [r1, #0]
 80094c0:	4608      	mov	r0, r1
 80094c2:	6879      	ldr	r1, [r7, #4]
 80094c4:	01c9      	lsls	r1, r1, #7
 80094c6:	4401      	add	r1, r0
 80094c8:	3184      	adds	r1, #132	@ 0x84
 80094ca:	4313      	orrs	r3, r2
 80094cc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	461a      	mov	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	01db      	lsls	r3, r3, #7
 80094d8:	4413      	add	r3, r2
 80094da:	3384      	adds	r3, #132	@ 0x84
 80094dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4619      	mov	r1, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	01db      	lsls	r3, r3, #7
 80094e8:	440b      	add	r3, r1
 80094ea:	3384      	adds	r3, #132	@ 0x84
 80094ec:	4619      	mov	r1, r3
 80094ee:	4b14      	ldr	r3, [pc, #80]	@ (8009540 <LTDC_SetConfig+0x2e8>)
 80094f0:	4013      	ands	r3, r2
 80094f2:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	461a      	mov	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	01db      	lsls	r3, r3, #7
 80094fe:	4413      	add	r3, r2
 8009500:	3384      	adds	r3, #132	@ 0x84
 8009502:	461a      	mov	r2, r3
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009508:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	461a      	mov	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	01db      	lsls	r3, r3, #7
 8009514:	4413      	add	r3, r2
 8009516:	3384      	adds	r3, #132	@ 0x84
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	6812      	ldr	r2, [r2, #0]
 800951e:	4611      	mov	r1, r2
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	01d2      	lsls	r2, r2, #7
 8009524:	440a      	add	r2, r1
 8009526:	3284      	adds	r2, #132	@ 0x84
 8009528:	f043 0301 	orr.w	r3, r3, #1
 800952c:	6013      	str	r3, [r2, #0]
}
 800952e:	bf00      	nop
 8009530:	3724      	adds	r7, #36	@ 0x24
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	fffff8f8 	.word	0xfffff8f8
 8009540:	fffff800 	.word	0xfffff800

08009544 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009544:	b480      	push	{r7}
 8009546:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009548:	4b05      	ldr	r3, [pc, #20]	@ (8009560 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a04      	ldr	r2, [pc, #16]	@ (8009560 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800954e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009552:	6013      	str	r3, [r2, #0]
}
 8009554:	bf00      	nop
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	40007000 	.word	0x40007000

08009564 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800956a:	2300      	movs	r3, #0
 800956c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800956e:	4b23      	ldr	r3, [pc, #140]	@ (80095fc <HAL_PWREx_EnableOverDrive+0x98>)
 8009570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009572:	4a22      	ldr	r2, [pc, #136]	@ (80095fc <HAL_PWREx_EnableOverDrive+0x98>)
 8009574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009578:	6413      	str	r3, [r2, #64]	@ 0x40
 800957a:	4b20      	ldr	r3, [pc, #128]	@ (80095fc <HAL_PWREx_EnableOverDrive+0x98>)
 800957c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800957e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009582:	603b      	str	r3, [r7, #0]
 8009584:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009586:	4b1e      	ldr	r3, [pc, #120]	@ (8009600 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a1d      	ldr	r2, [pc, #116]	@ (8009600 <HAL_PWREx_EnableOverDrive+0x9c>)
 800958c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009590:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009592:	f7fb fdbf 	bl	8005114 <HAL_GetTick>
 8009596:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009598:	e009      	b.n	80095ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800959a:	f7fb fdbb 	bl	8005114 <HAL_GetTick>
 800959e:	4602      	mov	r2, r0
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80095a8:	d901      	bls.n	80095ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80095aa:	2303      	movs	r3, #3
 80095ac:	e022      	b.n	80095f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80095ae:	4b14      	ldr	r3, [pc, #80]	@ (8009600 <HAL_PWREx_EnableOverDrive+0x9c>)
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80095b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095ba:	d1ee      	bne.n	800959a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80095bc:	4b10      	ldr	r3, [pc, #64]	@ (8009600 <HAL_PWREx_EnableOverDrive+0x9c>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a0f      	ldr	r2, [pc, #60]	@ (8009600 <HAL_PWREx_EnableOverDrive+0x9c>)
 80095c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80095c8:	f7fb fda4 	bl	8005114 <HAL_GetTick>
 80095cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80095ce:	e009      	b.n	80095e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80095d0:	f7fb fda0 	bl	8005114 <HAL_GetTick>
 80095d4:	4602      	mov	r2, r0
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80095de:	d901      	bls.n	80095e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80095e0:	2303      	movs	r3, #3
 80095e2:	e007      	b.n	80095f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80095e4:	4b06      	ldr	r3, [pc, #24]	@ (8009600 <HAL_PWREx_EnableOverDrive+0x9c>)
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095f0:	d1ee      	bne.n	80095d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	40023800 	.word	0x40023800
 8009600:	40007000 	.word	0x40007000

08009604 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af02      	add	r7, sp, #8
 800960a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800960c:	f7fb fd82 	bl	8005114 <HAL_GetTick>
 8009610:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d101      	bne.n	800961c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	e067      	b.n	80096ec <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10b      	bne.n	8009640 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7fa fb8d 	bl	8003d50 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009636:	f241 3188 	movw	r1, #5000	@ 0x1388
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 f85e 	bl	80096fc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	3b01      	subs	r3, #1
 8009650:	021a      	lsls	r2, r3, #8
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	430a      	orrs	r2, r1
 8009658:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800965e:	9300      	str	r3, [sp, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2200      	movs	r2, #0
 8009664:	2120      	movs	r1, #32
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f856 	bl	8009718 <QSPI_WaitFlagStateUntilTimeout>
 800966c:	4603      	mov	r3, r0
 800966e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8009670:	7afb      	ldrb	r3, [r7, #11]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d135      	bne.n	80096e2 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	4b1d      	ldr	r3, [pc, #116]	@ (80096f4 <HAL_QSPI_Init+0xf0>)
 800967e:	4013      	ands	r3, r2
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	6852      	ldr	r2, [r2, #4]
 8009684:	0611      	lsls	r1, r2, #24
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	68d2      	ldr	r2, [r2, #12]
 800968a:	4311      	orrs	r1, r2
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	69d2      	ldr	r2, [r2, #28]
 8009690:	4311      	orrs	r1, r2
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	6a12      	ldr	r2, [r2, #32]
 8009696:	4311      	orrs	r1, r2
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	6812      	ldr	r2, [r2, #0]
 800969c:	430b      	orrs	r3, r1
 800969e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	685a      	ldr	r2, [r3, #4]
 80096a6:	4b14      	ldr	r3, [pc, #80]	@ (80096f8 <HAL_QSPI_Init+0xf4>)
 80096a8:	4013      	ands	r3, r2
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	6912      	ldr	r2, [r2, #16]
 80096ae:	0411      	lsls	r1, r2, #16
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	6952      	ldr	r2, [r2, #20]
 80096b4:	4311      	orrs	r1, r2
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	6992      	ldr	r2, [r2, #24]
 80096ba:	4311      	orrs	r1, r2
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	6812      	ldr	r2, [r2, #0]
 80096c0:	430b      	orrs	r3, r1
 80096c2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f042 0201 	orr.w	r2, r2, #1
 80096d2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2201      	movs	r2, #1
 80096de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 80096ea:	7afb      	ldrb	r3, [r7, #11]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	00ffff2f 	.word	0x00ffff2f
 80096f8:	ffe0f8fe 	.word	0xffe0f8fe

080096fc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	683a      	ldr	r2, [r7, #0]
 800970a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800970c:	bf00      	nop
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	603b      	str	r3, [r7, #0]
 8009724:	4613      	mov	r3, r2
 8009726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009728:	e01a      	b.n	8009760 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009730:	d016      	beq.n	8009760 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009732:	f7fb fcef 	bl	8005114 <HAL_GetTick>
 8009736:	4602      	mov	r2, r0
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	69ba      	ldr	r2, [r7, #24]
 800973e:	429a      	cmp	r2, r3
 8009740:	d302      	bcc.n	8009748 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d10b      	bne.n	8009760 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2204      	movs	r2, #4
 800974c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009754:	f043 0201 	orr.w	r2, r3, #1
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e00e      	b.n	800977e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	689a      	ldr	r2, [r3, #8]
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	4013      	ands	r3, r2
 800976a:	2b00      	cmp	r3, #0
 800976c:	bf14      	ite	ne
 800976e:	2301      	movne	r3, #1
 8009770:	2300      	moveq	r3, #0
 8009772:	b2db      	uxtb	r3, r3
 8009774:	461a      	mov	r2, r3
 8009776:	79fb      	ldrb	r3, [r7, #7]
 8009778:	429a      	cmp	r2, r3
 800977a:	d1d6      	bne.n	800972a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
	...

08009788 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b086      	sub	sp, #24
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009790:	2300      	movs	r3, #0
 8009792:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e291      	b.n	8009cc2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 0301 	and.w	r3, r3, #1
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f000 8087 	beq.w	80098ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80097ac:	4b96      	ldr	r3, [pc, #600]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	f003 030c 	and.w	r3, r3, #12
 80097b4:	2b04      	cmp	r3, #4
 80097b6:	d00c      	beq.n	80097d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80097b8:	4b93      	ldr	r3, [pc, #588]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	f003 030c 	and.w	r3, r3, #12
 80097c0:	2b08      	cmp	r3, #8
 80097c2:	d112      	bne.n	80097ea <HAL_RCC_OscConfig+0x62>
 80097c4:	4b90      	ldr	r3, [pc, #576]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80097d0:	d10b      	bne.n	80097ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097d2:	4b8d      	ldr	r3, [pc, #564]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d06c      	beq.n	80098b8 <HAL_RCC_OscConfig+0x130>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d168      	bne.n	80098b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e26b      	b.n	8009cc2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097f2:	d106      	bne.n	8009802 <HAL_RCC_OscConfig+0x7a>
 80097f4:	4b84      	ldr	r3, [pc, #528]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a83      	ldr	r2, [pc, #524]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 80097fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097fe:	6013      	str	r3, [r2, #0]
 8009800:	e02e      	b.n	8009860 <HAL_RCC_OscConfig+0xd8>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10c      	bne.n	8009824 <HAL_RCC_OscConfig+0x9c>
 800980a:	4b7f      	ldr	r3, [pc, #508]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a7e      	ldr	r2, [pc, #504]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 8009810:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009814:	6013      	str	r3, [r2, #0]
 8009816:	4b7c      	ldr	r3, [pc, #496]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a7b      	ldr	r2, [pc, #492]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 800981c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009820:	6013      	str	r3, [r2, #0]
 8009822:	e01d      	b.n	8009860 <HAL_RCC_OscConfig+0xd8>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800982c:	d10c      	bne.n	8009848 <HAL_RCC_OscConfig+0xc0>
 800982e:	4b76      	ldr	r3, [pc, #472]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a75      	ldr	r2, [pc, #468]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 8009834:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009838:	6013      	str	r3, [r2, #0]
 800983a:	4b73      	ldr	r3, [pc, #460]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a72      	ldr	r2, [pc, #456]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 8009840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009844:	6013      	str	r3, [r2, #0]
 8009846:	e00b      	b.n	8009860 <HAL_RCC_OscConfig+0xd8>
 8009848:	4b6f      	ldr	r3, [pc, #444]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a6e      	ldr	r2, [pc, #440]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 800984e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009852:	6013      	str	r3, [r2, #0]
 8009854:	4b6c      	ldr	r3, [pc, #432]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a6b      	ldr	r2, [pc, #428]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 800985a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800985e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d013      	beq.n	8009890 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009868:	f7fb fc54 	bl	8005114 <HAL_GetTick>
 800986c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800986e:	e008      	b.n	8009882 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009870:	f7fb fc50 	bl	8005114 <HAL_GetTick>
 8009874:	4602      	mov	r2, r0
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	2b64      	cmp	r3, #100	@ 0x64
 800987c:	d901      	bls.n	8009882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800987e:	2303      	movs	r3, #3
 8009880:	e21f      	b.n	8009cc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009882:	4b61      	ldr	r3, [pc, #388]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800988a:	2b00      	cmp	r3, #0
 800988c:	d0f0      	beq.n	8009870 <HAL_RCC_OscConfig+0xe8>
 800988e:	e014      	b.n	80098ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009890:	f7fb fc40 	bl	8005114 <HAL_GetTick>
 8009894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009896:	e008      	b.n	80098aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009898:	f7fb fc3c 	bl	8005114 <HAL_GetTick>
 800989c:	4602      	mov	r2, r0
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	1ad3      	subs	r3, r2, r3
 80098a2:	2b64      	cmp	r3, #100	@ 0x64
 80098a4:	d901      	bls.n	80098aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80098a6:	2303      	movs	r3, #3
 80098a8:	e20b      	b.n	8009cc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80098aa:	4b57      	ldr	r3, [pc, #348]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1f0      	bne.n	8009898 <HAL_RCC_OscConfig+0x110>
 80098b6:	e000      	b.n	80098ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 0302 	and.w	r3, r3, #2
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d069      	beq.n	800999a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80098c6:	4b50      	ldr	r3, [pc, #320]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	f003 030c 	and.w	r3, r3, #12
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00b      	beq.n	80098ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80098d2:	4b4d      	ldr	r3, [pc, #308]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	f003 030c 	and.w	r3, r3, #12
 80098da:	2b08      	cmp	r3, #8
 80098dc:	d11c      	bne.n	8009918 <HAL_RCC_OscConfig+0x190>
 80098de:	4b4a      	ldr	r3, [pc, #296]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d116      	bne.n	8009918 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098ea:	4b47      	ldr	r3, [pc, #284]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 0302 	and.w	r3, r3, #2
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d005      	beq.n	8009902 <HAL_RCC_OscConfig+0x17a>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d001      	beq.n	8009902 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	e1df      	b.n	8009cc2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009902:	4b41      	ldr	r3, [pc, #260]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	00db      	lsls	r3, r3, #3
 8009910:	493d      	ldr	r1, [pc, #244]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 8009912:	4313      	orrs	r3, r2
 8009914:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009916:	e040      	b.n	800999a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d023      	beq.n	8009968 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009920:	4b39      	ldr	r3, [pc, #228]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a38      	ldr	r2, [pc, #224]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 8009926:	f043 0301 	orr.w	r3, r3, #1
 800992a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800992c:	f7fb fbf2 	bl	8005114 <HAL_GetTick>
 8009930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009932:	e008      	b.n	8009946 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009934:	f7fb fbee 	bl	8005114 <HAL_GetTick>
 8009938:	4602      	mov	r2, r0
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	1ad3      	subs	r3, r2, r3
 800993e:	2b02      	cmp	r3, #2
 8009940:	d901      	bls.n	8009946 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009942:	2303      	movs	r3, #3
 8009944:	e1bd      	b.n	8009cc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009946:	4b30      	ldr	r3, [pc, #192]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 0302 	and.w	r3, r3, #2
 800994e:	2b00      	cmp	r3, #0
 8009950:	d0f0      	beq.n	8009934 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009952:	4b2d      	ldr	r3, [pc, #180]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	00db      	lsls	r3, r3, #3
 8009960:	4929      	ldr	r1, [pc, #164]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 8009962:	4313      	orrs	r3, r2
 8009964:	600b      	str	r3, [r1, #0]
 8009966:	e018      	b.n	800999a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009968:	4b27      	ldr	r3, [pc, #156]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a26      	ldr	r2, [pc, #152]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 800996e:	f023 0301 	bic.w	r3, r3, #1
 8009972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009974:	f7fb fbce 	bl	8005114 <HAL_GetTick>
 8009978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800997a:	e008      	b.n	800998e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800997c:	f7fb fbca 	bl	8005114 <HAL_GetTick>
 8009980:	4602      	mov	r2, r0
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	1ad3      	subs	r3, r2, r3
 8009986:	2b02      	cmp	r3, #2
 8009988:	d901      	bls.n	800998e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800998a:	2303      	movs	r3, #3
 800998c:	e199      	b.n	8009cc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800998e:	4b1e      	ldr	r3, [pc, #120]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f003 0302 	and.w	r3, r3, #2
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1f0      	bne.n	800997c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f003 0308 	and.w	r3, r3, #8
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d038      	beq.n	8009a18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	695b      	ldr	r3, [r3, #20]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d019      	beq.n	80099e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80099ae:	4b16      	ldr	r3, [pc, #88]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 80099b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099b2:	4a15      	ldr	r2, [pc, #84]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 80099b4:	f043 0301 	orr.w	r3, r3, #1
 80099b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099ba:	f7fb fbab 	bl	8005114 <HAL_GetTick>
 80099be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80099c0:	e008      	b.n	80099d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80099c2:	f7fb fba7 	bl	8005114 <HAL_GetTick>
 80099c6:	4602      	mov	r2, r0
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d901      	bls.n	80099d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e176      	b.n	8009cc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80099d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 80099d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099d8:	f003 0302 	and.w	r3, r3, #2
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d0f0      	beq.n	80099c2 <HAL_RCC_OscConfig+0x23a>
 80099e0:	e01a      	b.n	8009a18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80099e2:	4b09      	ldr	r3, [pc, #36]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 80099e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099e6:	4a08      	ldr	r2, [pc, #32]	@ (8009a08 <HAL_RCC_OscConfig+0x280>)
 80099e8:	f023 0301 	bic.w	r3, r3, #1
 80099ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099ee:	f7fb fb91 	bl	8005114 <HAL_GetTick>
 80099f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099f4:	e00a      	b.n	8009a0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80099f6:	f7fb fb8d 	bl	8005114 <HAL_GetTick>
 80099fa:	4602      	mov	r2, r0
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	1ad3      	subs	r3, r2, r3
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d903      	bls.n	8009a0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e15c      	b.n	8009cc2 <HAL_RCC_OscConfig+0x53a>
 8009a08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a0c:	4b91      	ldr	r3, [pc, #580]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a10:	f003 0302 	and.w	r3, r3, #2
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1ee      	bne.n	80099f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 0304 	and.w	r3, r3, #4
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	f000 80a4 	beq.w	8009b6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a26:	4b8b      	ldr	r3, [pc, #556]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10d      	bne.n	8009a4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a32:	4b88      	ldr	r3, [pc, #544]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a36:	4a87      	ldr	r2, [pc, #540]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8009a3e:	4b85      	ldr	r3, [pc, #532]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a46:	60bb      	str	r3, [r7, #8]
 8009a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009a4e:	4b82      	ldr	r3, [pc, #520]	@ (8009c58 <HAL_RCC_OscConfig+0x4d0>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d118      	bne.n	8009a8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8009a5a:	4b7f      	ldr	r3, [pc, #508]	@ (8009c58 <HAL_RCC_OscConfig+0x4d0>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a7e      	ldr	r2, [pc, #504]	@ (8009c58 <HAL_RCC_OscConfig+0x4d0>)
 8009a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a66:	f7fb fb55 	bl	8005114 <HAL_GetTick>
 8009a6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009a6c:	e008      	b.n	8009a80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a6e:	f7fb fb51 	bl	8005114 <HAL_GetTick>
 8009a72:	4602      	mov	r2, r0
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	2b64      	cmp	r3, #100	@ 0x64
 8009a7a:	d901      	bls.n	8009a80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	e120      	b.n	8009cc2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009a80:	4b75      	ldr	r3, [pc, #468]	@ (8009c58 <HAL_RCC_OscConfig+0x4d0>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d0f0      	beq.n	8009a6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d106      	bne.n	8009aa2 <HAL_RCC_OscConfig+0x31a>
 8009a94:	4b6f      	ldr	r3, [pc, #444]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a98:	4a6e      	ldr	r2, [pc, #440]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009a9a:	f043 0301 	orr.w	r3, r3, #1
 8009a9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009aa0:	e02d      	b.n	8009afe <HAL_RCC_OscConfig+0x376>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10c      	bne.n	8009ac4 <HAL_RCC_OscConfig+0x33c>
 8009aaa:	4b6a      	ldr	r3, [pc, #424]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009aae:	4a69      	ldr	r2, [pc, #420]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009ab0:	f023 0301 	bic.w	r3, r3, #1
 8009ab4:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ab6:	4b67      	ldr	r3, [pc, #412]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009aba:	4a66      	ldr	r2, [pc, #408]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009abc:	f023 0304 	bic.w	r3, r3, #4
 8009ac0:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ac2:	e01c      	b.n	8009afe <HAL_RCC_OscConfig+0x376>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	2b05      	cmp	r3, #5
 8009aca:	d10c      	bne.n	8009ae6 <HAL_RCC_OscConfig+0x35e>
 8009acc:	4b61      	ldr	r3, [pc, #388]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ad0:	4a60      	ldr	r2, [pc, #384]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009ad2:	f043 0304 	orr.w	r3, r3, #4
 8009ad6:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ad8:	4b5e      	ldr	r3, [pc, #376]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009adc:	4a5d      	ldr	r2, [pc, #372]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009ade:	f043 0301 	orr.w	r3, r3, #1
 8009ae2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ae4:	e00b      	b.n	8009afe <HAL_RCC_OscConfig+0x376>
 8009ae6:	4b5b      	ldr	r3, [pc, #364]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009aea:	4a5a      	ldr	r2, [pc, #360]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009aec:	f023 0301 	bic.w	r3, r3, #1
 8009af0:	6713      	str	r3, [r2, #112]	@ 0x70
 8009af2:	4b58      	ldr	r3, [pc, #352]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009af6:	4a57      	ldr	r2, [pc, #348]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009af8:	f023 0304 	bic.w	r3, r3, #4
 8009afc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d015      	beq.n	8009b32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b06:	f7fb fb05 	bl	8005114 <HAL_GetTick>
 8009b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b0c:	e00a      	b.n	8009b24 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b0e:	f7fb fb01 	bl	8005114 <HAL_GetTick>
 8009b12:	4602      	mov	r2, r0
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d901      	bls.n	8009b24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009b20:	2303      	movs	r3, #3
 8009b22:	e0ce      	b.n	8009cc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b24:	4b4b      	ldr	r3, [pc, #300]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b28:	f003 0302 	and.w	r3, r3, #2
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d0ee      	beq.n	8009b0e <HAL_RCC_OscConfig+0x386>
 8009b30:	e014      	b.n	8009b5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b32:	f7fb faef 	bl	8005114 <HAL_GetTick>
 8009b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b38:	e00a      	b.n	8009b50 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b3a:	f7fb faeb 	bl	8005114 <HAL_GetTick>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d901      	bls.n	8009b50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	e0b8      	b.n	8009cc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b50:	4b40      	ldr	r3, [pc, #256]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b54:	f003 0302 	and.w	r3, r3, #2
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1ee      	bne.n	8009b3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009b5c:	7dfb      	ldrb	r3, [r7, #23]
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d105      	bne.n	8009b6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b62:	4b3c      	ldr	r3, [pc, #240]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b66:	4a3b      	ldr	r2, [pc, #236]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009b68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b6c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	699b      	ldr	r3, [r3, #24]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f000 80a4 	beq.w	8009cc0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009b78:	4b36      	ldr	r3, [pc, #216]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	f003 030c 	and.w	r3, r3, #12
 8009b80:	2b08      	cmp	r3, #8
 8009b82:	d06b      	beq.n	8009c5c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	699b      	ldr	r3, [r3, #24]
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	d149      	bne.n	8009c20 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b8c:	4b31      	ldr	r3, [pc, #196]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a30      	ldr	r2, [pc, #192]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009b92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b98:	f7fb fabc 	bl	8005114 <HAL_GetTick>
 8009b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b9e:	e008      	b.n	8009bb2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ba0:	f7fb fab8 	bl	8005114 <HAL_GetTick>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	2b02      	cmp	r3, #2
 8009bac:	d901      	bls.n	8009bb2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e087      	b.n	8009cc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bb2:	4b28      	ldr	r3, [pc, #160]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1f0      	bne.n	8009ba0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	69da      	ldr	r2, [r3, #28]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	431a      	orrs	r2, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bcc:	019b      	lsls	r3, r3, #6
 8009bce:	431a      	orrs	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd4:	085b      	lsrs	r3, r3, #1
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	041b      	lsls	r3, r3, #16
 8009bda:	431a      	orrs	r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be0:	061b      	lsls	r3, r3, #24
 8009be2:	4313      	orrs	r3, r2
 8009be4:	4a1b      	ldr	r2, [pc, #108]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009be6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009bea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009bec:	4b19      	ldr	r3, [pc, #100]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a18      	ldr	r2, [pc, #96]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009bf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bf8:	f7fb fa8c 	bl	8005114 <HAL_GetTick>
 8009bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bfe:	e008      	b.n	8009c12 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c00:	f7fb fa88 	bl	8005114 <HAL_GetTick>
 8009c04:	4602      	mov	r2, r0
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d901      	bls.n	8009c12 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009c0e:	2303      	movs	r3, #3
 8009c10:	e057      	b.n	8009cc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c12:	4b10      	ldr	r3, [pc, #64]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d0f0      	beq.n	8009c00 <HAL_RCC_OscConfig+0x478>
 8009c1e:	e04f      	b.n	8009cc0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c20:	4b0c      	ldr	r3, [pc, #48]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a0b      	ldr	r2, [pc, #44]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009c26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c2c:	f7fb fa72 	bl	8005114 <HAL_GetTick>
 8009c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c32:	e008      	b.n	8009c46 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c34:	f7fb fa6e 	bl	8005114 <HAL_GetTick>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d901      	bls.n	8009c46 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e03d      	b.n	8009cc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c46:	4b03      	ldr	r3, [pc, #12]	@ (8009c54 <HAL_RCC_OscConfig+0x4cc>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1f0      	bne.n	8009c34 <HAL_RCC_OscConfig+0x4ac>
 8009c52:	e035      	b.n	8009cc0 <HAL_RCC_OscConfig+0x538>
 8009c54:	40023800 	.word	0x40023800
 8009c58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8009ccc <HAL_RCC_OscConfig+0x544>)
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	699b      	ldr	r3, [r3, #24]
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d028      	beq.n	8009cbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d121      	bne.n	8009cbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d11a      	bne.n	8009cbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009c92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d111      	bne.n	8009cbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ca2:	085b      	lsrs	r3, r3, #1
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d107      	bne.n	8009cbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d001      	beq.n	8009cc0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e000      	b.n	8009cc2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3718      	adds	r7, #24
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	40023800 	.word	0x40023800

08009cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d101      	bne.n	8009ce8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e0d0      	b.n	8009e8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009ce8:	4b6a      	ldr	r3, [pc, #424]	@ (8009e94 <HAL_RCC_ClockConfig+0x1c4>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 030f 	and.w	r3, r3, #15
 8009cf0:	683a      	ldr	r2, [r7, #0]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d910      	bls.n	8009d18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cf6:	4b67      	ldr	r3, [pc, #412]	@ (8009e94 <HAL_RCC_ClockConfig+0x1c4>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f023 020f 	bic.w	r2, r3, #15
 8009cfe:	4965      	ldr	r1, [pc, #404]	@ (8009e94 <HAL_RCC_ClockConfig+0x1c4>)
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d06:	4b63      	ldr	r3, [pc, #396]	@ (8009e94 <HAL_RCC_ClockConfig+0x1c4>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f003 030f 	and.w	r3, r3, #15
 8009d0e:	683a      	ldr	r2, [r7, #0]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d001      	beq.n	8009d18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	e0b8      	b.n	8009e8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f003 0302 	and.w	r3, r3, #2
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d020      	beq.n	8009d66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 0304 	and.w	r3, r3, #4
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d005      	beq.n	8009d3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009d30:	4b59      	ldr	r3, [pc, #356]	@ (8009e98 <HAL_RCC_ClockConfig+0x1c8>)
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	4a58      	ldr	r2, [pc, #352]	@ (8009e98 <HAL_RCC_ClockConfig+0x1c8>)
 8009d36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009d3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f003 0308 	and.w	r3, r3, #8
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d005      	beq.n	8009d54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009d48:	4b53      	ldr	r3, [pc, #332]	@ (8009e98 <HAL_RCC_ClockConfig+0x1c8>)
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	4a52      	ldr	r2, [pc, #328]	@ (8009e98 <HAL_RCC_ClockConfig+0x1c8>)
 8009d4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009d52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d54:	4b50      	ldr	r3, [pc, #320]	@ (8009e98 <HAL_RCC_ClockConfig+0x1c8>)
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	494d      	ldr	r1, [pc, #308]	@ (8009e98 <HAL_RCC_ClockConfig+0x1c8>)
 8009d62:	4313      	orrs	r3, r2
 8009d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f003 0301 	and.w	r3, r3, #1
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d040      	beq.n	8009df4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d107      	bne.n	8009d8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d7a:	4b47      	ldr	r3, [pc, #284]	@ (8009e98 <HAL_RCC_ClockConfig+0x1c8>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d115      	bne.n	8009db2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e07f      	b.n	8009e8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	2b02      	cmp	r3, #2
 8009d90:	d107      	bne.n	8009da2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d92:	4b41      	ldr	r3, [pc, #260]	@ (8009e98 <HAL_RCC_ClockConfig+0x1c8>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d109      	bne.n	8009db2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e073      	b.n	8009e8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009da2:	4b3d      	ldr	r3, [pc, #244]	@ (8009e98 <HAL_RCC_ClockConfig+0x1c8>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f003 0302 	and.w	r3, r3, #2
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e06b      	b.n	8009e8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009db2:	4b39      	ldr	r3, [pc, #228]	@ (8009e98 <HAL_RCC_ClockConfig+0x1c8>)
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	f023 0203 	bic.w	r2, r3, #3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	4936      	ldr	r1, [pc, #216]	@ (8009e98 <HAL_RCC_ClockConfig+0x1c8>)
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dc4:	f7fb f9a6 	bl	8005114 <HAL_GetTick>
 8009dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009dca:	e00a      	b.n	8009de2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009dcc:	f7fb f9a2 	bl	8005114 <HAL_GetTick>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d901      	bls.n	8009de2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	e053      	b.n	8009e8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009de2:	4b2d      	ldr	r3, [pc, #180]	@ (8009e98 <HAL_RCC_ClockConfig+0x1c8>)
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	f003 020c 	and.w	r2, r3, #12
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d1eb      	bne.n	8009dcc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009df4:	4b27      	ldr	r3, [pc, #156]	@ (8009e94 <HAL_RCC_ClockConfig+0x1c4>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f003 030f 	and.w	r3, r3, #15
 8009dfc:	683a      	ldr	r2, [r7, #0]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d210      	bcs.n	8009e24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e02:	4b24      	ldr	r3, [pc, #144]	@ (8009e94 <HAL_RCC_ClockConfig+0x1c4>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f023 020f 	bic.w	r2, r3, #15
 8009e0a:	4922      	ldr	r1, [pc, #136]	@ (8009e94 <HAL_RCC_ClockConfig+0x1c4>)
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e12:	4b20      	ldr	r3, [pc, #128]	@ (8009e94 <HAL_RCC_ClockConfig+0x1c4>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 030f 	and.w	r3, r3, #15
 8009e1a:	683a      	ldr	r2, [r7, #0]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d001      	beq.n	8009e24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	e032      	b.n	8009e8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f003 0304 	and.w	r3, r3, #4
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d008      	beq.n	8009e42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e30:	4b19      	ldr	r3, [pc, #100]	@ (8009e98 <HAL_RCC_ClockConfig+0x1c8>)
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	4916      	ldr	r1, [pc, #88]	@ (8009e98 <HAL_RCC_ClockConfig+0x1c8>)
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 0308 	and.w	r3, r3, #8
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d009      	beq.n	8009e62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009e4e:	4b12      	ldr	r3, [pc, #72]	@ (8009e98 <HAL_RCC_ClockConfig+0x1c8>)
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	00db      	lsls	r3, r3, #3
 8009e5c:	490e      	ldr	r1, [pc, #56]	@ (8009e98 <HAL_RCC_ClockConfig+0x1c8>)
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009e62:	f000 f821 	bl	8009ea8 <HAL_RCC_GetSysClockFreq>
 8009e66:	4602      	mov	r2, r0
 8009e68:	4b0b      	ldr	r3, [pc, #44]	@ (8009e98 <HAL_RCC_ClockConfig+0x1c8>)
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	091b      	lsrs	r3, r3, #4
 8009e6e:	f003 030f 	and.w	r3, r3, #15
 8009e72:	490a      	ldr	r1, [pc, #40]	@ (8009e9c <HAL_RCC_ClockConfig+0x1cc>)
 8009e74:	5ccb      	ldrb	r3, [r1, r3]
 8009e76:	fa22 f303 	lsr.w	r3, r2, r3
 8009e7a:	4a09      	ldr	r2, [pc, #36]	@ (8009ea0 <HAL_RCC_ClockConfig+0x1d0>)
 8009e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009e7e:	4b09      	ldr	r3, [pc, #36]	@ (8009ea4 <HAL_RCC_ClockConfig+0x1d4>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fa fc72 	bl	800476c <HAL_InitTick>

  return HAL_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	40023c00 	.word	0x40023c00
 8009e98:	40023800 	.word	0x40023800
 8009e9c:	08019e48 	.word	0x08019e48
 8009ea0:	2000001c 	.word	0x2000001c
 8009ea4:	20000068 	.word	0x20000068

08009ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009eac:	b090      	sub	sp, #64	@ 0x40
 8009eae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009eb8:	2300      	movs	r3, #0
 8009eba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009ec0:	4b59      	ldr	r3, [pc, #356]	@ (800a028 <HAL_RCC_GetSysClockFreq+0x180>)
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	f003 030c 	and.w	r3, r3, #12
 8009ec8:	2b08      	cmp	r3, #8
 8009eca:	d00d      	beq.n	8009ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8009ecc:	2b08      	cmp	r3, #8
 8009ece:	f200 80a1 	bhi.w	800a014 <HAL_RCC_GetSysClockFreq+0x16c>
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d002      	beq.n	8009edc <HAL_RCC_GetSysClockFreq+0x34>
 8009ed6:	2b04      	cmp	r3, #4
 8009ed8:	d003      	beq.n	8009ee2 <HAL_RCC_GetSysClockFreq+0x3a>
 8009eda:	e09b      	b.n	800a014 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009edc:	4b53      	ldr	r3, [pc, #332]	@ (800a02c <HAL_RCC_GetSysClockFreq+0x184>)
 8009ede:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009ee0:	e09b      	b.n	800a01a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009ee2:	4b53      	ldr	r3, [pc, #332]	@ (800a030 <HAL_RCC_GetSysClockFreq+0x188>)
 8009ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009ee6:	e098      	b.n	800a01a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009ee8:	4b4f      	ldr	r3, [pc, #316]	@ (800a028 <HAL_RCC_GetSysClockFreq+0x180>)
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ef0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009ef2:	4b4d      	ldr	r3, [pc, #308]	@ (800a028 <HAL_RCC_GetSysClockFreq+0x180>)
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d028      	beq.n	8009f50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009efe:	4b4a      	ldr	r3, [pc, #296]	@ (800a028 <HAL_RCC_GetSysClockFreq+0x180>)
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	099b      	lsrs	r3, r3, #6
 8009f04:	2200      	movs	r2, #0
 8009f06:	623b      	str	r3, [r7, #32]
 8009f08:	627a      	str	r2, [r7, #36]	@ 0x24
 8009f0a:	6a3b      	ldr	r3, [r7, #32]
 8009f0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009f10:	2100      	movs	r1, #0
 8009f12:	4b47      	ldr	r3, [pc, #284]	@ (800a030 <HAL_RCC_GetSysClockFreq+0x188>)
 8009f14:	fb03 f201 	mul.w	r2, r3, r1
 8009f18:	2300      	movs	r3, #0
 8009f1a:	fb00 f303 	mul.w	r3, r0, r3
 8009f1e:	4413      	add	r3, r2
 8009f20:	4a43      	ldr	r2, [pc, #268]	@ (800a030 <HAL_RCC_GetSysClockFreq+0x188>)
 8009f22:	fba0 1202 	umull	r1, r2, r0, r2
 8009f26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f28:	460a      	mov	r2, r1
 8009f2a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009f2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f2e:	4413      	add	r3, r2
 8009f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f34:	2200      	movs	r2, #0
 8009f36:	61bb      	str	r3, [r7, #24]
 8009f38:	61fa      	str	r2, [r7, #28]
 8009f3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009f42:	f7f6 f9cd 	bl	80002e0 <__aeabi_uldivmod>
 8009f46:	4602      	mov	r2, r0
 8009f48:	460b      	mov	r3, r1
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f4e:	e053      	b.n	8009ff8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f50:	4b35      	ldr	r3, [pc, #212]	@ (800a028 <HAL_RCC_GetSysClockFreq+0x180>)
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	099b      	lsrs	r3, r3, #6
 8009f56:	2200      	movs	r2, #0
 8009f58:	613b      	str	r3, [r7, #16]
 8009f5a:	617a      	str	r2, [r7, #20]
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009f62:	f04f 0b00 	mov.w	fp, #0
 8009f66:	4652      	mov	r2, sl
 8009f68:	465b      	mov	r3, fp
 8009f6a:	f04f 0000 	mov.w	r0, #0
 8009f6e:	f04f 0100 	mov.w	r1, #0
 8009f72:	0159      	lsls	r1, r3, #5
 8009f74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009f78:	0150      	lsls	r0, r2, #5
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	ebb2 080a 	subs.w	r8, r2, sl
 8009f82:	eb63 090b 	sbc.w	r9, r3, fp
 8009f86:	f04f 0200 	mov.w	r2, #0
 8009f8a:	f04f 0300 	mov.w	r3, #0
 8009f8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009f92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009f96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009f9a:	ebb2 0408 	subs.w	r4, r2, r8
 8009f9e:	eb63 0509 	sbc.w	r5, r3, r9
 8009fa2:	f04f 0200 	mov.w	r2, #0
 8009fa6:	f04f 0300 	mov.w	r3, #0
 8009faa:	00eb      	lsls	r3, r5, #3
 8009fac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009fb0:	00e2      	lsls	r2, r4, #3
 8009fb2:	4614      	mov	r4, r2
 8009fb4:	461d      	mov	r5, r3
 8009fb6:	eb14 030a 	adds.w	r3, r4, sl
 8009fba:	603b      	str	r3, [r7, #0]
 8009fbc:	eb45 030b 	adc.w	r3, r5, fp
 8009fc0:	607b      	str	r3, [r7, #4]
 8009fc2:	f04f 0200 	mov.w	r2, #0
 8009fc6:	f04f 0300 	mov.w	r3, #0
 8009fca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009fce:	4629      	mov	r1, r5
 8009fd0:	028b      	lsls	r3, r1, #10
 8009fd2:	4621      	mov	r1, r4
 8009fd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009fd8:	4621      	mov	r1, r4
 8009fda:	028a      	lsls	r2, r1, #10
 8009fdc:	4610      	mov	r0, r2
 8009fde:	4619      	mov	r1, r3
 8009fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	60bb      	str	r3, [r7, #8]
 8009fe6:	60fa      	str	r2, [r7, #12]
 8009fe8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009fec:	f7f6 f978 	bl	80002e0 <__aeabi_uldivmod>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009ff8:	4b0b      	ldr	r3, [pc, #44]	@ (800a028 <HAL_RCC_GetSysClockFreq+0x180>)
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	0c1b      	lsrs	r3, r3, #16
 8009ffe:	f003 0303 	and.w	r3, r3, #3
 800a002:	3301      	adds	r3, #1
 800a004:	005b      	lsls	r3, r3, #1
 800a006:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a008:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a010:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a012:	e002      	b.n	800a01a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a014:	4b05      	ldr	r3, [pc, #20]	@ (800a02c <HAL_RCC_GetSysClockFreq+0x184>)
 800a016:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a018:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3740      	adds	r7, #64	@ 0x40
 800a020:	46bd      	mov	sp, r7
 800a022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a026:	bf00      	nop
 800a028:	40023800 	.word	0x40023800
 800a02c:	00f42400 	.word	0x00f42400
 800a030:	017d7840 	.word	0x017d7840

0800a034 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a034:	b480      	push	{r7}
 800a036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a038:	4b03      	ldr	r3, [pc, #12]	@ (800a048 <HAL_RCC_GetHCLKFreq+0x14>)
 800a03a:	681b      	ldr	r3, [r3, #0]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop
 800a048:	2000001c 	.word	0x2000001c

0800a04c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a050:	f7ff fff0 	bl	800a034 <HAL_RCC_GetHCLKFreq>
 800a054:	4602      	mov	r2, r0
 800a056:	4b05      	ldr	r3, [pc, #20]	@ (800a06c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	0a9b      	lsrs	r3, r3, #10
 800a05c:	f003 0307 	and.w	r3, r3, #7
 800a060:	4903      	ldr	r1, [pc, #12]	@ (800a070 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a062:	5ccb      	ldrb	r3, [r1, r3]
 800a064:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a068:	4618      	mov	r0, r3
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	40023800 	.word	0x40023800
 800a070:	08019e58 	.word	0x08019e58

0800a074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a078:	f7ff ffdc 	bl	800a034 <HAL_RCC_GetHCLKFreq>
 800a07c:	4602      	mov	r2, r0
 800a07e:	4b05      	ldr	r3, [pc, #20]	@ (800a094 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	0b5b      	lsrs	r3, r3, #13
 800a084:	f003 0307 	and.w	r3, r3, #7
 800a088:	4903      	ldr	r1, [pc, #12]	@ (800a098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a08a:	5ccb      	ldrb	r3, [r1, r3]
 800a08c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a090:	4618      	mov	r0, r3
 800a092:	bd80      	pop	{r7, pc}
 800a094:	40023800 	.word	0x40023800
 800a098:	08019e58 	.word	0x08019e58

0800a09c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	220f      	movs	r2, #15
 800a0aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a0ac:	4b12      	ldr	r3, [pc, #72]	@ (800a0f8 <HAL_RCC_GetClockConfig+0x5c>)
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	f003 0203 	and.w	r2, r3, #3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a0b8:	4b0f      	ldr	r3, [pc, #60]	@ (800a0f8 <HAL_RCC_GetClockConfig+0x5c>)
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a0c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a0f8 <HAL_RCC_GetClockConfig+0x5c>)
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a0d0:	4b09      	ldr	r3, [pc, #36]	@ (800a0f8 <HAL_RCC_GetClockConfig+0x5c>)
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	08db      	lsrs	r3, r3, #3
 800a0d6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a0de:	4b07      	ldr	r3, [pc, #28]	@ (800a0fc <HAL_RCC_GetClockConfig+0x60>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f003 020f 	and.w	r2, r3, #15
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	601a      	str	r2, [r3, #0]
}
 800a0ea:	bf00      	nop
 800a0ec:	370c      	adds	r7, #12
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	40023800 	.word	0x40023800
 800a0fc:	40023c00 	.word	0x40023c00

0800a100 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b088      	sub	sp, #32
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a108:	2300      	movs	r3, #0
 800a10a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a10c:	2300      	movs	r3, #0
 800a10e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a110:	2300      	movs	r3, #0
 800a112:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a114:	2300      	movs	r3, #0
 800a116:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a118:	2300      	movs	r3, #0
 800a11a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f003 0301 	and.w	r3, r3, #1
 800a124:	2b00      	cmp	r3, #0
 800a126:	d012      	beq.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a128:	4b69      	ldr	r3, [pc, #420]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	4a68      	ldr	r2, [pc, #416]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a12e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a132:	6093      	str	r3, [r2, #8]
 800a134:	4b66      	ldr	r3, [pc, #408]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a136:	689a      	ldr	r2, [r3, #8]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a13c:	4964      	ldr	r1, [pc, #400]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a13e:	4313      	orrs	r3, r2
 800a140:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a146:	2b00      	cmp	r3, #0
 800a148:	d101      	bne.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a14a:	2301      	movs	r3, #1
 800a14c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a156:	2b00      	cmp	r3, #0
 800a158:	d017      	beq.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a15a:	4b5d      	ldr	r3, [pc, #372]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a15c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a160:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a168:	4959      	ldr	r1, [pc, #356]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a16a:	4313      	orrs	r3, r2
 800a16c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a174:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a178:	d101      	bne.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a17a:	2301      	movs	r3, #1
 800a17c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a182:	2b00      	cmp	r3, #0
 800a184:	d101      	bne.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a186:	2301      	movs	r3, #1
 800a188:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a192:	2b00      	cmp	r3, #0
 800a194:	d017      	beq.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a196:	4b4e      	ldr	r3, [pc, #312]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a198:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a19c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1a4:	494a      	ldr	r1, [pc, #296]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a1b4:	d101      	bne.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d101      	bne.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d001      	beq.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f003 0320 	and.w	r3, r3, #32
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	f000 808b 	beq.w	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a1e4:	4b3a      	ldr	r3, [pc, #232]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1e8:	4a39      	ldr	r2, [pc, #228]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1ee:	6413      	str	r3, [r2, #64]	@ 0x40
 800a1f0:	4b37      	ldr	r3, [pc, #220]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1f8:	60bb      	str	r3, [r7, #8]
 800a1fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a1fc:	4b35      	ldr	r3, [pc, #212]	@ (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a34      	ldr	r2, [pc, #208]	@ (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a202:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a206:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a208:	f7fa ff84 	bl	8005114 <HAL_GetTick>
 800a20c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a20e:	e008      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a210:	f7fa ff80 	bl	8005114 <HAL_GetTick>
 800a214:	4602      	mov	r2, r0
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	1ad3      	subs	r3, r2, r3
 800a21a:	2b64      	cmp	r3, #100	@ 0x64
 800a21c:	d901      	bls.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a21e:	2303      	movs	r3, #3
 800a220:	e357      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a222:	4b2c      	ldr	r3, [pc, #176]	@ (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d0f0      	beq.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a22e:	4b28      	ldr	r3, [pc, #160]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a232:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a236:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d035      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d02e      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a24c:	4b20      	ldr	r3, [pc, #128]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a24e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a250:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a254:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a256:	4b1e      	ldr	r3, [pc, #120]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a25a:	4a1d      	ldr	r2, [pc, #116]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a25c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a260:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a262:	4b1b      	ldr	r3, [pc, #108]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a266:	4a1a      	ldr	r2, [pc, #104]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a268:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a26c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a26e:	4a18      	ldr	r2, [pc, #96]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a274:	4b16      	ldr	r3, [pc, #88]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a278:	f003 0301 	and.w	r3, r3, #1
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d114      	bne.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a280:	f7fa ff48 	bl	8005114 <HAL_GetTick>
 800a284:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a286:	e00a      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a288:	f7fa ff44 	bl	8005114 <HAL_GetTick>
 800a28c:	4602      	mov	r2, r0
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a296:	4293      	cmp	r3, r2
 800a298:	d901      	bls.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800a29a:	2303      	movs	r3, #3
 800a29c:	e319      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a29e:	4b0c      	ldr	r3, [pc, #48]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2a2:	f003 0302 	and.w	r3, r3, #2
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d0ee      	beq.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a2b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2b6:	d111      	bne.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800a2b8:	4b05      	ldr	r3, [pc, #20]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a2c4:	4b04      	ldr	r3, [pc, #16]	@ (800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a2c6:	400b      	ands	r3, r1
 800a2c8:	4901      	ldr	r1, [pc, #4]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	608b      	str	r3, [r1, #8]
 800a2ce:	e00b      	b.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a2d0:	40023800 	.word	0x40023800
 800a2d4:	40007000 	.word	0x40007000
 800a2d8:	0ffffcff 	.word	0x0ffffcff
 800a2dc:	4baa      	ldr	r3, [pc, #680]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	4aa9      	ldr	r2, [pc, #676]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a2e2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800a2e6:	6093      	str	r3, [r2, #8]
 800a2e8:	4ba7      	ldr	r3, [pc, #668]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a2ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2f4:	49a4      	ldr	r1, [pc, #656]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f003 0310 	and.w	r3, r3, #16
 800a302:	2b00      	cmp	r3, #0
 800a304:	d010      	beq.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a306:	4ba0      	ldr	r3, [pc, #640]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a308:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a30c:	4a9e      	ldr	r2, [pc, #632]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a30e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a312:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800a316:	4b9c      	ldr	r3, [pc, #624]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a318:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a320:	4999      	ldr	r1, [pc, #612]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a322:	4313      	orrs	r3, r2
 800a324:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00a      	beq.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a334:	4b94      	ldr	r3, [pc, #592]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a33a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a342:	4991      	ldr	r1, [pc, #580]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a344:	4313      	orrs	r3, r2
 800a346:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00a      	beq.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a356:	4b8c      	ldr	r3, [pc, #560]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a35c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a364:	4988      	ldr	r1, [pc, #544]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a366:	4313      	orrs	r3, r2
 800a368:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00a      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a378:	4b83      	ldr	r3, [pc, #524]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a37a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a37e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a386:	4980      	ldr	r1, [pc, #512]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a388:	4313      	orrs	r3, r2
 800a38a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00a      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a39a:	4b7b      	ldr	r3, [pc, #492]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a39c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3a8:	4977      	ldr	r1, [pc, #476]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00a      	beq.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a3bc:	4b72      	ldr	r3, [pc, #456]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a3be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3c2:	f023 0203 	bic.w	r2, r3, #3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3ca:	496f      	ldr	r1, [pc, #444]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00a      	beq.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a3de:	4b6a      	ldr	r3, [pc, #424]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a3e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3e4:	f023 020c 	bic.w	r2, r3, #12
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3ec:	4966      	ldr	r1, [pc, #408]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d00a      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a400:	4b61      	ldr	r3, [pc, #388]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a406:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a40e:	495e      	ldr	r1, [pc, #376]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a410:	4313      	orrs	r3, r2
 800a412:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00a      	beq.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a422:	4b59      	ldr	r3, [pc, #356]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a428:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a430:	4955      	ldr	r1, [pc, #340]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a432:	4313      	orrs	r3, r2
 800a434:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00a      	beq.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a444:	4b50      	ldr	r3, [pc, #320]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a44a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a452:	494d      	ldr	r1, [pc, #308]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a454:	4313      	orrs	r3, r2
 800a456:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00a      	beq.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a466:	4b48      	ldr	r3, [pc, #288]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a46c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a474:	4944      	ldr	r1, [pc, #272]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a476:	4313      	orrs	r3, r2
 800a478:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00a      	beq.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a488:	4b3f      	ldr	r3, [pc, #252]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a48a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a48e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a496:	493c      	ldr	r1, [pc, #240]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a498:	4313      	orrs	r3, r2
 800a49a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00a      	beq.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a4aa:	4b37      	ldr	r3, [pc, #220]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4b8:	4933      	ldr	r1, [pc, #204]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d00a      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a4cc:	4b2e      	ldr	r3, [pc, #184]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4d2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a4da:	492b      	ldr	r1, [pc, #172]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d011      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a4ee:	4b26      	ldr	r3, [pc, #152]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4f4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a4fc:	4922      	ldr	r1, [pc, #136]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4fe:	4313      	orrs	r3, r2
 800a500:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a508:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a50c:	d101      	bne.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a50e:	2301      	movs	r3, #1
 800a510:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f003 0308 	and.w	r3, r3, #8
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d001      	beq.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800a51e:	2301      	movs	r3, #1
 800a520:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00a      	beq.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a52e:	4b16      	ldr	r3, [pc, #88]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a534:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a53c:	4912      	ldr	r1, [pc, #72]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a53e:	4313      	orrs	r3, r2
 800a540:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d00b      	beq.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a550:	4b0d      	ldr	r3, [pc, #52]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a556:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a560:	4909      	ldr	r1, [pc, #36]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a562:	4313      	orrs	r3, r2
 800a564:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d006      	beq.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a576:	2b00      	cmp	r3, #0
 800a578:	f000 80d9 	beq.w	800a72e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a57c:	4b02      	ldr	r3, [pc, #8]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a01      	ldr	r2, [pc, #4]	@ (800a588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a582:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a586:	e001      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800a588:	40023800 	.word	0x40023800
 800a58c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a58e:	f7fa fdc1 	bl	8005114 <HAL_GetTick>
 800a592:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a594:	e008      	b.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a596:	f7fa fdbd 	bl	8005114 <HAL_GetTick>
 800a59a:	4602      	mov	r2, r0
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	1ad3      	subs	r3, r2, r3
 800a5a0:	2b64      	cmp	r3, #100	@ 0x64
 800a5a2:	d901      	bls.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	e194      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a5a8:	4b6c      	ldr	r3, [pc, #432]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1f0      	bne.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f003 0301 	and.w	r3, r3, #1
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d021      	beq.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d11d      	bne.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a5c8:	4b64      	ldr	r3, [pc, #400]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a5ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5ce:	0c1b      	lsrs	r3, r3, #16
 800a5d0:	f003 0303 	and.w	r3, r3, #3
 800a5d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a5d6:	4b61      	ldr	r3, [pc, #388]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a5d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5dc:	0e1b      	lsrs	r3, r3, #24
 800a5de:	f003 030f 	and.w	r3, r3, #15
 800a5e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	019a      	lsls	r2, r3, #6
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	041b      	lsls	r3, r3, #16
 800a5ee:	431a      	orrs	r2, r3
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	061b      	lsls	r3, r3, #24
 800a5f4:	431a      	orrs	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	071b      	lsls	r3, r3, #28
 800a5fc:	4957      	ldr	r1, [pc, #348]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a5fe:	4313      	orrs	r3, r2
 800a600:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d004      	beq.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a614:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a618:	d00a      	beq.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a622:	2b00      	cmp	r3, #0
 800a624:	d02e      	beq.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a62a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a62e:	d129      	bne.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a630:	4b4a      	ldr	r3, [pc, #296]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a632:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a636:	0c1b      	lsrs	r3, r3, #16
 800a638:	f003 0303 	and.w	r3, r3, #3
 800a63c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a63e:	4b47      	ldr	r3, [pc, #284]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a644:	0f1b      	lsrs	r3, r3, #28
 800a646:	f003 0307 	and.w	r3, r3, #7
 800a64a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	019a      	lsls	r2, r3, #6
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	041b      	lsls	r3, r3, #16
 800a656:	431a      	orrs	r2, r3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	061b      	lsls	r3, r3, #24
 800a65e:	431a      	orrs	r2, r3
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	071b      	lsls	r3, r3, #28
 800a664:	493d      	ldr	r1, [pc, #244]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a666:	4313      	orrs	r3, r2
 800a668:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a66c:	4b3b      	ldr	r3, [pc, #236]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a66e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a672:	f023 021f 	bic.w	r2, r3, #31
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a67a:	3b01      	subs	r3, #1
 800a67c:	4937      	ldr	r1, [pc, #220]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a67e:	4313      	orrs	r3, r2
 800a680:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d01d      	beq.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a690:	4b32      	ldr	r3, [pc, #200]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a692:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a696:	0e1b      	lsrs	r3, r3, #24
 800a698:	f003 030f 	and.w	r3, r3, #15
 800a69c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a69e:	4b2f      	ldr	r3, [pc, #188]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6a4:	0f1b      	lsrs	r3, r3, #28
 800a6a6:	f003 0307 	and.w	r3, r3, #7
 800a6aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	019a      	lsls	r2, r3, #6
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	041b      	lsls	r3, r3, #16
 800a6b8:	431a      	orrs	r2, r3
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	061b      	lsls	r3, r3, #24
 800a6be:	431a      	orrs	r2, r3
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	071b      	lsls	r3, r3, #28
 800a6c4:	4925      	ldr	r1, [pc, #148]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d011      	beq.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	019a      	lsls	r2, r3, #6
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	041b      	lsls	r3, r3, #16
 800a6e4:	431a      	orrs	r2, r3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	061b      	lsls	r3, r3, #24
 800a6ec:	431a      	orrs	r2, r3
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	071b      	lsls	r3, r3, #28
 800a6f4:	4919      	ldr	r1, [pc, #100]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a6fc:	4b17      	ldr	r3, [pc, #92]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a16      	ldr	r2, [pc, #88]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a702:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a706:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a708:	f7fa fd04 	bl	8005114 <HAL_GetTick>
 800a70c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a70e:	e008      	b.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a710:	f7fa fd00 	bl	8005114 <HAL_GetTick>
 800a714:	4602      	mov	r2, r0
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	2b64      	cmp	r3, #100	@ 0x64
 800a71c:	d901      	bls.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a71e:	2303      	movs	r3, #3
 800a720:	e0d7      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a722:	4b0e      	ldr	r3, [pc, #56]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d0f0      	beq.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	2b01      	cmp	r3, #1
 800a732:	f040 80cd 	bne.w	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a736:	4b09      	ldr	r3, [pc, #36]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a08      	ldr	r2, [pc, #32]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a73c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a742:	f7fa fce7 	bl	8005114 <HAL_GetTick>
 800a746:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a748:	e00a      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a74a:	f7fa fce3 	bl	8005114 <HAL_GetTick>
 800a74e:	4602      	mov	r2, r0
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	1ad3      	subs	r3, r2, r3
 800a754:	2b64      	cmp	r3, #100	@ 0x64
 800a756:	d903      	bls.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a758:	2303      	movs	r3, #3
 800a75a:	e0ba      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a75c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a760:	4b5e      	ldr	r3, [pc, #376]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a76c:	d0ed      	beq.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a776:	2b00      	cmp	r3, #0
 800a778:	d003      	beq.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d009      	beq.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d02e      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a792:	2b00      	cmp	r3, #0
 800a794:	d12a      	bne.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a796:	4b51      	ldr	r3, [pc, #324]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a79c:	0c1b      	lsrs	r3, r3, #16
 800a79e:	f003 0303 	and.w	r3, r3, #3
 800a7a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a7a4:	4b4d      	ldr	r3, [pc, #308]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a7a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7aa:	0f1b      	lsrs	r3, r3, #28
 800a7ac:	f003 0307 	and.w	r3, r3, #7
 800a7b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	695b      	ldr	r3, [r3, #20]
 800a7b6:	019a      	lsls	r2, r3, #6
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	041b      	lsls	r3, r3, #16
 800a7bc:	431a      	orrs	r2, r3
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	699b      	ldr	r3, [r3, #24]
 800a7c2:	061b      	lsls	r3, r3, #24
 800a7c4:	431a      	orrs	r2, r3
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	071b      	lsls	r3, r3, #28
 800a7ca:	4944      	ldr	r1, [pc, #272]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a7d2:	4b42      	ldr	r3, [pc, #264]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a7d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7d8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	021b      	lsls	r3, r3, #8
 800a7e4:	493d      	ldr	r1, [pc, #244]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d022      	beq.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a800:	d11d      	bne.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a802:	4b36      	ldr	r3, [pc, #216]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a808:	0e1b      	lsrs	r3, r3, #24
 800a80a:	f003 030f 	and.w	r3, r3, #15
 800a80e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a810:	4b32      	ldr	r3, [pc, #200]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a816:	0f1b      	lsrs	r3, r3, #28
 800a818:	f003 0307 	and.w	r3, r3, #7
 800a81c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	695b      	ldr	r3, [r3, #20]
 800a822:	019a      	lsls	r2, r3, #6
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a1b      	ldr	r3, [r3, #32]
 800a828:	041b      	lsls	r3, r3, #16
 800a82a:	431a      	orrs	r2, r3
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	061b      	lsls	r3, r3, #24
 800a830:	431a      	orrs	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	071b      	lsls	r3, r3, #28
 800a836:	4929      	ldr	r1, [pc, #164]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a838:	4313      	orrs	r3, r2
 800a83a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f003 0308 	and.w	r3, r3, #8
 800a846:	2b00      	cmp	r3, #0
 800a848:	d028      	beq.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a84a:	4b24      	ldr	r3, [pc, #144]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a84c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a850:	0e1b      	lsrs	r3, r3, #24
 800a852:	f003 030f 	and.w	r3, r3, #15
 800a856:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a858:	4b20      	ldr	r3, [pc, #128]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a85a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a85e:	0c1b      	lsrs	r3, r3, #16
 800a860:	f003 0303 	and.w	r3, r3, #3
 800a864:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	695b      	ldr	r3, [r3, #20]
 800a86a:	019a      	lsls	r2, r3, #6
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	041b      	lsls	r3, r3, #16
 800a870:	431a      	orrs	r2, r3
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	061b      	lsls	r3, r3, #24
 800a876:	431a      	orrs	r2, r3
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	69db      	ldr	r3, [r3, #28]
 800a87c:	071b      	lsls	r3, r3, #28
 800a87e:	4917      	ldr	r1, [pc, #92]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a880:	4313      	orrs	r3, r2
 800a882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a886:	4b15      	ldr	r3, [pc, #84]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a888:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a88c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a894:	4911      	ldr	r1, [pc, #68]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a896:	4313      	orrs	r3, r2
 800a898:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a89c:	4b0f      	ldr	r3, [pc, #60]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a0e      	ldr	r2, [pc, #56]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a8a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8a8:	f7fa fc34 	bl	8005114 <HAL_GetTick>
 800a8ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a8ae:	e008      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a8b0:	f7fa fc30 	bl	8005114 <HAL_GetTick>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	1ad3      	subs	r3, r2, r3
 800a8ba:	2b64      	cmp	r3, #100	@ 0x64
 800a8bc:	d901      	bls.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a8be:	2303      	movs	r3, #3
 800a8c0:	e007      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a8c2:	4b06      	ldr	r3, [pc, #24]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8ce:	d1ef      	bne.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3720      	adds	r7, #32
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	40023800 	.word	0x40023800

0800a8e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b087      	sub	sp, #28
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a8fe:	f040 808d 	bne.w	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800a902:	4b93      	ldr	r3, [pc, #588]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a904:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a908:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a910:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a918:	d07c      	beq.n	800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a920:	d87b      	bhi.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d004      	beq.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a92e:	d039      	beq.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800a930:	e073      	b.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a932:	4b87      	ldr	r3, [pc, #540]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d108      	bne.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a93e:	4b84      	ldr	r3, [pc, #528]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a946:	4a83      	ldr	r2, [pc, #524]	@ (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a948:	fbb2 f3f3 	udiv	r3, r2, r3
 800a94c:	613b      	str	r3, [r7, #16]
 800a94e:	e007      	b.n	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a950:	4b7f      	ldr	r3, [pc, #508]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a958:	4a7f      	ldr	r2, [pc, #508]	@ (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a95a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a95e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800a960:	4b7b      	ldr	r3, [pc, #492]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a966:	0e1b      	lsrs	r3, r3, #24
 800a968:	f003 030f 	and.w	r3, r3, #15
 800a96c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800a96e:	4b78      	ldr	r3, [pc, #480]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a974:	099b      	lsrs	r3, r3, #6
 800a976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a97a:	693a      	ldr	r2, [r7, #16]
 800a97c:	fb03 f202 	mul.w	r2, r3, r2
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	fbb2 f3f3 	udiv	r3, r2, r3
 800a986:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800a988:	4b71      	ldr	r3, [pc, #452]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a98a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a98e:	0a1b      	lsrs	r3, r3, #8
 800a990:	f003 031f 	and.w	r3, r3, #31
 800a994:	3301      	adds	r3, #1
 800a996:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a998:	697a      	ldr	r2, [r7, #20]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9a0:	617b      	str	r3, [r7, #20]
        break;
 800a9a2:	e03b      	b.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a9a4:	4b6a      	ldr	r3, [pc, #424]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d108      	bne.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a9b0:	4b67      	ldr	r3, [pc, #412]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a9b8:	4a66      	ldr	r2, [pc, #408]	@ (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a9ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9be:	613b      	str	r3, [r7, #16]
 800a9c0:	e007      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a9c2:	4b63      	ldr	r3, [pc, #396]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a9ca:	4a63      	ldr	r2, [pc, #396]	@ (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a9cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9d0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800a9d2:	4b5f      	ldr	r3, [pc, #380]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a9d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9d8:	0e1b      	lsrs	r3, r3, #24
 800a9da:	f003 030f 	and.w	r3, r3, #15
 800a9de:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800a9e0:	4b5b      	ldr	r3, [pc, #364]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a9e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9e6:	099b      	lsrs	r3, r3, #6
 800a9e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ec:	693a      	ldr	r2, [r7, #16]
 800a9ee:	fb03 f202 	mul.w	r2, r3, r2
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9f8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800a9fa:	4b55      	ldr	r3, [pc, #340]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a9fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa00:	f003 031f 	and.w	r3, r3, #31
 800aa04:	3301      	adds	r3, #1
 800aa06:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800aa08:	697a      	ldr	r2, [r7, #20]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa10:	617b      	str	r3, [r7, #20]
        break;
 800aa12:	e003      	b.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa14:	4b51      	ldr	r3, [pc, #324]	@ (800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800aa16:	617b      	str	r3, [r7, #20]
        break;
 800aa18:	e000      	b.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800aa1a:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa22:	f040 808d 	bne.w	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800aa26:	4b4a      	ldr	r3, [pc, #296]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aa28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa2c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800aa34:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aa3c:	d07c      	beq.n	800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aa44:	d87b      	bhi.n	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d004      	beq.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa52:	d039      	beq.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800aa54:	e073      	b.n	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800aa56:	4b3e      	ldr	r3, [pc, #248]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d108      	bne.n	800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800aa62:	4b3b      	ldr	r3, [pc, #236]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa6a:	4a3a      	ldr	r2, [pc, #232]	@ (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800aa6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa70:	613b      	str	r3, [r7, #16]
 800aa72:	e007      	b.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800aa74:	4b36      	ldr	r3, [pc, #216]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa7c:	4a36      	ldr	r2, [pc, #216]	@ (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa82:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800aa84:	4b32      	ldr	r3, [pc, #200]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aa86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa8a:	0e1b      	lsrs	r3, r3, #24
 800aa8c:	f003 030f 	and.w	r3, r3, #15
 800aa90:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800aa92:	4b2f      	ldr	r3, [pc, #188]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aa94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa98:	099b      	lsrs	r3, r3, #6
 800aa9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa9e:	693a      	ldr	r2, [r7, #16]
 800aaa0:	fb03 f202 	mul.w	r2, r3, r2
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaaa:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800aaac:	4b28      	ldr	r3, [pc, #160]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aaae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aab2:	0a1b      	lsrs	r3, r3, #8
 800aab4:	f003 031f 	and.w	r3, r3, #31
 800aab8:	3301      	adds	r3, #1
 800aaba:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800aabc:	697a      	ldr	r2, [r7, #20]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aac4:	617b      	str	r3, [r7, #20]
        break;
 800aac6:	e03b      	b.n	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800aac8:	4b21      	ldr	r3, [pc, #132]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d108      	bne.n	800aae6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800aad4:	4b1e      	ldr	r3, [pc, #120]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aadc:	4a1d      	ldr	r2, [pc, #116]	@ (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800aade:	fbb2 f3f3 	udiv	r3, r2, r3
 800aae2:	613b      	str	r3, [r7, #16]
 800aae4:	e007      	b.n	800aaf6 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800aae6:	4b1a      	ldr	r3, [pc, #104]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aaee:	4a1a      	ldr	r2, [pc, #104]	@ (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aaf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaf4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800aaf6:	4b16      	ldr	r3, [pc, #88]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aaf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aafc:	0e1b      	lsrs	r3, r3, #24
 800aafe:	f003 030f 	and.w	r3, r3, #15
 800ab02:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800ab04:	4b12      	ldr	r3, [pc, #72]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab0a:	099b      	lsrs	r3, r3, #6
 800ab0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab10:	693a      	ldr	r2, [r7, #16]
 800ab12:	fb03 f202 	mul.w	r2, r3, r2
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab1c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800ab1e:	4b0c      	ldr	r3, [pc, #48]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab24:	f003 031f 	and.w	r3, r3, #31
 800ab28:	3301      	adds	r3, #1
 800ab2a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ab2c:	697a      	ldr	r2, [r7, #20]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab34:	617b      	str	r3, [r7, #20]
        break;
 800ab36:	e003      	b.n	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800ab38:	4b08      	ldr	r3, [pc, #32]	@ (800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ab3a:	617b      	str	r3, [r7, #20]
        break;
 800ab3c:	e000      	b.n	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800ab3e:	bf00      	nop
      }
    }
  }

  return frequency;
 800ab40:	697b      	ldr	r3, [r7, #20]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	371c      	adds	r7, #28
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	40023800 	.word	0x40023800
 800ab54:	00f42400 	.word	0x00f42400
 800ab58:	017d7840 	.word	0x017d7840
 800ab5c:	00bb8000 	.word	0x00bb8000

0800ab60 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d101      	bne.n	800ab72 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e071      	b.n	800ac56 <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	7f5b      	ldrb	r3, [r3, #29]
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d105      	bne.n	800ab88 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f7f9 f974 	bl	8003e70 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2202      	movs	r2, #2
 800ab8c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	f003 0310 	and.w	r3, r3, #16
 800ab98:	2b10      	cmp	r3, #16
 800ab9a:	d053      	beq.n	800ac44 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	22ca      	movs	r2, #202	@ 0xca
 800aba2:	625a      	str	r2, [r3, #36]	@ 0x24
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2253      	movs	r2, #83	@ 0x53
 800abaa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 fac7 	bl	800b140 <RTC_EnterInitMode>
 800abb2:	4603      	mov	r3, r0
 800abb4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800abb6:	7bfb      	ldrb	r3, [r7, #15]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d12a      	bne.n	800ac12 <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	6899      	ldr	r1, [r3, #8]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	4b26      	ldr	r3, [pc, #152]	@ (800ac60 <HAL_RTC_Init+0x100>)
 800abc8:	400b      	ands	r3, r1
 800abca:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	6899      	ldr	r1, [r3, #8]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	685a      	ldr	r2, [r3, #4]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	691b      	ldr	r3, [r3, #16]
 800abda:	431a      	orrs	r2, r3
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	695b      	ldr	r3, [r3, #20]
 800abe0:	431a      	orrs	r2, r3
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	430a      	orrs	r2, r1
 800abe8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	68d2      	ldr	r2, [r2, #12]
 800abf2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	6919      	ldr	r1, [r3, #16]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	041a      	lsls	r2, r3, #16
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	430a      	orrs	r2, r1
 800ac06:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 fad0 	bl	800b1ae <RTC_ExitInitMode>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800ac12:	7bfb      	ldrb	r3, [r7, #15]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d110      	bne.n	800ac3a <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f022 0208 	bic.w	r2, r2, #8
 800ac26:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	699a      	ldr	r2, [r3, #24]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	430a      	orrs	r2, r1
 800ac38:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	22ff      	movs	r2, #255	@ 0xff
 800ac40:	625a      	str	r2, [r3, #36]	@ 0x24
 800ac42:	e001      	b.n	800ac48 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800ac44:	2300      	movs	r3, #0
 800ac46:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800ac48:	7bfb      	ldrb	r3, [r7, #15]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d102      	bne.n	800ac54 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2201      	movs	r2, #1
 800ac52:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800ac54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	ff8fffbf 	.word	0xff8fffbf

0800ac64 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ac64:	b590      	push	{r4, r7, lr}
 800ac66:	b087      	sub	sp, #28
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ac70:	2300      	movs	r3, #0
 800ac72:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	7f1b      	ldrb	r3, [r3, #28]
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d101      	bne.n	800ac80 <HAL_RTC_SetTime+0x1c>
 800ac7c:	2302      	movs	r3, #2
 800ac7e:	e085      	b.n	800ad8c <HAL_RTC_SetTime+0x128>
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2201      	movs	r2, #1
 800ac84:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2202      	movs	r2, #2
 800ac8a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d126      	bne.n	800ace0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d102      	bne.n	800aca6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	2200      	movs	r2, #0
 800aca4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	4618      	mov	r0, r3
 800acac:	f000 faa4 	bl	800b1f8 <RTC_ByteToBcd2>
 800acb0:	4603      	mov	r3, r0
 800acb2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	785b      	ldrb	r3, [r3, #1]
 800acb8:	4618      	mov	r0, r3
 800acba:	f000 fa9d 	bl	800b1f8 <RTC_ByteToBcd2>
 800acbe:	4603      	mov	r3, r0
 800acc0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800acc2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	789b      	ldrb	r3, [r3, #2]
 800acc8:	4618      	mov	r0, r3
 800acca:	f000 fa95 	bl	800b1f8 <RTC_ByteToBcd2>
 800acce:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800acd0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	78db      	ldrb	r3, [r3, #3]
 800acd8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800acda:	4313      	orrs	r3, r2
 800acdc:	617b      	str	r3, [r7, #20]
 800acde:	e018      	b.n	800ad12 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acea:	2b00      	cmp	r3, #0
 800acec:	d102      	bne.n	800acf4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	2200      	movs	r2, #0
 800acf2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	785b      	ldrb	r3, [r3, #1]
 800acfe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ad00:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800ad02:	68ba      	ldr	r2, [r7, #8]
 800ad04:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800ad06:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	78db      	ldrb	r3, [r3, #3]
 800ad0c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	22ca      	movs	r2, #202	@ 0xca
 800ad18:	625a      	str	r2, [r3, #36]	@ 0x24
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2253      	movs	r2, #83	@ 0x53
 800ad20:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f000 fa0c 	bl	800b140 <RTC_EnterInitMode>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ad2c:	7cfb      	ldrb	r3, [r7, #19]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d11e      	bne.n	800ad70 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	6979      	ldr	r1, [r7, #20]
 800ad38:	4b16      	ldr	r3, [pc, #88]	@ (800ad94 <HAL_RTC_SetTime+0x130>)
 800ad3a:	400b      	ands	r3, r1
 800ad3c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	689a      	ldr	r2, [r3, #8]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800ad4c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	6899      	ldr	r1, [r3, #8]
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	68da      	ldr	r2, [r3, #12]
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	691b      	ldr	r3, [r3, #16]
 800ad5c:	431a      	orrs	r2, r3
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	430a      	orrs	r2, r1
 800ad64:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f000 fa21 	bl	800b1ae <RTC_ExitInitMode>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ad70:	7cfb      	ldrb	r3, [r7, #19]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d102      	bne.n	800ad7c <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	22ff      	movs	r2, #255	@ 0xff
 800ad82:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2200      	movs	r2, #0
 800ad88:	771a      	strb	r2, [r3, #28]

  return status;
 800ad8a:	7cfb      	ldrb	r3, [r7, #19]
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	371c      	adds	r7, #28
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd90      	pop	{r4, r7, pc}
 800ad94:	007f7f7f 	.word	0x007f7f7f

0800ad98 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ad98:	b590      	push	{r4, r7, lr}
 800ad9a:	b087      	sub	sp, #28
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ada4:	2300      	movs	r3, #0
 800ada6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	7f1b      	ldrb	r3, [r3, #28]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d101      	bne.n	800adb4 <HAL_RTC_SetDate+0x1c>
 800adb0:	2302      	movs	r3, #2
 800adb2:	e06f      	b.n	800ae94 <HAL_RTC_SetDate+0xfc>
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2201      	movs	r2, #1
 800adb8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2202      	movs	r2, #2
 800adbe:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d10e      	bne.n	800ade4 <HAL_RTC_SetDate+0x4c>
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	785b      	ldrb	r3, [r3, #1]
 800adca:	f003 0310 	and.w	r3, r3, #16
 800adce:	2b00      	cmp	r3, #0
 800add0:	d008      	beq.n	800ade4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	785b      	ldrb	r3, [r3, #1]
 800add6:	f023 0310 	bic.w	r3, r3, #16
 800adda:	b2db      	uxtb	r3, r3
 800addc:	330a      	adds	r3, #10
 800adde:	b2da      	uxtb	r2, r3
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d11c      	bne.n	800ae24 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	78db      	ldrb	r3, [r3, #3]
 800adee:	4618      	mov	r0, r3
 800adf0:	f000 fa02 	bl	800b1f8 <RTC_ByteToBcd2>
 800adf4:	4603      	mov	r3, r0
 800adf6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	785b      	ldrb	r3, [r3, #1]
 800adfc:	4618      	mov	r0, r3
 800adfe:	f000 f9fb 	bl	800b1f8 <RTC_ByteToBcd2>
 800ae02:	4603      	mov	r3, r0
 800ae04:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ae06:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	789b      	ldrb	r3, [r3, #2]
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f000 f9f3 	bl	800b1f8 <RTC_ByteToBcd2>
 800ae12:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ae14:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	617b      	str	r3, [r7, #20]
 800ae22:	e00e      	b.n	800ae42 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	78db      	ldrb	r3, [r3, #3]
 800ae28:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	785b      	ldrb	r3, [r3, #1]
 800ae2e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ae30:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800ae32:	68ba      	ldr	r2, [r7, #8]
 800ae34:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ae36:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	22ca      	movs	r2, #202	@ 0xca
 800ae48:	625a      	str	r2, [r3, #36]	@ 0x24
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2253      	movs	r2, #83	@ 0x53
 800ae50:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ae52:	68f8      	ldr	r0, [r7, #12]
 800ae54:	f000 f974 	bl	800b140 <RTC_EnterInitMode>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ae5c:	7cfb      	ldrb	r3, [r7, #19]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10a      	bne.n	800ae78 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	6979      	ldr	r1, [r7, #20]
 800ae68:	4b0c      	ldr	r3, [pc, #48]	@ (800ae9c <HAL_RTC_SetDate+0x104>)
 800ae6a:	400b      	ands	r3, r1
 800ae6c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f000 f99d 	bl	800b1ae <RTC_ExitInitMode>
 800ae74:	4603      	mov	r3, r0
 800ae76:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ae78:	7cfb      	ldrb	r3, [r7, #19]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d102      	bne.n	800ae84 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2201      	movs	r2, #1
 800ae82:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	22ff      	movs	r2, #255	@ 0xff
 800ae8a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	771a      	strb	r2, [r3, #28]

  return status;
 800ae92:	7cfb      	ldrb	r3, [r7, #19]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	371c      	adds	r7, #28
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd90      	pop	{r4, r7, pc}
 800ae9c:	00ffff3f 	.word	0x00ffff3f

0800aea0 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800aea0:	b590      	push	{r4, r7, lr}
 800aea2:	b089      	sub	sp, #36	@ 0x24
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800aeac:	2300      	movs	r3, #0
 800aeae:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	7f1b      	ldrb	r3, [r3, #28]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d101      	bne.n	800aec4 <HAL_RTC_SetAlarm+0x24>
 800aec0:	2302      	movs	r3, #2
 800aec2:	e113      	b.n	800b0ec <HAL_RTC_SetAlarm+0x24c>
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2201      	movs	r2, #1
 800aec8:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2202      	movs	r2, #2
 800aece:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d137      	bne.n	800af46 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d102      	bne.n	800aeea <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	2200      	movs	r2, #0
 800aee8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	4618      	mov	r0, r3
 800aef0:	f000 f982 	bl	800b1f8 <RTC_ByteToBcd2>
 800aef4:	4603      	mov	r3, r0
 800aef6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	785b      	ldrb	r3, [r3, #1]
 800aefc:	4618      	mov	r0, r3
 800aefe:	f000 f97b 	bl	800b1f8 <RTC_ByteToBcd2>
 800af02:	4603      	mov	r3, r0
 800af04:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800af06:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	789b      	ldrb	r3, [r3, #2]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f000 f973 	bl	800b1f8 <RTC_ByteToBcd2>
 800af12:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800af14:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	78db      	ldrb	r3, [r3, #3]
 800af1c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800af1e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	f893 3020 	ldrb.w	r3, [r3, #32]
 800af28:	4618      	mov	r0, r3
 800af2a:	f000 f965 	bl	800b1f8 <RTC_ByteToBcd2>
 800af2e:	4603      	mov	r3, r0
 800af30:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800af32:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800af3a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800af40:	4313      	orrs	r3, r2
 800af42:	61fb      	str	r3, [r7, #28]
 800af44:	e023      	b.n	800af8e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af50:	2b00      	cmp	r3, #0
 800af52:	d102      	bne.n	800af5a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	2200      	movs	r2, #0
 800af58:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	785b      	ldrb	r3, [r3, #1]
 800af64:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800af66:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800af6c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	78db      	ldrb	r3, [r3, #3]
 800af72:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800af74:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	f893 3020 	ldrb.w	r3, [r3, #32]
 800af7c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800af7e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800af84:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800af8a:	4313      	orrs	r3, r2
 800af8c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800af96:	4313      	orrs	r3, r2
 800af98:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	22ca      	movs	r2, #202	@ 0xca
 800afa0:	625a      	str	r2, [r3, #36]	@ 0x24
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2253      	movs	r2, #83	@ 0x53
 800afa8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afb2:	d148      	bne.n	800b046 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	689a      	ldr	r2, [r3, #8]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800afc2:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	689a      	ldr	r2, [r3, #8]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800afd2:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	68db      	ldr	r3, [r3, #12]
 800afda:	b2da      	uxtb	r2, r3
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800afe4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800afe6:	f7fa f895 	bl	8005114 <HAL_GetTick>
 800afea:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800afec:	e013      	b.n	800b016 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800afee:	f7fa f891 	bl	8005114 <HAL_GetTick>
 800aff2:	4602      	mov	r2, r0
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	1ad3      	subs	r3, r2, r3
 800aff8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800affc:	d90b      	bls.n	800b016 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	22ff      	movs	r2, #255	@ 0xff
 800b004:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2203      	movs	r2, #3
 800b00a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2200      	movs	r2, #0
 800b010:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b012:	2303      	movs	r3, #3
 800b014:	e06a      	b.n	800b0ec <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	f003 0301 	and.w	r3, r3, #1
 800b020:	2b00      	cmp	r3, #0
 800b022:	d0e4      	beq.n	800afee <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	69fa      	ldr	r2, [r7, #28]
 800b02a:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	697a      	ldr	r2, [r7, #20]
 800b032:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	689a      	ldr	r2, [r3, #8]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b042:	609a      	str	r2, [r3, #8]
 800b044:	e047      	b.n	800b0d6 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	689a      	ldr	r2, [r3, #8]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b054:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	689a      	ldr	r2, [r3, #8]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b064:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800b076:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b078:	f7fa f84c 	bl	8005114 <HAL_GetTick>
 800b07c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b07e:	e013      	b.n	800b0a8 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b080:	f7fa f848 	bl	8005114 <HAL_GetTick>
 800b084:	4602      	mov	r2, r0
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	1ad3      	subs	r3, r2, r3
 800b08a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b08e:	d90b      	bls.n	800b0a8 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	22ff      	movs	r2, #255	@ 0xff
 800b096:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2203      	movs	r2, #3
 800b09c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	e021      	b.n	800b0ec <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	f003 0302 	and.w	r3, r3, #2
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d0e4      	beq.n	800b080 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	69fa      	ldr	r2, [r7, #28]
 800b0bc:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	697a      	ldr	r2, [r7, #20]
 800b0c4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	689a      	ldr	r2, [r3, #8]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b0d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	22ff      	movs	r2, #255	@ 0xff
 800b0dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b0ea:	2300      	movs	r3, #0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3724      	adds	r7, #36	@ 0x24
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd90      	pop	{r4, r7, pc}

0800b0f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a0d      	ldr	r2, [pc, #52]	@ (800b13c <HAL_RTC_WaitForSynchro+0x48>)
 800b106:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b108:	f7fa f804 	bl	8005114 <HAL_GetTick>
 800b10c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b10e:	e009      	b.n	800b124 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b110:	f7fa f800 	bl	8005114 <HAL_GetTick>
 800b114:	4602      	mov	r2, r0
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	1ad3      	subs	r3, r2, r3
 800b11a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b11e:	d901      	bls.n	800b124 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800b120:	2303      	movs	r3, #3
 800b122:	e007      	b.n	800b134 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	68db      	ldr	r3, [r3, #12]
 800b12a:	f003 0320 	and.w	r3, r3, #32
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d0ee      	beq.n	800b110 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800b132:	2300      	movs	r3, #0
}
 800b134:	4618      	mov	r0, r3
 800b136:	3710      	adds	r7, #16
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	0001ff5f 	.word	0x0001ff5f

0800b140 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b148:	2300      	movs	r3, #0
 800b14a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b14c:	2300      	movs	r3, #0
 800b14e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d122      	bne.n	800b1a4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	68da      	ldr	r2, [r3, #12]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b16c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b16e:	f7f9 ffd1 	bl	8005114 <HAL_GetTick>
 800b172:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b174:	e00c      	b.n	800b190 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b176:	f7f9 ffcd 	bl	8005114 <HAL_GetTick>
 800b17a:	4602      	mov	r2, r0
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	1ad3      	subs	r3, r2, r3
 800b180:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b184:	d904      	bls.n	800b190 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2204      	movs	r2, #4
 800b18a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800b18c:	2301      	movs	r3, #1
 800b18e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d102      	bne.n	800b1a4 <RTC_EnterInitMode+0x64>
 800b19e:	7bfb      	ldrb	r3, [r7, #15]
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d1e8      	bne.n	800b176 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800b1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b084      	sub	sp, #16
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	68da      	ldr	r2, [r3, #12]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b1c8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	689b      	ldr	r3, [r3, #8]
 800b1d0:	f003 0320 	and.w	r3, r3, #32
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d10a      	bne.n	800b1ee <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f7ff ff8b 	bl	800b0f4 <HAL_RTC_WaitForSynchro>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d004      	beq.n	800b1ee <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2204      	movs	r2, #4
 800b1e8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800b1ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3710      	adds	r7, #16
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b085      	sub	sp, #20
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	4603      	mov	r3, r0
 800b200:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b202:	2300      	movs	r3, #0
 800b204:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800b206:	e005      	b.n	800b214 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	3301      	adds	r3, #1
 800b20c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800b20e:	79fb      	ldrb	r3, [r7, #7]
 800b210:	3b0a      	subs	r3, #10
 800b212:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800b214:	79fb      	ldrb	r3, [r7, #7]
 800b216:	2b09      	cmp	r3, #9
 800b218:	d8f6      	bhi.n	800b208 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	011b      	lsls	r3, r3, #4
 800b220:	b2da      	uxtb	r2, r3
 800b222:	79fb      	ldrb	r3, [r7, #7]
 800b224:	4313      	orrs	r3, r2
 800b226:	b2db      	uxtb	r3, r3
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3714      	adds	r7, #20
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800b234:	b480      	push	{r7}
 800b236:	b087      	sub	sp, #28
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b240:	2300      	movs	r3, #0
 800b242:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	7f1b      	ldrb	r3, [r3, #28]
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d101      	bne.n	800b250 <HAL_RTCEx_SetTimeStamp+0x1c>
 800b24c:	2302      	movs	r3, #2
 800b24e:	e050      	b.n	800b2f2 <HAL_RTCEx_SetTimeStamp+0xbe>
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2201      	movs	r2, #1
 800b254:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2202      	movs	r2, #2
 800b25a:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f022 0206 	bic.w	r2, r2, #6
 800b26a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	430a      	orrs	r2, r1
 800b27a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	689a      	ldr	r2, [r3, #8]
 800b282:	4b1f      	ldr	r3, [pc, #124]	@ (800b300 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800b284:	4013      	ands	r3, r2
 800b286:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800b288:	697a      	ldr	r2, [r7, #20]
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	4313      	orrs	r3, r2
 800b28e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	22ca      	movs	r2, #202	@ 0xca
 800b296:	625a      	str	r2, [r3, #36]	@ 0x24
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2253      	movs	r2, #83	@ 0x53
 800b29e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	697a      	ldr	r2, [r7, #20]
 800b2a6:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	b2da      	uxtb	r2, r3
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800b2b8:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	b2da      	uxtb	r2, r3
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800b2ca:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	689a      	ldr	r2, [r3, #8]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b2da:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	22ff      	movs	r2, #255	@ 0xff
 800b2e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	371c      	adds	r7, #28
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr
 800b2fe:	bf00      	nop
 800b300:	fffff7f7 	.word	0xfffff7f7

0800b304 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b088      	sub	sp, #32
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800b30c:	2300      	movs	r3, #0
 800b30e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800b310:	2300      	movs	r3, #0
 800b312:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800b314:	2300      	movs	r3, #0
 800b316:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d101      	bne.n	800b322 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800b31e:	2301      	movs	r3, #1
 800b320:	e156      	b.n	800b5d0 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d106      	bne.n	800b33c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f7f9 f9ae 	bl	8004698 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2202      	movs	r2, #2
 800b340:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 f95b 	bl	800b600 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	2b02      	cmp	r3, #2
 800b350:	d00c      	beq.n	800b36c <HAL_SAI_Init+0x68>
 800b352:	2b02      	cmp	r3, #2
 800b354:	d80d      	bhi.n	800b372 <HAL_SAI_Init+0x6e>
 800b356:	2b00      	cmp	r3, #0
 800b358:	d002      	beq.n	800b360 <HAL_SAI_Init+0x5c>
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d003      	beq.n	800b366 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800b35e:	e008      	b.n	800b372 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800b360:	2300      	movs	r3, #0
 800b362:	61fb      	str	r3, [r7, #28]
      break;
 800b364:	e006      	b.n	800b374 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800b366:	2310      	movs	r3, #16
 800b368:	61fb      	str	r3, [r7, #28]
      break;
 800b36a:	e003      	b.n	800b374 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800b36c:	2320      	movs	r3, #32
 800b36e:	61fb      	str	r3, [r7, #28]
      break;
 800b370:	e000      	b.n	800b374 <HAL_SAI_Init+0x70>
      break;
 800b372:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	2b03      	cmp	r3, #3
 800b37a:	d81e      	bhi.n	800b3ba <HAL_SAI_Init+0xb6>
 800b37c:	a201      	add	r2, pc, #4	@ (adr r2, 800b384 <HAL_SAI_Init+0x80>)
 800b37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b382:	bf00      	nop
 800b384:	0800b395 	.word	0x0800b395
 800b388:	0800b39b 	.word	0x0800b39b
 800b38c:	0800b3a3 	.word	0x0800b3a3
 800b390:	0800b3ab 	.word	0x0800b3ab
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800b394:	2300      	movs	r3, #0
 800b396:	617b      	str	r3, [r7, #20]
    }
    break;
 800b398:	e010      	b.n	800b3bc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b39a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b39e:	617b      	str	r3, [r7, #20]
    }
    break;
 800b3a0:	e00c      	b.n	800b3bc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b3a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b3a6:	617b      	str	r3, [r7, #20]
    }
    break;
 800b3a8:	e008      	b.n	800b3bc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b3aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b3ae:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	f043 0301 	orr.w	r3, r3, #1
 800b3b6:	61fb      	str	r3, [r7, #28]
    }
    break;
 800b3b8:	e000      	b.n	800b3bc <HAL_SAI_Init+0xb8>
    default:
      break;
 800b3ba:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a85      	ldr	r2, [pc, #532]	@ (800b5d8 <HAL_SAI_Init+0x2d4>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d004      	beq.n	800b3d0 <HAL_SAI_Init+0xcc>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a84      	ldr	r2, [pc, #528]	@ (800b5dc <HAL_SAI_Init+0x2d8>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d103      	bne.n	800b3d8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800b3d0:	4a83      	ldr	r2, [pc, #524]	@ (800b5e0 <HAL_SAI_Init+0x2dc>)
 800b3d2:	69fb      	ldr	r3, [r7, #28]
 800b3d4:	6013      	str	r3, [r2, #0]
 800b3d6:	e002      	b.n	800b3de <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800b3d8:	4a82      	ldr	r2, [pc, #520]	@ (800b5e4 <HAL_SAI_Init+0x2e0>)
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	69db      	ldr	r3, [r3, #28]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d04c      	beq.n	800b480 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4a7a      	ldr	r2, [pc, #488]	@ (800b5d8 <HAL_SAI_Init+0x2d4>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d004      	beq.n	800b3fe <HAL_SAI_Init+0xfa>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a78      	ldr	r2, [pc, #480]	@ (800b5dc <HAL_SAI_Init+0x2d8>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d104      	bne.n	800b408 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800b3fe:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b402:	f7ff fa6d 	bl	800a8e0 <HAL_RCCEx_GetPeriphCLKFreq>
 800b406:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a76      	ldr	r2, [pc, #472]	@ (800b5e8 <HAL_SAI_Init+0x2e4>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d004      	beq.n	800b41c <HAL_SAI_Init+0x118>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a75      	ldr	r2, [pc, #468]	@ (800b5ec <HAL_SAI_Init+0x2e8>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d104      	bne.n	800b426 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800b41c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800b420:	f7ff fa5e 	bl	800a8e0 <HAL_RCCEx_GetPeriphCLKFreq>
 800b424:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800b426:	693a      	ldr	r2, [r7, #16]
 800b428:	4613      	mov	r3, r2
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	4413      	add	r3, r2
 800b42e:	005b      	lsls	r3, r3, #1
 800b430:	461a      	mov	r2, r3
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	69db      	ldr	r3, [r3, #28]
 800b436:	025b      	lsls	r3, r3, #9
 800b438:	fbb2 f3f3 	udiv	r3, r2, r3
 800b43c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	4a6b      	ldr	r2, [pc, #428]	@ (800b5f0 <HAL_SAI_Init+0x2ec>)
 800b442:	fba2 2303 	umull	r2, r3, r2, r3
 800b446:	08da      	lsrs	r2, r3, #3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800b44c:	68f9      	ldr	r1, [r7, #12]
 800b44e:	4b68      	ldr	r3, [pc, #416]	@ (800b5f0 <HAL_SAI_Init+0x2ec>)
 800b450:	fba3 2301 	umull	r2, r3, r3, r1
 800b454:	08da      	lsrs	r2, r3, #3
 800b456:	4613      	mov	r3, r2
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	4413      	add	r3, r2
 800b45c:	005b      	lsls	r3, r3, #1
 800b45e:	1aca      	subs	r2, r1, r3
 800b460:	2a08      	cmp	r2, #8
 800b462:	d904      	bls.n	800b46e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6a1b      	ldr	r3, [r3, #32]
 800b468:	1c5a      	adds	r2, r3, #1
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b472:	2b04      	cmp	r3, #4
 800b474:	d104      	bne.n	800b480 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6a1b      	ldr	r3, [r3, #32]
 800b47a:	085a      	lsrs	r2, r3, #1
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d003      	beq.n	800b490 <HAL_SAI_Init+0x18c>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	2b02      	cmp	r3, #2
 800b48e:	d109      	bne.n	800b4a4 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b494:	2b01      	cmp	r3, #1
 800b496:	d101      	bne.n	800b49c <HAL_SAI_Init+0x198>
 800b498:	2300      	movs	r3, #0
 800b49a:	e001      	b.n	800b4a0 <HAL_SAI_Init+0x19c>
 800b49c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b4a0:	61bb      	str	r3, [r7, #24]
 800b4a2:	e008      	b.n	800b4b6 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d102      	bne.n	800b4b2 <HAL_SAI_Init+0x1ae>
 800b4ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b4b0:	e000      	b.n	800b4b4 <HAL_SAI_Init+0x1b0>
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	6819      	ldr	r1, [r3, #0]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	4b4c      	ldr	r3, [pc, #304]	@ (800b5f4 <HAL_SAI_Init+0x2f0>)
 800b4c2:	400b      	ands	r3, r1
 800b4c4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	6819      	ldr	r1, [r3, #0]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	685a      	ldr	r2, [r3, #4]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4d4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b4da:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4e0:	431a      	orrs	r2, r3
 800b4e2:	69bb      	ldr	r3, [r7, #24]
 800b4e4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800b4ee:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	691b      	ldr	r3, [r3, #16]
 800b4f4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b4fa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6a1b      	ldr	r3, [r3, #32]
 800b500:	051b      	lsls	r3, r3, #20
 800b502:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	430a      	orrs	r2, r1
 800b50a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	6859      	ldr	r1, [r3, #4]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	4b38      	ldr	r3, [pc, #224]	@ (800b5f8 <HAL_SAI_Init+0x2f4>)
 800b518:	400b      	ands	r3, r1
 800b51a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	6859      	ldr	r1, [r3, #4]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	699a      	ldr	r2, [r3, #24]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b52a:	431a      	orrs	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b530:	431a      	orrs	r2, r3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	430a      	orrs	r2, r1
 800b538:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	6899      	ldr	r1, [r3, #8]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	4b2d      	ldr	r3, [pc, #180]	@ (800b5fc <HAL_SAI_Init+0x2f8>)
 800b546:	400b      	ands	r3, r1
 800b548:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	6899      	ldr	r1, [r3, #8]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b554:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800b55a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800b560:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800b566:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b56c:	3b01      	subs	r3, #1
 800b56e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b570:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	430a      	orrs	r2, r1
 800b578:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	68d9      	ldr	r1, [r3, #12]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800b588:	400b      	ands	r3, r1
 800b58a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	68d9      	ldr	r1, [r3, #12]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b59a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b5a0:	041b      	lsls	r3, r3, #16
 800b5a2:	431a      	orrs	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5a8:	3b01      	subs	r3, #1
 800b5aa:	021b      	lsls	r3, r3, #8
 800b5ac:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	430a      	orrs	r2, r1
 800b5b4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800b5ce:	2300      	movs	r3, #0
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3720      	adds	r7, #32
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	40015804 	.word	0x40015804
 800b5dc:	40015824 	.word	0x40015824
 800b5e0:	40015800 	.word	0x40015800
 800b5e4:	40015c00 	.word	0x40015c00
 800b5e8:	40015c04 	.word	0x40015c04
 800b5ec:	40015c24 	.word	0x40015c24
 800b5f0:	cccccccd 	.word	0xcccccccd
 800b5f4:	ff05c010 	.word	0xff05c010
 800b5f8:	ffff1ff0 	.word	0xffff1ff0
 800b5fc:	fff88000 	.word	0xfff88000

0800b600 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800b608:	4b17      	ldr	r3, [pc, #92]	@ (800b668 <SAI_Disable+0x68>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4a17      	ldr	r2, [pc, #92]	@ (800b66c <SAI_Disable+0x6c>)
 800b60e:	fba2 2303 	umull	r2, r3, r2, r3
 800b612:	0b1b      	lsrs	r3, r3, #12
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800b618:	2300      	movs	r3, #0
 800b61a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b62a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	1e5a      	subs	r2, r3, #1
 800b630:	60fa      	str	r2, [r7, #12]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d10a      	bne.n	800b64c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b63c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800b646:	2303      	movs	r3, #3
 800b648:	72fb      	strb	r3, [r7, #11]
      break;
 800b64a:	e006      	b.n	800b65a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b656:	2b00      	cmp	r3, #0
 800b658:	d1e8      	bne.n	800b62c <SAI_Disable+0x2c>

  return status;
 800b65a:	7afb      	ldrb	r3, [r7, #11]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3714      	adds	r7, #20
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr
 800b668:	2000001c 	.word	0x2000001c
 800b66c:	95cbec1b 	.word	0x95cbec1b

0800b670 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d101      	bne.n	800b682 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b67e:	2301      	movs	r3, #1
 800b680:	e022      	b.n	800b6c8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d105      	bne.n	800b69a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f7f8 fc19 	bl	8003ecc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2203      	movs	r2, #3
 800b69e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 f814 	bl	800b6d0 <HAL_SD_InitCard>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d001      	beq.n	800b6b2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e00a      	b.n	800b6c8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b6c6:	2300      	movs	r3, #0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3708      	adds	r7, #8
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b6d0:	b5b0      	push	{r4, r5, r7, lr}
 800b6d2:	b08e      	sub	sp, #56	@ 0x38
 800b6d4:	af04      	add	r7, sp, #16
 800b6d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800b6ec:	2376      	movs	r3, #118	@ 0x76
 800b6ee:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681d      	ldr	r5, [r3, #0]
 800b6f4:	466c      	mov	r4, sp
 800b6f6:	f107 0318 	add.w	r3, r7, #24
 800b6fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b6fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b702:	f107 030c 	add.w	r3, r7, #12
 800b706:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b708:	4628      	mov	r0, r5
 800b70a:	f003 fe05 	bl	800f318 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	685a      	ldr	r2, [r3, #4]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b71c:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4618      	mov	r0, r3
 800b724:	f003 fe42 	bl	800f3ac <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	685a      	ldr	r2, [r3, #4]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b736:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800b738:	2002      	movs	r0, #2
 800b73a:	f7f9 fcf7 	bl	800512c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 fe68 	bl	800c414 <SD_PowerON>
 800b744:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800b746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00b      	beq.n	800b764 <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2201      	movs	r2, #1
 800b750:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b75a:	431a      	orrs	r2, r3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b760:	2301      	movs	r3, #1
 800b762:	e02e      	b.n	800b7c2 <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 fd87 	bl	800c278 <SD_InitCard>
 800b76a:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800b76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00b      	beq.n	800b78a <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2201      	movs	r2, #1
 800b776:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b780:	431a      	orrs	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e01b      	b.n	800b7c2 <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b792:	4618      	mov	r0, r3
 800b794:	f003 fe9c 	bl	800f4d0 <SDMMC_CmdBlockLength>
 800b798:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800b79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d00f      	beq.n	800b7c0 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a09      	ldr	r2, [pc, #36]	@ (800b7cc <HAL_SD_InitCard+0xfc>)
 800b7a6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ae:	431a      	orrs	r2, r3
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e000      	b.n	800b7c2 <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800b7c0:	2300      	movs	r3, #0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3728      	adds	r7, #40	@ 0x28
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bdb0      	pop	{r4, r5, r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	004005ff 	.word	0x004005ff

0800b7d0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b092      	sub	sp, #72	@ 0x48
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
 800b7dc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b7de:	f7f9 fc99 	bl	8005114 <HAL_GetTick>
 800b7e2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d107      	bne.n	800b802 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7f6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b7fe:	2301      	movs	r3, #1
 800b800:	e1bd      	b.n	800bb7e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	f040 81b0 	bne.w	800bb70 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2200      	movs	r2, #0
 800b814:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b816:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	441a      	add	r2, r3
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b820:	429a      	cmp	r2, r3
 800b822:	d907      	bls.n	800b834 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b828:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800b830:	2301      	movs	r3, #1
 800b832:	e1a4      	b.n	800bb7e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2203      	movs	r2, #3
 800b838:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2200      	movs	r2, #0
 800b842:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d002      	beq.n	800b852 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800b84c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b84e:	025b      	lsls	r3, r3, #9
 800b850:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b852:	f04f 33ff 	mov.w	r3, #4294967295
 800b856:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	025b      	lsls	r3, r3, #9
 800b85c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b85e:	2390      	movs	r3, #144	@ 0x90
 800b860:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b862:	2302      	movs	r3, #2
 800b864:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b866:	2300      	movs	r3, #0
 800b868:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800b86a:	2301      	movs	r3, #1
 800b86c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f107 0214 	add.w	r2, r7, #20
 800b876:	4611      	mov	r1, r2
 800b878:	4618      	mov	r0, r3
 800b87a:	f003 fdfd 	bl	800f478 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	2b01      	cmp	r3, #1
 800b882:	d90a      	bls.n	800b89a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2202      	movs	r2, #2
 800b888:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b890:	4618      	mov	r0, r3
 800b892:	f003 fe61 	bl	800f558 <SDMMC_CmdReadMultiBlock>
 800b896:	6478      	str	r0, [r7, #68]	@ 0x44
 800b898:	e009      	b.n	800b8ae <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2201      	movs	r2, #1
 800b89e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f003 fe34 	bl	800f514 <SDMMC_CmdReadSingleBlock>
 800b8ac:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d012      	beq.n	800b8da <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a7a      	ldr	r2, [pc, #488]	@ (800baa4 <HAL_SD_ReadBlocks+0x2d4>)
 800b8ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b8c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8c2:	431a      	orrs	r2, r3
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e151      	b.n	800bb7e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b8de:	e061      	b.n	800b9a4 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d03c      	beq.n	800b968 <HAL_SD_ReadBlocks+0x198>
 800b8ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d039      	beq.n	800b968 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b8f8:	e033      	b.n	800b962 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4618      	mov	r0, r3
 800b900:	f003 fd36 	bl	800f370 <SDMMC_ReadFIFO>
 800b904:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b908:	b2da      	uxtb	r2, r3
 800b90a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b90c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b90e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b910:	3301      	adds	r3, #1
 800b912:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b916:	3b01      	subs	r3, #1
 800b918:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b91a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b91c:	0a1b      	lsrs	r3, r3, #8
 800b91e:	b2da      	uxtb	r2, r3
 800b920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b922:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b926:	3301      	adds	r3, #1
 800b928:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b92a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b92c:	3b01      	subs	r3, #1
 800b92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b932:	0c1b      	lsrs	r3, r3, #16
 800b934:	b2da      	uxtb	r2, r3
 800b936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b938:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b93a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b93c:	3301      	adds	r3, #1
 800b93e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b942:	3b01      	subs	r3, #1
 800b944:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b948:	0e1b      	lsrs	r3, r3, #24
 800b94a:	b2da      	uxtb	r2, r3
 800b94c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b94e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b952:	3301      	adds	r3, #1
 800b954:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b958:	3b01      	subs	r3, #1
 800b95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800b95c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b95e:	3301      	adds	r3, #1
 800b960:	643b      	str	r3, [r7, #64]	@ 0x40
 800b962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b964:	2b07      	cmp	r3, #7
 800b966:	d9c8      	bls.n	800b8fa <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b968:	f7f9 fbd4 	bl	8005114 <HAL_GetTick>
 800b96c:	4602      	mov	r2, r0
 800b96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b970:	1ad3      	subs	r3, r2, r3
 800b972:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b974:	429a      	cmp	r2, r3
 800b976:	d902      	bls.n	800b97e <HAL_SD_ReadBlocks+0x1ae>
 800b978:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d112      	bne.n	800b9a4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4a48      	ldr	r2, [pc, #288]	@ (800baa4 <HAL_SD_ReadBlocks+0x2d4>)
 800b984:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b98a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2201      	movs	r2, #1
 800b996:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2200      	movs	r2, #0
 800b99e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	e0ec      	b.n	800bb7e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9aa:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d096      	beq.n	800b8e0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d022      	beq.n	800ba06 <HAL_SD_ReadBlocks+0x236>
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d91f      	bls.n	800ba06 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9ca:	2b03      	cmp	r3, #3
 800b9cc:	d01b      	beq.n	800ba06 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f003 fe26 	bl	800f624 <SDMMC_CmdStopTransfer>
 800b9d8:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b9da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d012      	beq.n	800ba06 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a2f      	ldr	r2, [pc, #188]	@ (800baa4 <HAL_SD_ReadBlocks+0x2d4>)
 800b9e6:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b9ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9ee:	431a      	orrs	r2, r3
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800ba02:	2301      	movs	r3, #1
 800ba04:	e0bb      	b.n	800bb7e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba0c:	f003 0308 	and.w	r3, r3, #8
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d012      	beq.n	800ba3a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4a22      	ldr	r2, [pc, #136]	@ (800baa4 <HAL_SD_ReadBlocks+0x2d4>)
 800ba1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba20:	f043 0208 	orr.w	r2, r3, #8
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2200      	movs	r2, #0
 800ba34:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ba36:	2301      	movs	r3, #1
 800ba38:	e0a1      	b.n	800bb7e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba40:	f003 0302 	and.w	r3, r3, #2
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d012      	beq.n	800ba6e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a15      	ldr	r2, [pc, #84]	@ (800baa4 <HAL_SD_ReadBlocks+0x2d4>)
 800ba4e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba54:	f043 0202 	orr.w	r2, r3, #2
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2200      	movs	r2, #0
 800ba68:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	e087      	b.n	800bb7e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba74:	f003 0320 	and.w	r3, r3, #32
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d064      	beq.n	800bb46 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a08      	ldr	r2, [pc, #32]	@ (800baa4 <HAL_SD_ReadBlocks+0x2d4>)
 800ba82:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba88:	f043 0220 	orr.w	r2, r3, #32
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2201      	movs	r2, #1
 800ba94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e06d      	b.n	800bb7e <HAL_SD_ReadBlocks+0x3ae>
 800baa2:	bf00      	nop
 800baa4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4618      	mov	r0, r3
 800baae:	f003 fc5f 	bl	800f370 <SDMMC_ReadFIFO>
 800bab2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800bab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bab6:	b2da      	uxtb	r2, r3
 800bab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baba:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800babc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800babe:	3301      	adds	r3, #1
 800bac0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800bac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bac4:	3b01      	subs	r3, #1
 800bac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800bac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baca:	0a1b      	lsrs	r3, r3, #8
 800bacc:	b2da      	uxtb	r2, r3
 800bace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bad0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800bad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bad4:	3301      	adds	r3, #1
 800bad6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800bad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bada:	3b01      	subs	r3, #1
 800badc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800bade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bae0:	0c1b      	lsrs	r3, r3, #16
 800bae2:	b2da      	uxtb	r2, r3
 800bae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bae6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800bae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baea:	3301      	adds	r3, #1
 800baec:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800baee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baf0:	3b01      	subs	r3, #1
 800baf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800baf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf6:	0e1b      	lsrs	r3, r3, #24
 800baf8:	b2da      	uxtb	r2, r3
 800bafa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bafc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800bafe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb00:	3301      	adds	r3, #1
 800bb02:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800bb04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb06:	3b01      	subs	r3, #1
 800bb08:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800bb0a:	f7f9 fb03 	bl	8005114 <HAL_GetTick>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb12:	1ad3      	subs	r3, r2, r3
 800bb14:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d902      	bls.n	800bb20 <HAL_SD_ReadBlocks+0x350>
 800bb1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d112      	bne.n	800bb46 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a18      	ldr	r2, [pc, #96]	@ (800bb88 <HAL_SD_ReadBlocks+0x3b8>)
 800bb26:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb2c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2201      	movs	r2, #1
 800bb38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800bb42:	2301      	movs	r3, #1
 800bb44:	e01b      	b.n	800bb7e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d002      	beq.n	800bb5a <HAL_SD_ReadBlocks+0x38a>
 800bb54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d1a6      	bne.n	800baa8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f240 523a 	movw	r2, #1338	@ 0x53a
 800bb62:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2201      	movs	r2, #1
 800bb68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	e006      	b.n	800bb7e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb74:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800bb7c:	2301      	movs	r3, #1
  }
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3748      	adds	r7, #72	@ 0x48
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	004005ff 	.word	0x004005ff

0800bb8c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b092      	sub	sp, #72	@ 0x48
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	607a      	str	r2, [r7, #4]
 800bb98:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bb9a:	f7f9 fabb 	bl	8005114 <HAL_GetTick>
 800bb9e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d107      	bne.n	800bbbe <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbb2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	e165      	b.n	800be8a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	f040 8158 	bne.w	800be7c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bbd2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	441a      	add	r2, r3
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d907      	bls.n	800bbf0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbe4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800bbec:	2301      	movs	r3, #1
 800bbee:	e14c      	b.n	800be8a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2203      	movs	r2, #3
 800bbf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d002      	beq.n	800bc0e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800bc08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc0a:	025b      	lsls	r3, r3, #9
 800bc0c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bc0e:	f04f 33ff 	mov.w	r3, #4294967295
 800bc12:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	025b      	lsls	r3, r3, #9
 800bc18:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bc1a:	2390      	movs	r3, #144	@ 0x90
 800bc1c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bc22:	2300      	movs	r3, #0
 800bc24:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800bc26:	2301      	movs	r3, #1
 800bc28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f107 0218 	add.w	r2, r7, #24
 800bc32:	4611      	mov	r1, r2
 800bc34:	4618      	mov	r0, r3
 800bc36:	f003 fc1f 	bl	800f478 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d90a      	bls.n	800bc56 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2220      	movs	r2, #32
 800bc44:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f003 fcc7 	bl	800f5e0 <SDMMC_CmdWriteMultiBlock>
 800bc52:	6478      	str	r0, [r7, #68]	@ 0x44
 800bc54:	e009      	b.n	800bc6a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2210      	movs	r2, #16
 800bc5a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bc62:	4618      	mov	r0, r3
 800bc64:	f003 fc9a 	bl	800f59c <SDMMC_CmdWriteSingleBlock>
 800bc68:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d012      	beq.n	800bc96 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a87      	ldr	r2, [pc, #540]	@ (800be94 <HAL_SD_WriteBlocks+0x308>)
 800bc76:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc7e:	431a      	orrs	r2, r3
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800bc92:	2301      	movs	r3, #1
 800bc94:	e0f9      	b.n	800be8a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bc9a:	e065      	b.n	800bd68 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bca2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d040      	beq.n	800bd2c <HAL_SD_WriteBlocks+0x1a0>
 800bcaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d03d      	beq.n	800bd2c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	643b      	str	r3, [r7, #64]	@ 0x40
 800bcb4:	e037      	b.n	800bd26 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800bcb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bcbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800bcc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800bcc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	021a      	lsls	r2, r3, #8
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bcd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800bcda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800bce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	041a      	lsls	r2, r3, #16
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	4313      	orrs	r3, r2
 800bcea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bcec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcee:	3301      	adds	r3, #1
 800bcf0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800bcf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcf4:	3b01      	subs	r3, #1
 800bcf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800bcf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	061a      	lsls	r2, r3, #24
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	4313      	orrs	r3, r2
 800bd02:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bd04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd06:	3301      	adds	r3, #1
 800bd08:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800bd0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd0c:	3b01      	subs	r3, #1
 800bd0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f107 0214 	add.w	r2, r7, #20
 800bd18:	4611      	mov	r1, r2
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f003 fb35 	bl	800f38a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800bd20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd22:	3301      	adds	r3, #1
 800bd24:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd28:	2b07      	cmp	r3, #7
 800bd2a:	d9c4      	bls.n	800bcb6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800bd2c:	f7f9 f9f2 	bl	8005114 <HAL_GetTick>
 800bd30:	4602      	mov	r2, r0
 800bd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd34:	1ad3      	subs	r3, r2, r3
 800bd36:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d902      	bls.n	800bd42 <HAL_SD_WriteBlocks+0x1b6>
 800bd3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d112      	bne.n	800bd68 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4a53      	ldr	r2, [pc, #332]	@ (800be94 <HAL_SD_WriteBlocks+0x308>)
 800bd48:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd50:	431a      	orrs	r2, r3
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2200      	movs	r2, #0
 800bd62:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800bd64:	2303      	movs	r3, #3
 800bd66:	e090      	b.n	800be8a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd6e:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d092      	beq.n	800bc9c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d022      	beq.n	800bdca <HAL_SD_WriteBlocks+0x23e>
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d91f      	bls.n	800bdca <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd8e:	2b03      	cmp	r3, #3
 800bd90:	d01b      	beq.n	800bdca <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4618      	mov	r0, r3
 800bd98:	f003 fc44 	bl	800f624 <SDMMC_CmdStopTransfer>
 800bd9c:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800bd9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d012      	beq.n	800bdca <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4a3a      	ldr	r2, [pc, #232]	@ (800be94 <HAL_SD_WriteBlocks+0x308>)
 800bdaa:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bdb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdb2:	431a      	orrs	r2, r3
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e05f      	b.n	800be8a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdd0:	f003 0308 	and.w	r3, r3, #8
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d012      	beq.n	800bdfe <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a2d      	ldr	r2, [pc, #180]	@ (800be94 <HAL_SD_WriteBlocks+0x308>)
 800bdde:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bde4:	f043 0208 	orr.w	r2, r3, #8
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e045      	b.n	800be8a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be04:	f003 0302 	and.w	r3, r3, #2
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d012      	beq.n	800be32 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a20      	ldr	r2, [pc, #128]	@ (800be94 <HAL_SD_WriteBlocks+0x308>)
 800be12:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be18:	f043 0202 	orr.w	r2, r3, #2
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2201      	movs	r2, #1
 800be24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2200      	movs	r2, #0
 800be2c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800be2e:	2301      	movs	r3, #1
 800be30:	e02b      	b.n	800be8a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be38:	f003 0310 	and.w	r3, r3, #16
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d012      	beq.n	800be66 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4a13      	ldr	r2, [pc, #76]	@ (800be94 <HAL_SD_WriteBlocks+0x308>)
 800be46:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be4c:	f043 0210 	orr.w	r2, r3, #16
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2201      	movs	r2, #1
 800be58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2200      	movs	r2, #0
 800be60:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800be62:	2301      	movs	r3, #1
 800be64:	e011      	b.n	800be8a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800be6e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2201      	movs	r2, #1
 800be74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800be78:	2300      	movs	r3, #0
 800be7a:	e006      	b.n	800be8a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be80:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800be88:	2301      	movs	r3, #1
  }
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3748      	adds	r7, #72	@ 0x48
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	004005ff 	.word	0x004005ff

0800be98 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bea6:	0f9b      	lsrs	r3, r3, #30
 800bea8:	b2da      	uxtb	r2, r3
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800beb2:	0e9b      	lsrs	r3, r3, #26
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	f003 030f 	and.w	r3, r3, #15
 800beba:	b2da      	uxtb	r2, r3
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bec4:	0e1b      	lsrs	r3, r3, #24
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	f003 0303 	and.w	r3, r3, #3
 800becc:	b2da      	uxtb	r2, r3
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bed6:	0c1b      	lsrs	r3, r3, #16
 800bed8:	b2da      	uxtb	r2, r3
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bee2:	0a1b      	lsrs	r3, r3, #8
 800bee4:	b2da      	uxtb	r2, r3
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800beee:	b2da      	uxtb	r2, r3
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bef8:	0d1b      	lsrs	r3, r3, #20
 800befa:	b29a      	uxth	r2, r3
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf04:	0c1b      	lsrs	r3, r3, #16
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	f003 030f 	and.w	r3, r3, #15
 800bf0c:	b2da      	uxtb	r2, r3
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf16:	0bdb      	lsrs	r3, r3, #15
 800bf18:	b2db      	uxtb	r3, r3
 800bf1a:	f003 0301 	and.w	r3, r3, #1
 800bf1e:	b2da      	uxtb	r2, r3
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf28:	0b9b      	lsrs	r3, r3, #14
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	f003 0301 	and.w	r3, r3, #1
 800bf30:	b2da      	uxtb	r2, r3
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf3a:	0b5b      	lsrs	r3, r3, #13
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	f003 0301 	and.w	r3, r3, #1
 800bf42:	b2da      	uxtb	r2, r3
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf4c:	0b1b      	lsrs	r3, r3, #12
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	f003 0301 	and.w	r3, r3, #1
 800bf54:	b2da      	uxtb	r2, r3
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d163      	bne.n	800c030 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf6c:	009a      	lsls	r2, r3, #2
 800bf6e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800bf72:	4013      	ands	r3, r2
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800bf78:	0f92      	lsrs	r2, r2, #30
 800bf7a:	431a      	orrs	r2, r3
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf84:	0edb      	lsrs	r3, r3, #27
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	f003 0307 	and.w	r3, r3, #7
 800bf8c:	b2da      	uxtb	r2, r3
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf96:	0e1b      	lsrs	r3, r3, #24
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	f003 0307 	and.w	r3, r3, #7
 800bf9e:	b2da      	uxtb	r2, r3
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfa8:	0d5b      	lsrs	r3, r3, #21
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	f003 0307 	and.w	r3, r3, #7
 800bfb0:	b2da      	uxtb	r2, r3
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfba:	0c9b      	lsrs	r3, r3, #18
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	f003 0307 	and.w	r3, r3, #7
 800bfc2:	b2da      	uxtb	r2, r3
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfcc:	0bdb      	lsrs	r3, r3, #15
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	f003 0307 	and.w	r3, r3, #7
 800bfd4:	b2da      	uxtb	r2, r3
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	691b      	ldr	r3, [r3, #16]
 800bfde:	1c5a      	adds	r2, r3, #1
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	7e1b      	ldrb	r3, [r3, #24]
 800bfe8:	b2db      	uxtb	r3, r3
 800bfea:	f003 0307 	and.w	r3, r3, #7
 800bfee:	3302      	adds	r3, #2
 800bff0:	2201      	movs	r2, #1
 800bff2:	fa02 f303 	lsl.w	r3, r2, r3
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800bffa:	fb03 f202 	mul.w	r2, r3, r2
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	7a1b      	ldrb	r3, [r3, #8]
 800c006:	b2db      	uxtb	r3, r3
 800c008:	f003 030f 	and.w	r3, r3, #15
 800c00c:	2201      	movs	r2, #1
 800c00e:	409a      	lsls	r2, r3
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800c01c:	0a52      	lsrs	r2, r2, #9
 800c01e:	fb03 f202 	mul.w	r2, r3, r2
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c02c:	661a      	str	r2, [r3, #96]	@ 0x60
 800c02e:	e031      	b.n	800c094 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c034:	2b01      	cmp	r3, #1
 800c036:	d11d      	bne.n	800c074 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c03c:	041b      	lsls	r3, r3, #16
 800c03e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c046:	0c1b      	lsrs	r3, r3, #16
 800c048:	431a      	orrs	r2, r3
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	3301      	adds	r3, #1
 800c054:	029a      	lsls	r2, r3, #10
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c068:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	661a      	str	r2, [r3, #96]	@ 0x60
 800c072:	e00f      	b.n	800c094 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4a58      	ldr	r2, [pc, #352]	@ (800c1dc <HAL_SD_GetCardCSD+0x344>)
 800c07a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c080:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2201      	movs	r2, #1
 800c08c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c090:	2301      	movs	r3, #1
 800c092:	e09d      	b.n	800c1d0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c098:	0b9b      	lsrs	r3, r3, #14
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	f003 0301 	and.w	r3, r3, #1
 800c0a0:	b2da      	uxtb	r2, r3
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0aa:	09db      	lsrs	r3, r3, #7
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0b2:	b2da      	uxtb	r2, r3
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0bc:	b2db      	uxtb	r3, r3
 800c0be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0c2:	b2da      	uxtb	r2, r3
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0cc:	0fdb      	lsrs	r3, r3, #31
 800c0ce:	b2da      	uxtb	r2, r3
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0d8:	0f5b      	lsrs	r3, r3, #29
 800c0da:	b2db      	uxtb	r3, r3
 800c0dc:	f003 0303 	and.w	r3, r3, #3
 800c0e0:	b2da      	uxtb	r2, r3
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0ea:	0e9b      	lsrs	r3, r3, #26
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	f003 0307 	and.w	r3, r3, #7
 800c0f2:	b2da      	uxtb	r2, r3
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0fc:	0d9b      	lsrs	r3, r3, #22
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	f003 030f 	and.w	r3, r3, #15
 800c104:	b2da      	uxtb	r2, r3
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c10e:	0d5b      	lsrs	r3, r3, #21
 800c110:	b2db      	uxtb	r3, r3
 800c112:	f003 0301 	and.w	r3, r3, #1
 800c116:	b2da      	uxtb	r2, r3
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	2200      	movs	r2, #0
 800c122:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c12a:	0c1b      	lsrs	r3, r3, #16
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	f003 0301 	and.w	r3, r3, #1
 800c132:	b2da      	uxtb	r2, r3
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c13e:	0bdb      	lsrs	r3, r3, #15
 800c140:	b2db      	uxtb	r3, r3
 800c142:	f003 0301 	and.w	r3, r3, #1
 800c146:	b2da      	uxtb	r2, r3
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c152:	0b9b      	lsrs	r3, r3, #14
 800c154:	b2db      	uxtb	r3, r3
 800c156:	f003 0301 	and.w	r3, r3, #1
 800c15a:	b2da      	uxtb	r2, r3
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c166:	0b5b      	lsrs	r3, r3, #13
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	f003 0301 	and.w	r3, r3, #1
 800c16e:	b2da      	uxtb	r2, r3
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c17a:	0b1b      	lsrs	r3, r3, #12
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	f003 0301 	and.w	r3, r3, #1
 800c182:	b2da      	uxtb	r2, r3
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c18e:	0a9b      	lsrs	r3, r3, #10
 800c190:	b2db      	uxtb	r3, r3
 800c192:	f003 0303 	and.w	r3, r3, #3
 800c196:	b2da      	uxtb	r2, r3
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1a2:	0a1b      	lsrs	r3, r3, #8
 800c1a4:	b2db      	uxtb	r3, r3
 800c1a6:	f003 0303 	and.w	r3, r3, #3
 800c1aa:	b2da      	uxtb	r2, r3
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1b6:	085b      	lsrs	r3, r3, #1
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1be:	b2da      	uxtb	r2, r3
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800c1ce:	2300      	movs	r3, #0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	370c      	adds	r7, #12
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr
 800c1dc:	004005ff 	.word	0x004005ff

0800c1e0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c22a:	2300      	movs	r3, #0
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b086      	sub	sp, #24
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c240:	2300      	movs	r3, #0
 800c242:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c244:	f107 030c 	add.w	r3, r7, #12
 800c248:	4619      	mov	r1, r3
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 f970 	bl	800c530 <SD_SendStatus>
 800c250:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d005      	beq.n	800c264 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	431a      	orrs	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	0a5b      	lsrs	r3, r3, #9
 800c268:	f003 030f 	and.w	r3, r3, #15
 800c26c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c26e:	693b      	ldr	r3, [r7, #16]
}
 800c270:	4618      	mov	r0, r3
 800c272:	3718      	adds	r7, #24
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c278:	b5b0      	push	{r4, r5, r7, lr}
 800c27a:	b094      	sub	sp, #80	@ 0x50
 800c27c:	af04      	add	r7, sp, #16
 800c27e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c280:	2301      	movs	r3, #1
 800c282:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4618      	mov	r0, r3
 800c28a:	f003 f89d 	bl	800f3c8 <SDMMC_GetPowerState>
 800c28e:	4603      	mov	r3, r0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d102      	bne.n	800c29a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c294:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800c298:	e0b8      	b.n	800c40c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c29e:	2b03      	cmp	r3, #3
 800c2a0:	d02f      	beq.n	800c302 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f003 fa84 	bl	800f7b4 <SDMMC_CmdSendCID>
 800c2ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c2ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d001      	beq.n	800c2b8 <SD_InitCard+0x40>
    {
      return errorstate;
 800c2b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2b6:	e0a9      	b.n	800c40c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2100      	movs	r1, #0
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f003 f8c7 	bl	800f452 <SDMMC_GetResponse>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	2104      	movs	r1, #4
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f003 f8be 	bl	800f452 <SDMMC_GetResponse>
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2108      	movs	r1, #8
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f003 f8b5 	bl	800f452 <SDMMC_GetResponse>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	210c      	movs	r1, #12
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f003 f8ac 	bl	800f452 <SDMMC_GetResponse>
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c306:	2b03      	cmp	r3, #3
 800c308:	d00d      	beq.n	800c326 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f107 020e 	add.w	r2, r7, #14
 800c312:	4611      	mov	r1, r2
 800c314:	4618      	mov	r0, r3
 800c316:	f003 fa8a 	bl	800f82e <SDMMC_CmdSetRelAdd>
 800c31a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c31c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d001      	beq.n	800c326 <SD_InitCard+0xae>
    {
      return errorstate;
 800c322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c324:	e072      	b.n	800c40c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c32a:	2b03      	cmp	r3, #3
 800c32c:	d036      	beq.n	800c39c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c32e:	89fb      	ldrh	r3, [r7, #14]
 800c330:	461a      	mov	r2, r3
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c33e:	041b      	lsls	r3, r3, #16
 800c340:	4619      	mov	r1, r3
 800c342:	4610      	mov	r0, r2
 800c344:	f003 fa54 	bl	800f7f0 <SDMMC_CmdSendCSD>
 800c348:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c34a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d001      	beq.n	800c354 <SD_InitCard+0xdc>
    {
      return errorstate;
 800c350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c352:	e05b      	b.n	800c40c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2100      	movs	r1, #0
 800c35a:	4618      	mov	r0, r3
 800c35c:	f003 f879 	bl	800f452 <SDMMC_GetResponse>
 800c360:	4602      	mov	r2, r0
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2104      	movs	r1, #4
 800c36c:	4618      	mov	r0, r3
 800c36e:	f003 f870 	bl	800f452 <SDMMC_GetResponse>
 800c372:	4602      	mov	r2, r0
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2108      	movs	r1, #8
 800c37e:	4618      	mov	r0, r3
 800c380:	f003 f867 	bl	800f452 <SDMMC_GetResponse>
 800c384:	4602      	mov	r2, r0
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	210c      	movs	r1, #12
 800c390:	4618      	mov	r0, r3
 800c392:	f003 f85e 	bl	800f452 <SDMMC_GetResponse>
 800c396:	4602      	mov	r2, r0
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2104      	movs	r1, #4
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f003 f855 	bl	800f452 <SDMMC_GetResponse>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	0d1a      	lsrs	r2, r3, #20
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c3b0:	f107 0310 	add.w	r3, r7, #16
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f7ff fd6e 	bl	800be98 <HAL_SD_GetCardCSD>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d002      	beq.n	800c3c8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c3c2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c3c6:	e021      	b.n	800c40c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6819      	ldr	r1, [r3, #0]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3d0:	041b      	lsls	r3, r3, #16
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	461c      	mov	r4, r3
 800c3d6:	4615      	mov	r5, r2
 800c3d8:	4622      	mov	r2, r4
 800c3da:	462b      	mov	r3, r5
 800c3dc:	4608      	mov	r0, r1
 800c3de:	f003 f943 	bl	800f668 <SDMMC_CmdSelDesel>
 800c3e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c3e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d001      	beq.n	800c3ee <SD_InitCard+0x176>
  {
    return errorstate;
 800c3ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3ec:	e00e      	b.n	800c40c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681d      	ldr	r5, [r3, #0]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	466c      	mov	r4, sp
 800c3f6:	f103 0210 	add.w	r2, r3, #16
 800c3fa:	ca07      	ldmia	r2, {r0, r1, r2}
 800c3fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c400:	3304      	adds	r3, #4
 800c402:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c404:	4628      	mov	r0, r5
 800c406:	f002 ff87 	bl	800f318 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c40a:	2300      	movs	r3, #0
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3740      	adds	r7, #64	@ 0x40
 800c410:	46bd      	mov	sp, r7
 800c412:	bdb0      	pop	{r4, r5, r7, pc}

0800c414 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b086      	sub	sp, #24
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c41c:	2300      	movs	r3, #0
 800c41e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c420:	2300      	movs	r3, #0
 800c422:	617b      	str	r3, [r7, #20]
 800c424:	2300      	movs	r3, #0
 800c426:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4618      	mov	r0, r3
 800c42e:	f003 f93e 	bl	800f6ae <SDMMC_CmdGoIdleState>
 800c432:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d001      	beq.n	800c43e <SD_PowerON+0x2a>
  {
    return errorstate;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	e072      	b.n	800c524 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4618      	mov	r0, r3
 800c444:	f003 f951 	bl	800f6ea <SDMMC_CmdOperCond>
 800c448:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d00d      	beq.n	800c46c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2200      	movs	r2, #0
 800c454:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4618      	mov	r0, r3
 800c45c:	f003 f927 	bl	800f6ae <SDMMC_CmdGoIdleState>
 800c460:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d004      	beq.n	800c472 <SD_PowerON+0x5e>
    {
      return errorstate;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	e05b      	b.n	800c524 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2201      	movs	r2, #1
 800c470:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c476:	2b01      	cmp	r3, #1
 800c478:	d137      	bne.n	800c4ea <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	2100      	movs	r1, #0
 800c480:	4618      	mov	r0, r3
 800c482:	f003 f951 	bl	800f728 <SDMMC_CmdAppCommand>
 800c486:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d02d      	beq.n	800c4ea <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c48e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c492:	e047      	b.n	800c524 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	2100      	movs	r1, #0
 800c49a:	4618      	mov	r0, r3
 800c49c:	f003 f944 	bl	800f728 <SDMMC_CmdAppCommand>
 800c4a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d001      	beq.n	800c4ac <SD_PowerON+0x98>
    {
      return errorstate;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	e03b      	b.n	800c524 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	491e      	ldr	r1, [pc, #120]	@ (800c52c <SD_PowerON+0x118>)
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f003 f95a 	bl	800f76c <SDMMC_CmdAppOperCommand>
 800c4b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d002      	beq.n	800c4c6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c4c0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c4c4:	e02e      	b.n	800c524 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	2100      	movs	r1, #0
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f002 ffc0 	bl	800f452 <SDMMC_GetResponse>
 800c4d2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	0fdb      	lsrs	r3, r3, #31
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d101      	bne.n	800c4e0 <SD_PowerON+0xcc>
 800c4dc:	2301      	movs	r3, #1
 800c4de:	e000      	b.n	800c4e2 <SD_PowerON+0xce>
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	613b      	str	r3, [r7, #16]

    count++;
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d802      	bhi.n	800c4fa <SD_PowerON+0xe6>
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d0cc      	beq.n	800c494 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c500:	4293      	cmp	r3, r2
 800c502:	d902      	bls.n	800c50a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c504:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c508:	e00c      	b.n	800c524 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c510:	2b00      	cmp	r3, #0
 800c512:	d003      	beq.n	800c51c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2201      	movs	r2, #1
 800c518:	645a      	str	r2, [r3, #68]	@ 0x44
 800c51a:	e002      	b.n	800c522 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2200      	movs	r2, #0
 800c520:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c522:	2300      	movs	r3, #0
}
 800c524:	4618      	mov	r0, r3
 800c526:	3718      	adds	r7, #24
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}
 800c52c:	c1100000 	.word	0xc1100000

0800c530 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d102      	bne.n	800c546 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c540:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c544:	e018      	b.n	800c578 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c54e:	041b      	lsls	r3, r3, #16
 800c550:	4619      	mov	r1, r3
 800c552:	4610      	mov	r0, r2
 800c554:	f003 f98c 	bl	800f870 <SDMMC_CmdSendStatus>
 800c558:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d001      	beq.n	800c564 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	e009      	b.n	800c578 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2100      	movs	r1, #0
 800c56a:	4618      	mov	r0, r3
 800c56c:	f002 ff71 	bl	800f452 <SDMMC_GetResponse>
 800c570:	4602      	mov	r2, r0
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c576:	2300      	movs	r3, #0
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3710      	adds	r7, #16
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d101      	bne.n	800c594 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800c590:	2301      	movs	r3, #1
 800c592:	e025      	b.n	800c5e0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d106      	bne.n	800c5ae <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f7f8 f86b 	bl	8004684 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2202      	movs	r2, #2
 800c5b2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	3304      	adds	r3, #4
 800c5be:	4619      	mov	r1, r3
 800c5c0:	4610      	mov	r0, r2
 800c5c2:	f002 fde3 	bl	800f18c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6818      	ldr	r0, [r3, #0]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	6839      	ldr	r1, [r7, #0]
 800c5d2:	f002 fe37 	bl	800f244 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2201      	movs	r2, #1
 800c5da:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c5de:	2300      	movs	r3, #0
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3708      	adds	r7, #8
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d101      	bne.n	800c5fa <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e04c      	b.n	800c694 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c600:	b2db      	uxtb	r3, r3
 800c602:	2b00      	cmp	r3, #0
 800c604:	d106      	bne.n	800c614 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2200      	movs	r2, #0
 800c60a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f7f7 fcbe 	bl	8003f90 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2202      	movs	r2, #2
 800c618:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f022 0203 	bic.w	r2, r2, #3
 800c62a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800c634:	68fa      	ldr	r2, [r7, #12]
 800c636:	4b19      	ldr	r3, [pc, #100]	@ (800c69c <HAL_SPDIFRX_Init+0xb4>)
 800c638:	4013      	ands	r3, r2
 800c63a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800c644:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800c64a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800c650:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800c656:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800c65c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800c662:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800c668:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800c66e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800c674:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800c676:	68fa      	ldr	r2, [r7, #12]
 800c678:	4313      	orrs	r3, r2
 800c67a:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2200      	movs	r2, #0
 800c688:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2201      	movs	r2, #1
 800c68e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800c692:	2300      	movs	r3, #0
}
 800c694:	4618      	mov	r0, r3
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	fff88407 	.word	0xfff88407

0800c6a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b084      	sub	sp, #16
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d101      	bne.n	800c6b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	e09d      	b.n	800c7ee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d108      	bne.n	800c6cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c6c2:	d009      	beq.n	800c6d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	61da      	str	r2, [r3, #28]
 800c6ca:	e005      	b.n	800c6d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d106      	bne.n	800c6f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f7f7 fcb0 	bl	8004058 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2202      	movs	r2, #2
 800c6fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	681a      	ldr	r2, [r3, #0]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c70e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c718:	d902      	bls.n	800c720 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c71a:	2300      	movs	r3, #0
 800c71c:	60fb      	str	r3, [r7, #12]
 800c71e:	e002      	b.n	800c726 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c724:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800c72e:	d007      	beq.n	800c740 <HAL_SPI_Init+0xa0>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c738:	d002      	beq.n	800c740 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	689b      	ldr	r3, [r3, #8]
 800c74c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800c750:	431a      	orrs	r2, r3
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	691b      	ldr	r3, [r3, #16]
 800c756:	f003 0302 	and.w	r3, r3, #2
 800c75a:	431a      	orrs	r2, r3
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	695b      	ldr	r3, [r3, #20]
 800c760:	f003 0301 	and.w	r3, r3, #1
 800c764:	431a      	orrs	r2, r3
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	699b      	ldr	r3, [r3, #24]
 800c76a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c76e:	431a      	orrs	r2, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	69db      	ldr	r3, [r3, #28]
 800c774:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c778:	431a      	orrs	r2, r3
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a1b      	ldr	r3, [r3, #32]
 800c77e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c782:	ea42 0103 	orr.w	r1, r2, r3
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c78a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	430a      	orrs	r2, r1
 800c794:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	699b      	ldr	r3, [r3, #24]
 800c79a:	0c1b      	lsrs	r3, r3, #16
 800c79c:	f003 0204 	and.w	r2, r3, #4
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7a4:	f003 0310 	and.w	r3, r3, #16
 800c7a8:	431a      	orrs	r2, r3
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7ae:	f003 0308 	and.w	r3, r3, #8
 800c7b2:	431a      	orrs	r2, r3
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	68db      	ldr	r3, [r3, #12]
 800c7b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800c7bc:	ea42 0103 	orr.w	r1, r2, r3
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	430a      	orrs	r2, r1
 800c7cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	69da      	ldr	r2, [r3, #28]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c7dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800c7ec:	2300      	movs	r3, #0
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b082      	sub	sp, #8
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d101      	bne.n	800c808 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c804:	2301      	movs	r3, #1
 800c806:	e049      	b.n	800c89c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	2b00      	cmp	r3, #0
 800c812:	d106      	bne.n	800c822 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f7f7 fc7d 	bl	800411c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2202      	movs	r2, #2
 800c826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	3304      	adds	r3, #4
 800c832:	4619      	mov	r1, r3
 800c834:	4610      	mov	r0, r2
 800c836:	f000 fc11 	bl	800d05c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2201      	movs	r2, #1
 800c83e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2201      	movs	r2, #1
 800c846:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2201      	movs	r2, #1
 800c84e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2201      	movs	r2, #1
 800c856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2201      	movs	r2, #1
 800c85e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2201      	movs	r2, #1
 800c866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2201      	movs	r2, #1
 800c86e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2201      	movs	r2, #1
 800c876:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2201      	movs	r2, #1
 800c87e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2201      	movs	r2, #1
 800c886:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2201      	movs	r2, #1
 800c88e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2201      	movs	r2, #1
 800c896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c89a:	2300      	movs	r3, #0
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3708      	adds	r7, #8
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b085      	sub	sp, #20
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c8b2:	b2db      	uxtb	r3, r3
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d001      	beq.n	800c8bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	e054      	b.n	800c966 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2202      	movs	r2, #2
 800c8c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	68da      	ldr	r2, [r3, #12]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f042 0201 	orr.w	r2, r2, #1
 800c8d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a26      	ldr	r2, [pc, #152]	@ (800c974 <HAL_TIM_Base_Start_IT+0xd0>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d022      	beq.n	800c924 <HAL_TIM_Base_Start_IT+0x80>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8e6:	d01d      	beq.n	800c924 <HAL_TIM_Base_Start_IT+0x80>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4a22      	ldr	r2, [pc, #136]	@ (800c978 <HAL_TIM_Base_Start_IT+0xd4>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d018      	beq.n	800c924 <HAL_TIM_Base_Start_IT+0x80>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a21      	ldr	r2, [pc, #132]	@ (800c97c <HAL_TIM_Base_Start_IT+0xd8>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d013      	beq.n	800c924 <HAL_TIM_Base_Start_IT+0x80>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a1f      	ldr	r2, [pc, #124]	@ (800c980 <HAL_TIM_Base_Start_IT+0xdc>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d00e      	beq.n	800c924 <HAL_TIM_Base_Start_IT+0x80>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4a1e      	ldr	r2, [pc, #120]	@ (800c984 <HAL_TIM_Base_Start_IT+0xe0>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d009      	beq.n	800c924 <HAL_TIM_Base_Start_IT+0x80>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4a1c      	ldr	r2, [pc, #112]	@ (800c988 <HAL_TIM_Base_Start_IT+0xe4>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d004      	beq.n	800c924 <HAL_TIM_Base_Start_IT+0x80>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4a1b      	ldr	r2, [pc, #108]	@ (800c98c <HAL_TIM_Base_Start_IT+0xe8>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d115      	bne.n	800c950 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	689a      	ldr	r2, [r3, #8]
 800c92a:	4b19      	ldr	r3, [pc, #100]	@ (800c990 <HAL_TIM_Base_Start_IT+0xec>)
 800c92c:	4013      	ands	r3, r2
 800c92e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2b06      	cmp	r3, #6
 800c934:	d015      	beq.n	800c962 <HAL_TIM_Base_Start_IT+0xbe>
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c93c:	d011      	beq.n	800c962 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f042 0201 	orr.w	r2, r2, #1
 800c94c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c94e:	e008      	b.n	800c962 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f042 0201 	orr.w	r2, r2, #1
 800c95e:	601a      	str	r2, [r3, #0]
 800c960:	e000      	b.n	800c964 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c962:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c964:	2300      	movs	r3, #0
}
 800c966:	4618      	mov	r0, r3
 800c968:	3714      	adds	r7, #20
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop
 800c974:	40010000 	.word	0x40010000
 800c978:	40000400 	.word	0x40000400
 800c97c:	40000800 	.word	0x40000800
 800c980:	40000c00 	.word	0x40000c00
 800c984:	40010400 	.word	0x40010400
 800c988:	40014000 	.word	0x40014000
 800c98c:	40001800 	.word	0x40001800
 800c990:	00010007 	.word	0x00010007

0800c994 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d101      	bne.n	800c9a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	e049      	b.n	800ca3a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d106      	bne.n	800c9c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f7f7 fc1c 	bl	80041f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2202      	movs	r2, #2
 800c9c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681a      	ldr	r2, [r3, #0]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	3304      	adds	r3, #4
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	4610      	mov	r0, r2
 800c9d4:	f000 fb42 	bl	800d05c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2201      	movs	r2, #1
 800ca04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2201      	movs	r2, #1
 800ca14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2201      	movs	r2, #1
 800ca24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2201      	movs	r2, #1
 800ca34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ca38:	2300      	movs	r3, #0
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3708      	adds	r7, #8
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}

0800ca42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ca42:	b580      	push	{r7, lr}
 800ca44:	b084      	sub	sp, #16
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	68db      	ldr	r3, [r3, #12]
 800ca50:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	691b      	ldr	r3, [r3, #16]
 800ca58:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	f003 0302 	and.w	r3, r3, #2
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d020      	beq.n	800caa6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f003 0302 	and.w	r3, r3, #2
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d01b      	beq.n	800caa6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f06f 0202 	mvn.w	r2, #2
 800ca76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	699b      	ldr	r3, [r3, #24]
 800ca84:	f003 0303 	and.w	r3, r3, #3
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d003      	beq.n	800ca94 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f000 fac7 	bl	800d020 <HAL_TIM_IC_CaptureCallback>
 800ca92:	e005      	b.n	800caa0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 fab9 	bl	800d00c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 faca 	bl	800d034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2200      	movs	r2, #0
 800caa4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	f003 0304 	and.w	r3, r3, #4
 800caac:	2b00      	cmp	r3, #0
 800caae:	d020      	beq.n	800caf2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f003 0304 	and.w	r3, r3, #4
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d01b      	beq.n	800caf2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f06f 0204 	mvn.w	r2, #4
 800cac2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2202      	movs	r2, #2
 800cac8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	699b      	ldr	r3, [r3, #24]
 800cad0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d003      	beq.n	800cae0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 faa1 	bl	800d020 <HAL_TIM_IC_CaptureCallback>
 800cade:	e005      	b.n	800caec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f000 fa93 	bl	800d00c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 faa4 	bl	800d034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	f003 0308 	and.w	r3, r3, #8
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d020      	beq.n	800cb3e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f003 0308 	and.w	r3, r3, #8
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d01b      	beq.n	800cb3e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f06f 0208 	mvn.w	r2, #8
 800cb0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2204      	movs	r2, #4
 800cb14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	69db      	ldr	r3, [r3, #28]
 800cb1c:	f003 0303 	and.w	r3, r3, #3
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d003      	beq.n	800cb2c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f000 fa7b 	bl	800d020 <HAL_TIM_IC_CaptureCallback>
 800cb2a:	e005      	b.n	800cb38 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 fa6d 	bl	800d00c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 fa7e 	bl	800d034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	f003 0310 	and.w	r3, r3, #16
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d020      	beq.n	800cb8a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f003 0310 	and.w	r3, r3, #16
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d01b      	beq.n	800cb8a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f06f 0210 	mvn.w	r2, #16
 800cb5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2208      	movs	r2, #8
 800cb60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	69db      	ldr	r3, [r3, #28]
 800cb68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d003      	beq.n	800cb78 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f000 fa55 	bl	800d020 <HAL_TIM_IC_CaptureCallback>
 800cb76:	e005      	b.n	800cb84 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 fa47 	bl	800d00c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 fa58 	bl	800d034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	f003 0301 	and.w	r3, r3, #1
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d00c      	beq.n	800cbae <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f003 0301 	and.w	r3, r3, #1
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d007      	beq.n	800cbae <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f06f 0201 	mvn.w	r2, #1
 800cba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f7f6 fcbf 	bl	800352c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d104      	bne.n	800cbc2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00c      	beq.n	800cbdc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d007      	beq.n	800cbdc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800cbd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f000 fef4 	bl	800d9c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d00c      	beq.n	800cc00 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d007      	beq.n	800cc00 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800cbf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f000 feec 	bl	800d9d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00c      	beq.n	800cc24 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d007      	beq.n	800cc24 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cc1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 fa12 	bl	800d048 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	f003 0320 	and.w	r3, r3, #32
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d00c      	beq.n	800cc48 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f003 0320 	and.w	r3, r3, #32
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d007      	beq.n	800cc48 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f06f 0220 	mvn.w	r2, #32
 800cc40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 feb4 	bl	800d9b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cc48:	bf00      	nop
 800cc4a:	3710      	adds	r7, #16
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b086      	sub	sp, #24
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	60f8      	str	r0, [r7, #12]
 800cc58:	60b9      	str	r1, [r7, #8]
 800cc5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	d101      	bne.n	800cc6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cc6a:	2302      	movs	r3, #2
 800cc6c:	e0ff      	b.n	800ce6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2201      	movs	r2, #1
 800cc72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2b14      	cmp	r3, #20
 800cc7a:	f200 80f0 	bhi.w	800ce5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cc7e:	a201      	add	r2, pc, #4	@ (adr r2, 800cc84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc84:	0800ccd9 	.word	0x0800ccd9
 800cc88:	0800ce5f 	.word	0x0800ce5f
 800cc8c:	0800ce5f 	.word	0x0800ce5f
 800cc90:	0800ce5f 	.word	0x0800ce5f
 800cc94:	0800cd19 	.word	0x0800cd19
 800cc98:	0800ce5f 	.word	0x0800ce5f
 800cc9c:	0800ce5f 	.word	0x0800ce5f
 800cca0:	0800ce5f 	.word	0x0800ce5f
 800cca4:	0800cd5b 	.word	0x0800cd5b
 800cca8:	0800ce5f 	.word	0x0800ce5f
 800ccac:	0800ce5f 	.word	0x0800ce5f
 800ccb0:	0800ce5f 	.word	0x0800ce5f
 800ccb4:	0800cd9b 	.word	0x0800cd9b
 800ccb8:	0800ce5f 	.word	0x0800ce5f
 800ccbc:	0800ce5f 	.word	0x0800ce5f
 800ccc0:	0800ce5f 	.word	0x0800ce5f
 800ccc4:	0800cddd 	.word	0x0800cddd
 800ccc8:	0800ce5f 	.word	0x0800ce5f
 800cccc:	0800ce5f 	.word	0x0800ce5f
 800ccd0:	0800ce5f 	.word	0x0800ce5f
 800ccd4:	0800ce1d 	.word	0x0800ce1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	68b9      	ldr	r1, [r7, #8]
 800ccde:	4618      	mov	r0, r3
 800cce0:	f000 fa62 	bl	800d1a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	699a      	ldr	r2, [r3, #24]
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f042 0208 	orr.w	r2, r2, #8
 800ccf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	699a      	ldr	r2, [r3, #24]
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f022 0204 	bic.w	r2, r2, #4
 800cd02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	6999      	ldr	r1, [r3, #24]
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	691a      	ldr	r2, [r3, #16]
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	430a      	orrs	r2, r1
 800cd14:	619a      	str	r2, [r3, #24]
      break;
 800cd16:	e0a5      	b.n	800ce64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	68b9      	ldr	r1, [r7, #8]
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f000 fab4 	bl	800d28c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	699a      	ldr	r2, [r3, #24]
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cd32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	699a      	ldr	r2, [r3, #24]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cd42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	6999      	ldr	r1, [r3, #24]
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	691b      	ldr	r3, [r3, #16]
 800cd4e:	021a      	lsls	r2, r3, #8
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	430a      	orrs	r2, r1
 800cd56:	619a      	str	r2, [r3, #24]
      break;
 800cd58:	e084      	b.n	800ce64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	68b9      	ldr	r1, [r7, #8]
 800cd60:	4618      	mov	r0, r3
 800cd62:	f000 fb0b 	bl	800d37c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	69da      	ldr	r2, [r3, #28]
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f042 0208 	orr.w	r2, r2, #8
 800cd74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	69da      	ldr	r2, [r3, #28]
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f022 0204 	bic.w	r2, r2, #4
 800cd84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	69d9      	ldr	r1, [r3, #28]
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	691a      	ldr	r2, [r3, #16]
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	430a      	orrs	r2, r1
 800cd96:	61da      	str	r2, [r3, #28]
      break;
 800cd98:	e064      	b.n	800ce64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	68b9      	ldr	r1, [r7, #8]
 800cda0:	4618      	mov	r0, r3
 800cda2:	f000 fb61 	bl	800d468 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	69da      	ldr	r2, [r3, #28]
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cdb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	69da      	ldr	r2, [r3, #28]
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cdc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	69d9      	ldr	r1, [r3, #28]
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	691b      	ldr	r3, [r3, #16]
 800cdd0:	021a      	lsls	r2, r3, #8
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	430a      	orrs	r2, r1
 800cdd8:	61da      	str	r2, [r3, #28]
      break;
 800cdda:	e043      	b.n	800ce64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	68b9      	ldr	r1, [r7, #8]
 800cde2:	4618      	mov	r0, r3
 800cde4:	f000 fb98 	bl	800d518 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f042 0208 	orr.w	r2, r2, #8
 800cdf6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f022 0204 	bic.w	r2, r2, #4
 800ce06:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	691a      	ldr	r2, [r3, #16]
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	430a      	orrs	r2, r1
 800ce18:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ce1a:	e023      	b.n	800ce64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	68b9      	ldr	r1, [r7, #8]
 800ce22:	4618      	mov	r0, r3
 800ce24:	f000 fbca 	bl	800d5bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ce36:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ce46:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	691b      	ldr	r3, [r3, #16]
 800ce52:	021a      	lsls	r2, r3, #8
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	430a      	orrs	r2, r1
 800ce5a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ce5c:	e002      	b.n	800ce64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ce5e:	2301      	movs	r3, #1
 800ce60:	75fb      	strb	r3, [r7, #23]
      break;
 800ce62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2200      	movs	r2, #0
 800ce68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ce6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3718      	adds	r7, #24
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop

0800ce78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ce82:	2300      	movs	r3, #0
 800ce84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d101      	bne.n	800ce94 <HAL_TIM_ConfigClockSource+0x1c>
 800ce90:	2302      	movs	r3, #2
 800ce92:	e0b4      	b.n	800cffe <HAL_TIM_ConfigClockSource+0x186>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2201      	movs	r2, #1
 800ce98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2202      	movs	r2, #2
 800cea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	689b      	ldr	r3, [r3, #8]
 800ceaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ceac:	68ba      	ldr	r2, [r7, #8]
 800ceae:	4b56      	ldr	r3, [pc, #344]	@ (800d008 <HAL_TIM_ConfigClockSource+0x190>)
 800ceb0:	4013      	ands	r3, r2
 800ceb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ceba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	68ba      	ldr	r2, [r7, #8]
 800cec2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cecc:	d03e      	beq.n	800cf4c <HAL_TIM_ConfigClockSource+0xd4>
 800cece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ced2:	f200 8087 	bhi.w	800cfe4 <HAL_TIM_ConfigClockSource+0x16c>
 800ced6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ceda:	f000 8086 	beq.w	800cfea <HAL_TIM_ConfigClockSource+0x172>
 800cede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cee2:	d87f      	bhi.n	800cfe4 <HAL_TIM_ConfigClockSource+0x16c>
 800cee4:	2b70      	cmp	r3, #112	@ 0x70
 800cee6:	d01a      	beq.n	800cf1e <HAL_TIM_ConfigClockSource+0xa6>
 800cee8:	2b70      	cmp	r3, #112	@ 0x70
 800ceea:	d87b      	bhi.n	800cfe4 <HAL_TIM_ConfigClockSource+0x16c>
 800ceec:	2b60      	cmp	r3, #96	@ 0x60
 800ceee:	d050      	beq.n	800cf92 <HAL_TIM_ConfigClockSource+0x11a>
 800cef0:	2b60      	cmp	r3, #96	@ 0x60
 800cef2:	d877      	bhi.n	800cfe4 <HAL_TIM_ConfigClockSource+0x16c>
 800cef4:	2b50      	cmp	r3, #80	@ 0x50
 800cef6:	d03c      	beq.n	800cf72 <HAL_TIM_ConfigClockSource+0xfa>
 800cef8:	2b50      	cmp	r3, #80	@ 0x50
 800cefa:	d873      	bhi.n	800cfe4 <HAL_TIM_ConfigClockSource+0x16c>
 800cefc:	2b40      	cmp	r3, #64	@ 0x40
 800cefe:	d058      	beq.n	800cfb2 <HAL_TIM_ConfigClockSource+0x13a>
 800cf00:	2b40      	cmp	r3, #64	@ 0x40
 800cf02:	d86f      	bhi.n	800cfe4 <HAL_TIM_ConfigClockSource+0x16c>
 800cf04:	2b30      	cmp	r3, #48	@ 0x30
 800cf06:	d064      	beq.n	800cfd2 <HAL_TIM_ConfigClockSource+0x15a>
 800cf08:	2b30      	cmp	r3, #48	@ 0x30
 800cf0a:	d86b      	bhi.n	800cfe4 <HAL_TIM_ConfigClockSource+0x16c>
 800cf0c:	2b20      	cmp	r3, #32
 800cf0e:	d060      	beq.n	800cfd2 <HAL_TIM_ConfigClockSource+0x15a>
 800cf10:	2b20      	cmp	r3, #32
 800cf12:	d867      	bhi.n	800cfe4 <HAL_TIM_ConfigClockSource+0x16c>
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d05c      	beq.n	800cfd2 <HAL_TIM_ConfigClockSource+0x15a>
 800cf18:	2b10      	cmp	r3, #16
 800cf1a:	d05a      	beq.n	800cfd2 <HAL_TIM_ConfigClockSource+0x15a>
 800cf1c:	e062      	b.n	800cfe4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cf2e:	f000 fc13 	bl	800d758 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cf40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	68ba      	ldr	r2, [r7, #8]
 800cf48:	609a      	str	r2, [r3, #8]
      break;
 800cf4a:	e04f      	b.n	800cfec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cf5c:	f000 fbfc 	bl	800d758 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	689a      	ldr	r2, [r3, #8]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cf6e:	609a      	str	r2, [r3, #8]
      break;
 800cf70:	e03c      	b.n	800cfec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf7e:	461a      	mov	r2, r3
 800cf80:	f000 fb70 	bl	800d664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	2150      	movs	r1, #80	@ 0x50
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f000 fbc9 	bl	800d722 <TIM_ITRx_SetConfig>
      break;
 800cf90:	e02c      	b.n	800cfec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	f000 fb8f 	bl	800d6c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2160      	movs	r1, #96	@ 0x60
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f000 fbb9 	bl	800d722 <TIM_ITRx_SetConfig>
      break;
 800cfb0:	e01c      	b.n	800cfec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	f000 fb50 	bl	800d664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	2140      	movs	r1, #64	@ 0x40
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f000 fba9 	bl	800d722 <TIM_ITRx_SetConfig>
      break;
 800cfd0:	e00c      	b.n	800cfec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681a      	ldr	r2, [r3, #0]
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4619      	mov	r1, r3
 800cfdc:	4610      	mov	r0, r2
 800cfde:	f000 fba0 	bl	800d722 <TIM_ITRx_SetConfig>
      break;
 800cfe2:	e003      	b.n	800cfec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	73fb      	strb	r3, [r7, #15]
      break;
 800cfe8:	e000      	b.n	800cfec <HAL_TIM_ConfigClockSource+0x174>
      break;
 800cfea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2201      	movs	r2, #1
 800cff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2200      	movs	r2, #0
 800cff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cffc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	fffeff88 	.word	0xfffeff88

0800d00c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d014:	bf00      	nop
 800d016:	370c      	adds	r7, #12
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d020:	b480      	push	{r7}
 800d022:	b083      	sub	sp, #12
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d028:	bf00      	nop
 800d02a:	370c      	adds	r7, #12
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr

0800d034 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d034:	b480      	push	{r7}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d03c:	bf00      	nop
 800d03e:	370c      	adds	r7, #12
 800d040:	46bd      	mov	sp, r7
 800d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d046:	4770      	bx	lr

0800d048 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d050:	bf00      	nop
 800d052:	370c      	adds	r7, #12
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr

0800d05c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b085      	sub	sp, #20
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	4a43      	ldr	r2, [pc, #268]	@ (800d17c <TIM_Base_SetConfig+0x120>)
 800d070:	4293      	cmp	r3, r2
 800d072:	d013      	beq.n	800d09c <TIM_Base_SetConfig+0x40>
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d07a:	d00f      	beq.n	800d09c <TIM_Base_SetConfig+0x40>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	4a40      	ldr	r2, [pc, #256]	@ (800d180 <TIM_Base_SetConfig+0x124>)
 800d080:	4293      	cmp	r3, r2
 800d082:	d00b      	beq.n	800d09c <TIM_Base_SetConfig+0x40>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	4a3f      	ldr	r2, [pc, #252]	@ (800d184 <TIM_Base_SetConfig+0x128>)
 800d088:	4293      	cmp	r3, r2
 800d08a:	d007      	beq.n	800d09c <TIM_Base_SetConfig+0x40>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	4a3e      	ldr	r2, [pc, #248]	@ (800d188 <TIM_Base_SetConfig+0x12c>)
 800d090:	4293      	cmp	r3, r2
 800d092:	d003      	beq.n	800d09c <TIM_Base_SetConfig+0x40>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	4a3d      	ldr	r2, [pc, #244]	@ (800d18c <TIM_Base_SetConfig+0x130>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	d108      	bne.n	800d0ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	68fa      	ldr	r2, [r7, #12]
 800d0aa:	4313      	orrs	r3, r2
 800d0ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	4a32      	ldr	r2, [pc, #200]	@ (800d17c <TIM_Base_SetConfig+0x120>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d02b      	beq.n	800d10e <TIM_Base_SetConfig+0xb2>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0bc:	d027      	beq.n	800d10e <TIM_Base_SetConfig+0xb2>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	4a2f      	ldr	r2, [pc, #188]	@ (800d180 <TIM_Base_SetConfig+0x124>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d023      	beq.n	800d10e <TIM_Base_SetConfig+0xb2>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	4a2e      	ldr	r2, [pc, #184]	@ (800d184 <TIM_Base_SetConfig+0x128>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d01f      	beq.n	800d10e <TIM_Base_SetConfig+0xb2>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	4a2d      	ldr	r2, [pc, #180]	@ (800d188 <TIM_Base_SetConfig+0x12c>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d01b      	beq.n	800d10e <TIM_Base_SetConfig+0xb2>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	4a2c      	ldr	r2, [pc, #176]	@ (800d18c <TIM_Base_SetConfig+0x130>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d017      	beq.n	800d10e <TIM_Base_SetConfig+0xb2>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	4a2b      	ldr	r2, [pc, #172]	@ (800d190 <TIM_Base_SetConfig+0x134>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d013      	beq.n	800d10e <TIM_Base_SetConfig+0xb2>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	4a2a      	ldr	r2, [pc, #168]	@ (800d194 <TIM_Base_SetConfig+0x138>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d00f      	beq.n	800d10e <TIM_Base_SetConfig+0xb2>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	4a29      	ldr	r2, [pc, #164]	@ (800d198 <TIM_Base_SetConfig+0x13c>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d00b      	beq.n	800d10e <TIM_Base_SetConfig+0xb2>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	4a28      	ldr	r2, [pc, #160]	@ (800d19c <TIM_Base_SetConfig+0x140>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d007      	beq.n	800d10e <TIM_Base_SetConfig+0xb2>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	4a27      	ldr	r2, [pc, #156]	@ (800d1a0 <TIM_Base_SetConfig+0x144>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d003      	beq.n	800d10e <TIM_Base_SetConfig+0xb2>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	4a26      	ldr	r2, [pc, #152]	@ (800d1a4 <TIM_Base_SetConfig+0x148>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d108      	bne.n	800d120 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	68db      	ldr	r3, [r3, #12]
 800d11a:	68fa      	ldr	r2, [r7, #12]
 800d11c:	4313      	orrs	r3, r2
 800d11e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	695b      	ldr	r3, [r3, #20]
 800d12a:	4313      	orrs	r3, r2
 800d12c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	689a      	ldr	r2, [r3, #8]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	681a      	ldr	r2, [r3, #0]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	4a0e      	ldr	r2, [pc, #56]	@ (800d17c <TIM_Base_SetConfig+0x120>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d003      	beq.n	800d14e <TIM_Base_SetConfig+0xf2>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	4a10      	ldr	r2, [pc, #64]	@ (800d18c <TIM_Base_SetConfig+0x130>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d103      	bne.n	800d156 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	691a      	ldr	r2, [r3, #16]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f043 0204 	orr.w	r2, r3, #4
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2201      	movs	r2, #1
 800d166:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	68fa      	ldr	r2, [r7, #12]
 800d16c:	601a      	str	r2, [r3, #0]
}
 800d16e:	bf00      	nop
 800d170:	3714      	adds	r7, #20
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr
 800d17a:	bf00      	nop
 800d17c:	40010000 	.word	0x40010000
 800d180:	40000400 	.word	0x40000400
 800d184:	40000800 	.word	0x40000800
 800d188:	40000c00 	.word	0x40000c00
 800d18c:	40010400 	.word	0x40010400
 800d190:	40014000 	.word	0x40014000
 800d194:	40014400 	.word	0x40014400
 800d198:	40014800 	.word	0x40014800
 800d19c:	40001800 	.word	0x40001800
 800d1a0:	40001c00 	.word	0x40001c00
 800d1a4:	40002000 	.word	0x40002000

0800d1a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b087      	sub	sp, #28
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6a1b      	ldr	r3, [r3, #32]
 800d1b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6a1b      	ldr	r3, [r3, #32]
 800d1bc:	f023 0201 	bic.w	r2, r3, #1
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	699b      	ldr	r3, [r3, #24]
 800d1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d1d0:	68fa      	ldr	r2, [r7, #12]
 800d1d2:	4b2b      	ldr	r3, [pc, #172]	@ (800d280 <TIM_OC1_SetConfig+0xd8>)
 800d1d4:	4013      	ands	r3, r2
 800d1d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f023 0303 	bic.w	r3, r3, #3
 800d1de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	68fa      	ldr	r2, [r7, #12]
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	f023 0302 	bic.w	r3, r3, #2
 800d1f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	689b      	ldr	r3, [r3, #8]
 800d1f6:	697a      	ldr	r2, [r7, #20]
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	4a21      	ldr	r2, [pc, #132]	@ (800d284 <TIM_OC1_SetConfig+0xdc>)
 800d200:	4293      	cmp	r3, r2
 800d202:	d003      	beq.n	800d20c <TIM_OC1_SetConfig+0x64>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	4a20      	ldr	r2, [pc, #128]	@ (800d288 <TIM_OC1_SetConfig+0xe0>)
 800d208:	4293      	cmp	r3, r2
 800d20a:	d10c      	bne.n	800d226 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	f023 0308 	bic.w	r3, r3, #8
 800d212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	68db      	ldr	r3, [r3, #12]
 800d218:	697a      	ldr	r2, [r7, #20]
 800d21a:	4313      	orrs	r3, r2
 800d21c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	f023 0304 	bic.w	r3, r3, #4
 800d224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	4a16      	ldr	r2, [pc, #88]	@ (800d284 <TIM_OC1_SetConfig+0xdc>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d003      	beq.n	800d236 <TIM_OC1_SetConfig+0x8e>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	4a15      	ldr	r2, [pc, #84]	@ (800d288 <TIM_OC1_SetConfig+0xe0>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d111      	bne.n	800d25a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d23c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	695b      	ldr	r3, [r3, #20]
 800d24a:	693a      	ldr	r2, [r7, #16]
 800d24c:	4313      	orrs	r3, r2
 800d24e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	699b      	ldr	r3, [r3, #24]
 800d254:	693a      	ldr	r2, [r7, #16]
 800d256:	4313      	orrs	r3, r2
 800d258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	693a      	ldr	r2, [r7, #16]
 800d25e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	68fa      	ldr	r2, [r7, #12]
 800d264:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	685a      	ldr	r2, [r3, #4]
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	697a      	ldr	r2, [r7, #20]
 800d272:	621a      	str	r2, [r3, #32]
}
 800d274:	bf00      	nop
 800d276:	371c      	adds	r7, #28
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr
 800d280:	fffeff8f 	.word	0xfffeff8f
 800d284:	40010000 	.word	0x40010000
 800d288:	40010400 	.word	0x40010400

0800d28c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b087      	sub	sp, #28
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6a1b      	ldr	r3, [r3, #32]
 800d29a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6a1b      	ldr	r3, [r3, #32]
 800d2a0:	f023 0210 	bic.w	r2, r3, #16
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	685b      	ldr	r3, [r3, #4]
 800d2ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	699b      	ldr	r3, [r3, #24]
 800d2b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d2b4:	68fa      	ldr	r2, [r7, #12]
 800d2b6:	4b2e      	ldr	r3, [pc, #184]	@ (800d370 <TIM_OC2_SetConfig+0xe4>)
 800d2b8:	4013      	ands	r3, r2
 800d2ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d2c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	021b      	lsls	r3, r3, #8
 800d2ca:	68fa      	ldr	r2, [r7, #12]
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	f023 0320 	bic.w	r3, r3, #32
 800d2d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	011b      	lsls	r3, r3, #4
 800d2de:	697a      	ldr	r2, [r7, #20]
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	4a23      	ldr	r2, [pc, #140]	@ (800d374 <TIM_OC2_SetConfig+0xe8>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d003      	beq.n	800d2f4 <TIM_OC2_SetConfig+0x68>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	4a22      	ldr	r2, [pc, #136]	@ (800d378 <TIM_OC2_SetConfig+0xec>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d10d      	bne.n	800d310 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d2fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	68db      	ldr	r3, [r3, #12]
 800d300:	011b      	lsls	r3, r3, #4
 800d302:	697a      	ldr	r2, [r7, #20]
 800d304:	4313      	orrs	r3, r2
 800d306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d30e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	4a18      	ldr	r2, [pc, #96]	@ (800d374 <TIM_OC2_SetConfig+0xe8>)
 800d314:	4293      	cmp	r3, r2
 800d316:	d003      	beq.n	800d320 <TIM_OC2_SetConfig+0x94>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	4a17      	ldr	r2, [pc, #92]	@ (800d378 <TIM_OC2_SetConfig+0xec>)
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d113      	bne.n	800d348 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d32e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	695b      	ldr	r3, [r3, #20]
 800d334:	009b      	lsls	r3, r3, #2
 800d336:	693a      	ldr	r2, [r7, #16]
 800d338:	4313      	orrs	r3, r2
 800d33a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	699b      	ldr	r3, [r3, #24]
 800d340:	009b      	lsls	r3, r3, #2
 800d342:	693a      	ldr	r2, [r7, #16]
 800d344:	4313      	orrs	r3, r2
 800d346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	693a      	ldr	r2, [r7, #16]
 800d34c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	68fa      	ldr	r2, [r7, #12]
 800d352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	685a      	ldr	r2, [r3, #4]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	697a      	ldr	r2, [r7, #20]
 800d360:	621a      	str	r2, [r3, #32]
}
 800d362:	bf00      	nop
 800d364:	371c      	adds	r7, #28
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr
 800d36e:	bf00      	nop
 800d370:	feff8fff 	.word	0xfeff8fff
 800d374:	40010000 	.word	0x40010000
 800d378:	40010400 	.word	0x40010400

0800d37c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b087      	sub	sp, #28
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6a1b      	ldr	r3, [r3, #32]
 800d38a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6a1b      	ldr	r3, [r3, #32]
 800d390:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	69db      	ldr	r3, [r3, #28]
 800d3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d3a4:	68fa      	ldr	r2, [r7, #12]
 800d3a6:	4b2d      	ldr	r3, [pc, #180]	@ (800d45c <TIM_OC3_SetConfig+0xe0>)
 800d3a8:	4013      	ands	r3, r2
 800d3aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	f023 0303 	bic.w	r3, r3, #3
 800d3b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	68fa      	ldr	r2, [r7, #12]
 800d3ba:	4313      	orrs	r3, r2
 800d3bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d3c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	689b      	ldr	r3, [r3, #8]
 800d3ca:	021b      	lsls	r3, r3, #8
 800d3cc:	697a      	ldr	r2, [r7, #20]
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	4a22      	ldr	r2, [pc, #136]	@ (800d460 <TIM_OC3_SetConfig+0xe4>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d003      	beq.n	800d3e2 <TIM_OC3_SetConfig+0x66>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	4a21      	ldr	r2, [pc, #132]	@ (800d464 <TIM_OC3_SetConfig+0xe8>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d10d      	bne.n	800d3fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d3e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	68db      	ldr	r3, [r3, #12]
 800d3ee:	021b      	lsls	r3, r3, #8
 800d3f0:	697a      	ldr	r2, [r7, #20]
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d3fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	4a17      	ldr	r2, [pc, #92]	@ (800d460 <TIM_OC3_SetConfig+0xe4>)
 800d402:	4293      	cmp	r3, r2
 800d404:	d003      	beq.n	800d40e <TIM_OC3_SetConfig+0x92>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	4a16      	ldr	r2, [pc, #88]	@ (800d464 <TIM_OC3_SetConfig+0xe8>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d113      	bne.n	800d436 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d41c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	695b      	ldr	r3, [r3, #20]
 800d422:	011b      	lsls	r3, r3, #4
 800d424:	693a      	ldr	r2, [r7, #16]
 800d426:	4313      	orrs	r3, r2
 800d428:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	699b      	ldr	r3, [r3, #24]
 800d42e:	011b      	lsls	r3, r3, #4
 800d430:	693a      	ldr	r2, [r7, #16]
 800d432:	4313      	orrs	r3, r2
 800d434:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	693a      	ldr	r2, [r7, #16]
 800d43a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	68fa      	ldr	r2, [r7, #12]
 800d440:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	685a      	ldr	r2, [r3, #4]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	697a      	ldr	r2, [r7, #20]
 800d44e:	621a      	str	r2, [r3, #32]
}
 800d450:	bf00      	nop
 800d452:	371c      	adds	r7, #28
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr
 800d45c:	fffeff8f 	.word	0xfffeff8f
 800d460:	40010000 	.word	0x40010000
 800d464:	40010400 	.word	0x40010400

0800d468 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d468:	b480      	push	{r7}
 800d46a:	b087      	sub	sp, #28
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6a1b      	ldr	r3, [r3, #32]
 800d476:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6a1b      	ldr	r3, [r3, #32]
 800d47c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	69db      	ldr	r3, [r3, #28]
 800d48e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d490:	68fa      	ldr	r2, [r7, #12]
 800d492:	4b1e      	ldr	r3, [pc, #120]	@ (800d50c <TIM_OC4_SetConfig+0xa4>)
 800d494:	4013      	ands	r3, r2
 800d496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d49e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	021b      	lsls	r3, r3, #8
 800d4a6:	68fa      	ldr	r2, [r7, #12]
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d4b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	689b      	ldr	r3, [r3, #8]
 800d4b8:	031b      	lsls	r3, r3, #12
 800d4ba:	693a      	ldr	r2, [r7, #16]
 800d4bc:	4313      	orrs	r3, r2
 800d4be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	4a13      	ldr	r2, [pc, #76]	@ (800d510 <TIM_OC4_SetConfig+0xa8>)
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d003      	beq.n	800d4d0 <TIM_OC4_SetConfig+0x68>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	4a12      	ldr	r2, [pc, #72]	@ (800d514 <TIM_OC4_SetConfig+0xac>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d109      	bne.n	800d4e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d4d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	695b      	ldr	r3, [r3, #20]
 800d4dc:	019b      	lsls	r3, r3, #6
 800d4de:	697a      	ldr	r2, [r7, #20]
 800d4e0:	4313      	orrs	r3, r2
 800d4e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	697a      	ldr	r2, [r7, #20]
 800d4e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	68fa      	ldr	r2, [r7, #12]
 800d4ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	685a      	ldr	r2, [r3, #4]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	693a      	ldr	r2, [r7, #16]
 800d4fc:	621a      	str	r2, [r3, #32]
}
 800d4fe:	bf00      	nop
 800d500:	371c      	adds	r7, #28
 800d502:	46bd      	mov	sp, r7
 800d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop
 800d50c:	feff8fff 	.word	0xfeff8fff
 800d510:	40010000 	.word	0x40010000
 800d514:	40010400 	.word	0x40010400

0800d518 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d518:	b480      	push	{r7}
 800d51a:	b087      	sub	sp, #28
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6a1b      	ldr	r3, [r3, #32]
 800d526:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6a1b      	ldr	r3, [r3, #32]
 800d52c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d540:	68fa      	ldr	r2, [r7, #12]
 800d542:	4b1b      	ldr	r3, [pc, #108]	@ (800d5b0 <TIM_OC5_SetConfig+0x98>)
 800d544:	4013      	ands	r3, r2
 800d546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	68fa      	ldr	r2, [r7, #12]
 800d54e:	4313      	orrs	r3, r2
 800d550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d558:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	689b      	ldr	r3, [r3, #8]
 800d55e:	041b      	lsls	r3, r3, #16
 800d560:	693a      	ldr	r2, [r7, #16]
 800d562:	4313      	orrs	r3, r2
 800d564:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	4a12      	ldr	r2, [pc, #72]	@ (800d5b4 <TIM_OC5_SetConfig+0x9c>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d003      	beq.n	800d576 <TIM_OC5_SetConfig+0x5e>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	4a11      	ldr	r2, [pc, #68]	@ (800d5b8 <TIM_OC5_SetConfig+0xa0>)
 800d572:	4293      	cmp	r3, r2
 800d574:	d109      	bne.n	800d58a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d57c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	695b      	ldr	r3, [r3, #20]
 800d582:	021b      	lsls	r3, r3, #8
 800d584:	697a      	ldr	r2, [r7, #20]
 800d586:	4313      	orrs	r3, r2
 800d588:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	697a      	ldr	r2, [r7, #20]
 800d58e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	68fa      	ldr	r2, [r7, #12]
 800d594:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	685a      	ldr	r2, [r3, #4]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	693a      	ldr	r2, [r7, #16]
 800d5a2:	621a      	str	r2, [r3, #32]
}
 800d5a4:	bf00      	nop
 800d5a6:	371c      	adds	r7, #28
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr
 800d5b0:	fffeff8f 	.word	0xfffeff8f
 800d5b4:	40010000 	.word	0x40010000
 800d5b8:	40010400 	.word	0x40010400

0800d5bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b087      	sub	sp, #28
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6a1b      	ldr	r3, [r3, #32]
 800d5ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6a1b      	ldr	r3, [r3, #32]
 800d5d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d5e4:	68fa      	ldr	r2, [r7, #12]
 800d5e6:	4b1c      	ldr	r3, [pc, #112]	@ (800d658 <TIM_OC6_SetConfig+0x9c>)
 800d5e8:	4013      	ands	r3, r2
 800d5ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	021b      	lsls	r3, r3, #8
 800d5f2:	68fa      	ldr	r2, [r7, #12]
 800d5f4:	4313      	orrs	r3, r2
 800d5f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d5fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	689b      	ldr	r3, [r3, #8]
 800d604:	051b      	lsls	r3, r3, #20
 800d606:	693a      	ldr	r2, [r7, #16]
 800d608:	4313      	orrs	r3, r2
 800d60a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	4a13      	ldr	r2, [pc, #76]	@ (800d65c <TIM_OC6_SetConfig+0xa0>)
 800d610:	4293      	cmp	r3, r2
 800d612:	d003      	beq.n	800d61c <TIM_OC6_SetConfig+0x60>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	4a12      	ldr	r2, [pc, #72]	@ (800d660 <TIM_OC6_SetConfig+0xa4>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d109      	bne.n	800d630 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d622:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	695b      	ldr	r3, [r3, #20]
 800d628:	029b      	lsls	r3, r3, #10
 800d62a:	697a      	ldr	r2, [r7, #20]
 800d62c:	4313      	orrs	r3, r2
 800d62e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	697a      	ldr	r2, [r7, #20]
 800d634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	68fa      	ldr	r2, [r7, #12]
 800d63a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	685a      	ldr	r2, [r3, #4]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	693a      	ldr	r2, [r7, #16]
 800d648:	621a      	str	r2, [r3, #32]
}
 800d64a:	bf00      	nop
 800d64c:	371c      	adds	r7, #28
 800d64e:	46bd      	mov	sp, r7
 800d650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d654:	4770      	bx	lr
 800d656:	bf00      	nop
 800d658:	feff8fff 	.word	0xfeff8fff
 800d65c:	40010000 	.word	0x40010000
 800d660:	40010400 	.word	0x40010400

0800d664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d664:	b480      	push	{r7}
 800d666:	b087      	sub	sp, #28
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	6a1b      	ldr	r3, [r3, #32]
 800d674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	6a1b      	ldr	r3, [r3, #32]
 800d67a:	f023 0201 	bic.w	r2, r3, #1
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	699b      	ldr	r3, [r3, #24]
 800d686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d68e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	011b      	lsls	r3, r3, #4
 800d694:	693a      	ldr	r2, [r7, #16]
 800d696:	4313      	orrs	r3, r2
 800d698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	f023 030a 	bic.w	r3, r3, #10
 800d6a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d6a2:	697a      	ldr	r2, [r7, #20]
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	693a      	ldr	r2, [r7, #16]
 800d6ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	697a      	ldr	r2, [r7, #20]
 800d6b4:	621a      	str	r2, [r3, #32]
}
 800d6b6:	bf00      	nop
 800d6b8:	371c      	adds	r7, #28
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c0:	4770      	bx	lr

0800d6c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d6c2:	b480      	push	{r7}
 800d6c4:	b087      	sub	sp, #28
 800d6c6:	af00      	add	r7, sp, #0
 800d6c8:	60f8      	str	r0, [r7, #12]
 800d6ca:	60b9      	str	r1, [r7, #8]
 800d6cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	6a1b      	ldr	r3, [r3, #32]
 800d6d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	6a1b      	ldr	r3, [r3, #32]
 800d6d8:	f023 0210 	bic.w	r2, r3, #16
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	699b      	ldr	r3, [r3, #24]
 800d6e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d6ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	031b      	lsls	r3, r3, #12
 800d6f2:	693a      	ldr	r2, [r7, #16]
 800d6f4:	4313      	orrs	r3, r2
 800d6f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d6fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	011b      	lsls	r3, r3, #4
 800d704:	697a      	ldr	r2, [r7, #20]
 800d706:	4313      	orrs	r3, r2
 800d708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	693a      	ldr	r2, [r7, #16]
 800d70e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	697a      	ldr	r2, [r7, #20]
 800d714:	621a      	str	r2, [r3, #32]
}
 800d716:	bf00      	nop
 800d718:	371c      	adds	r7, #28
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr

0800d722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d722:	b480      	push	{r7}
 800d724:	b085      	sub	sp, #20
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
 800d72a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	689b      	ldr	r3, [r3, #8]
 800d730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d73a:	683a      	ldr	r2, [r7, #0]
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	4313      	orrs	r3, r2
 800d740:	f043 0307 	orr.w	r3, r3, #7
 800d744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	68fa      	ldr	r2, [r7, #12]
 800d74a:	609a      	str	r2, [r3, #8]
}
 800d74c:	bf00      	nop
 800d74e:	3714      	adds	r7, #20
 800d750:	46bd      	mov	sp, r7
 800d752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d756:	4770      	bx	lr

0800d758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d758:	b480      	push	{r7}
 800d75a:	b087      	sub	sp, #28
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	60f8      	str	r0, [r7, #12]
 800d760:	60b9      	str	r1, [r7, #8]
 800d762:	607a      	str	r2, [r7, #4]
 800d764:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	689b      	ldr	r3, [r3, #8]
 800d76a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d772:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	021a      	lsls	r2, r3, #8
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	431a      	orrs	r2, r3
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	4313      	orrs	r3, r2
 800d780:	697a      	ldr	r2, [r7, #20]
 800d782:	4313      	orrs	r3, r2
 800d784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	697a      	ldr	r2, [r7, #20]
 800d78a:	609a      	str	r2, [r3, #8]
}
 800d78c:	bf00      	nop
 800d78e:	371c      	adds	r7, #28
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr

0800d798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d798:	b480      	push	{r7}
 800d79a:	b085      	sub	sp, #20
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d101      	bne.n	800d7b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d7ac:	2302      	movs	r3, #2
 800d7ae:	e06d      	b.n	800d88c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2202      	movs	r2, #2
 800d7bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	685b      	ldr	r3, [r3, #4]
 800d7c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	689b      	ldr	r3, [r3, #8]
 800d7ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4a30      	ldr	r2, [pc, #192]	@ (800d898 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d004      	beq.n	800d7e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	4a2f      	ldr	r2, [pc, #188]	@ (800d89c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d108      	bne.n	800d7f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d7ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	685b      	ldr	r3, [r3, #4]
 800d7f0:	68fa      	ldr	r2, [r7, #12]
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	68fa      	ldr	r2, [r7, #12]
 800d804:	4313      	orrs	r3, r2
 800d806:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	68fa      	ldr	r2, [r7, #12]
 800d80e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4a20      	ldr	r2, [pc, #128]	@ (800d898 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d022      	beq.n	800d860 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d822:	d01d      	beq.n	800d860 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	4a1d      	ldr	r2, [pc, #116]	@ (800d8a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d018      	beq.n	800d860 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4a1c      	ldr	r2, [pc, #112]	@ (800d8a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d834:	4293      	cmp	r3, r2
 800d836:	d013      	beq.n	800d860 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4a1a      	ldr	r2, [pc, #104]	@ (800d8a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d00e      	beq.n	800d860 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4a15      	ldr	r2, [pc, #84]	@ (800d89c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d848:	4293      	cmp	r3, r2
 800d84a:	d009      	beq.n	800d860 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a16      	ldr	r2, [pc, #88]	@ (800d8ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d004      	beq.n	800d860 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4a15      	ldr	r2, [pc, #84]	@ (800d8b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d10c      	bne.n	800d87a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d860:	68bb      	ldr	r3, [r7, #8]
 800d862:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d866:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	689b      	ldr	r3, [r3, #8]
 800d86c:	68ba      	ldr	r2, [r7, #8]
 800d86e:	4313      	orrs	r3, r2
 800d870:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	68ba      	ldr	r2, [r7, #8]
 800d878:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2201      	movs	r2, #1
 800d87e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2200      	movs	r2, #0
 800d886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d88a:	2300      	movs	r3, #0
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3714      	adds	r7, #20
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr
 800d898:	40010000 	.word	0x40010000
 800d89c:	40010400 	.word	0x40010400
 800d8a0:	40000400 	.word	0x40000400
 800d8a4:	40000800 	.word	0x40000800
 800d8a8:	40000c00 	.word	0x40000c00
 800d8ac:	40014000 	.word	0x40014000
 800d8b0:	40001800 	.word	0x40001800

0800d8b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b085      	sub	sp, #20
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d101      	bne.n	800d8d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d8cc:	2302      	movs	r3, #2
 800d8ce:	e065      	b.n	800d99c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	4313      	orrs	r3, r2
 800d8e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	689b      	ldr	r3, [r3, #8]
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	4313      	orrs	r3, r2
 800d900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	4313      	orrs	r3, r2
 800d90e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	691b      	ldr	r3, [r3, #16]
 800d91a:	4313      	orrs	r3, r2
 800d91c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	695b      	ldr	r3, [r3, #20]
 800d928:	4313      	orrs	r3, r2
 800d92a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d936:	4313      	orrs	r3, r2
 800d938:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	699b      	ldr	r3, [r3, #24]
 800d944:	041b      	lsls	r3, r3, #16
 800d946:	4313      	orrs	r3, r2
 800d948:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	4a16      	ldr	r2, [pc, #88]	@ (800d9a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d004      	beq.n	800d95e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	4a14      	ldr	r2, [pc, #80]	@ (800d9ac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d115      	bne.n	800d98a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d968:	051b      	lsls	r3, r3, #20
 800d96a:	4313      	orrs	r3, r2
 800d96c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	69db      	ldr	r3, [r3, #28]
 800d978:	4313      	orrs	r3, r2
 800d97a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	6a1b      	ldr	r3, [r3, #32]
 800d986:	4313      	orrs	r3, r2
 800d988:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	68fa      	ldr	r2, [r7, #12]
 800d990:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2200      	movs	r2, #0
 800d996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d99a:	2300      	movs	r3, #0
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3714      	adds	r7, #20
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a6:	4770      	bx	lr
 800d9a8:	40010000 	.word	0x40010000
 800d9ac:	40010400 	.word	0x40010400

0800d9b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b083      	sub	sp, #12
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d9b8:	bf00      	nop
 800d9ba:	370c      	adds	r7, #12
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr

0800d9c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b083      	sub	sp, #12
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d9cc:	bf00      	nop
 800d9ce:	370c      	adds	r7, #12
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr

0800d9d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d9e0:	bf00      	nop
 800d9e2:	370c      	adds	r7, #12
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b082      	sub	sp, #8
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d101      	bne.n	800d9fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	e040      	b.n	800da80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800da02:	2b00      	cmp	r3, #0
 800da04:	d106      	bne.n	800da14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2200      	movs	r2, #0
 800da0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f7f6 fce0 	bl	80043d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2224      	movs	r2, #36	@ 0x24
 800da18:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	681a      	ldr	r2, [r3, #0]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f022 0201 	bic.w	r2, r2, #1
 800da28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d002      	beq.n	800da38 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 ffb6 	bl	800e9a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f000 fd4f 	bl	800e4dc <UART_SetConfig>
 800da3e:	4603      	mov	r3, r0
 800da40:	2b01      	cmp	r3, #1
 800da42:	d101      	bne.n	800da48 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800da44:	2301      	movs	r3, #1
 800da46:	e01b      	b.n	800da80 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	685a      	ldr	r2, [r3, #4]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800da56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	689a      	ldr	r2, [r3, #8]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800da66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	681a      	ldr	r2, [r3, #0]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f042 0201 	orr.w	r2, r2, #1
 800da76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f001 f835 	bl	800eae8 <UART_CheckIdleState>
 800da7e:	4603      	mov	r3, r0
}
 800da80:	4618      	mov	r0, r3
 800da82:	3708      	adds	r7, #8
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b08a      	sub	sp, #40	@ 0x28
 800da8c:	af02      	add	r7, sp, #8
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	60b9      	str	r1, [r7, #8]
 800da92:	603b      	str	r3, [r7, #0]
 800da94:	4613      	mov	r3, r2
 800da96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800da9c:	2b20      	cmp	r3, #32
 800da9e:	d177      	bne.n	800db90 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d002      	beq.n	800daac <HAL_UART_Transmit+0x24>
 800daa6:	88fb      	ldrh	r3, [r7, #6]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d101      	bne.n	800dab0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800daac:	2301      	movs	r3, #1
 800daae:	e070      	b.n	800db92 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2200      	movs	r2, #0
 800dab4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2221      	movs	r2, #33	@ 0x21
 800dabc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dabe:	f7f7 fb29 	bl	8005114 <HAL_GetTick>
 800dac2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	88fa      	ldrh	r2, [r7, #6]
 800dac8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	88fa      	ldrh	r2, [r7, #6]
 800dad0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	689b      	ldr	r3, [r3, #8]
 800dad8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dadc:	d108      	bne.n	800daf0 <HAL_UART_Transmit+0x68>
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	691b      	ldr	r3, [r3, #16]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d104      	bne.n	800daf0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800dae6:	2300      	movs	r3, #0
 800dae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	61bb      	str	r3, [r7, #24]
 800daee:	e003      	b.n	800daf8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800daf4:	2300      	movs	r3, #0
 800daf6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800daf8:	e02f      	b.n	800db5a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	9300      	str	r3, [sp, #0]
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	2200      	movs	r2, #0
 800db02:	2180      	movs	r1, #128	@ 0x80
 800db04:	68f8      	ldr	r0, [r7, #12]
 800db06:	f001 f846 	bl	800eb96 <UART_WaitOnFlagUntilTimeout>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d004      	beq.n	800db1a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	2220      	movs	r2, #32
 800db14:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800db16:	2303      	movs	r3, #3
 800db18:	e03b      	b.n	800db92 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800db1a:	69fb      	ldr	r3, [r7, #28]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d10b      	bne.n	800db38 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800db20:	69bb      	ldr	r3, [r7, #24]
 800db22:	881b      	ldrh	r3, [r3, #0]
 800db24:	461a      	mov	r2, r3
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800db2e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800db30:	69bb      	ldr	r3, [r7, #24]
 800db32:	3302      	adds	r3, #2
 800db34:	61bb      	str	r3, [r7, #24]
 800db36:	e007      	b.n	800db48 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800db38:	69fb      	ldr	r3, [r7, #28]
 800db3a:	781a      	ldrb	r2, [r3, #0]
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800db42:	69fb      	ldr	r3, [r7, #28]
 800db44:	3301      	adds	r3, #1
 800db46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800db4e:	b29b      	uxth	r3, r3
 800db50:	3b01      	subs	r3, #1
 800db52:	b29a      	uxth	r2, r3
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800db60:	b29b      	uxth	r3, r3
 800db62:	2b00      	cmp	r3, #0
 800db64:	d1c9      	bne.n	800dafa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	9300      	str	r3, [sp, #0]
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	2200      	movs	r2, #0
 800db6e:	2140      	movs	r1, #64	@ 0x40
 800db70:	68f8      	ldr	r0, [r7, #12]
 800db72:	f001 f810 	bl	800eb96 <UART_WaitOnFlagUntilTimeout>
 800db76:	4603      	mov	r3, r0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d004      	beq.n	800db86 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2220      	movs	r2, #32
 800db80:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800db82:	2303      	movs	r3, #3
 800db84:	e005      	b.n	800db92 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	2220      	movs	r2, #32
 800db8a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800db8c:	2300      	movs	r3, #0
 800db8e:	e000      	b.n	800db92 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800db90:	2302      	movs	r3, #2
  }
}
 800db92:	4618      	mov	r0, r3
 800db94:	3720      	adds	r7, #32
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}

0800db9a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db9a:	b580      	push	{r7, lr}
 800db9c:	b08a      	sub	sp, #40	@ 0x28
 800db9e:	af02      	add	r7, sp, #8
 800dba0:	60f8      	str	r0, [r7, #12]
 800dba2:	60b9      	str	r1, [r7, #8]
 800dba4:	603b      	str	r3, [r7, #0]
 800dba6:	4613      	mov	r3, r2
 800dba8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dbb0:	2b20      	cmp	r3, #32
 800dbb2:	f040 80b5 	bne.w	800dd20 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d002      	beq.n	800dbc2 <HAL_UART_Receive+0x28>
 800dbbc:	88fb      	ldrh	r3, [r7, #6]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d101      	bne.n	800dbc6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	e0ad      	b.n	800dd22 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2222      	movs	r2, #34	@ 0x22
 800dbd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dbdc:	f7f7 fa9a 	bl	8005114 <HAL_GetTick>
 800dbe0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	88fa      	ldrh	r2, [r7, #6]
 800dbe6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	88fa      	ldrh	r2, [r7, #6]
 800dbee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	689b      	ldr	r3, [r3, #8]
 800dbf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dbfa:	d10e      	bne.n	800dc1a <HAL_UART_Receive+0x80>
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	691b      	ldr	r3, [r3, #16]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d105      	bne.n	800dc10 <HAL_UART_Receive+0x76>
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800dc0a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800dc0e:	e02d      	b.n	800dc6c <HAL_UART_Receive+0xd2>
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	22ff      	movs	r2, #255	@ 0xff
 800dc14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800dc18:	e028      	b.n	800dc6c <HAL_UART_Receive+0xd2>
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	689b      	ldr	r3, [r3, #8]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d10d      	bne.n	800dc3e <HAL_UART_Receive+0xa4>
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	691b      	ldr	r3, [r3, #16]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d104      	bne.n	800dc34 <HAL_UART_Receive+0x9a>
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	22ff      	movs	r2, #255	@ 0xff
 800dc2e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800dc32:	e01b      	b.n	800dc6c <HAL_UART_Receive+0xd2>
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	227f      	movs	r2, #127	@ 0x7f
 800dc38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800dc3c:	e016      	b.n	800dc6c <HAL_UART_Receive+0xd2>
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	689b      	ldr	r3, [r3, #8]
 800dc42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dc46:	d10d      	bne.n	800dc64 <HAL_UART_Receive+0xca>
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	691b      	ldr	r3, [r3, #16]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d104      	bne.n	800dc5a <HAL_UART_Receive+0xc0>
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	227f      	movs	r2, #127	@ 0x7f
 800dc54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800dc58:	e008      	b.n	800dc6c <HAL_UART_Receive+0xd2>
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	223f      	movs	r2, #63	@ 0x3f
 800dc5e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800dc62:	e003      	b.n	800dc6c <HAL_UART_Receive+0xd2>
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2200      	movs	r2, #0
 800dc68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dc72:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	689b      	ldr	r3, [r3, #8]
 800dc78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dc7c:	d108      	bne.n	800dc90 <HAL_UART_Receive+0xf6>
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	691b      	ldr	r3, [r3, #16]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d104      	bne.n	800dc90 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800dc86:	2300      	movs	r3, #0
 800dc88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	61bb      	str	r3, [r7, #24]
 800dc8e:	e003      	b.n	800dc98 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dc94:	2300      	movs	r3, #0
 800dc96:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800dc98:	e036      	b.n	800dd08 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	9300      	str	r3, [sp, #0]
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	2200      	movs	r2, #0
 800dca2:	2120      	movs	r1, #32
 800dca4:	68f8      	ldr	r0, [r7, #12]
 800dca6:	f000 ff76 	bl	800eb96 <UART_WaitOnFlagUntilTimeout>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d005      	beq.n	800dcbc <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2220      	movs	r2, #32
 800dcb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800dcb8:	2303      	movs	r3, #3
 800dcba:	e032      	b.n	800dd22 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d10c      	bne.n	800dcdc <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcc8:	b29a      	uxth	r2, r3
 800dcca:	8a7b      	ldrh	r3, [r7, #18]
 800dccc:	4013      	ands	r3, r2
 800dcce:	b29a      	uxth	r2, r3
 800dcd0:	69bb      	ldr	r3, [r7, #24]
 800dcd2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800dcd4:	69bb      	ldr	r3, [r7, #24]
 800dcd6:	3302      	adds	r3, #2
 800dcd8:	61bb      	str	r3, [r7, #24]
 800dcda:	e00c      	b.n	800dcf6 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dce2:	b2da      	uxtb	r2, r3
 800dce4:	8a7b      	ldrh	r3, [r7, #18]
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	4013      	ands	r3, r2
 800dcea:	b2da      	uxtb	r2, r3
 800dcec:	69fb      	ldr	r3, [r7, #28]
 800dcee:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800dcf0:	69fb      	ldr	r3, [r7, #28]
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800dcfc:	b29b      	uxth	r3, r3
 800dcfe:	3b01      	subs	r3, #1
 800dd00:	b29a      	uxth	r2, r3
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d1c2      	bne.n	800dc9a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	2220      	movs	r2, #32
 800dd18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	e000      	b.n	800dd22 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800dd20:	2302      	movs	r3, #2
  }
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3720      	adds	r7, #32
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}

0800dd2a <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd2a:	b580      	push	{r7, lr}
 800dd2c:	b08a      	sub	sp, #40	@ 0x28
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	60f8      	str	r0, [r7, #12]
 800dd32:	60b9      	str	r1, [r7, #8]
 800dd34:	4613      	mov	r3, r2
 800dd36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd3e:	2b20      	cmp	r3, #32
 800dd40:	d132      	bne.n	800dda8 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d002      	beq.n	800dd4e <HAL_UART_Receive_DMA+0x24>
 800dd48:	88fb      	ldrh	r3, [r7, #6]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d101      	bne.n	800dd52 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800dd4e:	2301      	movs	r3, #1
 800dd50:	e02b      	b.n	800ddaa <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2200      	movs	r2, #0
 800dd56:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d018      	beq.n	800dd98 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	e853 3f00 	ldrex	r3, [r3]
 800dd72:	613b      	str	r3, [r7, #16]
   return(result);
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dd7a:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	461a      	mov	r2, r3
 800dd82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd84:	623b      	str	r3, [r7, #32]
 800dd86:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd88:	69f9      	ldr	r1, [r7, #28]
 800dd8a:	6a3a      	ldr	r2, [r7, #32]
 800dd8c:	e841 2300 	strex	r3, r2, [r1]
 800dd90:	61bb      	str	r3, [r7, #24]
   return(result);
 800dd92:	69bb      	ldr	r3, [r7, #24]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d1e6      	bne.n	800dd66 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800dd98:	88fb      	ldrh	r3, [r7, #6]
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	68b9      	ldr	r1, [r7, #8]
 800dd9e:	68f8      	ldr	r0, [r7, #12]
 800dda0:	f000 ff66 	bl	800ec70 <UART_Start_Receive_DMA>
 800dda4:	4603      	mov	r3, r0
 800dda6:	e000      	b.n	800ddaa <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800dda8:	2302      	movs	r3, #2
  }
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3728      	adds	r7, #40	@ 0x28
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}

0800ddb2 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b090      	sub	sp, #64	@ 0x40
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ddbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ddc6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	689b      	ldr	r3, [r3, #8]
 800ddce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ddd2:	2b80      	cmp	r3, #128	@ 0x80
 800ddd4:	d139      	bne.n	800de4a <HAL_UART_DMAStop+0x98>
 800ddd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddd8:	2b21      	cmp	r3, #33	@ 0x21
 800ddda:	d136      	bne.n	800de4a <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	3308      	adds	r3, #8
 800dde2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dde4:	6a3b      	ldr	r3, [r7, #32]
 800dde6:	e853 3f00 	ldrex	r3, [r3]
 800ddea:	61fb      	str	r3, [r7, #28]
   return(result);
 800ddec:	69fb      	ldr	r3, [r7, #28]
 800ddee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ddf2:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	3308      	adds	r3, #8
 800ddfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ddfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ddfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800de02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de04:	e841 2300 	strex	r3, r2, [r1]
 800de08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800de0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d1e5      	bne.n	800dddc <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de14:	2b00      	cmp	r3, #0
 800de16:	d015      	beq.n	800de44 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7f7 ff9d 	bl	8005d5c <HAL_DMA_Abort>
 800de22:	4603      	mov	r3, r0
 800de24:	2b00      	cmp	r3, #0
 800de26:	d00d      	beq.n	800de44 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de2c:	4618      	mov	r0, r3
 800de2e:	f7f8 f9b1 	bl	8006194 <HAL_DMA_GetError>
 800de32:	4603      	mov	r3, r0
 800de34:	2b20      	cmp	r3, #32
 800de36:	d105      	bne.n	800de44 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2210      	movs	r2, #16
 800de3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800de40:	2303      	movs	r3, #3
 800de42:	e044      	b.n	800dece <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f000 ffb3 	bl	800edb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	689b      	ldr	r3, [r3, #8]
 800de50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de54:	2b40      	cmp	r3, #64	@ 0x40
 800de56:	d139      	bne.n	800decc <HAL_UART_DMAStop+0x11a>
 800de58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de5a:	2b22      	cmp	r3, #34	@ 0x22
 800de5c:	d136      	bne.n	800decc <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	3308      	adds	r3, #8
 800de64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	e853 3f00 	ldrex	r3, [r3]
 800de6c:	60bb      	str	r3, [r7, #8]
   return(result);
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800de74:	633b      	str	r3, [r7, #48]	@ 0x30
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	3308      	adds	r3, #8
 800de7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de7e:	61ba      	str	r2, [r7, #24]
 800de80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de82:	6979      	ldr	r1, [r7, #20]
 800de84:	69ba      	ldr	r2, [r7, #24]
 800de86:	e841 2300 	strex	r3, r2, [r1]
 800de8a:	613b      	str	r3, [r7, #16]
   return(result);
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d1e5      	bne.n	800de5e <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de96:	2b00      	cmp	r3, #0
 800de98:	d015      	beq.n	800dec6 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7f7 ff5c 	bl	8005d5c <HAL_DMA_Abort>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d00d      	beq.n	800dec6 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800deae:	4618      	mov	r0, r3
 800deb0:	f7f8 f970 	bl	8006194 <HAL_DMA_GetError>
 800deb4:	4603      	mov	r3, r0
 800deb6:	2b20      	cmp	r3, #32
 800deb8:	d105      	bne.n	800dec6 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2210      	movs	r2, #16
 800debe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dec2:	2303      	movs	r3, #3
 800dec4:	e003      	b.n	800dece <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f000 ff98 	bl	800edfc <UART_EndRxTransfer>
  }

  return HAL_OK;
 800decc:	2300      	movs	r3, #0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3740      	adds	r7, #64	@ 0x40
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
	...

0800ded8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b0ba      	sub	sp, #232	@ 0xe8
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	69db      	ldr	r3, [r3, #28]
 800dee6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	689b      	ldr	r3, [r3, #8]
 800defa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800defe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800df02:	f640 030f 	movw	r3, #2063	@ 0x80f
 800df06:	4013      	ands	r3, r2
 800df08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800df0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800df10:	2b00      	cmp	r3, #0
 800df12:	d115      	bne.n	800df40 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800df14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df18:	f003 0320 	and.w	r3, r3, #32
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d00f      	beq.n	800df40 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800df20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800df24:	f003 0320 	and.w	r3, r3, #32
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d009      	beq.n	800df40 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800df30:	2b00      	cmp	r3, #0
 800df32:	f000 82b1 	beq.w	800e498 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	4798      	blx	r3
      }
      return;
 800df3e:	e2ab      	b.n	800e498 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800df40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800df44:	2b00      	cmp	r3, #0
 800df46:	f000 8117 	beq.w	800e178 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800df4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800df4e:	f003 0301 	and.w	r3, r3, #1
 800df52:	2b00      	cmp	r3, #0
 800df54:	d106      	bne.n	800df64 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800df56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800df5a:	4b85      	ldr	r3, [pc, #532]	@ (800e170 <HAL_UART_IRQHandler+0x298>)
 800df5c:	4013      	ands	r3, r2
 800df5e:	2b00      	cmp	r3, #0
 800df60:	f000 810a 	beq.w	800e178 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800df64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df68:	f003 0301 	and.w	r3, r3, #1
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d011      	beq.n	800df94 <HAL_UART_IRQHandler+0xbc>
 800df70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800df74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d00b      	beq.n	800df94 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	2201      	movs	r2, #1
 800df82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df8a:	f043 0201 	orr.w	r2, r3, #1
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800df94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df98:	f003 0302 	and.w	r3, r3, #2
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d011      	beq.n	800dfc4 <HAL_UART_IRQHandler+0xec>
 800dfa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dfa4:	f003 0301 	and.w	r3, r3, #1
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d00b      	beq.n	800dfc4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	2202      	movs	r2, #2
 800dfb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dfba:	f043 0204 	orr.w	r2, r3, #4
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dfc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dfc8:	f003 0304 	and.w	r3, r3, #4
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d011      	beq.n	800dff4 <HAL_UART_IRQHandler+0x11c>
 800dfd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dfd4:	f003 0301 	and.w	r3, r3, #1
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d00b      	beq.n	800dff4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	2204      	movs	r2, #4
 800dfe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dfea:	f043 0202 	orr.w	r2, r3, #2
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dff8:	f003 0308 	and.w	r3, r3, #8
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d017      	beq.n	800e030 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e004:	f003 0320 	and.w	r3, r3, #32
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d105      	bne.n	800e018 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e00c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e010:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e014:	2b00      	cmp	r3, #0
 800e016:	d00b      	beq.n	800e030 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2208      	movs	r2, #8
 800e01e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e026:	f043 0208 	orr.w	r2, r3, #8
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e034:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d012      	beq.n	800e062 <HAL_UART_IRQHandler+0x18a>
 800e03c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e040:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e044:	2b00      	cmp	r3, #0
 800e046:	d00c      	beq.n	800e062 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e050:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e058:	f043 0220 	orr.w	r2, r3, #32
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e068:	2b00      	cmp	r3, #0
 800e06a:	f000 8217 	beq.w	800e49c <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e06e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e072:	f003 0320 	and.w	r3, r3, #32
 800e076:	2b00      	cmp	r3, #0
 800e078:	d00d      	beq.n	800e096 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e07a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e07e:	f003 0320 	and.w	r3, r3, #32
 800e082:	2b00      	cmp	r3, #0
 800e084:	d007      	beq.n	800e096 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d003      	beq.n	800e096 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e09c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	689b      	ldr	r3, [r3, #8]
 800e0a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0aa:	2b40      	cmp	r3, #64	@ 0x40
 800e0ac:	d005      	beq.n	800e0ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e0ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e0b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d04f      	beq.n	800e15a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f000 fe9e 	bl	800edfc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	689b      	ldr	r3, [r3, #8]
 800e0c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0ca:	2b40      	cmp	r3, #64	@ 0x40
 800e0cc:	d141      	bne.n	800e152 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	3308      	adds	r3, #8
 800e0d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e0dc:	e853 3f00 	ldrex	r3, [r3]
 800e0e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e0e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e0e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e0ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	3308      	adds	r3, #8
 800e0f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e0fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e0fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e102:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e106:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e10a:	e841 2300 	strex	r3, r2, [r1]
 800e10e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e112:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e116:	2b00      	cmp	r3, #0
 800e118:	d1d9      	bne.n	800e0ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d013      	beq.n	800e14a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e126:	4a13      	ldr	r2, [pc, #76]	@ (800e174 <HAL_UART_IRQHandler+0x29c>)
 800e128:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e12e:	4618      	mov	r0, r3
 800e130:	f7f7 fe84 	bl	8005e3c <HAL_DMA_Abort_IT>
 800e134:	4603      	mov	r3, r0
 800e136:	2b00      	cmp	r3, #0
 800e138:	d017      	beq.n	800e16a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e13e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e140:	687a      	ldr	r2, [r7, #4]
 800e142:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800e144:	4610      	mov	r0, r2
 800e146:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e148:	e00f      	b.n	800e16a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f7f6 fe70 	bl	8004e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e150:	e00b      	b.n	800e16a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f7f6 fe6c 	bl	8004e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e158:	e007      	b.n	800e16a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f7f6 fe68 	bl	8004e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2200      	movs	r2, #0
 800e164:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800e168:	e198      	b.n	800e49c <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e16a:	bf00      	nop
    return;
 800e16c:	e196      	b.n	800e49c <HAL_UART_IRQHandler+0x5c4>
 800e16e:	bf00      	nop
 800e170:	04000120 	.word	0x04000120
 800e174:	0800f113 	.word	0x0800f113

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	f040 8166 	bne.w	800e44e <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e186:	f003 0310 	and.w	r3, r3, #16
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	f000 815f 	beq.w	800e44e <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e194:	f003 0310 	and.w	r3, r3, #16
 800e198:	2b00      	cmp	r3, #0
 800e19a:	f000 8158 	beq.w	800e44e <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	2210      	movs	r2, #16
 800e1a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	689b      	ldr	r3, [r3, #8]
 800e1ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1b0:	2b40      	cmp	r3, #64	@ 0x40
 800e1b2:	f040 80d0 	bne.w	800e356 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	685b      	ldr	r3, [r3, #4]
 800e1be:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e1c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	f000 80ab 	beq.w	800e322 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e1d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	f080 80a3 	bcs.w	800e322 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e1e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1ea:	69db      	ldr	r3, [r3, #28]
 800e1ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e1f0:	f000 8086 	beq.w	800e300 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e200:	e853 3f00 	ldrex	r3, [r3]
 800e204:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e208:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e20c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e210:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	461a      	mov	r2, r3
 800e21a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e21e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e222:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e226:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e22a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e22e:	e841 2300 	strex	r3, r2, [r1]
 800e232:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e236:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d1da      	bne.n	800e1f4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	3308      	adds	r3, #8
 800e244:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e246:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e248:	e853 3f00 	ldrex	r3, [r3]
 800e24c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e24e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e250:	f023 0301 	bic.w	r3, r3, #1
 800e254:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	3308      	adds	r3, #8
 800e25e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e262:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e266:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e268:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e26a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e26e:	e841 2300 	strex	r3, r2, [r1]
 800e272:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e274:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e276:	2b00      	cmp	r3, #0
 800e278:	d1e1      	bne.n	800e23e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	3308      	adds	r3, #8
 800e280:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e282:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e284:	e853 3f00 	ldrex	r3, [r3]
 800e288:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e28a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e28c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e290:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	3308      	adds	r3, #8
 800e29a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e29e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e2a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e2a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e2a6:	e841 2300 	strex	r3, r2, [r1]
 800e2aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e2ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d1e3      	bne.n	800e27a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2220      	movs	r2, #32
 800e2b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2c8:	e853 3f00 	ldrex	r3, [r3]
 800e2cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e2ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e2d0:	f023 0310 	bic.w	r3, r3, #16
 800e2d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	461a      	mov	r2, r3
 800e2de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e2e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e2e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e2e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e2ea:	e841 2300 	strex	r3, r2, [r1]
 800e2ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e2f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d1e4      	bne.n	800e2c0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f7f7 fd2e 	bl	8005d5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2202      	movs	r2, #2
 800e304:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e312:	b29b      	uxth	r3, r3
 800e314:	1ad3      	subs	r3, r2, r3
 800e316:	b29b      	uxth	r3, r3
 800e318:	4619      	mov	r1, r3
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f000 f8d2 	bl	800e4c4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800e320:	e0be      	b.n	800e4a0 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e328:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e32c:	429a      	cmp	r2, r3
 800e32e:	f040 80b7 	bne.w	800e4a0 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e336:	69db      	ldr	r3, [r3, #28]
 800e338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e33c:	f040 80b0 	bne.w	800e4a0 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2202      	movs	r2, #2
 800e344:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e34c:	4619      	mov	r1, r3
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f000 f8b8 	bl	800e4c4 <HAL_UARTEx_RxEventCallback>
      return;
 800e354:	e0a4      	b.n	800e4a0 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e362:	b29b      	uxth	r3, r3
 800e364:	1ad3      	subs	r3, r2, r3
 800e366:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e370:	b29b      	uxth	r3, r3
 800e372:	2b00      	cmp	r3, #0
 800e374:	f000 8096 	beq.w	800e4a4 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800e378:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	f000 8091 	beq.w	800e4a4 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e38a:	e853 3f00 	ldrex	r3, [r3]
 800e38e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e392:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e396:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	461a      	mov	r2, r3
 800e3a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e3a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e3a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e3aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e3ac:	e841 2300 	strex	r3, r2, [r1]
 800e3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e3b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d1e4      	bne.n	800e382 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	3308      	adds	r3, #8
 800e3be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3c2:	e853 3f00 	ldrex	r3, [r3]
 800e3c6:	623b      	str	r3, [r7, #32]
   return(result);
 800e3c8:	6a3b      	ldr	r3, [r7, #32]
 800e3ca:	f023 0301 	bic.w	r3, r3, #1
 800e3ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	3308      	adds	r3, #8
 800e3d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e3dc:	633a      	str	r2, [r7, #48]	@ 0x30
 800e3de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e3e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3e4:	e841 2300 	strex	r3, r2, [r1]
 800e3e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d1e3      	bne.n	800e3b8 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2220      	movs	r2, #32
 800e3f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2200      	movs	r2, #0
 800e402:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e40a:	693b      	ldr	r3, [r7, #16]
 800e40c:	e853 3f00 	ldrex	r3, [r3]
 800e410:	60fb      	str	r3, [r7, #12]
   return(result);
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	f023 0310 	bic.w	r3, r3, #16
 800e418:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	461a      	mov	r2, r3
 800e422:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e426:	61fb      	str	r3, [r7, #28]
 800e428:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e42a:	69b9      	ldr	r1, [r7, #24]
 800e42c:	69fa      	ldr	r2, [r7, #28]
 800e42e:	e841 2300 	strex	r3, r2, [r1]
 800e432:	617b      	str	r3, [r7, #20]
   return(result);
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d1e4      	bne.n	800e404 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2202      	movs	r2, #2
 800e43e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e440:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e444:	4619      	mov	r1, r3
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f000 f83c 	bl	800e4c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e44c:	e02a      	b.n	800e4a4 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e44e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e456:	2b00      	cmp	r3, #0
 800e458:	d00e      	beq.n	800e478 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e45a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e45e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e462:	2b00      	cmp	r3, #0
 800e464:	d008      	beq.n	800e478 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d01c      	beq.n	800e4a8 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	4798      	blx	r3
    }
    return;
 800e476:	e017      	b.n	800e4a8 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e47c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e480:	2b00      	cmp	r3, #0
 800e482:	d012      	beq.n	800e4aa <HAL_UART_IRQHandler+0x5d2>
 800e484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d00c      	beq.n	800e4aa <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f000 fe50 	bl	800f136 <UART_EndTransmit_IT>
    return;
 800e496:	e008      	b.n	800e4aa <HAL_UART_IRQHandler+0x5d2>
      return;
 800e498:	bf00      	nop
 800e49a:	e006      	b.n	800e4aa <HAL_UART_IRQHandler+0x5d2>
    return;
 800e49c:	bf00      	nop
 800e49e:	e004      	b.n	800e4aa <HAL_UART_IRQHandler+0x5d2>
      return;
 800e4a0:	bf00      	nop
 800e4a2:	e002      	b.n	800e4aa <HAL_UART_IRQHandler+0x5d2>
      return;
 800e4a4:	bf00      	nop
 800e4a6:	e000      	b.n	800e4aa <HAL_UART_IRQHandler+0x5d2>
    return;
 800e4a8:	bf00      	nop
  }

}
 800e4aa:	37e8      	adds	r7, #232	@ 0xe8
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b083      	sub	sp, #12
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e4b8:	bf00      	nop
 800e4ba:	370c      	adds	r7, #12
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr

0800e4c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b083      	sub	sp, #12
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e4d0:	bf00      	nop
 800e4d2:	370c      	adds	r7, #12
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr

0800e4dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b088      	sub	sp, #32
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	689a      	ldr	r2, [r3, #8]
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	691b      	ldr	r3, [r3, #16]
 800e4f0:	431a      	orrs	r2, r3
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	695b      	ldr	r3, [r3, #20]
 800e4f6:	431a      	orrs	r2, r3
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	69db      	ldr	r3, [r3, #28]
 800e4fc:	4313      	orrs	r3, r2
 800e4fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	681a      	ldr	r2, [r3, #0]
 800e506:	4ba6      	ldr	r3, [pc, #664]	@ (800e7a0 <UART_SetConfig+0x2c4>)
 800e508:	4013      	ands	r3, r2
 800e50a:	687a      	ldr	r2, [r7, #4]
 800e50c:	6812      	ldr	r2, [r2, #0]
 800e50e:	6979      	ldr	r1, [r7, #20]
 800e510:	430b      	orrs	r3, r1
 800e512:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	685b      	ldr	r3, [r3, #4]
 800e51a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	68da      	ldr	r2, [r3, #12]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	430a      	orrs	r2, r1
 800e528:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	699b      	ldr	r3, [r3, #24]
 800e52e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6a1b      	ldr	r3, [r3, #32]
 800e534:	697a      	ldr	r2, [r7, #20]
 800e536:	4313      	orrs	r3, r2
 800e538:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	689b      	ldr	r3, [r3, #8]
 800e540:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	697a      	ldr	r2, [r7, #20]
 800e54a:	430a      	orrs	r2, r1
 800e54c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	4a94      	ldr	r2, [pc, #592]	@ (800e7a4 <UART_SetConfig+0x2c8>)
 800e554:	4293      	cmp	r3, r2
 800e556:	d120      	bne.n	800e59a <UART_SetConfig+0xbe>
 800e558:	4b93      	ldr	r3, [pc, #588]	@ (800e7a8 <UART_SetConfig+0x2cc>)
 800e55a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e55e:	f003 0303 	and.w	r3, r3, #3
 800e562:	2b03      	cmp	r3, #3
 800e564:	d816      	bhi.n	800e594 <UART_SetConfig+0xb8>
 800e566:	a201      	add	r2, pc, #4	@ (adr r2, 800e56c <UART_SetConfig+0x90>)
 800e568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e56c:	0800e57d 	.word	0x0800e57d
 800e570:	0800e589 	.word	0x0800e589
 800e574:	0800e583 	.word	0x0800e583
 800e578:	0800e58f 	.word	0x0800e58f
 800e57c:	2301      	movs	r3, #1
 800e57e:	77fb      	strb	r3, [r7, #31]
 800e580:	e150      	b.n	800e824 <UART_SetConfig+0x348>
 800e582:	2302      	movs	r3, #2
 800e584:	77fb      	strb	r3, [r7, #31]
 800e586:	e14d      	b.n	800e824 <UART_SetConfig+0x348>
 800e588:	2304      	movs	r3, #4
 800e58a:	77fb      	strb	r3, [r7, #31]
 800e58c:	e14a      	b.n	800e824 <UART_SetConfig+0x348>
 800e58e:	2308      	movs	r3, #8
 800e590:	77fb      	strb	r3, [r7, #31]
 800e592:	e147      	b.n	800e824 <UART_SetConfig+0x348>
 800e594:	2310      	movs	r3, #16
 800e596:	77fb      	strb	r3, [r7, #31]
 800e598:	e144      	b.n	800e824 <UART_SetConfig+0x348>
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	4a83      	ldr	r2, [pc, #524]	@ (800e7ac <UART_SetConfig+0x2d0>)
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	d132      	bne.n	800e60a <UART_SetConfig+0x12e>
 800e5a4:	4b80      	ldr	r3, [pc, #512]	@ (800e7a8 <UART_SetConfig+0x2cc>)
 800e5a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5aa:	f003 030c 	and.w	r3, r3, #12
 800e5ae:	2b0c      	cmp	r3, #12
 800e5b0:	d828      	bhi.n	800e604 <UART_SetConfig+0x128>
 800e5b2:	a201      	add	r2, pc, #4	@ (adr r2, 800e5b8 <UART_SetConfig+0xdc>)
 800e5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b8:	0800e5ed 	.word	0x0800e5ed
 800e5bc:	0800e605 	.word	0x0800e605
 800e5c0:	0800e605 	.word	0x0800e605
 800e5c4:	0800e605 	.word	0x0800e605
 800e5c8:	0800e5f9 	.word	0x0800e5f9
 800e5cc:	0800e605 	.word	0x0800e605
 800e5d0:	0800e605 	.word	0x0800e605
 800e5d4:	0800e605 	.word	0x0800e605
 800e5d8:	0800e5f3 	.word	0x0800e5f3
 800e5dc:	0800e605 	.word	0x0800e605
 800e5e0:	0800e605 	.word	0x0800e605
 800e5e4:	0800e605 	.word	0x0800e605
 800e5e8:	0800e5ff 	.word	0x0800e5ff
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	77fb      	strb	r3, [r7, #31]
 800e5f0:	e118      	b.n	800e824 <UART_SetConfig+0x348>
 800e5f2:	2302      	movs	r3, #2
 800e5f4:	77fb      	strb	r3, [r7, #31]
 800e5f6:	e115      	b.n	800e824 <UART_SetConfig+0x348>
 800e5f8:	2304      	movs	r3, #4
 800e5fa:	77fb      	strb	r3, [r7, #31]
 800e5fc:	e112      	b.n	800e824 <UART_SetConfig+0x348>
 800e5fe:	2308      	movs	r3, #8
 800e600:	77fb      	strb	r3, [r7, #31]
 800e602:	e10f      	b.n	800e824 <UART_SetConfig+0x348>
 800e604:	2310      	movs	r3, #16
 800e606:	77fb      	strb	r3, [r7, #31]
 800e608:	e10c      	b.n	800e824 <UART_SetConfig+0x348>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	4a68      	ldr	r2, [pc, #416]	@ (800e7b0 <UART_SetConfig+0x2d4>)
 800e610:	4293      	cmp	r3, r2
 800e612:	d120      	bne.n	800e656 <UART_SetConfig+0x17a>
 800e614:	4b64      	ldr	r3, [pc, #400]	@ (800e7a8 <UART_SetConfig+0x2cc>)
 800e616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e61a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800e61e:	2b30      	cmp	r3, #48	@ 0x30
 800e620:	d013      	beq.n	800e64a <UART_SetConfig+0x16e>
 800e622:	2b30      	cmp	r3, #48	@ 0x30
 800e624:	d814      	bhi.n	800e650 <UART_SetConfig+0x174>
 800e626:	2b20      	cmp	r3, #32
 800e628:	d009      	beq.n	800e63e <UART_SetConfig+0x162>
 800e62a:	2b20      	cmp	r3, #32
 800e62c:	d810      	bhi.n	800e650 <UART_SetConfig+0x174>
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d002      	beq.n	800e638 <UART_SetConfig+0x15c>
 800e632:	2b10      	cmp	r3, #16
 800e634:	d006      	beq.n	800e644 <UART_SetConfig+0x168>
 800e636:	e00b      	b.n	800e650 <UART_SetConfig+0x174>
 800e638:	2300      	movs	r3, #0
 800e63a:	77fb      	strb	r3, [r7, #31]
 800e63c:	e0f2      	b.n	800e824 <UART_SetConfig+0x348>
 800e63e:	2302      	movs	r3, #2
 800e640:	77fb      	strb	r3, [r7, #31]
 800e642:	e0ef      	b.n	800e824 <UART_SetConfig+0x348>
 800e644:	2304      	movs	r3, #4
 800e646:	77fb      	strb	r3, [r7, #31]
 800e648:	e0ec      	b.n	800e824 <UART_SetConfig+0x348>
 800e64a:	2308      	movs	r3, #8
 800e64c:	77fb      	strb	r3, [r7, #31]
 800e64e:	e0e9      	b.n	800e824 <UART_SetConfig+0x348>
 800e650:	2310      	movs	r3, #16
 800e652:	77fb      	strb	r3, [r7, #31]
 800e654:	e0e6      	b.n	800e824 <UART_SetConfig+0x348>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	4a56      	ldr	r2, [pc, #344]	@ (800e7b4 <UART_SetConfig+0x2d8>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d120      	bne.n	800e6a2 <UART_SetConfig+0x1c6>
 800e660:	4b51      	ldr	r3, [pc, #324]	@ (800e7a8 <UART_SetConfig+0x2cc>)
 800e662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e666:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800e66a:	2bc0      	cmp	r3, #192	@ 0xc0
 800e66c:	d013      	beq.n	800e696 <UART_SetConfig+0x1ba>
 800e66e:	2bc0      	cmp	r3, #192	@ 0xc0
 800e670:	d814      	bhi.n	800e69c <UART_SetConfig+0x1c0>
 800e672:	2b80      	cmp	r3, #128	@ 0x80
 800e674:	d009      	beq.n	800e68a <UART_SetConfig+0x1ae>
 800e676:	2b80      	cmp	r3, #128	@ 0x80
 800e678:	d810      	bhi.n	800e69c <UART_SetConfig+0x1c0>
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d002      	beq.n	800e684 <UART_SetConfig+0x1a8>
 800e67e:	2b40      	cmp	r3, #64	@ 0x40
 800e680:	d006      	beq.n	800e690 <UART_SetConfig+0x1b4>
 800e682:	e00b      	b.n	800e69c <UART_SetConfig+0x1c0>
 800e684:	2300      	movs	r3, #0
 800e686:	77fb      	strb	r3, [r7, #31]
 800e688:	e0cc      	b.n	800e824 <UART_SetConfig+0x348>
 800e68a:	2302      	movs	r3, #2
 800e68c:	77fb      	strb	r3, [r7, #31]
 800e68e:	e0c9      	b.n	800e824 <UART_SetConfig+0x348>
 800e690:	2304      	movs	r3, #4
 800e692:	77fb      	strb	r3, [r7, #31]
 800e694:	e0c6      	b.n	800e824 <UART_SetConfig+0x348>
 800e696:	2308      	movs	r3, #8
 800e698:	77fb      	strb	r3, [r7, #31]
 800e69a:	e0c3      	b.n	800e824 <UART_SetConfig+0x348>
 800e69c:	2310      	movs	r3, #16
 800e69e:	77fb      	strb	r3, [r7, #31]
 800e6a0:	e0c0      	b.n	800e824 <UART_SetConfig+0x348>
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	4a44      	ldr	r2, [pc, #272]	@ (800e7b8 <UART_SetConfig+0x2dc>)
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	d125      	bne.n	800e6f8 <UART_SetConfig+0x21c>
 800e6ac:	4b3e      	ldr	r3, [pc, #248]	@ (800e7a8 <UART_SetConfig+0x2cc>)
 800e6ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e6b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e6ba:	d017      	beq.n	800e6ec <UART_SetConfig+0x210>
 800e6bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e6c0:	d817      	bhi.n	800e6f2 <UART_SetConfig+0x216>
 800e6c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6c6:	d00b      	beq.n	800e6e0 <UART_SetConfig+0x204>
 800e6c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6cc:	d811      	bhi.n	800e6f2 <UART_SetConfig+0x216>
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d003      	beq.n	800e6da <UART_SetConfig+0x1fe>
 800e6d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e6d6:	d006      	beq.n	800e6e6 <UART_SetConfig+0x20a>
 800e6d8:	e00b      	b.n	800e6f2 <UART_SetConfig+0x216>
 800e6da:	2300      	movs	r3, #0
 800e6dc:	77fb      	strb	r3, [r7, #31]
 800e6de:	e0a1      	b.n	800e824 <UART_SetConfig+0x348>
 800e6e0:	2302      	movs	r3, #2
 800e6e2:	77fb      	strb	r3, [r7, #31]
 800e6e4:	e09e      	b.n	800e824 <UART_SetConfig+0x348>
 800e6e6:	2304      	movs	r3, #4
 800e6e8:	77fb      	strb	r3, [r7, #31]
 800e6ea:	e09b      	b.n	800e824 <UART_SetConfig+0x348>
 800e6ec:	2308      	movs	r3, #8
 800e6ee:	77fb      	strb	r3, [r7, #31]
 800e6f0:	e098      	b.n	800e824 <UART_SetConfig+0x348>
 800e6f2:	2310      	movs	r3, #16
 800e6f4:	77fb      	strb	r3, [r7, #31]
 800e6f6:	e095      	b.n	800e824 <UART_SetConfig+0x348>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	4a2f      	ldr	r2, [pc, #188]	@ (800e7bc <UART_SetConfig+0x2e0>)
 800e6fe:	4293      	cmp	r3, r2
 800e700:	d125      	bne.n	800e74e <UART_SetConfig+0x272>
 800e702:	4b29      	ldr	r3, [pc, #164]	@ (800e7a8 <UART_SetConfig+0x2cc>)
 800e704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e708:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e70c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e710:	d017      	beq.n	800e742 <UART_SetConfig+0x266>
 800e712:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e716:	d817      	bhi.n	800e748 <UART_SetConfig+0x26c>
 800e718:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e71c:	d00b      	beq.n	800e736 <UART_SetConfig+0x25a>
 800e71e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e722:	d811      	bhi.n	800e748 <UART_SetConfig+0x26c>
 800e724:	2b00      	cmp	r3, #0
 800e726:	d003      	beq.n	800e730 <UART_SetConfig+0x254>
 800e728:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e72c:	d006      	beq.n	800e73c <UART_SetConfig+0x260>
 800e72e:	e00b      	b.n	800e748 <UART_SetConfig+0x26c>
 800e730:	2301      	movs	r3, #1
 800e732:	77fb      	strb	r3, [r7, #31]
 800e734:	e076      	b.n	800e824 <UART_SetConfig+0x348>
 800e736:	2302      	movs	r3, #2
 800e738:	77fb      	strb	r3, [r7, #31]
 800e73a:	e073      	b.n	800e824 <UART_SetConfig+0x348>
 800e73c:	2304      	movs	r3, #4
 800e73e:	77fb      	strb	r3, [r7, #31]
 800e740:	e070      	b.n	800e824 <UART_SetConfig+0x348>
 800e742:	2308      	movs	r3, #8
 800e744:	77fb      	strb	r3, [r7, #31]
 800e746:	e06d      	b.n	800e824 <UART_SetConfig+0x348>
 800e748:	2310      	movs	r3, #16
 800e74a:	77fb      	strb	r3, [r7, #31]
 800e74c:	e06a      	b.n	800e824 <UART_SetConfig+0x348>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	4a1b      	ldr	r2, [pc, #108]	@ (800e7c0 <UART_SetConfig+0x2e4>)
 800e754:	4293      	cmp	r3, r2
 800e756:	d138      	bne.n	800e7ca <UART_SetConfig+0x2ee>
 800e758:	4b13      	ldr	r3, [pc, #76]	@ (800e7a8 <UART_SetConfig+0x2cc>)
 800e75a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e75e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800e762:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e766:	d017      	beq.n	800e798 <UART_SetConfig+0x2bc>
 800e768:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e76c:	d82a      	bhi.n	800e7c4 <UART_SetConfig+0x2e8>
 800e76e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e772:	d00b      	beq.n	800e78c <UART_SetConfig+0x2b0>
 800e774:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e778:	d824      	bhi.n	800e7c4 <UART_SetConfig+0x2e8>
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d003      	beq.n	800e786 <UART_SetConfig+0x2aa>
 800e77e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e782:	d006      	beq.n	800e792 <UART_SetConfig+0x2b6>
 800e784:	e01e      	b.n	800e7c4 <UART_SetConfig+0x2e8>
 800e786:	2300      	movs	r3, #0
 800e788:	77fb      	strb	r3, [r7, #31]
 800e78a:	e04b      	b.n	800e824 <UART_SetConfig+0x348>
 800e78c:	2302      	movs	r3, #2
 800e78e:	77fb      	strb	r3, [r7, #31]
 800e790:	e048      	b.n	800e824 <UART_SetConfig+0x348>
 800e792:	2304      	movs	r3, #4
 800e794:	77fb      	strb	r3, [r7, #31]
 800e796:	e045      	b.n	800e824 <UART_SetConfig+0x348>
 800e798:	2308      	movs	r3, #8
 800e79a:	77fb      	strb	r3, [r7, #31]
 800e79c:	e042      	b.n	800e824 <UART_SetConfig+0x348>
 800e79e:	bf00      	nop
 800e7a0:	efff69f3 	.word	0xefff69f3
 800e7a4:	40011000 	.word	0x40011000
 800e7a8:	40023800 	.word	0x40023800
 800e7ac:	40004400 	.word	0x40004400
 800e7b0:	40004800 	.word	0x40004800
 800e7b4:	40004c00 	.word	0x40004c00
 800e7b8:	40005000 	.word	0x40005000
 800e7bc:	40011400 	.word	0x40011400
 800e7c0:	40007800 	.word	0x40007800
 800e7c4:	2310      	movs	r3, #16
 800e7c6:	77fb      	strb	r3, [r7, #31]
 800e7c8:	e02c      	b.n	800e824 <UART_SetConfig+0x348>
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	4a72      	ldr	r2, [pc, #456]	@ (800e998 <UART_SetConfig+0x4bc>)
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	d125      	bne.n	800e820 <UART_SetConfig+0x344>
 800e7d4:	4b71      	ldr	r3, [pc, #452]	@ (800e99c <UART_SetConfig+0x4c0>)
 800e7d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e7da:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800e7de:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e7e2:	d017      	beq.n	800e814 <UART_SetConfig+0x338>
 800e7e4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e7e8:	d817      	bhi.n	800e81a <UART_SetConfig+0x33e>
 800e7ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e7ee:	d00b      	beq.n	800e808 <UART_SetConfig+0x32c>
 800e7f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e7f4:	d811      	bhi.n	800e81a <UART_SetConfig+0x33e>
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d003      	beq.n	800e802 <UART_SetConfig+0x326>
 800e7fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e7fe:	d006      	beq.n	800e80e <UART_SetConfig+0x332>
 800e800:	e00b      	b.n	800e81a <UART_SetConfig+0x33e>
 800e802:	2300      	movs	r3, #0
 800e804:	77fb      	strb	r3, [r7, #31]
 800e806:	e00d      	b.n	800e824 <UART_SetConfig+0x348>
 800e808:	2302      	movs	r3, #2
 800e80a:	77fb      	strb	r3, [r7, #31]
 800e80c:	e00a      	b.n	800e824 <UART_SetConfig+0x348>
 800e80e:	2304      	movs	r3, #4
 800e810:	77fb      	strb	r3, [r7, #31]
 800e812:	e007      	b.n	800e824 <UART_SetConfig+0x348>
 800e814:	2308      	movs	r3, #8
 800e816:	77fb      	strb	r3, [r7, #31]
 800e818:	e004      	b.n	800e824 <UART_SetConfig+0x348>
 800e81a:	2310      	movs	r3, #16
 800e81c:	77fb      	strb	r3, [r7, #31]
 800e81e:	e001      	b.n	800e824 <UART_SetConfig+0x348>
 800e820:	2310      	movs	r3, #16
 800e822:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	69db      	ldr	r3, [r3, #28]
 800e828:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e82c:	d15b      	bne.n	800e8e6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800e82e:	7ffb      	ldrb	r3, [r7, #31]
 800e830:	2b08      	cmp	r3, #8
 800e832:	d828      	bhi.n	800e886 <UART_SetConfig+0x3aa>
 800e834:	a201      	add	r2, pc, #4	@ (adr r2, 800e83c <UART_SetConfig+0x360>)
 800e836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e83a:	bf00      	nop
 800e83c:	0800e861 	.word	0x0800e861
 800e840:	0800e869 	.word	0x0800e869
 800e844:	0800e871 	.word	0x0800e871
 800e848:	0800e887 	.word	0x0800e887
 800e84c:	0800e877 	.word	0x0800e877
 800e850:	0800e887 	.word	0x0800e887
 800e854:	0800e887 	.word	0x0800e887
 800e858:	0800e887 	.word	0x0800e887
 800e85c:	0800e87f 	.word	0x0800e87f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e860:	f7fb fbf4 	bl	800a04c <HAL_RCC_GetPCLK1Freq>
 800e864:	61b8      	str	r0, [r7, #24]
        break;
 800e866:	e013      	b.n	800e890 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e868:	f7fb fc04 	bl	800a074 <HAL_RCC_GetPCLK2Freq>
 800e86c:	61b8      	str	r0, [r7, #24]
        break;
 800e86e:	e00f      	b.n	800e890 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e870:	4b4b      	ldr	r3, [pc, #300]	@ (800e9a0 <UART_SetConfig+0x4c4>)
 800e872:	61bb      	str	r3, [r7, #24]
        break;
 800e874:	e00c      	b.n	800e890 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e876:	f7fb fb17 	bl	8009ea8 <HAL_RCC_GetSysClockFreq>
 800e87a:	61b8      	str	r0, [r7, #24]
        break;
 800e87c:	e008      	b.n	800e890 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e87e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e882:	61bb      	str	r3, [r7, #24]
        break;
 800e884:	e004      	b.n	800e890 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800e886:	2300      	movs	r3, #0
 800e888:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e88a:	2301      	movs	r3, #1
 800e88c:	77bb      	strb	r3, [r7, #30]
        break;
 800e88e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e890:	69bb      	ldr	r3, [r7, #24]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d074      	beq.n	800e980 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e896:	69bb      	ldr	r3, [r7, #24]
 800e898:	005a      	lsls	r2, r3, #1
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	685b      	ldr	r3, [r3, #4]
 800e89e:	085b      	lsrs	r3, r3, #1
 800e8a0:	441a      	add	r2, r3
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	2b0f      	cmp	r3, #15
 800e8b0:	d916      	bls.n	800e8e0 <UART_SetConfig+0x404>
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8b8:	d212      	bcs.n	800e8e0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	b29b      	uxth	r3, r3
 800e8be:	f023 030f 	bic.w	r3, r3, #15
 800e8c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	085b      	lsrs	r3, r3, #1
 800e8c8:	b29b      	uxth	r3, r3
 800e8ca:	f003 0307 	and.w	r3, r3, #7
 800e8ce:	b29a      	uxth	r2, r3
 800e8d0:	89fb      	ldrh	r3, [r7, #14]
 800e8d2:	4313      	orrs	r3, r2
 800e8d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	89fa      	ldrh	r2, [r7, #14]
 800e8dc:	60da      	str	r2, [r3, #12]
 800e8de:	e04f      	b.n	800e980 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	77bb      	strb	r3, [r7, #30]
 800e8e4:	e04c      	b.n	800e980 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e8e6:	7ffb      	ldrb	r3, [r7, #31]
 800e8e8:	2b08      	cmp	r3, #8
 800e8ea:	d828      	bhi.n	800e93e <UART_SetConfig+0x462>
 800e8ec:	a201      	add	r2, pc, #4	@ (adr r2, 800e8f4 <UART_SetConfig+0x418>)
 800e8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8f2:	bf00      	nop
 800e8f4:	0800e919 	.word	0x0800e919
 800e8f8:	0800e921 	.word	0x0800e921
 800e8fc:	0800e929 	.word	0x0800e929
 800e900:	0800e93f 	.word	0x0800e93f
 800e904:	0800e92f 	.word	0x0800e92f
 800e908:	0800e93f 	.word	0x0800e93f
 800e90c:	0800e93f 	.word	0x0800e93f
 800e910:	0800e93f 	.word	0x0800e93f
 800e914:	0800e937 	.word	0x0800e937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e918:	f7fb fb98 	bl	800a04c <HAL_RCC_GetPCLK1Freq>
 800e91c:	61b8      	str	r0, [r7, #24]
        break;
 800e91e:	e013      	b.n	800e948 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e920:	f7fb fba8 	bl	800a074 <HAL_RCC_GetPCLK2Freq>
 800e924:	61b8      	str	r0, [r7, #24]
        break;
 800e926:	e00f      	b.n	800e948 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e928:	4b1d      	ldr	r3, [pc, #116]	@ (800e9a0 <UART_SetConfig+0x4c4>)
 800e92a:	61bb      	str	r3, [r7, #24]
        break;
 800e92c:	e00c      	b.n	800e948 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e92e:	f7fb fabb 	bl	8009ea8 <HAL_RCC_GetSysClockFreq>
 800e932:	61b8      	str	r0, [r7, #24]
        break;
 800e934:	e008      	b.n	800e948 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e936:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e93a:	61bb      	str	r3, [r7, #24]
        break;
 800e93c:	e004      	b.n	800e948 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800e93e:	2300      	movs	r3, #0
 800e940:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e942:	2301      	movs	r3, #1
 800e944:	77bb      	strb	r3, [r7, #30]
        break;
 800e946:	bf00      	nop
    }

    if (pclk != 0U)
 800e948:	69bb      	ldr	r3, [r7, #24]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d018      	beq.n	800e980 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	685b      	ldr	r3, [r3, #4]
 800e952:	085a      	lsrs	r2, r3, #1
 800e954:	69bb      	ldr	r3, [r7, #24]
 800e956:	441a      	add	r2, r3
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	685b      	ldr	r3, [r3, #4]
 800e95c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e960:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	2b0f      	cmp	r3, #15
 800e966:	d909      	bls.n	800e97c <UART_SetConfig+0x4a0>
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e96e:	d205      	bcs.n	800e97c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e970:	693b      	ldr	r3, [r7, #16]
 800e972:	b29a      	uxth	r2, r3
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	60da      	str	r2, [r3, #12]
 800e97a:	e001      	b.n	800e980 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e97c:	2301      	movs	r3, #1
 800e97e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2200      	movs	r2, #0
 800e984:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2200      	movs	r2, #0
 800e98a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800e98c:	7fbb      	ldrb	r3, [r7, #30]
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3720      	adds	r7, #32
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop
 800e998:	40007c00 	.word	0x40007c00
 800e99c:	40023800 	.word	0x40023800
 800e9a0:	00f42400 	.word	0x00f42400

0800e9a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b083      	sub	sp, #12
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9b0:	f003 0308 	and.w	r3, r3, #8
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d00a      	beq.n	800e9ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	430a      	orrs	r2, r1
 800e9cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9d2:	f003 0301 	and.w	r3, r3, #1
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d00a      	beq.n	800e9f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	685b      	ldr	r3, [r3, #4]
 800e9e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	430a      	orrs	r2, r1
 800e9ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9f4:	f003 0302 	and.w	r3, r3, #2
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d00a      	beq.n	800ea12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	430a      	orrs	r2, r1
 800ea10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea16:	f003 0304 	and.w	r3, r3, #4
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d00a      	beq.n	800ea34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	685b      	ldr	r3, [r3, #4]
 800ea24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	430a      	orrs	r2, r1
 800ea32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea38:	f003 0310 	and.w	r3, r3, #16
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d00a      	beq.n	800ea56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	689b      	ldr	r3, [r3, #8]
 800ea46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	430a      	orrs	r2, r1
 800ea54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea5a:	f003 0320 	and.w	r3, r3, #32
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d00a      	beq.n	800ea78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	689b      	ldr	r3, [r3, #8]
 800ea68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	430a      	orrs	r2, r1
 800ea76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d01a      	beq.n	800eaba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	430a      	orrs	r2, r1
 800ea98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eaa2:	d10a      	bne.n	800eaba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	685b      	ldr	r3, [r3, #4]
 800eaaa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	430a      	orrs	r2, r1
 800eab8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eabe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d00a      	beq.n	800eadc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	685b      	ldr	r3, [r3, #4]
 800eacc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	430a      	orrs	r2, r1
 800eada:	605a      	str	r2, [r3, #4]
  }
}
 800eadc:	bf00      	nop
 800eade:	370c      	adds	r7, #12
 800eae0:	46bd      	mov	sp, r7
 800eae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae6:	4770      	bx	lr

0800eae8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b08c      	sub	sp, #48	@ 0x30
 800eaec:	af02      	add	r7, sp, #8
 800eaee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eaf8:	f7f6 fb0c 	bl	8005114 <HAL_GetTick>
 800eafc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f003 0308 	and.w	r3, r3, #8
 800eb08:	2b08      	cmp	r3, #8
 800eb0a:	d12e      	bne.n	800eb6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800eb10:	9300      	str	r3, [sp, #0]
 800eb12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb14:	2200      	movs	r2, #0
 800eb16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f000 f83b 	bl	800eb96 <UART_WaitOnFlagUntilTimeout>
 800eb20:	4603      	mov	r3, r0
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d021      	beq.n	800eb6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	e853 3f00 	ldrex	r3, [r3]
 800eb32:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb3a:	623b      	str	r3, [r7, #32]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	461a      	mov	r2, r3
 800eb42:	6a3b      	ldr	r3, [r7, #32]
 800eb44:	61fb      	str	r3, [r7, #28]
 800eb46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb48:	69b9      	ldr	r1, [r7, #24]
 800eb4a:	69fa      	ldr	r2, [r7, #28]
 800eb4c:	e841 2300 	strex	r3, r2, [r1]
 800eb50:	617b      	str	r3, [r7, #20]
   return(result);
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d1e6      	bne.n	800eb26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2220      	movs	r2, #32
 800eb5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2200      	movs	r2, #0
 800eb62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb66:	2303      	movs	r3, #3
 800eb68:	e011      	b.n	800eb8e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2220      	movs	r2, #32
 800eb6e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2220      	movs	r2, #32
 800eb74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2200      	movs	r2, #0
 800eb82:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2200      	movs	r2, #0
 800eb88:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800eb8c:	2300      	movs	r3, #0
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3728      	adds	r7, #40	@ 0x28
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}

0800eb96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eb96:	b580      	push	{r7, lr}
 800eb98:	b084      	sub	sp, #16
 800eb9a:	af00      	add	r7, sp, #0
 800eb9c:	60f8      	str	r0, [r7, #12]
 800eb9e:	60b9      	str	r1, [r7, #8]
 800eba0:	603b      	str	r3, [r7, #0]
 800eba2:	4613      	mov	r3, r2
 800eba4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eba6:	e04f      	b.n	800ec48 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eba8:	69bb      	ldr	r3, [r7, #24]
 800ebaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebae:	d04b      	beq.n	800ec48 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ebb0:	f7f6 fab0 	bl	8005114 <HAL_GetTick>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	1ad3      	subs	r3, r2, r3
 800ebba:	69ba      	ldr	r2, [r7, #24]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d302      	bcc.n	800ebc6 <UART_WaitOnFlagUntilTimeout+0x30>
 800ebc0:	69bb      	ldr	r3, [r7, #24]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d101      	bne.n	800ebca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ebc6:	2303      	movs	r3, #3
 800ebc8:	e04e      	b.n	800ec68 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f003 0304 	and.w	r3, r3, #4
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d037      	beq.n	800ec48 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	2b80      	cmp	r3, #128	@ 0x80
 800ebdc:	d034      	beq.n	800ec48 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	2b40      	cmp	r3, #64	@ 0x40
 800ebe2:	d031      	beq.n	800ec48 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	69db      	ldr	r3, [r3, #28]
 800ebea:	f003 0308 	and.w	r3, r3, #8
 800ebee:	2b08      	cmp	r3, #8
 800ebf0:	d110      	bne.n	800ec14 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	2208      	movs	r2, #8
 800ebf8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ebfa:	68f8      	ldr	r0, [r7, #12]
 800ebfc:	f000 f8fe 	bl	800edfc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	2208      	movs	r2, #8
 800ec04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800ec10:	2301      	movs	r3, #1
 800ec12:	e029      	b.n	800ec68 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	69db      	ldr	r3, [r3, #28]
 800ec1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ec1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ec22:	d111      	bne.n	800ec48 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ec2c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ec2e:	68f8      	ldr	r0, [r7, #12]
 800ec30:	f000 f8e4 	bl	800edfc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	2220      	movs	r2, #32
 800ec38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ec44:	2303      	movs	r3, #3
 800ec46:	e00f      	b.n	800ec68 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	69da      	ldr	r2, [r3, #28]
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	4013      	ands	r3, r2
 800ec52:	68ba      	ldr	r2, [r7, #8]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	bf0c      	ite	eq
 800ec58:	2301      	moveq	r3, #1
 800ec5a:	2300      	movne	r3, #0
 800ec5c:	b2db      	uxtb	r3, r3
 800ec5e:	461a      	mov	r2, r3
 800ec60:	79fb      	ldrb	r3, [r7, #7]
 800ec62:	429a      	cmp	r2, r3
 800ec64:	d0a0      	beq.n	800eba8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ec66:	2300      	movs	r3, #0
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3710      	adds	r7, #16
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b096      	sub	sp, #88	@ 0x58
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	60f8      	str	r0, [r7, #12]
 800ec78:	60b9      	str	r1, [r7, #8]
 800ec7a:	4613      	mov	r3, r2
 800ec7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	68ba      	ldr	r2, [r7, #8]
 800ec82:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	88fa      	ldrh	r2, [r7, #6]
 800ec88:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	2222      	movs	r2, #34	@ 0x22
 800ec98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d028      	beq.n	800ecf6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eca8:	4a3e      	ldr	r2, [pc, #248]	@ (800eda4 <UART_Start_Receive_DMA+0x134>)
 800ecaa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecb0:	4a3d      	ldr	r2, [pc, #244]	@ (800eda8 <UART_Start_Receive_DMA+0x138>)
 800ecb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecb8:	4a3c      	ldr	r2, [pc, #240]	@ (800edac <UART_Start_Receive_DMA+0x13c>)
 800ecba:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	3324      	adds	r3, #36	@ 0x24
 800ecce:	4619      	mov	r1, r3
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecd4:	461a      	mov	r2, r3
 800ecd6:	88fb      	ldrh	r3, [r7, #6]
 800ecd8:	f7f6 ffe0 	bl	8005c9c <HAL_DMA_Start_IT>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d009      	beq.n	800ecf6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2210      	movs	r2, #16
 800ece6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	2220      	movs	r2, #32
 800ecee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	e051      	b.n	800ed9a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	691b      	ldr	r3, [r3, #16]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d018      	beq.n	800ed30 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed06:	e853 3f00 	ldrex	r3, [r3]
 800ed0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ed0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ed12:	657b      	str	r3, [r7, #84]	@ 0x54
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	461a      	mov	r2, r3
 800ed1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed1e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed20:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ed22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ed24:	e841 2300 	strex	r3, r2, [r1]
 800ed28:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ed2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d1e6      	bne.n	800ecfe <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	3308      	adds	r3, #8
 800ed36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed3a:	e853 3f00 	ldrex	r3, [r3]
 800ed3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ed40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed42:	f043 0301 	orr.w	r3, r3, #1
 800ed46:	653b      	str	r3, [r7, #80]	@ 0x50
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	3308      	adds	r3, #8
 800ed4e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ed50:	637a      	str	r2, [r7, #52]	@ 0x34
 800ed52:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ed56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed58:	e841 2300 	strex	r3, r2, [r1]
 800ed5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ed5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d1e5      	bne.n	800ed30 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	3308      	adds	r3, #8
 800ed6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	e853 3f00 	ldrex	r3, [r3]
 800ed72:	613b      	str	r3, [r7, #16]
   return(result);
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	3308      	adds	r3, #8
 800ed82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ed84:	623a      	str	r2, [r7, #32]
 800ed86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed88:	69f9      	ldr	r1, [r7, #28]
 800ed8a:	6a3a      	ldr	r2, [r7, #32]
 800ed8c:	e841 2300 	strex	r3, r2, [r1]
 800ed90:	61bb      	str	r3, [r7, #24]
   return(result);
 800ed92:	69bb      	ldr	r3, [r7, #24]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d1e5      	bne.n	800ed64 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800ed98:	2300      	movs	r3, #0
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3758      	adds	r7, #88	@ 0x58
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	0800eec5 	.word	0x0800eec5
 800eda8:	0800f023 	.word	0x0800f023
 800edac:	0800f095 	.word	0x0800f095

0800edb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800edb0:	b480      	push	{r7}
 800edb2:	b089      	sub	sp, #36	@ 0x24
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	e853 3f00 	ldrex	r3, [r3]
 800edc4:	60bb      	str	r3, [r7, #8]
   return(result);
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800edcc:	61fb      	str	r3, [r7, #28]
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	461a      	mov	r2, r3
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	61bb      	str	r3, [r7, #24]
 800edd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edda:	6979      	ldr	r1, [r7, #20]
 800eddc:	69ba      	ldr	r2, [r7, #24]
 800edde:	e841 2300 	strex	r3, r2, [r1]
 800ede2:	613b      	str	r3, [r7, #16]
   return(result);
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d1e6      	bne.n	800edb8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2220      	movs	r2, #32
 800edee:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800edf0:	bf00      	nop
 800edf2:	3724      	adds	r7, #36	@ 0x24
 800edf4:	46bd      	mov	sp, r7
 800edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfa:	4770      	bx	lr

0800edfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800edfc:	b480      	push	{r7}
 800edfe:	b095      	sub	sp, #84	@ 0x54
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee0c:	e853 3f00 	ldrex	r3, [r3]
 800ee10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ee12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ee18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	461a      	mov	r2, r3
 800ee20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee22:	643b      	str	r3, [r7, #64]	@ 0x40
 800ee24:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ee28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ee2a:	e841 2300 	strex	r3, r2, [r1]
 800ee2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ee30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d1e6      	bne.n	800ee04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	3308      	adds	r3, #8
 800ee3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee3e:	6a3b      	ldr	r3, [r7, #32]
 800ee40:	e853 3f00 	ldrex	r3, [r3]
 800ee44:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee46:	69fb      	ldr	r3, [r7, #28]
 800ee48:	f023 0301 	bic.w	r3, r3, #1
 800ee4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	3308      	adds	r3, #8
 800ee54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ee56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ee58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ee5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee5e:	e841 2300 	strex	r3, r2, [r1]
 800ee62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ee64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d1e5      	bne.n	800ee36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ee6e:	2b01      	cmp	r3, #1
 800ee70:	d118      	bne.n	800eea4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	e853 3f00 	ldrex	r3, [r3]
 800ee7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	f023 0310 	bic.w	r3, r3, #16
 800ee86:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	461a      	mov	r2, r3
 800ee8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee90:	61bb      	str	r3, [r7, #24]
 800ee92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee94:	6979      	ldr	r1, [r7, #20]
 800ee96:	69ba      	ldr	r2, [r7, #24]
 800ee98:	e841 2300 	strex	r3, r2, [r1]
 800ee9c:	613b      	str	r3, [r7, #16]
   return(result);
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d1e6      	bne.n	800ee72 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2220      	movs	r2, #32
 800eea8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2200      	movs	r2, #0
 800eeb0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800eeb8:	bf00      	nop
 800eeba:	3754      	adds	r7, #84	@ 0x54
 800eebc:	46bd      	mov	sp, r7
 800eebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec2:	4770      	bx	lr

0800eec4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b09c      	sub	sp, #112	@ 0x70
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eed0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	69db      	ldr	r3, [r3, #28]
 800eed6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eeda:	d071      	beq.n	800efc0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800eedc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eede:	2200      	movs	r2, #0
 800eee0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eee4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eeec:	e853 3f00 	ldrex	r3, [r3]
 800eef0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800eef2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eef4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eef8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eefa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	461a      	mov	r2, r3
 800ef00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ef02:	657b      	str	r3, [r7, #84]	@ 0x54
 800ef04:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ef08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ef0a:	e841 2300 	strex	r3, r2, [r1]
 800ef0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ef10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d1e6      	bne.n	800eee4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	3308      	adds	r3, #8
 800ef1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef20:	e853 3f00 	ldrex	r3, [r3]
 800ef24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ef26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef28:	f023 0301 	bic.w	r3, r3, #1
 800ef2c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ef2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	3308      	adds	r3, #8
 800ef34:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ef36:	643a      	str	r2, [r7, #64]	@ 0x40
 800ef38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ef3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ef3e:	e841 2300 	strex	r3, r2, [r1]
 800ef42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ef44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d1e5      	bne.n	800ef16 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ef4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	3308      	adds	r3, #8
 800ef50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef52:	6a3b      	ldr	r3, [r7, #32]
 800ef54:	e853 3f00 	ldrex	r3, [r3]
 800ef58:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef5a:	69fb      	ldr	r3, [r7, #28]
 800ef5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ef60:	663b      	str	r3, [r7, #96]	@ 0x60
 800ef62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	3308      	adds	r3, #8
 800ef68:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ef6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ef6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ef70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef72:	e841 2300 	strex	r3, r2, [r1]
 800ef76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ef78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d1e5      	bne.n	800ef4a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ef7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ef80:	2220      	movs	r2, #32
 800ef82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ef88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ef8a:	2b01      	cmp	r3, #1
 800ef8c:	d118      	bne.n	800efc0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	e853 3f00 	ldrex	r3, [r3]
 800ef9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	f023 0310 	bic.w	r3, r3, #16
 800efa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800efa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	461a      	mov	r2, r3
 800efaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800efac:	61bb      	str	r3, [r7, #24]
 800efae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efb0:	6979      	ldr	r1, [r7, #20]
 800efb2:	69ba      	ldr	r2, [r7, #24]
 800efb4:	e841 2300 	strex	r3, r2, [r1]
 800efb8:	613b      	str	r3, [r7, #16]
   return(result);
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d1e6      	bne.n	800ef8e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800efc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800efc2:	2200      	movs	r2, #0
 800efc4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800efc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800efc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800efca:	2b01      	cmp	r3, #1
 800efcc:	d122      	bne.n	800f014 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800efce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800efd0:	2200      	movs	r2, #0
 800efd2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	685b      	ldr	r3, [r3, #4]
 800efdc:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800efe0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800efe2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800efe6:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800efea:	429a      	cmp	r2, r3
 800efec:	d204      	bcs.n	800eff8 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800efee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eff0:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800eff4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800eff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800effa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800effe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f000:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f004:	b29b      	uxth	r3, r3
 800f006:	1ad3      	subs	r3, r2, r3
 800f008:	b29b      	uxth	r3, r3
 800f00a:	4619      	mov	r1, r3
 800f00c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f00e:	f7ff fa59 	bl	800e4c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f012:	e002      	b.n	800f01a <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800f014:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f016:	f7f5 fed1 	bl	8004dbc <HAL_UART_RxCpltCallback>
}
 800f01a:	bf00      	nop
 800f01c:	3770      	adds	r7, #112	@ 0x70
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}

0800f022 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f022:	b580      	push	{r7, lr}
 800f024:	b084      	sub	sp, #16
 800f026:	af00      	add	r7, sp, #0
 800f028:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f02e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	2201      	movs	r2, #1
 800f034:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f03a:	2b01      	cmp	r3, #1
 800f03c:	d123      	bne.n	800f086 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f044:	085b      	lsrs	r3, r3, #1
 800f046:	b29a      	uxth	r2, r3
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f05c:	897a      	ldrh	r2, [r7, #10]
 800f05e:	429a      	cmp	r2, r3
 800f060:	d803      	bhi.n	800f06a <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	897a      	ldrh	r2, [r7, #10]
 800f066:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f076:	b29b      	uxth	r3, r3
 800f078:	1ad3      	subs	r3, r2, r3
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	4619      	mov	r1, r3
 800f07e:	68f8      	ldr	r0, [r7, #12]
 800f080:	f7ff fa20 	bl	800e4c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f084:	e002      	b.n	800f08c <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800f086:	68f8      	ldr	r0, [r7, #12]
 800f088:	f7f5 febc 	bl	8004e04 <HAL_UART_RxHalfCpltCallback>
}
 800f08c:	bf00      	nop
 800f08e:	3710      	adds	r7, #16
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}

0800f094 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b086      	sub	sp, #24
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0a0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f0a6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	689b      	ldr	r3, [r3, #8]
 800f0b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0ba:	2b80      	cmp	r3, #128	@ 0x80
 800f0bc:	d109      	bne.n	800f0d2 <UART_DMAError+0x3e>
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	2b21      	cmp	r3, #33	@ 0x21
 800f0c2:	d106      	bne.n	800f0d2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800f0cc:	6978      	ldr	r0, [r7, #20]
 800f0ce:	f7ff fe6f 	bl	800edb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	689b      	ldr	r3, [r3, #8]
 800f0d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f0dc:	2b40      	cmp	r3, #64	@ 0x40
 800f0de:	d109      	bne.n	800f0f4 <UART_DMAError+0x60>
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2b22      	cmp	r3, #34	@ 0x22
 800f0e4:	d106      	bne.n	800f0f4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800f0ee:	6978      	ldr	r0, [r7, #20]
 800f0f0:	f7ff fe84 	bl	800edfc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f0fa:	f043 0210 	orr.w	r2, r3, #16
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f104:	6978      	ldr	r0, [r7, #20]
 800f106:	f7f5 fe93 	bl	8004e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f10a:	bf00      	nop
 800f10c:	3718      	adds	r7, #24
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}

0800f112 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f112:	b580      	push	{r7, lr}
 800f114:	b084      	sub	sp, #16
 800f116:	af00      	add	r7, sp, #0
 800f118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f11e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	2200      	movs	r2, #0
 800f124:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f128:	68f8      	ldr	r0, [r7, #12]
 800f12a:	f7f5 fe81 	bl	8004e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f12e:	bf00      	nop
 800f130:	3710      	adds	r7, #16
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}

0800f136 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f136:	b580      	push	{r7, lr}
 800f138:	b088      	sub	sp, #32
 800f13a:	af00      	add	r7, sp, #0
 800f13c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	e853 3f00 	ldrex	r3, [r3]
 800f14a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f152:	61fb      	str	r3, [r7, #28]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	461a      	mov	r2, r3
 800f15a:	69fb      	ldr	r3, [r7, #28]
 800f15c:	61bb      	str	r3, [r7, #24]
 800f15e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f160:	6979      	ldr	r1, [r7, #20]
 800f162:	69ba      	ldr	r2, [r7, #24]
 800f164:	e841 2300 	strex	r3, r2, [r1]
 800f168:	613b      	str	r3, [r7, #16]
   return(result);
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d1e6      	bne.n	800f13e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2220      	movs	r2, #32
 800f174:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2200      	movs	r2, #0
 800f17a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f7ff f997 	bl	800e4b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f182:	bf00      	nop
 800f184:	3720      	adds	r7, #32
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}
	...

0800f18c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b083      	sub	sp, #12
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d121      	bne.n	800f1e2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681a      	ldr	r2, [r3, #0]
 800f1a2:	4b27      	ldr	r3, [pc, #156]	@ (800f240 <FMC_SDRAM_Init+0xb4>)
 800f1a4:	4013      	ands	r3, r2
 800f1a6:	683a      	ldr	r2, [r7, #0]
 800f1a8:	6851      	ldr	r1, [r2, #4]
 800f1aa:	683a      	ldr	r2, [r7, #0]
 800f1ac:	6892      	ldr	r2, [r2, #8]
 800f1ae:	4311      	orrs	r1, r2
 800f1b0:	683a      	ldr	r2, [r7, #0]
 800f1b2:	68d2      	ldr	r2, [r2, #12]
 800f1b4:	4311      	orrs	r1, r2
 800f1b6:	683a      	ldr	r2, [r7, #0]
 800f1b8:	6912      	ldr	r2, [r2, #16]
 800f1ba:	4311      	orrs	r1, r2
 800f1bc:	683a      	ldr	r2, [r7, #0]
 800f1be:	6952      	ldr	r2, [r2, #20]
 800f1c0:	4311      	orrs	r1, r2
 800f1c2:	683a      	ldr	r2, [r7, #0]
 800f1c4:	6992      	ldr	r2, [r2, #24]
 800f1c6:	4311      	orrs	r1, r2
 800f1c8:	683a      	ldr	r2, [r7, #0]
 800f1ca:	69d2      	ldr	r2, [r2, #28]
 800f1cc:	4311      	orrs	r1, r2
 800f1ce:	683a      	ldr	r2, [r7, #0]
 800f1d0:	6a12      	ldr	r2, [r2, #32]
 800f1d2:	4311      	orrs	r1, r2
 800f1d4:	683a      	ldr	r2, [r7, #0]
 800f1d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f1d8:	430a      	orrs	r2, r1
 800f1da:	431a      	orrs	r2, r3
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	601a      	str	r2, [r3, #0]
 800f1e0:	e026      	b.n	800f230 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	69d9      	ldr	r1, [r3, #28]
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	6a1b      	ldr	r3, [r3, #32]
 800f1f2:	4319      	orrs	r1, r3
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1f8:	430b      	orrs	r3, r1
 800f1fa:	431a      	orrs	r2, r3
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	685a      	ldr	r2, [r3, #4]
 800f204:	4b0e      	ldr	r3, [pc, #56]	@ (800f240 <FMC_SDRAM_Init+0xb4>)
 800f206:	4013      	ands	r3, r2
 800f208:	683a      	ldr	r2, [r7, #0]
 800f20a:	6851      	ldr	r1, [r2, #4]
 800f20c:	683a      	ldr	r2, [r7, #0]
 800f20e:	6892      	ldr	r2, [r2, #8]
 800f210:	4311      	orrs	r1, r2
 800f212:	683a      	ldr	r2, [r7, #0]
 800f214:	68d2      	ldr	r2, [r2, #12]
 800f216:	4311      	orrs	r1, r2
 800f218:	683a      	ldr	r2, [r7, #0]
 800f21a:	6912      	ldr	r2, [r2, #16]
 800f21c:	4311      	orrs	r1, r2
 800f21e:	683a      	ldr	r2, [r7, #0]
 800f220:	6952      	ldr	r2, [r2, #20]
 800f222:	4311      	orrs	r1, r2
 800f224:	683a      	ldr	r2, [r7, #0]
 800f226:	6992      	ldr	r2, [r2, #24]
 800f228:	430a      	orrs	r2, r1
 800f22a:	431a      	orrs	r2, r3
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800f230:	2300      	movs	r3, #0
}
 800f232:	4618      	mov	r0, r3
 800f234:	370c      	adds	r7, #12
 800f236:	46bd      	mov	sp, r7
 800f238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23c:	4770      	bx	lr
 800f23e:	bf00      	nop
 800f240:	ffff8000 	.word	0xffff8000

0800f244 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f244:	b480      	push	{r7}
 800f246:	b085      	sub	sp, #20
 800f248:	af00      	add	r7, sp, #0
 800f24a:	60f8      	str	r0, [r7, #12]
 800f24c:	60b9      	str	r1, [r7, #8]
 800f24e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d128      	bne.n	800f2a8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	689b      	ldr	r3, [r3, #8]
 800f25a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	1e59      	subs	r1, r3, #1
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	685b      	ldr	r3, [r3, #4]
 800f268:	3b01      	subs	r3, #1
 800f26a:	011b      	lsls	r3, r3, #4
 800f26c:	4319      	orrs	r1, r3
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	689b      	ldr	r3, [r3, #8]
 800f272:	3b01      	subs	r3, #1
 800f274:	021b      	lsls	r3, r3, #8
 800f276:	4319      	orrs	r1, r3
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	68db      	ldr	r3, [r3, #12]
 800f27c:	3b01      	subs	r3, #1
 800f27e:	031b      	lsls	r3, r3, #12
 800f280:	4319      	orrs	r1, r3
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	691b      	ldr	r3, [r3, #16]
 800f286:	3b01      	subs	r3, #1
 800f288:	041b      	lsls	r3, r3, #16
 800f28a:	4319      	orrs	r1, r3
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	695b      	ldr	r3, [r3, #20]
 800f290:	3b01      	subs	r3, #1
 800f292:	051b      	lsls	r3, r3, #20
 800f294:	4319      	orrs	r1, r3
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	699b      	ldr	r3, [r3, #24]
 800f29a:	3b01      	subs	r3, #1
 800f29c:	061b      	lsls	r3, r3, #24
 800f29e:	430b      	orrs	r3, r1
 800f2a0:	431a      	orrs	r2, r3
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	609a      	str	r2, [r3, #8]
 800f2a6:	e02d      	b.n	800f304 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	689a      	ldr	r2, [r3, #8]
 800f2ac:	4b19      	ldr	r3, [pc, #100]	@ (800f314 <FMC_SDRAM_Timing_Init+0xd0>)
 800f2ae:	4013      	ands	r3, r2
 800f2b0:	68ba      	ldr	r2, [r7, #8]
 800f2b2:	68d2      	ldr	r2, [r2, #12]
 800f2b4:	3a01      	subs	r2, #1
 800f2b6:	0311      	lsls	r1, r2, #12
 800f2b8:	68ba      	ldr	r2, [r7, #8]
 800f2ba:	6952      	ldr	r2, [r2, #20]
 800f2bc:	3a01      	subs	r2, #1
 800f2be:	0512      	lsls	r2, r2, #20
 800f2c0:	430a      	orrs	r2, r1
 800f2c2:	431a      	orrs	r2, r3
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	68db      	ldr	r3, [r3, #12]
 800f2cc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	1e59      	subs	r1, r3, #1
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	685b      	ldr	r3, [r3, #4]
 800f2da:	3b01      	subs	r3, #1
 800f2dc:	011b      	lsls	r3, r3, #4
 800f2de:	4319      	orrs	r1, r3
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	689b      	ldr	r3, [r3, #8]
 800f2e4:	3b01      	subs	r3, #1
 800f2e6:	021b      	lsls	r3, r3, #8
 800f2e8:	4319      	orrs	r1, r3
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	691b      	ldr	r3, [r3, #16]
 800f2ee:	3b01      	subs	r3, #1
 800f2f0:	041b      	lsls	r3, r3, #16
 800f2f2:	4319      	orrs	r1, r3
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	699b      	ldr	r3, [r3, #24]
 800f2f8:	3b01      	subs	r3, #1
 800f2fa:	061b      	lsls	r3, r3, #24
 800f2fc:	430b      	orrs	r3, r1
 800f2fe:	431a      	orrs	r2, r3
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800f304:	2300      	movs	r3, #0
}
 800f306:	4618      	mov	r0, r3
 800f308:	3714      	adds	r7, #20
 800f30a:	46bd      	mov	sp, r7
 800f30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f310:	4770      	bx	lr
 800f312:	bf00      	nop
 800f314:	ff0f0fff 	.word	0xff0f0fff

0800f318 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f318:	b084      	sub	sp, #16
 800f31a:	b480      	push	{r7}
 800f31c:	b085      	sub	sp, #20
 800f31e:	af00      	add	r7, sp, #0
 800f320:	6078      	str	r0, [r7, #4]
 800f322:	f107 001c 	add.w	r0, r7, #28
 800f326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f32a:	2300      	movs	r3, #0
 800f32c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f32e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f330:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f332:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800f336:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800f33a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800f33e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800f342:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f344:	68fa      	ldr	r2, [r7, #12]
 800f346:	4313      	orrs	r3, r2
 800f348:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	685a      	ldr	r2, [r3, #4]
 800f34e:	4b07      	ldr	r3, [pc, #28]	@ (800f36c <SDMMC_Init+0x54>)
 800f350:	4013      	ands	r3, r2
 800f352:	68fa      	ldr	r2, [r7, #12]
 800f354:	431a      	orrs	r2, r3
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f35a:	2300      	movs	r3, #0
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	3714      	adds	r7, #20
 800f360:	46bd      	mov	sp, r7
 800f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f366:	b004      	add	sp, #16
 800f368:	4770      	bx	lr
 800f36a:	bf00      	nop
 800f36c:	ffff8100 	.word	0xffff8100

0800f370 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f370:	b480      	push	{r7}
 800f372:	b083      	sub	sp, #12
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800f37e:	4618      	mov	r0, r3
 800f380:	370c      	adds	r7, #12
 800f382:	46bd      	mov	sp, r7
 800f384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f388:	4770      	bx	lr

0800f38a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800f38a:	b480      	push	{r7}
 800f38c:	b083      	sub	sp, #12
 800f38e:	af00      	add	r7, sp, #0
 800f390:	6078      	str	r0, [r7, #4]
 800f392:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	681a      	ldr	r2, [r3, #0]
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800f39e:	2300      	movs	r3, #0
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	370c      	adds	r7, #12
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3aa:	4770      	bx	lr

0800f3ac <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2203      	movs	r2, #3
 800f3b8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800f3ba:	2300      	movs	r3, #0
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	370c      	adds	r7, #12
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b083      	sub	sp, #12
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	f003 0303 	and.w	r3, r3, #3
}
 800f3d8:	4618      	mov	r0, r3
 800f3da:	370c      	adds	r7, #12
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e2:	4770      	bx	lr

0800f3e4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f3e4:	b480      	push	{r7}
 800f3e6:	b085      	sub	sp, #20
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	681a      	ldr	r2, [r3, #0]
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f402:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f408:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f40e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f410:	68fa      	ldr	r2, [r7, #12]
 800f412:	4313      	orrs	r3, r2
 800f414:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	68da      	ldr	r2, [r3, #12]
 800f41a:	4b06      	ldr	r3, [pc, #24]	@ (800f434 <SDMMC_SendCommand+0x50>)
 800f41c:	4013      	ands	r3, r2
 800f41e:	68fa      	ldr	r2, [r7, #12]
 800f420:	431a      	orrs	r2, r3
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f426:	2300      	movs	r3, #0
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3714      	adds	r7, #20
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr
 800f434:	fffff000 	.word	0xfffff000

0800f438 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f438:	b480      	push	{r7}
 800f43a:	b083      	sub	sp, #12
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	691b      	ldr	r3, [r3, #16]
 800f444:	b2db      	uxtb	r3, r3
}
 800f446:	4618      	mov	r0, r3
 800f448:	370c      	adds	r7, #12
 800f44a:	46bd      	mov	sp, r7
 800f44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f450:	4770      	bx	lr

0800f452 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800f452:	b480      	push	{r7}
 800f454:	b085      	sub	sp, #20
 800f456:	af00      	add	r7, sp, #0
 800f458:	6078      	str	r0, [r7, #4]
 800f45a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	3314      	adds	r3, #20
 800f460:	461a      	mov	r2, r3
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	4413      	add	r3, r2
 800f466:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	681b      	ldr	r3, [r3, #0]
}  
 800f46c:	4618      	mov	r0, r3
 800f46e:	3714      	adds	r7, #20
 800f470:	46bd      	mov	sp, r7
 800f472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f476:	4770      	bx	lr

0800f478 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800f478:	b480      	push	{r7}
 800f47a:	b085      	sub	sp, #20
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
 800f480:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f482:	2300      	movs	r3, #0
 800f484:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	681a      	ldr	r2, [r3, #0]
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	685a      	ldr	r2, [r3, #4]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f49e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f4a4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f4aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f4ac:	68fa      	ldr	r2, [r7, #12]
 800f4ae:	4313      	orrs	r3, r2
 800f4b0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4b6:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	431a      	orrs	r2, r3
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800f4c2:	2300      	movs	r3, #0

}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3714      	adds	r7, #20
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ce:	4770      	bx	lr

0800f4d0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b088      	sub	sp, #32
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f4de:	2310      	movs	r3, #16
 800f4e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f4e2:	2340      	movs	r3, #64	@ 0x40
 800f4e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f4ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f4ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f4f0:	f107 0308 	add.w	r3, r7, #8
 800f4f4:	4619      	mov	r1, r3
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f7ff ff74 	bl	800f3e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f4fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f500:	2110      	movs	r1, #16
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f000 f9d6 	bl	800f8b4 <SDMMC_GetCmdResp1>
 800f508:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f50a:	69fb      	ldr	r3, [r7, #28]
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3720      	adds	r7, #32
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b088      	sub	sp, #32
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f522:	2311      	movs	r3, #17
 800f524:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f526:	2340      	movs	r3, #64	@ 0x40
 800f528:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f52a:	2300      	movs	r3, #0
 800f52c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f52e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f532:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f534:	f107 0308 	add.w	r3, r7, #8
 800f538:	4619      	mov	r1, r3
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f7ff ff52 	bl	800f3e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f540:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f544:	2111      	movs	r1, #17
 800f546:	6878      	ldr	r0, [r7, #4]
 800f548:	f000 f9b4 	bl	800f8b4 <SDMMC_GetCmdResp1>
 800f54c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f54e:	69fb      	ldr	r3, [r7, #28]
}
 800f550:	4618      	mov	r0, r3
 800f552:	3720      	adds	r7, #32
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}

0800f558 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b088      	sub	sp, #32
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f566:	2312      	movs	r3, #18
 800f568:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f56a:	2340      	movs	r3, #64	@ 0x40
 800f56c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f56e:	2300      	movs	r3, #0
 800f570:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f572:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f576:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f578:	f107 0308 	add.w	r3, r7, #8
 800f57c:	4619      	mov	r1, r3
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f7ff ff30 	bl	800f3e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f584:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f588:	2112      	movs	r1, #18
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f000 f992 	bl	800f8b4 <SDMMC_GetCmdResp1>
 800f590:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f592:	69fb      	ldr	r3, [r7, #28]
}
 800f594:	4618      	mov	r0, r3
 800f596:	3720      	adds	r7, #32
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}

0800f59c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b088      	sub	sp, #32
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f5aa:	2318      	movs	r3, #24
 800f5ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f5ae:	2340      	movs	r3, #64	@ 0x40
 800f5b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f5b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f5ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f5bc:	f107 0308 	add.w	r3, r7, #8
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f7ff ff0e 	bl	800f3e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f5c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f5cc:	2118      	movs	r1, #24
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	f000 f970 	bl	800f8b4 <SDMMC_GetCmdResp1>
 800f5d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f5d6:	69fb      	ldr	r3, [r7, #28]
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3720      	adds	r7, #32
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}

0800f5e0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b088      	sub	sp, #32
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
 800f5e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f5ee:	2319      	movs	r3, #25
 800f5f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f5f2:	2340      	movs	r3, #64	@ 0x40
 800f5f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f5fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f5fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f600:	f107 0308 	add.w	r3, r7, #8
 800f604:	4619      	mov	r1, r3
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f7ff feec 	bl	800f3e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f60c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f610:	2119      	movs	r1, #25
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f000 f94e 	bl	800f8b4 <SDMMC_GetCmdResp1>
 800f618:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f61a:	69fb      	ldr	r3, [r7, #28]
}
 800f61c:	4618      	mov	r0, r3
 800f61e:	3720      	adds	r7, #32
 800f620:	46bd      	mov	sp, r7
 800f622:	bd80      	pop	{r7, pc}

0800f624 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b088      	sub	sp, #32
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f62c:	2300      	movs	r3, #0
 800f62e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f630:	230c      	movs	r3, #12
 800f632:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f634:	2340      	movs	r3, #64	@ 0x40
 800f636:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f638:	2300      	movs	r3, #0
 800f63a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f63c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f640:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f642:	f107 0308 	add.w	r3, r7, #8
 800f646:	4619      	mov	r1, r3
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f7ff fecb 	bl	800f3e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800f64e:	4a05      	ldr	r2, [pc, #20]	@ (800f664 <SDMMC_CmdStopTransfer+0x40>)
 800f650:	210c      	movs	r1, #12
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f000 f92e 	bl	800f8b4 <SDMMC_GetCmdResp1>
 800f658:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f65a:	69fb      	ldr	r3, [r7, #28]
}
 800f65c:	4618      	mov	r0, r3
 800f65e:	3720      	adds	r7, #32
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}
 800f664:	05f5e100 	.word	0x05f5e100

0800f668 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b08a      	sub	sp, #40	@ 0x28
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	60f8      	str	r0, [r7, #12]
 800f670:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f678:	2307      	movs	r3, #7
 800f67a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f67c:	2340      	movs	r3, #64	@ 0x40
 800f67e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f680:	2300      	movs	r3, #0
 800f682:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f684:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f688:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f68a:	f107 0310 	add.w	r3, r7, #16
 800f68e:	4619      	mov	r1, r3
 800f690:	68f8      	ldr	r0, [r7, #12]
 800f692:	f7ff fea7 	bl	800f3e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800f696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f69a:	2107      	movs	r1, #7
 800f69c:	68f8      	ldr	r0, [r7, #12]
 800f69e:	f000 f909 	bl	800f8b4 <SDMMC_GetCmdResp1>
 800f6a2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800f6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3728      	adds	r7, #40	@ 0x28
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}

0800f6ae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800f6ae:	b580      	push	{r7, lr}
 800f6b0:	b088      	sub	sp, #32
 800f6b2:	af00      	add	r7, sp, #0
 800f6b4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f6c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f6ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f6cc:	f107 0308 	add.w	r3, r7, #8
 800f6d0:	4619      	mov	r1, r3
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f7ff fe86 	bl	800f3e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f000 fb23 	bl	800fd24 <SDMMC_GetCmdError>
 800f6de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f6e0:	69fb      	ldr	r3, [r7, #28]
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3720      	adds	r7, #32
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}

0800f6ea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800f6ea:	b580      	push	{r7, lr}
 800f6ec:	b088      	sub	sp, #32
 800f6ee:	af00      	add	r7, sp, #0
 800f6f0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f6f2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800f6f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f6f8:	2308      	movs	r3, #8
 800f6fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f6fc:	2340      	movs	r3, #64	@ 0x40
 800f6fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f700:	2300      	movs	r3, #0
 800f702:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f704:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f708:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f70a:	f107 0308 	add.w	r3, r7, #8
 800f70e:	4619      	mov	r1, r3
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f7ff fe67 	bl	800f3e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f000 fab6 	bl	800fc88 <SDMMC_GetCmdResp7>
 800f71c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f71e:	69fb      	ldr	r3, [r7, #28]
}
 800f720:	4618      	mov	r0, r3
 800f722:	3720      	adds	r7, #32
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}

0800f728 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b088      	sub	sp, #32
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f736:	2337      	movs	r3, #55	@ 0x37
 800f738:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f73a:	2340      	movs	r3, #64	@ 0x40
 800f73c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f73e:	2300      	movs	r3, #0
 800f740:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f742:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f746:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f748:	f107 0308 	add.w	r3, r7, #8
 800f74c:	4619      	mov	r1, r3
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f7ff fe48 	bl	800f3e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800f754:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f758:	2137      	movs	r1, #55	@ 0x37
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	f000 f8aa 	bl	800f8b4 <SDMMC_GetCmdResp1>
 800f760:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f762:	69fb      	ldr	r3, [r7, #28]
}
 800f764:	4618      	mov	r0, r3
 800f766:	3720      	adds	r7, #32
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}

0800f76c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b088      	sub	sp, #32
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f776:	683a      	ldr	r2, [r7, #0]
 800f778:	4b0d      	ldr	r3, [pc, #52]	@ (800f7b0 <SDMMC_CmdAppOperCommand+0x44>)
 800f77a:	4313      	orrs	r3, r2
 800f77c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f77e:	2329      	movs	r3, #41	@ 0x29
 800f780:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f782:	2340      	movs	r3, #64	@ 0x40
 800f784:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f786:	2300      	movs	r3, #0
 800f788:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f78a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f78e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f790:	f107 0308 	add.w	r3, r7, #8
 800f794:	4619      	mov	r1, r3
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f7ff fe24 	bl	800f3e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f000 f9bf 	bl	800fb20 <SDMMC_GetCmdResp3>
 800f7a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7a4:	69fb      	ldr	r3, [r7, #28]
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3720      	adds	r7, #32
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}
 800f7ae:	bf00      	nop
 800f7b0:	80100000 	.word	0x80100000

0800f7b4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b088      	sub	sp, #32
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f7c0:	2302      	movs	r3, #2
 800f7c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f7c4:	23c0      	movs	r3, #192	@ 0xc0
 800f7c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f7cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f7d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f7d2:	f107 0308 	add.w	r3, r7, #8
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f7ff fe03 	bl	800f3e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f000 f956 	bl	800fa90 <SDMMC_GetCmdResp2>
 800f7e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7e6:	69fb      	ldr	r3, [r7, #28]
}
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	3720      	adds	r7, #32
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd80      	pop	{r7, pc}

0800f7f0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b088      	sub	sp, #32
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
 800f7f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f7fe:	2309      	movs	r3, #9
 800f800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f802:	23c0      	movs	r3, #192	@ 0xc0
 800f804:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f806:	2300      	movs	r3, #0
 800f808:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f80a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f80e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f810:	f107 0308 	add.w	r3, r7, #8
 800f814:	4619      	mov	r1, r3
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f7ff fde4 	bl	800f3e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f000 f937 	bl	800fa90 <SDMMC_GetCmdResp2>
 800f822:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f824:	69fb      	ldr	r3, [r7, #28]
}
 800f826:	4618      	mov	r0, r3
 800f828:	3720      	adds	r7, #32
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}

0800f82e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800f82e:	b580      	push	{r7, lr}
 800f830:	b088      	sub	sp, #32
 800f832:	af00      	add	r7, sp, #0
 800f834:	6078      	str	r0, [r7, #4]
 800f836:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f838:	2300      	movs	r3, #0
 800f83a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f83c:	2303      	movs	r3, #3
 800f83e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f840:	2340      	movs	r3, #64	@ 0x40
 800f842:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f844:	2300      	movs	r3, #0
 800f846:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f848:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f84c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f84e:	f107 0308 	add.w	r3, r7, #8
 800f852:	4619      	mov	r1, r3
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f7ff fdc5 	bl	800f3e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f85a:	683a      	ldr	r2, [r7, #0]
 800f85c:	2103      	movs	r1, #3
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f000 f99c 	bl	800fb9c <SDMMC_GetCmdResp6>
 800f864:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f866:	69fb      	ldr	r3, [r7, #28]
}
 800f868:	4618      	mov	r0, r3
 800f86a:	3720      	adds	r7, #32
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}

0800f870 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b088      	sub	sp, #32
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f87e:	230d      	movs	r3, #13
 800f880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f882:	2340      	movs	r3, #64	@ 0x40
 800f884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f886:	2300      	movs	r3, #0
 800f888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f88a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f88e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f890:	f107 0308 	add.w	r3, r7, #8
 800f894:	4619      	mov	r1, r3
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f7ff fda4 	bl	800f3e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800f89c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f8a0:	210d      	movs	r1, #13
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f000 f806 	bl	800f8b4 <SDMMC_GetCmdResp1>
 800f8a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f8aa:	69fb      	ldr	r3, [r7, #28]
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3720      	adds	r7, #32
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}

0800f8b4 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b088      	sub	sp, #32
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	60f8      	str	r0, [r7, #12]
 800f8bc:	460b      	mov	r3, r1
 800f8be:	607a      	str	r2, [r7, #4]
 800f8c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f8c2:	4b70      	ldr	r3, [pc, #448]	@ (800fa84 <SDMMC_GetCmdResp1+0x1d0>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	4a70      	ldr	r2, [pc, #448]	@ (800fa88 <SDMMC_GetCmdResp1+0x1d4>)
 800f8c8:	fba2 2303 	umull	r2, r3, r2, r3
 800f8cc:	0a5a      	lsrs	r2, r3, #9
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	fb02 f303 	mul.w	r3, r2, r3
 800f8d4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f8d6:	69fb      	ldr	r3, [r7, #28]
 800f8d8:	1e5a      	subs	r2, r3, #1
 800f8da:	61fa      	str	r2, [r7, #28]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d102      	bne.n	800f8e6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f8e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f8e4:	e0c9      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8ea:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f8ec:	69bb      	ldr	r3, [r7, #24]
 800f8ee:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d0ef      	beq.n	800f8d6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f8f6:	69bb      	ldr	r3, [r7, #24]
 800f8f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d1ea      	bne.n	800f8d6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f904:	f003 0304 	and.w	r3, r3, #4
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d004      	beq.n	800f916 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	2204      	movs	r2, #4
 800f910:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f912:	2304      	movs	r3, #4
 800f914:	e0b1      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f91a:	f003 0301 	and.w	r3, r3, #1
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d004      	beq.n	800f92c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	2201      	movs	r2, #1
 800f926:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f928:	2301      	movs	r3, #1
 800f92a:	e0a6      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	22c5      	movs	r2, #197	@ 0xc5
 800f930:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f932:	68f8      	ldr	r0, [r7, #12]
 800f934:	f7ff fd80 	bl	800f438 <SDMMC_GetCommandResponse>
 800f938:	4603      	mov	r3, r0
 800f93a:	461a      	mov	r2, r3
 800f93c:	7afb      	ldrb	r3, [r7, #11]
 800f93e:	4293      	cmp	r3, r2
 800f940:	d001      	beq.n	800f946 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f942:	2301      	movs	r3, #1
 800f944:	e099      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f946:	2100      	movs	r1, #0
 800f948:	68f8      	ldr	r0, [r7, #12]
 800f94a:	f7ff fd82 	bl	800f452 <SDMMC_GetResponse>
 800f94e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f950:	697a      	ldr	r2, [r7, #20]
 800f952:	4b4e      	ldr	r3, [pc, #312]	@ (800fa8c <SDMMC_GetCmdResp1+0x1d8>)
 800f954:	4013      	ands	r3, r2
 800f956:	2b00      	cmp	r3, #0
 800f958:	d101      	bne.n	800f95e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f95a:	2300      	movs	r3, #0
 800f95c:	e08d      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f95e:	697b      	ldr	r3, [r7, #20]
 800f960:	2b00      	cmp	r3, #0
 800f962:	da02      	bge.n	800f96a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f964:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f968:	e087      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f970:	2b00      	cmp	r3, #0
 800f972:	d001      	beq.n	800f978 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f974:	2340      	movs	r3, #64	@ 0x40
 800f976:	e080      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d001      	beq.n	800f986 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f982:	2380      	movs	r3, #128	@ 0x80
 800f984:	e079      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d002      	beq.n	800f996 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f990:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f994:	e071      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d002      	beq.n	800f9a6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f9a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f9a4:	e069      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d002      	beq.n	800f9b6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f9b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f9b4:	e061      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d002      	beq.n	800f9c6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f9c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f9c4:	e059      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d002      	beq.n	800f9d6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f9d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f9d4:	e051      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d002      	beq.n	800f9e6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f9e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f9e4:	e049      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f9e6:	697b      	ldr	r3, [r7, #20]
 800f9e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d002      	beq.n	800f9f6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f9f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800f9f4:	e041      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d002      	beq.n	800fa06 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800fa00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fa04:	e039      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d002      	beq.n	800fa16 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fa10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800fa14:	e031      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d002      	beq.n	800fa26 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fa20:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800fa24:	e029      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d002      	beq.n	800fa36 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fa30:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fa34:	e021      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d002      	beq.n	800fa46 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fa40:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800fa44:	e019      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d002      	beq.n	800fa56 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fa50:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800fa54:	e011      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d002      	beq.n	800fa66 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800fa60:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800fa64:	e009      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	f003 0308 	and.w	r3, r3, #8
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d002      	beq.n	800fa76 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800fa70:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800fa74:	e001      	b.n	800fa7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fa76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	3720      	adds	r7, #32
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}
 800fa82:	bf00      	nop
 800fa84:	2000001c 	.word	0x2000001c
 800fa88:	10624dd3 	.word	0x10624dd3
 800fa8c:	fdffe008 	.word	0xfdffe008

0800fa90 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800fa90:	b480      	push	{r7}
 800fa92:	b085      	sub	sp, #20
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fa98:	4b1f      	ldr	r3, [pc, #124]	@ (800fb18 <SDMMC_GetCmdResp2+0x88>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	4a1f      	ldr	r2, [pc, #124]	@ (800fb1c <SDMMC_GetCmdResp2+0x8c>)
 800fa9e:	fba2 2303 	umull	r2, r3, r2, r3
 800faa2:	0a5b      	lsrs	r3, r3, #9
 800faa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800faa8:	fb02 f303 	mul.w	r3, r2, r3
 800faac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	1e5a      	subs	r2, r3, #1
 800fab2:	60fa      	str	r2, [r7, #12]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d102      	bne.n	800fabe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fab8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fabc:	e026      	b.n	800fb0c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fac2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800faca:	2b00      	cmp	r3, #0
 800facc:	d0ef      	beq.n	800faae <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d1ea      	bne.n	800faae <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fadc:	f003 0304 	and.w	r3, r3, #4
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d004      	beq.n	800faee <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2204      	movs	r2, #4
 800fae8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800faea:	2304      	movs	r3, #4
 800faec:	e00e      	b.n	800fb0c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800faf2:	f003 0301 	and.w	r3, r3, #1
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d004      	beq.n	800fb04 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2201      	movs	r2, #1
 800fafe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fb00:	2301      	movs	r3, #1
 800fb02:	e003      	b.n	800fb0c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	22c5      	movs	r2, #197	@ 0xc5
 800fb08:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800fb0a:	2300      	movs	r3, #0
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3714      	adds	r7, #20
 800fb10:	46bd      	mov	sp, r7
 800fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb16:	4770      	bx	lr
 800fb18:	2000001c 	.word	0x2000001c
 800fb1c:	10624dd3 	.word	0x10624dd3

0800fb20 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800fb20:	b480      	push	{r7}
 800fb22:	b085      	sub	sp, #20
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fb28:	4b1a      	ldr	r3, [pc, #104]	@ (800fb94 <SDMMC_GetCmdResp3+0x74>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	4a1a      	ldr	r2, [pc, #104]	@ (800fb98 <SDMMC_GetCmdResp3+0x78>)
 800fb2e:	fba2 2303 	umull	r2, r3, r2, r3
 800fb32:	0a5b      	lsrs	r3, r3, #9
 800fb34:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fb38:	fb02 f303 	mul.w	r3, r2, r3
 800fb3c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	1e5a      	subs	r2, r3, #1
 800fb42:	60fa      	str	r2, [r7, #12]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d102      	bne.n	800fb4e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fb48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fb4c:	e01b      	b.n	800fb86 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb52:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d0ef      	beq.n	800fb3e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d1ea      	bne.n	800fb3e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb6c:	f003 0304 	and.w	r3, r3, #4
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d004      	beq.n	800fb7e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2204      	movs	r2, #4
 800fb78:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fb7a:	2304      	movs	r3, #4
 800fb7c:	e003      	b.n	800fb86 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	22c5      	movs	r2, #197	@ 0xc5
 800fb82:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fb84:	2300      	movs	r3, #0
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3714      	adds	r7, #20
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb90:	4770      	bx	lr
 800fb92:	bf00      	nop
 800fb94:	2000001c 	.word	0x2000001c
 800fb98:	10624dd3 	.word	0x10624dd3

0800fb9c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b088      	sub	sp, #32
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	60f8      	str	r0, [r7, #12]
 800fba4:	460b      	mov	r3, r1
 800fba6:	607a      	str	r2, [r7, #4]
 800fba8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fbaa:	4b35      	ldr	r3, [pc, #212]	@ (800fc80 <SDMMC_GetCmdResp6+0xe4>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	4a35      	ldr	r2, [pc, #212]	@ (800fc84 <SDMMC_GetCmdResp6+0xe8>)
 800fbb0:	fba2 2303 	umull	r2, r3, r2, r3
 800fbb4:	0a5b      	lsrs	r3, r3, #9
 800fbb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fbba:	fb02 f303 	mul.w	r3, r2, r3
 800fbbe:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800fbc0:	69fb      	ldr	r3, [r7, #28]
 800fbc2:	1e5a      	subs	r2, r3, #1
 800fbc4:	61fa      	str	r2, [r7, #28]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d102      	bne.n	800fbd0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fbca:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fbce:	e052      	b.n	800fc76 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbd4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fbd6:	69bb      	ldr	r3, [r7, #24]
 800fbd8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d0ef      	beq.n	800fbc0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fbe0:	69bb      	ldr	r3, [r7, #24]
 800fbe2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d1ea      	bne.n	800fbc0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbee:	f003 0304 	and.w	r3, r3, #4
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d004      	beq.n	800fc00 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	2204      	movs	r2, #4
 800fbfa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fbfc:	2304      	movs	r3, #4
 800fbfe:	e03a      	b.n	800fc76 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc04:	f003 0301 	and.w	r3, r3, #1
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d004      	beq.n	800fc16 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	2201      	movs	r2, #1
 800fc10:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fc12:	2301      	movs	r3, #1
 800fc14:	e02f      	b.n	800fc76 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fc16:	68f8      	ldr	r0, [r7, #12]
 800fc18:	f7ff fc0e 	bl	800f438 <SDMMC_GetCommandResponse>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	461a      	mov	r2, r3
 800fc20:	7afb      	ldrb	r3, [r7, #11]
 800fc22:	4293      	cmp	r3, r2
 800fc24:	d001      	beq.n	800fc2a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fc26:	2301      	movs	r3, #1
 800fc28:	e025      	b.n	800fc76 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	22c5      	movs	r2, #197	@ 0xc5
 800fc2e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800fc30:	2100      	movs	r1, #0
 800fc32:	68f8      	ldr	r0, [r7, #12]
 800fc34:	f7ff fc0d 	bl	800f452 <SDMMC_GetResponse>
 800fc38:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d106      	bne.n	800fc52 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	0c1b      	lsrs	r3, r3, #16
 800fc48:	b29a      	uxth	r2, r3
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	e011      	b.n	800fc76 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800fc52:	697b      	ldr	r3, [r7, #20]
 800fc54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d002      	beq.n	800fc62 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fc5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fc60:	e009      	b.n	800fc76 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d002      	beq.n	800fc72 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fc6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fc70:	e001      	b.n	800fc76 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fc72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3720      	adds	r7, #32
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
 800fc7e:	bf00      	nop
 800fc80:	2000001c 	.word	0x2000001c
 800fc84:	10624dd3 	.word	0x10624dd3

0800fc88 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800fc88:	b480      	push	{r7}
 800fc8a:	b085      	sub	sp, #20
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fc90:	4b22      	ldr	r3, [pc, #136]	@ (800fd1c <SDMMC_GetCmdResp7+0x94>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	4a22      	ldr	r2, [pc, #136]	@ (800fd20 <SDMMC_GetCmdResp7+0x98>)
 800fc96:	fba2 2303 	umull	r2, r3, r2, r3
 800fc9a:	0a5b      	lsrs	r3, r3, #9
 800fc9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fca0:	fb02 f303 	mul.w	r3, r2, r3
 800fca4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	1e5a      	subs	r2, r3, #1
 800fcaa:	60fa      	str	r2, [r7, #12]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d102      	bne.n	800fcb6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fcb0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fcb4:	e02c      	b.n	800fd10 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d0ef      	beq.n	800fca6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d1ea      	bne.n	800fca6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcd4:	f003 0304 	and.w	r3, r3, #4
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d004      	beq.n	800fce6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2204      	movs	r2, #4
 800fce0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fce2:	2304      	movs	r3, #4
 800fce4:	e014      	b.n	800fd10 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcea:	f003 0301 	and.w	r3, r3, #1
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d004      	beq.n	800fcfc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2201      	movs	r2, #1
 800fcf6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	e009      	b.n	800fd10 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d002      	beq.n	800fd0e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2240      	movs	r2, #64	@ 0x40
 800fd0c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fd0e:	2300      	movs	r3, #0
  
}
 800fd10:	4618      	mov	r0, r3
 800fd12:	3714      	adds	r7, #20
 800fd14:	46bd      	mov	sp, r7
 800fd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1a:	4770      	bx	lr
 800fd1c:	2000001c 	.word	0x2000001c
 800fd20:	10624dd3 	.word	0x10624dd3

0800fd24 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800fd24:	b480      	push	{r7}
 800fd26:	b085      	sub	sp, #20
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fd2c:	4b11      	ldr	r3, [pc, #68]	@ (800fd74 <SDMMC_GetCmdError+0x50>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	4a11      	ldr	r2, [pc, #68]	@ (800fd78 <SDMMC_GetCmdError+0x54>)
 800fd32:	fba2 2303 	umull	r2, r3, r2, r3
 800fd36:	0a5b      	lsrs	r3, r3, #9
 800fd38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd3c:	fb02 f303 	mul.w	r3, r2, r3
 800fd40:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	1e5a      	subs	r2, r3, #1
 800fd46:	60fa      	str	r2, [r7, #12]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d102      	bne.n	800fd52 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fd4c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fd50:	e009      	b.n	800fd66 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d0f1      	beq.n	800fd42 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	22c5      	movs	r2, #197	@ 0xc5
 800fd62:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800fd64:	2300      	movs	r3, #0
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	3714      	adds	r7, #20
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd70:	4770      	bx	lr
 800fd72:	bf00      	nop
 800fd74:	2000001c 	.word	0x2000001c
 800fd78:	10624dd3 	.word	0x10624dd3

0800fd7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b083      	sub	sp, #12
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	689b      	ldr	r3, [r3, #8]
 800fd88:	f043 0201 	orr.w	r2, r3, #1
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fd90:	2300      	movs	r3, #0
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	370c      	adds	r7, #12
 800fd96:	46bd      	mov	sp, r7
 800fd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9c:	4770      	bx	lr

0800fd9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fd9e:	b480      	push	{r7}
 800fda0:	b083      	sub	sp, #12
 800fda2:	af00      	add	r7, sp, #0
 800fda4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	689b      	ldr	r3, [r3, #8]
 800fdaa:	f023 0201 	bic.w	r2, r3, #1
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fdb2:	2300      	movs	r3, #0
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	370c      	adds	r7, #12
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbe:	4770      	bx	lr

0800fdc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fdc0:	b480      	push	{r7}
 800fdc2:	b085      	sub	sp, #20
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	3301      	adds	r3, #1
 800fdd2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fdda:	d901      	bls.n	800fde0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800fddc:	2303      	movs	r3, #3
 800fdde:	e01b      	b.n	800fe18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	691b      	ldr	r3, [r3, #16]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	daf2      	bge.n	800fdce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800fde8:	2300      	movs	r3, #0
 800fdea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	019b      	lsls	r3, r3, #6
 800fdf0:	f043 0220 	orr.w	r2, r3, #32
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fe04:	d901      	bls.n	800fe0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800fe06:	2303      	movs	r3, #3
 800fe08:	e006      	b.n	800fe18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	691b      	ldr	r3, [r3, #16]
 800fe0e:	f003 0320 	and.w	r3, r3, #32
 800fe12:	2b20      	cmp	r3, #32
 800fe14:	d0f0      	beq.n	800fdf8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800fe16:	2300      	movs	r3, #0
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3714      	adds	r7, #20
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr

0800fe24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fe24:	b480      	push	{r7}
 800fe26:	b085      	sub	sp, #20
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	3301      	adds	r3, #1
 800fe34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fe3c:	d901      	bls.n	800fe42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800fe3e:	2303      	movs	r3, #3
 800fe40:	e018      	b.n	800fe74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	691b      	ldr	r3, [r3, #16]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	daf2      	bge.n	800fe30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2210      	movs	r2, #16
 800fe52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	3301      	adds	r3, #1
 800fe58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fe60:	d901      	bls.n	800fe66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800fe62:	2303      	movs	r3, #3
 800fe64:	e006      	b.n	800fe74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	691b      	ldr	r3, [r3, #16]
 800fe6a:	f003 0310 	and.w	r3, r3, #16
 800fe6e:	2b10      	cmp	r3, #16
 800fe70:	d0f0      	beq.n	800fe54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800fe72:	2300      	movs	r3, #0
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	3714      	adds	r7, #20
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7e:	4770      	bx	lr

0800fe80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b08b      	sub	sp, #44	@ 0x2c
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	60f8      	str	r0, [r7, #12]
 800fe88:	60b9      	str	r1, [r7, #8]
 800fe8a:	4613      	mov	r3, r2
 800fe8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800fe96:	88fb      	ldrh	r3, [r7, #6]
 800fe98:	089b      	lsrs	r3, r3, #2
 800fe9a:	b29b      	uxth	r3, r3
 800fe9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800fe9e:	88fb      	ldrh	r3, [r7, #6]
 800fea0:	f003 0303 	and.w	r3, r3, #3
 800fea4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800fea6:	2300      	movs	r3, #0
 800fea8:	623b      	str	r3, [r7, #32]
 800feaa:	e014      	b.n	800fed6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800feac:	69bb      	ldr	r3, [r7, #24]
 800feae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800feb2:	681a      	ldr	r2, [r3, #0]
 800feb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feb6:	601a      	str	r2, [r3, #0]
    pDest++;
 800feb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feba:	3301      	adds	r3, #1
 800febc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800febe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fec0:	3301      	adds	r3, #1
 800fec2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800fec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fec6:	3301      	adds	r3, #1
 800fec8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800feca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fecc:	3301      	adds	r3, #1
 800fece:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800fed0:	6a3b      	ldr	r3, [r7, #32]
 800fed2:	3301      	adds	r3, #1
 800fed4:	623b      	str	r3, [r7, #32]
 800fed6:	6a3a      	ldr	r2, [r7, #32]
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	429a      	cmp	r2, r3
 800fedc:	d3e6      	bcc.n	800feac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800fede:	8bfb      	ldrh	r3, [r7, #30]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d01e      	beq.n	800ff22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800fee4:	2300      	movs	r3, #0
 800fee6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800fee8:	69bb      	ldr	r3, [r7, #24]
 800feea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800feee:	461a      	mov	r2, r3
 800fef0:	f107 0310 	add.w	r3, r7, #16
 800fef4:	6812      	ldr	r2, [r2, #0]
 800fef6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800fef8:	693a      	ldr	r2, [r7, #16]
 800fefa:	6a3b      	ldr	r3, [r7, #32]
 800fefc:	b2db      	uxtb	r3, r3
 800fefe:	00db      	lsls	r3, r3, #3
 800ff00:	fa22 f303 	lsr.w	r3, r2, r3
 800ff04:	b2da      	uxtb	r2, r3
 800ff06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff08:	701a      	strb	r2, [r3, #0]
      i++;
 800ff0a:	6a3b      	ldr	r3, [r7, #32]
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	623b      	str	r3, [r7, #32]
      pDest++;
 800ff10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff12:	3301      	adds	r3, #1
 800ff14:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ff16:	8bfb      	ldrh	r3, [r7, #30]
 800ff18:	3b01      	subs	r3, #1
 800ff1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ff1c:	8bfb      	ldrh	r3, [r7, #30]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d1ea      	bne.n	800fef8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ff22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ff24:	4618      	mov	r0, r3
 800ff26:	372c      	adds	r7, #44	@ 0x2c
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2e:	4770      	bx	lr

0800ff30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ff30:	b480      	push	{r7}
 800ff32:	b085      	sub	sp, #20
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	695b      	ldr	r3, [r3, #20]
 800ff3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	699b      	ldr	r3, [r3, #24]
 800ff42:	68fa      	ldr	r2, [r7, #12]
 800ff44:	4013      	ands	r3, r2
 800ff46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ff48:	68fb      	ldr	r3, [r7, #12]
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3714      	adds	r7, #20
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff54:	4770      	bx	lr

0800ff56 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800ff56:	b480      	push	{r7}
 800ff58:	b085      	sub	sp, #20
 800ff5a:	af00      	add	r7, sp, #0
 800ff5c:	6078      	str	r0, [r7, #4]
 800ff5e:	460b      	mov	r3, r1
 800ff60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800ff66:	78fb      	ldrb	r3, [r7, #3]
 800ff68:	015a      	lsls	r2, r3, #5
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	4413      	add	r3, r2
 800ff6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ff72:	689b      	ldr	r3, [r3, #8]
 800ff74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800ff76:	78fb      	ldrb	r3, [r7, #3]
 800ff78:	015a      	lsls	r2, r3, #5
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	4413      	add	r3, r2
 800ff7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ff82:	68db      	ldr	r3, [r3, #12]
 800ff84:	68ba      	ldr	r2, [r7, #8]
 800ff86:	4013      	ands	r3, r2
 800ff88:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ff8a:	68bb      	ldr	r3, [r7, #8]
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3714      	adds	r7, #20
 800ff90:	46bd      	mov	sp, r7
 800ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff96:	4770      	bx	lr

0800ff98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ff98:	b480      	push	{r7}
 800ff9a:	b083      	sub	sp, #12
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	695b      	ldr	r3, [r3, #20]
 800ffa4:	f003 0301 	and.w	r3, r3, #1
}
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	370c      	adds	r7, #12
 800ffac:	46bd      	mov	sp, r7
 800ffae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb2:	4770      	bx	lr

0800ffb4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	b085      	sub	sp, #20
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	460b      	mov	r3, r1
 800ffbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	68fa      	ldr	r2, [r7, #12]
 800ffce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ffd2:	f023 0303 	bic.w	r3, r3, #3
 800ffd6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ffde:	681a      	ldr	r2, [r3, #0]
 800ffe0:	78fb      	ldrb	r3, [r7, #3]
 800ffe2:	f003 0303 	and.w	r3, r3, #3
 800ffe6:	68f9      	ldr	r1, [r7, #12]
 800ffe8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800ffec:	4313      	orrs	r3, r2
 800ffee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800fff0:	78fb      	ldrb	r3, [r7, #3]
 800fff2:	2b01      	cmp	r3, #1
 800fff4:	d107      	bne.n	8010006 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800fffc:	461a      	mov	r2, r3
 800fffe:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8010002:	6053      	str	r3, [r2, #4]
 8010004:	e00c      	b.n	8010020 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8010006:	78fb      	ldrb	r3, [r7, #3]
 8010008:	2b02      	cmp	r3, #2
 801000a:	d107      	bne.n	801001c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010012:	461a      	mov	r2, r3
 8010014:	f241 7370 	movw	r3, #6000	@ 0x1770
 8010018:	6053      	str	r3, [r2, #4]
 801001a:	e001      	b.n	8010020 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 801001c:	2301      	movs	r3, #1
 801001e:	e000      	b.n	8010022 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8010020:	2300      	movs	r3, #0
}
 8010022:	4618      	mov	r0, r3
 8010024:	3714      	adds	r7, #20
 8010026:	46bd      	mov	sp, r7
 8010028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002c:	4770      	bx	lr

0801002e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801002e:	b480      	push	{r7}
 8010030:	b085      	sub	sp, #20
 8010032:	af00      	add	r7, sp, #0
 8010034:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010040:	695b      	ldr	r3, [r3, #20]
 8010042:	b29b      	uxth	r3, r3
}
 8010044:	4618      	mov	r0, r3
 8010046:	3714      	adds	r7, #20
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr

08010050 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8010050:	b480      	push	{r7}
 8010052:	b089      	sub	sp, #36	@ 0x24
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	460b      	mov	r3, r1
 801005a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8010060:	78fb      	ldrb	r3, [r7, #3]
 8010062:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8010064:	2300      	movs	r3, #0
 8010066:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8010068:	69bb      	ldr	r3, [r7, #24]
 801006a:	015a      	lsls	r2, r3, #5
 801006c:	69fb      	ldr	r3, [r7, #28]
 801006e:	4413      	add	r3, r2
 8010070:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	0c9b      	lsrs	r3, r3, #18
 8010078:	f003 0303 	and.w	r3, r3, #3
 801007c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 801007e:	69bb      	ldr	r3, [r7, #24]
 8010080:	015a      	lsls	r2, r3, #5
 8010082:	69fb      	ldr	r3, [r7, #28]
 8010084:	4413      	add	r3, r2
 8010086:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	0fdb      	lsrs	r3, r3, #31
 801008e:	f003 0301 	and.w	r3, r3, #1
 8010092:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8010094:	69bb      	ldr	r3, [r7, #24]
 8010096:	015a      	lsls	r2, r3, #5
 8010098:	69fb      	ldr	r3, [r7, #28]
 801009a:	4413      	add	r3, r2
 801009c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80100a0:	685b      	ldr	r3, [r3, #4]
 80100a2:	0fdb      	lsrs	r3, r3, #31
 80100a4:	f003 0301 	and.w	r3, r3, #1
 80100a8:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	689b      	ldr	r3, [r3, #8]
 80100ae:	f003 0320 	and.w	r3, r3, #32
 80100b2:	2b20      	cmp	r3, #32
 80100b4:	d10d      	bne.n	80100d2 <USB_HC_Halt+0x82>
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d10a      	bne.n	80100d2 <USB_HC_Halt+0x82>
 80100bc:	693b      	ldr	r3, [r7, #16]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d005      	beq.n	80100ce <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	2b01      	cmp	r3, #1
 80100c6:	d002      	beq.n	80100ce <USB_HC_Halt+0x7e>
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	2b03      	cmp	r3, #3
 80100cc:	d101      	bne.n	80100d2 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80100ce:	2300      	movs	r3, #0
 80100d0:	e0d8      	b.n	8010284 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80100d2:	697b      	ldr	r3, [r7, #20]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d002      	beq.n	80100de <USB_HC_Halt+0x8e>
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	2b02      	cmp	r3, #2
 80100dc:	d173      	bne.n	80101c6 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80100de:	69bb      	ldr	r3, [r7, #24]
 80100e0:	015a      	lsls	r2, r3, #5
 80100e2:	69fb      	ldr	r3, [r7, #28]
 80100e4:	4413      	add	r3, r2
 80100e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	69ba      	ldr	r2, [r7, #24]
 80100ee:	0151      	lsls	r1, r2, #5
 80100f0:	69fa      	ldr	r2, [r7, #28]
 80100f2:	440a      	add	r2, r1
 80100f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80100f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80100fc:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	689b      	ldr	r3, [r3, #8]
 8010102:	f003 0320 	and.w	r3, r3, #32
 8010106:	2b00      	cmp	r3, #0
 8010108:	d14a      	bne.n	80101a0 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801010e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010112:	2b00      	cmp	r3, #0
 8010114:	d133      	bne.n	801017e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8010116:	69bb      	ldr	r3, [r7, #24]
 8010118:	015a      	lsls	r2, r3, #5
 801011a:	69fb      	ldr	r3, [r7, #28]
 801011c:	4413      	add	r3, r2
 801011e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	69ba      	ldr	r2, [r7, #24]
 8010126:	0151      	lsls	r1, r2, #5
 8010128:	69fa      	ldr	r2, [r7, #28]
 801012a:	440a      	add	r2, r1
 801012c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010130:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010134:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010136:	69bb      	ldr	r3, [r7, #24]
 8010138:	015a      	lsls	r2, r3, #5
 801013a:	69fb      	ldr	r3, [r7, #28]
 801013c:	4413      	add	r3, r2
 801013e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	69ba      	ldr	r2, [r7, #24]
 8010146:	0151      	lsls	r1, r2, #5
 8010148:	69fa      	ldr	r2, [r7, #28]
 801014a:	440a      	add	r2, r1
 801014c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010150:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010154:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8010156:	68bb      	ldr	r3, [r7, #8]
 8010158:	3301      	adds	r3, #1
 801015a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010162:	d82e      	bhi.n	80101c2 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010164:	69bb      	ldr	r3, [r7, #24]
 8010166:	015a      	lsls	r2, r3, #5
 8010168:	69fb      	ldr	r3, [r7, #28]
 801016a:	4413      	add	r3, r2
 801016c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010176:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801017a:	d0ec      	beq.n	8010156 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801017c:	e081      	b.n	8010282 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801017e:	69bb      	ldr	r3, [r7, #24]
 8010180:	015a      	lsls	r2, r3, #5
 8010182:	69fb      	ldr	r3, [r7, #28]
 8010184:	4413      	add	r3, r2
 8010186:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	69ba      	ldr	r2, [r7, #24]
 801018e:	0151      	lsls	r1, r2, #5
 8010190:	69fa      	ldr	r2, [r7, #28]
 8010192:	440a      	add	r2, r1
 8010194:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010198:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801019c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801019e:	e070      	b.n	8010282 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80101a0:	69bb      	ldr	r3, [r7, #24]
 80101a2:	015a      	lsls	r2, r3, #5
 80101a4:	69fb      	ldr	r3, [r7, #28]
 80101a6:	4413      	add	r3, r2
 80101a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	69ba      	ldr	r2, [r7, #24]
 80101b0:	0151      	lsls	r1, r2, #5
 80101b2:	69fa      	ldr	r2, [r7, #28]
 80101b4:	440a      	add	r2, r1
 80101b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80101ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80101be:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80101c0:	e05f      	b.n	8010282 <USB_HC_Halt+0x232>
            break;
 80101c2:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80101c4:	e05d      	b.n	8010282 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80101c6:	69bb      	ldr	r3, [r7, #24]
 80101c8:	015a      	lsls	r2, r3, #5
 80101ca:	69fb      	ldr	r3, [r7, #28]
 80101cc:	4413      	add	r3, r2
 80101ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	69ba      	ldr	r2, [r7, #24]
 80101d6:	0151      	lsls	r1, r2, #5
 80101d8:	69fa      	ldr	r2, [r7, #28]
 80101da:	440a      	add	r2, r1
 80101dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80101e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80101e4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80101e6:	69fb      	ldr	r3, [r7, #28]
 80101e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80101ec:	691b      	ldr	r3, [r3, #16]
 80101ee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d133      	bne.n	801025e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80101f6:	69bb      	ldr	r3, [r7, #24]
 80101f8:	015a      	lsls	r2, r3, #5
 80101fa:	69fb      	ldr	r3, [r7, #28]
 80101fc:	4413      	add	r3, r2
 80101fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	69ba      	ldr	r2, [r7, #24]
 8010206:	0151      	lsls	r1, r2, #5
 8010208:	69fa      	ldr	r2, [r7, #28]
 801020a:	440a      	add	r2, r1
 801020c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010210:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010214:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010216:	69bb      	ldr	r3, [r7, #24]
 8010218:	015a      	lsls	r2, r3, #5
 801021a:	69fb      	ldr	r3, [r7, #28]
 801021c:	4413      	add	r3, r2
 801021e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	69ba      	ldr	r2, [r7, #24]
 8010226:	0151      	lsls	r1, r2, #5
 8010228:	69fa      	ldr	r2, [r7, #28]
 801022a:	440a      	add	r2, r1
 801022c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010230:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010234:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	3301      	adds	r3, #1
 801023a:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 801023c:	68bb      	ldr	r3, [r7, #8]
 801023e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010242:	d81d      	bhi.n	8010280 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010244:	69bb      	ldr	r3, [r7, #24]
 8010246:	015a      	lsls	r2, r3, #5
 8010248:	69fb      	ldr	r3, [r7, #28]
 801024a:	4413      	add	r3, r2
 801024c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010256:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801025a:	d0ec      	beq.n	8010236 <USB_HC_Halt+0x1e6>
 801025c:	e011      	b.n	8010282 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801025e:	69bb      	ldr	r3, [r7, #24]
 8010260:	015a      	lsls	r2, r3, #5
 8010262:	69fb      	ldr	r3, [r7, #28]
 8010264:	4413      	add	r3, r2
 8010266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	69ba      	ldr	r2, [r7, #24]
 801026e:	0151      	lsls	r1, r2, #5
 8010270:	69fa      	ldr	r2, [r7, #28]
 8010272:	440a      	add	r2, r1
 8010274:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010278:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801027c:	6013      	str	r3, [r2, #0]
 801027e:	e000      	b.n	8010282 <USB_HC_Halt+0x232>
          break;
 8010280:	bf00      	nop
    }
  }

  return HAL_OK;
 8010282:	2300      	movs	r3, #0
}
 8010284:	4618      	mov	r0, r3
 8010286:	3724      	adds	r7, #36	@ 0x24
 8010288:	46bd      	mov	sp, r7
 801028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028e:	4770      	bx	lr

08010290 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b088      	sub	sp, #32
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8010298:	2300      	movs	r3, #0
 801029a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80102a0:	2300      	movs	r3, #0
 80102a2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80102a4:	6878      	ldr	r0, [r7, #4]
 80102a6:	f7ff fd7a 	bl	800fd9e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80102aa:	2110      	movs	r1, #16
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f7ff fd87 	bl	800fdc0 <USB_FlushTxFifo>
 80102b2:	4603      	mov	r3, r0
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d001      	beq.n	80102bc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80102b8:	2301      	movs	r3, #1
 80102ba:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f7ff fdb1 	bl	800fe24 <USB_FlushRxFifo>
 80102c2:	4603      	mov	r3, r0
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d001      	beq.n	80102cc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80102c8:	2301      	movs	r3, #1
 80102ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80102cc:	2300      	movs	r3, #0
 80102ce:	61bb      	str	r3, [r7, #24]
 80102d0:	e01f      	b.n	8010312 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80102d2:	69bb      	ldr	r3, [r7, #24]
 80102d4:	015a      	lsls	r2, r3, #5
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	4413      	add	r3, r2
 80102da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80102e2:	693b      	ldr	r3, [r7, #16]
 80102e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80102e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80102f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80102f2:	693b      	ldr	r3, [r7, #16]
 80102f4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80102f8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80102fa:	69bb      	ldr	r3, [r7, #24]
 80102fc:	015a      	lsls	r2, r3, #5
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	4413      	add	r3, r2
 8010302:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010306:	461a      	mov	r2, r3
 8010308:	693b      	ldr	r3, [r7, #16]
 801030a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 801030c:	69bb      	ldr	r3, [r7, #24]
 801030e:	3301      	adds	r3, #1
 8010310:	61bb      	str	r3, [r7, #24]
 8010312:	69bb      	ldr	r3, [r7, #24]
 8010314:	2b0f      	cmp	r3, #15
 8010316:	d9dc      	bls.n	80102d2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8010318:	2300      	movs	r3, #0
 801031a:	61bb      	str	r3, [r7, #24]
 801031c:	e034      	b.n	8010388 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 801031e:	69bb      	ldr	r3, [r7, #24]
 8010320:	015a      	lsls	r2, r3, #5
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	4413      	add	r3, r2
 8010326:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 801032e:	693b      	ldr	r3, [r7, #16]
 8010330:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010334:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8010336:	693b      	ldr	r3, [r7, #16]
 8010338:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801033c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801033e:	693b      	ldr	r3, [r7, #16]
 8010340:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8010344:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8010346:	69bb      	ldr	r3, [r7, #24]
 8010348:	015a      	lsls	r2, r3, #5
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	4413      	add	r3, r2
 801034e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010352:	461a      	mov	r2, r3
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	3301      	adds	r3, #1
 801035c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010364:	d80c      	bhi.n	8010380 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010366:	69bb      	ldr	r3, [r7, #24]
 8010368:	015a      	lsls	r2, r3, #5
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	4413      	add	r3, r2
 801036e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010378:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801037c:	d0ec      	beq.n	8010358 <USB_StopHost+0xc8>
 801037e:	e000      	b.n	8010382 <USB_StopHost+0xf2>
        break;
 8010380:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8010382:	69bb      	ldr	r3, [r7, #24]
 8010384:	3301      	adds	r3, #1
 8010386:	61bb      	str	r3, [r7, #24]
 8010388:	69bb      	ldr	r3, [r7, #24]
 801038a:	2b0f      	cmp	r3, #15
 801038c:	d9c7      	bls.n	801031e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 801038e:	697b      	ldr	r3, [r7, #20]
 8010390:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010394:	461a      	mov	r2, r3
 8010396:	f04f 33ff 	mov.w	r3, #4294967295
 801039a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f04f 32ff 	mov.w	r2, #4294967295
 80103a2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f7ff fce9 	bl	800fd7c <USB_EnableGlobalInt>

  return ret;
 80103aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80103ac:	4618      	mov	r0, r3
 80103ae:	3720      	adds	r7, #32
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}

080103b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80103b8:	4904      	ldr	r1, [pc, #16]	@ (80103cc <MX_FATFS_Init+0x18>)
 80103ba:	4805      	ldr	r0, [pc, #20]	@ (80103d0 <MX_FATFS_Init+0x1c>)
 80103bc:	f003 f9c4 	bl	8013748 <FATFS_LinkDriver>
 80103c0:	4603      	mov	r3, r0
 80103c2:	461a      	mov	r2, r3
 80103c4:	4b03      	ldr	r3, [pc, #12]	@ (80103d4 <MX_FATFS_Init+0x20>)
 80103c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80103c8:	bf00      	nop
 80103ca:	bd80      	pop	{r7, pc}
 80103cc:	20001788 	.word	0x20001788
 80103d0:	08019e68 	.word	0x08019e68
 80103d4:	20001784 	.word	0x20001784

080103d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80103d8:	b480      	push	{r7}
 80103da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80103dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80103de:	4618      	mov	r0, r3
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr

080103e8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b088      	sub	sp, #32
 80103ec:	af02      	add	r7, sp, #8
 80103ee:	60f8      	str	r0, [r7, #12]
 80103f0:	60b9      	str	r1, [r7, #8]
 80103f2:	607a      	str	r2, [r7, #4]
 80103f4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80103f6:	2300      	movs	r3, #0
 80103f8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	9300      	str	r3, [sp, #0]
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	68ba      	ldr	r2, [r7, #8]
 8010402:	68f9      	ldr	r1, [r7, #12]
 8010404:	4806      	ldr	r0, [pc, #24]	@ (8010420 <BSP_SD_ReadBlocks+0x38>)
 8010406:	f7fb f9e3 	bl	800b7d0 <HAL_SD_ReadBlocks>
 801040a:	4603      	mov	r3, r0
 801040c:	2b00      	cmp	r3, #0
 801040e:	d001      	beq.n	8010414 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010410:	2301      	movs	r3, #1
 8010412:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010414:	7dfb      	ldrb	r3, [r7, #23]
}
 8010416:	4618      	mov	r0, r3
 8010418:	3718      	adds	r7, #24
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}
 801041e:	bf00      	nop
 8010420:	20000e60 	.word	0x20000e60

08010424 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b088      	sub	sp, #32
 8010428:	af02      	add	r7, sp, #8
 801042a:	60f8      	str	r0, [r7, #12]
 801042c:	60b9      	str	r1, [r7, #8]
 801042e:	607a      	str	r2, [r7, #4]
 8010430:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8010432:	2300      	movs	r3, #0
 8010434:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	9300      	str	r3, [sp, #0]
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	68ba      	ldr	r2, [r7, #8]
 801043e:	68f9      	ldr	r1, [r7, #12]
 8010440:	4806      	ldr	r0, [pc, #24]	@ (801045c <BSP_SD_WriteBlocks+0x38>)
 8010442:	f7fb fba3 	bl	800bb8c <HAL_SD_WriteBlocks>
 8010446:	4603      	mov	r3, r0
 8010448:	2b00      	cmp	r3, #0
 801044a:	d001      	beq.n	8010450 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 801044c:	2301      	movs	r3, #1
 801044e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010450:	7dfb      	ldrb	r3, [r7, #23]
}
 8010452:	4618      	mov	r0, r3
 8010454:	3718      	adds	r7, #24
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}
 801045a:	bf00      	nop
 801045c:	20000e60 	.word	0x20000e60

08010460 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010464:	4805      	ldr	r0, [pc, #20]	@ (801047c <BSP_SD_GetCardState+0x1c>)
 8010466:	f7fb fee7 	bl	800c238 <HAL_SD_GetCardState>
 801046a:	4603      	mov	r3, r0
 801046c:	2b04      	cmp	r3, #4
 801046e:	bf14      	ite	ne
 8010470:	2301      	movne	r3, #1
 8010472:	2300      	moveq	r3, #0
 8010474:	b2db      	uxtb	r3, r3
}
 8010476:	4618      	mov	r0, r3
 8010478:	bd80      	pop	{r7, pc}
 801047a:	bf00      	nop
 801047c:	20000e60 	.word	0x20000e60

08010480 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b082      	sub	sp, #8
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010488:	6879      	ldr	r1, [r7, #4]
 801048a:	4803      	ldr	r0, [pc, #12]	@ (8010498 <BSP_SD_GetCardInfo+0x18>)
 801048c:	f7fb fea8 	bl	800c1e0 <HAL_SD_GetCardInfo>
}
 8010490:	bf00      	nop
 8010492:	3708      	adds	r7, #8
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}
 8010498:	20000e60 	.word	0x20000e60

0801049c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b084      	sub	sp, #16
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 80104a4:	f003 f99c 	bl	80137e0 <osKernelSysTick>
 80104a8:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 80104aa:	e006      	b.n	80104ba <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80104ac:	f7ff ffd8 	bl	8010460 <BSP_SD_GetCardState>
 80104b0:	4603      	mov	r3, r0
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d101      	bne.n	80104ba <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80104b6:	2300      	movs	r3, #0
 80104b8:	e009      	b.n	80104ce <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 80104ba:	f003 f991 	bl	80137e0 <osKernelSysTick>
 80104be:	4602      	mov	r2, r0
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	1ad3      	subs	r3, r2, r3
 80104c4:	687a      	ldr	r2, [r7, #4]
 80104c6:	429a      	cmp	r2, r3
 80104c8:	d8f0      	bhi.n	80104ac <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80104ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3710      	adds	r7, #16
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}
	...

080104d8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b084      	sub	sp, #16
 80104dc:	af00      	add	r7, sp, #0
 80104de:	4603      	mov	r3, r0
 80104e0:	71fb      	strb	r3, [r7, #7]
  // HAL 기반 카드 상태 확인 (BSP 우회)
  HAL_SD_CardStateTypeDef cardState = HAL_SD_GetCardState(&hsd1);
 80104e2:	480e      	ldr	r0, [pc, #56]	@ (801051c <SD_CheckStatus+0x44>)
 80104e4:	f7fb fea8 	bl	800c238 <HAL_SD_GetCardState>
 80104e8:	60f8      	str	r0, [r7, #12]
  
  // SD 카드 상태 확인
  
  if(cardState == HAL_SD_CARD_TRANSFER)
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	2b04      	cmp	r3, #4
 80104ee:	d103      	bne.n	80104f8 <SD_CheckStatus+0x20>
  {
    // 카드가 TRANSFER 상태이면 초기화 완료로 간주
    Stat = 0;  // 모든 에러 플래그 클리어
 80104f0:	4b0b      	ldr	r3, [pc, #44]	@ (8010520 <SD_CheckStatus+0x48>)
 80104f2:	2200      	movs	r2, #0
 80104f4:	701a      	strb	r2, [r3, #0]
 80104f6:	e00a      	b.n	801050e <SD_CheckStatus+0x36>
    // SD 카드 준비됨
  }
  else
  {
    // 카드가 준비되지 않은 상태
    Stat = STA_NOINIT;
 80104f8:	4b09      	ldr	r3, [pc, #36]	@ (8010520 <SD_CheckStatus+0x48>)
 80104fa:	2201      	movs	r2, #1
 80104fc:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[sd_diskio] SD card status: NOT_READY (0x%02X)", Stat);
 80104fe:	4b08      	ldr	r3, [pc, #32]	@ (8010520 <SD_CheckStatus+0x48>)
 8010500:	781b      	ldrb	r3, [r3, #0]
 8010502:	b2db      	uxtb	r3, r3
 8010504:	461a      	mov	r2, r3
 8010506:	4907      	ldr	r1, [pc, #28]	@ (8010524 <SD_CheckStatus+0x4c>)
 8010508:	2002      	movs	r0, #2
 801050a:	f7f4 fac5 	bl	8004a98 <LOGGER_SendFormatted>
  }

  return Stat;
 801050e:	4b04      	ldr	r3, [pc, #16]	@ (8010520 <SD_CheckStatus+0x48>)
 8010510:	781b      	ldrb	r3, [r3, #0]
 8010512:	b2db      	uxtb	r3, r3
}
 8010514:	4618      	mov	r0, r3
 8010516:	3710      	adds	r7, #16
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}
 801051c:	20000e60 	.word	0x20000e60
 8010520:	2000006d 	.word	0x2000006d
 8010524:	08019b48 	.word	0x08019b48

08010528 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010528:	b590      	push	{r4, r7, lr}
 801052a:	b089      	sub	sp, #36	@ 0x24
 801052c:	af00      	add	r7, sp, #0
 801052e:	4603      	mov	r3, r0
 8010530:	71fb      	strb	r3, [r7, #7]
  LOG_INFO("[sd_diskio] SD_initialize called");
 8010532:	493d      	ldr	r1, [pc, #244]	@ (8010628 <SD_initialize+0x100>)
 8010534:	2001      	movs	r0, #1
 8010536:	f7f4 faaf 	bl	8004a98 <LOGGER_SendFormatted>
  
  // 초기 상태 설정
  Stat = STA_NOINIT;
 801053a:	4b3c      	ldr	r3, [pc, #240]	@ (801062c <SD_initialize+0x104>)
 801053c:	2201      	movs	r2, #1
 801053e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  int kernel_running = osKernelRunning();
 8010540:	f003 f942 	bl	80137c8 <osKernelRunning>
 8010544:	61f8      	str	r0, [r7, #28]
  LOG_INFO("[sd_diskio] FreeRTOS kernel running check: %d", kernel_running);
 8010546:	69fa      	ldr	r2, [r7, #28]
 8010548:	4939      	ldr	r1, [pc, #228]	@ (8010630 <SD_initialize+0x108>)
 801054a:	2001      	movs	r0, #1
 801054c:	f7f4 faa4 	bl	8004a98 <LOGGER_SendFormatted>
  if(kernel_running)
 8010550:	69fb      	ldr	r3, [r7, #28]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d055      	beq.n	8010602 <SD_initialize+0xda>
  osKernelState_t kernel_state = osKernelGetState();
  LOG_INFO("[sd_diskio] FreeRTOS kernel state: %d (osKernelRunning=%d)", kernel_state, osKernelRunning);
  if(kernel_state == osKernelRunning)
#endif
  {
    LOG_INFO("[sd_diskio] FreeRTOS kernel is running - proceeding with SD check");
 8010556:	4937      	ldr	r1, [pc, #220]	@ (8010634 <SD_initialize+0x10c>)
 8010558:	2001      	movs	r0, #1
 801055a:	f7f4 fa9d 	bl	8004a98 <LOGGER_SendFormatted>
    if(BSP_SD_Init() == MSD_OK)
    {
      Stat = SD_CheckStatus(lun);
    }
#else
    LOG_INFO("[sd_diskio] DISABLE_SD_INIT is active - using HAL-based check");
 801055e:	4936      	ldr	r1, [pc, #216]	@ (8010638 <SD_initialize+0x110>)
 8010560:	2001      	movs	r0, #1
 8010562:	f7f4 fa99 	bl	8004a98 <LOGGER_SendFormatted>
    Stat = SD_CheckStatus(lun);
 8010566:	79fb      	ldrb	r3, [r7, #7]
 8010568:	4618      	mov	r0, r3
 801056a:	f7ff ffb5 	bl	80104d8 <SD_CheckStatus>
 801056e:	4603      	mov	r3, r0
 8010570:	461a      	mov	r2, r3
 8010572:	4b2e      	ldr	r3, [pc, #184]	@ (801062c <SD_initialize+0x104>)
 8010574:	701a      	strb	r2, [r3, #0]

    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */
    LOG_INFO("[sd_diskio] Final Stat after SD_CheckStatus: 0x%02X", Stat);
 8010576:	4b2d      	ldr	r3, [pc, #180]	@ (801062c <SD_initialize+0x104>)
 8010578:	781b      	ldrb	r3, [r3, #0]
 801057a:	b2db      	uxtb	r3, r3
 801057c:	461a      	mov	r2, r3
 801057e:	492f      	ldr	r1, [pc, #188]	@ (801063c <SD_initialize+0x114>)
 8010580:	2001      	movs	r0, #1
 8010582:	f7f4 fa89 	bl	8004a98 <LOGGER_SendFormatted>

    if (Stat != STA_NOINIT)
 8010586:	4b29      	ldr	r3, [pc, #164]	@ (801062c <SD_initialize+0x104>)
 8010588:	781b      	ldrb	r3, [r3, #0]
 801058a:	b2db      	uxtb	r3, r3
 801058c:	2b01      	cmp	r3, #1
 801058e:	d033      	beq.n	80105f8 <SD_initialize+0xd0>
    {
      LOG_INFO("[sd_diskio] SD card ready - creating message queue...");
 8010590:	492b      	ldr	r1, [pc, #172]	@ (8010640 <SD_initialize+0x118>)
 8010592:	2001      	movs	r0, #1
 8010594:	f7f4 fa80 	bl	8004a98 <LOGGER_SendFormatted>
      if (SDQueueID == NULL)
 8010598:	4b2a      	ldr	r3, [pc, #168]	@ (8010644 <SD_initialize+0x11c>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d115      	bne.n	80105cc <SD_initialize+0xa4>
      {
 #if (osCMSIS <= 0x20000U)
        osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80105a0:	4b29      	ldr	r3, [pc, #164]	@ (8010648 <SD_initialize+0x120>)
 80105a2:	f107 040c 	add.w	r4, r7, #12
 80105a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80105a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80105ac:	f107 030c 	add.w	r3, r7, #12
 80105b0:	2100      	movs	r1, #0
 80105b2:	4618      	mov	r0, r3
 80105b4:	f003 f984 	bl	80138c0 <osMessageCreate>
 80105b8:	4603      	mov	r3, r0
 80105ba:	4a22      	ldr	r2, [pc, #136]	@ (8010644 <SD_initialize+0x11c>)
 80105bc:	6013      	str	r3, [r2, #0]
#else
        SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
        LOG_INFO("[sd_diskio] Message queue created: %p", SDQueueID);
 80105be:	4b21      	ldr	r3, [pc, #132]	@ (8010644 <SD_initialize+0x11c>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	461a      	mov	r2, r3
 80105c4:	4921      	ldr	r1, [pc, #132]	@ (801064c <SD_initialize+0x124>)
 80105c6:	2001      	movs	r0, #1
 80105c8:	f7f4 fa66 	bl	8004a98 <LOGGER_SendFormatted>
      }

      if (SDQueueID == NULL)
 80105cc:	4b1d      	ldr	r3, [pc, #116]	@ (8010644 <SD_initialize+0x11c>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d10c      	bne.n	80105ee <SD_initialize+0xc6>
      {
        LOG_ERROR("[sd_diskio] Failed to create message queue");
 80105d4:	491e      	ldr	r1, [pc, #120]	@ (8010650 <SD_initialize+0x128>)
 80105d6:	2003      	movs	r0, #3
 80105d8:	f7f4 fa5e 	bl	8004a98 <LOGGER_SendFormatted>
        Stat |= STA_NOINIT;
 80105dc:	4b13      	ldr	r3, [pc, #76]	@ (801062c <SD_initialize+0x104>)
 80105de:	781b      	ldrb	r3, [r3, #0]
 80105e0:	b2db      	uxtb	r3, r3
 80105e2:	f043 0301 	orr.w	r3, r3, #1
 80105e6:	b2da      	uxtb	r2, r3
 80105e8:	4b10      	ldr	r3, [pc, #64]	@ (801062c <SD_initialize+0x104>)
 80105ea:	701a      	strb	r2, [r3, #0]
 80105ec:	e00d      	b.n	801060a <SD_initialize+0xe2>
      }
      else
      {
        LOG_INFO("[sd_diskio] SD initialization completed successfully");
 80105ee:	4919      	ldr	r1, [pc, #100]	@ (8010654 <SD_initialize+0x12c>)
 80105f0:	2001      	movs	r0, #1
 80105f2:	f7f4 fa51 	bl	8004a98 <LOGGER_SendFormatted>
 80105f6:	e008      	b.n	801060a <SD_initialize+0xe2>
      }
    }
    else
    {
      LOG_WARN("[sd_diskio] SD card not ready - initialization failed");
 80105f8:	4917      	ldr	r1, [pc, #92]	@ (8010658 <SD_initialize+0x130>)
 80105fa:	2002      	movs	r0, #2
 80105fc:	f7f4 fa4c 	bl	8004a98 <LOGGER_SendFormatted>
 8010600:	e003      	b.n	801060a <SD_initialize+0xe2>
    }
  }
  else
  {
    LOG_ERROR("[sd_diskio] FreeRTOS kernel not running - cannot initialize SD");
 8010602:	4916      	ldr	r1, [pc, #88]	@ (801065c <SD_initialize+0x134>)
 8010604:	2003      	movs	r0, #3
 8010606:	f7f4 fa47 	bl	8004a98 <LOGGER_SendFormatted>
  }

  LOG_INFO("[sd_diskio] SD_initialize returning: 0x%02X", Stat);
 801060a:	4b08      	ldr	r3, [pc, #32]	@ (801062c <SD_initialize+0x104>)
 801060c:	781b      	ldrb	r3, [r3, #0]
 801060e:	b2db      	uxtb	r3, r3
 8010610:	461a      	mov	r2, r3
 8010612:	4913      	ldr	r1, [pc, #76]	@ (8010660 <SD_initialize+0x138>)
 8010614:	2001      	movs	r0, #1
 8010616:	f7f4 fa3f 	bl	8004a98 <LOGGER_SendFormatted>
  return Stat;
 801061a:	4b04      	ldr	r3, [pc, #16]	@ (801062c <SD_initialize+0x104>)
 801061c:	781b      	ldrb	r3, [r3, #0]
 801061e:	b2db      	uxtb	r3, r3

}
 8010620:	4618      	mov	r0, r3
 8010622:	3724      	adds	r7, #36	@ 0x24
 8010624:	46bd      	mov	sp, r7
 8010626:	bd90      	pop	{r4, r7, pc}
 8010628:	08019b78 	.word	0x08019b78
 801062c:	2000006d 	.word	0x2000006d
 8010630:	08019b9c 	.word	0x08019b9c
 8010634:	08019bcc 	.word	0x08019bcc
 8010638:	08019c10 	.word	0x08019c10
 801063c:	08019c50 	.word	0x08019c50
 8010640:	08019c84 	.word	0x08019c84
 8010644:	200019bc 	.word	0x200019bc
 8010648:	08019dec 	.word	0x08019dec
 801064c:	08019cbc 	.word	0x08019cbc
 8010650:	08019ce4 	.word	0x08019ce4
 8010654:	08019d10 	.word	0x08019d10
 8010658:	08019d48 	.word	0x08019d48
 801065c:	08019d80 	.word	0x08019d80
 8010660:	08019dc0 	.word	0x08019dc0

08010664 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b082      	sub	sp, #8
 8010668:	af00      	add	r7, sp, #0
 801066a:	4603      	mov	r3, r0
 801066c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801066e:	79fb      	ldrb	r3, [r7, #7]
 8010670:	4618      	mov	r0, r3
 8010672:	f7ff ff31 	bl	80104d8 <SD_CheckStatus>
 8010676:	4603      	mov	r3, r0
}
 8010678:	4618      	mov	r0, r3
 801067a:	3708      	adds	r7, #8
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}

08010680 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b088      	sub	sp, #32
 8010684:	af00      	add	r7, sp, #0
 8010686:	60b9      	str	r1, [r7, #8]
 8010688:	607a      	str	r2, [r7, #4]
 801068a:	603b      	str	r3, [r7, #0]
 801068c:	4603      	mov	r3, r0
 801068e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8010690:	2301      	movs	r3, #1
 8010692:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010694:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010698:	f7ff ff00 	bl	801049c <SD_CheckStatusWithTimeout>
 801069c:	4603      	mov	r3, r0
 801069e:	2b00      	cmp	r3, #0
 80106a0:	da01      	bge.n	80106a6 <SD_read+0x26>
  {
    return res;
 80106a2:	7ffb      	ldrb	r3, [r7, #31]
 80106a4:	e00e      	b.n	80106c4 <SD_read+0x44>
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned - using polling mode */
    // 폴링 모드로 SD 카드 읽기
    ret = BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_TIMEOUT);
 80106a6:	f247 5330 	movw	r3, #30000	@ 0x7530
 80106aa:	683a      	ldr	r2, [r7, #0]
 80106ac:	6879      	ldr	r1, [r7, #4]
 80106ae:	68b8      	ldr	r0, [r7, #8]
 80106b0:	f7ff fe9a 	bl	80103e8 <BSP_SD_ReadBlocks>
 80106b4:	4603      	mov	r3, r0
 80106b6:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 80106b8:	7fbb      	ldrb	r3, [r7, #30]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d101      	bne.n	80106c2 <SD_read+0x42>
        // 읽기 성공
        res = RES_OK;
 80106be:	2300      	movs	r3, #0
 80106c0:	77fb      	strb	r3, [r7, #31]

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80106c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3720      	adds	r7, #32
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}

080106cc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b086      	sub	sp, #24
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	60b9      	str	r1, [r7, #8]
 80106d4:	607a      	str	r2, [r7, #4]
 80106d6:	603b      	str	r3, [r7, #0]
 80106d8:	4603      	mov	r3, r0
 80106da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80106dc:	2301      	movs	r3, #1
 80106de:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80106e0:	f247 5030 	movw	r0, #30000	@ 0x7530
 80106e4:	f7ff feda 	bl	801049c <SD_CheckStatusWithTimeout>
 80106e8:	4603      	mov	r3, r0
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	da01      	bge.n	80106f2 <SD_write+0x26>
  {
    return res;
 80106ee:	7dfb      	ldrb	r3, [r7, #23]
 80106f0:	e00e      	b.n	8010710 <SD_write+0x44>
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  // BSP 폴링 모드 사용 (DMA 큐 대기 제거)
  // 폴링 모드로 SD 카드 쓰기
  ret = BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)sector, count, SD_TIMEOUT);
 80106f2:	f247 5330 	movw	r3, #30000	@ 0x7530
 80106f6:	683a      	ldr	r2, [r7, #0]
 80106f8:	6879      	ldr	r1, [r7, #4]
 80106fa:	68b8      	ldr	r0, [r7, #8]
 80106fc:	f7ff fe92 	bl	8010424 <BSP_SD_WriteBlocks>
 8010700:	4603      	mov	r3, r0
 8010702:	613b      	str	r3, [r7, #16]
  // 쓰기 결과 확인
  
  if(ret == MSD_OK)
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d101      	bne.n	801070e <SD_write+0x42>
  {
    // 폴링 방식이므로 큐 대기 불필요 - 즉시 성공 처리
    // 쓰기 완료
    res = RES_OK;
 801070a:	2300      	movs	r3, #0
 801070c:	75fb      	strb	r3, [r7, #23]
    }

  }
#endif

  return res;
 801070e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010710:	4618      	mov	r0, r3
 8010712:	3718      	adds	r7, #24
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}

08010718 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b08c      	sub	sp, #48	@ 0x30
 801071c:	af00      	add	r7, sp, #0
 801071e:	4603      	mov	r3, r0
 8010720:	603a      	str	r2, [r7, #0]
 8010722:	71fb      	strb	r3, [r7, #7]
 8010724:	460b      	mov	r3, r1
 8010726:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010728:	2301      	movs	r3, #1
 801072a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801072e:	4b25      	ldr	r3, [pc, #148]	@ (80107c4 <SD_ioctl+0xac>)
 8010730:	781b      	ldrb	r3, [r3, #0]
 8010732:	b2db      	uxtb	r3, r3
 8010734:	f003 0301 	and.w	r3, r3, #1
 8010738:	2b00      	cmp	r3, #0
 801073a:	d001      	beq.n	8010740 <SD_ioctl+0x28>
 801073c:	2303      	movs	r3, #3
 801073e:	e03c      	b.n	80107ba <SD_ioctl+0xa2>

  switch (cmd)
 8010740:	79bb      	ldrb	r3, [r7, #6]
 8010742:	2b03      	cmp	r3, #3
 8010744:	d834      	bhi.n	80107b0 <SD_ioctl+0x98>
 8010746:	a201      	add	r2, pc, #4	@ (adr r2, 801074c <SD_ioctl+0x34>)
 8010748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801074c:	0801075d 	.word	0x0801075d
 8010750:	08010765 	.word	0x08010765
 8010754:	0801077d 	.word	0x0801077d
 8010758:	08010797 	.word	0x08010797
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801075c:	2300      	movs	r3, #0
 801075e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010762:	e028      	b.n	80107b6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010764:	f107 030c 	add.w	r3, r7, #12
 8010768:	4618      	mov	r0, r3
 801076a:	f7ff fe89 	bl	8010480 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801076e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010774:	2300      	movs	r3, #0
 8010776:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801077a:	e01c      	b.n	80107b6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801077c:	f107 030c 	add.w	r3, r7, #12
 8010780:	4618      	mov	r0, r3
 8010782:	f7ff fe7d 	bl	8010480 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010788:	b29a      	uxth	r2, r3
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801078e:	2300      	movs	r3, #0
 8010790:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010794:	e00f      	b.n	80107b6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010796:	f107 030c 	add.w	r3, r7, #12
 801079a:	4618      	mov	r0, r3
 801079c:	f7ff fe70 	bl	8010480 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80107a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107a2:	0a5a      	lsrs	r2, r3, #9
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80107a8:	2300      	movs	r3, #0
 80107aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80107ae:	e002      	b.n	80107b6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80107b0:	2304      	movs	r3, #4
 80107b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80107b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	3730      	adds	r7, #48	@ 0x30
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}
 80107c2:	bf00      	nop
 80107c4:	2000006d 	.word	0x2000006d

080107c8 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b082      	sub	sp, #8
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80107d6:	1c5a      	adds	r2, r3, #1
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f000 f804 	bl	80107ec <USBH_HandleSof>
}
 80107e4:	bf00      	nop
 80107e6:	3708      	adds	r7, #8
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}

080107ec <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b082      	sub	sp, #8
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	781b      	ldrb	r3, [r3, #0]
 80107f8:	b2db      	uxtb	r3, r3
 80107fa:	2b0b      	cmp	r3, #11
 80107fc:	d10a      	bne.n	8010814 <USBH_HandleSof+0x28>
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010804:	2b00      	cmp	r3, #0
 8010806:	d005      	beq.n	8010814 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801080e:	699b      	ldr	r3, [r3, #24]
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	4798      	blx	r3
  }
}
 8010814:	bf00      	nop
 8010816:	3708      	adds	r7, #8
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}

0801081c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b082      	sub	sp, #8
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2201      	movs	r2, #1
 8010828:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 801082c:	2300      	movs	r3, #0
 801082e:	2200      	movs	r2, #0
 8010830:	2101      	movs	r1, #1
 8010832:	6878      	ldr	r0, [r7, #4]
 8010834:	f000 f85b 	bl	80108ee <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 8010838:	bf00      	nop
}
 801083a:	3708      	adds	r7, #8
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}

08010840 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8010840:	b480      	push	{r7}
 8010842:	b083      	sub	sp, #12
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	2200      	movs	r2, #0
 801084c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2201      	movs	r2, #1
 8010854:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8010858:	bf00      	nop
}
 801085a:	370c      	adds	r7, #12
 801085c:	46bd      	mov	sp, r7
 801085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010862:	4770      	bx	lr

08010864 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b082      	sub	sp, #8
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	2201      	movs	r2, #1
 8010870:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2200      	movs	r2, #0
 8010878:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	2200      	movs	r2, #0
 8010880:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010884:	2300      	movs	r3, #0
 8010886:	2200      	movs	r2, #0
 8010888:	2101      	movs	r1, #1
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f000 f82f 	bl	80108ee <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8010890:	2300      	movs	r3, #0
}
 8010892:	4618      	mov	r0, r3
 8010894:	3708      	adds	r7, #8
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}

0801089a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 801089a:	b580      	push	{r7, lr}
 801089c:	b082      	sub	sp, #8
 801089e:	af00      	add	r7, sp, #0
 80108a0:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2201      	movs	r2, #1
 80108a6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	2200      	movs	r2, #0
 80108ae:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2200      	movs	r2, #0
 80108b6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f005 f92a 	bl	8015b14 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	791b      	ldrb	r3, [r3, #4]
 80108c4:	4619      	mov	r1, r3
 80108c6:	6878      	ldr	r0, [r7, #4]
 80108c8:	f000 f847 	bl	801095a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	795b      	ldrb	r3, [r3, #5]
 80108d0:	4619      	mov	r1, r3
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f000 f841 	bl	801095a <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80108d8:	2300      	movs	r3, #0
 80108da:	2200      	movs	r2, #0
 80108dc:	2101      	movs	r1, #1
 80108de:	6878      	ldr	r0, [r7, #4]
 80108e0:	f000 f805 	bl	80108ee <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80108e4:	2300      	movs	r3, #0
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	3708      	adds	r7, #8
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}

080108ee <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 80108ee:	b580      	push	{r7, lr}
 80108f0:	b086      	sub	sp, #24
 80108f2:	af00      	add	r7, sp, #0
 80108f4:	60f8      	str	r0, [r7, #12]
 80108f6:	607a      	str	r2, [r7, #4]
 80108f8:	603b      	str	r3, [r7, #0]
 80108fa:	460b      	mov	r3, r1
 80108fc:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 80108fe:	7afa      	ldrb	r2, [r7, #11]
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 801090c:	4618      	mov	r0, r3
 801090e:	f003 f83f 	bl	8013990 <osMessageWaiting>
 8010912:	4603      	mov	r3, r0
 8010914:	f1c3 0310 	rsb	r3, r3, #16
 8010918:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 801091a:	697b      	ldr	r3, [r7, #20]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d009      	beq.n	8010934 <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801092c:	687a      	ldr	r2, [r7, #4]
 801092e:	4619      	mov	r1, r3
 8010930:	f002 ffee 	bl	8013910 <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 8010934:	bf00      	nop
 8010936:	3718      	adds	r7, #24
 8010938:	46bd      	mov	sp, r7
 801093a:	bd80      	pop	{r7, pc}

0801093c <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b082      	sub	sp, #8
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010944:	2300      	movs	r3, #0
 8010946:	2200      	movs	r2, #0
 8010948:	2101      	movs	r1, #1
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f7ff ffcf 	bl	80108ee <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8010950:	2300      	movs	r3, #0
}
 8010952:	4618      	mov	r0, r3
 8010954:	3708      	adds	r7, #8
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}

0801095a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801095a:	b480      	push	{r7}
 801095c:	b083      	sub	sp, #12
 801095e:	af00      	add	r7, sp, #0
 8010960:	6078      	str	r0, [r7, #4]
 8010962:	460b      	mov	r3, r1
 8010964:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8010966:	78fb      	ldrb	r3, [r7, #3]
 8010968:	2b0f      	cmp	r3, #15
 801096a:	d80d      	bhi.n	8010988 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801096c:	78fb      	ldrb	r3, [r7, #3]
 801096e:	687a      	ldr	r2, [r7, #4]
 8010970:	33e0      	adds	r3, #224	@ 0xe0
 8010972:	009b      	lsls	r3, r3, #2
 8010974:	4413      	add	r3, r2
 8010976:	685a      	ldr	r2, [r3, #4]
 8010978:	78fb      	ldrb	r3, [r7, #3]
 801097a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 801097e:	6879      	ldr	r1, [r7, #4]
 8010980:	33e0      	adds	r3, #224	@ 0xe0
 8010982:	009b      	lsls	r3, r3, #2
 8010984:	440b      	add	r3, r1
 8010986:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8010988:	2300      	movs	r3, #0
}
 801098a:	4618      	mov	r0, r3
 801098c:	370c      	adds	r7, #12
 801098e:	46bd      	mov	sp, r7
 8010990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010994:	4770      	bx	lr
	...

08010998 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b084      	sub	sp, #16
 801099c:	af00      	add	r7, sp, #0
 801099e:	4603      	mov	r3, r0
 80109a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80109a2:	79fb      	ldrb	r3, [r7, #7]
 80109a4:	4a08      	ldr	r2, [pc, #32]	@ (80109c8 <disk_status+0x30>)
 80109a6:	009b      	lsls	r3, r3, #2
 80109a8:	4413      	add	r3, r2
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	685b      	ldr	r3, [r3, #4]
 80109ae:	79fa      	ldrb	r2, [r7, #7]
 80109b0:	4905      	ldr	r1, [pc, #20]	@ (80109c8 <disk_status+0x30>)
 80109b2:	440a      	add	r2, r1
 80109b4:	7a12      	ldrb	r2, [r2, #8]
 80109b6:	4610      	mov	r0, r2
 80109b8:	4798      	blx	r3
 80109ba:	4603      	mov	r3, r0
 80109bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80109be:	7bfb      	ldrb	r3, [r7, #15]
}
 80109c0:	4618      	mov	r0, r3
 80109c2:	3710      	adds	r7, #16
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}
 80109c8:	200019e8 	.word	0x200019e8

080109cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b084      	sub	sp, #16
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	4603      	mov	r3, r0
 80109d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80109d6:	2300      	movs	r3, #0
 80109d8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80109da:	79fb      	ldrb	r3, [r7, #7]
 80109dc:	4a0d      	ldr	r2, [pc, #52]	@ (8010a14 <disk_initialize+0x48>)
 80109de:	5cd3      	ldrb	r3, [r2, r3]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d111      	bne.n	8010a08 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80109e4:	79fb      	ldrb	r3, [r7, #7]
 80109e6:	4a0b      	ldr	r2, [pc, #44]	@ (8010a14 <disk_initialize+0x48>)
 80109e8:	2101      	movs	r1, #1
 80109ea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80109ec:	79fb      	ldrb	r3, [r7, #7]
 80109ee:	4a09      	ldr	r2, [pc, #36]	@ (8010a14 <disk_initialize+0x48>)
 80109f0:	009b      	lsls	r3, r3, #2
 80109f2:	4413      	add	r3, r2
 80109f4:	685b      	ldr	r3, [r3, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	79fa      	ldrb	r2, [r7, #7]
 80109fa:	4906      	ldr	r1, [pc, #24]	@ (8010a14 <disk_initialize+0x48>)
 80109fc:	440a      	add	r2, r1
 80109fe:	7a12      	ldrb	r2, [r2, #8]
 8010a00:	4610      	mov	r0, r2
 8010a02:	4798      	blx	r3
 8010a04:	4603      	mov	r3, r0
 8010a06:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	3710      	adds	r7, #16
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}
 8010a12:	bf00      	nop
 8010a14:	200019e8 	.word	0x200019e8

08010a18 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010a18:	b590      	push	{r4, r7, lr}
 8010a1a:	b087      	sub	sp, #28
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	60b9      	str	r1, [r7, #8]
 8010a20:	607a      	str	r2, [r7, #4]
 8010a22:	603b      	str	r3, [r7, #0]
 8010a24:	4603      	mov	r3, r0
 8010a26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010a28:	7bfb      	ldrb	r3, [r7, #15]
 8010a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8010a54 <disk_read+0x3c>)
 8010a2c:	009b      	lsls	r3, r3, #2
 8010a2e:	4413      	add	r3, r2
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	689c      	ldr	r4, [r3, #8]
 8010a34:	7bfb      	ldrb	r3, [r7, #15]
 8010a36:	4a07      	ldr	r2, [pc, #28]	@ (8010a54 <disk_read+0x3c>)
 8010a38:	4413      	add	r3, r2
 8010a3a:	7a18      	ldrb	r0, [r3, #8]
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	687a      	ldr	r2, [r7, #4]
 8010a40:	68b9      	ldr	r1, [r7, #8]
 8010a42:	47a0      	blx	r4
 8010a44:	4603      	mov	r3, r0
 8010a46:	75fb      	strb	r3, [r7, #23]
  return res;
 8010a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	371c      	adds	r7, #28
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd90      	pop	{r4, r7, pc}
 8010a52:	bf00      	nop
 8010a54:	200019e8 	.word	0x200019e8

08010a58 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010a58:	b590      	push	{r4, r7, lr}
 8010a5a:	b087      	sub	sp, #28
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	60b9      	str	r1, [r7, #8]
 8010a60:	607a      	str	r2, [r7, #4]
 8010a62:	603b      	str	r3, [r7, #0]
 8010a64:	4603      	mov	r3, r0
 8010a66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010a68:	7bfb      	ldrb	r3, [r7, #15]
 8010a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8010a94 <disk_write+0x3c>)
 8010a6c:	009b      	lsls	r3, r3, #2
 8010a6e:	4413      	add	r3, r2
 8010a70:	685b      	ldr	r3, [r3, #4]
 8010a72:	68dc      	ldr	r4, [r3, #12]
 8010a74:	7bfb      	ldrb	r3, [r7, #15]
 8010a76:	4a07      	ldr	r2, [pc, #28]	@ (8010a94 <disk_write+0x3c>)
 8010a78:	4413      	add	r3, r2
 8010a7a:	7a18      	ldrb	r0, [r3, #8]
 8010a7c:	683b      	ldr	r3, [r7, #0]
 8010a7e:	687a      	ldr	r2, [r7, #4]
 8010a80:	68b9      	ldr	r1, [r7, #8]
 8010a82:	47a0      	blx	r4
 8010a84:	4603      	mov	r3, r0
 8010a86:	75fb      	strb	r3, [r7, #23]
  return res;
 8010a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	371c      	adds	r7, #28
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd90      	pop	{r4, r7, pc}
 8010a92:	bf00      	nop
 8010a94:	200019e8 	.word	0x200019e8

08010a98 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b084      	sub	sp, #16
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	603a      	str	r2, [r7, #0]
 8010aa2:	71fb      	strb	r3, [r7, #7]
 8010aa4:	460b      	mov	r3, r1
 8010aa6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010aa8:	79fb      	ldrb	r3, [r7, #7]
 8010aaa:	4a09      	ldr	r2, [pc, #36]	@ (8010ad0 <disk_ioctl+0x38>)
 8010aac:	009b      	lsls	r3, r3, #2
 8010aae:	4413      	add	r3, r2
 8010ab0:	685b      	ldr	r3, [r3, #4]
 8010ab2:	691b      	ldr	r3, [r3, #16]
 8010ab4:	79fa      	ldrb	r2, [r7, #7]
 8010ab6:	4906      	ldr	r1, [pc, #24]	@ (8010ad0 <disk_ioctl+0x38>)
 8010ab8:	440a      	add	r2, r1
 8010aba:	7a10      	ldrb	r0, [r2, #8]
 8010abc:	79b9      	ldrb	r1, [r7, #6]
 8010abe:	683a      	ldr	r2, [r7, #0]
 8010ac0:	4798      	blx	r3
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	73fb      	strb	r3, [r7, #15]
  return res;
 8010ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3710      	adds	r7, #16
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}
 8010ad0:	200019e8 	.word	0x200019e8

08010ad4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010ad4:	b480      	push	{r7}
 8010ad6:	b085      	sub	sp, #20
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	3301      	adds	r3, #1
 8010ae0:	781b      	ldrb	r3, [r3, #0]
 8010ae2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010ae4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010ae8:	021b      	lsls	r3, r3, #8
 8010aea:	b21a      	sxth	r2, r3
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	781b      	ldrb	r3, [r3, #0]
 8010af0:	b21b      	sxth	r3, r3
 8010af2:	4313      	orrs	r3, r2
 8010af4:	b21b      	sxth	r3, r3
 8010af6:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010af8:	89fb      	ldrh	r3, [r7, #14]
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3714      	adds	r7, #20
 8010afe:	46bd      	mov	sp, r7
 8010b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b04:	4770      	bx	lr

08010b06 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010b06:	b480      	push	{r7}
 8010b08:	b085      	sub	sp, #20
 8010b0a:	af00      	add	r7, sp, #0
 8010b0c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	3303      	adds	r3, #3
 8010b12:	781b      	ldrb	r3, [r3, #0]
 8010b14:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	021b      	lsls	r3, r3, #8
 8010b1a:	687a      	ldr	r2, [r7, #4]
 8010b1c:	3202      	adds	r2, #2
 8010b1e:	7812      	ldrb	r2, [r2, #0]
 8010b20:	4313      	orrs	r3, r2
 8010b22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	021b      	lsls	r3, r3, #8
 8010b28:	687a      	ldr	r2, [r7, #4]
 8010b2a:	3201      	adds	r2, #1
 8010b2c:	7812      	ldrb	r2, [r2, #0]
 8010b2e:	4313      	orrs	r3, r2
 8010b30:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	021b      	lsls	r3, r3, #8
 8010b36:	687a      	ldr	r2, [r7, #4]
 8010b38:	7812      	ldrb	r2, [r2, #0]
 8010b3a:	4313      	orrs	r3, r2
 8010b3c:	60fb      	str	r3, [r7, #12]
	return rv;
 8010b3e:	68fb      	ldr	r3, [r7, #12]
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	3714      	adds	r7, #20
 8010b44:	46bd      	mov	sp, r7
 8010b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4a:	4770      	bx	lr

08010b4c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010b4c:	b480      	push	{r7}
 8010b4e:	b083      	sub	sp, #12
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
 8010b54:	460b      	mov	r3, r1
 8010b56:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	1c5a      	adds	r2, r3, #1
 8010b5c:	607a      	str	r2, [r7, #4]
 8010b5e:	887a      	ldrh	r2, [r7, #2]
 8010b60:	b2d2      	uxtb	r2, r2
 8010b62:	701a      	strb	r2, [r3, #0]
 8010b64:	887b      	ldrh	r3, [r7, #2]
 8010b66:	0a1b      	lsrs	r3, r3, #8
 8010b68:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	1c5a      	adds	r2, r3, #1
 8010b6e:	607a      	str	r2, [r7, #4]
 8010b70:	887a      	ldrh	r2, [r7, #2]
 8010b72:	b2d2      	uxtb	r2, r2
 8010b74:	701a      	strb	r2, [r3, #0]
}
 8010b76:	bf00      	nop
 8010b78:	370c      	adds	r7, #12
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b80:	4770      	bx	lr

08010b82 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010b82:	b480      	push	{r7}
 8010b84:	b083      	sub	sp, #12
 8010b86:	af00      	add	r7, sp, #0
 8010b88:	6078      	str	r0, [r7, #4]
 8010b8a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	1c5a      	adds	r2, r3, #1
 8010b90:	607a      	str	r2, [r7, #4]
 8010b92:	683a      	ldr	r2, [r7, #0]
 8010b94:	b2d2      	uxtb	r2, r2
 8010b96:	701a      	strb	r2, [r3, #0]
 8010b98:	683b      	ldr	r3, [r7, #0]
 8010b9a:	0a1b      	lsrs	r3, r3, #8
 8010b9c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	1c5a      	adds	r2, r3, #1
 8010ba2:	607a      	str	r2, [r7, #4]
 8010ba4:	683a      	ldr	r2, [r7, #0]
 8010ba6:	b2d2      	uxtb	r2, r2
 8010ba8:	701a      	strb	r2, [r3, #0]
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	0a1b      	lsrs	r3, r3, #8
 8010bae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	1c5a      	adds	r2, r3, #1
 8010bb4:	607a      	str	r2, [r7, #4]
 8010bb6:	683a      	ldr	r2, [r7, #0]
 8010bb8:	b2d2      	uxtb	r2, r2
 8010bba:	701a      	strb	r2, [r3, #0]
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	0a1b      	lsrs	r3, r3, #8
 8010bc0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	1c5a      	adds	r2, r3, #1
 8010bc6:	607a      	str	r2, [r7, #4]
 8010bc8:	683a      	ldr	r2, [r7, #0]
 8010bca:	b2d2      	uxtb	r2, r2
 8010bcc:	701a      	strb	r2, [r3, #0]
}
 8010bce:	bf00      	nop
 8010bd0:	370c      	adds	r7, #12
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd8:	4770      	bx	lr

08010bda <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010bda:	b480      	push	{r7}
 8010bdc:	b087      	sub	sp, #28
 8010bde:	af00      	add	r7, sp, #0
 8010be0:	60f8      	str	r0, [r7, #12]
 8010be2:	60b9      	str	r1, [r7, #8]
 8010be4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010bea:	68bb      	ldr	r3, [r7, #8]
 8010bec:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d00d      	beq.n	8010c10 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010bf4:	693a      	ldr	r2, [r7, #16]
 8010bf6:	1c53      	adds	r3, r2, #1
 8010bf8:	613b      	str	r3, [r7, #16]
 8010bfa:	697b      	ldr	r3, [r7, #20]
 8010bfc:	1c59      	adds	r1, r3, #1
 8010bfe:	6179      	str	r1, [r7, #20]
 8010c00:	7812      	ldrb	r2, [r2, #0]
 8010c02:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	3b01      	subs	r3, #1
 8010c08:	607b      	str	r3, [r7, #4]
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d1f1      	bne.n	8010bf4 <mem_cpy+0x1a>
	}
}
 8010c10:	bf00      	nop
 8010c12:	371c      	adds	r7, #28
 8010c14:	46bd      	mov	sp, r7
 8010c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1a:	4770      	bx	lr

08010c1c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010c1c:	b480      	push	{r7}
 8010c1e:	b087      	sub	sp, #28
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	60f8      	str	r0, [r7, #12]
 8010c24:	60b9      	str	r1, [r7, #8]
 8010c26:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	1c5a      	adds	r2, r3, #1
 8010c30:	617a      	str	r2, [r7, #20]
 8010c32:	68ba      	ldr	r2, [r7, #8]
 8010c34:	b2d2      	uxtb	r2, r2
 8010c36:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	3b01      	subs	r3, #1
 8010c3c:	607b      	str	r3, [r7, #4]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d1f3      	bne.n	8010c2c <mem_set+0x10>
}
 8010c44:	bf00      	nop
 8010c46:	bf00      	nop
 8010c48:	371c      	adds	r7, #28
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c50:	4770      	bx	lr

08010c52 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010c52:	b480      	push	{r7}
 8010c54:	b089      	sub	sp, #36	@ 0x24
 8010c56:	af00      	add	r7, sp, #0
 8010c58:	60f8      	str	r0, [r7, #12]
 8010c5a:	60b9      	str	r1, [r7, #8]
 8010c5c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	61fb      	str	r3, [r7, #28]
 8010c62:	68bb      	ldr	r3, [r7, #8]
 8010c64:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010c66:	2300      	movs	r3, #0
 8010c68:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010c6a:	69fb      	ldr	r3, [r7, #28]
 8010c6c:	1c5a      	adds	r2, r3, #1
 8010c6e:	61fa      	str	r2, [r7, #28]
 8010c70:	781b      	ldrb	r3, [r3, #0]
 8010c72:	4619      	mov	r1, r3
 8010c74:	69bb      	ldr	r3, [r7, #24]
 8010c76:	1c5a      	adds	r2, r3, #1
 8010c78:	61ba      	str	r2, [r7, #24]
 8010c7a:	781b      	ldrb	r3, [r3, #0]
 8010c7c:	1acb      	subs	r3, r1, r3
 8010c7e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	3b01      	subs	r3, #1
 8010c84:	607b      	str	r3, [r7, #4]
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d002      	beq.n	8010c92 <mem_cmp+0x40>
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d0eb      	beq.n	8010c6a <mem_cmp+0x18>

	return r;
 8010c92:	697b      	ldr	r3, [r7, #20]
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	3724      	adds	r7, #36	@ 0x24
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9e:	4770      	bx	lr

08010ca0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010ca0:	b480      	push	{r7}
 8010ca2:	b083      	sub	sp, #12
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010caa:	e002      	b.n	8010cb2 <chk_chr+0x12>
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	3301      	adds	r3, #1
 8010cb0:	607b      	str	r3, [r7, #4]
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	781b      	ldrb	r3, [r3, #0]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d005      	beq.n	8010cc6 <chk_chr+0x26>
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	781b      	ldrb	r3, [r3, #0]
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	4293      	cmp	r3, r2
 8010cc4:	d1f2      	bne.n	8010cac <chk_chr+0xc>
	return *str;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	781b      	ldrb	r3, [r3, #0]
}
 8010cca:	4618      	mov	r0, r3
 8010ccc:	370c      	adds	r7, #12
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd4:	4770      	bx	lr
	...

08010cd8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010cd8:	b480      	push	{r7}
 8010cda:	b085      	sub	sp, #20
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
 8010ce0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	60bb      	str	r3, [r7, #8]
 8010ce6:	68bb      	ldr	r3, [r7, #8]
 8010ce8:	60fb      	str	r3, [r7, #12]
 8010cea:	e029      	b.n	8010d40 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010cec:	4a27      	ldr	r2, [pc, #156]	@ (8010d8c <chk_lock+0xb4>)
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	011b      	lsls	r3, r3, #4
 8010cf2:	4413      	add	r3, r2
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d01d      	beq.n	8010d36 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010cfa:	4a24      	ldr	r2, [pc, #144]	@ (8010d8c <chk_lock+0xb4>)
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	011b      	lsls	r3, r3, #4
 8010d00:	4413      	add	r3, r2
 8010d02:	681a      	ldr	r2, [r3, #0]
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	d116      	bne.n	8010d3a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010d0c:	4a1f      	ldr	r2, [pc, #124]	@ (8010d8c <chk_lock+0xb4>)
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	011b      	lsls	r3, r3, #4
 8010d12:	4413      	add	r3, r2
 8010d14:	3304      	adds	r3, #4
 8010d16:	681a      	ldr	r2, [r3, #0]
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010d1c:	429a      	cmp	r2, r3
 8010d1e:	d10c      	bne.n	8010d3a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010d20:	4a1a      	ldr	r2, [pc, #104]	@ (8010d8c <chk_lock+0xb4>)
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	011b      	lsls	r3, r3, #4
 8010d26:	4413      	add	r3, r2
 8010d28:	3308      	adds	r3, #8
 8010d2a:	681a      	ldr	r2, [r3, #0]
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d102      	bne.n	8010d3a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010d34:	e007      	b.n	8010d46 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010d36:	2301      	movs	r3, #1
 8010d38:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	3301      	adds	r3, #1
 8010d3e:	60fb      	str	r3, [r7, #12]
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	2b01      	cmp	r3, #1
 8010d44:	d9d2      	bls.n	8010cec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	2b02      	cmp	r3, #2
 8010d4a:	d109      	bne.n	8010d60 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d102      	bne.n	8010d58 <chk_lock+0x80>
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	2b02      	cmp	r3, #2
 8010d56:	d101      	bne.n	8010d5c <chk_lock+0x84>
 8010d58:	2300      	movs	r3, #0
 8010d5a:	e010      	b.n	8010d7e <chk_lock+0xa6>
 8010d5c:	2312      	movs	r3, #18
 8010d5e:	e00e      	b.n	8010d7e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d108      	bne.n	8010d78 <chk_lock+0xa0>
 8010d66:	4a09      	ldr	r2, [pc, #36]	@ (8010d8c <chk_lock+0xb4>)
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	011b      	lsls	r3, r3, #4
 8010d6c:	4413      	add	r3, r2
 8010d6e:	330c      	adds	r3, #12
 8010d70:	881b      	ldrh	r3, [r3, #0]
 8010d72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010d76:	d101      	bne.n	8010d7c <chk_lock+0xa4>
 8010d78:	2310      	movs	r3, #16
 8010d7a:	e000      	b.n	8010d7e <chk_lock+0xa6>
 8010d7c:	2300      	movs	r3, #0
}
 8010d7e:	4618      	mov	r0, r3
 8010d80:	3714      	adds	r7, #20
 8010d82:	46bd      	mov	sp, r7
 8010d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d88:	4770      	bx	lr
 8010d8a:	bf00      	nop
 8010d8c:	200019c8 	.word	0x200019c8

08010d90 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010d90:	b480      	push	{r7}
 8010d92:	b083      	sub	sp, #12
 8010d94:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010d96:	2300      	movs	r3, #0
 8010d98:	607b      	str	r3, [r7, #4]
 8010d9a:	e002      	b.n	8010da2 <enq_lock+0x12>
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	3301      	adds	r3, #1
 8010da0:	607b      	str	r3, [r7, #4]
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2b01      	cmp	r3, #1
 8010da6:	d806      	bhi.n	8010db6 <enq_lock+0x26>
 8010da8:	4a09      	ldr	r2, [pc, #36]	@ (8010dd0 <enq_lock+0x40>)
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	011b      	lsls	r3, r3, #4
 8010dae:	4413      	add	r3, r2
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d1f2      	bne.n	8010d9c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	2b02      	cmp	r3, #2
 8010dba:	bf14      	ite	ne
 8010dbc:	2301      	movne	r3, #1
 8010dbe:	2300      	moveq	r3, #0
 8010dc0:	b2db      	uxtb	r3, r3
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	370c      	adds	r7, #12
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dcc:	4770      	bx	lr
 8010dce:	bf00      	nop
 8010dd0:	200019c8 	.word	0x200019c8

08010dd4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010dd4:	b480      	push	{r7}
 8010dd6:	b085      	sub	sp, #20
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010dde:	2300      	movs	r3, #0
 8010de0:	60fb      	str	r3, [r7, #12]
 8010de2:	e01f      	b.n	8010e24 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010de4:	4a41      	ldr	r2, [pc, #260]	@ (8010eec <inc_lock+0x118>)
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	011b      	lsls	r3, r3, #4
 8010dea:	4413      	add	r3, r2
 8010dec:	681a      	ldr	r2, [r3, #0]
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	429a      	cmp	r2, r3
 8010df4:	d113      	bne.n	8010e1e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010df6:	4a3d      	ldr	r2, [pc, #244]	@ (8010eec <inc_lock+0x118>)
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	011b      	lsls	r3, r3, #4
 8010dfc:	4413      	add	r3, r2
 8010dfe:	3304      	adds	r3, #4
 8010e00:	681a      	ldr	r2, [r3, #0]
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010e06:	429a      	cmp	r2, r3
 8010e08:	d109      	bne.n	8010e1e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010e0a:	4a38      	ldr	r2, [pc, #224]	@ (8010eec <inc_lock+0x118>)
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	011b      	lsls	r3, r3, #4
 8010e10:	4413      	add	r3, r2
 8010e12:	3308      	adds	r3, #8
 8010e14:	681a      	ldr	r2, [r3, #0]
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d006      	beq.n	8010e2c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	3301      	adds	r3, #1
 8010e22:	60fb      	str	r3, [r7, #12]
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	2b01      	cmp	r3, #1
 8010e28:	d9dc      	bls.n	8010de4 <inc_lock+0x10>
 8010e2a:	e000      	b.n	8010e2e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010e2c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	2b02      	cmp	r3, #2
 8010e32:	d132      	bne.n	8010e9a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010e34:	2300      	movs	r3, #0
 8010e36:	60fb      	str	r3, [r7, #12]
 8010e38:	e002      	b.n	8010e40 <inc_lock+0x6c>
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	3301      	adds	r3, #1
 8010e3e:	60fb      	str	r3, [r7, #12]
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	2b01      	cmp	r3, #1
 8010e44:	d806      	bhi.n	8010e54 <inc_lock+0x80>
 8010e46:	4a29      	ldr	r2, [pc, #164]	@ (8010eec <inc_lock+0x118>)
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	011b      	lsls	r3, r3, #4
 8010e4c:	4413      	add	r3, r2
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d1f2      	bne.n	8010e3a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	2b02      	cmp	r3, #2
 8010e58:	d101      	bne.n	8010e5e <inc_lock+0x8a>
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	e040      	b.n	8010ee0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681a      	ldr	r2, [r3, #0]
 8010e62:	4922      	ldr	r1, [pc, #136]	@ (8010eec <inc_lock+0x118>)
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	011b      	lsls	r3, r3, #4
 8010e68:	440b      	add	r3, r1
 8010e6a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	689a      	ldr	r2, [r3, #8]
 8010e70:	491e      	ldr	r1, [pc, #120]	@ (8010eec <inc_lock+0x118>)
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	011b      	lsls	r3, r3, #4
 8010e76:	440b      	add	r3, r1
 8010e78:	3304      	adds	r3, #4
 8010e7a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	695a      	ldr	r2, [r3, #20]
 8010e80:	491a      	ldr	r1, [pc, #104]	@ (8010eec <inc_lock+0x118>)
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	011b      	lsls	r3, r3, #4
 8010e86:	440b      	add	r3, r1
 8010e88:	3308      	adds	r3, #8
 8010e8a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010e8c:	4a17      	ldr	r2, [pc, #92]	@ (8010eec <inc_lock+0x118>)
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	011b      	lsls	r3, r3, #4
 8010e92:	4413      	add	r3, r2
 8010e94:	330c      	adds	r3, #12
 8010e96:	2200      	movs	r2, #0
 8010e98:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010e9a:	683b      	ldr	r3, [r7, #0]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d009      	beq.n	8010eb4 <inc_lock+0xe0>
 8010ea0:	4a12      	ldr	r2, [pc, #72]	@ (8010eec <inc_lock+0x118>)
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	011b      	lsls	r3, r3, #4
 8010ea6:	4413      	add	r3, r2
 8010ea8:	330c      	adds	r3, #12
 8010eaa:	881b      	ldrh	r3, [r3, #0]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d001      	beq.n	8010eb4 <inc_lock+0xe0>
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	e015      	b.n	8010ee0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010eb4:	683b      	ldr	r3, [r7, #0]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d108      	bne.n	8010ecc <inc_lock+0xf8>
 8010eba:	4a0c      	ldr	r2, [pc, #48]	@ (8010eec <inc_lock+0x118>)
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	011b      	lsls	r3, r3, #4
 8010ec0:	4413      	add	r3, r2
 8010ec2:	330c      	adds	r3, #12
 8010ec4:	881b      	ldrh	r3, [r3, #0]
 8010ec6:	3301      	adds	r3, #1
 8010ec8:	b29a      	uxth	r2, r3
 8010eca:	e001      	b.n	8010ed0 <inc_lock+0xfc>
 8010ecc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010ed0:	4906      	ldr	r1, [pc, #24]	@ (8010eec <inc_lock+0x118>)
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	011b      	lsls	r3, r3, #4
 8010ed6:	440b      	add	r3, r1
 8010ed8:	330c      	adds	r3, #12
 8010eda:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	3301      	adds	r3, #1
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3714      	adds	r7, #20
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr
 8010eec:	200019c8 	.word	0x200019c8

08010ef0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010ef0:	b480      	push	{r7}
 8010ef2:	b085      	sub	sp, #20
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	3b01      	subs	r3, #1
 8010efc:	607b      	str	r3, [r7, #4]
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	2b01      	cmp	r3, #1
 8010f02:	d825      	bhi.n	8010f50 <dec_lock+0x60>
		n = Files[i].ctr;
 8010f04:	4a17      	ldr	r2, [pc, #92]	@ (8010f64 <dec_lock+0x74>)
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	011b      	lsls	r3, r3, #4
 8010f0a:	4413      	add	r3, r2
 8010f0c:	330c      	adds	r3, #12
 8010f0e:	881b      	ldrh	r3, [r3, #0]
 8010f10:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010f12:	89fb      	ldrh	r3, [r7, #14]
 8010f14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010f18:	d101      	bne.n	8010f1e <dec_lock+0x2e>
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010f1e:	89fb      	ldrh	r3, [r7, #14]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d002      	beq.n	8010f2a <dec_lock+0x3a>
 8010f24:	89fb      	ldrh	r3, [r7, #14]
 8010f26:	3b01      	subs	r3, #1
 8010f28:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010f2a:	4a0e      	ldr	r2, [pc, #56]	@ (8010f64 <dec_lock+0x74>)
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	011b      	lsls	r3, r3, #4
 8010f30:	4413      	add	r3, r2
 8010f32:	330c      	adds	r3, #12
 8010f34:	89fa      	ldrh	r2, [r7, #14]
 8010f36:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010f38:	89fb      	ldrh	r3, [r7, #14]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d105      	bne.n	8010f4a <dec_lock+0x5a>
 8010f3e:	4a09      	ldr	r2, [pc, #36]	@ (8010f64 <dec_lock+0x74>)
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	011b      	lsls	r3, r3, #4
 8010f44:	4413      	add	r3, r2
 8010f46:	2200      	movs	r2, #0
 8010f48:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	737b      	strb	r3, [r7, #13]
 8010f4e:	e001      	b.n	8010f54 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010f50:	2302      	movs	r3, #2
 8010f52:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010f54:	7b7b      	ldrb	r3, [r7, #13]
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3714      	adds	r7, #20
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f60:	4770      	bx	lr
 8010f62:	bf00      	nop
 8010f64:	200019c8 	.word	0x200019c8

08010f68 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010f68:	b480      	push	{r7}
 8010f6a:	b085      	sub	sp, #20
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010f70:	2300      	movs	r3, #0
 8010f72:	60fb      	str	r3, [r7, #12]
 8010f74:	e010      	b.n	8010f98 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010f76:	4a0d      	ldr	r2, [pc, #52]	@ (8010fac <clear_lock+0x44>)
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	011b      	lsls	r3, r3, #4
 8010f7c:	4413      	add	r3, r2
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	687a      	ldr	r2, [r7, #4]
 8010f82:	429a      	cmp	r2, r3
 8010f84:	d105      	bne.n	8010f92 <clear_lock+0x2a>
 8010f86:	4a09      	ldr	r2, [pc, #36]	@ (8010fac <clear_lock+0x44>)
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	011b      	lsls	r3, r3, #4
 8010f8c:	4413      	add	r3, r2
 8010f8e:	2200      	movs	r2, #0
 8010f90:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	3301      	adds	r3, #1
 8010f96:	60fb      	str	r3, [r7, #12]
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	2b01      	cmp	r3, #1
 8010f9c:	d9eb      	bls.n	8010f76 <clear_lock+0xe>
	}
}
 8010f9e:	bf00      	nop
 8010fa0:	bf00      	nop
 8010fa2:	3714      	adds	r7, #20
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010faa:	4770      	bx	lr
 8010fac:	200019c8 	.word	0x200019c8

08010fb0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b086      	sub	sp, #24
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010fb8:	2300      	movs	r3, #0
 8010fba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	78db      	ldrb	r3, [r3, #3]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d034      	beq.n	801102e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fc8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	7858      	ldrb	r0, [r3, #1]
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	697a      	ldr	r2, [r7, #20]
 8010fd8:	f7ff fd3e 	bl	8010a58 <disk_write>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d002      	beq.n	8010fe8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	73fb      	strb	r3, [r7, #15]
 8010fe6:	e022      	b.n	801102e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2200      	movs	r2, #0
 8010fec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	6a1b      	ldr	r3, [r3, #32]
 8010ff2:	697a      	ldr	r2, [r7, #20]
 8010ff4:	1ad2      	subs	r2, r2, r3
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	699b      	ldr	r3, [r3, #24]
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d217      	bcs.n	801102e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	789b      	ldrb	r3, [r3, #2]
 8011002:	613b      	str	r3, [r7, #16]
 8011004:	e010      	b.n	8011028 <sync_window+0x78>
					wsect += fs->fsize;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	699b      	ldr	r3, [r3, #24]
 801100a:	697a      	ldr	r2, [r7, #20]
 801100c:	4413      	add	r3, r2
 801100e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	7858      	ldrb	r0, [r3, #1]
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801101a:	2301      	movs	r3, #1
 801101c:	697a      	ldr	r2, [r7, #20]
 801101e:	f7ff fd1b 	bl	8010a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	3b01      	subs	r3, #1
 8011026:	613b      	str	r3, [r7, #16]
 8011028:	693b      	ldr	r3, [r7, #16]
 801102a:	2b01      	cmp	r3, #1
 801102c:	d8eb      	bhi.n	8011006 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801102e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011030:	4618      	mov	r0, r3
 8011032:	3718      	adds	r7, #24
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b084      	sub	sp, #16
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011042:	2300      	movs	r3, #0
 8011044:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801104a:	683a      	ldr	r2, [r7, #0]
 801104c:	429a      	cmp	r2, r3
 801104e:	d01b      	beq.n	8011088 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011050:	6878      	ldr	r0, [r7, #4]
 8011052:	f7ff ffad 	bl	8010fb0 <sync_window>
 8011056:	4603      	mov	r3, r0
 8011058:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801105a:	7bfb      	ldrb	r3, [r7, #15]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d113      	bne.n	8011088 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	7858      	ldrb	r0, [r3, #1]
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801106a:	2301      	movs	r3, #1
 801106c:	683a      	ldr	r2, [r7, #0]
 801106e:	f7ff fcd3 	bl	8010a18 <disk_read>
 8011072:	4603      	mov	r3, r0
 8011074:	2b00      	cmp	r3, #0
 8011076:	d004      	beq.n	8011082 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011078:	f04f 33ff 	mov.w	r3, #4294967295
 801107c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801107e:	2301      	movs	r3, #1
 8011080:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	683a      	ldr	r2, [r7, #0]
 8011086:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8011088:	7bfb      	ldrb	r3, [r7, #15]
}
 801108a:	4618      	mov	r0, r3
 801108c:	3710      	adds	r7, #16
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}
	...

08011094 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b084      	sub	sp, #16
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f7ff ff87 	bl	8010fb0 <sync_window>
 80110a2:	4603      	mov	r3, r0
 80110a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80110a6:	7bfb      	ldrb	r3, [r7, #15]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d158      	bne.n	801115e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	2b03      	cmp	r3, #3
 80110b2:	d148      	bne.n	8011146 <sync_fs+0xb2>
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	791b      	ldrb	r3, [r3, #4]
 80110b8:	2b01      	cmp	r3, #1
 80110ba:	d144      	bne.n	8011146 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	3330      	adds	r3, #48	@ 0x30
 80110c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80110c4:	2100      	movs	r1, #0
 80110c6:	4618      	mov	r0, r3
 80110c8:	f7ff fda8 	bl	8010c1c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	3330      	adds	r3, #48	@ 0x30
 80110d0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80110d4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80110d8:	4618      	mov	r0, r3
 80110da:	f7ff fd37 	bl	8010b4c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	3330      	adds	r3, #48	@ 0x30
 80110e2:	4921      	ldr	r1, [pc, #132]	@ (8011168 <sync_fs+0xd4>)
 80110e4:	4618      	mov	r0, r3
 80110e6:	f7ff fd4c 	bl	8010b82 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	3330      	adds	r3, #48	@ 0x30
 80110ee:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80110f2:	491e      	ldr	r1, [pc, #120]	@ (801116c <sync_fs+0xd8>)
 80110f4:	4618      	mov	r0, r3
 80110f6:	f7ff fd44 	bl	8010b82 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	3330      	adds	r3, #48	@ 0x30
 80110fe:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	691b      	ldr	r3, [r3, #16]
 8011106:	4619      	mov	r1, r3
 8011108:	4610      	mov	r0, r2
 801110a:	f7ff fd3a 	bl	8010b82 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	3330      	adds	r3, #48	@ 0x30
 8011112:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	68db      	ldr	r3, [r3, #12]
 801111a:	4619      	mov	r1, r3
 801111c:	4610      	mov	r0, r2
 801111e:	f7ff fd30 	bl	8010b82 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	69db      	ldr	r3, [r3, #28]
 8011126:	1c5a      	adds	r2, r3, #1
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	7858      	ldrb	r0, [r3, #1]
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801113a:	2301      	movs	r3, #1
 801113c:	f7ff fc8c 	bl	8010a58 <disk_write>
			fs->fsi_flag = 0;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2200      	movs	r2, #0
 8011144:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	785b      	ldrb	r3, [r3, #1]
 801114a:	2200      	movs	r2, #0
 801114c:	2100      	movs	r1, #0
 801114e:	4618      	mov	r0, r3
 8011150:	f7ff fca2 	bl	8010a98 <disk_ioctl>
 8011154:	4603      	mov	r3, r0
 8011156:	2b00      	cmp	r3, #0
 8011158:	d001      	beq.n	801115e <sync_fs+0xca>
 801115a:	2301      	movs	r3, #1
 801115c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801115e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011160:	4618      	mov	r0, r3
 8011162:	3710      	adds	r7, #16
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}
 8011168:	41615252 	.word	0x41615252
 801116c:	61417272 	.word	0x61417272

08011170 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011170:	b480      	push	{r7}
 8011172:	b083      	sub	sp, #12
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
 8011178:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	3b02      	subs	r3, #2
 801117e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	695b      	ldr	r3, [r3, #20]
 8011184:	3b02      	subs	r3, #2
 8011186:	683a      	ldr	r2, [r7, #0]
 8011188:	429a      	cmp	r2, r3
 801118a:	d301      	bcc.n	8011190 <clust2sect+0x20>
 801118c:	2300      	movs	r3, #0
 801118e:	e008      	b.n	80111a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	895b      	ldrh	r3, [r3, #10]
 8011194:	461a      	mov	r2, r3
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	fb03 f202 	mul.w	r2, r3, r2
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111a0:	4413      	add	r3, r2
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	370c      	adds	r7, #12
 80111a6:	46bd      	mov	sp, r7
 80111a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ac:	4770      	bx	lr

080111ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80111ae:	b580      	push	{r7, lr}
 80111b0:	b086      	sub	sp, #24
 80111b2:	af00      	add	r7, sp, #0
 80111b4:	6078      	str	r0, [r7, #4]
 80111b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80111be:	683b      	ldr	r3, [r7, #0]
 80111c0:	2b01      	cmp	r3, #1
 80111c2:	d904      	bls.n	80111ce <get_fat+0x20>
 80111c4:	693b      	ldr	r3, [r7, #16]
 80111c6:	695b      	ldr	r3, [r3, #20]
 80111c8:	683a      	ldr	r2, [r7, #0]
 80111ca:	429a      	cmp	r2, r3
 80111cc:	d302      	bcc.n	80111d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80111ce:	2301      	movs	r3, #1
 80111d0:	617b      	str	r3, [r7, #20]
 80111d2:	e08e      	b.n	80112f2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80111d4:	f04f 33ff 	mov.w	r3, #4294967295
 80111d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80111da:	693b      	ldr	r3, [r7, #16]
 80111dc:	781b      	ldrb	r3, [r3, #0]
 80111de:	2b03      	cmp	r3, #3
 80111e0:	d061      	beq.n	80112a6 <get_fat+0xf8>
 80111e2:	2b03      	cmp	r3, #3
 80111e4:	dc7b      	bgt.n	80112de <get_fat+0x130>
 80111e6:	2b01      	cmp	r3, #1
 80111e8:	d002      	beq.n	80111f0 <get_fat+0x42>
 80111ea:	2b02      	cmp	r3, #2
 80111ec:	d041      	beq.n	8011272 <get_fat+0xc4>
 80111ee:	e076      	b.n	80112de <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	60fb      	str	r3, [r7, #12]
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	085b      	lsrs	r3, r3, #1
 80111f8:	68fa      	ldr	r2, [r7, #12]
 80111fa:	4413      	add	r3, r2
 80111fc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80111fe:	693b      	ldr	r3, [r7, #16]
 8011200:	6a1a      	ldr	r2, [r3, #32]
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	0a5b      	lsrs	r3, r3, #9
 8011206:	4413      	add	r3, r2
 8011208:	4619      	mov	r1, r3
 801120a:	6938      	ldr	r0, [r7, #16]
 801120c:	f7ff ff14 	bl	8011038 <move_window>
 8011210:	4603      	mov	r3, r0
 8011212:	2b00      	cmp	r3, #0
 8011214:	d166      	bne.n	80112e4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	1c5a      	adds	r2, r3, #1
 801121a:	60fa      	str	r2, [r7, #12]
 801121c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011220:	693a      	ldr	r2, [r7, #16]
 8011222:	4413      	add	r3, r2
 8011224:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011228:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801122a:	693b      	ldr	r3, [r7, #16]
 801122c:	6a1a      	ldr	r2, [r3, #32]
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	0a5b      	lsrs	r3, r3, #9
 8011232:	4413      	add	r3, r2
 8011234:	4619      	mov	r1, r3
 8011236:	6938      	ldr	r0, [r7, #16]
 8011238:	f7ff fefe 	bl	8011038 <move_window>
 801123c:	4603      	mov	r3, r0
 801123e:	2b00      	cmp	r3, #0
 8011240:	d152      	bne.n	80112e8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011248:	693a      	ldr	r2, [r7, #16]
 801124a:	4413      	add	r3, r2
 801124c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011250:	021b      	lsls	r3, r3, #8
 8011252:	68ba      	ldr	r2, [r7, #8]
 8011254:	4313      	orrs	r3, r2
 8011256:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	f003 0301 	and.w	r3, r3, #1
 801125e:	2b00      	cmp	r3, #0
 8011260:	d002      	beq.n	8011268 <get_fat+0xba>
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	091b      	lsrs	r3, r3, #4
 8011266:	e002      	b.n	801126e <get_fat+0xc0>
 8011268:	68bb      	ldr	r3, [r7, #8]
 801126a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801126e:	617b      	str	r3, [r7, #20]
			break;
 8011270:	e03f      	b.n	80112f2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011272:	693b      	ldr	r3, [r7, #16]
 8011274:	6a1a      	ldr	r2, [r3, #32]
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	0a1b      	lsrs	r3, r3, #8
 801127a:	4413      	add	r3, r2
 801127c:	4619      	mov	r1, r3
 801127e:	6938      	ldr	r0, [r7, #16]
 8011280:	f7ff feda 	bl	8011038 <move_window>
 8011284:	4603      	mov	r3, r0
 8011286:	2b00      	cmp	r3, #0
 8011288:	d130      	bne.n	80112ec <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801128a:	693b      	ldr	r3, [r7, #16]
 801128c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	005b      	lsls	r3, r3, #1
 8011294:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011298:	4413      	add	r3, r2
 801129a:	4618      	mov	r0, r3
 801129c:	f7ff fc1a 	bl	8010ad4 <ld_word>
 80112a0:	4603      	mov	r3, r0
 80112a2:	617b      	str	r3, [r7, #20]
			break;
 80112a4:	e025      	b.n	80112f2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80112a6:	693b      	ldr	r3, [r7, #16]
 80112a8:	6a1a      	ldr	r2, [r3, #32]
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	09db      	lsrs	r3, r3, #7
 80112ae:	4413      	add	r3, r2
 80112b0:	4619      	mov	r1, r3
 80112b2:	6938      	ldr	r0, [r7, #16]
 80112b4:	f7ff fec0 	bl	8011038 <move_window>
 80112b8:	4603      	mov	r3, r0
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d118      	bne.n	80112f0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80112be:	693b      	ldr	r3, [r7, #16]
 80112c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	009b      	lsls	r3, r3, #2
 80112c8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80112cc:	4413      	add	r3, r2
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7ff fc19 	bl	8010b06 <ld_dword>
 80112d4:	4603      	mov	r3, r0
 80112d6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80112da:	617b      	str	r3, [r7, #20]
			break;
 80112dc:	e009      	b.n	80112f2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80112de:	2301      	movs	r3, #1
 80112e0:	617b      	str	r3, [r7, #20]
 80112e2:	e006      	b.n	80112f2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80112e4:	bf00      	nop
 80112e6:	e004      	b.n	80112f2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80112e8:	bf00      	nop
 80112ea:	e002      	b.n	80112f2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80112ec:	bf00      	nop
 80112ee:	e000      	b.n	80112f2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80112f0:	bf00      	nop
		}
	}

	return val;
 80112f2:	697b      	ldr	r3, [r7, #20]
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3718      	adds	r7, #24
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}

080112fc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80112fc:	b590      	push	{r4, r7, lr}
 80112fe:	b089      	sub	sp, #36	@ 0x24
 8011300:	af00      	add	r7, sp, #0
 8011302:	60f8      	str	r0, [r7, #12]
 8011304:	60b9      	str	r1, [r7, #8]
 8011306:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011308:	2302      	movs	r3, #2
 801130a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801130c:	68bb      	ldr	r3, [r7, #8]
 801130e:	2b01      	cmp	r3, #1
 8011310:	f240 80d9 	bls.w	80114c6 <put_fat+0x1ca>
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	695b      	ldr	r3, [r3, #20]
 8011318:	68ba      	ldr	r2, [r7, #8]
 801131a:	429a      	cmp	r2, r3
 801131c:	f080 80d3 	bcs.w	80114c6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	781b      	ldrb	r3, [r3, #0]
 8011324:	2b03      	cmp	r3, #3
 8011326:	f000 8096 	beq.w	8011456 <put_fat+0x15a>
 801132a:	2b03      	cmp	r3, #3
 801132c:	f300 80cb 	bgt.w	80114c6 <put_fat+0x1ca>
 8011330:	2b01      	cmp	r3, #1
 8011332:	d002      	beq.n	801133a <put_fat+0x3e>
 8011334:	2b02      	cmp	r3, #2
 8011336:	d06e      	beq.n	8011416 <put_fat+0x11a>
 8011338:	e0c5      	b.n	80114c6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	61bb      	str	r3, [r7, #24]
 801133e:	69bb      	ldr	r3, [r7, #24]
 8011340:	085b      	lsrs	r3, r3, #1
 8011342:	69ba      	ldr	r2, [r7, #24]
 8011344:	4413      	add	r3, r2
 8011346:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	6a1a      	ldr	r2, [r3, #32]
 801134c:	69bb      	ldr	r3, [r7, #24]
 801134e:	0a5b      	lsrs	r3, r3, #9
 8011350:	4413      	add	r3, r2
 8011352:	4619      	mov	r1, r3
 8011354:	68f8      	ldr	r0, [r7, #12]
 8011356:	f7ff fe6f 	bl	8011038 <move_window>
 801135a:	4603      	mov	r3, r0
 801135c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801135e:	7ffb      	ldrb	r3, [r7, #31]
 8011360:	2b00      	cmp	r3, #0
 8011362:	f040 80a9 	bne.w	80114b8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801136c:	69bb      	ldr	r3, [r7, #24]
 801136e:	1c59      	adds	r1, r3, #1
 8011370:	61b9      	str	r1, [r7, #24]
 8011372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011376:	4413      	add	r3, r2
 8011378:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	f003 0301 	and.w	r3, r3, #1
 8011380:	2b00      	cmp	r3, #0
 8011382:	d00d      	beq.n	80113a0 <put_fat+0xa4>
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	b25b      	sxtb	r3, r3
 801138a:	f003 030f 	and.w	r3, r3, #15
 801138e:	b25a      	sxtb	r2, r3
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	b25b      	sxtb	r3, r3
 8011394:	011b      	lsls	r3, r3, #4
 8011396:	b25b      	sxtb	r3, r3
 8011398:	4313      	orrs	r3, r2
 801139a:	b25b      	sxtb	r3, r3
 801139c:	b2db      	uxtb	r3, r3
 801139e:	e001      	b.n	80113a4 <put_fat+0xa8>
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	b2db      	uxtb	r3, r3
 80113a4:	697a      	ldr	r2, [r7, #20]
 80113a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	2201      	movs	r2, #1
 80113ac:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	6a1a      	ldr	r2, [r3, #32]
 80113b2:	69bb      	ldr	r3, [r7, #24]
 80113b4:	0a5b      	lsrs	r3, r3, #9
 80113b6:	4413      	add	r3, r2
 80113b8:	4619      	mov	r1, r3
 80113ba:	68f8      	ldr	r0, [r7, #12]
 80113bc:	f7ff fe3c 	bl	8011038 <move_window>
 80113c0:	4603      	mov	r3, r0
 80113c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80113c4:	7ffb      	ldrb	r3, [r7, #31]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d178      	bne.n	80114bc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80113d0:	69bb      	ldr	r3, [r7, #24]
 80113d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80113d6:	4413      	add	r3, r2
 80113d8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	f003 0301 	and.w	r3, r3, #1
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d003      	beq.n	80113ec <put_fat+0xf0>
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	091b      	lsrs	r3, r3, #4
 80113e8:	b2db      	uxtb	r3, r3
 80113ea:	e00e      	b.n	801140a <put_fat+0x10e>
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	781b      	ldrb	r3, [r3, #0]
 80113f0:	b25b      	sxtb	r3, r3
 80113f2:	f023 030f 	bic.w	r3, r3, #15
 80113f6:	b25a      	sxtb	r2, r3
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	0a1b      	lsrs	r3, r3, #8
 80113fc:	b25b      	sxtb	r3, r3
 80113fe:	f003 030f 	and.w	r3, r3, #15
 8011402:	b25b      	sxtb	r3, r3
 8011404:	4313      	orrs	r3, r2
 8011406:	b25b      	sxtb	r3, r3
 8011408:	b2db      	uxtb	r3, r3
 801140a:	697a      	ldr	r2, [r7, #20]
 801140c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	2201      	movs	r2, #1
 8011412:	70da      	strb	r2, [r3, #3]
			break;
 8011414:	e057      	b.n	80114c6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	6a1a      	ldr	r2, [r3, #32]
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	0a1b      	lsrs	r3, r3, #8
 801141e:	4413      	add	r3, r2
 8011420:	4619      	mov	r1, r3
 8011422:	68f8      	ldr	r0, [r7, #12]
 8011424:	f7ff fe08 	bl	8011038 <move_window>
 8011428:	4603      	mov	r3, r0
 801142a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801142c:	7ffb      	ldrb	r3, [r7, #31]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d146      	bne.n	80114c0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	005b      	lsls	r3, r3, #1
 801143c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011440:	4413      	add	r3, r2
 8011442:	687a      	ldr	r2, [r7, #4]
 8011444:	b292      	uxth	r2, r2
 8011446:	4611      	mov	r1, r2
 8011448:	4618      	mov	r0, r3
 801144a:	f7ff fb7f 	bl	8010b4c <st_word>
			fs->wflag = 1;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	2201      	movs	r2, #1
 8011452:	70da      	strb	r2, [r3, #3]
			break;
 8011454:	e037      	b.n	80114c6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	6a1a      	ldr	r2, [r3, #32]
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	09db      	lsrs	r3, r3, #7
 801145e:	4413      	add	r3, r2
 8011460:	4619      	mov	r1, r3
 8011462:	68f8      	ldr	r0, [r7, #12]
 8011464:	f7ff fde8 	bl	8011038 <move_window>
 8011468:	4603      	mov	r3, r0
 801146a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801146c:	7ffb      	ldrb	r3, [r7, #31]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d128      	bne.n	80114c4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	009b      	lsls	r3, r3, #2
 8011482:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011486:	4413      	add	r3, r2
 8011488:	4618      	mov	r0, r3
 801148a:	f7ff fb3c 	bl	8010b06 <ld_dword>
 801148e:	4603      	mov	r3, r0
 8011490:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8011494:	4323      	orrs	r3, r4
 8011496:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	009b      	lsls	r3, r3, #2
 80114a2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80114a6:	4413      	add	r3, r2
 80114a8:	6879      	ldr	r1, [r7, #4]
 80114aa:	4618      	mov	r0, r3
 80114ac:	f7ff fb69 	bl	8010b82 <st_dword>
			fs->wflag = 1;
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	2201      	movs	r2, #1
 80114b4:	70da      	strb	r2, [r3, #3]
			break;
 80114b6:	e006      	b.n	80114c6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80114b8:	bf00      	nop
 80114ba:	e004      	b.n	80114c6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80114bc:	bf00      	nop
 80114be:	e002      	b.n	80114c6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80114c0:	bf00      	nop
 80114c2:	e000      	b.n	80114c6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80114c4:	bf00      	nop
		}
	}
	return res;
 80114c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80114c8:	4618      	mov	r0, r3
 80114ca:	3724      	adds	r7, #36	@ 0x24
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd90      	pop	{r4, r7, pc}

080114d0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b088      	sub	sp, #32
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	60f8      	str	r0, [r7, #12]
 80114d8:	60b9      	str	r1, [r7, #8]
 80114da:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80114dc:	2300      	movs	r3, #0
 80114de:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	2b01      	cmp	r3, #1
 80114ea:	d904      	bls.n	80114f6 <remove_chain+0x26>
 80114ec:	69bb      	ldr	r3, [r7, #24]
 80114ee:	695b      	ldr	r3, [r3, #20]
 80114f0:	68ba      	ldr	r2, [r7, #8]
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d301      	bcc.n	80114fa <remove_chain+0x2a>
 80114f6:	2302      	movs	r3, #2
 80114f8:	e04b      	b.n	8011592 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d00c      	beq.n	801151a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011500:	f04f 32ff 	mov.w	r2, #4294967295
 8011504:	6879      	ldr	r1, [r7, #4]
 8011506:	69b8      	ldr	r0, [r7, #24]
 8011508:	f7ff fef8 	bl	80112fc <put_fat>
 801150c:	4603      	mov	r3, r0
 801150e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011510:	7ffb      	ldrb	r3, [r7, #31]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d001      	beq.n	801151a <remove_chain+0x4a>
 8011516:	7ffb      	ldrb	r3, [r7, #31]
 8011518:	e03b      	b.n	8011592 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801151a:	68b9      	ldr	r1, [r7, #8]
 801151c:	68f8      	ldr	r0, [r7, #12]
 801151e:	f7ff fe46 	bl	80111ae <get_fat>
 8011522:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d031      	beq.n	801158e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801152a:	697b      	ldr	r3, [r7, #20]
 801152c:	2b01      	cmp	r3, #1
 801152e:	d101      	bne.n	8011534 <remove_chain+0x64>
 8011530:	2302      	movs	r3, #2
 8011532:	e02e      	b.n	8011592 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	f1b3 3fff 	cmp.w	r3, #4294967295
 801153a:	d101      	bne.n	8011540 <remove_chain+0x70>
 801153c:	2301      	movs	r3, #1
 801153e:	e028      	b.n	8011592 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011540:	2200      	movs	r2, #0
 8011542:	68b9      	ldr	r1, [r7, #8]
 8011544:	69b8      	ldr	r0, [r7, #24]
 8011546:	f7ff fed9 	bl	80112fc <put_fat>
 801154a:	4603      	mov	r3, r0
 801154c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801154e:	7ffb      	ldrb	r3, [r7, #31]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d001      	beq.n	8011558 <remove_chain+0x88>
 8011554:	7ffb      	ldrb	r3, [r7, #31]
 8011556:	e01c      	b.n	8011592 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011558:	69bb      	ldr	r3, [r7, #24]
 801155a:	691a      	ldr	r2, [r3, #16]
 801155c:	69bb      	ldr	r3, [r7, #24]
 801155e:	695b      	ldr	r3, [r3, #20]
 8011560:	3b02      	subs	r3, #2
 8011562:	429a      	cmp	r2, r3
 8011564:	d20b      	bcs.n	801157e <remove_chain+0xae>
			fs->free_clst++;
 8011566:	69bb      	ldr	r3, [r7, #24]
 8011568:	691b      	ldr	r3, [r3, #16]
 801156a:	1c5a      	adds	r2, r3, #1
 801156c:	69bb      	ldr	r3, [r7, #24]
 801156e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8011570:	69bb      	ldr	r3, [r7, #24]
 8011572:	791b      	ldrb	r3, [r3, #4]
 8011574:	f043 0301 	orr.w	r3, r3, #1
 8011578:	b2da      	uxtb	r2, r3
 801157a:	69bb      	ldr	r3, [r7, #24]
 801157c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801157e:	697b      	ldr	r3, [r7, #20]
 8011580:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011582:	69bb      	ldr	r3, [r7, #24]
 8011584:	695b      	ldr	r3, [r3, #20]
 8011586:	68ba      	ldr	r2, [r7, #8]
 8011588:	429a      	cmp	r2, r3
 801158a:	d3c6      	bcc.n	801151a <remove_chain+0x4a>
 801158c:	e000      	b.n	8011590 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801158e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011590:	2300      	movs	r3, #0
}
 8011592:	4618      	mov	r0, r3
 8011594:	3720      	adds	r7, #32
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}

0801159a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801159a:	b580      	push	{r7, lr}
 801159c:	b088      	sub	sp, #32
 801159e:	af00      	add	r7, sp, #0
 80115a0:	6078      	str	r0, [r7, #4]
 80115a2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d10d      	bne.n	80115cc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80115b0:	693b      	ldr	r3, [r7, #16]
 80115b2:	68db      	ldr	r3, [r3, #12]
 80115b4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80115b6:	69bb      	ldr	r3, [r7, #24]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d004      	beq.n	80115c6 <create_chain+0x2c>
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	695b      	ldr	r3, [r3, #20]
 80115c0:	69ba      	ldr	r2, [r7, #24]
 80115c2:	429a      	cmp	r2, r3
 80115c4:	d31b      	bcc.n	80115fe <create_chain+0x64>
 80115c6:	2301      	movs	r3, #1
 80115c8:	61bb      	str	r3, [r7, #24]
 80115ca:	e018      	b.n	80115fe <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80115cc:	6839      	ldr	r1, [r7, #0]
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f7ff fded 	bl	80111ae <get_fat>
 80115d4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	2b01      	cmp	r3, #1
 80115da:	d801      	bhi.n	80115e0 <create_chain+0x46>
 80115dc:	2301      	movs	r3, #1
 80115de:	e070      	b.n	80116c2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115e6:	d101      	bne.n	80115ec <create_chain+0x52>
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	e06a      	b.n	80116c2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80115ec:	693b      	ldr	r3, [r7, #16]
 80115ee:	695b      	ldr	r3, [r3, #20]
 80115f0:	68fa      	ldr	r2, [r7, #12]
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d201      	bcs.n	80115fa <create_chain+0x60>
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	e063      	b.n	80116c2 <create_chain+0x128>
		scl = clst;
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80115fe:	69bb      	ldr	r3, [r7, #24]
 8011600:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011602:	69fb      	ldr	r3, [r7, #28]
 8011604:	3301      	adds	r3, #1
 8011606:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011608:	693b      	ldr	r3, [r7, #16]
 801160a:	695b      	ldr	r3, [r3, #20]
 801160c:	69fa      	ldr	r2, [r7, #28]
 801160e:	429a      	cmp	r2, r3
 8011610:	d307      	bcc.n	8011622 <create_chain+0x88>
				ncl = 2;
 8011612:	2302      	movs	r3, #2
 8011614:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011616:	69fa      	ldr	r2, [r7, #28]
 8011618:	69bb      	ldr	r3, [r7, #24]
 801161a:	429a      	cmp	r2, r3
 801161c:	d901      	bls.n	8011622 <create_chain+0x88>
 801161e:	2300      	movs	r3, #0
 8011620:	e04f      	b.n	80116c2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011622:	69f9      	ldr	r1, [r7, #28]
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f7ff fdc2 	bl	80111ae <get_fat>
 801162a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d00e      	beq.n	8011650 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	2b01      	cmp	r3, #1
 8011636:	d003      	beq.n	8011640 <create_chain+0xa6>
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801163e:	d101      	bne.n	8011644 <create_chain+0xaa>
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	e03e      	b.n	80116c2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011644:	69fa      	ldr	r2, [r7, #28]
 8011646:	69bb      	ldr	r3, [r7, #24]
 8011648:	429a      	cmp	r2, r3
 801164a:	d1da      	bne.n	8011602 <create_chain+0x68>
 801164c:	2300      	movs	r3, #0
 801164e:	e038      	b.n	80116c2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011650:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011652:	f04f 32ff 	mov.w	r2, #4294967295
 8011656:	69f9      	ldr	r1, [r7, #28]
 8011658:	6938      	ldr	r0, [r7, #16]
 801165a:	f7ff fe4f 	bl	80112fc <put_fat>
 801165e:	4603      	mov	r3, r0
 8011660:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011662:	7dfb      	ldrb	r3, [r7, #23]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d109      	bne.n	801167c <create_chain+0xe2>
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d006      	beq.n	801167c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801166e:	69fa      	ldr	r2, [r7, #28]
 8011670:	6839      	ldr	r1, [r7, #0]
 8011672:	6938      	ldr	r0, [r7, #16]
 8011674:	f7ff fe42 	bl	80112fc <put_fat>
 8011678:	4603      	mov	r3, r0
 801167a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801167c:	7dfb      	ldrb	r3, [r7, #23]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d116      	bne.n	80116b0 <create_chain+0x116>
		fs->last_clst = ncl;
 8011682:	693b      	ldr	r3, [r7, #16]
 8011684:	69fa      	ldr	r2, [r7, #28]
 8011686:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011688:	693b      	ldr	r3, [r7, #16]
 801168a:	691a      	ldr	r2, [r3, #16]
 801168c:	693b      	ldr	r3, [r7, #16]
 801168e:	695b      	ldr	r3, [r3, #20]
 8011690:	3b02      	subs	r3, #2
 8011692:	429a      	cmp	r2, r3
 8011694:	d804      	bhi.n	80116a0 <create_chain+0x106>
 8011696:	693b      	ldr	r3, [r7, #16]
 8011698:	691b      	ldr	r3, [r3, #16]
 801169a:	1e5a      	subs	r2, r3, #1
 801169c:	693b      	ldr	r3, [r7, #16]
 801169e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80116a0:	693b      	ldr	r3, [r7, #16]
 80116a2:	791b      	ldrb	r3, [r3, #4]
 80116a4:	f043 0301 	orr.w	r3, r3, #1
 80116a8:	b2da      	uxtb	r2, r3
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	711a      	strb	r2, [r3, #4]
 80116ae:	e007      	b.n	80116c0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80116b0:	7dfb      	ldrb	r3, [r7, #23]
 80116b2:	2b01      	cmp	r3, #1
 80116b4:	d102      	bne.n	80116bc <create_chain+0x122>
 80116b6:	f04f 33ff 	mov.w	r3, #4294967295
 80116ba:	e000      	b.n	80116be <create_chain+0x124>
 80116bc:	2301      	movs	r3, #1
 80116be:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80116c0:	69fb      	ldr	r3, [r7, #28]
}
 80116c2:	4618      	mov	r0, r3
 80116c4:	3720      	adds	r7, #32
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd80      	pop	{r7, pc}

080116ca <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80116ca:	b480      	push	{r7}
 80116cc:	b087      	sub	sp, #28
 80116ce:	af00      	add	r7, sp, #0
 80116d0:	6078      	str	r0, [r7, #4]
 80116d2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116de:	3304      	adds	r3, #4
 80116e0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	0a5b      	lsrs	r3, r3, #9
 80116e6:	68fa      	ldr	r2, [r7, #12]
 80116e8:	8952      	ldrh	r2, [r2, #10]
 80116ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80116ee:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80116f0:	693b      	ldr	r3, [r7, #16]
 80116f2:	1d1a      	adds	r2, r3, #4
 80116f4:	613a      	str	r2, [r7, #16]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d101      	bne.n	8011704 <clmt_clust+0x3a>
 8011700:	2300      	movs	r3, #0
 8011702:	e010      	b.n	8011726 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8011704:	697a      	ldr	r2, [r7, #20]
 8011706:	68bb      	ldr	r3, [r7, #8]
 8011708:	429a      	cmp	r2, r3
 801170a:	d307      	bcc.n	801171c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801170c:	697a      	ldr	r2, [r7, #20]
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	1ad3      	subs	r3, r2, r3
 8011712:	617b      	str	r3, [r7, #20]
 8011714:	693b      	ldr	r3, [r7, #16]
 8011716:	3304      	adds	r3, #4
 8011718:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801171a:	e7e9      	b.n	80116f0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801171c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801171e:	693b      	ldr	r3, [r7, #16]
 8011720:	681a      	ldr	r2, [r3, #0]
 8011722:	697b      	ldr	r3, [r7, #20]
 8011724:	4413      	add	r3, r2
}
 8011726:	4618      	mov	r0, r3
 8011728:	371c      	adds	r7, #28
 801172a:	46bd      	mov	sp, r7
 801172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011730:	4770      	bx	lr

08011732 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011732:	b580      	push	{r7, lr}
 8011734:	b086      	sub	sp, #24
 8011736:	af00      	add	r7, sp, #0
 8011738:	6078      	str	r0, [r7, #4]
 801173a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011748:	d204      	bcs.n	8011754 <dir_sdi+0x22>
 801174a:	683b      	ldr	r3, [r7, #0]
 801174c:	f003 031f 	and.w	r3, r3, #31
 8011750:	2b00      	cmp	r3, #0
 8011752:	d001      	beq.n	8011758 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011754:	2302      	movs	r3, #2
 8011756:	e063      	b.n	8011820 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	683a      	ldr	r2, [r7, #0]
 801175c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	689b      	ldr	r3, [r3, #8]
 8011762:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d106      	bne.n	8011778 <dir_sdi+0x46>
 801176a:	693b      	ldr	r3, [r7, #16]
 801176c:	781b      	ldrb	r3, [r3, #0]
 801176e:	2b02      	cmp	r3, #2
 8011770:	d902      	bls.n	8011778 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011772:	693b      	ldr	r3, [r7, #16]
 8011774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011776:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011778:	697b      	ldr	r3, [r7, #20]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d10c      	bne.n	8011798 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	095b      	lsrs	r3, r3, #5
 8011782:	693a      	ldr	r2, [r7, #16]
 8011784:	8912      	ldrh	r2, [r2, #8]
 8011786:	4293      	cmp	r3, r2
 8011788:	d301      	bcc.n	801178e <dir_sdi+0x5c>
 801178a:	2302      	movs	r3, #2
 801178c:	e048      	b.n	8011820 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801178e:	693b      	ldr	r3, [r7, #16]
 8011790:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	61da      	str	r2, [r3, #28]
 8011796:	e029      	b.n	80117ec <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011798:	693b      	ldr	r3, [r7, #16]
 801179a:	895b      	ldrh	r3, [r3, #10]
 801179c:	025b      	lsls	r3, r3, #9
 801179e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80117a0:	e019      	b.n	80117d6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6979      	ldr	r1, [r7, #20]
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7ff fd01 	bl	80111ae <get_fat>
 80117ac:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80117ae:	697b      	ldr	r3, [r7, #20]
 80117b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117b4:	d101      	bne.n	80117ba <dir_sdi+0x88>
 80117b6:	2301      	movs	r3, #1
 80117b8:	e032      	b.n	8011820 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80117ba:	697b      	ldr	r3, [r7, #20]
 80117bc:	2b01      	cmp	r3, #1
 80117be:	d904      	bls.n	80117ca <dir_sdi+0x98>
 80117c0:	693b      	ldr	r3, [r7, #16]
 80117c2:	695b      	ldr	r3, [r3, #20]
 80117c4:	697a      	ldr	r2, [r7, #20]
 80117c6:	429a      	cmp	r2, r3
 80117c8:	d301      	bcc.n	80117ce <dir_sdi+0x9c>
 80117ca:	2302      	movs	r3, #2
 80117cc:	e028      	b.n	8011820 <dir_sdi+0xee>
			ofs -= csz;
 80117ce:	683a      	ldr	r2, [r7, #0]
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	1ad3      	subs	r3, r2, r3
 80117d4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80117d6:	683a      	ldr	r2, [r7, #0]
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	429a      	cmp	r2, r3
 80117dc:	d2e1      	bcs.n	80117a2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80117de:	6979      	ldr	r1, [r7, #20]
 80117e0:	6938      	ldr	r0, [r7, #16]
 80117e2:	f7ff fcc5 	bl	8011170 <clust2sect>
 80117e6:	4602      	mov	r2, r0
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	697a      	ldr	r2, [r7, #20]
 80117f0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	69db      	ldr	r3, [r3, #28]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d101      	bne.n	80117fe <dir_sdi+0xcc>
 80117fa:	2302      	movs	r3, #2
 80117fc:	e010      	b.n	8011820 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	69da      	ldr	r2, [r3, #28]
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	0a5b      	lsrs	r3, r3, #9
 8011806:	441a      	add	r2, r3
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801180c:	693b      	ldr	r3, [r7, #16]
 801180e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011818:	441a      	add	r2, r3
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801181e:	2300      	movs	r3, #0
}
 8011820:	4618      	mov	r0, r3
 8011822:	3718      	adds	r7, #24
 8011824:	46bd      	mov	sp, r7
 8011826:	bd80      	pop	{r7, pc}

08011828 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b086      	sub	sp, #24
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
 8011830:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	695b      	ldr	r3, [r3, #20]
 801183c:	3320      	adds	r3, #32
 801183e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	69db      	ldr	r3, [r3, #28]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d003      	beq.n	8011850 <dir_next+0x28>
 8011848:	68bb      	ldr	r3, [r7, #8]
 801184a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801184e:	d301      	bcc.n	8011854 <dir_next+0x2c>
 8011850:	2304      	movs	r3, #4
 8011852:	e0aa      	b.n	80119aa <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801185a:	2b00      	cmp	r3, #0
 801185c:	f040 8098 	bne.w	8011990 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	69db      	ldr	r3, [r3, #28]
 8011864:	1c5a      	adds	r2, r3, #1
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	699b      	ldr	r3, [r3, #24]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d10b      	bne.n	801188a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011872:	68bb      	ldr	r3, [r7, #8]
 8011874:	095b      	lsrs	r3, r3, #5
 8011876:	68fa      	ldr	r2, [r7, #12]
 8011878:	8912      	ldrh	r2, [r2, #8]
 801187a:	4293      	cmp	r3, r2
 801187c:	f0c0 8088 	bcc.w	8011990 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	2200      	movs	r2, #0
 8011884:	61da      	str	r2, [r3, #28]
 8011886:	2304      	movs	r3, #4
 8011888:	e08f      	b.n	80119aa <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801188a:	68bb      	ldr	r3, [r7, #8]
 801188c:	0a5b      	lsrs	r3, r3, #9
 801188e:	68fa      	ldr	r2, [r7, #12]
 8011890:	8952      	ldrh	r2, [r2, #10]
 8011892:	3a01      	subs	r2, #1
 8011894:	4013      	ands	r3, r2
 8011896:	2b00      	cmp	r3, #0
 8011898:	d17a      	bne.n	8011990 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801189a:	687a      	ldr	r2, [r7, #4]
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	699b      	ldr	r3, [r3, #24]
 80118a0:	4619      	mov	r1, r3
 80118a2:	4610      	mov	r0, r2
 80118a4:	f7ff fc83 	bl	80111ae <get_fat>
 80118a8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	2b01      	cmp	r3, #1
 80118ae:	d801      	bhi.n	80118b4 <dir_next+0x8c>
 80118b0:	2302      	movs	r3, #2
 80118b2:	e07a      	b.n	80119aa <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80118b4:	697b      	ldr	r3, [r7, #20]
 80118b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118ba:	d101      	bne.n	80118c0 <dir_next+0x98>
 80118bc:	2301      	movs	r3, #1
 80118be:	e074      	b.n	80119aa <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	695b      	ldr	r3, [r3, #20]
 80118c4:	697a      	ldr	r2, [r7, #20]
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d358      	bcc.n	801197c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80118ca:	683b      	ldr	r3, [r7, #0]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d104      	bne.n	80118da <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2200      	movs	r2, #0
 80118d4:	61da      	str	r2, [r3, #28]
 80118d6:	2304      	movs	r3, #4
 80118d8:	e067      	b.n	80119aa <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80118da:	687a      	ldr	r2, [r7, #4]
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	699b      	ldr	r3, [r3, #24]
 80118e0:	4619      	mov	r1, r3
 80118e2:	4610      	mov	r0, r2
 80118e4:	f7ff fe59 	bl	801159a <create_chain>
 80118e8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80118ea:	697b      	ldr	r3, [r7, #20]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d101      	bne.n	80118f4 <dir_next+0xcc>
 80118f0:	2307      	movs	r3, #7
 80118f2:	e05a      	b.n	80119aa <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80118f4:	697b      	ldr	r3, [r7, #20]
 80118f6:	2b01      	cmp	r3, #1
 80118f8:	d101      	bne.n	80118fe <dir_next+0xd6>
 80118fa:	2302      	movs	r3, #2
 80118fc:	e055      	b.n	80119aa <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80118fe:	697b      	ldr	r3, [r7, #20]
 8011900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011904:	d101      	bne.n	801190a <dir_next+0xe2>
 8011906:	2301      	movs	r3, #1
 8011908:	e04f      	b.n	80119aa <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801190a:	68f8      	ldr	r0, [r7, #12]
 801190c:	f7ff fb50 	bl	8010fb0 <sync_window>
 8011910:	4603      	mov	r3, r0
 8011912:	2b00      	cmp	r3, #0
 8011914:	d001      	beq.n	801191a <dir_next+0xf2>
 8011916:	2301      	movs	r3, #1
 8011918:	e047      	b.n	80119aa <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	3330      	adds	r3, #48	@ 0x30
 801191e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011922:	2100      	movs	r1, #0
 8011924:	4618      	mov	r0, r3
 8011926:	f7ff f979 	bl	8010c1c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801192a:	2300      	movs	r3, #0
 801192c:	613b      	str	r3, [r7, #16]
 801192e:	6979      	ldr	r1, [r7, #20]
 8011930:	68f8      	ldr	r0, [r7, #12]
 8011932:	f7ff fc1d 	bl	8011170 <clust2sect>
 8011936:	4602      	mov	r2, r0
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801193c:	e012      	b.n	8011964 <dir_next+0x13c>
						fs->wflag = 1;
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	2201      	movs	r2, #1
 8011942:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011944:	68f8      	ldr	r0, [r7, #12]
 8011946:	f7ff fb33 	bl	8010fb0 <sync_window>
 801194a:	4603      	mov	r3, r0
 801194c:	2b00      	cmp	r3, #0
 801194e:	d001      	beq.n	8011954 <dir_next+0x12c>
 8011950:	2301      	movs	r3, #1
 8011952:	e02a      	b.n	80119aa <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011954:	693b      	ldr	r3, [r7, #16]
 8011956:	3301      	adds	r3, #1
 8011958:	613b      	str	r3, [r7, #16]
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801195e:	1c5a      	adds	r2, r3, #1
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	895b      	ldrh	r3, [r3, #10]
 8011968:	461a      	mov	r2, r3
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	4293      	cmp	r3, r2
 801196e:	d3e6      	bcc.n	801193e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011974:	693b      	ldr	r3, [r7, #16]
 8011976:	1ad2      	subs	r2, r2, r3
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	697a      	ldr	r2, [r7, #20]
 8011980:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011982:	6979      	ldr	r1, [r7, #20]
 8011984:	68f8      	ldr	r0, [r7, #12]
 8011986:	f7ff fbf3 	bl	8011170 <clust2sect>
 801198a:	4602      	mov	r2, r0
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	68ba      	ldr	r2, [r7, #8]
 8011994:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801199c:	68bb      	ldr	r3, [r7, #8]
 801199e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119a2:	441a      	add	r2, r3
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80119a8:	2300      	movs	r3, #0
}
 80119aa:	4618      	mov	r0, r3
 80119ac:	3718      	adds	r7, #24
 80119ae:	46bd      	mov	sp, r7
 80119b0:	bd80      	pop	{r7, pc}

080119b2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80119b2:	b580      	push	{r7, lr}
 80119b4:	b086      	sub	sp, #24
 80119b6:	af00      	add	r7, sp, #0
 80119b8:	6078      	str	r0, [r7, #4]
 80119ba:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80119c2:	2100      	movs	r1, #0
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f7ff feb4 	bl	8011732 <dir_sdi>
 80119ca:	4603      	mov	r3, r0
 80119cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80119ce:	7dfb      	ldrb	r3, [r7, #23]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d12b      	bne.n	8011a2c <dir_alloc+0x7a>
		n = 0;
 80119d4:	2300      	movs	r3, #0
 80119d6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	69db      	ldr	r3, [r3, #28]
 80119dc:	4619      	mov	r1, r3
 80119de:	68f8      	ldr	r0, [r7, #12]
 80119e0:	f7ff fb2a 	bl	8011038 <move_window>
 80119e4:	4603      	mov	r3, r0
 80119e6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80119e8:	7dfb      	ldrb	r3, [r7, #23]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d11d      	bne.n	8011a2a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	6a1b      	ldr	r3, [r3, #32]
 80119f2:	781b      	ldrb	r3, [r3, #0]
 80119f4:	2be5      	cmp	r3, #229	@ 0xe5
 80119f6:	d004      	beq.n	8011a02 <dir_alloc+0x50>
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	6a1b      	ldr	r3, [r3, #32]
 80119fc:	781b      	ldrb	r3, [r3, #0]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d107      	bne.n	8011a12 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011a02:	693b      	ldr	r3, [r7, #16]
 8011a04:	3301      	adds	r3, #1
 8011a06:	613b      	str	r3, [r7, #16]
 8011a08:	693a      	ldr	r2, [r7, #16]
 8011a0a:	683b      	ldr	r3, [r7, #0]
 8011a0c:	429a      	cmp	r2, r3
 8011a0e:	d102      	bne.n	8011a16 <dir_alloc+0x64>
 8011a10:	e00c      	b.n	8011a2c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011a12:	2300      	movs	r3, #0
 8011a14:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011a16:	2101      	movs	r1, #1
 8011a18:	6878      	ldr	r0, [r7, #4]
 8011a1a:	f7ff ff05 	bl	8011828 <dir_next>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011a22:	7dfb      	ldrb	r3, [r7, #23]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d0d7      	beq.n	80119d8 <dir_alloc+0x26>
 8011a28:	e000      	b.n	8011a2c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011a2a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011a2c:	7dfb      	ldrb	r3, [r7, #23]
 8011a2e:	2b04      	cmp	r3, #4
 8011a30:	d101      	bne.n	8011a36 <dir_alloc+0x84>
 8011a32:	2307      	movs	r3, #7
 8011a34:	75fb      	strb	r3, [r7, #23]
	return res;
 8011a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a38:	4618      	mov	r0, r3
 8011a3a:	3718      	adds	r7, #24
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}

08011a40 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b084      	sub	sp, #16
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]
 8011a48:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011a4a:	683b      	ldr	r3, [r7, #0]
 8011a4c:	331a      	adds	r3, #26
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f7ff f840 	bl	8010ad4 <ld_word>
 8011a54:	4603      	mov	r3, r0
 8011a56:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	781b      	ldrb	r3, [r3, #0]
 8011a5c:	2b03      	cmp	r3, #3
 8011a5e:	d109      	bne.n	8011a74 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	3314      	adds	r3, #20
 8011a64:	4618      	mov	r0, r3
 8011a66:	f7ff f835 	bl	8010ad4 <ld_word>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	041b      	lsls	r3, r3, #16
 8011a6e:	68fa      	ldr	r2, [r7, #12]
 8011a70:	4313      	orrs	r3, r2
 8011a72:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011a74:	68fb      	ldr	r3, [r7, #12]
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	3710      	adds	r7, #16
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd80      	pop	{r7, pc}

08011a7e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011a7e:	b580      	push	{r7, lr}
 8011a80:	b084      	sub	sp, #16
 8011a82:	af00      	add	r7, sp, #0
 8011a84:	60f8      	str	r0, [r7, #12]
 8011a86:	60b9      	str	r1, [r7, #8]
 8011a88:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011a8a:	68bb      	ldr	r3, [r7, #8]
 8011a8c:	331a      	adds	r3, #26
 8011a8e:	687a      	ldr	r2, [r7, #4]
 8011a90:	b292      	uxth	r2, r2
 8011a92:	4611      	mov	r1, r2
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7ff f859 	bl	8010b4c <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	781b      	ldrb	r3, [r3, #0]
 8011a9e:	2b03      	cmp	r3, #3
 8011aa0:	d109      	bne.n	8011ab6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011aa2:	68bb      	ldr	r3, [r7, #8]
 8011aa4:	f103 0214 	add.w	r2, r3, #20
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	0c1b      	lsrs	r3, r3, #16
 8011aac:	b29b      	uxth	r3, r3
 8011aae:	4619      	mov	r1, r3
 8011ab0:	4610      	mov	r0, r2
 8011ab2:	f7ff f84b 	bl	8010b4c <st_word>
	}
}
 8011ab6:	bf00      	nop
 8011ab8:	3710      	adds	r7, #16
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}

08011abe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011abe:	b580      	push	{r7, lr}
 8011ac0:	b086      	sub	sp, #24
 8011ac2:	af00      	add	r7, sp, #0
 8011ac4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011acc:	2100      	movs	r1, #0
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	f7ff fe2f 	bl	8011732 <dir_sdi>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011ad8:	7dfb      	ldrb	r3, [r7, #23]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d001      	beq.n	8011ae2 <dir_find+0x24>
 8011ade:	7dfb      	ldrb	r3, [r7, #23]
 8011ae0:	e03e      	b.n	8011b60 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	69db      	ldr	r3, [r3, #28]
 8011ae6:	4619      	mov	r1, r3
 8011ae8:	6938      	ldr	r0, [r7, #16]
 8011aea:	f7ff faa5 	bl	8011038 <move_window>
 8011aee:	4603      	mov	r3, r0
 8011af0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011af2:	7dfb      	ldrb	r3, [r7, #23]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d12f      	bne.n	8011b58 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	6a1b      	ldr	r3, [r3, #32]
 8011afc:	781b      	ldrb	r3, [r3, #0]
 8011afe:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011b00:	7bfb      	ldrb	r3, [r7, #15]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d102      	bne.n	8011b0c <dir_find+0x4e>
 8011b06:	2304      	movs	r3, #4
 8011b08:	75fb      	strb	r3, [r7, #23]
 8011b0a:	e028      	b.n	8011b5e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	6a1b      	ldr	r3, [r3, #32]
 8011b10:	330b      	adds	r3, #11
 8011b12:	781b      	ldrb	r3, [r3, #0]
 8011b14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011b18:	b2da      	uxtb	r2, r3
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	6a1b      	ldr	r3, [r3, #32]
 8011b22:	330b      	adds	r3, #11
 8011b24:	781b      	ldrb	r3, [r3, #0]
 8011b26:	f003 0308 	and.w	r3, r3, #8
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d10a      	bne.n	8011b44 <dir_find+0x86>
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6a18      	ldr	r0, [r3, #32]
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	3324      	adds	r3, #36	@ 0x24
 8011b36:	220b      	movs	r2, #11
 8011b38:	4619      	mov	r1, r3
 8011b3a:	f7ff f88a 	bl	8010c52 <mem_cmp>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d00b      	beq.n	8011b5c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011b44:	2100      	movs	r1, #0
 8011b46:	6878      	ldr	r0, [r7, #4]
 8011b48:	f7ff fe6e 	bl	8011828 <dir_next>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011b50:	7dfb      	ldrb	r3, [r7, #23]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d0c5      	beq.n	8011ae2 <dir_find+0x24>
 8011b56:	e002      	b.n	8011b5e <dir_find+0xa0>
		if (res != FR_OK) break;
 8011b58:	bf00      	nop
 8011b5a:	e000      	b.n	8011b5e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011b5c:	bf00      	nop

	return res;
 8011b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3718      	adds	r7, #24
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}

08011b68 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b084      	sub	sp, #16
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011b76:	2101      	movs	r1, #1
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f7ff ff1a 	bl	80119b2 <dir_alloc>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011b82:	7bfb      	ldrb	r3, [r7, #15]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d11c      	bne.n	8011bc2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	69db      	ldr	r3, [r3, #28]
 8011b8c:	4619      	mov	r1, r3
 8011b8e:	68b8      	ldr	r0, [r7, #8]
 8011b90:	f7ff fa52 	bl	8011038 <move_window>
 8011b94:	4603      	mov	r3, r0
 8011b96:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011b98:	7bfb      	ldrb	r3, [r7, #15]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d111      	bne.n	8011bc2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	6a1b      	ldr	r3, [r3, #32]
 8011ba2:	2220      	movs	r2, #32
 8011ba4:	2100      	movs	r1, #0
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f7ff f838 	bl	8010c1c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	6a18      	ldr	r0, [r3, #32]
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	3324      	adds	r3, #36	@ 0x24
 8011bb4:	220b      	movs	r2, #11
 8011bb6:	4619      	mov	r1, r3
 8011bb8:	f7ff f80f 	bl	8010bda <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011bbc:	68bb      	ldr	r3, [r7, #8]
 8011bbe:	2201      	movs	r2, #1
 8011bc0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	3710      	adds	r7, #16
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}

08011bcc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b088      	sub	sp, #32
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	60fb      	str	r3, [r7, #12]
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	3324      	adds	r3, #36	@ 0x24
 8011be0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011be2:	220b      	movs	r2, #11
 8011be4:	2120      	movs	r1, #32
 8011be6:	68b8      	ldr	r0, [r7, #8]
 8011be8:	f7ff f818 	bl	8010c1c <mem_set>
	si = i = 0; ni = 8;
 8011bec:	2300      	movs	r3, #0
 8011bee:	613b      	str	r3, [r7, #16]
 8011bf0:	693b      	ldr	r3, [r7, #16]
 8011bf2:	61fb      	str	r3, [r7, #28]
 8011bf4:	2308      	movs	r3, #8
 8011bf6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011bf8:	69fb      	ldr	r3, [r7, #28]
 8011bfa:	1c5a      	adds	r2, r3, #1
 8011bfc:	61fa      	str	r2, [r7, #28]
 8011bfe:	68fa      	ldr	r2, [r7, #12]
 8011c00:	4413      	add	r3, r2
 8011c02:	781b      	ldrb	r3, [r3, #0]
 8011c04:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011c06:	7efb      	ldrb	r3, [r7, #27]
 8011c08:	2b20      	cmp	r3, #32
 8011c0a:	d94e      	bls.n	8011caa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011c0c:	7efb      	ldrb	r3, [r7, #27]
 8011c0e:	2b2f      	cmp	r3, #47	@ 0x2f
 8011c10:	d006      	beq.n	8011c20 <create_name+0x54>
 8011c12:	7efb      	ldrb	r3, [r7, #27]
 8011c14:	2b5c      	cmp	r3, #92	@ 0x5c
 8011c16:	d110      	bne.n	8011c3a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011c18:	e002      	b.n	8011c20 <create_name+0x54>
 8011c1a:	69fb      	ldr	r3, [r7, #28]
 8011c1c:	3301      	adds	r3, #1
 8011c1e:	61fb      	str	r3, [r7, #28]
 8011c20:	68fa      	ldr	r2, [r7, #12]
 8011c22:	69fb      	ldr	r3, [r7, #28]
 8011c24:	4413      	add	r3, r2
 8011c26:	781b      	ldrb	r3, [r3, #0]
 8011c28:	2b2f      	cmp	r3, #47	@ 0x2f
 8011c2a:	d0f6      	beq.n	8011c1a <create_name+0x4e>
 8011c2c:	68fa      	ldr	r2, [r7, #12]
 8011c2e:	69fb      	ldr	r3, [r7, #28]
 8011c30:	4413      	add	r3, r2
 8011c32:	781b      	ldrb	r3, [r3, #0]
 8011c34:	2b5c      	cmp	r3, #92	@ 0x5c
 8011c36:	d0f0      	beq.n	8011c1a <create_name+0x4e>
			break;
 8011c38:	e038      	b.n	8011cac <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8011c3a:	7efb      	ldrb	r3, [r7, #27]
 8011c3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8011c3e:	d003      	beq.n	8011c48 <create_name+0x7c>
 8011c40:	693a      	ldr	r2, [r7, #16]
 8011c42:	697b      	ldr	r3, [r7, #20]
 8011c44:	429a      	cmp	r2, r3
 8011c46:	d30c      	bcc.n	8011c62 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	2b0b      	cmp	r3, #11
 8011c4c:	d002      	beq.n	8011c54 <create_name+0x88>
 8011c4e:	7efb      	ldrb	r3, [r7, #27]
 8011c50:	2b2e      	cmp	r3, #46	@ 0x2e
 8011c52:	d001      	beq.n	8011c58 <create_name+0x8c>
 8011c54:	2306      	movs	r3, #6
 8011c56:	e044      	b.n	8011ce2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8011c58:	2308      	movs	r3, #8
 8011c5a:	613b      	str	r3, [r7, #16]
 8011c5c:	230b      	movs	r3, #11
 8011c5e:	617b      	str	r3, [r7, #20]
			continue;
 8011c60:	e022      	b.n	8011ca8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011c62:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	da04      	bge.n	8011c74 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011c6a:	7efb      	ldrb	r3, [r7, #27]
 8011c6c:	3b80      	subs	r3, #128	@ 0x80
 8011c6e:	4a1f      	ldr	r2, [pc, #124]	@ (8011cec <create_name+0x120>)
 8011c70:	5cd3      	ldrb	r3, [r2, r3]
 8011c72:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011c74:	7efb      	ldrb	r3, [r7, #27]
 8011c76:	4619      	mov	r1, r3
 8011c78:	481d      	ldr	r0, [pc, #116]	@ (8011cf0 <create_name+0x124>)
 8011c7a:	f7ff f811 	bl	8010ca0 <chk_chr>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d001      	beq.n	8011c88 <create_name+0xbc>
 8011c84:	2306      	movs	r3, #6
 8011c86:	e02c      	b.n	8011ce2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011c88:	7efb      	ldrb	r3, [r7, #27]
 8011c8a:	2b60      	cmp	r3, #96	@ 0x60
 8011c8c:	d905      	bls.n	8011c9a <create_name+0xce>
 8011c8e:	7efb      	ldrb	r3, [r7, #27]
 8011c90:	2b7a      	cmp	r3, #122	@ 0x7a
 8011c92:	d802      	bhi.n	8011c9a <create_name+0xce>
 8011c94:	7efb      	ldrb	r3, [r7, #27]
 8011c96:	3b20      	subs	r3, #32
 8011c98:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8011c9a:	693b      	ldr	r3, [r7, #16]
 8011c9c:	1c5a      	adds	r2, r3, #1
 8011c9e:	613a      	str	r2, [r7, #16]
 8011ca0:	68ba      	ldr	r2, [r7, #8]
 8011ca2:	4413      	add	r3, r2
 8011ca4:	7efa      	ldrb	r2, [r7, #27]
 8011ca6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011ca8:	e7a6      	b.n	8011bf8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011caa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011cac:	68fa      	ldr	r2, [r7, #12]
 8011cae:	69fb      	ldr	r3, [r7, #28]
 8011cb0:	441a      	add	r2, r3
 8011cb2:	683b      	ldr	r3, [r7, #0]
 8011cb4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8011cb6:	693b      	ldr	r3, [r7, #16]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d101      	bne.n	8011cc0 <create_name+0xf4>
 8011cbc:	2306      	movs	r3, #6
 8011cbe:	e010      	b.n	8011ce2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	781b      	ldrb	r3, [r3, #0]
 8011cc4:	2be5      	cmp	r3, #229	@ 0xe5
 8011cc6:	d102      	bne.n	8011cce <create_name+0x102>
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	2205      	movs	r2, #5
 8011ccc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011cce:	7efb      	ldrb	r3, [r7, #27]
 8011cd0:	2b20      	cmp	r3, #32
 8011cd2:	d801      	bhi.n	8011cd8 <create_name+0x10c>
 8011cd4:	2204      	movs	r2, #4
 8011cd6:	e000      	b.n	8011cda <create_name+0x10e>
 8011cd8:	2200      	movs	r2, #0
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	330b      	adds	r3, #11
 8011cde:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011ce0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3720      	adds	r7, #32
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}
 8011cea:	bf00      	nop
 8011cec:	08019e7c 	.word	0x08019e7c
 8011cf0:	08019dfc 	.word	0x08019dfc

08011cf4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b086      	sub	sp, #24
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
 8011cfc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011d02:	693b      	ldr	r3, [r7, #16]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011d08:	e002      	b.n	8011d10 <follow_path+0x1c>
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	3301      	adds	r3, #1
 8011d0e:	603b      	str	r3, [r7, #0]
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	781b      	ldrb	r3, [r3, #0]
 8011d14:	2b2f      	cmp	r3, #47	@ 0x2f
 8011d16:	d0f8      	beq.n	8011d0a <follow_path+0x16>
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	781b      	ldrb	r3, [r3, #0]
 8011d1c:	2b5c      	cmp	r3, #92	@ 0x5c
 8011d1e:	d0f4      	beq.n	8011d0a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011d20:	693b      	ldr	r3, [r7, #16]
 8011d22:	2200      	movs	r2, #0
 8011d24:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	2b1f      	cmp	r3, #31
 8011d2c:	d80a      	bhi.n	8011d44 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	2280      	movs	r2, #128	@ 0x80
 8011d32:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8011d36:	2100      	movs	r1, #0
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f7ff fcfa 	bl	8011732 <dir_sdi>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	75fb      	strb	r3, [r7, #23]
 8011d42:	e043      	b.n	8011dcc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011d44:	463b      	mov	r3, r7
 8011d46:	4619      	mov	r1, r3
 8011d48:	6878      	ldr	r0, [r7, #4]
 8011d4a:	f7ff ff3f 	bl	8011bcc <create_name>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011d52:	7dfb      	ldrb	r3, [r7, #23]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d134      	bne.n	8011dc2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f7ff feb0 	bl	8011abe <dir_find>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011d68:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011d6a:	7dfb      	ldrb	r3, [r7, #23]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d00a      	beq.n	8011d86 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011d70:	7dfb      	ldrb	r3, [r7, #23]
 8011d72:	2b04      	cmp	r3, #4
 8011d74:	d127      	bne.n	8011dc6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011d76:	7afb      	ldrb	r3, [r7, #11]
 8011d78:	f003 0304 	and.w	r3, r3, #4
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d122      	bne.n	8011dc6 <follow_path+0xd2>
 8011d80:	2305      	movs	r3, #5
 8011d82:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011d84:	e01f      	b.n	8011dc6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011d86:	7afb      	ldrb	r3, [r7, #11]
 8011d88:	f003 0304 	and.w	r3, r3, #4
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d11c      	bne.n	8011dca <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011d90:	693b      	ldr	r3, [r7, #16]
 8011d92:	799b      	ldrb	r3, [r3, #6]
 8011d94:	f003 0310 	and.w	r3, r3, #16
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d102      	bne.n	8011da2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011d9c:	2305      	movs	r3, #5
 8011d9e:	75fb      	strb	r3, [r7, #23]
 8011da0:	e014      	b.n	8011dcc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	695b      	ldr	r3, [r3, #20]
 8011dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011db0:	4413      	add	r3, r2
 8011db2:	4619      	mov	r1, r3
 8011db4:	68f8      	ldr	r0, [r7, #12]
 8011db6:	f7ff fe43 	bl	8011a40 <ld_clust>
 8011dba:	4602      	mov	r2, r0
 8011dbc:	693b      	ldr	r3, [r7, #16]
 8011dbe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011dc0:	e7c0      	b.n	8011d44 <follow_path+0x50>
			if (res != FR_OK) break;
 8011dc2:	bf00      	nop
 8011dc4:	e002      	b.n	8011dcc <follow_path+0xd8>
				break;
 8011dc6:	bf00      	nop
 8011dc8:	e000      	b.n	8011dcc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011dca:	bf00      	nop
			}
		}
	}

	return res;
 8011dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dce:	4618      	mov	r0, r3
 8011dd0:	3718      	adds	r7, #24
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	bd80      	pop	{r7, pc}

08011dd6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011dd6:	b480      	push	{r7}
 8011dd8:	b087      	sub	sp, #28
 8011dda:	af00      	add	r7, sp, #0
 8011ddc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011dde:	f04f 33ff 	mov.w	r3, #4294967295
 8011de2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d031      	beq.n	8011e50 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	617b      	str	r3, [r7, #20]
 8011df2:	e002      	b.n	8011dfa <get_ldnumber+0x24>
 8011df4:	697b      	ldr	r3, [r7, #20]
 8011df6:	3301      	adds	r3, #1
 8011df8:	617b      	str	r3, [r7, #20]
 8011dfa:	697b      	ldr	r3, [r7, #20]
 8011dfc:	781b      	ldrb	r3, [r3, #0]
 8011dfe:	2b20      	cmp	r3, #32
 8011e00:	d903      	bls.n	8011e0a <get_ldnumber+0x34>
 8011e02:	697b      	ldr	r3, [r7, #20]
 8011e04:	781b      	ldrb	r3, [r3, #0]
 8011e06:	2b3a      	cmp	r3, #58	@ 0x3a
 8011e08:	d1f4      	bne.n	8011df4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	781b      	ldrb	r3, [r3, #0]
 8011e0e:	2b3a      	cmp	r3, #58	@ 0x3a
 8011e10:	d11c      	bne.n	8011e4c <get_ldnumber+0x76>
			tp = *path;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	1c5a      	adds	r2, r3, #1
 8011e1c:	60fa      	str	r2, [r7, #12]
 8011e1e:	781b      	ldrb	r3, [r3, #0]
 8011e20:	3b30      	subs	r3, #48	@ 0x30
 8011e22:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011e24:	68bb      	ldr	r3, [r7, #8]
 8011e26:	2b09      	cmp	r3, #9
 8011e28:	d80e      	bhi.n	8011e48 <get_ldnumber+0x72>
 8011e2a:	68fa      	ldr	r2, [r7, #12]
 8011e2c:	697b      	ldr	r3, [r7, #20]
 8011e2e:	429a      	cmp	r2, r3
 8011e30:	d10a      	bne.n	8011e48 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d107      	bne.n	8011e48 <get_ldnumber+0x72>
					vol = (int)i;
 8011e38:	68bb      	ldr	r3, [r7, #8]
 8011e3a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011e3c:	697b      	ldr	r3, [r7, #20]
 8011e3e:	3301      	adds	r3, #1
 8011e40:	617b      	str	r3, [r7, #20]
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	697a      	ldr	r2, [r7, #20]
 8011e46:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011e48:	693b      	ldr	r3, [r7, #16]
 8011e4a:	e002      	b.n	8011e52 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011e50:	693b      	ldr	r3, [r7, #16]
}
 8011e52:	4618      	mov	r0, r3
 8011e54:	371c      	adds	r7, #28
 8011e56:	46bd      	mov	sp, r7
 8011e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5c:	4770      	bx	lr
	...

08011e60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b082      	sub	sp, #8
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	70da      	strb	r2, [r3, #3]
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f04f 32ff 	mov.w	r2, #4294967295
 8011e76:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011e78:	6839      	ldr	r1, [r7, #0]
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f7ff f8dc 	bl	8011038 <move_window>
 8011e80:	4603      	mov	r3, r0
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d001      	beq.n	8011e8a <check_fs+0x2a>
 8011e86:	2304      	movs	r3, #4
 8011e88:	e038      	b.n	8011efc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	3330      	adds	r3, #48	@ 0x30
 8011e8e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7fe fe1e 	bl	8010ad4 <ld_word>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	461a      	mov	r2, r3
 8011e9c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d001      	beq.n	8011ea8 <check_fs+0x48>
 8011ea4:	2303      	movs	r3, #3
 8011ea6:	e029      	b.n	8011efc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011eae:	2be9      	cmp	r3, #233	@ 0xe9
 8011eb0:	d009      	beq.n	8011ec6 <check_fs+0x66>
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011eb8:	2beb      	cmp	r3, #235	@ 0xeb
 8011eba:	d11e      	bne.n	8011efa <check_fs+0x9a>
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8011ec2:	2b90      	cmp	r3, #144	@ 0x90
 8011ec4:	d119      	bne.n	8011efa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	3330      	adds	r3, #48	@ 0x30
 8011eca:	3336      	adds	r3, #54	@ 0x36
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f7fe fe1a 	bl	8010b06 <ld_dword>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8011ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8011f04 <check_fs+0xa4>)
 8011eda:	4293      	cmp	r3, r2
 8011edc:	d101      	bne.n	8011ee2 <check_fs+0x82>
 8011ede:	2300      	movs	r3, #0
 8011ee0:	e00c      	b.n	8011efc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	3330      	adds	r3, #48	@ 0x30
 8011ee6:	3352      	adds	r3, #82	@ 0x52
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f7fe fe0c 	bl	8010b06 <ld_dword>
 8011eee:	4603      	mov	r3, r0
 8011ef0:	4a05      	ldr	r2, [pc, #20]	@ (8011f08 <check_fs+0xa8>)
 8011ef2:	4293      	cmp	r3, r2
 8011ef4:	d101      	bne.n	8011efa <check_fs+0x9a>
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	e000      	b.n	8011efc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011efa:	2302      	movs	r3, #2
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	3708      	adds	r7, #8
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}
 8011f04:	00544146 	.word	0x00544146
 8011f08:	33544146 	.word	0x33544146

08011f0c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b096      	sub	sp, #88	@ 0x58
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	60f8      	str	r0, [r7, #12]
 8011f14:	60b9      	str	r1, [r7, #8]
 8011f16:	4613      	mov	r3, r2
 8011f18:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011f1a:	68bb      	ldr	r3, [r7, #8]
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011f20:	68f8      	ldr	r0, [r7, #12]
 8011f22:	f7ff ff58 	bl	8011dd6 <get_ldnumber>
 8011f26:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	da01      	bge.n	8011f32 <find_volume+0x26>
 8011f2e:	230b      	movs	r3, #11
 8011f30:	e22d      	b.n	801238e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011f32:	4aa1      	ldr	r2, [pc, #644]	@ (80121b8 <find_volume+0x2ac>)
 8011f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d101      	bne.n	8011f46 <find_volume+0x3a>
 8011f42:	230c      	movs	r3, #12
 8011f44:	e223      	b.n	801238e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011f46:	68bb      	ldr	r3, [r7, #8]
 8011f48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011f4a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011f4c:	79fb      	ldrb	r3, [r7, #7]
 8011f4e:	f023 0301 	bic.w	r3, r3, #1
 8011f52:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f56:	781b      	ldrb	r3, [r3, #0]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d01a      	beq.n	8011f92 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f5e:	785b      	ldrb	r3, [r3, #1]
 8011f60:	4618      	mov	r0, r3
 8011f62:	f7fe fd19 	bl	8010998 <disk_status>
 8011f66:	4603      	mov	r3, r0
 8011f68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011f6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011f70:	f003 0301 	and.w	r3, r3, #1
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d10c      	bne.n	8011f92 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011f78:	79fb      	ldrb	r3, [r7, #7]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d007      	beq.n	8011f8e <find_volume+0x82>
 8011f7e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011f82:	f003 0304 	and.w	r3, r3, #4
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d001      	beq.n	8011f8e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011f8a:	230a      	movs	r3, #10
 8011f8c:	e1ff      	b.n	801238e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8011f8e:	2300      	movs	r3, #0
 8011f90:	e1fd      	b.n	801238e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f94:	2200      	movs	r2, #0
 8011f96:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f9a:	b2da      	uxtb	r2, r3
 8011f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f9e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fa2:	785b      	ldrb	r3, [r3, #1]
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f7fe fd11 	bl	80109cc <disk_initialize>
 8011faa:	4603      	mov	r3, r0
 8011fac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011fb0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011fb4:	f003 0301 	and.w	r3, r3, #1
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d001      	beq.n	8011fc0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011fbc:	2303      	movs	r3, #3
 8011fbe:	e1e6      	b.n	801238e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011fc0:	79fb      	ldrb	r3, [r7, #7]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d007      	beq.n	8011fd6 <find_volume+0xca>
 8011fc6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011fca:	f003 0304 	and.w	r3, r3, #4
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d001      	beq.n	8011fd6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011fd2:	230a      	movs	r3, #10
 8011fd4:	e1db      	b.n	801238e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011fda:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011fdc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011fde:	f7ff ff3f 	bl	8011e60 <check_fs>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011fe8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011fec:	2b02      	cmp	r3, #2
 8011fee:	d149      	bne.n	8012084 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	643b      	str	r3, [r7, #64]	@ 0x40
 8011ff4:	e01e      	b.n	8012034 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ff8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011ffc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ffe:	011b      	lsls	r3, r3, #4
 8012000:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8012004:	4413      	add	r3, r2
 8012006:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801200a:	3304      	adds	r3, #4
 801200c:	781b      	ldrb	r3, [r3, #0]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d006      	beq.n	8012020 <find_volume+0x114>
 8012012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012014:	3308      	adds	r3, #8
 8012016:	4618      	mov	r0, r3
 8012018:	f7fe fd75 	bl	8010b06 <ld_dword>
 801201c:	4602      	mov	r2, r0
 801201e:	e000      	b.n	8012022 <find_volume+0x116>
 8012020:	2200      	movs	r2, #0
 8012022:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012024:	009b      	lsls	r3, r3, #2
 8012026:	3358      	adds	r3, #88	@ 0x58
 8012028:	443b      	add	r3, r7
 801202a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801202e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012030:	3301      	adds	r3, #1
 8012032:	643b      	str	r3, [r7, #64]	@ 0x40
 8012034:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012036:	2b03      	cmp	r3, #3
 8012038:	d9dd      	bls.n	8011ff6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801203a:	2300      	movs	r3, #0
 801203c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801203e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012040:	2b00      	cmp	r3, #0
 8012042:	d002      	beq.n	801204a <find_volume+0x13e>
 8012044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012046:	3b01      	subs	r3, #1
 8012048:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801204a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801204c:	009b      	lsls	r3, r3, #2
 801204e:	3358      	adds	r3, #88	@ 0x58
 8012050:	443b      	add	r3, r7
 8012052:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012056:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012058:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801205a:	2b00      	cmp	r3, #0
 801205c:	d005      	beq.n	801206a <find_volume+0x15e>
 801205e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012060:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012062:	f7ff fefd 	bl	8011e60 <check_fs>
 8012066:	4603      	mov	r3, r0
 8012068:	e000      	b.n	801206c <find_volume+0x160>
 801206a:	2303      	movs	r3, #3
 801206c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012070:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012074:	2b01      	cmp	r3, #1
 8012076:	d905      	bls.n	8012084 <find_volume+0x178>
 8012078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801207a:	3301      	adds	r3, #1
 801207c:	643b      	str	r3, [r7, #64]	@ 0x40
 801207e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012080:	2b03      	cmp	r3, #3
 8012082:	d9e2      	bls.n	801204a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012084:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012088:	2b04      	cmp	r3, #4
 801208a:	d101      	bne.n	8012090 <find_volume+0x184>
 801208c:	2301      	movs	r3, #1
 801208e:	e17e      	b.n	801238e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012090:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012094:	2b01      	cmp	r3, #1
 8012096:	d901      	bls.n	801209c <find_volume+0x190>
 8012098:	230d      	movs	r3, #13
 801209a:	e178      	b.n	801238e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801209c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801209e:	3330      	adds	r3, #48	@ 0x30
 80120a0:	330b      	adds	r3, #11
 80120a2:	4618      	mov	r0, r3
 80120a4:	f7fe fd16 	bl	8010ad4 <ld_word>
 80120a8:	4603      	mov	r3, r0
 80120aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80120ae:	d001      	beq.n	80120b4 <find_volume+0x1a8>
 80120b0:	230d      	movs	r3, #13
 80120b2:	e16c      	b.n	801238e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80120b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120b6:	3330      	adds	r3, #48	@ 0x30
 80120b8:	3316      	adds	r3, #22
 80120ba:	4618      	mov	r0, r3
 80120bc:	f7fe fd0a 	bl	8010ad4 <ld_word>
 80120c0:	4603      	mov	r3, r0
 80120c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80120c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d106      	bne.n	80120d8 <find_volume+0x1cc>
 80120ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120cc:	3330      	adds	r3, #48	@ 0x30
 80120ce:	3324      	adds	r3, #36	@ 0x24
 80120d0:	4618      	mov	r0, r3
 80120d2:	f7fe fd18 	bl	8010b06 <ld_dword>
 80120d6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80120d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80120dc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80120de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120e0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80120e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120e6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80120e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120ea:	789b      	ldrb	r3, [r3, #2]
 80120ec:	2b01      	cmp	r3, #1
 80120ee:	d005      	beq.n	80120fc <find_volume+0x1f0>
 80120f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120f2:	789b      	ldrb	r3, [r3, #2]
 80120f4:	2b02      	cmp	r3, #2
 80120f6:	d001      	beq.n	80120fc <find_volume+0x1f0>
 80120f8:	230d      	movs	r3, #13
 80120fa:	e148      	b.n	801238e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80120fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120fe:	789b      	ldrb	r3, [r3, #2]
 8012100:	461a      	mov	r2, r3
 8012102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012104:	fb02 f303 	mul.w	r3, r2, r3
 8012108:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801210a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801210c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012110:	461a      	mov	r2, r3
 8012112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012114:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012118:	895b      	ldrh	r3, [r3, #10]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d008      	beq.n	8012130 <find_volume+0x224>
 801211e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012120:	895b      	ldrh	r3, [r3, #10]
 8012122:	461a      	mov	r2, r3
 8012124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012126:	895b      	ldrh	r3, [r3, #10]
 8012128:	3b01      	subs	r3, #1
 801212a:	4013      	ands	r3, r2
 801212c:	2b00      	cmp	r3, #0
 801212e:	d001      	beq.n	8012134 <find_volume+0x228>
 8012130:	230d      	movs	r3, #13
 8012132:	e12c      	b.n	801238e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012136:	3330      	adds	r3, #48	@ 0x30
 8012138:	3311      	adds	r3, #17
 801213a:	4618      	mov	r0, r3
 801213c:	f7fe fcca 	bl	8010ad4 <ld_word>
 8012140:	4603      	mov	r3, r0
 8012142:	461a      	mov	r2, r3
 8012144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012146:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801214a:	891b      	ldrh	r3, [r3, #8]
 801214c:	f003 030f 	and.w	r3, r3, #15
 8012150:	b29b      	uxth	r3, r3
 8012152:	2b00      	cmp	r3, #0
 8012154:	d001      	beq.n	801215a <find_volume+0x24e>
 8012156:	230d      	movs	r3, #13
 8012158:	e119      	b.n	801238e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801215a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801215c:	3330      	adds	r3, #48	@ 0x30
 801215e:	3313      	adds	r3, #19
 8012160:	4618      	mov	r0, r3
 8012162:	f7fe fcb7 	bl	8010ad4 <ld_word>
 8012166:	4603      	mov	r3, r0
 8012168:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801216a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801216c:	2b00      	cmp	r3, #0
 801216e:	d106      	bne.n	801217e <find_volume+0x272>
 8012170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012172:	3330      	adds	r3, #48	@ 0x30
 8012174:	3320      	adds	r3, #32
 8012176:	4618      	mov	r0, r3
 8012178:	f7fe fcc5 	bl	8010b06 <ld_dword>
 801217c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801217e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012180:	3330      	adds	r3, #48	@ 0x30
 8012182:	330e      	adds	r3, #14
 8012184:	4618      	mov	r0, r3
 8012186:	f7fe fca5 	bl	8010ad4 <ld_word>
 801218a:	4603      	mov	r3, r0
 801218c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801218e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012190:	2b00      	cmp	r3, #0
 8012192:	d101      	bne.n	8012198 <find_volume+0x28c>
 8012194:	230d      	movs	r3, #13
 8012196:	e0fa      	b.n	801238e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012198:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801219a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801219c:	4413      	add	r3, r2
 801219e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80121a0:	8912      	ldrh	r2, [r2, #8]
 80121a2:	0912      	lsrs	r2, r2, #4
 80121a4:	b292      	uxth	r2, r2
 80121a6:	4413      	add	r3, r2
 80121a8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80121aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80121ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121ae:	429a      	cmp	r2, r3
 80121b0:	d204      	bcs.n	80121bc <find_volume+0x2b0>
 80121b2:	230d      	movs	r3, #13
 80121b4:	e0eb      	b.n	801238e <find_volume+0x482>
 80121b6:	bf00      	nop
 80121b8:	200019c0 	.word	0x200019c0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80121bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80121be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121c0:	1ad3      	subs	r3, r2, r3
 80121c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80121c4:	8952      	ldrh	r2, [r2, #10]
 80121c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80121ca:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80121cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d101      	bne.n	80121d6 <find_volume+0x2ca>
 80121d2:	230d      	movs	r3, #13
 80121d4:	e0db      	b.n	801238e <find_volume+0x482>
		fmt = FS_FAT32;
 80121d6:	2303      	movs	r3, #3
 80121d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80121dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121de:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80121e2:	4293      	cmp	r3, r2
 80121e4:	d802      	bhi.n	80121ec <find_volume+0x2e0>
 80121e6:	2302      	movs	r3, #2
 80121e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80121ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ee:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80121f2:	4293      	cmp	r3, r2
 80121f4:	d802      	bhi.n	80121fc <find_volume+0x2f0>
 80121f6:	2301      	movs	r3, #1
 80121f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80121fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121fe:	1c9a      	adds	r2, r3, #2
 8012200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012202:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8012204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012206:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012208:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801220a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801220c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801220e:	441a      	add	r2, r3
 8012210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012212:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8012214:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012218:	441a      	add	r2, r3
 801221a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801221c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 801221e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012222:	2b03      	cmp	r3, #3
 8012224:	d11e      	bne.n	8012264 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012228:	3330      	adds	r3, #48	@ 0x30
 801222a:	332a      	adds	r3, #42	@ 0x2a
 801222c:	4618      	mov	r0, r3
 801222e:	f7fe fc51 	bl	8010ad4 <ld_word>
 8012232:	4603      	mov	r3, r0
 8012234:	2b00      	cmp	r3, #0
 8012236:	d001      	beq.n	801223c <find_volume+0x330>
 8012238:	230d      	movs	r3, #13
 801223a:	e0a8      	b.n	801238e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801223c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801223e:	891b      	ldrh	r3, [r3, #8]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d001      	beq.n	8012248 <find_volume+0x33c>
 8012244:	230d      	movs	r3, #13
 8012246:	e0a2      	b.n	801238e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801224a:	3330      	adds	r3, #48	@ 0x30
 801224c:	332c      	adds	r3, #44	@ 0x2c
 801224e:	4618      	mov	r0, r3
 8012250:	f7fe fc59 	bl	8010b06 <ld_dword>
 8012254:	4602      	mov	r2, r0
 8012256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012258:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801225a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801225c:	695b      	ldr	r3, [r3, #20]
 801225e:	009b      	lsls	r3, r3, #2
 8012260:	647b      	str	r3, [r7, #68]	@ 0x44
 8012262:	e01f      	b.n	80122a4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012266:	891b      	ldrh	r3, [r3, #8]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d101      	bne.n	8012270 <find_volume+0x364>
 801226c:	230d      	movs	r3, #13
 801226e:	e08e      	b.n	801238e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012272:	6a1a      	ldr	r2, [r3, #32]
 8012274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012276:	441a      	add	r2, r3
 8012278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801227a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801227c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012280:	2b02      	cmp	r3, #2
 8012282:	d103      	bne.n	801228c <find_volume+0x380>
 8012284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012286:	695b      	ldr	r3, [r3, #20]
 8012288:	005b      	lsls	r3, r3, #1
 801228a:	e00a      	b.n	80122a2 <find_volume+0x396>
 801228c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801228e:	695a      	ldr	r2, [r3, #20]
 8012290:	4613      	mov	r3, r2
 8012292:	005b      	lsls	r3, r3, #1
 8012294:	4413      	add	r3, r2
 8012296:	085a      	lsrs	r2, r3, #1
 8012298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801229a:	695b      	ldr	r3, [r3, #20]
 801229c:	f003 0301 	and.w	r3, r3, #1
 80122a0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80122a2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80122a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122a6:	699a      	ldr	r2, [r3, #24]
 80122a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80122aa:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80122ae:	0a5b      	lsrs	r3, r3, #9
 80122b0:	429a      	cmp	r2, r3
 80122b2:	d201      	bcs.n	80122b8 <find_volume+0x3ac>
 80122b4:	230d      	movs	r3, #13
 80122b6:	e06a      	b.n	801238e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80122b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122ba:	f04f 32ff 	mov.w	r2, #4294967295
 80122be:	611a      	str	r2, [r3, #16]
 80122c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122c2:	691a      	ldr	r2, [r3, #16]
 80122c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122c6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80122c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122ca:	2280      	movs	r2, #128	@ 0x80
 80122cc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80122ce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80122d2:	2b03      	cmp	r3, #3
 80122d4:	d149      	bne.n	801236a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80122d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122d8:	3330      	adds	r3, #48	@ 0x30
 80122da:	3330      	adds	r3, #48	@ 0x30
 80122dc:	4618      	mov	r0, r3
 80122de:	f7fe fbf9 	bl	8010ad4 <ld_word>
 80122e2:	4603      	mov	r3, r0
 80122e4:	2b01      	cmp	r3, #1
 80122e6:	d140      	bne.n	801236a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80122e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80122ea:	3301      	adds	r3, #1
 80122ec:	4619      	mov	r1, r3
 80122ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80122f0:	f7fe fea2 	bl	8011038 <move_window>
 80122f4:	4603      	mov	r3, r0
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d137      	bne.n	801236a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80122fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122fc:	2200      	movs	r2, #0
 80122fe:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012302:	3330      	adds	r3, #48	@ 0x30
 8012304:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012308:	4618      	mov	r0, r3
 801230a:	f7fe fbe3 	bl	8010ad4 <ld_word>
 801230e:	4603      	mov	r3, r0
 8012310:	461a      	mov	r2, r3
 8012312:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012316:	429a      	cmp	r2, r3
 8012318:	d127      	bne.n	801236a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801231a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801231c:	3330      	adds	r3, #48	@ 0x30
 801231e:	4618      	mov	r0, r3
 8012320:	f7fe fbf1 	bl	8010b06 <ld_dword>
 8012324:	4603      	mov	r3, r0
 8012326:	4a1c      	ldr	r2, [pc, #112]	@ (8012398 <find_volume+0x48c>)
 8012328:	4293      	cmp	r3, r2
 801232a:	d11e      	bne.n	801236a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801232c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801232e:	3330      	adds	r3, #48	@ 0x30
 8012330:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012334:	4618      	mov	r0, r3
 8012336:	f7fe fbe6 	bl	8010b06 <ld_dword>
 801233a:	4603      	mov	r3, r0
 801233c:	4a17      	ldr	r2, [pc, #92]	@ (801239c <find_volume+0x490>)
 801233e:	4293      	cmp	r3, r2
 8012340:	d113      	bne.n	801236a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012344:	3330      	adds	r3, #48	@ 0x30
 8012346:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801234a:	4618      	mov	r0, r3
 801234c:	f7fe fbdb 	bl	8010b06 <ld_dword>
 8012350:	4602      	mov	r2, r0
 8012352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012354:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012358:	3330      	adds	r3, #48	@ 0x30
 801235a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801235e:	4618      	mov	r0, r3
 8012360:	f7fe fbd1 	bl	8010b06 <ld_dword>
 8012364:	4602      	mov	r2, r0
 8012366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012368:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801236a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801236c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8012370:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012372:	4b0b      	ldr	r3, [pc, #44]	@ (80123a0 <find_volume+0x494>)
 8012374:	881b      	ldrh	r3, [r3, #0]
 8012376:	3301      	adds	r3, #1
 8012378:	b29a      	uxth	r2, r3
 801237a:	4b09      	ldr	r3, [pc, #36]	@ (80123a0 <find_volume+0x494>)
 801237c:	801a      	strh	r2, [r3, #0]
 801237e:	4b08      	ldr	r3, [pc, #32]	@ (80123a0 <find_volume+0x494>)
 8012380:	881a      	ldrh	r2, [r3, #0]
 8012382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012384:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012386:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012388:	f7fe fdee 	bl	8010f68 <clear_lock>
#endif
	return FR_OK;
 801238c:	2300      	movs	r3, #0
}
 801238e:	4618      	mov	r0, r3
 8012390:	3758      	adds	r7, #88	@ 0x58
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}
 8012396:	bf00      	nop
 8012398:	41615252 	.word	0x41615252
 801239c:	61417272 	.word	0x61417272
 80123a0:	200019c4 	.word	0x200019c4

080123a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b084      	sub	sp, #16
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
 80123ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80123ae:	2309      	movs	r3, #9
 80123b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d01c      	beq.n	80123f2 <validate+0x4e>
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d018      	beq.n	80123f2 <validate+0x4e>
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	781b      	ldrb	r3, [r3, #0]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d013      	beq.n	80123f2 <validate+0x4e>
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	889a      	ldrh	r2, [r3, #4]
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	88db      	ldrh	r3, [r3, #6]
 80123d4:	429a      	cmp	r2, r3
 80123d6:	d10c      	bne.n	80123f2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	785b      	ldrb	r3, [r3, #1]
 80123de:	4618      	mov	r0, r3
 80123e0:	f7fe fada 	bl	8010998 <disk_status>
 80123e4:	4603      	mov	r3, r0
 80123e6:	f003 0301 	and.w	r3, r3, #1
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d101      	bne.n	80123f2 <validate+0x4e>
			res = FR_OK;
 80123ee:	2300      	movs	r3, #0
 80123f0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80123f2:	7bfb      	ldrb	r3, [r7, #15]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d102      	bne.n	80123fe <validate+0x5a>
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	e000      	b.n	8012400 <validate+0x5c>
 80123fe:	2300      	movs	r3, #0
 8012400:	683a      	ldr	r2, [r7, #0]
 8012402:	6013      	str	r3, [r2, #0]
	return res;
 8012404:	7bfb      	ldrb	r3, [r7, #15]
}
 8012406:	4618      	mov	r0, r3
 8012408:	3710      	adds	r7, #16
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}
	...

08012410 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b088      	sub	sp, #32
 8012414:	af00      	add	r7, sp, #0
 8012416:	60f8      	str	r0, [r7, #12]
 8012418:	60b9      	str	r1, [r7, #8]
 801241a:	4613      	mov	r3, r2
 801241c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012422:	f107 0310 	add.w	r3, r7, #16
 8012426:	4618      	mov	r0, r3
 8012428:	f7ff fcd5 	bl	8011dd6 <get_ldnumber>
 801242c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801242e:	69fb      	ldr	r3, [r7, #28]
 8012430:	2b00      	cmp	r3, #0
 8012432:	da01      	bge.n	8012438 <f_mount+0x28>
 8012434:	230b      	movs	r3, #11
 8012436:	e02b      	b.n	8012490 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012438:	4a17      	ldr	r2, [pc, #92]	@ (8012498 <f_mount+0x88>)
 801243a:	69fb      	ldr	r3, [r7, #28]
 801243c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012440:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012442:	69bb      	ldr	r3, [r7, #24]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d005      	beq.n	8012454 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012448:	69b8      	ldr	r0, [r7, #24]
 801244a:	f7fe fd8d 	bl	8010f68 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801244e:	69bb      	ldr	r3, [r7, #24]
 8012450:	2200      	movs	r2, #0
 8012452:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d002      	beq.n	8012460 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	2200      	movs	r2, #0
 801245e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012460:	68fa      	ldr	r2, [r7, #12]
 8012462:	490d      	ldr	r1, [pc, #52]	@ (8012498 <f_mount+0x88>)
 8012464:	69fb      	ldr	r3, [r7, #28]
 8012466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d002      	beq.n	8012476 <f_mount+0x66>
 8012470:	79fb      	ldrb	r3, [r7, #7]
 8012472:	2b01      	cmp	r3, #1
 8012474:	d001      	beq.n	801247a <f_mount+0x6a>
 8012476:	2300      	movs	r3, #0
 8012478:	e00a      	b.n	8012490 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801247a:	f107 010c 	add.w	r1, r7, #12
 801247e:	f107 0308 	add.w	r3, r7, #8
 8012482:	2200      	movs	r2, #0
 8012484:	4618      	mov	r0, r3
 8012486:	f7ff fd41 	bl	8011f0c <find_volume>
 801248a:	4603      	mov	r3, r0
 801248c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801248e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012490:	4618      	mov	r0, r3
 8012492:	3720      	adds	r7, #32
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}
 8012498:	200019c0 	.word	0x200019c0

0801249c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801249c:	b580      	push	{r7, lr}
 801249e:	b098      	sub	sp, #96	@ 0x60
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	60f8      	str	r0, [r7, #12]
 80124a4:	60b9      	str	r1, [r7, #8]
 80124a6:	4613      	mov	r3, r2
 80124a8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d101      	bne.n	80124b4 <f_open+0x18>
 80124b0:	2309      	movs	r3, #9
 80124b2:	e1a9      	b.n	8012808 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80124b4:	79fb      	ldrb	r3, [r7, #7]
 80124b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80124ba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80124bc:	79fa      	ldrb	r2, [r7, #7]
 80124be:	f107 0110 	add.w	r1, r7, #16
 80124c2:	f107 0308 	add.w	r3, r7, #8
 80124c6:	4618      	mov	r0, r3
 80124c8:	f7ff fd20 	bl	8011f0c <find_volume>
 80124cc:	4603      	mov	r3, r0
 80124ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80124d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	f040 818d 	bne.w	80127f6 <f_open+0x35a>
		dj.obj.fs = fs;
 80124dc:	693b      	ldr	r3, [r7, #16]
 80124de:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80124e0:	68ba      	ldr	r2, [r7, #8]
 80124e2:	f107 0314 	add.w	r3, r7, #20
 80124e6:	4611      	mov	r1, r2
 80124e8:	4618      	mov	r0, r3
 80124ea:	f7ff fc03 	bl	8011cf4 <follow_path>
 80124ee:	4603      	mov	r3, r0
 80124f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80124f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d118      	bne.n	801252e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80124fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012500:	b25b      	sxtb	r3, r3
 8012502:	2b00      	cmp	r3, #0
 8012504:	da03      	bge.n	801250e <f_open+0x72>
				res = FR_INVALID_NAME;
 8012506:	2306      	movs	r3, #6
 8012508:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801250c:	e00f      	b.n	801252e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801250e:	79fb      	ldrb	r3, [r7, #7]
 8012510:	2b01      	cmp	r3, #1
 8012512:	bf8c      	ite	hi
 8012514:	2301      	movhi	r3, #1
 8012516:	2300      	movls	r3, #0
 8012518:	b2db      	uxtb	r3, r3
 801251a:	461a      	mov	r2, r3
 801251c:	f107 0314 	add.w	r3, r7, #20
 8012520:	4611      	mov	r1, r2
 8012522:	4618      	mov	r0, r3
 8012524:	f7fe fbd8 	bl	8010cd8 <chk_lock>
 8012528:	4603      	mov	r3, r0
 801252a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801252e:	79fb      	ldrb	r3, [r7, #7]
 8012530:	f003 031c 	and.w	r3, r3, #28
 8012534:	2b00      	cmp	r3, #0
 8012536:	d07f      	beq.n	8012638 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8012538:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801253c:	2b00      	cmp	r3, #0
 801253e:	d017      	beq.n	8012570 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012540:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012544:	2b04      	cmp	r3, #4
 8012546:	d10e      	bne.n	8012566 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012548:	f7fe fc22 	bl	8010d90 <enq_lock>
 801254c:	4603      	mov	r3, r0
 801254e:	2b00      	cmp	r3, #0
 8012550:	d006      	beq.n	8012560 <f_open+0xc4>
 8012552:	f107 0314 	add.w	r3, r7, #20
 8012556:	4618      	mov	r0, r3
 8012558:	f7ff fb06 	bl	8011b68 <dir_register>
 801255c:	4603      	mov	r3, r0
 801255e:	e000      	b.n	8012562 <f_open+0xc6>
 8012560:	2312      	movs	r3, #18
 8012562:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012566:	79fb      	ldrb	r3, [r7, #7]
 8012568:	f043 0308 	orr.w	r3, r3, #8
 801256c:	71fb      	strb	r3, [r7, #7]
 801256e:	e010      	b.n	8012592 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012570:	7ebb      	ldrb	r3, [r7, #26]
 8012572:	f003 0311 	and.w	r3, r3, #17
 8012576:	2b00      	cmp	r3, #0
 8012578:	d003      	beq.n	8012582 <f_open+0xe6>
					res = FR_DENIED;
 801257a:	2307      	movs	r3, #7
 801257c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012580:	e007      	b.n	8012592 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012582:	79fb      	ldrb	r3, [r7, #7]
 8012584:	f003 0304 	and.w	r3, r3, #4
 8012588:	2b00      	cmp	r3, #0
 801258a:	d002      	beq.n	8012592 <f_open+0xf6>
 801258c:	2308      	movs	r3, #8
 801258e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012592:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012596:	2b00      	cmp	r3, #0
 8012598:	d168      	bne.n	801266c <f_open+0x1d0>
 801259a:	79fb      	ldrb	r3, [r7, #7]
 801259c:	f003 0308 	and.w	r3, r3, #8
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d063      	beq.n	801266c <f_open+0x1d0>
				dw = GET_FATTIME();
 80125a4:	f7fd ff18 	bl	80103d8 <get_fattime>
 80125a8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80125aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125ac:	330e      	adds	r3, #14
 80125ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7fe fae6 	bl	8010b82 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80125b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125b8:	3316      	adds	r3, #22
 80125ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80125bc:	4618      	mov	r0, r3
 80125be:	f7fe fae0 	bl	8010b82 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80125c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125c4:	330b      	adds	r3, #11
 80125c6:	2220      	movs	r2, #32
 80125c8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80125ca:	693b      	ldr	r3, [r7, #16]
 80125cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80125ce:	4611      	mov	r1, r2
 80125d0:	4618      	mov	r0, r3
 80125d2:	f7ff fa35 	bl	8011a40 <ld_clust>
 80125d6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80125d8:	693b      	ldr	r3, [r7, #16]
 80125da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80125dc:	2200      	movs	r2, #0
 80125de:	4618      	mov	r0, r3
 80125e0:	f7ff fa4d 	bl	8011a7e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80125e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125e6:	331c      	adds	r3, #28
 80125e8:	2100      	movs	r1, #0
 80125ea:	4618      	mov	r0, r3
 80125ec:	f7fe fac9 	bl	8010b82 <st_dword>
					fs->wflag = 1;
 80125f0:	693b      	ldr	r3, [r7, #16]
 80125f2:	2201      	movs	r2, #1
 80125f4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80125f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d037      	beq.n	801266c <f_open+0x1d0>
						dw = fs->winsect;
 80125fc:	693b      	ldr	r3, [r7, #16]
 80125fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012600:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012602:	f107 0314 	add.w	r3, r7, #20
 8012606:	2200      	movs	r2, #0
 8012608:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801260a:	4618      	mov	r0, r3
 801260c:	f7fe ff60 	bl	80114d0 <remove_chain>
 8012610:	4603      	mov	r3, r0
 8012612:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8012616:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801261a:	2b00      	cmp	r3, #0
 801261c:	d126      	bne.n	801266c <f_open+0x1d0>
							res = move_window(fs, dw);
 801261e:	693b      	ldr	r3, [r7, #16]
 8012620:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012622:	4618      	mov	r0, r3
 8012624:	f7fe fd08 	bl	8011038 <move_window>
 8012628:	4603      	mov	r3, r0
 801262a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801262e:	693b      	ldr	r3, [r7, #16]
 8012630:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012632:	3a01      	subs	r2, #1
 8012634:	60da      	str	r2, [r3, #12]
 8012636:	e019      	b.n	801266c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012638:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801263c:	2b00      	cmp	r3, #0
 801263e:	d115      	bne.n	801266c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012640:	7ebb      	ldrb	r3, [r7, #26]
 8012642:	f003 0310 	and.w	r3, r3, #16
 8012646:	2b00      	cmp	r3, #0
 8012648:	d003      	beq.n	8012652 <f_open+0x1b6>
					res = FR_NO_FILE;
 801264a:	2304      	movs	r3, #4
 801264c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012650:	e00c      	b.n	801266c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012652:	79fb      	ldrb	r3, [r7, #7]
 8012654:	f003 0302 	and.w	r3, r3, #2
 8012658:	2b00      	cmp	r3, #0
 801265a:	d007      	beq.n	801266c <f_open+0x1d0>
 801265c:	7ebb      	ldrb	r3, [r7, #26]
 801265e:	f003 0301 	and.w	r3, r3, #1
 8012662:	2b00      	cmp	r3, #0
 8012664:	d002      	beq.n	801266c <f_open+0x1d0>
						res = FR_DENIED;
 8012666:	2307      	movs	r3, #7
 8012668:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801266c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012670:	2b00      	cmp	r3, #0
 8012672:	d126      	bne.n	80126c2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012674:	79fb      	ldrb	r3, [r7, #7]
 8012676:	f003 0308 	and.w	r3, r3, #8
 801267a:	2b00      	cmp	r3, #0
 801267c:	d003      	beq.n	8012686 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801267e:	79fb      	ldrb	r3, [r7, #7]
 8012680:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012684:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012686:	693b      	ldr	r3, [r7, #16]
 8012688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801268e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012694:	79fb      	ldrb	r3, [r7, #7]
 8012696:	2b01      	cmp	r3, #1
 8012698:	bf8c      	ite	hi
 801269a:	2301      	movhi	r3, #1
 801269c:	2300      	movls	r3, #0
 801269e:	b2db      	uxtb	r3, r3
 80126a0:	461a      	mov	r2, r3
 80126a2:	f107 0314 	add.w	r3, r7, #20
 80126a6:	4611      	mov	r1, r2
 80126a8:	4618      	mov	r0, r3
 80126aa:	f7fe fb93 	bl	8010dd4 <inc_lock>
 80126ae:	4602      	mov	r2, r0
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	691b      	ldr	r3, [r3, #16]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d102      	bne.n	80126c2 <f_open+0x226>
 80126bc:	2302      	movs	r3, #2
 80126be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80126c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	f040 8095 	bne.w	80127f6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80126cc:	693b      	ldr	r3, [r7, #16]
 80126ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80126d0:	4611      	mov	r1, r2
 80126d2:	4618      	mov	r0, r3
 80126d4:	f7ff f9b4 	bl	8011a40 <ld_clust>
 80126d8:	4602      	mov	r2, r0
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80126de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126e0:	331c      	adds	r3, #28
 80126e2:	4618      	mov	r0, r3
 80126e4:	f7fe fa0f 	bl	8010b06 <ld_dword>
 80126e8:	4602      	mov	r2, r0
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	2200      	movs	r2, #0
 80126f2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80126f4:	693a      	ldr	r2, [r7, #16]
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80126fa:	693b      	ldr	r3, [r7, #16]
 80126fc:	88da      	ldrh	r2, [r3, #6]
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	79fa      	ldrb	r2, [r7, #7]
 8012706:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	2200      	movs	r2, #0
 801270c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	2200      	movs	r2, #0
 8012712:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	2200      	movs	r2, #0
 8012718:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	3330      	adds	r3, #48	@ 0x30
 801271e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012722:	2100      	movs	r1, #0
 8012724:	4618      	mov	r0, r3
 8012726:	f7fe fa79 	bl	8010c1c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801272a:	79fb      	ldrb	r3, [r7, #7]
 801272c:	f003 0320 	and.w	r3, r3, #32
 8012730:	2b00      	cmp	r3, #0
 8012732:	d060      	beq.n	80127f6 <f_open+0x35a>
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	68db      	ldr	r3, [r3, #12]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d05c      	beq.n	80127f6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	68da      	ldr	r2, [r3, #12]
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012744:	693b      	ldr	r3, [r7, #16]
 8012746:	895b      	ldrh	r3, [r3, #10]
 8012748:	025b      	lsls	r3, r3, #9
 801274a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	689b      	ldr	r3, [r3, #8]
 8012750:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	68db      	ldr	r3, [r3, #12]
 8012756:	657b      	str	r3, [r7, #84]	@ 0x54
 8012758:	e016      	b.n	8012788 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801275e:	4618      	mov	r0, r3
 8012760:	f7fe fd25 	bl	80111ae <get_fat>
 8012764:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012766:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012768:	2b01      	cmp	r3, #1
 801276a:	d802      	bhi.n	8012772 <f_open+0x2d6>
 801276c:	2302      	movs	r3, #2
 801276e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012772:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012778:	d102      	bne.n	8012780 <f_open+0x2e4>
 801277a:	2301      	movs	r3, #1
 801277c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012780:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012784:	1ad3      	subs	r3, r2, r3
 8012786:	657b      	str	r3, [r7, #84]	@ 0x54
 8012788:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801278c:	2b00      	cmp	r3, #0
 801278e:	d103      	bne.n	8012798 <f_open+0x2fc>
 8012790:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012794:	429a      	cmp	r2, r3
 8012796:	d8e0      	bhi.n	801275a <f_open+0x2be>
				}
				fp->clust = clst;
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801279c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801279e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d127      	bne.n	80127f6 <f_open+0x35a>
 80127a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80127a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d022      	beq.n	80127f6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80127b0:	693b      	ldr	r3, [r7, #16]
 80127b2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80127b4:	4618      	mov	r0, r3
 80127b6:	f7fe fcdb 	bl	8011170 <clust2sect>
 80127ba:	6478      	str	r0, [r7, #68]	@ 0x44
 80127bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d103      	bne.n	80127ca <f_open+0x32e>
						res = FR_INT_ERR;
 80127c2:	2302      	movs	r3, #2
 80127c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80127c8:	e015      	b.n	80127f6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80127ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80127cc:	0a5a      	lsrs	r2, r3, #9
 80127ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80127d0:	441a      	add	r2, r3
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80127d6:	693b      	ldr	r3, [r7, #16]
 80127d8:	7858      	ldrb	r0, [r3, #1]
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	6a1a      	ldr	r2, [r3, #32]
 80127e4:	2301      	movs	r3, #1
 80127e6:	f7fe f917 	bl	8010a18 <disk_read>
 80127ea:	4603      	mov	r3, r0
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d002      	beq.n	80127f6 <f_open+0x35a>
 80127f0:	2301      	movs	r3, #1
 80127f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80127f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d002      	beq.n	8012804 <f_open+0x368>
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	2200      	movs	r2, #0
 8012802:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012804:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8012808:	4618      	mov	r0, r3
 801280a:	3760      	adds	r7, #96	@ 0x60
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}

08012810 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b08c      	sub	sp, #48	@ 0x30
 8012814:	af00      	add	r7, sp, #0
 8012816:	60f8      	str	r0, [r7, #12]
 8012818:	60b9      	str	r1, [r7, #8]
 801281a:	607a      	str	r2, [r7, #4]
 801281c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	2200      	movs	r2, #0
 8012826:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	f107 0210 	add.w	r2, r7, #16
 801282e:	4611      	mov	r1, r2
 8012830:	4618      	mov	r0, r3
 8012832:	f7ff fdb7 	bl	80123a4 <validate>
 8012836:	4603      	mov	r3, r0
 8012838:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801283c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012840:	2b00      	cmp	r3, #0
 8012842:	d107      	bne.n	8012854 <f_write+0x44>
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	7d5b      	ldrb	r3, [r3, #21]
 8012848:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801284c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012850:	2b00      	cmp	r3, #0
 8012852:	d002      	beq.n	801285a <f_write+0x4a>
 8012854:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012858:	e14b      	b.n	8012af2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	7d1b      	ldrb	r3, [r3, #20]
 801285e:	f003 0302 	and.w	r3, r3, #2
 8012862:	2b00      	cmp	r3, #0
 8012864:	d101      	bne.n	801286a <f_write+0x5a>
 8012866:	2307      	movs	r3, #7
 8012868:	e143      	b.n	8012af2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	699a      	ldr	r2, [r3, #24]
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	441a      	add	r2, r3
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	699b      	ldr	r3, [r3, #24]
 8012876:	429a      	cmp	r2, r3
 8012878:	f080 812d 	bcs.w	8012ad6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	699b      	ldr	r3, [r3, #24]
 8012880:	43db      	mvns	r3, r3
 8012882:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012884:	e127      	b.n	8012ad6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	699b      	ldr	r3, [r3, #24]
 801288a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801288e:	2b00      	cmp	r3, #0
 8012890:	f040 80e3 	bne.w	8012a5a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	699b      	ldr	r3, [r3, #24]
 8012898:	0a5b      	lsrs	r3, r3, #9
 801289a:	693a      	ldr	r2, [r7, #16]
 801289c:	8952      	ldrh	r2, [r2, #10]
 801289e:	3a01      	subs	r2, #1
 80128a0:	4013      	ands	r3, r2
 80128a2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80128a4:	69bb      	ldr	r3, [r7, #24]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d143      	bne.n	8012932 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	699b      	ldr	r3, [r3, #24]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d10c      	bne.n	80128cc <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	689b      	ldr	r3, [r3, #8]
 80128b6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80128b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d11a      	bne.n	80128f4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	2100      	movs	r1, #0
 80128c2:	4618      	mov	r0, r3
 80128c4:	f7fe fe69 	bl	801159a <create_chain>
 80128c8:	62b8      	str	r0, [r7, #40]	@ 0x28
 80128ca:	e013      	b.n	80128f4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d007      	beq.n	80128e4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	699b      	ldr	r3, [r3, #24]
 80128d8:	4619      	mov	r1, r3
 80128da:	68f8      	ldr	r0, [r7, #12]
 80128dc:	f7fe fef5 	bl	80116ca <clmt_clust>
 80128e0:	62b8      	str	r0, [r7, #40]	@ 0x28
 80128e2:	e007      	b.n	80128f4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80128e4:	68fa      	ldr	r2, [r7, #12]
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	69db      	ldr	r3, [r3, #28]
 80128ea:	4619      	mov	r1, r3
 80128ec:	4610      	mov	r0, r2
 80128ee:	f7fe fe54 	bl	801159a <create_chain>
 80128f2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80128f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	f000 80f2 	beq.w	8012ae0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80128fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128fe:	2b01      	cmp	r3, #1
 8012900:	d104      	bne.n	801290c <f_write+0xfc>
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	2202      	movs	r2, #2
 8012906:	755a      	strb	r2, [r3, #21]
 8012908:	2302      	movs	r3, #2
 801290a:	e0f2      	b.n	8012af2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801290c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801290e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012912:	d104      	bne.n	801291e <f_write+0x10e>
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	2201      	movs	r2, #1
 8012918:	755a      	strb	r2, [r3, #21]
 801291a:	2301      	movs	r3, #1
 801291c:	e0e9      	b.n	8012af2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012922:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	689b      	ldr	r3, [r3, #8]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d102      	bne.n	8012932 <f_write+0x122>
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012930:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	7d1b      	ldrb	r3, [r3, #20]
 8012936:	b25b      	sxtb	r3, r3
 8012938:	2b00      	cmp	r3, #0
 801293a:	da18      	bge.n	801296e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801293c:	693b      	ldr	r3, [r7, #16]
 801293e:	7858      	ldrb	r0, [r3, #1]
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	6a1a      	ldr	r2, [r3, #32]
 801294a:	2301      	movs	r3, #1
 801294c:	f7fe f884 	bl	8010a58 <disk_write>
 8012950:	4603      	mov	r3, r0
 8012952:	2b00      	cmp	r3, #0
 8012954:	d004      	beq.n	8012960 <f_write+0x150>
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	2201      	movs	r2, #1
 801295a:	755a      	strb	r2, [r3, #21]
 801295c:	2301      	movs	r3, #1
 801295e:	e0c8      	b.n	8012af2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	7d1b      	ldrb	r3, [r3, #20]
 8012964:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012968:	b2da      	uxtb	r2, r3
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801296e:	693a      	ldr	r2, [r7, #16]
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	69db      	ldr	r3, [r3, #28]
 8012974:	4619      	mov	r1, r3
 8012976:	4610      	mov	r0, r2
 8012978:	f7fe fbfa 	bl	8011170 <clust2sect>
 801297c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801297e:	697b      	ldr	r3, [r7, #20]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d104      	bne.n	801298e <f_write+0x17e>
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	2202      	movs	r2, #2
 8012988:	755a      	strb	r2, [r3, #21]
 801298a:	2302      	movs	r3, #2
 801298c:	e0b1      	b.n	8012af2 <f_write+0x2e2>
			sect += csect;
 801298e:	697a      	ldr	r2, [r7, #20]
 8012990:	69bb      	ldr	r3, [r7, #24]
 8012992:	4413      	add	r3, r2
 8012994:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	0a5b      	lsrs	r3, r3, #9
 801299a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801299c:	6a3b      	ldr	r3, [r7, #32]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d03c      	beq.n	8012a1c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80129a2:	69ba      	ldr	r2, [r7, #24]
 80129a4:	6a3b      	ldr	r3, [r7, #32]
 80129a6:	4413      	add	r3, r2
 80129a8:	693a      	ldr	r2, [r7, #16]
 80129aa:	8952      	ldrh	r2, [r2, #10]
 80129ac:	4293      	cmp	r3, r2
 80129ae:	d905      	bls.n	80129bc <f_write+0x1ac>
					cc = fs->csize - csect;
 80129b0:	693b      	ldr	r3, [r7, #16]
 80129b2:	895b      	ldrh	r3, [r3, #10]
 80129b4:	461a      	mov	r2, r3
 80129b6:	69bb      	ldr	r3, [r7, #24]
 80129b8:	1ad3      	subs	r3, r2, r3
 80129ba:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80129bc:	693b      	ldr	r3, [r7, #16]
 80129be:	7858      	ldrb	r0, [r3, #1]
 80129c0:	6a3b      	ldr	r3, [r7, #32]
 80129c2:	697a      	ldr	r2, [r7, #20]
 80129c4:	69f9      	ldr	r1, [r7, #28]
 80129c6:	f7fe f847 	bl	8010a58 <disk_write>
 80129ca:	4603      	mov	r3, r0
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d004      	beq.n	80129da <f_write+0x1ca>
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	2201      	movs	r2, #1
 80129d4:	755a      	strb	r2, [r3, #21]
 80129d6:	2301      	movs	r3, #1
 80129d8:	e08b      	b.n	8012af2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	6a1a      	ldr	r2, [r3, #32]
 80129de:	697b      	ldr	r3, [r7, #20]
 80129e0:	1ad3      	subs	r3, r2, r3
 80129e2:	6a3a      	ldr	r2, [r7, #32]
 80129e4:	429a      	cmp	r2, r3
 80129e6:	d915      	bls.n	8012a14 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	6a1a      	ldr	r2, [r3, #32]
 80129f2:	697b      	ldr	r3, [r7, #20]
 80129f4:	1ad3      	subs	r3, r2, r3
 80129f6:	025b      	lsls	r3, r3, #9
 80129f8:	69fa      	ldr	r2, [r7, #28]
 80129fa:	4413      	add	r3, r2
 80129fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012a00:	4619      	mov	r1, r3
 8012a02:	f7fe f8ea 	bl	8010bda <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	7d1b      	ldrb	r3, [r3, #20]
 8012a0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012a0e:	b2da      	uxtb	r2, r3
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012a14:	6a3b      	ldr	r3, [r7, #32]
 8012a16:	025b      	lsls	r3, r3, #9
 8012a18:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8012a1a:	e03f      	b.n	8012a9c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	6a1b      	ldr	r3, [r3, #32]
 8012a20:	697a      	ldr	r2, [r7, #20]
 8012a22:	429a      	cmp	r2, r3
 8012a24:	d016      	beq.n	8012a54 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	699a      	ldr	r2, [r3, #24]
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012a2e:	429a      	cmp	r2, r3
 8012a30:	d210      	bcs.n	8012a54 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012a32:	693b      	ldr	r3, [r7, #16]
 8012a34:	7858      	ldrb	r0, [r3, #1]
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012a3c:	2301      	movs	r3, #1
 8012a3e:	697a      	ldr	r2, [r7, #20]
 8012a40:	f7fd ffea 	bl	8010a18 <disk_read>
 8012a44:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d004      	beq.n	8012a54 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	2201      	movs	r2, #1
 8012a4e:	755a      	strb	r2, [r3, #21]
 8012a50:	2301      	movs	r3, #1
 8012a52:	e04e      	b.n	8012af2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	697a      	ldr	r2, [r7, #20]
 8012a58:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	699b      	ldr	r3, [r3, #24]
 8012a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a62:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8012a66:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8012a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	d901      	bls.n	8012a74 <f_write+0x264>
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	699b      	ldr	r3, [r3, #24]
 8012a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a82:	4413      	add	r3, r2
 8012a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012a86:	69f9      	ldr	r1, [r7, #28]
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f7fe f8a6 	bl	8010bda <mem_cpy>
		fp->flag |= FA_DIRTY;
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	7d1b      	ldrb	r3, [r3, #20]
 8012a92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8012a96:	b2da      	uxtb	r2, r3
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012a9c:	69fa      	ldr	r2, [r7, #28]
 8012a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012aa0:	4413      	add	r3, r2
 8012aa2:	61fb      	str	r3, [r7, #28]
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	699a      	ldr	r2, [r3, #24]
 8012aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012aaa:	441a      	add	r2, r3
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	619a      	str	r2, [r3, #24]
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	68da      	ldr	r2, [r3, #12]
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	699b      	ldr	r3, [r3, #24]
 8012ab8:	429a      	cmp	r2, r3
 8012aba:	bf38      	it	cc
 8012abc:	461a      	movcc	r2, r3
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	60da      	str	r2, [r3, #12]
 8012ac2:	683b      	ldr	r3, [r7, #0]
 8012ac4:	681a      	ldr	r2, [r3, #0]
 8012ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ac8:	441a      	add	r2, r3
 8012aca:	683b      	ldr	r3, [r7, #0]
 8012acc:	601a      	str	r2, [r3, #0]
 8012ace:	687a      	ldr	r2, [r7, #4]
 8012ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ad2:	1ad3      	subs	r3, r2, r3
 8012ad4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	f47f aed4 	bne.w	8012886 <f_write+0x76>
 8012ade:	e000      	b.n	8012ae2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012ae0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	7d1b      	ldrb	r3, [r3, #20]
 8012ae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012aea:	b2da      	uxtb	r2, r3
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012af0:	2300      	movs	r3, #0
}
 8012af2:	4618      	mov	r0, r3
 8012af4:	3730      	adds	r7, #48	@ 0x30
 8012af6:	46bd      	mov	sp, r7
 8012af8:	bd80      	pop	{r7, pc}

08012afa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012afa:	b580      	push	{r7, lr}
 8012afc:	b086      	sub	sp, #24
 8012afe:	af00      	add	r7, sp, #0
 8012b00:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f107 0208 	add.w	r2, r7, #8
 8012b08:	4611      	mov	r1, r2
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	f7ff fc4a 	bl	80123a4 <validate>
 8012b10:	4603      	mov	r3, r0
 8012b12:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012b14:	7dfb      	ldrb	r3, [r7, #23]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d168      	bne.n	8012bec <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	7d1b      	ldrb	r3, [r3, #20]
 8012b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d062      	beq.n	8012bec <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	7d1b      	ldrb	r3, [r3, #20]
 8012b2a:	b25b      	sxtb	r3, r3
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	da15      	bge.n	8012b5c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012b30:	68bb      	ldr	r3, [r7, #8]
 8012b32:	7858      	ldrb	r0, [r3, #1]
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	6a1a      	ldr	r2, [r3, #32]
 8012b3e:	2301      	movs	r3, #1
 8012b40:	f7fd ff8a 	bl	8010a58 <disk_write>
 8012b44:	4603      	mov	r3, r0
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d001      	beq.n	8012b4e <f_sync+0x54>
 8012b4a:	2301      	movs	r3, #1
 8012b4c:	e04f      	b.n	8012bee <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	7d1b      	ldrb	r3, [r3, #20]
 8012b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012b56:	b2da      	uxtb	r2, r3
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012b5c:	f7fd fc3c 	bl	80103d8 <get_fattime>
 8012b60:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012b62:	68ba      	ldr	r2, [r7, #8]
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b68:	4619      	mov	r1, r3
 8012b6a:	4610      	mov	r0, r2
 8012b6c:	f7fe fa64 	bl	8011038 <move_window>
 8012b70:	4603      	mov	r3, r0
 8012b72:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012b74:	7dfb      	ldrb	r3, [r7, #23]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d138      	bne.n	8012bec <f_sync+0xf2>
					dir = fp->dir_ptr;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b7e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	330b      	adds	r3, #11
 8012b84:	781a      	ldrb	r2, [r3, #0]
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	330b      	adds	r3, #11
 8012b8a:	f042 0220 	orr.w	r2, r2, #32
 8012b8e:	b2d2      	uxtb	r2, r2
 8012b90:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	6818      	ldr	r0, [r3, #0]
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	689b      	ldr	r3, [r3, #8]
 8012b9a:	461a      	mov	r2, r3
 8012b9c:	68f9      	ldr	r1, [r7, #12]
 8012b9e:	f7fe ff6e 	bl	8011a7e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	f103 021c 	add.w	r2, r3, #28
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	68db      	ldr	r3, [r3, #12]
 8012bac:	4619      	mov	r1, r3
 8012bae:	4610      	mov	r0, r2
 8012bb0:	f7fd ffe7 	bl	8010b82 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	3316      	adds	r3, #22
 8012bb8:	6939      	ldr	r1, [r7, #16]
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7fd ffe1 	bl	8010b82 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	3312      	adds	r3, #18
 8012bc4:	2100      	movs	r1, #0
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7fd ffc0 	bl	8010b4c <st_word>
					fs->wflag = 1;
 8012bcc:	68bb      	ldr	r3, [r7, #8]
 8012bce:	2201      	movs	r2, #1
 8012bd0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012bd2:	68bb      	ldr	r3, [r7, #8]
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7fe fa5d 	bl	8011094 <sync_fs>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	7d1b      	ldrb	r3, [r3, #20]
 8012be2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012be6:	b2da      	uxtb	r2, r3
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8012bee:	4618      	mov	r0, r3
 8012bf0:	3718      	adds	r7, #24
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	bd80      	pop	{r7, pc}

08012bf6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012bf6:	b580      	push	{r7, lr}
 8012bf8:	b084      	sub	sp, #16
 8012bfa:	af00      	add	r7, sp, #0
 8012bfc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012bfe:	6878      	ldr	r0, [r7, #4]
 8012c00:	f7ff ff7b 	bl	8012afa <f_sync>
 8012c04:	4603      	mov	r3, r0
 8012c06:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012c08:	7bfb      	ldrb	r3, [r7, #15]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d118      	bne.n	8012c40 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	f107 0208 	add.w	r2, r7, #8
 8012c14:	4611      	mov	r1, r2
 8012c16:	4618      	mov	r0, r3
 8012c18:	f7ff fbc4 	bl	80123a4 <validate>
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012c20:	7bfb      	ldrb	r3, [r7, #15]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d10c      	bne.n	8012c40 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	691b      	ldr	r3, [r3, #16]
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f7fe f960 	bl	8010ef0 <dec_lock>
 8012c30:	4603      	mov	r3, r0
 8012c32:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012c34:	7bfb      	ldrb	r3, [r7, #15]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d102      	bne.n	8012c40 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	2200      	movs	r2, #0
 8012c3e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c42:	4618      	mov	r0, r3
 8012c44:	3710      	adds	r7, #16
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}

08012c4a <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8012c4a:	b580      	push	{r7, lr}
 8012c4c:	b096      	sub	sp, #88	@ 0x58
 8012c4e:	af00      	add	r7, sp, #0
 8012c50:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8012c52:	f107 0108 	add.w	r1, r7, #8
 8012c56:	1d3b      	adds	r3, r7, #4
 8012c58:	2202      	movs	r2, #2
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f7ff f956 	bl	8011f0c <find_volume>
 8012c60:	4603      	mov	r3, r0
 8012c62:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 8012c66:	68bb      	ldr	r3, [r7, #8]
 8012c68:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8012c6a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	f040 80ec 	bne.w	8012e4c <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8012c74:	687a      	ldr	r2, [r7, #4]
 8012c76:	f107 030c 	add.w	r3, r7, #12
 8012c7a:	4611      	mov	r1, r2
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f7ff f839 	bl	8011cf4 <follow_path>
 8012c82:	4603      	mov	r3, r0
 8012c84:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8012c88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d102      	bne.n	8012c96 <f_mkdir+0x4c>
 8012c90:	2308      	movs	r3, #8
 8012c92:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8012c96:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012c9a:	2b04      	cmp	r3, #4
 8012c9c:	f040 80d6 	bne.w	8012e4c <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8012ca0:	f107 030c 	add.w	r3, r7, #12
 8012ca4:	2100      	movs	r1, #0
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	f7fe fc77 	bl	801159a <create_chain>
 8012cac:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8012cae:	68bb      	ldr	r3, [r7, #8]
 8012cb0:	895b      	ldrh	r3, [r3, #10]
 8012cb2:	025b      	lsls	r3, r3, #9
 8012cb4:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8012cbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d102      	bne.n	8012cc8 <f_mkdir+0x7e>
 8012cc2:	2307      	movs	r3, #7
 8012cc4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8012cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012cca:	2b01      	cmp	r3, #1
 8012ccc:	d102      	bne.n	8012cd4 <f_mkdir+0x8a>
 8012cce:	2302      	movs	r3, #2
 8012cd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012cd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cda:	d102      	bne.n	8012ce2 <f_mkdir+0x98>
 8012cdc:	2301      	movs	r3, #1
 8012cde:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8012ce2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d106      	bne.n	8012cf8 <f_mkdir+0xae>
 8012cea:	68bb      	ldr	r3, [r7, #8]
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7fe f95f 	bl	8010fb0 <sync_window>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 8012cf8:	f7fd fb6e 	bl	80103d8 <get_fattime>
 8012cfc:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8012cfe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d16a      	bne.n	8012ddc <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8012d06:	68bb      	ldr	r3, [r7, #8]
 8012d08:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f7fe fa30 	bl	8011170 <clust2sect>
 8012d10:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 8012d12:	68bb      	ldr	r3, [r7, #8]
 8012d14:	3330      	adds	r3, #48	@ 0x30
 8012d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 8012d18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012d1c:	2100      	movs	r1, #0
 8012d1e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012d20:	f7fd ff7c 	bl	8010c1c <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8012d24:	220b      	movs	r2, #11
 8012d26:	2120      	movs	r1, #32
 8012d28:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012d2a:	f7fd ff77 	bl	8010c1c <mem_set>
					dir[DIR_Name] = '.';
 8012d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d30:	222e      	movs	r2, #46	@ 0x2e
 8012d32:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8012d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d36:	330b      	adds	r3, #11
 8012d38:	2210      	movs	r2, #16
 8012d3a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8012d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d3e:	3316      	adds	r3, #22
 8012d40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012d42:	4618      	mov	r0, r3
 8012d44:	f7fd ff1d 	bl	8010b82 <st_dword>
					st_clust(fs, dir, dcl);
 8012d48:	68bb      	ldr	r3, [r7, #8]
 8012d4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012d4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012d4e:	4618      	mov	r0, r3
 8012d50:	f7fe fe95 	bl	8011a7e <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8012d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d56:	3320      	adds	r3, #32
 8012d58:	2220      	movs	r2, #32
 8012d5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f7fd ff3c 	bl	8010bda <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8012d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d64:	3321      	adds	r3, #33	@ 0x21
 8012d66:	222e      	movs	r2, #46	@ 0x2e
 8012d68:	701a      	strb	r2, [r3, #0]
 8012d6a:	697b      	ldr	r3, [r7, #20]
 8012d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8012d6e:	68bb      	ldr	r3, [r7, #8]
 8012d70:	781b      	ldrb	r3, [r3, #0]
 8012d72:	2b03      	cmp	r3, #3
 8012d74:	d106      	bne.n	8012d84 <f_mkdir+0x13a>
 8012d76:	68bb      	ldr	r3, [r7, #8]
 8012d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012d7c:	429a      	cmp	r2, r3
 8012d7e:	d101      	bne.n	8012d84 <f_mkdir+0x13a>
 8012d80:	2300      	movs	r3, #0
 8012d82:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8012d84:	68b8      	ldr	r0, [r7, #8]
 8012d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d88:	3320      	adds	r3, #32
 8012d8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012d8c:	4619      	mov	r1, r3
 8012d8e:	f7fe fe76 	bl	8011a7e <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012d92:	68bb      	ldr	r3, [r7, #8]
 8012d94:	895b      	ldrh	r3, [r3, #10]
 8012d96:	653b      	str	r3, [r7, #80]	@ 0x50
 8012d98:	e01b      	b.n	8012dd2 <f_mkdir+0x188>
					fs->winsect = dsc++;
 8012d9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d9c:	1c5a      	adds	r2, r3, #1
 8012d9e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8012da0:	68ba      	ldr	r2, [r7, #8]
 8012da2:	62d3      	str	r3, [r2, #44]	@ 0x2c
					fs->wflag = 1;
 8012da4:	68bb      	ldr	r3, [r7, #8]
 8012da6:	2201      	movs	r2, #1
 8012da8:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8012daa:	68bb      	ldr	r3, [r7, #8]
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7fe f8ff 	bl	8010fb0 <sync_window>
 8012db2:	4603      	mov	r3, r0
 8012db4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 8012db8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d10c      	bne.n	8012dda <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8012dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012dc4:	2100      	movs	r1, #0
 8012dc6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012dc8:	f7fd ff28 	bl	8010c1c <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012dcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012dce:	3b01      	subs	r3, #1
 8012dd0:	653b      	str	r3, [r7, #80]	@ 0x50
 8012dd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d1e0      	bne.n	8012d9a <f_mkdir+0x150>
 8012dd8:	e000      	b.n	8012ddc <f_mkdir+0x192>
					if (res != FR_OK) break;
 8012dda:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8012ddc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d107      	bne.n	8012df4 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8012de4:	f107 030c 	add.w	r3, r7, #12
 8012de8:	4618      	mov	r0, r3
 8012dea:	f7fe febd 	bl	8011b68 <dir_register>
 8012dee:	4603      	mov	r3, r0
 8012df0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 8012df4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d120      	bne.n	8012e3e <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8012dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8012e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e02:	3316      	adds	r3, #22
 8012e04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012e06:	4618      	mov	r0, r3
 8012e08:	f7fd febb 	bl	8010b82 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8012e0c:	68bb      	ldr	r3, [r7, #8]
 8012e0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012e10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7fe fe33 	bl	8011a7e <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8012e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e1a:	330b      	adds	r3, #11
 8012e1c:	2210      	movs	r2, #16
 8012e1e:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	2201      	movs	r2, #1
 8012e24:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8012e26:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d10e      	bne.n	8012e4c <f_mkdir+0x202>
					res = sync_fs(fs);
 8012e2e:	68bb      	ldr	r3, [r7, #8]
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7fe f92f 	bl	8011094 <sync_fs>
 8012e36:	4603      	mov	r3, r0
 8012e38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8012e3c:	e006      	b.n	8012e4c <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8012e3e:	f107 030c 	add.w	r3, r7, #12
 8012e42:	2200      	movs	r2, #0
 8012e44:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012e46:	4618      	mov	r0, r3
 8012e48:	f7fe fb42 	bl	80114d0 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8012e4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8012e50:	4618      	mov	r0, r3
 8012e52:	3758      	adds	r7, #88	@ 0x58
 8012e54:	46bd      	mov	sp, r7
 8012e56:	bd80      	pop	{r7, pc}

08012e58 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8012e58:	b590      	push	{r4, r7, lr}
 8012e5a:	b09d      	sub	sp, #116	@ 0x74
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	60f8      	str	r0, [r7, #12]
 8012e60:	607a      	str	r2, [r7, #4]
 8012e62:	603b      	str	r3, [r7, #0]
 8012e64:	460b      	mov	r3, r1
 8012e66:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8012e68:	2301      	movs	r3, #1
 8012e6a:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8012e6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012e70:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8012e72:	f107 030c 	add.w	r3, r7, #12
 8012e76:	4618      	mov	r0, r3
 8012e78:	f7fe ffad 	bl	8011dd6 <get_ldnumber>
 8012e7c:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	da02      	bge.n	8012e8a <f_mkfs+0x32>
 8012e84:	230b      	movs	r3, #11
 8012e86:	f000 bc0d 	b.w	80136a4 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8012e8a:	4a94      	ldr	r2, [pc, #592]	@ (80130dc <f_mkfs+0x284>)
 8012e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d005      	beq.n	8012ea2 <f_mkfs+0x4a>
 8012e96:	4a91      	ldr	r2, [pc, #580]	@ (80130dc <f_mkfs+0x284>)
 8012e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8012ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ea4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8012eae:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	f7fd fd8a 	bl	80109cc <disk_initialize>
 8012eb8:	4603      	mov	r3, r0
 8012eba:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8012ebe:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8012ec2:	f003 0301 	and.w	r3, r3, #1
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d001      	beq.n	8012ece <f_mkfs+0x76>
 8012eca:	2303      	movs	r3, #3
 8012ecc:	e3ea      	b.n	80136a4 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8012ece:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8012ed2:	f003 0304 	and.w	r3, r3, #4
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d001      	beq.n	8012ede <f_mkfs+0x86>
 8012eda:	230a      	movs	r3, #10
 8012edc:	e3e2      	b.n	80136a4 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8012ede:	f107 0214 	add.w	r2, r7, #20
 8012ee2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8012ee6:	2103      	movs	r1, #3
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7fd fdd5 	bl	8010a98 <disk_ioctl>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d10c      	bne.n	8012f0e <f_mkfs+0xb6>
 8012ef4:	697b      	ldr	r3, [r7, #20]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d009      	beq.n	8012f0e <f_mkfs+0xb6>
 8012efa:	697b      	ldr	r3, [r7, #20]
 8012efc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012f00:	d805      	bhi.n	8012f0e <f_mkfs+0xb6>
 8012f02:	697b      	ldr	r3, [r7, #20]
 8012f04:	1e5a      	subs	r2, r3, #1
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	4013      	ands	r3, r2
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d001      	beq.n	8012f12 <f_mkfs+0xba>
 8012f0e:	2301      	movs	r3, #1
 8012f10:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8012f12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012f16:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d003      	beq.n	8012f26 <f_mkfs+0xce>
 8012f1e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012f20:	687a      	ldr	r2, [r7, #4]
 8012f22:	429a      	cmp	r2, r3
 8012f24:	d309      	bcc.n	8012f3a <f_mkfs+0xe2>
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012f2c:	d805      	bhi.n	8012f3a <f_mkfs+0xe2>
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	1e5a      	subs	r2, r3, #1
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	4013      	ands	r3, r2
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d001      	beq.n	8012f3e <f_mkfs+0xe6>
 8012f3a:	2313      	movs	r3, #19
 8012f3c:	e3b2      	b.n	80136a4 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8012f3e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012f40:	687a      	ldr	r2, [r7, #4]
 8012f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f46:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8012f4c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012f4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8012f58:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8012f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f5c:	fb02 f303 	mul.w	r3, r2, r3
 8012f60:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8012f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d101      	bne.n	8012f6c <f_mkfs+0x114>
 8012f68:	230e      	movs	r3, #14
 8012f6a:	e39b      	b.n	80136a4 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8012f6c:	f107 0210 	add.w	r2, r7, #16
 8012f70:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8012f74:	2101      	movs	r1, #1
 8012f76:	4618      	mov	r0, r3
 8012f78:	f7fd fd8e 	bl	8010a98 <disk_ioctl>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d001      	beq.n	8012f86 <f_mkfs+0x12e>
 8012f82:	2301      	movs	r3, #1
 8012f84:	e38e      	b.n	80136a4 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8012f86:	7afb      	ldrb	r3, [r7, #11]
 8012f88:	f003 0308 	and.w	r3, r3, #8
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d001      	beq.n	8012f94 <f_mkfs+0x13c>
 8012f90:	2300      	movs	r3, #0
 8012f92:	e000      	b.n	8012f96 <f_mkfs+0x13e>
 8012f94:	233f      	movs	r3, #63	@ 0x3f
 8012f96:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8012f98:	693b      	ldr	r3, [r7, #16]
 8012f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012f9c:	429a      	cmp	r2, r3
 8012f9e:	d901      	bls.n	8012fa4 <f_mkfs+0x14c>
 8012fa0:	230e      	movs	r3, #14
 8012fa2:	e37f      	b.n	80136a4 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8012fa4:	693a      	ldr	r2, [r7, #16]
 8012fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fa8:	1ad3      	subs	r3, r2, r3
 8012faa:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8012fac:	693b      	ldr	r3, [r7, #16]
 8012fae:	2b7f      	cmp	r3, #127	@ 0x7f
 8012fb0:	d801      	bhi.n	8012fb6 <f_mkfs+0x15e>
 8012fb2:	230e      	movs	r3, #14
 8012fb4:	e376      	b.n	80136a4 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	2b80      	cmp	r3, #128	@ 0x80
 8012fba:	d901      	bls.n	8012fc0 <f_mkfs+0x168>
 8012fbc:	2313      	movs	r3, #19
 8012fbe:	e371      	b.n	80136a4 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8012fc0:	7afb      	ldrb	r3, [r7, #11]
 8012fc2:	f003 0302 	and.w	r3, r3, #2
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d00d      	beq.n	8012fe6 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8012fca:	7afb      	ldrb	r3, [r7, #11]
 8012fcc:	f003 0307 	and.w	r3, r3, #7
 8012fd0:	2b02      	cmp	r3, #2
 8012fd2:	d004      	beq.n	8012fde <f_mkfs+0x186>
 8012fd4:	7afb      	ldrb	r3, [r7, #11]
 8012fd6:	f003 0301 	and.w	r3, r3, #1
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d103      	bne.n	8012fe6 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8012fde:	2303      	movs	r3, #3
 8012fe0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8012fe4:	e009      	b.n	8012ffa <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8012fe6:	7afb      	ldrb	r3, [r7, #11]
 8012fe8:	f003 0301 	and.w	r3, r3, #1
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d101      	bne.n	8012ff4 <f_mkfs+0x19c>
 8012ff0:	2313      	movs	r3, #19
 8012ff2:	e357      	b.n	80136a4 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8012ff4:	2302      	movs	r3, #2
 8012ff6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8012ffe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013002:	2b03      	cmp	r3, #3
 8013004:	d13c      	bne.n	8013080 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8013006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013008:	2b00      	cmp	r3, #0
 801300a:	d11b      	bne.n	8013044 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 801300c:	693b      	ldr	r3, [r7, #16]
 801300e:	0c5b      	lsrs	r3, r3, #17
 8013010:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8013012:	2300      	movs	r3, #0
 8013014:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013016:	2301      	movs	r3, #1
 8013018:	653b      	str	r3, [r7, #80]	@ 0x50
 801301a:	e005      	b.n	8013028 <f_mkfs+0x1d0>
 801301c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801301e:	3301      	adds	r3, #1
 8013020:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013022:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013024:	005b      	lsls	r3, r3, #1
 8013026:	653b      	str	r3, [r7, #80]	@ 0x50
 8013028:	4a2d      	ldr	r2, [pc, #180]	@ (80130e0 <f_mkfs+0x288>)
 801302a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801302c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d007      	beq.n	8013044 <f_mkfs+0x1ec>
 8013034:	4a2a      	ldr	r2, [pc, #168]	@ (80130e0 <f_mkfs+0x288>)
 8013036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801303c:	461a      	mov	r2, r3
 801303e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013040:	4293      	cmp	r3, r2
 8013042:	d2eb      	bcs.n	801301c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8013044:	693a      	ldr	r2, [r7, #16]
 8013046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013048:	fbb2 f3f3 	udiv	r3, r2, r3
 801304c:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 801304e:	6a3b      	ldr	r3, [r7, #32]
 8013050:	3302      	adds	r3, #2
 8013052:	009a      	lsls	r2, r3, #2
 8013054:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013056:	4413      	add	r3, r2
 8013058:	1e5a      	subs	r2, r3, #1
 801305a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801305c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013060:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8013062:	2320      	movs	r3, #32
 8013064:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 8013066:	2300      	movs	r3, #0
 8013068:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 801306a:	6a3b      	ldr	r3, [r7, #32]
 801306c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8013070:	4293      	cmp	r3, r2
 8013072:	d903      	bls.n	801307c <f_mkfs+0x224>
 8013074:	6a3b      	ldr	r3, [r7, #32]
 8013076:	4a1b      	ldr	r2, [pc, #108]	@ (80130e4 <f_mkfs+0x28c>)
 8013078:	4293      	cmp	r3, r2
 801307a:	d952      	bls.n	8013122 <f_mkfs+0x2ca>
 801307c:	230e      	movs	r3, #14
 801307e:	e311      	b.n	80136a4 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8013080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013082:	2b00      	cmp	r3, #0
 8013084:	d11b      	bne.n	80130be <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8013086:	693b      	ldr	r3, [r7, #16]
 8013088:	0b1b      	lsrs	r3, r3, #12
 801308a:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 801308c:	2300      	movs	r3, #0
 801308e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013090:	2301      	movs	r3, #1
 8013092:	653b      	str	r3, [r7, #80]	@ 0x50
 8013094:	e005      	b.n	80130a2 <f_mkfs+0x24a>
 8013096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013098:	3301      	adds	r3, #1
 801309a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801309c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801309e:	005b      	lsls	r3, r3, #1
 80130a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80130a2:	4a11      	ldr	r2, [pc, #68]	@ (80130e8 <f_mkfs+0x290>)
 80130a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80130a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d007      	beq.n	80130be <f_mkfs+0x266>
 80130ae:	4a0e      	ldr	r2, [pc, #56]	@ (80130e8 <f_mkfs+0x290>)
 80130b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80130b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80130b6:	461a      	mov	r2, r3
 80130b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80130ba:	4293      	cmp	r3, r2
 80130bc:	d2eb      	bcs.n	8013096 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 80130be:	693a      	ldr	r2, [r7, #16]
 80130c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80130c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80130c6:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80130c8:	6a3b      	ldr	r3, [r7, #32]
 80130ca:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80130ce:	4293      	cmp	r3, r2
 80130d0:	d90c      	bls.n	80130ec <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80130d2:	6a3b      	ldr	r3, [r7, #32]
 80130d4:	3302      	adds	r3, #2
 80130d6:	005b      	lsls	r3, r3, #1
 80130d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80130da:	e012      	b.n	8013102 <f_mkfs+0x2aa>
 80130dc:	200019c0 	.word	0x200019c0
 80130e0:	08019efc 	.word	0x08019efc
 80130e4:	0ffffff5 	.word	0x0ffffff5
 80130e8:	08019f0c 	.word	0x08019f0c
				} else {
					fmt = FS_FAT12;
 80130ec:	2301      	movs	r3, #1
 80130ee:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80130f2:	6a3a      	ldr	r2, [r7, #32]
 80130f4:	4613      	mov	r3, r2
 80130f6:	005b      	lsls	r3, r3, #1
 80130f8:	4413      	add	r3, r2
 80130fa:	3301      	adds	r3, #1
 80130fc:	085b      	lsrs	r3, r3, #1
 80130fe:	3303      	adds	r3, #3
 8013100:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8013102:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8013104:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013106:	4413      	add	r3, r2
 8013108:	1e5a      	subs	r2, r3, #1
 801310a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801310c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013110:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8013112:	2301      	movs	r3, #1
 8013114:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8013116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013118:	015a      	lsls	r2, r3, #5
 801311a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013120:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8013122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013126:	4413      	add	r3, r2
 8013128:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 801312a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801312c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801312e:	fb03 f202 	mul.w	r2, r3, r2
 8013132:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013134:	4413      	add	r3, r2
 8013136:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013138:	4413      	add	r3, r2
 801313a:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 801313c:	697a      	ldr	r2, [r7, #20]
 801313e:	69fb      	ldr	r3, [r7, #28]
 8013140:	4413      	add	r3, r2
 8013142:	1e5a      	subs	r2, r3, #1
 8013144:	697b      	ldr	r3, [r7, #20]
 8013146:	425b      	negs	r3, r3
 8013148:	401a      	ands	r2, r3
 801314a:	69fb      	ldr	r3, [r7, #28]
 801314c:	1ad3      	subs	r3, r2, r3
 801314e:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8013150:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013154:	2b03      	cmp	r3, #3
 8013156:	d108      	bne.n	801316a <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8013158:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801315a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801315c:	4413      	add	r3, r2
 801315e:	657b      	str	r3, [r7, #84]	@ 0x54
 8013160:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013162:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013164:	4413      	add	r3, r2
 8013166:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013168:	e006      	b.n	8013178 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 801316a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801316c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801316e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013172:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013174:	4413      	add	r3, r2
 8013176:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8013178:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801317a:	011a      	lsls	r2, r3, #4
 801317c:	69fb      	ldr	r3, [r7, #28]
 801317e:	441a      	add	r2, r3
 8013180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013182:	1ad2      	subs	r2, r2, r3
 8013184:	693b      	ldr	r3, [r7, #16]
 8013186:	429a      	cmp	r2, r3
 8013188:	d901      	bls.n	801318e <f_mkfs+0x336>
 801318a:	230e      	movs	r3, #14
 801318c:	e28a      	b.n	80136a4 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 801318e:	693a      	ldr	r2, [r7, #16]
 8013190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013192:	1ad2      	subs	r2, r2, r3
 8013194:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013196:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013198:	fb01 f303 	mul.w	r3, r1, r3
 801319c:	1ad2      	subs	r2, r2, r3
 801319e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80131a0:	1ad2      	subs	r2, r2, r3
 80131a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80131a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80131a8:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 80131aa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80131ae:	2b03      	cmp	r3, #3
 80131b0:	d10f      	bne.n	80131d2 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80131b2:	6a3b      	ldr	r3, [r7, #32]
 80131b4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80131b8:	4293      	cmp	r3, r2
 80131ba:	d80a      	bhi.n	80131d2 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d105      	bne.n	80131ce <f_mkfs+0x376>
 80131c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80131c4:	085b      	lsrs	r3, r3, #1
 80131c6:	607b      	str	r3, [r7, #4]
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d144      	bne.n	8013258 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 80131ce:	230e      	movs	r3, #14
 80131d0:	e268      	b.n	80136a4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 80131d2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80131d6:	2b02      	cmp	r3, #2
 80131d8:	d133      	bne.n	8013242 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 80131da:	6a3b      	ldr	r3, [r7, #32]
 80131dc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80131e0:	4293      	cmp	r3, r2
 80131e2:	d91e      	bls.n	8013222 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d107      	bne.n	80131fa <f_mkfs+0x3a2>
 80131ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80131ec:	005b      	lsls	r3, r3, #1
 80131ee:	2b40      	cmp	r3, #64	@ 0x40
 80131f0:	d803      	bhi.n	80131fa <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 80131f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80131f4:	005b      	lsls	r3, r3, #1
 80131f6:	607b      	str	r3, [r7, #4]
 80131f8:	e033      	b.n	8013262 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 80131fa:	7afb      	ldrb	r3, [r7, #11]
 80131fc:	f003 0302 	and.w	r3, r3, #2
 8013200:	2b00      	cmp	r3, #0
 8013202:	d003      	beq.n	801320c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8013204:	2303      	movs	r3, #3
 8013206:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 801320a:	e02a      	b.n	8013262 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d105      	bne.n	801321e <f_mkfs+0x3c6>
 8013212:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013214:	005b      	lsls	r3, r3, #1
 8013216:	607b      	str	r3, [r7, #4]
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	2b80      	cmp	r3, #128	@ 0x80
 801321c:	d91e      	bls.n	801325c <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 801321e:	230e      	movs	r3, #14
 8013220:	e240      	b.n	80136a4 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8013222:	6a3b      	ldr	r3, [r7, #32]
 8013224:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8013228:	4293      	cmp	r3, r2
 801322a:	d80a      	bhi.n	8013242 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d105      	bne.n	801323e <f_mkfs+0x3e6>
 8013232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013234:	005b      	lsls	r3, r3, #1
 8013236:	607b      	str	r3, [r7, #4]
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	2b80      	cmp	r3, #128	@ 0x80
 801323c:	d910      	bls.n	8013260 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 801323e:	230e      	movs	r3, #14
 8013240:	e230      	b.n	80136a4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8013242:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013246:	2b01      	cmp	r3, #1
 8013248:	d10c      	bne.n	8013264 <f_mkfs+0x40c>
 801324a:	6a3b      	ldr	r3, [r7, #32]
 801324c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8013250:	4293      	cmp	r3, r2
 8013252:	d907      	bls.n	8013264 <f_mkfs+0x40c>
 8013254:	230e      	movs	r3, #14
 8013256:	e225      	b.n	80136a4 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8013258:	bf00      	nop
 801325a:	e6ce      	b.n	8012ffa <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801325c:	bf00      	nop
 801325e:	e6cc      	b.n	8012ffa <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013260:	bf00      	nop
			pau = au;
 8013262:	e6ca      	b.n	8012ffa <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8013264:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8013266:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013268:	461a      	mov	r2, r3
 801326a:	2100      	movs	r1, #0
 801326c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801326e:	f7fd fcd5 	bl	8010c1c <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8013272:	220b      	movs	r2, #11
 8013274:	49b2      	ldr	r1, [pc, #712]	@ (8013540 <f_mkfs+0x6e8>)
 8013276:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013278:	f7fd fcaf 	bl	8010bda <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 801327c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801327e:	330b      	adds	r3, #11
 8013280:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8013282:	4611      	mov	r1, r2
 8013284:	4618      	mov	r0, r3
 8013286:	f7fd fc61 	bl	8010b4c <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 801328a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801328c:	330d      	adds	r3, #13
 801328e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013290:	b2d2      	uxtb	r2, r2
 8013292:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8013294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013296:	330e      	adds	r3, #14
 8013298:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801329a:	b292      	uxth	r2, r2
 801329c:	4611      	mov	r1, r2
 801329e:	4618      	mov	r0, r3
 80132a0:	f7fd fc54 	bl	8010b4c <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80132a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132a6:	3310      	adds	r3, #16
 80132a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80132aa:	b2d2      	uxtb	r2, r2
 80132ac:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80132ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132b0:	f103 0211 	add.w	r2, r3, #17
 80132b4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80132b8:	2b03      	cmp	r3, #3
 80132ba:	d002      	beq.n	80132c2 <f_mkfs+0x46a>
 80132bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132be:	b29b      	uxth	r3, r3
 80132c0:	e000      	b.n	80132c4 <f_mkfs+0x46c>
 80132c2:	2300      	movs	r3, #0
 80132c4:	4619      	mov	r1, r3
 80132c6:	4610      	mov	r0, r2
 80132c8:	f7fd fc40 	bl	8010b4c <st_word>
		if (sz_vol < 0x10000) {
 80132cc:	693b      	ldr	r3, [r7, #16]
 80132ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80132d2:	d208      	bcs.n	80132e6 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80132d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132d6:	3313      	adds	r3, #19
 80132d8:	693a      	ldr	r2, [r7, #16]
 80132da:	b292      	uxth	r2, r2
 80132dc:	4611      	mov	r1, r2
 80132de:	4618      	mov	r0, r3
 80132e0:	f7fd fc34 	bl	8010b4c <st_word>
 80132e4:	e006      	b.n	80132f4 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 80132e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132e8:	3320      	adds	r3, #32
 80132ea:	693a      	ldr	r2, [r7, #16]
 80132ec:	4611      	mov	r1, r2
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7fd fc47 	bl	8010b82 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80132f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132f6:	3315      	adds	r3, #21
 80132f8:	22f8      	movs	r2, #248	@ 0xf8
 80132fa:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80132fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132fe:	3318      	adds	r3, #24
 8013300:	213f      	movs	r1, #63	@ 0x3f
 8013302:	4618      	mov	r0, r3
 8013304:	f7fd fc22 	bl	8010b4c <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8013308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801330a:	331a      	adds	r3, #26
 801330c:	21ff      	movs	r1, #255	@ 0xff
 801330e:	4618      	mov	r0, r3
 8013310:	f7fd fc1c 	bl	8010b4c <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8013314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013316:	331c      	adds	r3, #28
 8013318:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801331a:	4618      	mov	r0, r3
 801331c:	f7fd fc31 	bl	8010b82 <st_dword>
		if (fmt == FS_FAT32) {
 8013320:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013324:	2b03      	cmp	r3, #3
 8013326:	d131      	bne.n	801338c <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8013328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801332a:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 801332e:	f7fd f853 	bl	80103d8 <get_fattime>
 8013332:	4603      	mov	r3, r0
 8013334:	4619      	mov	r1, r3
 8013336:	4620      	mov	r0, r4
 8013338:	f7fd fc23 	bl	8010b82 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 801333c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801333e:	3324      	adds	r3, #36	@ 0x24
 8013340:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8013342:	4618      	mov	r0, r3
 8013344:	f7fd fc1d 	bl	8010b82 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8013348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801334a:	332c      	adds	r3, #44	@ 0x2c
 801334c:	2102      	movs	r1, #2
 801334e:	4618      	mov	r0, r3
 8013350:	f7fd fc17 	bl	8010b82 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8013354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013356:	3330      	adds	r3, #48	@ 0x30
 8013358:	2101      	movs	r1, #1
 801335a:	4618      	mov	r0, r3
 801335c:	f7fd fbf6 	bl	8010b4c <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8013360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013362:	3332      	adds	r3, #50	@ 0x32
 8013364:	2106      	movs	r1, #6
 8013366:	4618      	mov	r0, r3
 8013368:	f7fd fbf0 	bl	8010b4c <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 801336c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801336e:	3340      	adds	r3, #64	@ 0x40
 8013370:	2280      	movs	r2, #128	@ 0x80
 8013372:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8013374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013376:	3342      	adds	r3, #66	@ 0x42
 8013378:	2229      	movs	r2, #41	@ 0x29
 801337a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 801337c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801337e:	3347      	adds	r3, #71	@ 0x47
 8013380:	2213      	movs	r2, #19
 8013382:	4970      	ldr	r1, [pc, #448]	@ (8013544 <f_mkfs+0x6ec>)
 8013384:	4618      	mov	r0, r3
 8013386:	f7fd fc28 	bl	8010bda <mem_cpy>
 801338a:	e020      	b.n	80133ce <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 801338c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801338e:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 8013392:	f7fd f821 	bl	80103d8 <get_fattime>
 8013396:	4603      	mov	r3, r0
 8013398:	4619      	mov	r1, r3
 801339a:	4620      	mov	r0, r4
 801339c:	f7fd fbf1 	bl	8010b82 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80133a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133a2:	3316      	adds	r3, #22
 80133a4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80133a6:	b292      	uxth	r2, r2
 80133a8:	4611      	mov	r1, r2
 80133aa:	4618      	mov	r0, r3
 80133ac:	f7fd fbce 	bl	8010b4c <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80133b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133b2:	3324      	adds	r3, #36	@ 0x24
 80133b4:	2280      	movs	r2, #128	@ 0x80
 80133b6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80133b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133ba:	3326      	adds	r3, #38	@ 0x26
 80133bc:	2229      	movs	r2, #41	@ 0x29
 80133be:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80133c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133c2:	332b      	adds	r3, #43	@ 0x2b
 80133c4:	2213      	movs	r2, #19
 80133c6:	4960      	ldr	r1, [pc, #384]	@ (8013548 <f_mkfs+0x6f0>)
 80133c8:	4618      	mov	r0, r3
 80133ca:	f7fd fc06 	bl	8010bda <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80133ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133d0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80133d4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80133d8:	4618      	mov	r0, r3
 80133da:	f7fd fbb7 	bl	8010b4c <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 80133de:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80133e2:	2301      	movs	r3, #1
 80133e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80133e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80133e8:	f7fd fb36 	bl	8010a58 <disk_write>
 80133ec:	4603      	mov	r3, r0
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d001      	beq.n	80133f6 <f_mkfs+0x59e>
 80133f2:	2301      	movs	r3, #1
 80133f4:	e156      	b.n	80136a4 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80133f6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80133fa:	2b03      	cmp	r3, #3
 80133fc:	d140      	bne.n	8013480 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80133fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013400:	1d9a      	adds	r2, r3, #6
 8013402:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8013406:	2301      	movs	r3, #1
 8013408:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801340a:	f7fd fb25 	bl	8010a58 <disk_write>
			mem_set(buf, 0, ss);
 801340e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013410:	461a      	mov	r2, r3
 8013412:	2100      	movs	r1, #0
 8013414:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013416:	f7fd fc01 	bl	8010c1c <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 801341a:	494c      	ldr	r1, [pc, #304]	@ (801354c <f_mkfs+0x6f4>)
 801341c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801341e:	f7fd fbb0 	bl	8010b82 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8013422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013424:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013428:	4949      	ldr	r1, [pc, #292]	@ (8013550 <f_mkfs+0x6f8>)
 801342a:	4618      	mov	r0, r3
 801342c:	f7fd fba9 	bl	8010b82 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8013430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013432:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8013436:	6a3b      	ldr	r3, [r7, #32]
 8013438:	3b01      	subs	r3, #1
 801343a:	4619      	mov	r1, r3
 801343c:	4610      	mov	r0, r2
 801343e:	f7fd fba0 	bl	8010b82 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8013442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013444:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8013448:	2102      	movs	r1, #2
 801344a:	4618      	mov	r0, r3
 801344c:	f7fd fb99 	bl	8010b82 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8013450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013452:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013456:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801345a:	4618      	mov	r0, r3
 801345c:	f7fd fb76 	bl	8010b4c <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8013460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013462:	1dda      	adds	r2, r3, #7
 8013464:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8013468:	2301      	movs	r3, #1
 801346a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801346c:	f7fd faf4 	bl	8010a58 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8013470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013472:	1c5a      	adds	r2, r3, #1
 8013474:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8013478:	2301      	movs	r3, #1
 801347a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801347c:	f7fd faec 	bl	8010a58 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8013480:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013482:	2100      	movs	r1, #0
 8013484:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013486:	f7fd fbc9 	bl	8010c1c <mem_set>
		sect = b_fat;		/* FAT start sector */
 801348a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801348c:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 801348e:	2300      	movs	r3, #0
 8013490:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013492:	e04b      	b.n	801352c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8013494:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013498:	2b03      	cmp	r3, #3
 801349a:	d113      	bne.n	80134c4 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 801349c:	f06f 0107 	mvn.w	r1, #7
 80134a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80134a2:	f7fd fb6e 	bl	8010b82 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 80134a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134a8:	3304      	adds	r3, #4
 80134aa:	f04f 31ff 	mov.w	r1, #4294967295
 80134ae:	4618      	mov	r0, r3
 80134b0:	f7fd fb67 	bl	8010b82 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 80134b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134b6:	3308      	adds	r3, #8
 80134b8:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80134bc:	4618      	mov	r0, r3
 80134be:	f7fd fb60 	bl	8010b82 <st_dword>
 80134c2:	e00b      	b.n	80134dc <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80134c4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80134c8:	2b01      	cmp	r3, #1
 80134ca:	d101      	bne.n	80134d0 <f_mkfs+0x678>
 80134cc:	4b21      	ldr	r3, [pc, #132]	@ (8013554 <f_mkfs+0x6fc>)
 80134ce:	e001      	b.n	80134d4 <f_mkfs+0x67c>
 80134d0:	f06f 0307 	mvn.w	r3, #7
 80134d4:	4619      	mov	r1, r3
 80134d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80134d8:	f7fd fb53 	bl	8010b82 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 80134dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80134de:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80134e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80134e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134e4:	4293      	cmp	r3, r2
 80134e6:	bf28      	it	cs
 80134e8:	4613      	movcs	r3, r2
 80134ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80134ec:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80134f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80134f2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80134f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80134f6:	f7fd faaf 	bl	8010a58 <disk_write>
 80134fa:	4603      	mov	r3, r0
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d001      	beq.n	8013504 <f_mkfs+0x6ac>
 8013500:	2301      	movs	r3, #1
 8013502:	e0cf      	b.n	80136a4 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8013504:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013506:	461a      	mov	r2, r3
 8013508:	2100      	movs	r1, #0
 801350a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801350c:	f7fd fb86 	bl	8010c1c <mem_set>
				sect += n; nsect -= n;
 8013510:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013512:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013514:	4413      	add	r3, r2
 8013516:	667b      	str	r3, [r7, #100]	@ 0x64
 8013518:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801351a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801351c:	1ad3      	subs	r3, r2, r3
 801351e:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 8013520:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013522:	2b00      	cmp	r3, #0
 8013524:	d1dc      	bne.n	80134e0 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8013526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013528:	3301      	adds	r3, #1
 801352a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801352c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801352e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013530:	429a      	cmp	r2, r3
 8013532:	d3af      	bcc.n	8013494 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8013534:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013538:	2b03      	cmp	r3, #3
 801353a:	d10d      	bne.n	8013558 <f_mkfs+0x700>
 801353c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801353e:	e00c      	b.n	801355a <f_mkfs+0x702>
 8013540:	08019e0c 	.word	0x08019e0c
 8013544:	08019e18 	.word	0x08019e18
 8013548:	08019e2c 	.word	0x08019e2c
 801354c:	41615252 	.word	0x41615252
 8013550:	61417272 	.word	0x61417272
 8013554:	00fffff8 	.word	0x00fffff8
 8013558:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801355a:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 801355c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801355e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013560:	4293      	cmp	r3, r2
 8013562:	bf28      	it	cs
 8013564:	4613      	movcs	r3, r2
 8013566:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8013568:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801356c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801356e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013570:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013572:	f7fd fa71 	bl	8010a58 <disk_write>
 8013576:	4603      	mov	r3, r0
 8013578:	2b00      	cmp	r3, #0
 801357a:	d001      	beq.n	8013580 <f_mkfs+0x728>
 801357c:	2301      	movs	r3, #1
 801357e:	e091      	b.n	80136a4 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8013580:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013582:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013584:	4413      	add	r3, r2
 8013586:	667b      	str	r3, [r7, #100]	@ 0x64
 8013588:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801358a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801358c:	1ad3      	subs	r3, r2, r3
 801358e:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 8013590:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013592:	2b00      	cmp	r3, #0
 8013594:	d1e2      	bne.n	801355c <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8013596:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801359a:	2b03      	cmp	r3, #3
 801359c:	d103      	bne.n	80135a6 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 801359e:	230c      	movs	r3, #12
 80135a0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80135a4:	e010      	b.n	80135c8 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 80135a6:	693b      	ldr	r3, [r7, #16]
 80135a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80135ac:	d303      	bcc.n	80135b6 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80135ae:	2306      	movs	r3, #6
 80135b0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80135b4:	e008      	b.n	80135c8 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80135b6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80135ba:	2b02      	cmp	r3, #2
 80135bc:	d101      	bne.n	80135c2 <f_mkfs+0x76a>
 80135be:	2304      	movs	r3, #4
 80135c0:	e000      	b.n	80135c4 <f_mkfs+0x76c>
 80135c2:	2301      	movs	r3, #1
 80135c4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80135c8:	7afb      	ldrb	r3, [r7, #11]
 80135ca:	f003 0308 	and.w	r3, r3, #8
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d15b      	bne.n	801368a <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 80135d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80135d4:	461a      	mov	r2, r3
 80135d6:	2100      	movs	r1, #0
 80135d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80135da:	f7fd fb1f 	bl	8010c1c <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 80135de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135e0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80135e4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80135e8:	4618      	mov	r0, r3
 80135ea:	f7fd faaf 	bl	8010b4c <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 80135ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135f0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80135f4:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80135f6:	69bb      	ldr	r3, [r7, #24]
 80135f8:	2200      	movs	r2, #0
 80135fa:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80135fc:	69bb      	ldr	r3, [r7, #24]
 80135fe:	3301      	adds	r3, #1
 8013600:	2201      	movs	r2, #1
 8013602:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8013604:	69bb      	ldr	r3, [r7, #24]
 8013606:	3302      	adds	r3, #2
 8013608:	2201      	movs	r2, #1
 801360a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 801360c:	69bb      	ldr	r3, [r7, #24]
 801360e:	3303      	adds	r3, #3
 8013610:	2200      	movs	r2, #0
 8013612:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8013614:	69bb      	ldr	r3, [r7, #24]
 8013616:	3304      	adds	r3, #4
 8013618:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 801361c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 801361e:	693a      	ldr	r2, [r7, #16]
 8013620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013622:	441a      	add	r2, r3
 8013624:	4b21      	ldr	r3, [pc, #132]	@ (80136ac <f_mkfs+0x854>)
 8013626:	fba3 1302 	umull	r1, r3, r3, r2
 801362a:	1ad2      	subs	r2, r2, r3
 801362c:	0852      	lsrs	r2, r2, #1
 801362e:	4413      	add	r3, r2
 8013630:	0b5b      	lsrs	r3, r3, #13
 8013632:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8013634:	69bb      	ldr	r3, [r7, #24]
 8013636:	3305      	adds	r3, #5
 8013638:	22fe      	movs	r2, #254	@ 0xfe
 801363a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 801363c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801363e:	089b      	lsrs	r3, r3, #2
 8013640:	b2da      	uxtb	r2, r3
 8013642:	69bb      	ldr	r3, [r7, #24]
 8013644:	3306      	adds	r3, #6
 8013646:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 801364a:	b2d2      	uxtb	r2, r2
 801364c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 801364e:	69bb      	ldr	r3, [r7, #24]
 8013650:	3307      	adds	r3, #7
 8013652:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013654:	b2d2      	uxtb	r2, r2
 8013656:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8013658:	69bb      	ldr	r3, [r7, #24]
 801365a:	3308      	adds	r3, #8
 801365c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801365e:	4618      	mov	r0, r3
 8013660:	f7fd fa8f 	bl	8010b82 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8013664:	69bb      	ldr	r3, [r7, #24]
 8013666:	330c      	adds	r3, #12
 8013668:	693a      	ldr	r2, [r7, #16]
 801366a:	4611      	mov	r1, r2
 801366c:	4618      	mov	r0, r3
 801366e:	f7fd fa88 	bl	8010b82 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8013672:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8013676:	2301      	movs	r3, #1
 8013678:	2200      	movs	r2, #0
 801367a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801367c:	f7fd f9ec 	bl	8010a58 <disk_write>
 8013680:	4603      	mov	r3, r0
 8013682:	2b00      	cmp	r3, #0
 8013684:	d001      	beq.n	801368a <f_mkfs+0x832>
 8013686:	2301      	movs	r3, #1
 8013688:	e00c      	b.n	80136a4 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 801368a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801368e:	2200      	movs	r2, #0
 8013690:	2100      	movs	r1, #0
 8013692:	4618      	mov	r0, r3
 8013694:	f7fd fa00 	bl	8010a98 <disk_ioctl>
 8013698:	4603      	mov	r3, r0
 801369a:	2b00      	cmp	r3, #0
 801369c:	d001      	beq.n	80136a2 <f_mkfs+0x84a>
 801369e:	2301      	movs	r3, #1
 80136a0:	e000      	b.n	80136a4 <f_mkfs+0x84c>

	return FR_OK;
 80136a2:	2300      	movs	r3, #0
}
 80136a4:	4618      	mov	r0, r3
 80136a6:	3774      	adds	r7, #116	@ 0x74
 80136a8:	46bd      	mov	sp, r7
 80136aa:	bd90      	pop	{r4, r7, pc}
 80136ac:	0515565b 	.word	0x0515565b

080136b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80136b0:	b480      	push	{r7}
 80136b2:	b087      	sub	sp, #28
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	60f8      	str	r0, [r7, #12]
 80136b8:	60b9      	str	r1, [r7, #8]
 80136ba:	4613      	mov	r3, r2
 80136bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80136be:	2301      	movs	r3, #1
 80136c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80136c2:	2300      	movs	r3, #0
 80136c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80136c6:	4b1f      	ldr	r3, [pc, #124]	@ (8013744 <FATFS_LinkDriverEx+0x94>)
 80136c8:	7a5b      	ldrb	r3, [r3, #9]
 80136ca:	b2db      	uxtb	r3, r3
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d131      	bne.n	8013734 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80136d0:	4b1c      	ldr	r3, [pc, #112]	@ (8013744 <FATFS_LinkDriverEx+0x94>)
 80136d2:	7a5b      	ldrb	r3, [r3, #9]
 80136d4:	b2db      	uxtb	r3, r3
 80136d6:	461a      	mov	r2, r3
 80136d8:	4b1a      	ldr	r3, [pc, #104]	@ (8013744 <FATFS_LinkDriverEx+0x94>)
 80136da:	2100      	movs	r1, #0
 80136dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80136de:	4b19      	ldr	r3, [pc, #100]	@ (8013744 <FATFS_LinkDriverEx+0x94>)
 80136e0:	7a5b      	ldrb	r3, [r3, #9]
 80136e2:	b2db      	uxtb	r3, r3
 80136e4:	4a17      	ldr	r2, [pc, #92]	@ (8013744 <FATFS_LinkDriverEx+0x94>)
 80136e6:	009b      	lsls	r3, r3, #2
 80136e8:	4413      	add	r3, r2
 80136ea:	68fa      	ldr	r2, [r7, #12]
 80136ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80136ee:	4b15      	ldr	r3, [pc, #84]	@ (8013744 <FATFS_LinkDriverEx+0x94>)
 80136f0:	7a5b      	ldrb	r3, [r3, #9]
 80136f2:	b2db      	uxtb	r3, r3
 80136f4:	461a      	mov	r2, r3
 80136f6:	4b13      	ldr	r3, [pc, #76]	@ (8013744 <FATFS_LinkDriverEx+0x94>)
 80136f8:	4413      	add	r3, r2
 80136fa:	79fa      	ldrb	r2, [r7, #7]
 80136fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80136fe:	4b11      	ldr	r3, [pc, #68]	@ (8013744 <FATFS_LinkDriverEx+0x94>)
 8013700:	7a5b      	ldrb	r3, [r3, #9]
 8013702:	b2db      	uxtb	r3, r3
 8013704:	1c5a      	adds	r2, r3, #1
 8013706:	b2d1      	uxtb	r1, r2
 8013708:	4a0e      	ldr	r2, [pc, #56]	@ (8013744 <FATFS_LinkDriverEx+0x94>)
 801370a:	7251      	strb	r1, [r2, #9]
 801370c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801370e:	7dbb      	ldrb	r3, [r7, #22]
 8013710:	3330      	adds	r3, #48	@ 0x30
 8013712:	b2da      	uxtb	r2, r3
 8013714:	68bb      	ldr	r3, [r7, #8]
 8013716:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013718:	68bb      	ldr	r3, [r7, #8]
 801371a:	3301      	adds	r3, #1
 801371c:	223a      	movs	r2, #58	@ 0x3a
 801371e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013720:	68bb      	ldr	r3, [r7, #8]
 8013722:	3302      	adds	r3, #2
 8013724:	222f      	movs	r2, #47	@ 0x2f
 8013726:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	3303      	adds	r3, #3
 801372c:	2200      	movs	r2, #0
 801372e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013730:	2300      	movs	r3, #0
 8013732:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013734:	7dfb      	ldrb	r3, [r7, #23]
}
 8013736:	4618      	mov	r0, r3
 8013738:	371c      	adds	r7, #28
 801373a:	46bd      	mov	sp, r7
 801373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013740:	4770      	bx	lr
 8013742:	bf00      	nop
 8013744:	200019e8 	.word	0x200019e8

08013748 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013748:	b580      	push	{r7, lr}
 801374a:	b082      	sub	sp, #8
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
 8013750:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013752:	2200      	movs	r2, #0
 8013754:	6839      	ldr	r1, [r7, #0]
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	f7ff ffaa 	bl	80136b0 <FATFS_LinkDriverEx>
 801375c:	4603      	mov	r3, r0
}
 801375e:	4618      	mov	r0, r3
 8013760:	3708      	adds	r7, #8
 8013762:	46bd      	mov	sp, r7
 8013764:	bd80      	pop	{r7, pc}

08013766 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8013766:	b480      	push	{r7}
 8013768:	b085      	sub	sp, #20
 801376a:	af00      	add	r7, sp, #0
 801376c:	4603      	mov	r3, r0
 801376e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8013770:	2300      	movs	r3, #0
 8013772:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8013774:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013778:	2b84      	cmp	r3, #132	@ 0x84
 801377a:	d005      	beq.n	8013788 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801377c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	4413      	add	r3, r2
 8013784:	3303      	adds	r3, #3
 8013786:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8013788:	68fb      	ldr	r3, [r7, #12]
}
 801378a:	4618      	mov	r0, r3
 801378c:	3714      	adds	r7, #20
 801378e:	46bd      	mov	sp, r7
 8013790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013794:	4770      	bx	lr

08013796 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8013796:	b480      	push	{r7}
 8013798:	b083      	sub	sp, #12
 801379a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801379c:	f3ef 8305 	mrs	r3, IPSR
 80137a0:	607b      	str	r3, [r7, #4]
  return(result);
 80137a2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	bf14      	ite	ne
 80137a8:	2301      	movne	r3, #1
 80137aa:	2300      	moveq	r3, #0
 80137ac:	b2db      	uxtb	r3, r3
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	370c      	adds	r7, #12
 80137b2:	46bd      	mov	sp, r7
 80137b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b8:	4770      	bx	lr

080137ba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80137ba:	b580      	push	{r7, lr}
 80137bc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80137be:	f000 ffad 	bl	801471c <vTaskStartScheduler>
  
  return osOK;
 80137c2:	2300      	movs	r3, #0
}
 80137c4:	4618      	mov	r0, r3
 80137c6:	bd80      	pop	{r7, pc}

080137c8 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80137c8:	b580      	push	{r7, lr}
 80137ca:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80137cc:	f001 fc0e 	bl	8014fec <xTaskGetSchedulerState>
 80137d0:	4603      	mov	r3, r0
 80137d2:	2b01      	cmp	r3, #1
 80137d4:	d101      	bne.n	80137da <osKernelRunning+0x12>
    return 0;
 80137d6:	2300      	movs	r3, #0
 80137d8:	e000      	b.n	80137dc <osKernelRunning+0x14>
  else
    return 1;
 80137da:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80137dc:	4618      	mov	r0, r3
 80137de:	bd80      	pop	{r7, pc}

080137e0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80137e4:	f7ff ffd7 	bl	8013796 <inHandlerMode>
 80137e8:	4603      	mov	r3, r0
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d003      	beq.n	80137f6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80137ee:	f001 f8b9 	bl	8014964 <xTaskGetTickCountFromISR>
 80137f2:	4603      	mov	r3, r0
 80137f4:	e002      	b.n	80137fc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80137f6:	f001 f8a5 	bl	8014944 <xTaskGetTickCount>
 80137fa:	4603      	mov	r3, r0
  }
}
 80137fc:	4618      	mov	r0, r3
 80137fe:	bd80      	pop	{r7, pc}

08013800 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8013800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013802:	b089      	sub	sp, #36	@ 0x24
 8013804:	af04      	add	r7, sp, #16
 8013806:	6078      	str	r0, [r7, #4]
 8013808:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	695b      	ldr	r3, [r3, #20]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d020      	beq.n	8013854 <osThreadCreate+0x54>
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	699b      	ldr	r3, [r3, #24]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d01c      	beq.n	8013854 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	685c      	ldr	r4, [r3, #4]
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	691e      	ldr	r6, [r3, #16]
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801382c:	4618      	mov	r0, r3
 801382e:	f7ff ff9a 	bl	8013766 <makeFreeRtosPriority>
 8013832:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	695b      	ldr	r3, [r3, #20]
 8013838:	687a      	ldr	r2, [r7, #4]
 801383a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801383c:	9202      	str	r2, [sp, #8]
 801383e:	9301      	str	r3, [sp, #4]
 8013840:	9100      	str	r1, [sp, #0]
 8013842:	683b      	ldr	r3, [r7, #0]
 8013844:	4632      	mov	r2, r6
 8013846:	4629      	mov	r1, r5
 8013848:	4620      	mov	r0, r4
 801384a:	f000 fd84 	bl	8014356 <xTaskCreateStatic>
 801384e:	4603      	mov	r3, r0
 8013850:	60fb      	str	r3, [r7, #12]
 8013852:	e01c      	b.n	801388e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	685c      	ldr	r4, [r3, #4]
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013860:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013868:	4618      	mov	r0, r3
 801386a:	f7ff ff7c 	bl	8013766 <makeFreeRtosPriority>
 801386e:	4602      	mov	r2, r0
 8013870:	f107 030c 	add.w	r3, r7, #12
 8013874:	9301      	str	r3, [sp, #4]
 8013876:	9200      	str	r2, [sp, #0]
 8013878:	683b      	ldr	r3, [r7, #0]
 801387a:	4632      	mov	r2, r6
 801387c:	4629      	mov	r1, r5
 801387e:	4620      	mov	r0, r4
 8013880:	f000 fdcf 	bl	8014422 <xTaskCreate>
 8013884:	4603      	mov	r3, r0
 8013886:	2b01      	cmp	r3, #1
 8013888:	d001      	beq.n	801388e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801388a:	2300      	movs	r3, #0
 801388c:	e000      	b.n	8013890 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801388e:	68fb      	ldr	r3, [r7, #12]
}
 8013890:	4618      	mov	r0, r3
 8013892:	3714      	adds	r7, #20
 8013894:	46bd      	mov	sp, r7
 8013896:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013898 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b084      	sub	sp, #16
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d001      	beq.n	80138ae <osDelay+0x16>
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	e000      	b.n	80138b0 <osDelay+0x18>
 80138ae:	2301      	movs	r3, #1
 80138b0:	4618      	mov	r0, r3
 80138b2:	f000 fefb 	bl	80146ac <vTaskDelay>
  
  return osOK;
 80138b6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80138b8:	4618      	mov	r0, r3
 80138ba:	3710      	adds	r7, #16
 80138bc:	46bd      	mov	sp, r7
 80138be:	bd80      	pop	{r7, pc}

080138c0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80138c0:	b590      	push	{r4, r7, lr}
 80138c2:	b085      	sub	sp, #20
 80138c4:	af02      	add	r7, sp, #8
 80138c6:	6078      	str	r0, [r7, #4]
 80138c8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	689b      	ldr	r3, [r3, #8]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d011      	beq.n	80138f6 <osMessageCreate+0x36>
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	68db      	ldr	r3, [r3, #12]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d00d      	beq.n	80138f6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	6818      	ldr	r0, [r3, #0]
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	6859      	ldr	r1, [r3, #4]
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	689a      	ldr	r2, [r3, #8]
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	68db      	ldr	r3, [r3, #12]
 80138ea:	2400      	movs	r4, #0
 80138ec:	9400      	str	r4, [sp, #0]
 80138ee:	f000 f985 	bl	8013bfc <xQueueGenericCreateStatic>
 80138f2:	4603      	mov	r3, r0
 80138f4:	e008      	b.n	8013908 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	6818      	ldr	r0, [r3, #0]
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	685b      	ldr	r3, [r3, #4]
 80138fe:	2200      	movs	r2, #0
 8013900:	4619      	mov	r1, r3
 8013902:	f000 fa02 	bl	8013d0a <xQueueGenericCreate>
 8013906:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8013908:	4618      	mov	r0, r3
 801390a:	370c      	adds	r7, #12
 801390c:	46bd      	mov	sp, r7
 801390e:	bd90      	pop	{r4, r7, pc}

08013910 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b086      	sub	sp, #24
 8013914:	af00      	add	r7, sp, #0
 8013916:	60f8      	str	r0, [r7, #12]
 8013918:	60b9      	str	r1, [r7, #8]
 801391a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 801391c:	2300      	movs	r3, #0
 801391e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8013924:	697b      	ldr	r3, [r7, #20]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d101      	bne.n	801392e <osMessagePut+0x1e>
    ticks = 1;
 801392a:	2301      	movs	r3, #1
 801392c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801392e:	f7ff ff32 	bl	8013796 <inHandlerMode>
 8013932:	4603      	mov	r3, r0
 8013934:	2b00      	cmp	r3, #0
 8013936:	d018      	beq.n	801396a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8013938:	f107 0210 	add.w	r2, r7, #16
 801393c:	f107 0108 	add.w	r1, r7, #8
 8013940:	2300      	movs	r3, #0
 8013942:	68f8      	ldr	r0, [r7, #12]
 8013944:	f000 fb4e 	bl	8013fe4 <xQueueGenericSendFromISR>
 8013948:	4603      	mov	r3, r0
 801394a:	2b01      	cmp	r3, #1
 801394c:	d001      	beq.n	8013952 <osMessagePut+0x42>
      return osErrorOS;
 801394e:	23ff      	movs	r3, #255	@ 0xff
 8013950:	e018      	b.n	8013984 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8013952:	693b      	ldr	r3, [r7, #16]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d014      	beq.n	8013982 <osMessagePut+0x72>
 8013958:	4b0c      	ldr	r3, [pc, #48]	@ (801398c <osMessagePut+0x7c>)
 801395a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801395e:	601a      	str	r2, [r3, #0]
 8013960:	f3bf 8f4f 	dsb	sy
 8013964:	f3bf 8f6f 	isb	sy
 8013968:	e00b      	b.n	8013982 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801396a:	f107 0108 	add.w	r1, r7, #8
 801396e:	2300      	movs	r3, #0
 8013970:	697a      	ldr	r2, [r7, #20]
 8013972:	68f8      	ldr	r0, [r7, #12]
 8013974:	f000 fa2c 	bl	8013dd0 <xQueueGenericSend>
 8013978:	4603      	mov	r3, r0
 801397a:	2b01      	cmp	r3, #1
 801397c:	d001      	beq.n	8013982 <osMessagePut+0x72>
      return osErrorOS;
 801397e:	23ff      	movs	r3, #255	@ 0xff
 8013980:	e000      	b.n	8013984 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8013982:	2300      	movs	r3, #0
}
 8013984:	4618      	mov	r0, r3
 8013986:	3718      	adds	r7, #24
 8013988:	46bd      	mov	sp, r7
 801398a:	bd80      	pop	{r7, pc}
 801398c:	e000ed04 	.word	0xe000ed04

08013990 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b082      	sub	sp, #8
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8013998:	f7ff fefd 	bl	8013796 <inHandlerMode>
 801399c:	4603      	mov	r3, r0
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d004      	beq.n	80139ac <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80139a2:	6878      	ldr	r0, [r7, #4]
 80139a4:	f000 fbe2 	bl	801416c <uxQueueMessagesWaitingFromISR>
 80139a8:	4603      	mov	r3, r0
 80139aa:	e003      	b.n	80139b4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80139ac:	6878      	ldr	r0, [r7, #4]
 80139ae:	f000 fbbc 	bl	801412a <uxQueueMessagesWaiting>
 80139b2:	4603      	mov	r3, r0
  }
}
 80139b4:	4618      	mov	r0, r3
 80139b6:	3708      	adds	r7, #8
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd80      	pop	{r7, pc}

080139bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80139bc:	b480      	push	{r7}
 80139be:	b083      	sub	sp, #12
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	f103 0208 	add.w	r2, r3, #8
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	f04f 32ff 	mov.w	r2, #4294967295
 80139d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	f103 0208 	add.w	r2, r3, #8
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	f103 0208 	add.w	r2, r3, #8
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	2200      	movs	r2, #0
 80139ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80139f0:	bf00      	nop
 80139f2:	370c      	adds	r7, #12
 80139f4:	46bd      	mov	sp, r7
 80139f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139fa:	4770      	bx	lr

080139fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80139fc:	b480      	push	{r7}
 80139fe:	b083      	sub	sp, #12
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	2200      	movs	r2, #0
 8013a08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013a0a:	bf00      	nop
 8013a0c:	370c      	adds	r7, #12
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a14:	4770      	bx	lr

08013a16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013a16:	b480      	push	{r7}
 8013a18:	b085      	sub	sp, #20
 8013a1a:	af00      	add	r7, sp, #0
 8013a1c:	6078      	str	r0, [r7, #4]
 8013a1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	685b      	ldr	r3, [r3, #4]
 8013a24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013a26:	683b      	ldr	r3, [r7, #0]
 8013a28:	68fa      	ldr	r2, [r7, #12]
 8013a2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	689a      	ldr	r2, [r3, #8]
 8013a30:	683b      	ldr	r3, [r7, #0]
 8013a32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	689b      	ldr	r3, [r3, #8]
 8013a38:	683a      	ldr	r2, [r7, #0]
 8013a3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	683a      	ldr	r2, [r7, #0]
 8013a40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013a42:	683b      	ldr	r3, [r7, #0]
 8013a44:	687a      	ldr	r2, [r7, #4]
 8013a46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	1c5a      	adds	r2, r3, #1
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	601a      	str	r2, [r3, #0]
}
 8013a52:	bf00      	nop
 8013a54:	3714      	adds	r7, #20
 8013a56:	46bd      	mov	sp, r7
 8013a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5c:	4770      	bx	lr

08013a5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013a5e:	b480      	push	{r7}
 8013a60:	b085      	sub	sp, #20
 8013a62:	af00      	add	r7, sp, #0
 8013a64:	6078      	str	r0, [r7, #4]
 8013a66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013a68:	683b      	ldr	r3, [r7, #0]
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013a6e:	68bb      	ldr	r3, [r7, #8]
 8013a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a74:	d103      	bne.n	8013a7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	691b      	ldr	r3, [r3, #16]
 8013a7a:	60fb      	str	r3, [r7, #12]
 8013a7c:	e00c      	b.n	8013a98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	3308      	adds	r3, #8
 8013a82:	60fb      	str	r3, [r7, #12]
 8013a84:	e002      	b.n	8013a8c <vListInsert+0x2e>
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	685b      	ldr	r3, [r3, #4]
 8013a8a:	60fb      	str	r3, [r7, #12]
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	685b      	ldr	r3, [r3, #4]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	68ba      	ldr	r2, [r7, #8]
 8013a94:	429a      	cmp	r2, r3
 8013a96:	d2f6      	bcs.n	8013a86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	685a      	ldr	r2, [r3, #4]
 8013a9c:	683b      	ldr	r3, [r7, #0]
 8013a9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013aa0:	683b      	ldr	r3, [r7, #0]
 8013aa2:	685b      	ldr	r3, [r3, #4]
 8013aa4:	683a      	ldr	r2, [r7, #0]
 8013aa6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013aa8:	683b      	ldr	r3, [r7, #0]
 8013aaa:	68fa      	ldr	r2, [r7, #12]
 8013aac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	683a      	ldr	r2, [r7, #0]
 8013ab2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013ab4:	683b      	ldr	r3, [r7, #0]
 8013ab6:	687a      	ldr	r2, [r7, #4]
 8013ab8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	1c5a      	adds	r2, r3, #1
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	601a      	str	r2, [r3, #0]
}
 8013ac4:	bf00      	nop
 8013ac6:	3714      	adds	r7, #20
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ace:	4770      	bx	lr

08013ad0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013ad0:	b480      	push	{r7}
 8013ad2:	b085      	sub	sp, #20
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	691b      	ldr	r3, [r3, #16]
 8013adc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	685b      	ldr	r3, [r3, #4]
 8013ae2:	687a      	ldr	r2, [r7, #4]
 8013ae4:	6892      	ldr	r2, [r2, #8]
 8013ae6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	689b      	ldr	r3, [r3, #8]
 8013aec:	687a      	ldr	r2, [r7, #4]
 8013aee:	6852      	ldr	r2, [r2, #4]
 8013af0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	685b      	ldr	r3, [r3, #4]
 8013af6:	687a      	ldr	r2, [r7, #4]
 8013af8:	429a      	cmp	r2, r3
 8013afa:	d103      	bne.n	8013b04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	689a      	ldr	r2, [r3, #8]
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	2200      	movs	r2, #0
 8013b08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	1e5a      	subs	r2, r3, #1
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	681b      	ldr	r3, [r3, #0]
}
 8013b18:	4618      	mov	r0, r3
 8013b1a:	3714      	adds	r7, #20
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b22:	4770      	bx	lr

08013b24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b084      	sub	sp, #16
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
 8013b2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d10d      	bne.n	8013b54 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b3c:	b672      	cpsid	i
 8013b3e:	f383 8811 	msr	BASEPRI, r3
 8013b42:	f3bf 8f6f 	isb	sy
 8013b46:	f3bf 8f4f 	dsb	sy
 8013b4a:	b662      	cpsie	i
 8013b4c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013b4e:	bf00      	nop
 8013b50:	bf00      	nop
 8013b52:	e7fd      	b.n	8013b50 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8013b54:	f001 fc6a 	bl	801542c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	681a      	ldr	r2, [r3, #0]
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013b60:	68f9      	ldr	r1, [r7, #12]
 8013b62:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013b64:	fb01 f303 	mul.w	r3, r1, r3
 8013b68:	441a      	add	r2, r3
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	2200      	movs	r2, #0
 8013b72:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	681a      	ldr	r2, [r3, #0]
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	681a      	ldr	r2, [r3, #0]
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013b84:	3b01      	subs	r3, #1
 8013b86:	68f9      	ldr	r1, [r7, #12]
 8013b88:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013b8a:	fb01 f303 	mul.w	r3, r1, r3
 8013b8e:	441a      	add	r2, r3
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	22ff      	movs	r2, #255	@ 0xff
 8013b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	22ff      	movs	r2, #255	@ 0xff
 8013ba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8013ba4:	683b      	ldr	r3, [r7, #0]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d114      	bne.n	8013bd4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	691b      	ldr	r3, [r3, #16]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d01a      	beq.n	8013be8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	3310      	adds	r3, #16
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f001 f84e 	bl	8014c58 <xTaskRemoveFromEventList>
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d012      	beq.n	8013be8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8013bf8 <xQueueGenericReset+0xd4>)
 8013bc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013bc8:	601a      	str	r2, [r3, #0]
 8013bca:	f3bf 8f4f 	dsb	sy
 8013bce:	f3bf 8f6f 	isb	sy
 8013bd2:	e009      	b.n	8013be8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	3310      	adds	r3, #16
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f7ff feef 	bl	80139bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	3324      	adds	r3, #36	@ 0x24
 8013be2:	4618      	mov	r0, r3
 8013be4:	f7ff feea 	bl	80139bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013be8:	f001 fc56 	bl	8015498 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013bec:	2301      	movs	r3, #1
}
 8013bee:	4618      	mov	r0, r3
 8013bf0:	3710      	adds	r7, #16
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	bd80      	pop	{r7, pc}
 8013bf6:	bf00      	nop
 8013bf8:	e000ed04 	.word	0xe000ed04

08013bfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b08e      	sub	sp, #56	@ 0x38
 8013c00:	af02      	add	r7, sp, #8
 8013c02:	60f8      	str	r0, [r7, #12]
 8013c04:	60b9      	str	r1, [r7, #8]
 8013c06:	607a      	str	r2, [r7, #4]
 8013c08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d10d      	bne.n	8013c2c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8013c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c14:	b672      	cpsid	i
 8013c16:	f383 8811 	msr	BASEPRI, r3
 8013c1a:	f3bf 8f6f 	isb	sy
 8013c1e:	f3bf 8f4f 	dsb	sy
 8013c22:	b662      	cpsie	i
 8013c24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013c26:	bf00      	nop
 8013c28:	bf00      	nop
 8013c2a:	e7fd      	b.n	8013c28 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013c2c:	683b      	ldr	r3, [r7, #0]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d10d      	bne.n	8013c4e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8013c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c36:	b672      	cpsid	i
 8013c38:	f383 8811 	msr	BASEPRI, r3
 8013c3c:	f3bf 8f6f 	isb	sy
 8013c40:	f3bf 8f4f 	dsb	sy
 8013c44:	b662      	cpsie	i
 8013c46:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013c48:	bf00      	nop
 8013c4a:	bf00      	nop
 8013c4c:	e7fd      	b.n	8013c4a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d002      	beq.n	8013c5a <xQueueGenericCreateStatic+0x5e>
 8013c54:	68bb      	ldr	r3, [r7, #8]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d001      	beq.n	8013c5e <xQueueGenericCreateStatic+0x62>
 8013c5a:	2301      	movs	r3, #1
 8013c5c:	e000      	b.n	8013c60 <xQueueGenericCreateStatic+0x64>
 8013c5e:	2300      	movs	r3, #0
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d10d      	bne.n	8013c80 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8013c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c68:	b672      	cpsid	i
 8013c6a:	f383 8811 	msr	BASEPRI, r3
 8013c6e:	f3bf 8f6f 	isb	sy
 8013c72:	f3bf 8f4f 	dsb	sy
 8013c76:	b662      	cpsie	i
 8013c78:	623b      	str	r3, [r7, #32]
}
 8013c7a:	bf00      	nop
 8013c7c:	bf00      	nop
 8013c7e:	e7fd      	b.n	8013c7c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d102      	bne.n	8013c8c <xQueueGenericCreateStatic+0x90>
 8013c86:	68bb      	ldr	r3, [r7, #8]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d101      	bne.n	8013c90 <xQueueGenericCreateStatic+0x94>
 8013c8c:	2301      	movs	r3, #1
 8013c8e:	e000      	b.n	8013c92 <xQueueGenericCreateStatic+0x96>
 8013c90:	2300      	movs	r3, #0
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d10d      	bne.n	8013cb2 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8013c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c9a:	b672      	cpsid	i
 8013c9c:	f383 8811 	msr	BASEPRI, r3
 8013ca0:	f3bf 8f6f 	isb	sy
 8013ca4:	f3bf 8f4f 	dsb	sy
 8013ca8:	b662      	cpsie	i
 8013caa:	61fb      	str	r3, [r7, #28]
}
 8013cac:	bf00      	nop
 8013cae:	bf00      	nop
 8013cb0:	e7fd      	b.n	8013cae <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013cb2:	2348      	movs	r3, #72	@ 0x48
 8013cb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013cb6:	697b      	ldr	r3, [r7, #20]
 8013cb8:	2b48      	cmp	r3, #72	@ 0x48
 8013cba:	d00d      	beq.n	8013cd8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8013cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013cc0:	b672      	cpsid	i
 8013cc2:	f383 8811 	msr	BASEPRI, r3
 8013cc6:	f3bf 8f6f 	isb	sy
 8013cca:	f3bf 8f4f 	dsb	sy
 8013cce:	b662      	cpsie	i
 8013cd0:	61bb      	str	r3, [r7, #24]
}
 8013cd2:	bf00      	nop
 8013cd4:	bf00      	nop
 8013cd6:	e7fd      	b.n	8013cd4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013cd8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013cda:	683b      	ldr	r3, [r7, #0]
 8013cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8013cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d00d      	beq.n	8013d00 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ce6:	2201      	movs	r2, #1
 8013ce8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013cec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8013cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cf2:	9300      	str	r3, [sp, #0]
 8013cf4:	4613      	mov	r3, r2
 8013cf6:	687a      	ldr	r2, [r7, #4]
 8013cf8:	68b9      	ldr	r1, [r7, #8]
 8013cfa:	68f8      	ldr	r0, [r7, #12]
 8013cfc:	f000 f848 	bl	8013d90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8013d02:	4618      	mov	r0, r3
 8013d04:	3730      	adds	r7, #48	@ 0x30
 8013d06:	46bd      	mov	sp, r7
 8013d08:	bd80      	pop	{r7, pc}

08013d0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013d0a:	b580      	push	{r7, lr}
 8013d0c:	b08a      	sub	sp, #40	@ 0x28
 8013d0e:	af02      	add	r7, sp, #8
 8013d10:	60f8      	str	r0, [r7, #12]
 8013d12:	60b9      	str	r1, [r7, #8]
 8013d14:	4613      	mov	r3, r2
 8013d16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d10d      	bne.n	8013d3a <xQueueGenericCreate+0x30>
	__asm volatile
 8013d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d22:	b672      	cpsid	i
 8013d24:	f383 8811 	msr	BASEPRI, r3
 8013d28:	f3bf 8f6f 	isb	sy
 8013d2c:	f3bf 8f4f 	dsb	sy
 8013d30:	b662      	cpsie	i
 8013d32:	613b      	str	r3, [r7, #16]
}
 8013d34:	bf00      	nop
 8013d36:	bf00      	nop
 8013d38:	e7fd      	b.n	8013d36 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8013d3a:	68bb      	ldr	r3, [r7, #8]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d102      	bne.n	8013d46 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8013d40:	2300      	movs	r3, #0
 8013d42:	61fb      	str	r3, [r7, #28]
 8013d44:	e004      	b.n	8013d50 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	68ba      	ldr	r2, [r7, #8]
 8013d4a:	fb02 f303 	mul.w	r3, r2, r3
 8013d4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013d50:	69fb      	ldr	r3, [r7, #28]
 8013d52:	3348      	adds	r3, #72	@ 0x48
 8013d54:	4618      	mov	r0, r3
 8013d56:	f001 fc97 	bl	8015688 <pvPortMalloc>
 8013d5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013d5c:	69bb      	ldr	r3, [r7, #24]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d011      	beq.n	8013d86 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013d62:	69bb      	ldr	r3, [r7, #24]
 8013d64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013d66:	697b      	ldr	r3, [r7, #20]
 8013d68:	3348      	adds	r3, #72	@ 0x48
 8013d6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013d6c:	69bb      	ldr	r3, [r7, #24]
 8013d6e:	2200      	movs	r2, #0
 8013d70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013d74:	79fa      	ldrb	r2, [r7, #7]
 8013d76:	69bb      	ldr	r3, [r7, #24]
 8013d78:	9300      	str	r3, [sp, #0]
 8013d7a:	4613      	mov	r3, r2
 8013d7c:	697a      	ldr	r2, [r7, #20]
 8013d7e:	68b9      	ldr	r1, [r7, #8]
 8013d80:	68f8      	ldr	r0, [r7, #12]
 8013d82:	f000 f805 	bl	8013d90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013d86:	69bb      	ldr	r3, [r7, #24]
	}
 8013d88:	4618      	mov	r0, r3
 8013d8a:	3720      	adds	r7, #32
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	bd80      	pop	{r7, pc}

08013d90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b084      	sub	sp, #16
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	60f8      	str	r0, [r7, #12]
 8013d98:	60b9      	str	r1, [r7, #8]
 8013d9a:	607a      	str	r2, [r7, #4]
 8013d9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013d9e:	68bb      	ldr	r3, [r7, #8]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d103      	bne.n	8013dac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013da4:	69bb      	ldr	r3, [r7, #24]
 8013da6:	69ba      	ldr	r2, [r7, #24]
 8013da8:	601a      	str	r2, [r3, #0]
 8013daa:	e002      	b.n	8013db2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013dac:	69bb      	ldr	r3, [r7, #24]
 8013dae:	687a      	ldr	r2, [r7, #4]
 8013db0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013db2:	69bb      	ldr	r3, [r7, #24]
 8013db4:	68fa      	ldr	r2, [r7, #12]
 8013db6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013db8:	69bb      	ldr	r3, [r7, #24]
 8013dba:	68ba      	ldr	r2, [r7, #8]
 8013dbc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013dbe:	2101      	movs	r1, #1
 8013dc0:	69b8      	ldr	r0, [r7, #24]
 8013dc2:	f7ff feaf 	bl	8013b24 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013dc6:	bf00      	nop
 8013dc8:	3710      	adds	r7, #16
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	bd80      	pop	{r7, pc}
	...

08013dd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b08e      	sub	sp, #56	@ 0x38
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	60f8      	str	r0, [r7, #12]
 8013dd8:	60b9      	str	r1, [r7, #8]
 8013dda:	607a      	str	r2, [r7, #4]
 8013ddc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013dde:	2300      	movs	r3, #0
 8013de0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d10d      	bne.n	8013e08 <xQueueGenericSend+0x38>
	__asm volatile
 8013dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013df0:	b672      	cpsid	i
 8013df2:	f383 8811 	msr	BASEPRI, r3
 8013df6:	f3bf 8f6f 	isb	sy
 8013dfa:	f3bf 8f4f 	dsb	sy
 8013dfe:	b662      	cpsie	i
 8013e00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013e02:	bf00      	nop
 8013e04:	bf00      	nop
 8013e06:	e7fd      	b.n	8013e04 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013e08:	68bb      	ldr	r3, [r7, #8]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d103      	bne.n	8013e16 <xQueueGenericSend+0x46>
 8013e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d101      	bne.n	8013e1a <xQueueGenericSend+0x4a>
 8013e16:	2301      	movs	r3, #1
 8013e18:	e000      	b.n	8013e1c <xQueueGenericSend+0x4c>
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d10d      	bne.n	8013e3c <xQueueGenericSend+0x6c>
	__asm volatile
 8013e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e24:	b672      	cpsid	i
 8013e26:	f383 8811 	msr	BASEPRI, r3
 8013e2a:	f3bf 8f6f 	isb	sy
 8013e2e:	f3bf 8f4f 	dsb	sy
 8013e32:	b662      	cpsie	i
 8013e34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013e36:	bf00      	nop
 8013e38:	bf00      	nop
 8013e3a:	e7fd      	b.n	8013e38 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013e3c:	683b      	ldr	r3, [r7, #0]
 8013e3e:	2b02      	cmp	r3, #2
 8013e40:	d103      	bne.n	8013e4a <xQueueGenericSend+0x7a>
 8013e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e46:	2b01      	cmp	r3, #1
 8013e48:	d101      	bne.n	8013e4e <xQueueGenericSend+0x7e>
 8013e4a:	2301      	movs	r3, #1
 8013e4c:	e000      	b.n	8013e50 <xQueueGenericSend+0x80>
 8013e4e:	2300      	movs	r3, #0
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d10d      	bne.n	8013e70 <xQueueGenericSend+0xa0>
	__asm volatile
 8013e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e58:	b672      	cpsid	i
 8013e5a:	f383 8811 	msr	BASEPRI, r3
 8013e5e:	f3bf 8f6f 	isb	sy
 8013e62:	f3bf 8f4f 	dsb	sy
 8013e66:	b662      	cpsie	i
 8013e68:	623b      	str	r3, [r7, #32]
}
 8013e6a:	bf00      	nop
 8013e6c:	bf00      	nop
 8013e6e:	e7fd      	b.n	8013e6c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013e70:	f001 f8bc 	bl	8014fec <xTaskGetSchedulerState>
 8013e74:	4603      	mov	r3, r0
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d102      	bne.n	8013e80 <xQueueGenericSend+0xb0>
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d101      	bne.n	8013e84 <xQueueGenericSend+0xb4>
 8013e80:	2301      	movs	r3, #1
 8013e82:	e000      	b.n	8013e86 <xQueueGenericSend+0xb6>
 8013e84:	2300      	movs	r3, #0
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d10d      	bne.n	8013ea6 <xQueueGenericSend+0xd6>
	__asm volatile
 8013e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e8e:	b672      	cpsid	i
 8013e90:	f383 8811 	msr	BASEPRI, r3
 8013e94:	f3bf 8f6f 	isb	sy
 8013e98:	f3bf 8f4f 	dsb	sy
 8013e9c:	b662      	cpsie	i
 8013e9e:	61fb      	str	r3, [r7, #28]
}
 8013ea0:	bf00      	nop
 8013ea2:	bf00      	nop
 8013ea4:	e7fd      	b.n	8013ea2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013ea6:	f001 fac1 	bl	801542c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013eac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013eb2:	429a      	cmp	r2, r3
 8013eb4:	d302      	bcc.n	8013ebc <xQueueGenericSend+0xec>
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	2b02      	cmp	r3, #2
 8013eba:	d129      	bne.n	8013f10 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013ebc:	683a      	ldr	r2, [r7, #0]
 8013ebe:	68b9      	ldr	r1, [r7, #8]
 8013ec0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013ec2:	f000 f974 	bl	80141ae <prvCopyDataToQueue>
 8013ec6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d010      	beq.n	8013ef2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ed2:	3324      	adds	r3, #36	@ 0x24
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	f000 febf 	bl	8014c58 <xTaskRemoveFromEventList>
 8013eda:	4603      	mov	r3, r0
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d013      	beq.n	8013f08 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013ee0:	4b3f      	ldr	r3, [pc, #252]	@ (8013fe0 <xQueueGenericSend+0x210>)
 8013ee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013ee6:	601a      	str	r2, [r3, #0]
 8013ee8:	f3bf 8f4f 	dsb	sy
 8013eec:	f3bf 8f6f 	isb	sy
 8013ef0:	e00a      	b.n	8013f08 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d007      	beq.n	8013f08 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013ef8:	4b39      	ldr	r3, [pc, #228]	@ (8013fe0 <xQueueGenericSend+0x210>)
 8013efa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013efe:	601a      	str	r2, [r3, #0]
 8013f00:	f3bf 8f4f 	dsb	sy
 8013f04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013f08:	f001 fac6 	bl	8015498 <vPortExitCritical>
				return pdPASS;
 8013f0c:	2301      	movs	r3, #1
 8013f0e:	e063      	b.n	8013fd8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d103      	bne.n	8013f1e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013f16:	f001 fabf 	bl	8015498 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	e05c      	b.n	8013fd8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d106      	bne.n	8013f32 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013f24:	f107 0314 	add.w	r3, r7, #20
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f000 fefb 	bl	8014d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013f2e:	2301      	movs	r3, #1
 8013f30:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013f32:	f001 fab1 	bl	8015498 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013f36:	f000 fc57 	bl	80147e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013f3a:	f001 fa77 	bl	801542c <vPortEnterCritical>
 8013f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013f44:	b25b      	sxtb	r3, r3
 8013f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f4a:	d103      	bne.n	8013f54 <xQueueGenericSend+0x184>
 8013f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f4e:	2200      	movs	r2, #0
 8013f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013f5a:	b25b      	sxtb	r3, r3
 8013f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f60:	d103      	bne.n	8013f6a <xQueueGenericSend+0x19a>
 8013f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f64:	2200      	movs	r2, #0
 8013f66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013f6a:	f001 fa95 	bl	8015498 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013f6e:	1d3a      	adds	r2, r7, #4
 8013f70:	f107 0314 	add.w	r3, r7, #20
 8013f74:	4611      	mov	r1, r2
 8013f76:	4618      	mov	r0, r3
 8013f78:	f000 feea 	bl	8014d50 <xTaskCheckForTimeOut>
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d124      	bne.n	8013fcc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013f82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013f84:	f000 f9cf 	bl	8014326 <prvIsQueueFull>
 8013f88:	4603      	mov	r3, r0
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d018      	beq.n	8013fc0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f90:	3310      	adds	r3, #16
 8013f92:	687a      	ldr	r2, [r7, #4]
 8013f94:	4611      	mov	r1, r2
 8013f96:	4618      	mov	r0, r3
 8013f98:	f000 fe36 	bl	8014c08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013f9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013f9e:	f000 f970 	bl	8014282 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013fa2:	f000 fc2f 	bl	8014804 <xTaskResumeAll>
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	f47f af7c 	bne.w	8013ea6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8013fae:	4b0c      	ldr	r3, [pc, #48]	@ (8013fe0 <xQueueGenericSend+0x210>)
 8013fb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013fb4:	601a      	str	r2, [r3, #0]
 8013fb6:	f3bf 8f4f 	dsb	sy
 8013fba:	f3bf 8f6f 	isb	sy
 8013fbe:	e772      	b.n	8013ea6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013fc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013fc2:	f000 f95e 	bl	8014282 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013fc6:	f000 fc1d 	bl	8014804 <xTaskResumeAll>
 8013fca:	e76c      	b.n	8013ea6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013fcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013fce:	f000 f958 	bl	8014282 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013fd2:	f000 fc17 	bl	8014804 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013fd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013fd8:	4618      	mov	r0, r3
 8013fda:	3738      	adds	r7, #56	@ 0x38
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	bd80      	pop	{r7, pc}
 8013fe0:	e000ed04 	.word	0xe000ed04

08013fe4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b08e      	sub	sp, #56	@ 0x38
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	60f8      	str	r0, [r7, #12]
 8013fec:	60b9      	str	r1, [r7, #8]
 8013fee:	607a      	str	r2, [r7, #4]
 8013ff0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d10d      	bne.n	8014018 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8013ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014000:	b672      	cpsid	i
 8014002:	f383 8811 	msr	BASEPRI, r3
 8014006:	f3bf 8f6f 	isb	sy
 801400a:	f3bf 8f4f 	dsb	sy
 801400e:	b662      	cpsie	i
 8014010:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014012:	bf00      	nop
 8014014:	bf00      	nop
 8014016:	e7fd      	b.n	8014014 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014018:	68bb      	ldr	r3, [r7, #8]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d103      	bne.n	8014026 <xQueueGenericSendFromISR+0x42>
 801401e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014022:	2b00      	cmp	r3, #0
 8014024:	d101      	bne.n	801402a <xQueueGenericSendFromISR+0x46>
 8014026:	2301      	movs	r3, #1
 8014028:	e000      	b.n	801402c <xQueueGenericSendFromISR+0x48>
 801402a:	2300      	movs	r3, #0
 801402c:	2b00      	cmp	r3, #0
 801402e:	d10d      	bne.n	801404c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8014030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014034:	b672      	cpsid	i
 8014036:	f383 8811 	msr	BASEPRI, r3
 801403a:	f3bf 8f6f 	isb	sy
 801403e:	f3bf 8f4f 	dsb	sy
 8014042:	b662      	cpsie	i
 8014044:	623b      	str	r3, [r7, #32]
}
 8014046:	bf00      	nop
 8014048:	bf00      	nop
 801404a:	e7fd      	b.n	8014048 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801404c:	683b      	ldr	r3, [r7, #0]
 801404e:	2b02      	cmp	r3, #2
 8014050:	d103      	bne.n	801405a <xQueueGenericSendFromISR+0x76>
 8014052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014056:	2b01      	cmp	r3, #1
 8014058:	d101      	bne.n	801405e <xQueueGenericSendFromISR+0x7a>
 801405a:	2301      	movs	r3, #1
 801405c:	e000      	b.n	8014060 <xQueueGenericSendFromISR+0x7c>
 801405e:	2300      	movs	r3, #0
 8014060:	2b00      	cmp	r3, #0
 8014062:	d10d      	bne.n	8014080 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8014064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014068:	b672      	cpsid	i
 801406a:	f383 8811 	msr	BASEPRI, r3
 801406e:	f3bf 8f6f 	isb	sy
 8014072:	f3bf 8f4f 	dsb	sy
 8014076:	b662      	cpsie	i
 8014078:	61fb      	str	r3, [r7, #28]
}
 801407a:	bf00      	nop
 801407c:	bf00      	nop
 801407e:	e7fd      	b.n	801407c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014080:	f001 fabc 	bl	80155fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014084:	f3ef 8211 	mrs	r2, BASEPRI
 8014088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801408c:	b672      	cpsid	i
 801408e:	f383 8811 	msr	BASEPRI, r3
 8014092:	f3bf 8f6f 	isb	sy
 8014096:	f3bf 8f4f 	dsb	sy
 801409a:	b662      	cpsie	i
 801409c:	61ba      	str	r2, [r7, #24]
 801409e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80140a0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80140a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80140a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80140a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80140ac:	429a      	cmp	r2, r3
 80140ae:	d302      	bcc.n	80140b6 <xQueueGenericSendFromISR+0xd2>
 80140b0:	683b      	ldr	r3, [r7, #0]
 80140b2:	2b02      	cmp	r3, #2
 80140b4:	d12c      	bne.n	8014110 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80140b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80140bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80140c0:	683a      	ldr	r2, [r7, #0]
 80140c2:	68b9      	ldr	r1, [r7, #8]
 80140c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80140c6:	f000 f872 	bl	80141ae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80140ca:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80140ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140d2:	d112      	bne.n	80140fa <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80140d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d016      	beq.n	801410a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80140dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140de:	3324      	adds	r3, #36	@ 0x24
 80140e0:	4618      	mov	r0, r3
 80140e2:	f000 fdb9 	bl	8014c58 <xTaskRemoveFromEventList>
 80140e6:	4603      	mov	r3, r0
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d00e      	beq.n	801410a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d00b      	beq.n	801410a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	2201      	movs	r2, #1
 80140f6:	601a      	str	r2, [r3, #0]
 80140f8:	e007      	b.n	801410a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80140fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80140fe:	3301      	adds	r3, #1
 8014100:	b2db      	uxtb	r3, r3
 8014102:	b25a      	sxtb	r2, r3
 8014104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014106:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801410a:	2301      	movs	r3, #1
 801410c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 801410e:	e001      	b.n	8014114 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014110:	2300      	movs	r3, #0
 8014112:	637b      	str	r3, [r7, #52]	@ 0x34
 8014114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014116:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014118:	693b      	ldr	r3, [r7, #16]
 801411a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801411e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8014122:	4618      	mov	r0, r3
 8014124:	3738      	adds	r7, #56	@ 0x38
 8014126:	46bd      	mov	sp, r7
 8014128:	bd80      	pop	{r7, pc}

0801412a <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 801412a:	b580      	push	{r7, lr}
 801412c:	b084      	sub	sp, #16
 801412e:	af00      	add	r7, sp, #0
 8014130:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d10d      	bne.n	8014154 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8014138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801413c:	b672      	cpsid	i
 801413e:	f383 8811 	msr	BASEPRI, r3
 8014142:	f3bf 8f6f 	isb	sy
 8014146:	f3bf 8f4f 	dsb	sy
 801414a:	b662      	cpsie	i
 801414c:	60bb      	str	r3, [r7, #8]
}
 801414e:	bf00      	nop
 8014150:	bf00      	nop
 8014152:	e7fd      	b.n	8014150 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8014154:	f001 f96a 	bl	801542c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801415c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 801415e:	f001 f99b 	bl	8015498 <vPortExitCritical>

	return uxReturn;
 8014162:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014164:	4618      	mov	r0, r3
 8014166:	3710      	adds	r7, #16
 8014168:	46bd      	mov	sp, r7
 801416a:	bd80      	pop	{r7, pc}

0801416c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 801416c:	b480      	push	{r7}
 801416e:	b087      	sub	sp, #28
 8014170:	af00      	add	r7, sp, #0
 8014172:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8014178:	697b      	ldr	r3, [r7, #20]
 801417a:	2b00      	cmp	r3, #0
 801417c:	d10d      	bne.n	801419a <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 801417e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014182:	b672      	cpsid	i
 8014184:	f383 8811 	msr	BASEPRI, r3
 8014188:	f3bf 8f6f 	isb	sy
 801418c:	f3bf 8f4f 	dsb	sy
 8014190:	b662      	cpsie	i
 8014192:	60fb      	str	r3, [r7, #12]
}
 8014194:	bf00      	nop
 8014196:	bf00      	nop
 8014198:	e7fd      	b.n	8014196 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 801419a:	697b      	ldr	r3, [r7, #20]
 801419c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801419e:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80141a0:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80141a2:	4618      	mov	r0, r3
 80141a4:	371c      	adds	r7, #28
 80141a6:	46bd      	mov	sp, r7
 80141a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ac:	4770      	bx	lr

080141ae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80141ae:	b580      	push	{r7, lr}
 80141b0:	b086      	sub	sp, #24
 80141b2:	af00      	add	r7, sp, #0
 80141b4:	60f8      	str	r0, [r7, #12]
 80141b6:	60b9      	str	r1, [r7, #8]
 80141b8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80141ba:	2300      	movs	r3, #0
 80141bc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80141c2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d10d      	bne.n	80141e8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d14d      	bne.n	8014270 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	689b      	ldr	r3, [r3, #8]
 80141d8:	4618      	mov	r0, r3
 80141da:	f000 ff25 	bl	8015028 <xTaskPriorityDisinherit>
 80141de:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	2200      	movs	r2, #0
 80141e4:	609a      	str	r2, [r3, #8]
 80141e6:	e043      	b.n	8014270 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d119      	bne.n	8014222 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	6858      	ldr	r0, [r3, #4]
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141f6:	461a      	mov	r2, r3
 80141f8:	68b9      	ldr	r1, [r7, #8]
 80141fa:	f001 fe83 	bl	8015f04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	685a      	ldr	r2, [r3, #4]
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014206:	441a      	add	r2, r3
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	685a      	ldr	r2, [r3, #4]
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	689b      	ldr	r3, [r3, #8]
 8014214:	429a      	cmp	r2, r3
 8014216:	d32b      	bcc.n	8014270 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	681a      	ldr	r2, [r3, #0]
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	605a      	str	r2, [r3, #4]
 8014220:	e026      	b.n	8014270 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	68d8      	ldr	r0, [r3, #12]
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801422a:	461a      	mov	r2, r3
 801422c:	68b9      	ldr	r1, [r7, #8]
 801422e:	f001 fe69 	bl	8015f04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	68da      	ldr	r2, [r3, #12]
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801423a:	425b      	negs	r3, r3
 801423c:	441a      	add	r2, r3
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	68da      	ldr	r2, [r3, #12]
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	429a      	cmp	r2, r3
 801424c:	d207      	bcs.n	801425e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	689a      	ldr	r2, [r3, #8]
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014256:	425b      	negs	r3, r3
 8014258:	441a      	add	r2, r3
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	2b02      	cmp	r3, #2
 8014262:	d105      	bne.n	8014270 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014264:	693b      	ldr	r3, [r7, #16]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d002      	beq.n	8014270 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801426a:	693b      	ldr	r3, [r7, #16]
 801426c:	3b01      	subs	r3, #1
 801426e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014270:	693b      	ldr	r3, [r7, #16]
 8014272:	1c5a      	adds	r2, r3, #1
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8014278:	697b      	ldr	r3, [r7, #20]
}
 801427a:	4618      	mov	r0, r3
 801427c:	3718      	adds	r7, #24
 801427e:	46bd      	mov	sp, r7
 8014280:	bd80      	pop	{r7, pc}

08014282 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014282:	b580      	push	{r7, lr}
 8014284:	b084      	sub	sp, #16
 8014286:	af00      	add	r7, sp, #0
 8014288:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801428a:	f001 f8cf 	bl	801542c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014294:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014296:	e011      	b.n	80142bc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801429c:	2b00      	cmp	r3, #0
 801429e:	d012      	beq.n	80142c6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	3324      	adds	r3, #36	@ 0x24
 80142a4:	4618      	mov	r0, r3
 80142a6:	f000 fcd7 	bl	8014c58 <xTaskRemoveFromEventList>
 80142aa:	4603      	mov	r3, r0
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d001      	beq.n	80142b4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80142b0:	f000 fdb6 	bl	8014e20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80142b4:	7bfb      	ldrb	r3, [r7, #15]
 80142b6:	3b01      	subs	r3, #1
 80142b8:	b2db      	uxtb	r3, r3
 80142ba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80142bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	dce9      	bgt.n	8014298 <prvUnlockQueue+0x16>
 80142c4:	e000      	b.n	80142c8 <prvUnlockQueue+0x46>
					break;
 80142c6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	22ff      	movs	r2, #255	@ 0xff
 80142cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80142d0:	f001 f8e2 	bl	8015498 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80142d4:	f001 f8aa 	bl	801542c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80142de:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80142e0:	e011      	b.n	8014306 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	691b      	ldr	r3, [r3, #16]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d012      	beq.n	8014310 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	3310      	adds	r3, #16
 80142ee:	4618      	mov	r0, r3
 80142f0:	f000 fcb2 	bl	8014c58 <xTaskRemoveFromEventList>
 80142f4:	4603      	mov	r3, r0
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d001      	beq.n	80142fe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80142fa:	f000 fd91 	bl	8014e20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80142fe:	7bbb      	ldrb	r3, [r7, #14]
 8014300:	3b01      	subs	r3, #1
 8014302:	b2db      	uxtb	r3, r3
 8014304:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014306:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801430a:	2b00      	cmp	r3, #0
 801430c:	dce9      	bgt.n	80142e2 <prvUnlockQueue+0x60>
 801430e:	e000      	b.n	8014312 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014310:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	22ff      	movs	r2, #255	@ 0xff
 8014316:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801431a:	f001 f8bd 	bl	8015498 <vPortExitCritical>
}
 801431e:	bf00      	nop
 8014320:	3710      	adds	r7, #16
 8014322:	46bd      	mov	sp, r7
 8014324:	bd80      	pop	{r7, pc}

08014326 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014326:	b580      	push	{r7, lr}
 8014328:	b084      	sub	sp, #16
 801432a:	af00      	add	r7, sp, #0
 801432c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801432e:	f001 f87d 	bl	801542c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801433a:	429a      	cmp	r2, r3
 801433c:	d102      	bne.n	8014344 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801433e:	2301      	movs	r3, #1
 8014340:	60fb      	str	r3, [r7, #12]
 8014342:	e001      	b.n	8014348 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014344:	2300      	movs	r3, #0
 8014346:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014348:	f001 f8a6 	bl	8015498 <vPortExitCritical>

	return xReturn;
 801434c:	68fb      	ldr	r3, [r7, #12]
}
 801434e:	4618      	mov	r0, r3
 8014350:	3710      	adds	r7, #16
 8014352:	46bd      	mov	sp, r7
 8014354:	bd80      	pop	{r7, pc}

08014356 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014356:	b580      	push	{r7, lr}
 8014358:	b08e      	sub	sp, #56	@ 0x38
 801435a:	af04      	add	r7, sp, #16
 801435c:	60f8      	str	r0, [r7, #12]
 801435e:	60b9      	str	r1, [r7, #8]
 8014360:	607a      	str	r2, [r7, #4]
 8014362:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014366:	2b00      	cmp	r3, #0
 8014368:	d10d      	bne.n	8014386 <xTaskCreateStatic+0x30>
	__asm volatile
 801436a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801436e:	b672      	cpsid	i
 8014370:	f383 8811 	msr	BASEPRI, r3
 8014374:	f3bf 8f6f 	isb	sy
 8014378:	f3bf 8f4f 	dsb	sy
 801437c:	b662      	cpsie	i
 801437e:	623b      	str	r3, [r7, #32]
}
 8014380:	bf00      	nop
 8014382:	bf00      	nop
 8014384:	e7fd      	b.n	8014382 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8014386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014388:	2b00      	cmp	r3, #0
 801438a:	d10d      	bne.n	80143a8 <xTaskCreateStatic+0x52>
	__asm volatile
 801438c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014390:	b672      	cpsid	i
 8014392:	f383 8811 	msr	BASEPRI, r3
 8014396:	f3bf 8f6f 	isb	sy
 801439a:	f3bf 8f4f 	dsb	sy
 801439e:	b662      	cpsie	i
 80143a0:	61fb      	str	r3, [r7, #28]
}
 80143a2:	bf00      	nop
 80143a4:	bf00      	nop
 80143a6:	e7fd      	b.n	80143a4 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80143a8:	2358      	movs	r3, #88	@ 0x58
 80143aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80143ac:	693b      	ldr	r3, [r7, #16]
 80143ae:	2b58      	cmp	r3, #88	@ 0x58
 80143b0:	d00d      	beq.n	80143ce <xTaskCreateStatic+0x78>
	__asm volatile
 80143b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143b6:	b672      	cpsid	i
 80143b8:	f383 8811 	msr	BASEPRI, r3
 80143bc:	f3bf 8f6f 	isb	sy
 80143c0:	f3bf 8f4f 	dsb	sy
 80143c4:	b662      	cpsie	i
 80143c6:	61bb      	str	r3, [r7, #24]
}
 80143c8:	bf00      	nop
 80143ca:	bf00      	nop
 80143cc:	e7fd      	b.n	80143ca <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80143ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80143d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d01e      	beq.n	8014414 <xTaskCreateStatic+0xbe>
 80143d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d01b      	beq.n	8014414 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80143dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143de:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80143e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80143e4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80143e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143e8:	2202      	movs	r2, #2
 80143ea:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80143ee:	2300      	movs	r3, #0
 80143f0:	9303      	str	r3, [sp, #12]
 80143f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143f4:	9302      	str	r3, [sp, #8]
 80143f6:	f107 0314 	add.w	r3, r7, #20
 80143fa:	9301      	str	r3, [sp, #4]
 80143fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143fe:	9300      	str	r3, [sp, #0]
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	687a      	ldr	r2, [r7, #4]
 8014404:	68b9      	ldr	r1, [r7, #8]
 8014406:	68f8      	ldr	r0, [r7, #12]
 8014408:	f000 f850 	bl	80144ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801440c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801440e:	f000 f8e3 	bl	80145d8 <prvAddNewTaskToReadyList>
 8014412:	e001      	b.n	8014418 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8014414:	2300      	movs	r3, #0
 8014416:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014418:	697b      	ldr	r3, [r7, #20]
	}
 801441a:	4618      	mov	r0, r3
 801441c:	3728      	adds	r7, #40	@ 0x28
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}

08014422 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014422:	b580      	push	{r7, lr}
 8014424:	b08c      	sub	sp, #48	@ 0x30
 8014426:	af04      	add	r7, sp, #16
 8014428:	60f8      	str	r0, [r7, #12]
 801442a:	60b9      	str	r1, [r7, #8]
 801442c:	603b      	str	r3, [r7, #0]
 801442e:	4613      	mov	r3, r2
 8014430:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014432:	88fb      	ldrh	r3, [r7, #6]
 8014434:	009b      	lsls	r3, r3, #2
 8014436:	4618      	mov	r0, r3
 8014438:	f001 f926 	bl	8015688 <pvPortMalloc>
 801443c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801443e:	697b      	ldr	r3, [r7, #20]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d00e      	beq.n	8014462 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014444:	2058      	movs	r0, #88	@ 0x58
 8014446:	f001 f91f 	bl	8015688 <pvPortMalloc>
 801444a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801444c:	69fb      	ldr	r3, [r7, #28]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d003      	beq.n	801445a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014452:	69fb      	ldr	r3, [r7, #28]
 8014454:	697a      	ldr	r2, [r7, #20]
 8014456:	631a      	str	r2, [r3, #48]	@ 0x30
 8014458:	e005      	b.n	8014466 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801445a:	6978      	ldr	r0, [r7, #20]
 801445c:	f001 f9e6 	bl	801582c <vPortFree>
 8014460:	e001      	b.n	8014466 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014462:	2300      	movs	r3, #0
 8014464:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014466:	69fb      	ldr	r3, [r7, #28]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d017      	beq.n	801449c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801446c:	69fb      	ldr	r3, [r7, #28]
 801446e:	2200      	movs	r2, #0
 8014470:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014474:	88fa      	ldrh	r2, [r7, #6]
 8014476:	2300      	movs	r3, #0
 8014478:	9303      	str	r3, [sp, #12]
 801447a:	69fb      	ldr	r3, [r7, #28]
 801447c:	9302      	str	r3, [sp, #8]
 801447e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014480:	9301      	str	r3, [sp, #4]
 8014482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014484:	9300      	str	r3, [sp, #0]
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	68b9      	ldr	r1, [r7, #8]
 801448a:	68f8      	ldr	r0, [r7, #12]
 801448c:	f000 f80e 	bl	80144ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014490:	69f8      	ldr	r0, [r7, #28]
 8014492:	f000 f8a1 	bl	80145d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014496:	2301      	movs	r3, #1
 8014498:	61bb      	str	r3, [r7, #24]
 801449a:	e002      	b.n	80144a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801449c:	f04f 33ff 	mov.w	r3, #4294967295
 80144a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80144a2:	69bb      	ldr	r3, [r7, #24]
	}
 80144a4:	4618      	mov	r0, r3
 80144a6:	3720      	adds	r7, #32
 80144a8:	46bd      	mov	sp, r7
 80144aa:	bd80      	pop	{r7, pc}

080144ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b088      	sub	sp, #32
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	60f8      	str	r0, [r7, #12]
 80144b4:	60b9      	str	r1, [r7, #8]
 80144b6:	607a      	str	r2, [r7, #4]
 80144b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80144ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144bc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	009b      	lsls	r3, r3, #2
 80144c2:	461a      	mov	r2, r3
 80144c4:	21a5      	movs	r1, #165	@ 0xa5
 80144c6:	f001 fcaf 	bl	8015e28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80144ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80144ce:	6879      	ldr	r1, [r7, #4]
 80144d0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80144d4:	440b      	add	r3, r1
 80144d6:	009b      	lsls	r3, r3, #2
 80144d8:	4413      	add	r3, r2
 80144da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80144dc:	69bb      	ldr	r3, [r7, #24]
 80144de:	f023 0307 	bic.w	r3, r3, #7
 80144e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80144e4:	69bb      	ldr	r3, [r7, #24]
 80144e6:	f003 0307 	and.w	r3, r3, #7
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d00d      	beq.n	801450a <prvInitialiseNewTask+0x5e>
	__asm volatile
 80144ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144f2:	b672      	cpsid	i
 80144f4:	f383 8811 	msr	BASEPRI, r3
 80144f8:	f3bf 8f6f 	isb	sy
 80144fc:	f3bf 8f4f 	dsb	sy
 8014500:	b662      	cpsie	i
 8014502:	617b      	str	r3, [r7, #20]
}
 8014504:	bf00      	nop
 8014506:	bf00      	nop
 8014508:	e7fd      	b.n	8014506 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801450a:	68bb      	ldr	r3, [r7, #8]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d01f      	beq.n	8014550 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014510:	2300      	movs	r3, #0
 8014512:	61fb      	str	r3, [r7, #28]
 8014514:	e012      	b.n	801453c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014516:	68ba      	ldr	r2, [r7, #8]
 8014518:	69fb      	ldr	r3, [r7, #28]
 801451a:	4413      	add	r3, r2
 801451c:	7819      	ldrb	r1, [r3, #0]
 801451e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014520:	69fb      	ldr	r3, [r7, #28]
 8014522:	4413      	add	r3, r2
 8014524:	3334      	adds	r3, #52	@ 0x34
 8014526:	460a      	mov	r2, r1
 8014528:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801452a:	68ba      	ldr	r2, [r7, #8]
 801452c:	69fb      	ldr	r3, [r7, #28]
 801452e:	4413      	add	r3, r2
 8014530:	781b      	ldrb	r3, [r3, #0]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d006      	beq.n	8014544 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014536:	69fb      	ldr	r3, [r7, #28]
 8014538:	3301      	adds	r3, #1
 801453a:	61fb      	str	r3, [r7, #28]
 801453c:	69fb      	ldr	r3, [r7, #28]
 801453e:	2b0f      	cmp	r3, #15
 8014540:	d9e9      	bls.n	8014516 <prvInitialiseNewTask+0x6a>
 8014542:	e000      	b.n	8014546 <prvInitialiseNewTask+0x9a>
			{
				break;
 8014544:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014548:	2200      	movs	r2, #0
 801454a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801454e:	e003      	b.n	8014558 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014552:	2200      	movs	r2, #0
 8014554:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801455a:	2b06      	cmp	r3, #6
 801455c:	d901      	bls.n	8014562 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801455e:	2306      	movs	r3, #6
 8014560:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014564:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014566:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801456a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801456c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801456e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014570:	2200      	movs	r2, #0
 8014572:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014576:	3304      	adds	r3, #4
 8014578:	4618      	mov	r0, r3
 801457a:	f7ff fa3f 	bl	80139fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801457e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014580:	3318      	adds	r3, #24
 8014582:	4618      	mov	r0, r3
 8014584:	f7ff fa3a 	bl	80139fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801458a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801458c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801458e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014590:	f1c3 0207 	rsb	r2, r3, #7
 8014594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014596:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801459a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801459c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 801459e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145a0:	2200      	movs	r2, #0
 80145a2:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80145a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145a6:	2200      	movs	r2, #0
 80145a8:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80145aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145ac:	2200      	movs	r2, #0
 80145ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80145b2:	683a      	ldr	r2, [r7, #0]
 80145b4:	68f9      	ldr	r1, [r7, #12]
 80145b6:	69b8      	ldr	r0, [r7, #24]
 80145b8:	f000 fe28 	bl	801520c <pxPortInitialiseStack>
 80145bc:	4602      	mov	r2, r0
 80145be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80145c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d002      	beq.n	80145ce <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80145c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80145cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80145ce:	bf00      	nop
 80145d0:	3720      	adds	r7, #32
 80145d2:	46bd      	mov	sp, r7
 80145d4:	bd80      	pop	{r7, pc}
	...

080145d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80145d8:	b580      	push	{r7, lr}
 80145da:	b082      	sub	sp, #8
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80145e0:	f000 ff24 	bl	801542c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80145e4:	4b2a      	ldr	r3, [pc, #168]	@ (8014690 <prvAddNewTaskToReadyList+0xb8>)
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	3301      	adds	r3, #1
 80145ea:	4a29      	ldr	r2, [pc, #164]	@ (8014690 <prvAddNewTaskToReadyList+0xb8>)
 80145ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80145ee:	4b29      	ldr	r3, [pc, #164]	@ (8014694 <prvAddNewTaskToReadyList+0xbc>)
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d109      	bne.n	801460a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80145f6:	4a27      	ldr	r2, [pc, #156]	@ (8014694 <prvAddNewTaskToReadyList+0xbc>)
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80145fc:	4b24      	ldr	r3, [pc, #144]	@ (8014690 <prvAddNewTaskToReadyList+0xb8>)
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	2b01      	cmp	r3, #1
 8014602:	d110      	bne.n	8014626 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014604:	f000 fc32 	bl	8014e6c <prvInitialiseTaskLists>
 8014608:	e00d      	b.n	8014626 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801460a:	4b23      	ldr	r3, [pc, #140]	@ (8014698 <prvAddNewTaskToReadyList+0xc0>)
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d109      	bne.n	8014626 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014612:	4b20      	ldr	r3, [pc, #128]	@ (8014694 <prvAddNewTaskToReadyList+0xbc>)
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801461c:	429a      	cmp	r2, r3
 801461e:	d802      	bhi.n	8014626 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014620:	4a1c      	ldr	r2, [pc, #112]	@ (8014694 <prvAddNewTaskToReadyList+0xbc>)
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014626:	4b1d      	ldr	r3, [pc, #116]	@ (801469c <prvAddNewTaskToReadyList+0xc4>)
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	3301      	adds	r3, #1
 801462c:	4a1b      	ldr	r2, [pc, #108]	@ (801469c <prvAddNewTaskToReadyList+0xc4>)
 801462e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014634:	2201      	movs	r2, #1
 8014636:	409a      	lsls	r2, r3
 8014638:	4b19      	ldr	r3, [pc, #100]	@ (80146a0 <prvAddNewTaskToReadyList+0xc8>)
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	4313      	orrs	r3, r2
 801463e:	4a18      	ldr	r2, [pc, #96]	@ (80146a0 <prvAddNewTaskToReadyList+0xc8>)
 8014640:	6013      	str	r3, [r2, #0]
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014646:	4613      	mov	r3, r2
 8014648:	009b      	lsls	r3, r3, #2
 801464a:	4413      	add	r3, r2
 801464c:	009b      	lsls	r3, r3, #2
 801464e:	4a15      	ldr	r2, [pc, #84]	@ (80146a4 <prvAddNewTaskToReadyList+0xcc>)
 8014650:	441a      	add	r2, r3
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	3304      	adds	r3, #4
 8014656:	4619      	mov	r1, r3
 8014658:	4610      	mov	r0, r2
 801465a:	f7ff f9dc 	bl	8013a16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801465e:	f000 ff1b 	bl	8015498 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014662:	4b0d      	ldr	r3, [pc, #52]	@ (8014698 <prvAddNewTaskToReadyList+0xc0>)
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	2b00      	cmp	r3, #0
 8014668:	d00e      	beq.n	8014688 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801466a:	4b0a      	ldr	r3, [pc, #40]	@ (8014694 <prvAddNewTaskToReadyList+0xbc>)
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014674:	429a      	cmp	r2, r3
 8014676:	d207      	bcs.n	8014688 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014678:	4b0b      	ldr	r3, [pc, #44]	@ (80146a8 <prvAddNewTaskToReadyList+0xd0>)
 801467a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801467e:	601a      	str	r2, [r3, #0]
 8014680:	f3bf 8f4f 	dsb	sy
 8014684:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014688:	bf00      	nop
 801468a:	3708      	adds	r7, #8
 801468c:	46bd      	mov	sp, r7
 801468e:	bd80      	pop	{r7, pc}
 8014690:	20001af4 	.word	0x20001af4
 8014694:	200019f4 	.word	0x200019f4
 8014698:	20001b00 	.word	0x20001b00
 801469c:	20001b10 	.word	0x20001b10
 80146a0:	20001afc 	.word	0x20001afc
 80146a4:	200019f8 	.word	0x200019f8
 80146a8:	e000ed04 	.word	0xe000ed04

080146ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b084      	sub	sp, #16
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80146b4:	2300      	movs	r3, #0
 80146b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d01a      	beq.n	80146f4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80146be:	4b15      	ldr	r3, [pc, #84]	@ (8014714 <vTaskDelay+0x68>)
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d00d      	beq.n	80146e2 <vTaskDelay+0x36>
	__asm volatile
 80146c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146ca:	b672      	cpsid	i
 80146cc:	f383 8811 	msr	BASEPRI, r3
 80146d0:	f3bf 8f6f 	isb	sy
 80146d4:	f3bf 8f4f 	dsb	sy
 80146d8:	b662      	cpsie	i
 80146da:	60bb      	str	r3, [r7, #8]
}
 80146dc:	bf00      	nop
 80146de:	bf00      	nop
 80146e0:	e7fd      	b.n	80146de <vTaskDelay+0x32>
			vTaskSuspendAll();
 80146e2:	f000 f881 	bl	80147e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80146e6:	2100      	movs	r1, #0
 80146e8:	6878      	ldr	r0, [r7, #4]
 80146ea:	f000 fd29 	bl	8015140 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80146ee:	f000 f889 	bl	8014804 <xTaskResumeAll>
 80146f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d107      	bne.n	801470a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80146fa:	4b07      	ldr	r3, [pc, #28]	@ (8014718 <vTaskDelay+0x6c>)
 80146fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014700:	601a      	str	r2, [r3, #0]
 8014702:	f3bf 8f4f 	dsb	sy
 8014706:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801470a:	bf00      	nop
 801470c:	3710      	adds	r7, #16
 801470e:	46bd      	mov	sp, r7
 8014710:	bd80      	pop	{r7, pc}
 8014712:	bf00      	nop
 8014714:	20001b1c 	.word	0x20001b1c
 8014718:	e000ed04 	.word	0xe000ed04

0801471c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801471c:	b580      	push	{r7, lr}
 801471e:	b08a      	sub	sp, #40	@ 0x28
 8014720:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014722:	2300      	movs	r3, #0
 8014724:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014726:	2300      	movs	r3, #0
 8014728:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801472a:	463a      	mov	r2, r7
 801472c:	1d39      	adds	r1, r7, #4
 801472e:	f107 0308 	add.w	r3, r7, #8
 8014732:	4618      	mov	r0, r3
 8014734:	f7ed f976 	bl	8001a24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014738:	6839      	ldr	r1, [r7, #0]
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	68ba      	ldr	r2, [r7, #8]
 801473e:	9202      	str	r2, [sp, #8]
 8014740:	9301      	str	r3, [sp, #4]
 8014742:	2300      	movs	r3, #0
 8014744:	9300      	str	r3, [sp, #0]
 8014746:	2300      	movs	r3, #0
 8014748:	460a      	mov	r2, r1
 801474a:	4921      	ldr	r1, [pc, #132]	@ (80147d0 <vTaskStartScheduler+0xb4>)
 801474c:	4821      	ldr	r0, [pc, #132]	@ (80147d4 <vTaskStartScheduler+0xb8>)
 801474e:	f7ff fe02 	bl	8014356 <xTaskCreateStatic>
 8014752:	4603      	mov	r3, r0
 8014754:	4a20      	ldr	r2, [pc, #128]	@ (80147d8 <vTaskStartScheduler+0xbc>)
 8014756:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014758:	4b1f      	ldr	r3, [pc, #124]	@ (80147d8 <vTaskStartScheduler+0xbc>)
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d002      	beq.n	8014766 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014760:	2301      	movs	r3, #1
 8014762:	617b      	str	r3, [r7, #20]
 8014764:	e001      	b.n	801476a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014766:	2300      	movs	r3, #0
 8014768:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801476a:	697b      	ldr	r3, [r7, #20]
 801476c:	2b01      	cmp	r3, #1
 801476e:	d118      	bne.n	80147a2 <vTaskStartScheduler+0x86>
	__asm volatile
 8014770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014774:	b672      	cpsid	i
 8014776:	f383 8811 	msr	BASEPRI, r3
 801477a:	f3bf 8f6f 	isb	sy
 801477e:	f3bf 8f4f 	dsb	sy
 8014782:	b662      	cpsie	i
 8014784:	613b      	str	r3, [r7, #16]
}
 8014786:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014788:	4b14      	ldr	r3, [pc, #80]	@ (80147dc <vTaskStartScheduler+0xc0>)
 801478a:	f04f 32ff 	mov.w	r2, #4294967295
 801478e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014790:	4b13      	ldr	r3, [pc, #76]	@ (80147e0 <vTaskStartScheduler+0xc4>)
 8014792:	2201      	movs	r2, #1
 8014794:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014796:	4b13      	ldr	r3, [pc, #76]	@ (80147e4 <vTaskStartScheduler+0xc8>)
 8014798:	2200      	movs	r2, #0
 801479a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801479c:	f000 fdc8 	bl	8015330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80147a0:	e011      	b.n	80147c6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80147a2:	697b      	ldr	r3, [r7, #20]
 80147a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147a8:	d10d      	bne.n	80147c6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80147aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147ae:	b672      	cpsid	i
 80147b0:	f383 8811 	msr	BASEPRI, r3
 80147b4:	f3bf 8f6f 	isb	sy
 80147b8:	f3bf 8f4f 	dsb	sy
 80147bc:	b662      	cpsie	i
 80147be:	60fb      	str	r3, [r7, #12]
}
 80147c0:	bf00      	nop
 80147c2:	bf00      	nop
 80147c4:	e7fd      	b.n	80147c2 <vTaskStartScheduler+0xa6>
}
 80147c6:	bf00      	nop
 80147c8:	3718      	adds	r7, #24
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}
 80147ce:	bf00      	nop
 80147d0:	08019e40 	.word	0x08019e40
 80147d4:	08014e39 	.word	0x08014e39
 80147d8:	20001b18 	.word	0x20001b18
 80147dc:	20001b14 	.word	0x20001b14
 80147e0:	20001b00 	.word	0x20001b00
 80147e4:	20001af8 	.word	0x20001af8

080147e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80147e8:	b480      	push	{r7}
 80147ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80147ec:	4b04      	ldr	r3, [pc, #16]	@ (8014800 <vTaskSuspendAll+0x18>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	3301      	adds	r3, #1
 80147f2:	4a03      	ldr	r2, [pc, #12]	@ (8014800 <vTaskSuspendAll+0x18>)
 80147f4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80147f6:	bf00      	nop
 80147f8:	46bd      	mov	sp, r7
 80147fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fe:	4770      	bx	lr
 8014800:	20001b1c 	.word	0x20001b1c

08014804 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b084      	sub	sp, #16
 8014808:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801480a:	2300      	movs	r3, #0
 801480c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801480e:	2300      	movs	r3, #0
 8014810:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014812:	4b43      	ldr	r3, [pc, #268]	@ (8014920 <xTaskResumeAll+0x11c>)
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d10d      	bne.n	8014836 <xTaskResumeAll+0x32>
	__asm volatile
 801481a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801481e:	b672      	cpsid	i
 8014820:	f383 8811 	msr	BASEPRI, r3
 8014824:	f3bf 8f6f 	isb	sy
 8014828:	f3bf 8f4f 	dsb	sy
 801482c:	b662      	cpsie	i
 801482e:	603b      	str	r3, [r7, #0]
}
 8014830:	bf00      	nop
 8014832:	bf00      	nop
 8014834:	e7fd      	b.n	8014832 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014836:	f000 fdf9 	bl	801542c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801483a:	4b39      	ldr	r3, [pc, #228]	@ (8014920 <xTaskResumeAll+0x11c>)
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	3b01      	subs	r3, #1
 8014840:	4a37      	ldr	r2, [pc, #220]	@ (8014920 <xTaskResumeAll+0x11c>)
 8014842:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014844:	4b36      	ldr	r3, [pc, #216]	@ (8014920 <xTaskResumeAll+0x11c>)
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d161      	bne.n	8014910 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801484c:	4b35      	ldr	r3, [pc, #212]	@ (8014924 <xTaskResumeAll+0x120>)
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d05d      	beq.n	8014910 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014854:	e02e      	b.n	80148b4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014856:	4b34      	ldr	r3, [pc, #208]	@ (8014928 <xTaskResumeAll+0x124>)
 8014858:	68db      	ldr	r3, [r3, #12]
 801485a:	68db      	ldr	r3, [r3, #12]
 801485c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	3318      	adds	r3, #24
 8014862:	4618      	mov	r0, r3
 8014864:	f7ff f934 	bl	8013ad0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	3304      	adds	r3, #4
 801486c:	4618      	mov	r0, r3
 801486e:	f7ff f92f 	bl	8013ad0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014876:	2201      	movs	r2, #1
 8014878:	409a      	lsls	r2, r3
 801487a:	4b2c      	ldr	r3, [pc, #176]	@ (801492c <xTaskResumeAll+0x128>)
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	4313      	orrs	r3, r2
 8014880:	4a2a      	ldr	r2, [pc, #168]	@ (801492c <xTaskResumeAll+0x128>)
 8014882:	6013      	str	r3, [r2, #0]
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014888:	4613      	mov	r3, r2
 801488a:	009b      	lsls	r3, r3, #2
 801488c:	4413      	add	r3, r2
 801488e:	009b      	lsls	r3, r3, #2
 8014890:	4a27      	ldr	r2, [pc, #156]	@ (8014930 <xTaskResumeAll+0x12c>)
 8014892:	441a      	add	r2, r3
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	3304      	adds	r3, #4
 8014898:	4619      	mov	r1, r3
 801489a:	4610      	mov	r0, r2
 801489c:	f7ff f8bb 	bl	8013a16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80148a4:	4b23      	ldr	r3, [pc, #140]	@ (8014934 <xTaskResumeAll+0x130>)
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148aa:	429a      	cmp	r2, r3
 80148ac:	d302      	bcc.n	80148b4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80148ae:	4b22      	ldr	r3, [pc, #136]	@ (8014938 <xTaskResumeAll+0x134>)
 80148b0:	2201      	movs	r2, #1
 80148b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80148b4:	4b1c      	ldr	r3, [pc, #112]	@ (8014928 <xTaskResumeAll+0x124>)
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d1cc      	bne.n	8014856 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d001      	beq.n	80148c6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80148c2:	f000 fb73 	bl	8014fac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80148c6:	4b1d      	ldr	r3, [pc, #116]	@ (801493c <xTaskResumeAll+0x138>)
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d010      	beq.n	80148f4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80148d2:	f000 f859 	bl	8014988 <xTaskIncrementTick>
 80148d6:	4603      	mov	r3, r0
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d002      	beq.n	80148e2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80148dc:	4b16      	ldr	r3, [pc, #88]	@ (8014938 <xTaskResumeAll+0x134>)
 80148de:	2201      	movs	r2, #1
 80148e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	3b01      	subs	r3, #1
 80148e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d1f1      	bne.n	80148d2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80148ee:	4b13      	ldr	r3, [pc, #76]	@ (801493c <xTaskResumeAll+0x138>)
 80148f0:	2200      	movs	r2, #0
 80148f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80148f4:	4b10      	ldr	r3, [pc, #64]	@ (8014938 <xTaskResumeAll+0x134>)
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d009      	beq.n	8014910 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80148fc:	2301      	movs	r3, #1
 80148fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014900:	4b0f      	ldr	r3, [pc, #60]	@ (8014940 <xTaskResumeAll+0x13c>)
 8014902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014906:	601a      	str	r2, [r3, #0]
 8014908:	f3bf 8f4f 	dsb	sy
 801490c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014910:	f000 fdc2 	bl	8015498 <vPortExitCritical>

	return xAlreadyYielded;
 8014914:	68bb      	ldr	r3, [r7, #8]
}
 8014916:	4618      	mov	r0, r3
 8014918:	3710      	adds	r7, #16
 801491a:	46bd      	mov	sp, r7
 801491c:	bd80      	pop	{r7, pc}
 801491e:	bf00      	nop
 8014920:	20001b1c 	.word	0x20001b1c
 8014924:	20001af4 	.word	0x20001af4
 8014928:	20001ab4 	.word	0x20001ab4
 801492c:	20001afc 	.word	0x20001afc
 8014930:	200019f8 	.word	0x200019f8
 8014934:	200019f4 	.word	0x200019f4
 8014938:	20001b08 	.word	0x20001b08
 801493c:	20001b04 	.word	0x20001b04
 8014940:	e000ed04 	.word	0xe000ed04

08014944 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014944:	b480      	push	{r7}
 8014946:	b083      	sub	sp, #12
 8014948:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801494a:	4b05      	ldr	r3, [pc, #20]	@ (8014960 <xTaskGetTickCount+0x1c>)
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014950:	687b      	ldr	r3, [r7, #4]
}
 8014952:	4618      	mov	r0, r3
 8014954:	370c      	adds	r7, #12
 8014956:	46bd      	mov	sp, r7
 8014958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495c:	4770      	bx	lr
 801495e:	bf00      	nop
 8014960:	20001af8 	.word	0x20001af8

08014964 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b082      	sub	sp, #8
 8014968:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801496a:	f000 fe47 	bl	80155fc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801496e:	2300      	movs	r3, #0
 8014970:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8014972:	4b04      	ldr	r3, [pc, #16]	@ (8014984 <xTaskGetTickCountFromISR+0x20>)
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014978:	683b      	ldr	r3, [r7, #0]
}
 801497a:	4618      	mov	r0, r3
 801497c:	3708      	adds	r7, #8
 801497e:	46bd      	mov	sp, r7
 8014980:	bd80      	pop	{r7, pc}
 8014982:	bf00      	nop
 8014984:	20001af8 	.word	0x20001af8

08014988 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b086      	sub	sp, #24
 801498c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801498e:	2300      	movs	r3, #0
 8014990:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014992:	4b50      	ldr	r3, [pc, #320]	@ (8014ad4 <xTaskIncrementTick+0x14c>)
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	2b00      	cmp	r3, #0
 8014998:	f040 808b 	bne.w	8014ab2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801499c:	4b4e      	ldr	r3, [pc, #312]	@ (8014ad8 <xTaskIncrementTick+0x150>)
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	3301      	adds	r3, #1
 80149a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80149a4:	4a4c      	ldr	r2, [pc, #304]	@ (8014ad8 <xTaskIncrementTick+0x150>)
 80149a6:	693b      	ldr	r3, [r7, #16]
 80149a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80149aa:	693b      	ldr	r3, [r7, #16]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d123      	bne.n	80149f8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80149b0:	4b4a      	ldr	r3, [pc, #296]	@ (8014adc <xTaskIncrementTick+0x154>)
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d00d      	beq.n	80149d6 <xTaskIncrementTick+0x4e>
	__asm volatile
 80149ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149be:	b672      	cpsid	i
 80149c0:	f383 8811 	msr	BASEPRI, r3
 80149c4:	f3bf 8f6f 	isb	sy
 80149c8:	f3bf 8f4f 	dsb	sy
 80149cc:	b662      	cpsie	i
 80149ce:	603b      	str	r3, [r7, #0]
}
 80149d0:	bf00      	nop
 80149d2:	bf00      	nop
 80149d4:	e7fd      	b.n	80149d2 <xTaskIncrementTick+0x4a>
 80149d6:	4b41      	ldr	r3, [pc, #260]	@ (8014adc <xTaskIncrementTick+0x154>)
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	60fb      	str	r3, [r7, #12]
 80149dc:	4b40      	ldr	r3, [pc, #256]	@ (8014ae0 <xTaskIncrementTick+0x158>)
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	4a3e      	ldr	r2, [pc, #248]	@ (8014adc <xTaskIncrementTick+0x154>)
 80149e2:	6013      	str	r3, [r2, #0]
 80149e4:	4a3e      	ldr	r2, [pc, #248]	@ (8014ae0 <xTaskIncrementTick+0x158>)
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	6013      	str	r3, [r2, #0]
 80149ea:	4b3e      	ldr	r3, [pc, #248]	@ (8014ae4 <xTaskIncrementTick+0x15c>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	3301      	adds	r3, #1
 80149f0:	4a3c      	ldr	r2, [pc, #240]	@ (8014ae4 <xTaskIncrementTick+0x15c>)
 80149f2:	6013      	str	r3, [r2, #0]
 80149f4:	f000 fada 	bl	8014fac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80149f8:	4b3b      	ldr	r3, [pc, #236]	@ (8014ae8 <xTaskIncrementTick+0x160>)
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	693a      	ldr	r2, [r7, #16]
 80149fe:	429a      	cmp	r2, r3
 8014a00:	d348      	bcc.n	8014a94 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a02:	4b36      	ldr	r3, [pc, #216]	@ (8014adc <xTaskIncrementTick+0x154>)
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d104      	bne.n	8014a16 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a0c:	4b36      	ldr	r3, [pc, #216]	@ (8014ae8 <xTaskIncrementTick+0x160>)
 8014a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8014a12:	601a      	str	r2, [r3, #0]
					break;
 8014a14:	e03e      	b.n	8014a94 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a16:	4b31      	ldr	r3, [pc, #196]	@ (8014adc <xTaskIncrementTick+0x154>)
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	68db      	ldr	r3, [r3, #12]
 8014a1c:	68db      	ldr	r3, [r3, #12]
 8014a1e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014a20:	68bb      	ldr	r3, [r7, #8]
 8014a22:	685b      	ldr	r3, [r3, #4]
 8014a24:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014a26:	693a      	ldr	r2, [r7, #16]
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	429a      	cmp	r2, r3
 8014a2c:	d203      	bcs.n	8014a36 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014a2e:	4a2e      	ldr	r2, [pc, #184]	@ (8014ae8 <xTaskIncrementTick+0x160>)
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014a34:	e02e      	b.n	8014a94 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a36:	68bb      	ldr	r3, [r7, #8]
 8014a38:	3304      	adds	r3, #4
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	f7ff f848 	bl	8013ad0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014a40:	68bb      	ldr	r3, [r7, #8]
 8014a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d004      	beq.n	8014a52 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014a48:	68bb      	ldr	r3, [r7, #8]
 8014a4a:	3318      	adds	r3, #24
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f7ff f83f 	bl	8013ad0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014a52:	68bb      	ldr	r3, [r7, #8]
 8014a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a56:	2201      	movs	r2, #1
 8014a58:	409a      	lsls	r2, r3
 8014a5a:	4b24      	ldr	r3, [pc, #144]	@ (8014aec <xTaskIncrementTick+0x164>)
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	4313      	orrs	r3, r2
 8014a60:	4a22      	ldr	r2, [pc, #136]	@ (8014aec <xTaskIncrementTick+0x164>)
 8014a62:	6013      	str	r3, [r2, #0]
 8014a64:	68bb      	ldr	r3, [r7, #8]
 8014a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a68:	4613      	mov	r3, r2
 8014a6a:	009b      	lsls	r3, r3, #2
 8014a6c:	4413      	add	r3, r2
 8014a6e:	009b      	lsls	r3, r3, #2
 8014a70:	4a1f      	ldr	r2, [pc, #124]	@ (8014af0 <xTaskIncrementTick+0x168>)
 8014a72:	441a      	add	r2, r3
 8014a74:	68bb      	ldr	r3, [r7, #8]
 8014a76:	3304      	adds	r3, #4
 8014a78:	4619      	mov	r1, r3
 8014a7a:	4610      	mov	r0, r2
 8014a7c:	f7fe ffcb 	bl	8013a16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014a80:	68bb      	ldr	r3, [r7, #8]
 8014a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a84:	4b1b      	ldr	r3, [pc, #108]	@ (8014af4 <xTaskIncrementTick+0x16c>)
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a8a:	429a      	cmp	r2, r3
 8014a8c:	d3b9      	bcc.n	8014a02 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8014a8e:	2301      	movs	r3, #1
 8014a90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a92:	e7b6      	b.n	8014a02 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014a94:	4b17      	ldr	r3, [pc, #92]	@ (8014af4 <xTaskIncrementTick+0x16c>)
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a9a:	4915      	ldr	r1, [pc, #84]	@ (8014af0 <xTaskIncrementTick+0x168>)
 8014a9c:	4613      	mov	r3, r2
 8014a9e:	009b      	lsls	r3, r3, #2
 8014aa0:	4413      	add	r3, r2
 8014aa2:	009b      	lsls	r3, r3, #2
 8014aa4:	440b      	add	r3, r1
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	2b01      	cmp	r3, #1
 8014aaa:	d907      	bls.n	8014abc <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8014aac:	2301      	movs	r3, #1
 8014aae:	617b      	str	r3, [r7, #20]
 8014ab0:	e004      	b.n	8014abc <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014ab2:	4b11      	ldr	r3, [pc, #68]	@ (8014af8 <xTaskIncrementTick+0x170>)
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	3301      	adds	r3, #1
 8014ab8:	4a0f      	ldr	r2, [pc, #60]	@ (8014af8 <xTaskIncrementTick+0x170>)
 8014aba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014abc:	4b0f      	ldr	r3, [pc, #60]	@ (8014afc <xTaskIncrementTick+0x174>)
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d001      	beq.n	8014ac8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8014ac4:	2301      	movs	r3, #1
 8014ac6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014ac8:	697b      	ldr	r3, [r7, #20]
}
 8014aca:	4618      	mov	r0, r3
 8014acc:	3718      	adds	r7, #24
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	bd80      	pop	{r7, pc}
 8014ad2:	bf00      	nop
 8014ad4:	20001b1c 	.word	0x20001b1c
 8014ad8:	20001af8 	.word	0x20001af8
 8014adc:	20001aac 	.word	0x20001aac
 8014ae0:	20001ab0 	.word	0x20001ab0
 8014ae4:	20001b0c 	.word	0x20001b0c
 8014ae8:	20001b14 	.word	0x20001b14
 8014aec:	20001afc 	.word	0x20001afc
 8014af0:	200019f8 	.word	0x200019f8
 8014af4:	200019f4 	.word	0x200019f4
 8014af8:	20001b04 	.word	0x20001b04
 8014afc:	20001b08 	.word	0x20001b08

08014b00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b088      	sub	sp, #32
 8014b04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014b06:	4b3b      	ldr	r3, [pc, #236]	@ (8014bf4 <vTaskSwitchContext+0xf4>)
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d003      	beq.n	8014b16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014b0e:	4b3a      	ldr	r3, [pc, #232]	@ (8014bf8 <vTaskSwitchContext+0xf8>)
 8014b10:	2201      	movs	r2, #1
 8014b12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014b14:	e069      	b.n	8014bea <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8014b16:	4b38      	ldr	r3, [pc, #224]	@ (8014bf8 <vTaskSwitchContext+0xf8>)
 8014b18:	2200      	movs	r2, #0
 8014b1a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8014b1c:	4b37      	ldr	r3, [pc, #220]	@ (8014bfc <vTaskSwitchContext+0xfc>)
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b22:	61fb      	str	r3, [r7, #28]
 8014b24:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8014b28:	61bb      	str	r3, [r7, #24]
 8014b2a:	69fb      	ldr	r3, [r7, #28]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	69ba      	ldr	r2, [r7, #24]
 8014b30:	429a      	cmp	r2, r3
 8014b32:	d111      	bne.n	8014b58 <vTaskSwitchContext+0x58>
 8014b34:	69fb      	ldr	r3, [r7, #28]
 8014b36:	3304      	adds	r3, #4
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	69ba      	ldr	r2, [r7, #24]
 8014b3c:	429a      	cmp	r2, r3
 8014b3e:	d10b      	bne.n	8014b58 <vTaskSwitchContext+0x58>
 8014b40:	69fb      	ldr	r3, [r7, #28]
 8014b42:	3308      	adds	r3, #8
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	69ba      	ldr	r2, [r7, #24]
 8014b48:	429a      	cmp	r2, r3
 8014b4a:	d105      	bne.n	8014b58 <vTaskSwitchContext+0x58>
 8014b4c:	69fb      	ldr	r3, [r7, #28]
 8014b4e:	330c      	adds	r3, #12
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	69ba      	ldr	r2, [r7, #24]
 8014b54:	429a      	cmp	r2, r3
 8014b56:	d008      	beq.n	8014b6a <vTaskSwitchContext+0x6a>
 8014b58:	4b28      	ldr	r3, [pc, #160]	@ (8014bfc <vTaskSwitchContext+0xfc>)
 8014b5a:	681a      	ldr	r2, [r3, #0]
 8014b5c:	4b27      	ldr	r3, [pc, #156]	@ (8014bfc <vTaskSwitchContext+0xfc>)
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	3334      	adds	r3, #52	@ 0x34
 8014b62:	4619      	mov	r1, r3
 8014b64:	4610      	mov	r0, r2
 8014b66:	f7ec ff4a 	bl	80019fe <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b6a:	4b25      	ldr	r3, [pc, #148]	@ (8014c00 <vTaskSwitchContext+0x100>)
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	fab3 f383 	clz	r3, r3
 8014b76:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8014b78:	7afb      	ldrb	r3, [r7, #11]
 8014b7a:	f1c3 031f 	rsb	r3, r3, #31
 8014b7e:	617b      	str	r3, [r7, #20]
 8014b80:	4920      	ldr	r1, [pc, #128]	@ (8014c04 <vTaskSwitchContext+0x104>)
 8014b82:	697a      	ldr	r2, [r7, #20]
 8014b84:	4613      	mov	r3, r2
 8014b86:	009b      	lsls	r3, r3, #2
 8014b88:	4413      	add	r3, r2
 8014b8a:	009b      	lsls	r3, r3, #2
 8014b8c:	440b      	add	r3, r1
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d10d      	bne.n	8014bb0 <vTaskSwitchContext+0xb0>
	__asm volatile
 8014b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b98:	b672      	cpsid	i
 8014b9a:	f383 8811 	msr	BASEPRI, r3
 8014b9e:	f3bf 8f6f 	isb	sy
 8014ba2:	f3bf 8f4f 	dsb	sy
 8014ba6:	b662      	cpsie	i
 8014ba8:	607b      	str	r3, [r7, #4]
}
 8014baa:	bf00      	nop
 8014bac:	bf00      	nop
 8014bae:	e7fd      	b.n	8014bac <vTaskSwitchContext+0xac>
 8014bb0:	697a      	ldr	r2, [r7, #20]
 8014bb2:	4613      	mov	r3, r2
 8014bb4:	009b      	lsls	r3, r3, #2
 8014bb6:	4413      	add	r3, r2
 8014bb8:	009b      	lsls	r3, r3, #2
 8014bba:	4a12      	ldr	r2, [pc, #72]	@ (8014c04 <vTaskSwitchContext+0x104>)
 8014bbc:	4413      	add	r3, r2
 8014bbe:	613b      	str	r3, [r7, #16]
 8014bc0:	693b      	ldr	r3, [r7, #16]
 8014bc2:	685b      	ldr	r3, [r3, #4]
 8014bc4:	685a      	ldr	r2, [r3, #4]
 8014bc6:	693b      	ldr	r3, [r7, #16]
 8014bc8:	605a      	str	r2, [r3, #4]
 8014bca:	693b      	ldr	r3, [r7, #16]
 8014bcc:	685a      	ldr	r2, [r3, #4]
 8014bce:	693b      	ldr	r3, [r7, #16]
 8014bd0:	3308      	adds	r3, #8
 8014bd2:	429a      	cmp	r2, r3
 8014bd4:	d104      	bne.n	8014be0 <vTaskSwitchContext+0xe0>
 8014bd6:	693b      	ldr	r3, [r7, #16]
 8014bd8:	685b      	ldr	r3, [r3, #4]
 8014bda:	685a      	ldr	r2, [r3, #4]
 8014bdc:	693b      	ldr	r3, [r7, #16]
 8014bde:	605a      	str	r2, [r3, #4]
 8014be0:	693b      	ldr	r3, [r7, #16]
 8014be2:	685b      	ldr	r3, [r3, #4]
 8014be4:	68db      	ldr	r3, [r3, #12]
 8014be6:	4a05      	ldr	r2, [pc, #20]	@ (8014bfc <vTaskSwitchContext+0xfc>)
 8014be8:	6013      	str	r3, [r2, #0]
}
 8014bea:	bf00      	nop
 8014bec:	3720      	adds	r7, #32
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	bd80      	pop	{r7, pc}
 8014bf2:	bf00      	nop
 8014bf4:	20001b1c 	.word	0x20001b1c
 8014bf8:	20001b08 	.word	0x20001b08
 8014bfc:	200019f4 	.word	0x200019f4
 8014c00:	20001afc 	.word	0x20001afc
 8014c04:	200019f8 	.word	0x200019f8

08014c08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b084      	sub	sp, #16
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
 8014c10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d10d      	bne.n	8014c34 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8014c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c1c:	b672      	cpsid	i
 8014c1e:	f383 8811 	msr	BASEPRI, r3
 8014c22:	f3bf 8f6f 	isb	sy
 8014c26:	f3bf 8f4f 	dsb	sy
 8014c2a:	b662      	cpsie	i
 8014c2c:	60fb      	str	r3, [r7, #12]
}
 8014c2e:	bf00      	nop
 8014c30:	bf00      	nop
 8014c32:	e7fd      	b.n	8014c30 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c34:	4b07      	ldr	r3, [pc, #28]	@ (8014c54 <vTaskPlaceOnEventList+0x4c>)
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	3318      	adds	r3, #24
 8014c3a:	4619      	mov	r1, r3
 8014c3c:	6878      	ldr	r0, [r7, #4]
 8014c3e:	f7fe ff0e 	bl	8013a5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014c42:	2101      	movs	r1, #1
 8014c44:	6838      	ldr	r0, [r7, #0]
 8014c46:	f000 fa7b 	bl	8015140 <prvAddCurrentTaskToDelayedList>
}
 8014c4a:	bf00      	nop
 8014c4c:	3710      	adds	r7, #16
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd80      	pop	{r7, pc}
 8014c52:	bf00      	nop
 8014c54:	200019f4 	.word	0x200019f4

08014c58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b086      	sub	sp, #24
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	68db      	ldr	r3, [r3, #12]
 8014c64:	68db      	ldr	r3, [r3, #12]
 8014c66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014c68:	693b      	ldr	r3, [r7, #16]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d10d      	bne.n	8014c8a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8014c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c72:	b672      	cpsid	i
 8014c74:	f383 8811 	msr	BASEPRI, r3
 8014c78:	f3bf 8f6f 	isb	sy
 8014c7c:	f3bf 8f4f 	dsb	sy
 8014c80:	b662      	cpsie	i
 8014c82:	60fb      	str	r3, [r7, #12]
}
 8014c84:	bf00      	nop
 8014c86:	bf00      	nop
 8014c88:	e7fd      	b.n	8014c86 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014c8a:	693b      	ldr	r3, [r7, #16]
 8014c8c:	3318      	adds	r3, #24
 8014c8e:	4618      	mov	r0, r3
 8014c90:	f7fe ff1e 	bl	8013ad0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c94:	4b1d      	ldr	r3, [pc, #116]	@ (8014d0c <xTaskRemoveFromEventList+0xb4>)
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d11c      	bne.n	8014cd6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014c9c:	693b      	ldr	r3, [r7, #16]
 8014c9e:	3304      	adds	r3, #4
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	f7fe ff15 	bl	8013ad0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014ca6:	693b      	ldr	r3, [r7, #16]
 8014ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014caa:	2201      	movs	r2, #1
 8014cac:	409a      	lsls	r2, r3
 8014cae:	4b18      	ldr	r3, [pc, #96]	@ (8014d10 <xTaskRemoveFromEventList+0xb8>)
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	4313      	orrs	r3, r2
 8014cb4:	4a16      	ldr	r2, [pc, #88]	@ (8014d10 <xTaskRemoveFromEventList+0xb8>)
 8014cb6:	6013      	str	r3, [r2, #0]
 8014cb8:	693b      	ldr	r3, [r7, #16]
 8014cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014cbc:	4613      	mov	r3, r2
 8014cbe:	009b      	lsls	r3, r3, #2
 8014cc0:	4413      	add	r3, r2
 8014cc2:	009b      	lsls	r3, r3, #2
 8014cc4:	4a13      	ldr	r2, [pc, #76]	@ (8014d14 <xTaskRemoveFromEventList+0xbc>)
 8014cc6:	441a      	add	r2, r3
 8014cc8:	693b      	ldr	r3, [r7, #16]
 8014cca:	3304      	adds	r3, #4
 8014ccc:	4619      	mov	r1, r3
 8014cce:	4610      	mov	r0, r2
 8014cd0:	f7fe fea1 	bl	8013a16 <vListInsertEnd>
 8014cd4:	e005      	b.n	8014ce2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014cd6:	693b      	ldr	r3, [r7, #16]
 8014cd8:	3318      	adds	r3, #24
 8014cda:	4619      	mov	r1, r3
 8014cdc:	480e      	ldr	r0, [pc, #56]	@ (8014d18 <xTaskRemoveFromEventList+0xc0>)
 8014cde:	f7fe fe9a 	bl	8013a16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014ce2:	693b      	ldr	r3, [r7, #16]
 8014ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8014d1c <xTaskRemoveFromEventList+0xc4>)
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cec:	429a      	cmp	r2, r3
 8014cee:	d905      	bls.n	8014cfc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014cf0:	2301      	movs	r3, #1
 8014cf2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8014d20 <xTaskRemoveFromEventList+0xc8>)
 8014cf6:	2201      	movs	r2, #1
 8014cf8:	601a      	str	r2, [r3, #0]
 8014cfa:	e001      	b.n	8014d00 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014d00:	697b      	ldr	r3, [r7, #20]
}
 8014d02:	4618      	mov	r0, r3
 8014d04:	3718      	adds	r7, #24
 8014d06:	46bd      	mov	sp, r7
 8014d08:	bd80      	pop	{r7, pc}
 8014d0a:	bf00      	nop
 8014d0c:	20001b1c 	.word	0x20001b1c
 8014d10:	20001afc 	.word	0x20001afc
 8014d14:	200019f8 	.word	0x200019f8
 8014d18:	20001ab4 	.word	0x20001ab4
 8014d1c:	200019f4 	.word	0x200019f4
 8014d20:	20001b08 	.word	0x20001b08

08014d24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014d24:	b480      	push	{r7}
 8014d26:	b083      	sub	sp, #12
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014d2c:	4b06      	ldr	r3, [pc, #24]	@ (8014d48 <vTaskInternalSetTimeOutState+0x24>)
 8014d2e:	681a      	ldr	r2, [r3, #0]
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014d34:	4b05      	ldr	r3, [pc, #20]	@ (8014d4c <vTaskInternalSetTimeOutState+0x28>)
 8014d36:	681a      	ldr	r2, [r3, #0]
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	605a      	str	r2, [r3, #4]
}
 8014d3c:	bf00      	nop
 8014d3e:	370c      	adds	r7, #12
 8014d40:	46bd      	mov	sp, r7
 8014d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d46:	4770      	bx	lr
 8014d48:	20001b0c 	.word	0x20001b0c
 8014d4c:	20001af8 	.word	0x20001af8

08014d50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b088      	sub	sp, #32
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
 8014d58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d10d      	bne.n	8014d7c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8014d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d64:	b672      	cpsid	i
 8014d66:	f383 8811 	msr	BASEPRI, r3
 8014d6a:	f3bf 8f6f 	isb	sy
 8014d6e:	f3bf 8f4f 	dsb	sy
 8014d72:	b662      	cpsie	i
 8014d74:	613b      	str	r3, [r7, #16]
}
 8014d76:	bf00      	nop
 8014d78:	bf00      	nop
 8014d7a:	e7fd      	b.n	8014d78 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8014d7c:	683b      	ldr	r3, [r7, #0]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d10d      	bne.n	8014d9e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8014d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d86:	b672      	cpsid	i
 8014d88:	f383 8811 	msr	BASEPRI, r3
 8014d8c:	f3bf 8f6f 	isb	sy
 8014d90:	f3bf 8f4f 	dsb	sy
 8014d94:	b662      	cpsie	i
 8014d96:	60fb      	str	r3, [r7, #12]
}
 8014d98:	bf00      	nop
 8014d9a:	bf00      	nop
 8014d9c:	e7fd      	b.n	8014d9a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8014d9e:	f000 fb45 	bl	801542c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014da2:	4b1d      	ldr	r3, [pc, #116]	@ (8014e18 <xTaskCheckForTimeOut+0xc8>)
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	685b      	ldr	r3, [r3, #4]
 8014dac:	69ba      	ldr	r2, [r7, #24]
 8014dae:	1ad3      	subs	r3, r2, r3
 8014db0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014db2:	683b      	ldr	r3, [r7, #0]
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dba:	d102      	bne.n	8014dc2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	61fb      	str	r3, [r7, #28]
 8014dc0:	e023      	b.n	8014e0a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	681a      	ldr	r2, [r3, #0]
 8014dc6:	4b15      	ldr	r3, [pc, #84]	@ (8014e1c <xTaskCheckForTimeOut+0xcc>)
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	429a      	cmp	r2, r3
 8014dcc:	d007      	beq.n	8014dde <xTaskCheckForTimeOut+0x8e>
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	685b      	ldr	r3, [r3, #4]
 8014dd2:	69ba      	ldr	r2, [r7, #24]
 8014dd4:	429a      	cmp	r2, r3
 8014dd6:	d302      	bcc.n	8014dde <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014dd8:	2301      	movs	r3, #1
 8014dda:	61fb      	str	r3, [r7, #28]
 8014ddc:	e015      	b.n	8014e0a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014dde:	683b      	ldr	r3, [r7, #0]
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	697a      	ldr	r2, [r7, #20]
 8014de4:	429a      	cmp	r2, r3
 8014de6:	d20b      	bcs.n	8014e00 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014de8:	683b      	ldr	r3, [r7, #0]
 8014dea:	681a      	ldr	r2, [r3, #0]
 8014dec:	697b      	ldr	r3, [r7, #20]
 8014dee:	1ad2      	subs	r2, r2, r3
 8014df0:	683b      	ldr	r3, [r7, #0]
 8014df2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014df4:	6878      	ldr	r0, [r7, #4]
 8014df6:	f7ff ff95 	bl	8014d24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	61fb      	str	r3, [r7, #28]
 8014dfe:	e004      	b.n	8014e0a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8014e00:	683b      	ldr	r3, [r7, #0]
 8014e02:	2200      	movs	r2, #0
 8014e04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014e06:	2301      	movs	r3, #1
 8014e08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014e0a:	f000 fb45 	bl	8015498 <vPortExitCritical>

	return xReturn;
 8014e0e:	69fb      	ldr	r3, [r7, #28]
}
 8014e10:	4618      	mov	r0, r3
 8014e12:	3720      	adds	r7, #32
 8014e14:	46bd      	mov	sp, r7
 8014e16:	bd80      	pop	{r7, pc}
 8014e18:	20001af8 	.word	0x20001af8
 8014e1c:	20001b0c 	.word	0x20001b0c

08014e20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014e20:	b480      	push	{r7}
 8014e22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014e24:	4b03      	ldr	r3, [pc, #12]	@ (8014e34 <vTaskMissedYield+0x14>)
 8014e26:	2201      	movs	r2, #1
 8014e28:	601a      	str	r2, [r3, #0]
}
 8014e2a:	bf00      	nop
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e32:	4770      	bx	lr
 8014e34:	20001b08 	.word	0x20001b08

08014e38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b082      	sub	sp, #8
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014e40:	f000 f854 	bl	8014eec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014e44:	4b07      	ldr	r3, [pc, #28]	@ (8014e64 <prvIdleTask+0x2c>)
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	2b01      	cmp	r3, #1
 8014e4a:	d907      	bls.n	8014e5c <prvIdleTask+0x24>
			{
				taskYIELD();
 8014e4c:	4b06      	ldr	r3, [pc, #24]	@ (8014e68 <prvIdleTask+0x30>)
 8014e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014e52:	601a      	str	r2, [r3, #0]
 8014e54:	f3bf 8f4f 	dsb	sy
 8014e58:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8014e5c:	f7ec fdc8 	bl	80019f0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8014e60:	e7ee      	b.n	8014e40 <prvIdleTask+0x8>
 8014e62:	bf00      	nop
 8014e64:	200019f8 	.word	0x200019f8
 8014e68:	e000ed04 	.word	0xe000ed04

08014e6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b082      	sub	sp, #8
 8014e70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014e72:	2300      	movs	r3, #0
 8014e74:	607b      	str	r3, [r7, #4]
 8014e76:	e00c      	b.n	8014e92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014e78:	687a      	ldr	r2, [r7, #4]
 8014e7a:	4613      	mov	r3, r2
 8014e7c:	009b      	lsls	r3, r3, #2
 8014e7e:	4413      	add	r3, r2
 8014e80:	009b      	lsls	r3, r3, #2
 8014e82:	4a12      	ldr	r2, [pc, #72]	@ (8014ecc <prvInitialiseTaskLists+0x60>)
 8014e84:	4413      	add	r3, r2
 8014e86:	4618      	mov	r0, r3
 8014e88:	f7fe fd98 	bl	80139bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	3301      	adds	r3, #1
 8014e90:	607b      	str	r3, [r7, #4]
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	2b06      	cmp	r3, #6
 8014e96:	d9ef      	bls.n	8014e78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014e98:	480d      	ldr	r0, [pc, #52]	@ (8014ed0 <prvInitialiseTaskLists+0x64>)
 8014e9a:	f7fe fd8f 	bl	80139bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014e9e:	480d      	ldr	r0, [pc, #52]	@ (8014ed4 <prvInitialiseTaskLists+0x68>)
 8014ea0:	f7fe fd8c 	bl	80139bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014ea4:	480c      	ldr	r0, [pc, #48]	@ (8014ed8 <prvInitialiseTaskLists+0x6c>)
 8014ea6:	f7fe fd89 	bl	80139bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014eaa:	480c      	ldr	r0, [pc, #48]	@ (8014edc <prvInitialiseTaskLists+0x70>)
 8014eac:	f7fe fd86 	bl	80139bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014eb0:	480b      	ldr	r0, [pc, #44]	@ (8014ee0 <prvInitialiseTaskLists+0x74>)
 8014eb2:	f7fe fd83 	bl	80139bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8014ee4 <prvInitialiseTaskLists+0x78>)
 8014eb8:	4a05      	ldr	r2, [pc, #20]	@ (8014ed0 <prvInitialiseTaskLists+0x64>)
 8014eba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8014ee8 <prvInitialiseTaskLists+0x7c>)
 8014ebe:	4a05      	ldr	r2, [pc, #20]	@ (8014ed4 <prvInitialiseTaskLists+0x68>)
 8014ec0:	601a      	str	r2, [r3, #0]
}
 8014ec2:	bf00      	nop
 8014ec4:	3708      	adds	r7, #8
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	bd80      	pop	{r7, pc}
 8014eca:	bf00      	nop
 8014ecc:	200019f8 	.word	0x200019f8
 8014ed0:	20001a84 	.word	0x20001a84
 8014ed4:	20001a98 	.word	0x20001a98
 8014ed8:	20001ab4 	.word	0x20001ab4
 8014edc:	20001ac8 	.word	0x20001ac8
 8014ee0:	20001ae0 	.word	0x20001ae0
 8014ee4:	20001aac 	.word	0x20001aac
 8014ee8:	20001ab0 	.word	0x20001ab0

08014eec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b082      	sub	sp, #8
 8014ef0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014ef2:	e019      	b.n	8014f28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014ef4:	f000 fa9a 	bl	801542c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ef8:	4b10      	ldr	r3, [pc, #64]	@ (8014f3c <prvCheckTasksWaitingTermination+0x50>)
 8014efa:	68db      	ldr	r3, [r3, #12]
 8014efc:	68db      	ldr	r3, [r3, #12]
 8014efe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	3304      	adds	r3, #4
 8014f04:	4618      	mov	r0, r3
 8014f06:	f7fe fde3 	bl	8013ad0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8014f40 <prvCheckTasksWaitingTermination+0x54>)
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	3b01      	subs	r3, #1
 8014f10:	4a0b      	ldr	r2, [pc, #44]	@ (8014f40 <prvCheckTasksWaitingTermination+0x54>)
 8014f12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014f14:	4b0b      	ldr	r3, [pc, #44]	@ (8014f44 <prvCheckTasksWaitingTermination+0x58>)
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	3b01      	subs	r3, #1
 8014f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8014f44 <prvCheckTasksWaitingTermination+0x58>)
 8014f1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014f1e:	f000 fabb 	bl	8015498 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014f22:	6878      	ldr	r0, [r7, #4]
 8014f24:	f000 f810 	bl	8014f48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014f28:	4b06      	ldr	r3, [pc, #24]	@ (8014f44 <prvCheckTasksWaitingTermination+0x58>)
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d1e1      	bne.n	8014ef4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014f30:	bf00      	nop
 8014f32:	bf00      	nop
 8014f34:	3708      	adds	r7, #8
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bd80      	pop	{r7, pc}
 8014f3a:	bf00      	nop
 8014f3c:	20001ac8 	.word	0x20001ac8
 8014f40:	20001af4 	.word	0x20001af4
 8014f44:	20001adc 	.word	0x20001adc

08014f48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b084      	sub	sp, #16
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d108      	bne.n	8014f6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014f5e:	4618      	mov	r0, r3
 8014f60:	f000 fc64 	bl	801582c <vPortFree>
				vPortFree( pxTCB );
 8014f64:	6878      	ldr	r0, [r7, #4]
 8014f66:	f000 fc61 	bl	801582c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014f6a:	e01b      	b.n	8014fa4 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8014f72:	2b01      	cmp	r3, #1
 8014f74:	d103      	bne.n	8014f7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014f76:	6878      	ldr	r0, [r7, #4]
 8014f78:	f000 fc58 	bl	801582c <vPortFree>
	}
 8014f7c:	e012      	b.n	8014fa4 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8014f84:	2b02      	cmp	r3, #2
 8014f86:	d00d      	beq.n	8014fa4 <prvDeleteTCB+0x5c>
	__asm volatile
 8014f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f8c:	b672      	cpsid	i
 8014f8e:	f383 8811 	msr	BASEPRI, r3
 8014f92:	f3bf 8f6f 	isb	sy
 8014f96:	f3bf 8f4f 	dsb	sy
 8014f9a:	b662      	cpsie	i
 8014f9c:	60fb      	str	r3, [r7, #12]
}
 8014f9e:	bf00      	nop
 8014fa0:	bf00      	nop
 8014fa2:	e7fd      	b.n	8014fa0 <prvDeleteTCB+0x58>
	}
 8014fa4:	bf00      	nop
 8014fa6:	3710      	adds	r7, #16
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	bd80      	pop	{r7, pc}

08014fac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014fac:	b480      	push	{r7}
 8014fae:	b083      	sub	sp, #12
 8014fb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8014fe4 <prvResetNextTaskUnblockTime+0x38>)
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d104      	bne.n	8014fc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8014fe8 <prvResetNextTaskUnblockTime+0x3c>)
 8014fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8014fc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014fc4:	e008      	b.n	8014fd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014fc6:	4b07      	ldr	r3, [pc, #28]	@ (8014fe4 <prvResetNextTaskUnblockTime+0x38>)
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	68db      	ldr	r3, [r3, #12]
 8014fcc:	68db      	ldr	r3, [r3, #12]
 8014fce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	685b      	ldr	r3, [r3, #4]
 8014fd4:	4a04      	ldr	r2, [pc, #16]	@ (8014fe8 <prvResetNextTaskUnblockTime+0x3c>)
 8014fd6:	6013      	str	r3, [r2, #0]
}
 8014fd8:	bf00      	nop
 8014fda:	370c      	adds	r7, #12
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe2:	4770      	bx	lr
 8014fe4:	20001aac 	.word	0x20001aac
 8014fe8:	20001b14 	.word	0x20001b14

08014fec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014fec:	b480      	push	{r7}
 8014fee:	b083      	sub	sp, #12
 8014ff0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8015020 <xTaskGetSchedulerState+0x34>)
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d102      	bne.n	8015000 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014ffa:	2301      	movs	r3, #1
 8014ffc:	607b      	str	r3, [r7, #4]
 8014ffe:	e008      	b.n	8015012 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015000:	4b08      	ldr	r3, [pc, #32]	@ (8015024 <xTaskGetSchedulerState+0x38>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d102      	bne.n	801500e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015008:	2302      	movs	r3, #2
 801500a:	607b      	str	r3, [r7, #4]
 801500c:	e001      	b.n	8015012 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801500e:	2300      	movs	r3, #0
 8015010:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015012:	687b      	ldr	r3, [r7, #4]
	}
 8015014:	4618      	mov	r0, r3
 8015016:	370c      	adds	r7, #12
 8015018:	46bd      	mov	sp, r7
 801501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501e:	4770      	bx	lr
 8015020:	20001b00 	.word	0x20001b00
 8015024:	20001b1c 	.word	0x20001b1c

08015028 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015028:	b580      	push	{r7, lr}
 801502a:	b086      	sub	sp, #24
 801502c:	af00      	add	r7, sp, #0
 801502e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015034:	2300      	movs	r3, #0
 8015036:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d074      	beq.n	8015128 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801503e:	4b3d      	ldr	r3, [pc, #244]	@ (8015134 <xTaskPriorityDisinherit+0x10c>)
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	693a      	ldr	r2, [r7, #16]
 8015044:	429a      	cmp	r2, r3
 8015046:	d00d      	beq.n	8015064 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8015048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801504c:	b672      	cpsid	i
 801504e:	f383 8811 	msr	BASEPRI, r3
 8015052:	f3bf 8f6f 	isb	sy
 8015056:	f3bf 8f4f 	dsb	sy
 801505a:	b662      	cpsie	i
 801505c:	60fb      	str	r3, [r7, #12]
}
 801505e:	bf00      	nop
 8015060:	bf00      	nop
 8015062:	e7fd      	b.n	8015060 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8015064:	693b      	ldr	r3, [r7, #16]
 8015066:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015068:	2b00      	cmp	r3, #0
 801506a:	d10d      	bne.n	8015088 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 801506c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015070:	b672      	cpsid	i
 8015072:	f383 8811 	msr	BASEPRI, r3
 8015076:	f3bf 8f6f 	isb	sy
 801507a:	f3bf 8f4f 	dsb	sy
 801507e:	b662      	cpsie	i
 8015080:	60bb      	str	r3, [r7, #8]
}
 8015082:	bf00      	nop
 8015084:	bf00      	nop
 8015086:	e7fd      	b.n	8015084 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8015088:	693b      	ldr	r3, [r7, #16]
 801508a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801508c:	1e5a      	subs	r2, r3, #1
 801508e:	693b      	ldr	r3, [r7, #16]
 8015090:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015092:	693b      	ldr	r3, [r7, #16]
 8015094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015096:	693b      	ldr	r3, [r7, #16]
 8015098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801509a:	429a      	cmp	r2, r3
 801509c:	d044      	beq.n	8015128 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801509e:	693b      	ldr	r3, [r7, #16]
 80150a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d140      	bne.n	8015128 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80150a6:	693b      	ldr	r3, [r7, #16]
 80150a8:	3304      	adds	r3, #4
 80150aa:	4618      	mov	r0, r3
 80150ac:	f7fe fd10 	bl	8013ad0 <uxListRemove>
 80150b0:	4603      	mov	r3, r0
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d115      	bne.n	80150e2 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80150b6:	693b      	ldr	r3, [r7, #16]
 80150b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150ba:	491f      	ldr	r1, [pc, #124]	@ (8015138 <xTaskPriorityDisinherit+0x110>)
 80150bc:	4613      	mov	r3, r2
 80150be:	009b      	lsls	r3, r3, #2
 80150c0:	4413      	add	r3, r2
 80150c2:	009b      	lsls	r3, r3, #2
 80150c4:	440b      	add	r3, r1
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d10a      	bne.n	80150e2 <xTaskPriorityDisinherit+0xba>
 80150cc:	693b      	ldr	r3, [r7, #16]
 80150ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150d0:	2201      	movs	r2, #1
 80150d2:	fa02 f303 	lsl.w	r3, r2, r3
 80150d6:	43da      	mvns	r2, r3
 80150d8:	4b18      	ldr	r3, [pc, #96]	@ (801513c <xTaskPriorityDisinherit+0x114>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	4013      	ands	r3, r2
 80150de:	4a17      	ldr	r2, [pc, #92]	@ (801513c <xTaskPriorityDisinherit+0x114>)
 80150e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80150e2:	693b      	ldr	r3, [r7, #16]
 80150e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80150e6:	693b      	ldr	r3, [r7, #16]
 80150e8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80150ea:	693b      	ldr	r3, [r7, #16]
 80150ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150ee:	f1c3 0207 	rsb	r2, r3, #7
 80150f2:	693b      	ldr	r3, [r7, #16]
 80150f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80150f6:	693b      	ldr	r3, [r7, #16]
 80150f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150fa:	2201      	movs	r2, #1
 80150fc:	409a      	lsls	r2, r3
 80150fe:	4b0f      	ldr	r3, [pc, #60]	@ (801513c <xTaskPriorityDisinherit+0x114>)
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	4313      	orrs	r3, r2
 8015104:	4a0d      	ldr	r2, [pc, #52]	@ (801513c <xTaskPriorityDisinherit+0x114>)
 8015106:	6013      	str	r3, [r2, #0]
 8015108:	693b      	ldr	r3, [r7, #16]
 801510a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801510c:	4613      	mov	r3, r2
 801510e:	009b      	lsls	r3, r3, #2
 8015110:	4413      	add	r3, r2
 8015112:	009b      	lsls	r3, r3, #2
 8015114:	4a08      	ldr	r2, [pc, #32]	@ (8015138 <xTaskPriorityDisinherit+0x110>)
 8015116:	441a      	add	r2, r3
 8015118:	693b      	ldr	r3, [r7, #16]
 801511a:	3304      	adds	r3, #4
 801511c:	4619      	mov	r1, r3
 801511e:	4610      	mov	r0, r2
 8015120:	f7fe fc79 	bl	8013a16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015124:	2301      	movs	r3, #1
 8015126:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015128:	697b      	ldr	r3, [r7, #20]
	}
 801512a:	4618      	mov	r0, r3
 801512c:	3718      	adds	r7, #24
 801512e:	46bd      	mov	sp, r7
 8015130:	bd80      	pop	{r7, pc}
 8015132:	bf00      	nop
 8015134:	200019f4 	.word	0x200019f4
 8015138:	200019f8 	.word	0x200019f8
 801513c:	20001afc 	.word	0x20001afc

08015140 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015140:	b580      	push	{r7, lr}
 8015142:	b084      	sub	sp, #16
 8015144:	af00      	add	r7, sp, #0
 8015146:	6078      	str	r0, [r7, #4]
 8015148:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801514a:	4b29      	ldr	r3, [pc, #164]	@ (80151f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015150:	4b28      	ldr	r3, [pc, #160]	@ (80151f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	3304      	adds	r3, #4
 8015156:	4618      	mov	r0, r3
 8015158:	f7fe fcba 	bl	8013ad0 <uxListRemove>
 801515c:	4603      	mov	r3, r0
 801515e:	2b00      	cmp	r3, #0
 8015160:	d10b      	bne.n	801517a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8015162:	4b24      	ldr	r3, [pc, #144]	@ (80151f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015168:	2201      	movs	r2, #1
 801516a:	fa02 f303 	lsl.w	r3, r2, r3
 801516e:	43da      	mvns	r2, r3
 8015170:	4b21      	ldr	r3, [pc, #132]	@ (80151f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	4013      	ands	r3, r2
 8015176:	4a20      	ldr	r2, [pc, #128]	@ (80151f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015178:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015180:	d10a      	bne.n	8015198 <prvAddCurrentTaskToDelayedList+0x58>
 8015182:	683b      	ldr	r3, [r7, #0]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d007      	beq.n	8015198 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015188:	4b1a      	ldr	r3, [pc, #104]	@ (80151f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	3304      	adds	r3, #4
 801518e:	4619      	mov	r1, r3
 8015190:	481a      	ldr	r0, [pc, #104]	@ (80151fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8015192:	f7fe fc40 	bl	8013a16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015196:	e026      	b.n	80151e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015198:	68fa      	ldr	r2, [r7, #12]
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	4413      	add	r3, r2
 801519e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80151a0:	4b14      	ldr	r3, [pc, #80]	@ (80151f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	68ba      	ldr	r2, [r7, #8]
 80151a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80151a8:	68ba      	ldr	r2, [r7, #8]
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	429a      	cmp	r2, r3
 80151ae:	d209      	bcs.n	80151c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80151b0:	4b13      	ldr	r3, [pc, #76]	@ (8015200 <prvAddCurrentTaskToDelayedList+0xc0>)
 80151b2:	681a      	ldr	r2, [r3, #0]
 80151b4:	4b0f      	ldr	r3, [pc, #60]	@ (80151f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	3304      	adds	r3, #4
 80151ba:	4619      	mov	r1, r3
 80151bc:	4610      	mov	r0, r2
 80151be:	f7fe fc4e 	bl	8013a5e <vListInsert>
}
 80151c2:	e010      	b.n	80151e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80151c4:	4b0f      	ldr	r3, [pc, #60]	@ (8015204 <prvAddCurrentTaskToDelayedList+0xc4>)
 80151c6:	681a      	ldr	r2, [r3, #0]
 80151c8:	4b0a      	ldr	r3, [pc, #40]	@ (80151f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	3304      	adds	r3, #4
 80151ce:	4619      	mov	r1, r3
 80151d0:	4610      	mov	r0, r2
 80151d2:	f7fe fc44 	bl	8013a5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80151d6:	4b0c      	ldr	r3, [pc, #48]	@ (8015208 <prvAddCurrentTaskToDelayedList+0xc8>)
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	68ba      	ldr	r2, [r7, #8]
 80151dc:	429a      	cmp	r2, r3
 80151de:	d202      	bcs.n	80151e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80151e0:	4a09      	ldr	r2, [pc, #36]	@ (8015208 <prvAddCurrentTaskToDelayedList+0xc8>)
 80151e2:	68bb      	ldr	r3, [r7, #8]
 80151e4:	6013      	str	r3, [r2, #0]
}
 80151e6:	bf00      	nop
 80151e8:	3710      	adds	r7, #16
 80151ea:	46bd      	mov	sp, r7
 80151ec:	bd80      	pop	{r7, pc}
 80151ee:	bf00      	nop
 80151f0:	20001af8 	.word	0x20001af8
 80151f4:	200019f4 	.word	0x200019f4
 80151f8:	20001afc 	.word	0x20001afc
 80151fc:	20001ae0 	.word	0x20001ae0
 8015200:	20001ab0 	.word	0x20001ab0
 8015204:	20001aac 	.word	0x20001aac
 8015208:	20001b14 	.word	0x20001b14

0801520c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801520c:	b480      	push	{r7}
 801520e:	b085      	sub	sp, #20
 8015210:	af00      	add	r7, sp, #0
 8015212:	60f8      	str	r0, [r7, #12]
 8015214:	60b9      	str	r1, [r7, #8]
 8015216:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	3b04      	subs	r3, #4
 801521c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8015224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	3b04      	subs	r3, #4
 801522a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801522c:	68bb      	ldr	r3, [r7, #8]
 801522e:	f023 0201 	bic.w	r2, r3, #1
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	3b04      	subs	r3, #4
 801523a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801523c:	4a0c      	ldr	r2, [pc, #48]	@ (8015270 <pxPortInitialiseStack+0x64>)
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	3b14      	subs	r3, #20
 8015246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015248:	687a      	ldr	r2, [r7, #4]
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	3b04      	subs	r3, #4
 8015252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	f06f 0202 	mvn.w	r2, #2
 801525a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	3b20      	subs	r3, #32
 8015260:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015262:	68fb      	ldr	r3, [r7, #12]
}
 8015264:	4618      	mov	r0, r3
 8015266:	3714      	adds	r7, #20
 8015268:	46bd      	mov	sp, r7
 801526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526e:	4770      	bx	lr
 8015270:	08015275 	.word	0x08015275

08015274 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015274:	b480      	push	{r7}
 8015276:	b085      	sub	sp, #20
 8015278:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801527a:	2300      	movs	r3, #0
 801527c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801527e:	4b15      	ldr	r3, [pc, #84]	@ (80152d4 <prvTaskExitError+0x60>)
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015286:	d00d      	beq.n	80152a4 <prvTaskExitError+0x30>
	__asm volatile
 8015288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801528c:	b672      	cpsid	i
 801528e:	f383 8811 	msr	BASEPRI, r3
 8015292:	f3bf 8f6f 	isb	sy
 8015296:	f3bf 8f4f 	dsb	sy
 801529a:	b662      	cpsie	i
 801529c:	60fb      	str	r3, [r7, #12]
}
 801529e:	bf00      	nop
 80152a0:	bf00      	nop
 80152a2:	e7fd      	b.n	80152a0 <prvTaskExitError+0x2c>
	__asm volatile
 80152a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152a8:	b672      	cpsid	i
 80152aa:	f383 8811 	msr	BASEPRI, r3
 80152ae:	f3bf 8f6f 	isb	sy
 80152b2:	f3bf 8f4f 	dsb	sy
 80152b6:	b662      	cpsie	i
 80152b8:	60bb      	str	r3, [r7, #8]
}
 80152ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80152bc:	bf00      	nop
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d0fc      	beq.n	80152be <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80152c4:	bf00      	nop
 80152c6:	bf00      	nop
 80152c8:	3714      	adds	r7, #20
 80152ca:	46bd      	mov	sp, r7
 80152cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d0:	4770      	bx	lr
 80152d2:	bf00      	nop
 80152d4:	20000070 	.word	0x20000070
	...

080152e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80152e0:	4b07      	ldr	r3, [pc, #28]	@ (8015300 <pxCurrentTCBConst2>)
 80152e2:	6819      	ldr	r1, [r3, #0]
 80152e4:	6808      	ldr	r0, [r1, #0]
 80152e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152ea:	f380 8809 	msr	PSP, r0
 80152ee:	f3bf 8f6f 	isb	sy
 80152f2:	f04f 0000 	mov.w	r0, #0
 80152f6:	f380 8811 	msr	BASEPRI, r0
 80152fa:	4770      	bx	lr
 80152fc:	f3af 8000 	nop.w

08015300 <pxCurrentTCBConst2>:
 8015300:	200019f4 	.word	0x200019f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015304:	bf00      	nop
 8015306:	bf00      	nop

08015308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015308:	4808      	ldr	r0, [pc, #32]	@ (801532c <prvPortStartFirstTask+0x24>)
 801530a:	6800      	ldr	r0, [r0, #0]
 801530c:	6800      	ldr	r0, [r0, #0]
 801530e:	f380 8808 	msr	MSP, r0
 8015312:	f04f 0000 	mov.w	r0, #0
 8015316:	f380 8814 	msr	CONTROL, r0
 801531a:	b662      	cpsie	i
 801531c:	b661      	cpsie	f
 801531e:	f3bf 8f4f 	dsb	sy
 8015322:	f3bf 8f6f 	isb	sy
 8015326:	df00      	svc	0
 8015328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801532a:	bf00      	nop
 801532c:	e000ed08 	.word	0xe000ed08

08015330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b084      	sub	sp, #16
 8015334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015336:	4b37      	ldr	r3, [pc, #220]	@ (8015414 <xPortStartScheduler+0xe4>)
 8015338:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	781b      	ldrb	r3, [r3, #0]
 801533e:	b2db      	uxtb	r3, r3
 8015340:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	22ff      	movs	r2, #255	@ 0xff
 8015346:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	781b      	ldrb	r3, [r3, #0]
 801534c:	b2db      	uxtb	r3, r3
 801534e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015350:	78fb      	ldrb	r3, [r7, #3]
 8015352:	b2db      	uxtb	r3, r3
 8015354:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8015358:	b2da      	uxtb	r2, r3
 801535a:	4b2f      	ldr	r3, [pc, #188]	@ (8015418 <xPortStartScheduler+0xe8>)
 801535c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801535e:	4b2f      	ldr	r3, [pc, #188]	@ (801541c <xPortStartScheduler+0xec>)
 8015360:	2207      	movs	r2, #7
 8015362:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015364:	e009      	b.n	801537a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8015366:	4b2d      	ldr	r3, [pc, #180]	@ (801541c <xPortStartScheduler+0xec>)
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	3b01      	subs	r3, #1
 801536c:	4a2b      	ldr	r2, [pc, #172]	@ (801541c <xPortStartScheduler+0xec>)
 801536e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015370:	78fb      	ldrb	r3, [r7, #3]
 8015372:	b2db      	uxtb	r3, r3
 8015374:	005b      	lsls	r3, r3, #1
 8015376:	b2db      	uxtb	r3, r3
 8015378:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801537a:	78fb      	ldrb	r3, [r7, #3]
 801537c:	b2db      	uxtb	r3, r3
 801537e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015382:	2b80      	cmp	r3, #128	@ 0x80
 8015384:	d0ef      	beq.n	8015366 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015386:	4b25      	ldr	r3, [pc, #148]	@ (801541c <xPortStartScheduler+0xec>)
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	f1c3 0307 	rsb	r3, r3, #7
 801538e:	2b04      	cmp	r3, #4
 8015390:	d00d      	beq.n	80153ae <xPortStartScheduler+0x7e>
	__asm volatile
 8015392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015396:	b672      	cpsid	i
 8015398:	f383 8811 	msr	BASEPRI, r3
 801539c:	f3bf 8f6f 	isb	sy
 80153a0:	f3bf 8f4f 	dsb	sy
 80153a4:	b662      	cpsie	i
 80153a6:	60bb      	str	r3, [r7, #8]
}
 80153a8:	bf00      	nop
 80153aa:	bf00      	nop
 80153ac:	e7fd      	b.n	80153aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80153ae:	4b1b      	ldr	r3, [pc, #108]	@ (801541c <xPortStartScheduler+0xec>)
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	021b      	lsls	r3, r3, #8
 80153b4:	4a19      	ldr	r2, [pc, #100]	@ (801541c <xPortStartScheduler+0xec>)
 80153b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80153b8:	4b18      	ldr	r3, [pc, #96]	@ (801541c <xPortStartScheduler+0xec>)
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80153c0:	4a16      	ldr	r2, [pc, #88]	@ (801541c <xPortStartScheduler+0xec>)
 80153c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	b2da      	uxtb	r2, r3
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80153cc:	4b14      	ldr	r3, [pc, #80]	@ (8015420 <xPortStartScheduler+0xf0>)
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	4a13      	ldr	r2, [pc, #76]	@ (8015420 <xPortStartScheduler+0xf0>)
 80153d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80153d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80153d8:	4b11      	ldr	r3, [pc, #68]	@ (8015420 <xPortStartScheduler+0xf0>)
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	4a10      	ldr	r2, [pc, #64]	@ (8015420 <xPortStartScheduler+0xf0>)
 80153de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80153e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80153e4:	f000 f8dc 	bl	80155a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80153e8:	4b0e      	ldr	r3, [pc, #56]	@ (8015424 <xPortStartScheduler+0xf4>)
 80153ea:	2200      	movs	r2, #0
 80153ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80153ee:	f000 f8fb 	bl	80155e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80153f2:	4b0d      	ldr	r3, [pc, #52]	@ (8015428 <xPortStartScheduler+0xf8>)
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	4a0c      	ldr	r2, [pc, #48]	@ (8015428 <xPortStartScheduler+0xf8>)
 80153f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80153fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80153fe:	f7ff ff83 	bl	8015308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015402:	f7ff fb7d 	bl	8014b00 <vTaskSwitchContext>
	prvTaskExitError();
 8015406:	f7ff ff35 	bl	8015274 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801540a:	2300      	movs	r3, #0
}
 801540c:	4618      	mov	r0, r3
 801540e:	3710      	adds	r7, #16
 8015410:	46bd      	mov	sp, r7
 8015412:	bd80      	pop	{r7, pc}
 8015414:	e000e400 	.word	0xe000e400
 8015418:	20001b20 	.word	0x20001b20
 801541c:	20001b24 	.word	0x20001b24
 8015420:	e000ed20 	.word	0xe000ed20
 8015424:	20000070 	.word	0x20000070
 8015428:	e000ef34 	.word	0xe000ef34

0801542c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801542c:	b480      	push	{r7}
 801542e:	b083      	sub	sp, #12
 8015430:	af00      	add	r7, sp, #0
	__asm volatile
 8015432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015436:	b672      	cpsid	i
 8015438:	f383 8811 	msr	BASEPRI, r3
 801543c:	f3bf 8f6f 	isb	sy
 8015440:	f3bf 8f4f 	dsb	sy
 8015444:	b662      	cpsie	i
 8015446:	607b      	str	r3, [r7, #4]
}
 8015448:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801544a:	4b11      	ldr	r3, [pc, #68]	@ (8015490 <vPortEnterCritical+0x64>)
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	3301      	adds	r3, #1
 8015450:	4a0f      	ldr	r2, [pc, #60]	@ (8015490 <vPortEnterCritical+0x64>)
 8015452:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015454:	4b0e      	ldr	r3, [pc, #56]	@ (8015490 <vPortEnterCritical+0x64>)
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	2b01      	cmp	r3, #1
 801545a:	d112      	bne.n	8015482 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801545c:	4b0d      	ldr	r3, [pc, #52]	@ (8015494 <vPortEnterCritical+0x68>)
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	b2db      	uxtb	r3, r3
 8015462:	2b00      	cmp	r3, #0
 8015464:	d00d      	beq.n	8015482 <vPortEnterCritical+0x56>
	__asm volatile
 8015466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801546a:	b672      	cpsid	i
 801546c:	f383 8811 	msr	BASEPRI, r3
 8015470:	f3bf 8f6f 	isb	sy
 8015474:	f3bf 8f4f 	dsb	sy
 8015478:	b662      	cpsie	i
 801547a:	603b      	str	r3, [r7, #0]
}
 801547c:	bf00      	nop
 801547e:	bf00      	nop
 8015480:	e7fd      	b.n	801547e <vPortEnterCritical+0x52>
	}
}
 8015482:	bf00      	nop
 8015484:	370c      	adds	r7, #12
 8015486:	46bd      	mov	sp, r7
 8015488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801548c:	4770      	bx	lr
 801548e:	bf00      	nop
 8015490:	20000070 	.word	0x20000070
 8015494:	e000ed04 	.word	0xe000ed04

08015498 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015498:	b480      	push	{r7}
 801549a:	b083      	sub	sp, #12
 801549c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801549e:	4b13      	ldr	r3, [pc, #76]	@ (80154ec <vPortExitCritical+0x54>)
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d10d      	bne.n	80154c2 <vPortExitCritical+0x2a>
	__asm volatile
 80154a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154aa:	b672      	cpsid	i
 80154ac:	f383 8811 	msr	BASEPRI, r3
 80154b0:	f3bf 8f6f 	isb	sy
 80154b4:	f3bf 8f4f 	dsb	sy
 80154b8:	b662      	cpsie	i
 80154ba:	607b      	str	r3, [r7, #4]
}
 80154bc:	bf00      	nop
 80154be:	bf00      	nop
 80154c0:	e7fd      	b.n	80154be <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80154c2:	4b0a      	ldr	r3, [pc, #40]	@ (80154ec <vPortExitCritical+0x54>)
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	3b01      	subs	r3, #1
 80154c8:	4a08      	ldr	r2, [pc, #32]	@ (80154ec <vPortExitCritical+0x54>)
 80154ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80154cc:	4b07      	ldr	r3, [pc, #28]	@ (80154ec <vPortExitCritical+0x54>)
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d105      	bne.n	80154e0 <vPortExitCritical+0x48>
 80154d4:	2300      	movs	r3, #0
 80154d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80154d8:	683b      	ldr	r3, [r7, #0]
 80154da:	f383 8811 	msr	BASEPRI, r3
}
 80154de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80154e0:	bf00      	nop
 80154e2:	370c      	adds	r7, #12
 80154e4:	46bd      	mov	sp, r7
 80154e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ea:	4770      	bx	lr
 80154ec:	20000070 	.word	0x20000070

080154f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80154f0:	f3ef 8009 	mrs	r0, PSP
 80154f4:	f3bf 8f6f 	isb	sy
 80154f8:	4b15      	ldr	r3, [pc, #84]	@ (8015550 <pxCurrentTCBConst>)
 80154fa:	681a      	ldr	r2, [r3, #0]
 80154fc:	f01e 0f10 	tst.w	lr, #16
 8015500:	bf08      	it	eq
 8015502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801550a:	6010      	str	r0, [r2, #0]
 801550c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015510:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8015514:	b672      	cpsid	i
 8015516:	f380 8811 	msr	BASEPRI, r0
 801551a:	f3bf 8f4f 	dsb	sy
 801551e:	f3bf 8f6f 	isb	sy
 8015522:	b662      	cpsie	i
 8015524:	f7ff faec 	bl	8014b00 <vTaskSwitchContext>
 8015528:	f04f 0000 	mov.w	r0, #0
 801552c:	f380 8811 	msr	BASEPRI, r0
 8015530:	bc09      	pop	{r0, r3}
 8015532:	6819      	ldr	r1, [r3, #0]
 8015534:	6808      	ldr	r0, [r1, #0]
 8015536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801553a:	f01e 0f10 	tst.w	lr, #16
 801553e:	bf08      	it	eq
 8015540:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015544:	f380 8809 	msr	PSP, r0
 8015548:	f3bf 8f6f 	isb	sy
 801554c:	4770      	bx	lr
 801554e:	bf00      	nop

08015550 <pxCurrentTCBConst>:
 8015550:	200019f4 	.word	0x200019f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015554:	bf00      	nop
 8015556:	bf00      	nop

08015558 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b082      	sub	sp, #8
 801555c:	af00      	add	r7, sp, #0
	__asm volatile
 801555e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015562:	b672      	cpsid	i
 8015564:	f383 8811 	msr	BASEPRI, r3
 8015568:	f3bf 8f6f 	isb	sy
 801556c:	f3bf 8f4f 	dsb	sy
 8015570:	b662      	cpsie	i
 8015572:	607b      	str	r3, [r7, #4]
}
 8015574:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015576:	f7ff fa07 	bl	8014988 <xTaskIncrementTick>
 801557a:	4603      	mov	r3, r0
 801557c:	2b00      	cmp	r3, #0
 801557e:	d003      	beq.n	8015588 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015580:	4b06      	ldr	r3, [pc, #24]	@ (801559c <SysTick_Handler+0x44>)
 8015582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015586:	601a      	str	r2, [r3, #0]
 8015588:	2300      	movs	r3, #0
 801558a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801558c:	683b      	ldr	r3, [r7, #0]
 801558e:	f383 8811 	msr	BASEPRI, r3
}
 8015592:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015594:	bf00      	nop
 8015596:	3708      	adds	r7, #8
 8015598:	46bd      	mov	sp, r7
 801559a:	bd80      	pop	{r7, pc}
 801559c:	e000ed04 	.word	0xe000ed04

080155a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80155a0:	b480      	push	{r7}
 80155a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80155a4:	4b0b      	ldr	r3, [pc, #44]	@ (80155d4 <vPortSetupTimerInterrupt+0x34>)
 80155a6:	2200      	movs	r2, #0
 80155a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80155aa:	4b0b      	ldr	r3, [pc, #44]	@ (80155d8 <vPortSetupTimerInterrupt+0x38>)
 80155ac:	2200      	movs	r2, #0
 80155ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80155b0:	4b0a      	ldr	r3, [pc, #40]	@ (80155dc <vPortSetupTimerInterrupt+0x3c>)
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	4a0a      	ldr	r2, [pc, #40]	@ (80155e0 <vPortSetupTimerInterrupt+0x40>)
 80155b6:	fba2 2303 	umull	r2, r3, r2, r3
 80155ba:	099b      	lsrs	r3, r3, #6
 80155bc:	4a09      	ldr	r2, [pc, #36]	@ (80155e4 <vPortSetupTimerInterrupt+0x44>)
 80155be:	3b01      	subs	r3, #1
 80155c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80155c2:	4b04      	ldr	r3, [pc, #16]	@ (80155d4 <vPortSetupTimerInterrupt+0x34>)
 80155c4:	2207      	movs	r2, #7
 80155c6:	601a      	str	r2, [r3, #0]
}
 80155c8:	bf00      	nop
 80155ca:	46bd      	mov	sp, r7
 80155cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d0:	4770      	bx	lr
 80155d2:	bf00      	nop
 80155d4:	e000e010 	.word	0xe000e010
 80155d8:	e000e018 	.word	0xe000e018
 80155dc:	2000001c 	.word	0x2000001c
 80155e0:	10624dd3 	.word	0x10624dd3
 80155e4:	e000e014 	.word	0xe000e014

080155e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80155e8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80155f8 <vPortEnableVFP+0x10>
 80155ec:	6801      	ldr	r1, [r0, #0]
 80155ee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80155f2:	6001      	str	r1, [r0, #0]
 80155f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80155f6:	bf00      	nop
 80155f8:	e000ed88 	.word	0xe000ed88

080155fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80155fc:	b480      	push	{r7}
 80155fe:	b085      	sub	sp, #20
 8015600:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015602:	f3ef 8305 	mrs	r3, IPSR
 8015606:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	2b0f      	cmp	r3, #15
 801560c:	d917      	bls.n	801563e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801560e:	4a1a      	ldr	r2, [pc, #104]	@ (8015678 <vPortValidateInterruptPriority+0x7c>)
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	4413      	add	r3, r2
 8015614:	781b      	ldrb	r3, [r3, #0]
 8015616:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015618:	4b18      	ldr	r3, [pc, #96]	@ (801567c <vPortValidateInterruptPriority+0x80>)
 801561a:	781b      	ldrb	r3, [r3, #0]
 801561c:	7afa      	ldrb	r2, [r7, #11]
 801561e:	429a      	cmp	r2, r3
 8015620:	d20d      	bcs.n	801563e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8015622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015626:	b672      	cpsid	i
 8015628:	f383 8811 	msr	BASEPRI, r3
 801562c:	f3bf 8f6f 	isb	sy
 8015630:	f3bf 8f4f 	dsb	sy
 8015634:	b662      	cpsie	i
 8015636:	607b      	str	r3, [r7, #4]
}
 8015638:	bf00      	nop
 801563a:	bf00      	nop
 801563c:	e7fd      	b.n	801563a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801563e:	4b10      	ldr	r3, [pc, #64]	@ (8015680 <vPortValidateInterruptPriority+0x84>)
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8015646:	4b0f      	ldr	r3, [pc, #60]	@ (8015684 <vPortValidateInterruptPriority+0x88>)
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	429a      	cmp	r2, r3
 801564c:	d90d      	bls.n	801566a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801564e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015652:	b672      	cpsid	i
 8015654:	f383 8811 	msr	BASEPRI, r3
 8015658:	f3bf 8f6f 	isb	sy
 801565c:	f3bf 8f4f 	dsb	sy
 8015660:	b662      	cpsie	i
 8015662:	603b      	str	r3, [r7, #0]
}
 8015664:	bf00      	nop
 8015666:	bf00      	nop
 8015668:	e7fd      	b.n	8015666 <vPortValidateInterruptPriority+0x6a>
	}
 801566a:	bf00      	nop
 801566c:	3714      	adds	r7, #20
 801566e:	46bd      	mov	sp, r7
 8015670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015674:	4770      	bx	lr
 8015676:	bf00      	nop
 8015678:	e000e3f0 	.word	0xe000e3f0
 801567c:	20001b20 	.word	0x20001b20
 8015680:	e000ed0c 	.word	0xe000ed0c
 8015684:	20001b24 	.word	0x20001b24

08015688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015688:	b580      	push	{r7, lr}
 801568a:	b08a      	sub	sp, #40	@ 0x28
 801568c:	af00      	add	r7, sp, #0
 801568e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015690:	2300      	movs	r3, #0
 8015692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015694:	f7ff f8a8 	bl	80147e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015698:	4b5f      	ldr	r3, [pc, #380]	@ (8015818 <pvPortMalloc+0x190>)
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d101      	bne.n	80156a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80156a0:	f000 f924 	bl	80158ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80156a4:	4b5d      	ldr	r3, [pc, #372]	@ (801581c <pvPortMalloc+0x194>)
 80156a6:	681a      	ldr	r2, [r3, #0]
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	4013      	ands	r3, r2
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	f040 8094 	bne.w	80157da <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d020      	beq.n	80156fa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80156b8:	2208      	movs	r2, #8
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	4413      	add	r3, r2
 80156be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	f003 0307 	and.w	r3, r3, #7
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d017      	beq.n	80156fa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	f023 0307 	bic.w	r3, r3, #7
 80156d0:	3308      	adds	r3, #8
 80156d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	f003 0307 	and.w	r3, r3, #7
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d00d      	beq.n	80156fa <pvPortMalloc+0x72>
	__asm volatile
 80156de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156e2:	b672      	cpsid	i
 80156e4:	f383 8811 	msr	BASEPRI, r3
 80156e8:	f3bf 8f6f 	isb	sy
 80156ec:	f3bf 8f4f 	dsb	sy
 80156f0:	b662      	cpsie	i
 80156f2:	617b      	str	r3, [r7, #20]
}
 80156f4:	bf00      	nop
 80156f6:	bf00      	nop
 80156f8:	e7fd      	b.n	80156f6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d06c      	beq.n	80157da <pvPortMalloc+0x152>
 8015700:	4b47      	ldr	r3, [pc, #284]	@ (8015820 <pvPortMalloc+0x198>)
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	687a      	ldr	r2, [r7, #4]
 8015706:	429a      	cmp	r2, r3
 8015708:	d867      	bhi.n	80157da <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801570a:	4b46      	ldr	r3, [pc, #280]	@ (8015824 <pvPortMalloc+0x19c>)
 801570c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801570e:	4b45      	ldr	r3, [pc, #276]	@ (8015824 <pvPortMalloc+0x19c>)
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015714:	e004      	b.n	8015720 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8015716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015718:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801571a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015722:	685b      	ldr	r3, [r3, #4]
 8015724:	687a      	ldr	r2, [r7, #4]
 8015726:	429a      	cmp	r2, r3
 8015728:	d903      	bls.n	8015732 <pvPortMalloc+0xaa>
 801572a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d1f1      	bne.n	8015716 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015732:	4b39      	ldr	r3, [pc, #228]	@ (8015818 <pvPortMalloc+0x190>)
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015738:	429a      	cmp	r2, r3
 801573a:	d04e      	beq.n	80157da <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801573c:	6a3b      	ldr	r3, [r7, #32]
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	2208      	movs	r2, #8
 8015742:	4413      	add	r3, r2
 8015744:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015748:	681a      	ldr	r2, [r3, #0]
 801574a:	6a3b      	ldr	r3, [r7, #32]
 801574c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801574e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015750:	685a      	ldr	r2, [r3, #4]
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	1ad2      	subs	r2, r2, r3
 8015756:	2308      	movs	r3, #8
 8015758:	005b      	lsls	r3, r3, #1
 801575a:	429a      	cmp	r2, r3
 801575c:	d922      	bls.n	80157a4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801575e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	4413      	add	r3, r2
 8015764:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015766:	69bb      	ldr	r3, [r7, #24]
 8015768:	f003 0307 	and.w	r3, r3, #7
 801576c:	2b00      	cmp	r3, #0
 801576e:	d00d      	beq.n	801578c <pvPortMalloc+0x104>
	__asm volatile
 8015770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015774:	b672      	cpsid	i
 8015776:	f383 8811 	msr	BASEPRI, r3
 801577a:	f3bf 8f6f 	isb	sy
 801577e:	f3bf 8f4f 	dsb	sy
 8015782:	b662      	cpsie	i
 8015784:	613b      	str	r3, [r7, #16]
}
 8015786:	bf00      	nop
 8015788:	bf00      	nop
 801578a:	e7fd      	b.n	8015788 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801578c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801578e:	685a      	ldr	r2, [r3, #4]
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	1ad2      	subs	r2, r2, r3
 8015794:	69bb      	ldr	r3, [r7, #24]
 8015796:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801579a:	687a      	ldr	r2, [r7, #4]
 801579c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801579e:	69b8      	ldr	r0, [r7, #24]
 80157a0:	f000 f906 	bl	80159b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80157a4:	4b1e      	ldr	r3, [pc, #120]	@ (8015820 <pvPortMalloc+0x198>)
 80157a6:	681a      	ldr	r2, [r3, #0]
 80157a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157aa:	685b      	ldr	r3, [r3, #4]
 80157ac:	1ad3      	subs	r3, r2, r3
 80157ae:	4a1c      	ldr	r2, [pc, #112]	@ (8015820 <pvPortMalloc+0x198>)
 80157b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80157b2:	4b1b      	ldr	r3, [pc, #108]	@ (8015820 <pvPortMalloc+0x198>)
 80157b4:	681a      	ldr	r2, [r3, #0]
 80157b6:	4b1c      	ldr	r3, [pc, #112]	@ (8015828 <pvPortMalloc+0x1a0>)
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	429a      	cmp	r2, r3
 80157bc:	d203      	bcs.n	80157c6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80157be:	4b18      	ldr	r3, [pc, #96]	@ (8015820 <pvPortMalloc+0x198>)
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	4a19      	ldr	r2, [pc, #100]	@ (8015828 <pvPortMalloc+0x1a0>)
 80157c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80157c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157c8:	685a      	ldr	r2, [r3, #4]
 80157ca:	4b14      	ldr	r3, [pc, #80]	@ (801581c <pvPortMalloc+0x194>)
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	431a      	orrs	r2, r3
 80157d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80157d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157d6:	2200      	movs	r2, #0
 80157d8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80157da:	f7ff f813 	bl	8014804 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80157de:	69fb      	ldr	r3, [r7, #28]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d101      	bne.n	80157e8 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80157e4:	f7ec f916 	bl	8001a14 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80157e8:	69fb      	ldr	r3, [r7, #28]
 80157ea:	f003 0307 	and.w	r3, r3, #7
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d00d      	beq.n	801580e <pvPortMalloc+0x186>
	__asm volatile
 80157f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157f6:	b672      	cpsid	i
 80157f8:	f383 8811 	msr	BASEPRI, r3
 80157fc:	f3bf 8f6f 	isb	sy
 8015800:	f3bf 8f4f 	dsb	sy
 8015804:	b662      	cpsie	i
 8015806:	60fb      	str	r3, [r7, #12]
}
 8015808:	bf00      	nop
 801580a:	bf00      	nop
 801580c:	e7fd      	b.n	801580a <pvPortMalloc+0x182>
	return pvReturn;
 801580e:	69fb      	ldr	r3, [r7, #28]
}
 8015810:	4618      	mov	r0, r3
 8015812:	3728      	adds	r7, #40	@ 0x28
 8015814:	46bd      	mov	sp, r7
 8015816:	bd80      	pop	{r7, pc}
 8015818:	20011b30 	.word	0x20011b30
 801581c:	20011b3c 	.word	0x20011b3c
 8015820:	20011b34 	.word	0x20011b34
 8015824:	20011b28 	.word	0x20011b28
 8015828:	20011b38 	.word	0x20011b38

0801582c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801582c:	b580      	push	{r7, lr}
 801582e:	b086      	sub	sp, #24
 8015830:	af00      	add	r7, sp, #0
 8015832:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d04e      	beq.n	80158dc <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801583e:	2308      	movs	r3, #8
 8015840:	425b      	negs	r3, r3
 8015842:	697a      	ldr	r2, [r7, #20]
 8015844:	4413      	add	r3, r2
 8015846:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801584c:	693b      	ldr	r3, [r7, #16]
 801584e:	685a      	ldr	r2, [r3, #4]
 8015850:	4b24      	ldr	r3, [pc, #144]	@ (80158e4 <vPortFree+0xb8>)
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	4013      	ands	r3, r2
 8015856:	2b00      	cmp	r3, #0
 8015858:	d10d      	bne.n	8015876 <vPortFree+0x4a>
	__asm volatile
 801585a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801585e:	b672      	cpsid	i
 8015860:	f383 8811 	msr	BASEPRI, r3
 8015864:	f3bf 8f6f 	isb	sy
 8015868:	f3bf 8f4f 	dsb	sy
 801586c:	b662      	cpsie	i
 801586e:	60fb      	str	r3, [r7, #12]
}
 8015870:	bf00      	nop
 8015872:	bf00      	nop
 8015874:	e7fd      	b.n	8015872 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015876:	693b      	ldr	r3, [r7, #16]
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d00d      	beq.n	801589a <vPortFree+0x6e>
	__asm volatile
 801587e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015882:	b672      	cpsid	i
 8015884:	f383 8811 	msr	BASEPRI, r3
 8015888:	f3bf 8f6f 	isb	sy
 801588c:	f3bf 8f4f 	dsb	sy
 8015890:	b662      	cpsie	i
 8015892:	60bb      	str	r3, [r7, #8]
}
 8015894:	bf00      	nop
 8015896:	bf00      	nop
 8015898:	e7fd      	b.n	8015896 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801589a:	693b      	ldr	r3, [r7, #16]
 801589c:	685a      	ldr	r2, [r3, #4]
 801589e:	4b11      	ldr	r3, [pc, #68]	@ (80158e4 <vPortFree+0xb8>)
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	4013      	ands	r3, r2
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d019      	beq.n	80158dc <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80158a8:	693b      	ldr	r3, [r7, #16]
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d115      	bne.n	80158dc <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80158b0:	693b      	ldr	r3, [r7, #16]
 80158b2:	685a      	ldr	r2, [r3, #4]
 80158b4:	4b0b      	ldr	r3, [pc, #44]	@ (80158e4 <vPortFree+0xb8>)
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	43db      	mvns	r3, r3
 80158ba:	401a      	ands	r2, r3
 80158bc:	693b      	ldr	r3, [r7, #16]
 80158be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80158c0:	f7fe ff92 	bl	80147e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80158c4:	693b      	ldr	r3, [r7, #16]
 80158c6:	685a      	ldr	r2, [r3, #4]
 80158c8:	4b07      	ldr	r3, [pc, #28]	@ (80158e8 <vPortFree+0xbc>)
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	4413      	add	r3, r2
 80158ce:	4a06      	ldr	r2, [pc, #24]	@ (80158e8 <vPortFree+0xbc>)
 80158d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80158d2:	6938      	ldr	r0, [r7, #16]
 80158d4:	f000 f86c 	bl	80159b0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80158d8:	f7fe ff94 	bl	8014804 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80158dc:	bf00      	nop
 80158de:	3718      	adds	r7, #24
 80158e0:	46bd      	mov	sp, r7
 80158e2:	bd80      	pop	{r7, pc}
 80158e4:	20011b3c 	.word	0x20011b3c
 80158e8:	20011b34 	.word	0x20011b34

080158ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80158ec:	b480      	push	{r7}
 80158ee:	b085      	sub	sp, #20
 80158f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80158f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80158f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80158f8:	4b27      	ldr	r3, [pc, #156]	@ (8015998 <prvHeapInit+0xac>)
 80158fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	f003 0307 	and.w	r3, r3, #7
 8015902:	2b00      	cmp	r3, #0
 8015904:	d00c      	beq.n	8015920 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	3307      	adds	r3, #7
 801590a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	f023 0307 	bic.w	r3, r3, #7
 8015912:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015914:	68ba      	ldr	r2, [r7, #8]
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	1ad3      	subs	r3, r2, r3
 801591a:	4a1f      	ldr	r2, [pc, #124]	@ (8015998 <prvHeapInit+0xac>)
 801591c:	4413      	add	r3, r2
 801591e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015924:	4a1d      	ldr	r2, [pc, #116]	@ (801599c <prvHeapInit+0xb0>)
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801592a:	4b1c      	ldr	r3, [pc, #112]	@ (801599c <prvHeapInit+0xb0>)
 801592c:	2200      	movs	r2, #0
 801592e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	68ba      	ldr	r2, [r7, #8]
 8015934:	4413      	add	r3, r2
 8015936:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015938:	2208      	movs	r2, #8
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	1a9b      	subs	r3, r3, r2
 801593e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	f023 0307 	bic.w	r3, r3, #7
 8015946:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	4a15      	ldr	r2, [pc, #84]	@ (80159a0 <prvHeapInit+0xb4>)
 801594c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801594e:	4b14      	ldr	r3, [pc, #80]	@ (80159a0 <prvHeapInit+0xb4>)
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	2200      	movs	r2, #0
 8015954:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015956:	4b12      	ldr	r3, [pc, #72]	@ (80159a0 <prvHeapInit+0xb4>)
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	2200      	movs	r2, #0
 801595c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015962:	683b      	ldr	r3, [r7, #0]
 8015964:	68fa      	ldr	r2, [r7, #12]
 8015966:	1ad2      	subs	r2, r2, r3
 8015968:	683b      	ldr	r3, [r7, #0]
 801596a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801596c:	4b0c      	ldr	r3, [pc, #48]	@ (80159a0 <prvHeapInit+0xb4>)
 801596e:	681a      	ldr	r2, [r3, #0]
 8015970:	683b      	ldr	r3, [r7, #0]
 8015972:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015974:	683b      	ldr	r3, [r7, #0]
 8015976:	685b      	ldr	r3, [r3, #4]
 8015978:	4a0a      	ldr	r2, [pc, #40]	@ (80159a4 <prvHeapInit+0xb8>)
 801597a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801597c:	683b      	ldr	r3, [r7, #0]
 801597e:	685b      	ldr	r3, [r3, #4]
 8015980:	4a09      	ldr	r2, [pc, #36]	@ (80159a8 <prvHeapInit+0xbc>)
 8015982:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015984:	4b09      	ldr	r3, [pc, #36]	@ (80159ac <prvHeapInit+0xc0>)
 8015986:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801598a:	601a      	str	r2, [r3, #0]
}
 801598c:	bf00      	nop
 801598e:	3714      	adds	r7, #20
 8015990:	46bd      	mov	sp, r7
 8015992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015996:	4770      	bx	lr
 8015998:	20001b28 	.word	0x20001b28
 801599c:	20011b28 	.word	0x20011b28
 80159a0:	20011b30 	.word	0x20011b30
 80159a4:	20011b38 	.word	0x20011b38
 80159a8:	20011b34 	.word	0x20011b34
 80159ac:	20011b3c 	.word	0x20011b3c

080159b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80159b0:	b480      	push	{r7}
 80159b2:	b085      	sub	sp, #20
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80159b8:	4b28      	ldr	r3, [pc, #160]	@ (8015a5c <prvInsertBlockIntoFreeList+0xac>)
 80159ba:	60fb      	str	r3, [r7, #12]
 80159bc:	e002      	b.n	80159c4 <prvInsertBlockIntoFreeList+0x14>
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	60fb      	str	r3, [r7, #12]
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	687a      	ldr	r2, [r7, #4]
 80159ca:	429a      	cmp	r2, r3
 80159cc:	d8f7      	bhi.n	80159be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	685b      	ldr	r3, [r3, #4]
 80159d6:	68ba      	ldr	r2, [r7, #8]
 80159d8:	4413      	add	r3, r2
 80159da:	687a      	ldr	r2, [r7, #4]
 80159dc:	429a      	cmp	r2, r3
 80159de:	d108      	bne.n	80159f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	685a      	ldr	r2, [r3, #4]
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	685b      	ldr	r3, [r3, #4]
 80159e8:	441a      	add	r2, r3
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	685b      	ldr	r3, [r3, #4]
 80159fa:	68ba      	ldr	r2, [r7, #8]
 80159fc:	441a      	add	r2, r3
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	429a      	cmp	r2, r3
 8015a04:	d118      	bne.n	8015a38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	681a      	ldr	r2, [r3, #0]
 8015a0a:	4b15      	ldr	r3, [pc, #84]	@ (8015a60 <prvInsertBlockIntoFreeList+0xb0>)
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	429a      	cmp	r2, r3
 8015a10:	d00d      	beq.n	8015a2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	685a      	ldr	r2, [r3, #4]
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	685b      	ldr	r3, [r3, #4]
 8015a1c:	441a      	add	r2, r3
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	681a      	ldr	r2, [r3, #0]
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	601a      	str	r2, [r3, #0]
 8015a2c:	e008      	b.n	8015a40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8015a60 <prvInsertBlockIntoFreeList+0xb0>)
 8015a30:	681a      	ldr	r2, [r3, #0]
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	601a      	str	r2, [r3, #0]
 8015a36:	e003      	b.n	8015a40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	681a      	ldr	r2, [r3, #0]
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015a40:	68fa      	ldr	r2, [r7, #12]
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	429a      	cmp	r2, r3
 8015a46:	d002      	beq.n	8015a4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	687a      	ldr	r2, [r7, #4]
 8015a4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015a4e:	bf00      	nop
 8015a50:	3714      	adds	r7, #20
 8015a52:	46bd      	mov	sp, r7
 8015a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a58:	4770      	bx	lr
 8015a5a:	bf00      	nop
 8015a5c:	20011b28 	.word	0x20011b28
 8015a60:	20011b30 	.word	0x20011b30

08015a64 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b082      	sub	sp, #8
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8015a72:	4618      	mov	r0, r3
 8015a74:	f7fa fea8 	bl	80107c8 <USBH_LL_IncTimer>
}
 8015a78:	bf00      	nop
 8015a7a:	3708      	adds	r7, #8
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bd80      	pop	{r7, pc}

08015a80 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b082      	sub	sp, #8
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8015a8e:	4618      	mov	r0, r3
 8015a90:	f7fa fee8 	bl	8010864 <USBH_LL_Connect>
}
 8015a94:	bf00      	nop
 8015a96:	3708      	adds	r7, #8
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	bd80      	pop	{r7, pc}

08015a9c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b082      	sub	sp, #8
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8015aaa:	4618      	mov	r0, r3
 8015aac:	f7fa fef5 	bl	801089a <USBH_LL_Disconnect>
}
 8015ab0:	bf00      	nop
 8015ab2:	3708      	adds	r7, #8
 8015ab4:	46bd      	mov	sp, r7
 8015ab6:	bd80      	pop	{r7, pc}

08015ab8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8015ab8:	b580      	push	{r7, lr}
 8015aba:	b082      	sub	sp, #8
 8015abc:	af00      	add	r7, sp, #0
 8015abe:	6078      	str	r0, [r7, #4]
 8015ac0:	460b      	mov	r3, r1
 8015ac2:	70fb      	strb	r3, [r7, #3]
 8015ac4:	4613      	mov	r3, r2
 8015ac6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f7fa ff34 	bl	801093c <USBH_LL_NotifyURBChange>
#endif
}
 8015ad4:	bf00      	nop
 8015ad6:	3708      	adds	r7, #8
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	bd80      	pop	{r7, pc}

08015adc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b082      	sub	sp, #8
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8015aea:	4618      	mov	r0, r3
 8015aec:	f7fa fe96 	bl	801081c <USBH_LL_PortEnabled>
}
 8015af0:	bf00      	nop
 8015af2:	3708      	adds	r7, #8
 8015af4:	46bd      	mov	sp, r7
 8015af6:	bd80      	pop	{r7, pc}

08015af8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b082      	sub	sp, #8
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8015b06:	4618      	mov	r0, r3
 8015b08:	f7fa fe9a 	bl	8010840 <USBH_LL_PortDisabled>
}
 8015b0c:	bf00      	nop
 8015b0e:	3708      	adds	r7, #8
 8015b10:	46bd      	mov	sp, r7
 8015b12:	bd80      	pop	{r7, pc}

08015b14 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8015b14:	b580      	push	{r7, lr}
 8015b16:	b084      	sub	sp, #16
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015b20:	2300      	movs	r3, #0
 8015b22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	f7f1 fc2d 	bl	800738a <HAL_HCD_Stop>
 8015b30:	4603      	mov	r3, r0
 8015b32:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015b34:	7bfb      	ldrb	r3, [r7, #15]
 8015b36:	4618      	mov	r0, r3
 8015b38:	f000 f808 	bl	8015b4c <USBH_Get_USB_Status>
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b40:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b42:	4618      	mov	r0, r3
 8015b44:	3710      	adds	r7, #16
 8015b46:	46bd      	mov	sp, r7
 8015b48:	bd80      	pop	{r7, pc}
	...

08015b4c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015b4c:	b480      	push	{r7}
 8015b4e:	b085      	sub	sp, #20
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	4603      	mov	r3, r0
 8015b54:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015b56:	2300      	movs	r3, #0
 8015b58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015b5a:	79fb      	ldrb	r3, [r7, #7]
 8015b5c:	2b03      	cmp	r3, #3
 8015b5e:	d817      	bhi.n	8015b90 <USBH_Get_USB_Status+0x44>
 8015b60:	a201      	add	r2, pc, #4	@ (adr r2, 8015b68 <USBH_Get_USB_Status+0x1c>)
 8015b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b66:	bf00      	nop
 8015b68:	08015b79 	.word	0x08015b79
 8015b6c:	08015b7f 	.word	0x08015b7f
 8015b70:	08015b85 	.word	0x08015b85
 8015b74:	08015b8b 	.word	0x08015b8b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8015b78:	2300      	movs	r3, #0
 8015b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8015b7c:	e00b      	b.n	8015b96 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8015b7e:	2302      	movs	r3, #2
 8015b80:	73fb      	strb	r3, [r7, #15]
    break;
 8015b82:	e008      	b.n	8015b96 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8015b84:	2301      	movs	r3, #1
 8015b86:	73fb      	strb	r3, [r7, #15]
    break;
 8015b88:	e005      	b.n	8015b96 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8015b8a:	2302      	movs	r3, #2
 8015b8c:	73fb      	strb	r3, [r7, #15]
    break;
 8015b8e:	e002      	b.n	8015b96 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8015b90:	2302      	movs	r3, #2
 8015b92:	73fb      	strb	r3, [r7, #15]
    break;
 8015b94:	bf00      	nop
  }
  return usb_status;
 8015b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b98:	4618      	mov	r0, r3
 8015b9a:	3714      	adds	r7, #20
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba2:	4770      	bx	lr

08015ba4 <sbrk_aligned>:
 8015ba4:	b570      	push	{r4, r5, r6, lr}
 8015ba6:	4e0f      	ldr	r6, [pc, #60]	@ (8015be4 <sbrk_aligned+0x40>)
 8015ba8:	460c      	mov	r4, r1
 8015baa:	6831      	ldr	r1, [r6, #0]
 8015bac:	4605      	mov	r5, r0
 8015bae:	b911      	cbnz	r1, 8015bb6 <sbrk_aligned+0x12>
 8015bb0:	f000 f96c 	bl	8015e8c <_sbrk_r>
 8015bb4:	6030      	str	r0, [r6, #0]
 8015bb6:	4621      	mov	r1, r4
 8015bb8:	4628      	mov	r0, r5
 8015bba:	f000 f967 	bl	8015e8c <_sbrk_r>
 8015bbe:	1c43      	adds	r3, r0, #1
 8015bc0:	d103      	bne.n	8015bca <sbrk_aligned+0x26>
 8015bc2:	f04f 34ff 	mov.w	r4, #4294967295
 8015bc6:	4620      	mov	r0, r4
 8015bc8:	bd70      	pop	{r4, r5, r6, pc}
 8015bca:	1cc4      	adds	r4, r0, #3
 8015bcc:	f024 0403 	bic.w	r4, r4, #3
 8015bd0:	42a0      	cmp	r0, r4
 8015bd2:	d0f8      	beq.n	8015bc6 <sbrk_aligned+0x22>
 8015bd4:	1a21      	subs	r1, r4, r0
 8015bd6:	4628      	mov	r0, r5
 8015bd8:	f000 f958 	bl	8015e8c <_sbrk_r>
 8015bdc:	3001      	adds	r0, #1
 8015bde:	d1f2      	bne.n	8015bc6 <sbrk_aligned+0x22>
 8015be0:	e7ef      	b.n	8015bc2 <sbrk_aligned+0x1e>
 8015be2:	bf00      	nop
 8015be4:	20011f20 	.word	0x20011f20

08015be8 <_malloc_r>:
 8015be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015bec:	1ccd      	adds	r5, r1, #3
 8015bee:	f025 0503 	bic.w	r5, r5, #3
 8015bf2:	3508      	adds	r5, #8
 8015bf4:	2d0c      	cmp	r5, #12
 8015bf6:	bf38      	it	cc
 8015bf8:	250c      	movcc	r5, #12
 8015bfa:	2d00      	cmp	r5, #0
 8015bfc:	4606      	mov	r6, r0
 8015bfe:	db01      	blt.n	8015c04 <_malloc_r+0x1c>
 8015c00:	42a9      	cmp	r1, r5
 8015c02:	d904      	bls.n	8015c0e <_malloc_r+0x26>
 8015c04:	230c      	movs	r3, #12
 8015c06:	6033      	str	r3, [r6, #0]
 8015c08:	2000      	movs	r0, #0
 8015c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015ce4 <_malloc_r+0xfc>
 8015c12:	f000 f869 	bl	8015ce8 <__malloc_lock>
 8015c16:	f8d8 3000 	ldr.w	r3, [r8]
 8015c1a:	461c      	mov	r4, r3
 8015c1c:	bb44      	cbnz	r4, 8015c70 <_malloc_r+0x88>
 8015c1e:	4629      	mov	r1, r5
 8015c20:	4630      	mov	r0, r6
 8015c22:	f7ff ffbf 	bl	8015ba4 <sbrk_aligned>
 8015c26:	1c43      	adds	r3, r0, #1
 8015c28:	4604      	mov	r4, r0
 8015c2a:	d158      	bne.n	8015cde <_malloc_r+0xf6>
 8015c2c:	f8d8 4000 	ldr.w	r4, [r8]
 8015c30:	4627      	mov	r7, r4
 8015c32:	2f00      	cmp	r7, #0
 8015c34:	d143      	bne.n	8015cbe <_malloc_r+0xd6>
 8015c36:	2c00      	cmp	r4, #0
 8015c38:	d04b      	beq.n	8015cd2 <_malloc_r+0xea>
 8015c3a:	6823      	ldr	r3, [r4, #0]
 8015c3c:	4639      	mov	r1, r7
 8015c3e:	4630      	mov	r0, r6
 8015c40:	eb04 0903 	add.w	r9, r4, r3
 8015c44:	f000 f922 	bl	8015e8c <_sbrk_r>
 8015c48:	4581      	cmp	r9, r0
 8015c4a:	d142      	bne.n	8015cd2 <_malloc_r+0xea>
 8015c4c:	6821      	ldr	r1, [r4, #0]
 8015c4e:	1a6d      	subs	r5, r5, r1
 8015c50:	4629      	mov	r1, r5
 8015c52:	4630      	mov	r0, r6
 8015c54:	f7ff ffa6 	bl	8015ba4 <sbrk_aligned>
 8015c58:	3001      	adds	r0, #1
 8015c5a:	d03a      	beq.n	8015cd2 <_malloc_r+0xea>
 8015c5c:	6823      	ldr	r3, [r4, #0]
 8015c5e:	442b      	add	r3, r5
 8015c60:	6023      	str	r3, [r4, #0]
 8015c62:	f8d8 3000 	ldr.w	r3, [r8]
 8015c66:	685a      	ldr	r2, [r3, #4]
 8015c68:	bb62      	cbnz	r2, 8015cc4 <_malloc_r+0xdc>
 8015c6a:	f8c8 7000 	str.w	r7, [r8]
 8015c6e:	e00f      	b.n	8015c90 <_malloc_r+0xa8>
 8015c70:	6822      	ldr	r2, [r4, #0]
 8015c72:	1b52      	subs	r2, r2, r5
 8015c74:	d420      	bmi.n	8015cb8 <_malloc_r+0xd0>
 8015c76:	2a0b      	cmp	r2, #11
 8015c78:	d917      	bls.n	8015caa <_malloc_r+0xc2>
 8015c7a:	1961      	adds	r1, r4, r5
 8015c7c:	42a3      	cmp	r3, r4
 8015c7e:	6025      	str	r5, [r4, #0]
 8015c80:	bf18      	it	ne
 8015c82:	6059      	strne	r1, [r3, #4]
 8015c84:	6863      	ldr	r3, [r4, #4]
 8015c86:	bf08      	it	eq
 8015c88:	f8c8 1000 	streq.w	r1, [r8]
 8015c8c:	5162      	str	r2, [r4, r5]
 8015c8e:	604b      	str	r3, [r1, #4]
 8015c90:	4630      	mov	r0, r6
 8015c92:	f000 f82f 	bl	8015cf4 <__malloc_unlock>
 8015c96:	f104 000b 	add.w	r0, r4, #11
 8015c9a:	1d23      	adds	r3, r4, #4
 8015c9c:	f020 0007 	bic.w	r0, r0, #7
 8015ca0:	1ac2      	subs	r2, r0, r3
 8015ca2:	bf1c      	itt	ne
 8015ca4:	1a1b      	subne	r3, r3, r0
 8015ca6:	50a3      	strne	r3, [r4, r2]
 8015ca8:	e7af      	b.n	8015c0a <_malloc_r+0x22>
 8015caa:	6862      	ldr	r2, [r4, #4]
 8015cac:	42a3      	cmp	r3, r4
 8015cae:	bf0c      	ite	eq
 8015cb0:	f8c8 2000 	streq.w	r2, [r8]
 8015cb4:	605a      	strne	r2, [r3, #4]
 8015cb6:	e7eb      	b.n	8015c90 <_malloc_r+0xa8>
 8015cb8:	4623      	mov	r3, r4
 8015cba:	6864      	ldr	r4, [r4, #4]
 8015cbc:	e7ae      	b.n	8015c1c <_malloc_r+0x34>
 8015cbe:	463c      	mov	r4, r7
 8015cc0:	687f      	ldr	r7, [r7, #4]
 8015cc2:	e7b6      	b.n	8015c32 <_malloc_r+0x4a>
 8015cc4:	461a      	mov	r2, r3
 8015cc6:	685b      	ldr	r3, [r3, #4]
 8015cc8:	42a3      	cmp	r3, r4
 8015cca:	d1fb      	bne.n	8015cc4 <_malloc_r+0xdc>
 8015ccc:	2300      	movs	r3, #0
 8015cce:	6053      	str	r3, [r2, #4]
 8015cd0:	e7de      	b.n	8015c90 <_malloc_r+0xa8>
 8015cd2:	230c      	movs	r3, #12
 8015cd4:	6033      	str	r3, [r6, #0]
 8015cd6:	4630      	mov	r0, r6
 8015cd8:	f000 f80c 	bl	8015cf4 <__malloc_unlock>
 8015cdc:	e794      	b.n	8015c08 <_malloc_r+0x20>
 8015cde:	6005      	str	r5, [r0, #0]
 8015ce0:	e7d6      	b.n	8015c90 <_malloc_r+0xa8>
 8015ce2:	bf00      	nop
 8015ce4:	20011f24 	.word	0x20011f24

08015ce8 <__malloc_lock>:
 8015ce8:	4801      	ldr	r0, [pc, #4]	@ (8015cf0 <__malloc_lock+0x8>)
 8015cea:	f000 b909 	b.w	8015f00 <__retarget_lock_acquire_recursive>
 8015cee:	bf00      	nop
 8015cf0:	20012064 	.word	0x20012064

08015cf4 <__malloc_unlock>:
 8015cf4:	4801      	ldr	r0, [pc, #4]	@ (8015cfc <__malloc_unlock+0x8>)
 8015cf6:	f000 b904 	b.w	8015f02 <__retarget_lock_release_recursive>
 8015cfa:	bf00      	nop
 8015cfc:	20012064 	.word	0x20012064

08015d00 <sniprintf>:
 8015d00:	b40c      	push	{r2, r3}
 8015d02:	b530      	push	{r4, r5, lr}
 8015d04:	4b18      	ldr	r3, [pc, #96]	@ (8015d68 <sniprintf+0x68>)
 8015d06:	1e0c      	subs	r4, r1, #0
 8015d08:	681d      	ldr	r5, [r3, #0]
 8015d0a:	b09d      	sub	sp, #116	@ 0x74
 8015d0c:	da08      	bge.n	8015d20 <sniprintf+0x20>
 8015d0e:	238b      	movs	r3, #139	@ 0x8b
 8015d10:	602b      	str	r3, [r5, #0]
 8015d12:	f04f 30ff 	mov.w	r0, #4294967295
 8015d16:	b01d      	add	sp, #116	@ 0x74
 8015d18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015d1c:	b002      	add	sp, #8
 8015d1e:	4770      	bx	lr
 8015d20:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015d24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015d28:	f04f 0300 	mov.w	r3, #0
 8015d2c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8015d2e:	bf14      	ite	ne
 8015d30:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015d34:	4623      	moveq	r3, r4
 8015d36:	9304      	str	r3, [sp, #16]
 8015d38:	9307      	str	r3, [sp, #28]
 8015d3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015d3e:	9002      	str	r0, [sp, #8]
 8015d40:	9006      	str	r0, [sp, #24]
 8015d42:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015d46:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015d48:	ab21      	add	r3, sp, #132	@ 0x84
 8015d4a:	a902      	add	r1, sp, #8
 8015d4c:	4628      	mov	r0, r5
 8015d4e:	9301      	str	r3, [sp, #4]
 8015d50:	f000 f98c 	bl	801606c <_svfiprintf_r>
 8015d54:	1c43      	adds	r3, r0, #1
 8015d56:	bfbc      	itt	lt
 8015d58:	238b      	movlt	r3, #139	@ 0x8b
 8015d5a:	602b      	strlt	r3, [r5, #0]
 8015d5c:	2c00      	cmp	r4, #0
 8015d5e:	d0da      	beq.n	8015d16 <sniprintf+0x16>
 8015d60:	9b02      	ldr	r3, [sp, #8]
 8015d62:	2200      	movs	r2, #0
 8015d64:	701a      	strb	r2, [r3, #0]
 8015d66:	e7d6      	b.n	8015d16 <sniprintf+0x16>
 8015d68:	20000074 	.word	0x20000074

08015d6c <siprintf>:
 8015d6c:	b40e      	push	{r1, r2, r3}
 8015d6e:	b510      	push	{r4, lr}
 8015d70:	b09d      	sub	sp, #116	@ 0x74
 8015d72:	ab1f      	add	r3, sp, #124	@ 0x7c
 8015d74:	9002      	str	r0, [sp, #8]
 8015d76:	9006      	str	r0, [sp, #24]
 8015d78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015d7c:	480a      	ldr	r0, [pc, #40]	@ (8015da8 <siprintf+0x3c>)
 8015d7e:	9107      	str	r1, [sp, #28]
 8015d80:	9104      	str	r1, [sp, #16]
 8015d82:	490a      	ldr	r1, [pc, #40]	@ (8015dac <siprintf+0x40>)
 8015d84:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d88:	9105      	str	r1, [sp, #20]
 8015d8a:	2400      	movs	r4, #0
 8015d8c:	a902      	add	r1, sp, #8
 8015d8e:	6800      	ldr	r0, [r0, #0]
 8015d90:	9301      	str	r3, [sp, #4]
 8015d92:	941b      	str	r4, [sp, #108]	@ 0x6c
 8015d94:	f000 f96a 	bl	801606c <_svfiprintf_r>
 8015d98:	9b02      	ldr	r3, [sp, #8]
 8015d9a:	701c      	strb	r4, [r3, #0]
 8015d9c:	b01d      	add	sp, #116	@ 0x74
 8015d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015da2:	b003      	add	sp, #12
 8015da4:	4770      	bx	lr
 8015da6:	bf00      	nop
 8015da8:	20000074 	.word	0x20000074
 8015dac:	ffff0208 	.word	0xffff0208

08015db0 <_vsniprintf_r>:
 8015db0:	b530      	push	{r4, r5, lr}
 8015db2:	4614      	mov	r4, r2
 8015db4:	2c00      	cmp	r4, #0
 8015db6:	b09b      	sub	sp, #108	@ 0x6c
 8015db8:	4605      	mov	r5, r0
 8015dba:	461a      	mov	r2, r3
 8015dbc:	da05      	bge.n	8015dca <_vsniprintf_r+0x1a>
 8015dbe:	238b      	movs	r3, #139	@ 0x8b
 8015dc0:	6003      	str	r3, [r0, #0]
 8015dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8015dc6:	b01b      	add	sp, #108	@ 0x6c
 8015dc8:	bd30      	pop	{r4, r5, pc}
 8015dca:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015dce:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015dd2:	f04f 0300 	mov.w	r3, #0
 8015dd6:	9319      	str	r3, [sp, #100]	@ 0x64
 8015dd8:	bf14      	ite	ne
 8015dda:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015dde:	4623      	moveq	r3, r4
 8015de0:	9302      	str	r3, [sp, #8]
 8015de2:	9305      	str	r3, [sp, #20]
 8015de4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015de8:	9100      	str	r1, [sp, #0]
 8015dea:	9104      	str	r1, [sp, #16]
 8015dec:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015df0:	4669      	mov	r1, sp
 8015df2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8015df4:	f000 f93a 	bl	801606c <_svfiprintf_r>
 8015df8:	1c43      	adds	r3, r0, #1
 8015dfa:	bfbc      	itt	lt
 8015dfc:	238b      	movlt	r3, #139	@ 0x8b
 8015dfe:	602b      	strlt	r3, [r5, #0]
 8015e00:	2c00      	cmp	r4, #0
 8015e02:	d0e0      	beq.n	8015dc6 <_vsniprintf_r+0x16>
 8015e04:	9b00      	ldr	r3, [sp, #0]
 8015e06:	2200      	movs	r2, #0
 8015e08:	701a      	strb	r2, [r3, #0]
 8015e0a:	e7dc      	b.n	8015dc6 <_vsniprintf_r+0x16>

08015e0c <vsniprintf>:
 8015e0c:	b507      	push	{r0, r1, r2, lr}
 8015e0e:	9300      	str	r3, [sp, #0]
 8015e10:	4613      	mov	r3, r2
 8015e12:	460a      	mov	r2, r1
 8015e14:	4601      	mov	r1, r0
 8015e16:	4803      	ldr	r0, [pc, #12]	@ (8015e24 <vsniprintf+0x18>)
 8015e18:	6800      	ldr	r0, [r0, #0]
 8015e1a:	f7ff ffc9 	bl	8015db0 <_vsniprintf_r>
 8015e1e:	b003      	add	sp, #12
 8015e20:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e24:	20000074 	.word	0x20000074

08015e28 <memset>:
 8015e28:	4402      	add	r2, r0
 8015e2a:	4603      	mov	r3, r0
 8015e2c:	4293      	cmp	r3, r2
 8015e2e:	d100      	bne.n	8015e32 <memset+0xa>
 8015e30:	4770      	bx	lr
 8015e32:	f803 1b01 	strb.w	r1, [r3], #1
 8015e36:	e7f9      	b.n	8015e2c <memset+0x4>

08015e38 <strncpy>:
 8015e38:	b510      	push	{r4, lr}
 8015e3a:	3901      	subs	r1, #1
 8015e3c:	4603      	mov	r3, r0
 8015e3e:	b132      	cbz	r2, 8015e4e <strncpy+0x16>
 8015e40:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015e44:	f803 4b01 	strb.w	r4, [r3], #1
 8015e48:	3a01      	subs	r2, #1
 8015e4a:	2c00      	cmp	r4, #0
 8015e4c:	d1f7      	bne.n	8015e3e <strncpy+0x6>
 8015e4e:	441a      	add	r2, r3
 8015e50:	2100      	movs	r1, #0
 8015e52:	4293      	cmp	r3, r2
 8015e54:	d100      	bne.n	8015e58 <strncpy+0x20>
 8015e56:	bd10      	pop	{r4, pc}
 8015e58:	f803 1b01 	strb.w	r1, [r3], #1
 8015e5c:	e7f9      	b.n	8015e52 <strncpy+0x1a>

08015e5e <strstr>:
 8015e5e:	780a      	ldrb	r2, [r1, #0]
 8015e60:	b570      	push	{r4, r5, r6, lr}
 8015e62:	b96a      	cbnz	r2, 8015e80 <strstr+0x22>
 8015e64:	bd70      	pop	{r4, r5, r6, pc}
 8015e66:	429a      	cmp	r2, r3
 8015e68:	d109      	bne.n	8015e7e <strstr+0x20>
 8015e6a:	460c      	mov	r4, r1
 8015e6c:	4605      	mov	r5, r0
 8015e6e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d0f6      	beq.n	8015e64 <strstr+0x6>
 8015e76:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8015e7a:	429e      	cmp	r6, r3
 8015e7c:	d0f7      	beq.n	8015e6e <strstr+0x10>
 8015e7e:	3001      	adds	r0, #1
 8015e80:	7803      	ldrb	r3, [r0, #0]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d1ef      	bne.n	8015e66 <strstr+0x8>
 8015e86:	4618      	mov	r0, r3
 8015e88:	e7ec      	b.n	8015e64 <strstr+0x6>
	...

08015e8c <_sbrk_r>:
 8015e8c:	b538      	push	{r3, r4, r5, lr}
 8015e8e:	4d06      	ldr	r5, [pc, #24]	@ (8015ea8 <_sbrk_r+0x1c>)
 8015e90:	2300      	movs	r3, #0
 8015e92:	4604      	mov	r4, r0
 8015e94:	4608      	mov	r0, r1
 8015e96:	602b      	str	r3, [r5, #0]
 8015e98:	f7ee fd48 	bl	800492c <_sbrk>
 8015e9c:	1c43      	adds	r3, r0, #1
 8015e9e:	d102      	bne.n	8015ea6 <_sbrk_r+0x1a>
 8015ea0:	682b      	ldr	r3, [r5, #0]
 8015ea2:	b103      	cbz	r3, 8015ea6 <_sbrk_r+0x1a>
 8015ea4:	6023      	str	r3, [r4, #0]
 8015ea6:	bd38      	pop	{r3, r4, r5, pc}
 8015ea8:	20012060 	.word	0x20012060

08015eac <__errno>:
 8015eac:	4b01      	ldr	r3, [pc, #4]	@ (8015eb4 <__errno+0x8>)
 8015eae:	6818      	ldr	r0, [r3, #0]
 8015eb0:	4770      	bx	lr
 8015eb2:	bf00      	nop
 8015eb4:	20000074 	.word	0x20000074

08015eb8 <__libc_init_array>:
 8015eb8:	b570      	push	{r4, r5, r6, lr}
 8015eba:	4d0d      	ldr	r5, [pc, #52]	@ (8015ef0 <__libc_init_array+0x38>)
 8015ebc:	4c0d      	ldr	r4, [pc, #52]	@ (8015ef4 <__libc_init_array+0x3c>)
 8015ebe:	1b64      	subs	r4, r4, r5
 8015ec0:	10a4      	asrs	r4, r4, #2
 8015ec2:	2600      	movs	r6, #0
 8015ec4:	42a6      	cmp	r6, r4
 8015ec6:	d109      	bne.n	8015edc <__libc_init_array+0x24>
 8015ec8:	4d0b      	ldr	r5, [pc, #44]	@ (8015ef8 <__libc_init_array+0x40>)
 8015eca:	4c0c      	ldr	r4, [pc, #48]	@ (8015efc <__libc_init_array+0x44>)
 8015ecc:	f000 fba6 	bl	801661c <_init>
 8015ed0:	1b64      	subs	r4, r4, r5
 8015ed2:	10a4      	asrs	r4, r4, #2
 8015ed4:	2600      	movs	r6, #0
 8015ed6:	42a6      	cmp	r6, r4
 8015ed8:	d105      	bne.n	8015ee6 <__libc_init_array+0x2e>
 8015eda:	bd70      	pop	{r4, r5, r6, pc}
 8015edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8015ee0:	4798      	blx	r3
 8015ee2:	3601      	adds	r6, #1
 8015ee4:	e7ee      	b.n	8015ec4 <__libc_init_array+0xc>
 8015ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8015eea:	4798      	blx	r3
 8015eec:	3601      	adds	r6, #1
 8015eee:	e7f2      	b.n	8015ed6 <__libc_init_array+0x1e>
 8015ef0:	08019f58 	.word	0x08019f58
 8015ef4:	08019f58 	.word	0x08019f58
 8015ef8:	08019f58 	.word	0x08019f58
 8015efc:	08019f5c 	.word	0x08019f5c

08015f00 <__retarget_lock_acquire_recursive>:
 8015f00:	4770      	bx	lr

08015f02 <__retarget_lock_release_recursive>:
 8015f02:	4770      	bx	lr

08015f04 <memcpy>:
 8015f04:	440a      	add	r2, r1
 8015f06:	4291      	cmp	r1, r2
 8015f08:	f100 33ff 	add.w	r3, r0, #4294967295
 8015f0c:	d100      	bne.n	8015f10 <memcpy+0xc>
 8015f0e:	4770      	bx	lr
 8015f10:	b510      	push	{r4, lr}
 8015f12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015f1a:	4291      	cmp	r1, r2
 8015f1c:	d1f9      	bne.n	8015f12 <memcpy+0xe>
 8015f1e:	bd10      	pop	{r4, pc}

08015f20 <_free_r>:
 8015f20:	b538      	push	{r3, r4, r5, lr}
 8015f22:	4605      	mov	r5, r0
 8015f24:	2900      	cmp	r1, #0
 8015f26:	d041      	beq.n	8015fac <_free_r+0x8c>
 8015f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f2c:	1f0c      	subs	r4, r1, #4
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	bfb8      	it	lt
 8015f32:	18e4      	addlt	r4, r4, r3
 8015f34:	f7ff fed8 	bl	8015ce8 <__malloc_lock>
 8015f38:	4a1d      	ldr	r2, [pc, #116]	@ (8015fb0 <_free_r+0x90>)
 8015f3a:	6813      	ldr	r3, [r2, #0]
 8015f3c:	b933      	cbnz	r3, 8015f4c <_free_r+0x2c>
 8015f3e:	6063      	str	r3, [r4, #4]
 8015f40:	6014      	str	r4, [r2, #0]
 8015f42:	4628      	mov	r0, r5
 8015f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f48:	f7ff bed4 	b.w	8015cf4 <__malloc_unlock>
 8015f4c:	42a3      	cmp	r3, r4
 8015f4e:	d908      	bls.n	8015f62 <_free_r+0x42>
 8015f50:	6820      	ldr	r0, [r4, #0]
 8015f52:	1821      	adds	r1, r4, r0
 8015f54:	428b      	cmp	r3, r1
 8015f56:	bf01      	itttt	eq
 8015f58:	6819      	ldreq	r1, [r3, #0]
 8015f5a:	685b      	ldreq	r3, [r3, #4]
 8015f5c:	1809      	addeq	r1, r1, r0
 8015f5e:	6021      	streq	r1, [r4, #0]
 8015f60:	e7ed      	b.n	8015f3e <_free_r+0x1e>
 8015f62:	461a      	mov	r2, r3
 8015f64:	685b      	ldr	r3, [r3, #4]
 8015f66:	b10b      	cbz	r3, 8015f6c <_free_r+0x4c>
 8015f68:	42a3      	cmp	r3, r4
 8015f6a:	d9fa      	bls.n	8015f62 <_free_r+0x42>
 8015f6c:	6811      	ldr	r1, [r2, #0]
 8015f6e:	1850      	adds	r0, r2, r1
 8015f70:	42a0      	cmp	r0, r4
 8015f72:	d10b      	bne.n	8015f8c <_free_r+0x6c>
 8015f74:	6820      	ldr	r0, [r4, #0]
 8015f76:	4401      	add	r1, r0
 8015f78:	1850      	adds	r0, r2, r1
 8015f7a:	4283      	cmp	r3, r0
 8015f7c:	6011      	str	r1, [r2, #0]
 8015f7e:	d1e0      	bne.n	8015f42 <_free_r+0x22>
 8015f80:	6818      	ldr	r0, [r3, #0]
 8015f82:	685b      	ldr	r3, [r3, #4]
 8015f84:	6053      	str	r3, [r2, #4]
 8015f86:	4408      	add	r0, r1
 8015f88:	6010      	str	r0, [r2, #0]
 8015f8a:	e7da      	b.n	8015f42 <_free_r+0x22>
 8015f8c:	d902      	bls.n	8015f94 <_free_r+0x74>
 8015f8e:	230c      	movs	r3, #12
 8015f90:	602b      	str	r3, [r5, #0]
 8015f92:	e7d6      	b.n	8015f42 <_free_r+0x22>
 8015f94:	6820      	ldr	r0, [r4, #0]
 8015f96:	1821      	adds	r1, r4, r0
 8015f98:	428b      	cmp	r3, r1
 8015f9a:	bf04      	itt	eq
 8015f9c:	6819      	ldreq	r1, [r3, #0]
 8015f9e:	685b      	ldreq	r3, [r3, #4]
 8015fa0:	6063      	str	r3, [r4, #4]
 8015fa2:	bf04      	itt	eq
 8015fa4:	1809      	addeq	r1, r1, r0
 8015fa6:	6021      	streq	r1, [r4, #0]
 8015fa8:	6054      	str	r4, [r2, #4]
 8015faa:	e7ca      	b.n	8015f42 <_free_r+0x22>
 8015fac:	bd38      	pop	{r3, r4, r5, pc}
 8015fae:	bf00      	nop
 8015fb0:	20011f24 	.word	0x20011f24

08015fb4 <__ssputs_r>:
 8015fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fb8:	688e      	ldr	r6, [r1, #8]
 8015fba:	461f      	mov	r7, r3
 8015fbc:	42be      	cmp	r6, r7
 8015fbe:	680b      	ldr	r3, [r1, #0]
 8015fc0:	4682      	mov	sl, r0
 8015fc2:	460c      	mov	r4, r1
 8015fc4:	4690      	mov	r8, r2
 8015fc6:	d82d      	bhi.n	8016024 <__ssputs_r+0x70>
 8015fc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015fcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015fd0:	d026      	beq.n	8016020 <__ssputs_r+0x6c>
 8015fd2:	6965      	ldr	r5, [r4, #20]
 8015fd4:	6909      	ldr	r1, [r1, #16]
 8015fd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015fda:	eba3 0901 	sub.w	r9, r3, r1
 8015fde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015fe2:	1c7b      	adds	r3, r7, #1
 8015fe4:	444b      	add	r3, r9
 8015fe6:	106d      	asrs	r5, r5, #1
 8015fe8:	429d      	cmp	r5, r3
 8015fea:	bf38      	it	cc
 8015fec:	461d      	movcc	r5, r3
 8015fee:	0553      	lsls	r3, r2, #21
 8015ff0:	d527      	bpl.n	8016042 <__ssputs_r+0x8e>
 8015ff2:	4629      	mov	r1, r5
 8015ff4:	f7ff fdf8 	bl	8015be8 <_malloc_r>
 8015ff8:	4606      	mov	r6, r0
 8015ffa:	b360      	cbz	r0, 8016056 <__ssputs_r+0xa2>
 8015ffc:	6921      	ldr	r1, [r4, #16]
 8015ffe:	464a      	mov	r2, r9
 8016000:	f7ff ff80 	bl	8015f04 <memcpy>
 8016004:	89a3      	ldrh	r3, [r4, #12]
 8016006:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801600a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801600e:	81a3      	strh	r3, [r4, #12]
 8016010:	6126      	str	r6, [r4, #16]
 8016012:	6165      	str	r5, [r4, #20]
 8016014:	444e      	add	r6, r9
 8016016:	eba5 0509 	sub.w	r5, r5, r9
 801601a:	6026      	str	r6, [r4, #0]
 801601c:	60a5      	str	r5, [r4, #8]
 801601e:	463e      	mov	r6, r7
 8016020:	42be      	cmp	r6, r7
 8016022:	d900      	bls.n	8016026 <__ssputs_r+0x72>
 8016024:	463e      	mov	r6, r7
 8016026:	6820      	ldr	r0, [r4, #0]
 8016028:	4632      	mov	r2, r6
 801602a:	4641      	mov	r1, r8
 801602c:	f000 faa6 	bl	801657c <memmove>
 8016030:	68a3      	ldr	r3, [r4, #8]
 8016032:	1b9b      	subs	r3, r3, r6
 8016034:	60a3      	str	r3, [r4, #8]
 8016036:	6823      	ldr	r3, [r4, #0]
 8016038:	4433      	add	r3, r6
 801603a:	6023      	str	r3, [r4, #0]
 801603c:	2000      	movs	r0, #0
 801603e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016042:	462a      	mov	r2, r5
 8016044:	f000 fab4 	bl	80165b0 <_realloc_r>
 8016048:	4606      	mov	r6, r0
 801604a:	2800      	cmp	r0, #0
 801604c:	d1e0      	bne.n	8016010 <__ssputs_r+0x5c>
 801604e:	6921      	ldr	r1, [r4, #16]
 8016050:	4650      	mov	r0, sl
 8016052:	f7ff ff65 	bl	8015f20 <_free_r>
 8016056:	230c      	movs	r3, #12
 8016058:	f8ca 3000 	str.w	r3, [sl]
 801605c:	89a3      	ldrh	r3, [r4, #12]
 801605e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016062:	81a3      	strh	r3, [r4, #12]
 8016064:	f04f 30ff 	mov.w	r0, #4294967295
 8016068:	e7e9      	b.n	801603e <__ssputs_r+0x8a>
	...

0801606c <_svfiprintf_r>:
 801606c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016070:	4698      	mov	r8, r3
 8016072:	898b      	ldrh	r3, [r1, #12]
 8016074:	061b      	lsls	r3, r3, #24
 8016076:	b09d      	sub	sp, #116	@ 0x74
 8016078:	4607      	mov	r7, r0
 801607a:	460d      	mov	r5, r1
 801607c:	4614      	mov	r4, r2
 801607e:	d510      	bpl.n	80160a2 <_svfiprintf_r+0x36>
 8016080:	690b      	ldr	r3, [r1, #16]
 8016082:	b973      	cbnz	r3, 80160a2 <_svfiprintf_r+0x36>
 8016084:	2140      	movs	r1, #64	@ 0x40
 8016086:	f7ff fdaf 	bl	8015be8 <_malloc_r>
 801608a:	6028      	str	r0, [r5, #0]
 801608c:	6128      	str	r0, [r5, #16]
 801608e:	b930      	cbnz	r0, 801609e <_svfiprintf_r+0x32>
 8016090:	230c      	movs	r3, #12
 8016092:	603b      	str	r3, [r7, #0]
 8016094:	f04f 30ff 	mov.w	r0, #4294967295
 8016098:	b01d      	add	sp, #116	@ 0x74
 801609a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801609e:	2340      	movs	r3, #64	@ 0x40
 80160a0:	616b      	str	r3, [r5, #20]
 80160a2:	2300      	movs	r3, #0
 80160a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80160a6:	2320      	movs	r3, #32
 80160a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80160ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80160b0:	2330      	movs	r3, #48	@ 0x30
 80160b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016250 <_svfiprintf_r+0x1e4>
 80160b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80160ba:	f04f 0901 	mov.w	r9, #1
 80160be:	4623      	mov	r3, r4
 80160c0:	469a      	mov	sl, r3
 80160c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80160c6:	b10a      	cbz	r2, 80160cc <_svfiprintf_r+0x60>
 80160c8:	2a25      	cmp	r2, #37	@ 0x25
 80160ca:	d1f9      	bne.n	80160c0 <_svfiprintf_r+0x54>
 80160cc:	ebba 0b04 	subs.w	fp, sl, r4
 80160d0:	d00b      	beq.n	80160ea <_svfiprintf_r+0x7e>
 80160d2:	465b      	mov	r3, fp
 80160d4:	4622      	mov	r2, r4
 80160d6:	4629      	mov	r1, r5
 80160d8:	4638      	mov	r0, r7
 80160da:	f7ff ff6b 	bl	8015fb4 <__ssputs_r>
 80160de:	3001      	adds	r0, #1
 80160e0:	f000 80a7 	beq.w	8016232 <_svfiprintf_r+0x1c6>
 80160e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80160e6:	445a      	add	r2, fp
 80160e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80160ea:	f89a 3000 	ldrb.w	r3, [sl]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	f000 809f 	beq.w	8016232 <_svfiprintf_r+0x1c6>
 80160f4:	2300      	movs	r3, #0
 80160f6:	f04f 32ff 	mov.w	r2, #4294967295
 80160fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80160fe:	f10a 0a01 	add.w	sl, sl, #1
 8016102:	9304      	str	r3, [sp, #16]
 8016104:	9307      	str	r3, [sp, #28]
 8016106:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801610a:	931a      	str	r3, [sp, #104]	@ 0x68
 801610c:	4654      	mov	r4, sl
 801610e:	2205      	movs	r2, #5
 8016110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016114:	484e      	ldr	r0, [pc, #312]	@ (8016250 <_svfiprintf_r+0x1e4>)
 8016116:	f7ea f893 	bl	8000240 <memchr>
 801611a:	9a04      	ldr	r2, [sp, #16]
 801611c:	b9d8      	cbnz	r0, 8016156 <_svfiprintf_r+0xea>
 801611e:	06d0      	lsls	r0, r2, #27
 8016120:	bf44      	itt	mi
 8016122:	2320      	movmi	r3, #32
 8016124:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016128:	0711      	lsls	r1, r2, #28
 801612a:	bf44      	itt	mi
 801612c:	232b      	movmi	r3, #43	@ 0x2b
 801612e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016132:	f89a 3000 	ldrb.w	r3, [sl]
 8016136:	2b2a      	cmp	r3, #42	@ 0x2a
 8016138:	d015      	beq.n	8016166 <_svfiprintf_r+0xfa>
 801613a:	9a07      	ldr	r2, [sp, #28]
 801613c:	4654      	mov	r4, sl
 801613e:	2000      	movs	r0, #0
 8016140:	f04f 0c0a 	mov.w	ip, #10
 8016144:	4621      	mov	r1, r4
 8016146:	f811 3b01 	ldrb.w	r3, [r1], #1
 801614a:	3b30      	subs	r3, #48	@ 0x30
 801614c:	2b09      	cmp	r3, #9
 801614e:	d94b      	bls.n	80161e8 <_svfiprintf_r+0x17c>
 8016150:	b1b0      	cbz	r0, 8016180 <_svfiprintf_r+0x114>
 8016152:	9207      	str	r2, [sp, #28]
 8016154:	e014      	b.n	8016180 <_svfiprintf_r+0x114>
 8016156:	eba0 0308 	sub.w	r3, r0, r8
 801615a:	fa09 f303 	lsl.w	r3, r9, r3
 801615e:	4313      	orrs	r3, r2
 8016160:	9304      	str	r3, [sp, #16]
 8016162:	46a2      	mov	sl, r4
 8016164:	e7d2      	b.n	801610c <_svfiprintf_r+0xa0>
 8016166:	9b03      	ldr	r3, [sp, #12]
 8016168:	1d19      	adds	r1, r3, #4
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	9103      	str	r1, [sp, #12]
 801616e:	2b00      	cmp	r3, #0
 8016170:	bfbb      	ittet	lt
 8016172:	425b      	neglt	r3, r3
 8016174:	f042 0202 	orrlt.w	r2, r2, #2
 8016178:	9307      	strge	r3, [sp, #28]
 801617a:	9307      	strlt	r3, [sp, #28]
 801617c:	bfb8      	it	lt
 801617e:	9204      	strlt	r2, [sp, #16]
 8016180:	7823      	ldrb	r3, [r4, #0]
 8016182:	2b2e      	cmp	r3, #46	@ 0x2e
 8016184:	d10a      	bne.n	801619c <_svfiprintf_r+0x130>
 8016186:	7863      	ldrb	r3, [r4, #1]
 8016188:	2b2a      	cmp	r3, #42	@ 0x2a
 801618a:	d132      	bne.n	80161f2 <_svfiprintf_r+0x186>
 801618c:	9b03      	ldr	r3, [sp, #12]
 801618e:	1d1a      	adds	r2, r3, #4
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	9203      	str	r2, [sp, #12]
 8016194:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016198:	3402      	adds	r4, #2
 801619a:	9305      	str	r3, [sp, #20]
 801619c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016260 <_svfiprintf_r+0x1f4>
 80161a0:	7821      	ldrb	r1, [r4, #0]
 80161a2:	2203      	movs	r2, #3
 80161a4:	4650      	mov	r0, sl
 80161a6:	f7ea f84b 	bl	8000240 <memchr>
 80161aa:	b138      	cbz	r0, 80161bc <_svfiprintf_r+0x150>
 80161ac:	9b04      	ldr	r3, [sp, #16]
 80161ae:	eba0 000a 	sub.w	r0, r0, sl
 80161b2:	2240      	movs	r2, #64	@ 0x40
 80161b4:	4082      	lsls	r2, r0
 80161b6:	4313      	orrs	r3, r2
 80161b8:	3401      	adds	r4, #1
 80161ba:	9304      	str	r3, [sp, #16]
 80161bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161c0:	4824      	ldr	r0, [pc, #144]	@ (8016254 <_svfiprintf_r+0x1e8>)
 80161c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80161c6:	2206      	movs	r2, #6
 80161c8:	f7ea f83a 	bl	8000240 <memchr>
 80161cc:	2800      	cmp	r0, #0
 80161ce:	d036      	beq.n	801623e <_svfiprintf_r+0x1d2>
 80161d0:	4b21      	ldr	r3, [pc, #132]	@ (8016258 <_svfiprintf_r+0x1ec>)
 80161d2:	bb1b      	cbnz	r3, 801621c <_svfiprintf_r+0x1b0>
 80161d4:	9b03      	ldr	r3, [sp, #12]
 80161d6:	3307      	adds	r3, #7
 80161d8:	f023 0307 	bic.w	r3, r3, #7
 80161dc:	3308      	adds	r3, #8
 80161de:	9303      	str	r3, [sp, #12]
 80161e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80161e2:	4433      	add	r3, r6
 80161e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80161e6:	e76a      	b.n	80160be <_svfiprintf_r+0x52>
 80161e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80161ec:	460c      	mov	r4, r1
 80161ee:	2001      	movs	r0, #1
 80161f0:	e7a8      	b.n	8016144 <_svfiprintf_r+0xd8>
 80161f2:	2300      	movs	r3, #0
 80161f4:	3401      	adds	r4, #1
 80161f6:	9305      	str	r3, [sp, #20]
 80161f8:	4619      	mov	r1, r3
 80161fa:	f04f 0c0a 	mov.w	ip, #10
 80161fe:	4620      	mov	r0, r4
 8016200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016204:	3a30      	subs	r2, #48	@ 0x30
 8016206:	2a09      	cmp	r2, #9
 8016208:	d903      	bls.n	8016212 <_svfiprintf_r+0x1a6>
 801620a:	2b00      	cmp	r3, #0
 801620c:	d0c6      	beq.n	801619c <_svfiprintf_r+0x130>
 801620e:	9105      	str	r1, [sp, #20]
 8016210:	e7c4      	b.n	801619c <_svfiprintf_r+0x130>
 8016212:	fb0c 2101 	mla	r1, ip, r1, r2
 8016216:	4604      	mov	r4, r0
 8016218:	2301      	movs	r3, #1
 801621a:	e7f0      	b.n	80161fe <_svfiprintf_r+0x192>
 801621c:	ab03      	add	r3, sp, #12
 801621e:	9300      	str	r3, [sp, #0]
 8016220:	462a      	mov	r2, r5
 8016222:	4b0e      	ldr	r3, [pc, #56]	@ (801625c <_svfiprintf_r+0x1f0>)
 8016224:	a904      	add	r1, sp, #16
 8016226:	4638      	mov	r0, r7
 8016228:	f3af 8000 	nop.w
 801622c:	1c42      	adds	r2, r0, #1
 801622e:	4606      	mov	r6, r0
 8016230:	d1d6      	bne.n	80161e0 <_svfiprintf_r+0x174>
 8016232:	89ab      	ldrh	r3, [r5, #12]
 8016234:	065b      	lsls	r3, r3, #25
 8016236:	f53f af2d 	bmi.w	8016094 <_svfiprintf_r+0x28>
 801623a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801623c:	e72c      	b.n	8016098 <_svfiprintf_r+0x2c>
 801623e:	ab03      	add	r3, sp, #12
 8016240:	9300      	str	r3, [sp, #0]
 8016242:	462a      	mov	r2, r5
 8016244:	4b05      	ldr	r3, [pc, #20]	@ (801625c <_svfiprintf_r+0x1f0>)
 8016246:	a904      	add	r1, sp, #16
 8016248:	4638      	mov	r0, r7
 801624a:	f000 f879 	bl	8016340 <_printf_i>
 801624e:	e7ed      	b.n	801622c <_svfiprintf_r+0x1c0>
 8016250:	08019f1a 	.word	0x08019f1a
 8016254:	08019f24 	.word	0x08019f24
 8016258:	00000000 	.word	0x00000000
 801625c:	08015fb5 	.word	0x08015fb5
 8016260:	08019f20 	.word	0x08019f20

08016264 <_printf_common>:
 8016264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016268:	4616      	mov	r6, r2
 801626a:	4698      	mov	r8, r3
 801626c:	688a      	ldr	r2, [r1, #8]
 801626e:	690b      	ldr	r3, [r1, #16]
 8016270:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016274:	4293      	cmp	r3, r2
 8016276:	bfb8      	it	lt
 8016278:	4613      	movlt	r3, r2
 801627a:	6033      	str	r3, [r6, #0]
 801627c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016280:	4607      	mov	r7, r0
 8016282:	460c      	mov	r4, r1
 8016284:	b10a      	cbz	r2, 801628a <_printf_common+0x26>
 8016286:	3301      	adds	r3, #1
 8016288:	6033      	str	r3, [r6, #0]
 801628a:	6823      	ldr	r3, [r4, #0]
 801628c:	0699      	lsls	r1, r3, #26
 801628e:	bf42      	ittt	mi
 8016290:	6833      	ldrmi	r3, [r6, #0]
 8016292:	3302      	addmi	r3, #2
 8016294:	6033      	strmi	r3, [r6, #0]
 8016296:	6825      	ldr	r5, [r4, #0]
 8016298:	f015 0506 	ands.w	r5, r5, #6
 801629c:	d106      	bne.n	80162ac <_printf_common+0x48>
 801629e:	f104 0a19 	add.w	sl, r4, #25
 80162a2:	68e3      	ldr	r3, [r4, #12]
 80162a4:	6832      	ldr	r2, [r6, #0]
 80162a6:	1a9b      	subs	r3, r3, r2
 80162a8:	42ab      	cmp	r3, r5
 80162aa:	dc26      	bgt.n	80162fa <_printf_common+0x96>
 80162ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80162b0:	6822      	ldr	r2, [r4, #0]
 80162b2:	3b00      	subs	r3, #0
 80162b4:	bf18      	it	ne
 80162b6:	2301      	movne	r3, #1
 80162b8:	0692      	lsls	r2, r2, #26
 80162ba:	d42b      	bmi.n	8016314 <_printf_common+0xb0>
 80162bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80162c0:	4641      	mov	r1, r8
 80162c2:	4638      	mov	r0, r7
 80162c4:	47c8      	blx	r9
 80162c6:	3001      	adds	r0, #1
 80162c8:	d01e      	beq.n	8016308 <_printf_common+0xa4>
 80162ca:	6823      	ldr	r3, [r4, #0]
 80162cc:	6922      	ldr	r2, [r4, #16]
 80162ce:	f003 0306 	and.w	r3, r3, #6
 80162d2:	2b04      	cmp	r3, #4
 80162d4:	bf02      	ittt	eq
 80162d6:	68e5      	ldreq	r5, [r4, #12]
 80162d8:	6833      	ldreq	r3, [r6, #0]
 80162da:	1aed      	subeq	r5, r5, r3
 80162dc:	68a3      	ldr	r3, [r4, #8]
 80162de:	bf0c      	ite	eq
 80162e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80162e4:	2500      	movne	r5, #0
 80162e6:	4293      	cmp	r3, r2
 80162e8:	bfc4      	itt	gt
 80162ea:	1a9b      	subgt	r3, r3, r2
 80162ec:	18ed      	addgt	r5, r5, r3
 80162ee:	2600      	movs	r6, #0
 80162f0:	341a      	adds	r4, #26
 80162f2:	42b5      	cmp	r5, r6
 80162f4:	d11a      	bne.n	801632c <_printf_common+0xc8>
 80162f6:	2000      	movs	r0, #0
 80162f8:	e008      	b.n	801630c <_printf_common+0xa8>
 80162fa:	2301      	movs	r3, #1
 80162fc:	4652      	mov	r2, sl
 80162fe:	4641      	mov	r1, r8
 8016300:	4638      	mov	r0, r7
 8016302:	47c8      	blx	r9
 8016304:	3001      	adds	r0, #1
 8016306:	d103      	bne.n	8016310 <_printf_common+0xac>
 8016308:	f04f 30ff 	mov.w	r0, #4294967295
 801630c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016310:	3501      	adds	r5, #1
 8016312:	e7c6      	b.n	80162a2 <_printf_common+0x3e>
 8016314:	18e1      	adds	r1, r4, r3
 8016316:	1c5a      	adds	r2, r3, #1
 8016318:	2030      	movs	r0, #48	@ 0x30
 801631a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801631e:	4422      	add	r2, r4
 8016320:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016324:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016328:	3302      	adds	r3, #2
 801632a:	e7c7      	b.n	80162bc <_printf_common+0x58>
 801632c:	2301      	movs	r3, #1
 801632e:	4622      	mov	r2, r4
 8016330:	4641      	mov	r1, r8
 8016332:	4638      	mov	r0, r7
 8016334:	47c8      	blx	r9
 8016336:	3001      	adds	r0, #1
 8016338:	d0e6      	beq.n	8016308 <_printf_common+0xa4>
 801633a:	3601      	adds	r6, #1
 801633c:	e7d9      	b.n	80162f2 <_printf_common+0x8e>
	...

08016340 <_printf_i>:
 8016340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016344:	7e0f      	ldrb	r7, [r1, #24]
 8016346:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016348:	2f78      	cmp	r7, #120	@ 0x78
 801634a:	4691      	mov	r9, r2
 801634c:	4680      	mov	r8, r0
 801634e:	460c      	mov	r4, r1
 8016350:	469a      	mov	sl, r3
 8016352:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016356:	d807      	bhi.n	8016368 <_printf_i+0x28>
 8016358:	2f62      	cmp	r7, #98	@ 0x62
 801635a:	d80a      	bhi.n	8016372 <_printf_i+0x32>
 801635c:	2f00      	cmp	r7, #0
 801635e:	f000 80d1 	beq.w	8016504 <_printf_i+0x1c4>
 8016362:	2f58      	cmp	r7, #88	@ 0x58
 8016364:	f000 80b8 	beq.w	80164d8 <_printf_i+0x198>
 8016368:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801636c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016370:	e03a      	b.n	80163e8 <_printf_i+0xa8>
 8016372:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016376:	2b15      	cmp	r3, #21
 8016378:	d8f6      	bhi.n	8016368 <_printf_i+0x28>
 801637a:	a101      	add	r1, pc, #4	@ (adr r1, 8016380 <_printf_i+0x40>)
 801637c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016380:	080163d9 	.word	0x080163d9
 8016384:	080163ed 	.word	0x080163ed
 8016388:	08016369 	.word	0x08016369
 801638c:	08016369 	.word	0x08016369
 8016390:	08016369 	.word	0x08016369
 8016394:	08016369 	.word	0x08016369
 8016398:	080163ed 	.word	0x080163ed
 801639c:	08016369 	.word	0x08016369
 80163a0:	08016369 	.word	0x08016369
 80163a4:	08016369 	.word	0x08016369
 80163a8:	08016369 	.word	0x08016369
 80163ac:	080164eb 	.word	0x080164eb
 80163b0:	08016417 	.word	0x08016417
 80163b4:	080164a5 	.word	0x080164a5
 80163b8:	08016369 	.word	0x08016369
 80163bc:	08016369 	.word	0x08016369
 80163c0:	0801650d 	.word	0x0801650d
 80163c4:	08016369 	.word	0x08016369
 80163c8:	08016417 	.word	0x08016417
 80163cc:	08016369 	.word	0x08016369
 80163d0:	08016369 	.word	0x08016369
 80163d4:	080164ad 	.word	0x080164ad
 80163d8:	6833      	ldr	r3, [r6, #0]
 80163da:	1d1a      	adds	r2, r3, #4
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	6032      	str	r2, [r6, #0]
 80163e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80163e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80163e8:	2301      	movs	r3, #1
 80163ea:	e09c      	b.n	8016526 <_printf_i+0x1e6>
 80163ec:	6833      	ldr	r3, [r6, #0]
 80163ee:	6820      	ldr	r0, [r4, #0]
 80163f0:	1d19      	adds	r1, r3, #4
 80163f2:	6031      	str	r1, [r6, #0]
 80163f4:	0606      	lsls	r6, r0, #24
 80163f6:	d501      	bpl.n	80163fc <_printf_i+0xbc>
 80163f8:	681d      	ldr	r5, [r3, #0]
 80163fa:	e003      	b.n	8016404 <_printf_i+0xc4>
 80163fc:	0645      	lsls	r5, r0, #25
 80163fe:	d5fb      	bpl.n	80163f8 <_printf_i+0xb8>
 8016400:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016404:	2d00      	cmp	r5, #0
 8016406:	da03      	bge.n	8016410 <_printf_i+0xd0>
 8016408:	232d      	movs	r3, #45	@ 0x2d
 801640a:	426d      	negs	r5, r5
 801640c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016410:	4858      	ldr	r0, [pc, #352]	@ (8016574 <_printf_i+0x234>)
 8016412:	230a      	movs	r3, #10
 8016414:	e011      	b.n	801643a <_printf_i+0xfa>
 8016416:	6821      	ldr	r1, [r4, #0]
 8016418:	6833      	ldr	r3, [r6, #0]
 801641a:	0608      	lsls	r0, r1, #24
 801641c:	f853 5b04 	ldr.w	r5, [r3], #4
 8016420:	d402      	bmi.n	8016428 <_printf_i+0xe8>
 8016422:	0649      	lsls	r1, r1, #25
 8016424:	bf48      	it	mi
 8016426:	b2ad      	uxthmi	r5, r5
 8016428:	2f6f      	cmp	r7, #111	@ 0x6f
 801642a:	4852      	ldr	r0, [pc, #328]	@ (8016574 <_printf_i+0x234>)
 801642c:	6033      	str	r3, [r6, #0]
 801642e:	bf14      	ite	ne
 8016430:	230a      	movne	r3, #10
 8016432:	2308      	moveq	r3, #8
 8016434:	2100      	movs	r1, #0
 8016436:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801643a:	6866      	ldr	r6, [r4, #4]
 801643c:	60a6      	str	r6, [r4, #8]
 801643e:	2e00      	cmp	r6, #0
 8016440:	db05      	blt.n	801644e <_printf_i+0x10e>
 8016442:	6821      	ldr	r1, [r4, #0]
 8016444:	432e      	orrs	r6, r5
 8016446:	f021 0104 	bic.w	r1, r1, #4
 801644a:	6021      	str	r1, [r4, #0]
 801644c:	d04b      	beq.n	80164e6 <_printf_i+0x1a6>
 801644e:	4616      	mov	r6, r2
 8016450:	fbb5 f1f3 	udiv	r1, r5, r3
 8016454:	fb03 5711 	mls	r7, r3, r1, r5
 8016458:	5dc7      	ldrb	r7, [r0, r7]
 801645a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801645e:	462f      	mov	r7, r5
 8016460:	42bb      	cmp	r3, r7
 8016462:	460d      	mov	r5, r1
 8016464:	d9f4      	bls.n	8016450 <_printf_i+0x110>
 8016466:	2b08      	cmp	r3, #8
 8016468:	d10b      	bne.n	8016482 <_printf_i+0x142>
 801646a:	6823      	ldr	r3, [r4, #0]
 801646c:	07df      	lsls	r7, r3, #31
 801646e:	d508      	bpl.n	8016482 <_printf_i+0x142>
 8016470:	6923      	ldr	r3, [r4, #16]
 8016472:	6861      	ldr	r1, [r4, #4]
 8016474:	4299      	cmp	r1, r3
 8016476:	bfde      	ittt	le
 8016478:	2330      	movle	r3, #48	@ 0x30
 801647a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801647e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016482:	1b92      	subs	r2, r2, r6
 8016484:	6122      	str	r2, [r4, #16]
 8016486:	f8cd a000 	str.w	sl, [sp]
 801648a:	464b      	mov	r3, r9
 801648c:	aa03      	add	r2, sp, #12
 801648e:	4621      	mov	r1, r4
 8016490:	4640      	mov	r0, r8
 8016492:	f7ff fee7 	bl	8016264 <_printf_common>
 8016496:	3001      	adds	r0, #1
 8016498:	d14a      	bne.n	8016530 <_printf_i+0x1f0>
 801649a:	f04f 30ff 	mov.w	r0, #4294967295
 801649e:	b004      	add	sp, #16
 80164a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164a4:	6823      	ldr	r3, [r4, #0]
 80164a6:	f043 0320 	orr.w	r3, r3, #32
 80164aa:	6023      	str	r3, [r4, #0]
 80164ac:	4832      	ldr	r0, [pc, #200]	@ (8016578 <_printf_i+0x238>)
 80164ae:	2778      	movs	r7, #120	@ 0x78
 80164b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80164b4:	6823      	ldr	r3, [r4, #0]
 80164b6:	6831      	ldr	r1, [r6, #0]
 80164b8:	061f      	lsls	r7, r3, #24
 80164ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80164be:	d402      	bmi.n	80164c6 <_printf_i+0x186>
 80164c0:	065f      	lsls	r7, r3, #25
 80164c2:	bf48      	it	mi
 80164c4:	b2ad      	uxthmi	r5, r5
 80164c6:	6031      	str	r1, [r6, #0]
 80164c8:	07d9      	lsls	r1, r3, #31
 80164ca:	bf44      	itt	mi
 80164cc:	f043 0320 	orrmi.w	r3, r3, #32
 80164d0:	6023      	strmi	r3, [r4, #0]
 80164d2:	b11d      	cbz	r5, 80164dc <_printf_i+0x19c>
 80164d4:	2310      	movs	r3, #16
 80164d6:	e7ad      	b.n	8016434 <_printf_i+0xf4>
 80164d8:	4826      	ldr	r0, [pc, #152]	@ (8016574 <_printf_i+0x234>)
 80164da:	e7e9      	b.n	80164b0 <_printf_i+0x170>
 80164dc:	6823      	ldr	r3, [r4, #0]
 80164de:	f023 0320 	bic.w	r3, r3, #32
 80164e2:	6023      	str	r3, [r4, #0]
 80164e4:	e7f6      	b.n	80164d4 <_printf_i+0x194>
 80164e6:	4616      	mov	r6, r2
 80164e8:	e7bd      	b.n	8016466 <_printf_i+0x126>
 80164ea:	6833      	ldr	r3, [r6, #0]
 80164ec:	6825      	ldr	r5, [r4, #0]
 80164ee:	6961      	ldr	r1, [r4, #20]
 80164f0:	1d18      	adds	r0, r3, #4
 80164f2:	6030      	str	r0, [r6, #0]
 80164f4:	062e      	lsls	r6, r5, #24
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	d501      	bpl.n	80164fe <_printf_i+0x1be>
 80164fa:	6019      	str	r1, [r3, #0]
 80164fc:	e002      	b.n	8016504 <_printf_i+0x1c4>
 80164fe:	0668      	lsls	r0, r5, #25
 8016500:	d5fb      	bpl.n	80164fa <_printf_i+0x1ba>
 8016502:	8019      	strh	r1, [r3, #0]
 8016504:	2300      	movs	r3, #0
 8016506:	6123      	str	r3, [r4, #16]
 8016508:	4616      	mov	r6, r2
 801650a:	e7bc      	b.n	8016486 <_printf_i+0x146>
 801650c:	6833      	ldr	r3, [r6, #0]
 801650e:	1d1a      	adds	r2, r3, #4
 8016510:	6032      	str	r2, [r6, #0]
 8016512:	681e      	ldr	r6, [r3, #0]
 8016514:	6862      	ldr	r2, [r4, #4]
 8016516:	2100      	movs	r1, #0
 8016518:	4630      	mov	r0, r6
 801651a:	f7e9 fe91 	bl	8000240 <memchr>
 801651e:	b108      	cbz	r0, 8016524 <_printf_i+0x1e4>
 8016520:	1b80      	subs	r0, r0, r6
 8016522:	6060      	str	r0, [r4, #4]
 8016524:	6863      	ldr	r3, [r4, #4]
 8016526:	6123      	str	r3, [r4, #16]
 8016528:	2300      	movs	r3, #0
 801652a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801652e:	e7aa      	b.n	8016486 <_printf_i+0x146>
 8016530:	6923      	ldr	r3, [r4, #16]
 8016532:	4632      	mov	r2, r6
 8016534:	4649      	mov	r1, r9
 8016536:	4640      	mov	r0, r8
 8016538:	47d0      	blx	sl
 801653a:	3001      	adds	r0, #1
 801653c:	d0ad      	beq.n	801649a <_printf_i+0x15a>
 801653e:	6823      	ldr	r3, [r4, #0]
 8016540:	079b      	lsls	r3, r3, #30
 8016542:	d413      	bmi.n	801656c <_printf_i+0x22c>
 8016544:	68e0      	ldr	r0, [r4, #12]
 8016546:	9b03      	ldr	r3, [sp, #12]
 8016548:	4298      	cmp	r0, r3
 801654a:	bfb8      	it	lt
 801654c:	4618      	movlt	r0, r3
 801654e:	e7a6      	b.n	801649e <_printf_i+0x15e>
 8016550:	2301      	movs	r3, #1
 8016552:	4632      	mov	r2, r6
 8016554:	4649      	mov	r1, r9
 8016556:	4640      	mov	r0, r8
 8016558:	47d0      	blx	sl
 801655a:	3001      	adds	r0, #1
 801655c:	d09d      	beq.n	801649a <_printf_i+0x15a>
 801655e:	3501      	adds	r5, #1
 8016560:	68e3      	ldr	r3, [r4, #12]
 8016562:	9903      	ldr	r1, [sp, #12]
 8016564:	1a5b      	subs	r3, r3, r1
 8016566:	42ab      	cmp	r3, r5
 8016568:	dcf2      	bgt.n	8016550 <_printf_i+0x210>
 801656a:	e7eb      	b.n	8016544 <_printf_i+0x204>
 801656c:	2500      	movs	r5, #0
 801656e:	f104 0619 	add.w	r6, r4, #25
 8016572:	e7f5      	b.n	8016560 <_printf_i+0x220>
 8016574:	08019f2b 	.word	0x08019f2b
 8016578:	08019f3c 	.word	0x08019f3c

0801657c <memmove>:
 801657c:	4288      	cmp	r0, r1
 801657e:	b510      	push	{r4, lr}
 8016580:	eb01 0402 	add.w	r4, r1, r2
 8016584:	d902      	bls.n	801658c <memmove+0x10>
 8016586:	4284      	cmp	r4, r0
 8016588:	4623      	mov	r3, r4
 801658a:	d807      	bhi.n	801659c <memmove+0x20>
 801658c:	1e43      	subs	r3, r0, #1
 801658e:	42a1      	cmp	r1, r4
 8016590:	d008      	beq.n	80165a4 <memmove+0x28>
 8016592:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016596:	f803 2f01 	strb.w	r2, [r3, #1]!
 801659a:	e7f8      	b.n	801658e <memmove+0x12>
 801659c:	4402      	add	r2, r0
 801659e:	4601      	mov	r1, r0
 80165a0:	428a      	cmp	r2, r1
 80165a2:	d100      	bne.n	80165a6 <memmove+0x2a>
 80165a4:	bd10      	pop	{r4, pc}
 80165a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80165aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80165ae:	e7f7      	b.n	80165a0 <memmove+0x24>

080165b0 <_realloc_r>:
 80165b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165b4:	4607      	mov	r7, r0
 80165b6:	4614      	mov	r4, r2
 80165b8:	460d      	mov	r5, r1
 80165ba:	b921      	cbnz	r1, 80165c6 <_realloc_r+0x16>
 80165bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80165c0:	4611      	mov	r1, r2
 80165c2:	f7ff bb11 	b.w	8015be8 <_malloc_r>
 80165c6:	b92a      	cbnz	r2, 80165d4 <_realloc_r+0x24>
 80165c8:	f7ff fcaa 	bl	8015f20 <_free_r>
 80165cc:	4625      	mov	r5, r4
 80165ce:	4628      	mov	r0, r5
 80165d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165d4:	f000 f81a 	bl	801660c <_malloc_usable_size_r>
 80165d8:	4284      	cmp	r4, r0
 80165da:	4606      	mov	r6, r0
 80165dc:	d802      	bhi.n	80165e4 <_realloc_r+0x34>
 80165de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80165e2:	d8f4      	bhi.n	80165ce <_realloc_r+0x1e>
 80165e4:	4621      	mov	r1, r4
 80165e6:	4638      	mov	r0, r7
 80165e8:	f7ff fafe 	bl	8015be8 <_malloc_r>
 80165ec:	4680      	mov	r8, r0
 80165ee:	b908      	cbnz	r0, 80165f4 <_realloc_r+0x44>
 80165f0:	4645      	mov	r5, r8
 80165f2:	e7ec      	b.n	80165ce <_realloc_r+0x1e>
 80165f4:	42b4      	cmp	r4, r6
 80165f6:	4622      	mov	r2, r4
 80165f8:	4629      	mov	r1, r5
 80165fa:	bf28      	it	cs
 80165fc:	4632      	movcs	r2, r6
 80165fe:	f7ff fc81 	bl	8015f04 <memcpy>
 8016602:	4629      	mov	r1, r5
 8016604:	4638      	mov	r0, r7
 8016606:	f7ff fc8b 	bl	8015f20 <_free_r>
 801660a:	e7f1      	b.n	80165f0 <_realloc_r+0x40>

0801660c <_malloc_usable_size_r>:
 801660c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016610:	1f18      	subs	r0, r3, #4
 8016612:	2b00      	cmp	r3, #0
 8016614:	bfbc      	itt	lt
 8016616:	580b      	ldrlt	r3, [r1, r0]
 8016618:	18c0      	addlt	r0, r0, r3
 801661a:	4770      	bx	lr

0801661c <_init>:
 801661c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801661e:	bf00      	nop
 8016620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016622:	bc08      	pop	{r3}
 8016624:	469e      	mov	lr, r3
 8016626:	4770      	bx	lr

08016628 <_fini>:
 8016628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801662a:	bf00      	nop
 801662c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801662e:	bc08      	pop	{r3}
 8016630:	469e      	mov	lr, r3
 8016632:	4770      	bx	lr
