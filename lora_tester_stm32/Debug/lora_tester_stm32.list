
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018390  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003534  08018560  08018560  00019560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ba94  0801ba94  0001d210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801ba94  0801ba94  0001ca94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ba9c  0801ba9c  0001d210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ba9c  0801ba9c  0001ca9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801baa0  0801baa0  0001caa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  0801baa4  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000d0  0801bb74  0001d0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000170  0801bc14  0001d170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00012f30  20000220  0801bcb4  0001d220  2**5
                  ALLOC
 12 ._user_heap_stack 00000600  20013150  0801bcb4  0001e150  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001d210  2**0
                  CONTENTS, READONLY
 14 .debug_info   000428a0  00000000  00000000  0001d240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000910a  00000000  00000000  0005fae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000037c0  00000000  00000000  00068bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002b7b  00000000  00000000  0006c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037eb2  00000000  00000000  0006ef2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004ba7c  00000000  00000000  000a6ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012e125  00000000  00000000  000f2859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0022097e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f644  00000000  00000000  002209c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  00230008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018548 	.word	0x08018548

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	08018548 	.word	0x08018548

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <CommandSender_Send>:
#include <stddef.h>
#include <string.h>
#include <stdio.h>

void CommandSender_Send(const char* command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (command != NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d051      	beq.n	80006be <CommandSender_Send+0xb2>
        int len = strlen(command);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe02 	bl	8000224 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
        
        // 전송할 명령어를 명확히 로깅 (특수 문자도 표시)
        LOG_INFO("📤 TX: '%s' (%d bytes)", command, len);
 8000624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4929      	ldr	r1, [pc, #164]	@ (80006d0 <CommandSender_Send+0xc4>)
 800062a:	2001      	movs	r0, #1
 800062c:	f004 fea2 	bl	8005374 <LOGGER_SendFormatted>
        
        // 헥스 덤프도 표시 (처음 20바이트까지)
        if (len > 0) {
 8000630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000632:	2b00      	cmp	r3, #0
 8000634:	dd2c      	ble.n	8000690 <CommandSender_Send+0x84>
            char hex_dump[64] = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f017 f83a 	bl	80176b8 <memset>
            int dump_len = (len > 20) ? 20 : len;
 8000644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000646:	2b14      	cmp	r3, #20
 8000648:	bfa8      	it	ge
 800064a:	2314      	movge	r3, #20
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < dump_len; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
 8000652:	e012      	b.n	800067a <CommandSender_Send+0x6e>
                snprintf(hex_dump + i*3, 4, "%02X ", (unsigned char)command[i]);
 8000654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	1898      	adds	r0, r3, r2
 8000664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <CommandSender_Send+0xc8>)
 800066e:	2104      	movs	r1, #4
 8000670:	f016 ff4a 	bl	8017508 <sniprintf>
            for (int i = 0; i < dump_len; i++) {
 8000674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000676:	3301      	adds	r3, #1
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
 800067a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800067c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800067e:	429a      	cmp	r2, r3
 8000680:	dbe8      	blt.n	8000654 <CommandSender_Send+0x48>
            }
            LOG_DEBUG("[CommandSender] Hex: %s", hex_dump);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	461a      	mov	r2, r3
 8000688:	4913      	ldr	r1, [pc, #76]	@ (80006d8 <CommandSender_Send+0xcc>)
 800068a:	2000      	movs	r0, #0
 800068c:	f004 fe72 	bl	8005374 <LOGGER_SendFormatted>
        }
        
        UartStatus status = UART_Send(command);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f004 ff89 	bl	80055a8 <UART_Send>
 8000696:	4603      	mov	r3, r0
 8000698:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        
        if (status == UART_STATUS_OK) {
 800069c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d104      	bne.n	80006ae <CommandSender_Send+0xa2>
            LOG_DEBUG("[CommandSender] ✓ Command sent successfully");
 80006a4:	490d      	ldr	r1, [pc, #52]	@ (80006dc <CommandSender_Send+0xd0>)
 80006a6:	2000      	movs	r0, #0
 80006a8:	f004 fe64 	bl	8005374 <LOGGER_SendFormatted>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
        }
    } else {
        LOG_WARN("[CommandSender] Attempted to send NULL command");
    }
}
 80006ac:	e00b      	b.n	80006c6 <CommandSender_Send+0xba>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
 80006ae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006b2:	461a      	mov	r2, r3
 80006b4:	490a      	ldr	r1, [pc, #40]	@ (80006e0 <CommandSender_Send+0xd4>)
 80006b6:	2003      	movs	r0, #3
 80006b8:	f004 fe5c 	bl	8005374 <LOGGER_SendFormatted>
}
 80006bc:	e003      	b.n	80006c6 <CommandSender_Send+0xba>
        LOG_WARN("[CommandSender] Attempted to send NULL command");
 80006be:	4909      	ldr	r1, [pc, #36]	@ (80006e4 <CommandSender_Send+0xd8>)
 80006c0:	2002      	movs	r0, #2
 80006c2:	f004 fe57 	bl	8005374 <LOGGER_SendFormatted>
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	@ 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	08018560 	.word	0x08018560
 80006d4:	0801857c 	.word	0x0801857c
 80006d8:	08018584 	.word	0x08018584
 80006dc:	0801859c 	.word	0x0801859c
 80006e0:	080185cc 	.word	0x080185cc
 80006e4:	08018604 	.word	0x08018604

080006e8 <get_state_name>:
};

const int LORA_DEFAULT_INIT_COMMANDS_COUNT = sizeof(LORA_DEFAULT_INIT_COMMANDS) / sizeof(LORA_DEFAULT_INIT_COMMANDS[0]);

// 상태 이름을 문자열로 변환하는 헬퍼 함수
static const char* get_state_name(LoraState state) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b0a      	cmp	r3, #10
 80006f6:	d82f      	bhi.n	8000758 <get_state_name+0x70>
 80006f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <get_state_name+0x18>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	0800072d 	.word	0x0800072d
 8000704:	08000731 	.word	0x08000731
 8000708:	08000735 	.word	0x08000735
 800070c:	08000739 	.word	0x08000739
 8000710:	0800073d 	.word	0x0800073d
 8000714:	08000741 	.word	0x08000741
 8000718:	08000745 	.word	0x08000745
 800071c:	08000749 	.word	0x08000749
 8000720:	0800074d 	.word	0x0800074d
 8000724:	08000751 	.word	0x08000751
 8000728:	08000755 	.word	0x08000755
        case LORA_STATE_INIT: return "INIT";
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <get_state_name+0x80>)
 800072e:	e014      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_CMD: return "SEND_CMD";
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <get_state_name+0x84>)
 8000732:	e012      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_OK: return "WAIT_OK";
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <get_state_name+0x88>)
 8000736:	e010      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_JOIN: return "SEND_JOIN";
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <get_state_name+0x8c>)
 800073a:	e00e      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_JOIN_OK: return "WAIT_JOIN_OK";
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <get_state_name+0x90>)
 800073e:	e00c      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_PERIODIC: return "SEND_PERIODIC";
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <get_state_name+0x94>)
 8000742:	e00a      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_RESPONSE: return "WAIT_SEND_RESPONSE";
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <get_state_name+0x98>)
 8000746:	e008      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_INTERVAL: return "WAIT_SEND_INTERVAL";
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <get_state_name+0x9c>)
 800074a:	e006      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_JOIN_RETRY: return "JOIN_RETRY";
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <get_state_name+0xa0>)
 800074e:	e004      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_DONE: return "DONE";
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <get_state_name+0xa4>)
 8000752:	e002      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_ERROR: return "ERROR";
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <get_state_name+0xa8>)
 8000756:	e000      	b.n	800075a <get_state_name+0x72>
        default: return "UNKNOWN";
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <get_state_name+0xac>)
    }
}
 800075a:	4618      	mov	r0, r3
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	08018670 	.word	0x08018670
 800076c:	08018678 	.word	0x08018678
 8000770:	08018684 	.word	0x08018684
 8000774:	0801868c 	.word	0x0801868c
 8000778:	08018698 	.word	0x08018698
 800077c:	080186a8 	.word	0x080186a8
 8000780:	080186b8 	.word	0x080186b8
 8000784:	080186cc 	.word	0x080186cc
 8000788:	080186e0 	.word	0x080186e0
 800078c:	080186ec 	.word	0x080186ec
 8000790:	080186f4 	.word	0x080186f4
 8000794:	080186fc 	.word	0x080186fc

08000798 <LoraStarter_InitWithDefaults>:
    UART_Connect(port);
    LOG_INFO("[LoRa] UART connected to %s", port);
}

void LoraStarter_InitWithDefaults(LoraStarterContext* ctx, const char* send_message)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d032      	beq.n	800080e <LoraStarter_InitWithDefaults+0x76>
    
    ctx->state = LORA_STATE_INIT;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
    ctx->cmd_index = 0;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
    ctx->commands = LORA_DEFAULT_INIT_COMMANDS;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a18      	ldr	r2, [pc, #96]	@ (8000818 <LoraStarter_InitWithDefaults+0x80>)
 80007b8:	609a      	str	r2, [r3, #8]
    ctx->num_commands = LORA_DEFAULT_INIT_COMMANDS_COUNT;
 80007ba:	2205      	movs	r2, #5
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	60da      	str	r2, [r3, #12]
    ctx->send_message = (send_message != NULL) ? send_message : "TEST";
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <LoraStarter_InitWithDefaults+0x32>
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	e000      	b.n	80007cc <LoraStarter_InitWithDefaults+0x34>
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <LoraStarter_InitWithDefaults+0x84>)
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	61d3      	str	r3, [r2, #28]
    ctx->max_retry_count = 3;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2203      	movs	r2, #3
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->send_interval_ms = 300000;  // 5분 간격
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a11      	ldr	r2, [pc, #68]	@ (8000820 <LoraStarter_InitWithDefaults+0x88>)
 80007da:	615a      	str	r2, [r3, #20]
    ctx->last_send_time = 0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
    ctx->send_count = 0;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
    ctx->error_count = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
    ctx->last_retry_time = 0;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->retry_delay_ms = 1000;  // 1초 초기 지연
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    LOG_INFO("[LoRa] Initialized with defaults - Commands: %d, Message: %s", 
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	68da      	ldr	r2, [r3, #12]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	4907      	ldr	r1, [pc, #28]	@ (8000824 <LoraStarter_InitWithDefaults+0x8c>)
 8000806:	2001      	movs	r0, #1
 8000808:	f004 fdb4 	bl	8005374 <LOGGER_SendFormatted>
 800080c:	e000      	b.n	8000810 <LoraStarter_InitWithDefaults+0x78>
    if (ctx == NULL) return;
 800080e:	bf00      	nop
             ctx->num_commands, ctx->send_message);
}
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000000 	.word	0x20000000
 800081c:	08018720 	.word	0x08018720
 8000820:	000493e0 	.word	0x000493e0
 8000824:	08018728 	.word	0x08018728

08000828 <LoraStarter_Process>:

void LoraStarter_Process(LoraStarterContext* ctx, const char* uart_rx)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b0bf      	sub	sp, #252	@ 0xfc
 800082c:	af02      	add	r7, sp, #8
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	f000 8289 	beq.w	8000d4c <LoraStarter_Process+0x524>

    LoraState old_state = ctx->state;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb

    switch(ctx->state) {
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b08      	cmp	r3, #8
 8000848:	f200 8261 	bhi.w	8000d0e <LoraStarter_Process+0x4e6>
 800084c:	a201      	add	r2, pc, #4	@ (adr r2, 8000854 <LoraStarter_Process+0x2c>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000879 	.word	0x08000879
 8000858:	080008c7 	.word	0x080008c7
 800085c:	0800091d 	.word	0x0800091d
 8000860:	080009d7 	.word	0x080009d7
 8000864:	080009ed 	.word	0x080009ed
 8000868:	08000a3b 	.word	0x08000a3b
 800086c:	08000af9 	.word	0x08000af9
 8000870:	08000c35 	.word	0x08000c35
 8000874:	08000c9b 	.word	0x08000c9b
        case LORA_STATE_INIT:
            ctx->cmd_index = 0;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
            ctx->error_count = 0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
            ctx->state = LORA_STATE_SEND_CMD;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
            // 기본값 설정
            if (ctx->max_retry_count == 0) ctx->max_retry_count = 0; // 0이면 무제한
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800088e:	2b00      	cmp	r3, #0
 8000890:	d102      	bne.n	8000898 <LoraStarter_Process+0x70>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24
            if (ctx->send_message == NULL) ctx->send_message = "Hello";
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <LoraStarter_Process+0x7e>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4aaa      	ldr	r2, [pc, #680]	@ (8000b4c <LoraStarter_Process+0x324>)
 80008a4:	61da      	str	r2, [r3, #28]
            ctx->last_retry_time = 0;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	@ 0x28
            ctx->retry_delay_ms = 1000; // 초기 재시도 지연: 1초
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
            LOG_INFO("[LoRa] Initialized with message: %s, max_retries: %d", 
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	69da      	ldr	r2, [r3, #28]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008bc:	49a4      	ldr	r1, [pc, #656]	@ (8000b50 <LoraStarter_Process+0x328>)
 80008be:	2001      	movs	r0, #1
 80008c0:	f004 fd58 	bl	8005374 <LOGGER_SendFormatted>
                    ctx->send_message, ctx->max_retry_count);
            break;
 80008c4:	e22a      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_SEND_CMD:
            if (ctx->cmd_index < ctx->num_commands) {
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	da20      	bge.n	8000914 <LoraStarter_Process+0xec>
                LOG_DEBUG("[LoRa] Sending command %d/%d: %s", 
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	1c59      	adds	r1, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68d8      	ldr	r0, [r3, #12]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689a      	ldr	r2, [r3, #8]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4413      	add	r3, r2
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	4603      	mov	r3, r0
 80008ee:	460a      	mov	r2, r1
 80008f0:	4998      	ldr	r1, [pc, #608]	@ (8000b54 <LoraStarter_Process+0x32c>)
 80008f2:	2000      	movs	r0, #0
 80008f4:	f004 fd3e 	bl	8005374 <LOGGER_SendFormatted>
                         ctx->cmd_index + 1, ctx->num_commands, ctx->commands[ctx->cmd_index]);
                CommandSender_Send(ctx->commands[ctx->cmd_index]);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fe80 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_OK;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2202      	movs	r2, #2
 8000910:	701a      	strb	r2, [r3, #0]
            } else {
                ctx->state = LORA_STATE_SEND_JOIN;
            }
            break;
 8000912:	e203      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                ctx->state = LORA_STATE_SEND_JOIN;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2203      	movs	r2, #3
 8000918:	701a      	strb	r2, [r3, #0]
            break;
 800091a:	e1ff      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_WAIT_OK:
            if (uart_rx) {
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 81f7 	beq.w	8000d12 <LoraStarter_Process+0x4ea>
                if (is_response_ok(uart_rx)) {
 8000924:	6838      	ldr	r0, [r7, #0]
 8000926:	f000 fa31 	bl	8000d8c <is_response_ok>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d010      	beq.n	8000952 <LoraStarter_Process+0x12a>
                    LOG_DEBUG("[LoRa] Command %d OK received", ctx->cmd_index + 1);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	3301      	adds	r3, #1
 8000936:	461a      	mov	r2, r3
 8000938:	4987      	ldr	r1, [pc, #540]	@ (8000b58 <LoraStarter_Process+0x330>)
 800093a:	2000      	movs	r0, #0
 800093c:	f004 fd1a 	bl	8005374 <LOGGER_SendFormatted>
                    ctx->cmd_index++;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	605a      	str	r2, [r3, #4]
                    ctx->state = LORA_STATE_SEND_CMD;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 에러 카운터 리셋
                        ctx->state = LORA_STATE_SEND_CMD;
                    }
                }
            }
            break;
 8000950:	e1df      	b.n	8000d12 <LoraStarter_Process+0x4ea>
                } else if (strstr(uart_rx, "ERROR") || strstr(uart_rx, "AT_COMMAND_NOT_FOUND")) {
 8000952:	4982      	ldr	r1, [pc, #520]	@ (8000b5c <LoraStarter_Process+0x334>)
 8000954:	6838      	ldr	r0, [r7, #0]
 8000956:	f016 feca 	bl	80176ee <strstr>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d107      	bne.n	8000970 <LoraStarter_Process+0x148>
 8000960:	497f      	ldr	r1, [pc, #508]	@ (8000b60 <LoraStarter_Process+0x338>)
 8000962:	6838      	ldr	r0, [r7, #0]
 8000964:	f016 fec3 	bl	80176ee <strstr>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	f000 81d1 	beq.w	8000d12 <LoraStarter_Process+0x4ea>
                    LOG_WARN("[LoRa] Command %d failed: %s", ctx->cmd_index + 1, uart_rx);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	497a      	ldr	r1, [pc, #488]	@ (8000b64 <LoraStarter_Process+0x33c>)
 800097a:	2002      	movs	r0, #2
 800097c:	f004 fcfa 	bl	8005374 <LOGGER_SendFormatted>
                    ctx->error_count++;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6a1b      	ldr	r3, [r3, #32]
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	621a      	str	r2, [r3, #32]
                    if (ctx->error_count < 3) {
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	2b02      	cmp	r3, #2
 8000990:	dc0d      	bgt.n	80009ae <LoraStarter_Process+0x186>
                        LOG_INFO("[LoRa] Retrying command %d (attempt %d/3)", ctx->cmd_index + 1, ctx->error_count + 1);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6a1b      	ldr	r3, [r3, #32]
 800099c:	3301      	adds	r3, #1
 800099e:	4972      	ldr	r1, [pc, #456]	@ (8000b68 <LoraStarter_Process+0x340>)
 80009a0:	2001      	movs	r0, #1
 80009a2:	f004 fce7 	bl	8005374 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_CMD; // 같은 명령 재시도
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
            break;
 80009ac:	e1b1      	b.n	8000d12 <LoraStarter_Process+0x4ea>
                        LOG_WARN("[LoRa] Command %d failed after 3 attempts, skipping to next", ctx->cmd_index + 1);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	461a      	mov	r2, r3
 80009b6:	496d      	ldr	r1, [pc, #436]	@ (8000b6c <LoraStarter_Process+0x344>)
 80009b8:	2002      	movs	r0, #2
 80009ba:	f004 fcdb 	bl	8005374 <LOGGER_SendFormatted>
                        ctx->cmd_index++; // 다음 명령으로 건너뛰기
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	605a      	str	r2, [r3, #4]
                        ctx->error_count = 0; // 에러 카운터 리셋
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
                        ctx->state = LORA_STATE_SEND_CMD;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
            break;
 80009d4:	e19d      	b.n	8000d12 <LoraStarter_Process+0x4ea>
        case LORA_STATE_SEND_JOIN:
            LORA_LOG_JOIN_ATTEMPT();
 80009d6:	4966      	ldr	r1, [pc, #408]	@ (8000b70 <LoraStarter_Process+0x348>)
 80009d8:	2002      	movs	r0, #2
 80009da:	f004 fccb 	bl	8005374 <LOGGER_SendFormatted>
            CommandSender_Send("AT+JOIN\r\n");
 80009de:	4865      	ldr	r0, [pc, #404]	@ (8000b74 <LoraStarter_Process+0x34c>)
 80009e0:	f7ff fe14 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_JOIN_OK;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2204      	movs	r2, #4
 80009e8:	701a      	strb	r2, [r3, #0]
            break;
 80009ea:	e197      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_WAIT_JOIN_OK:
            if (uart_rx && is_join_response_ok(uart_rx)) {
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 8191 	beq.w	8000d16 <LoraStarter_Process+0x4ee>
 80009f4:	6838      	ldr	r0, [r7, #0]
 80009f6:	f000 fa31 	bl	8000e5c <is_join_response_ok>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	f000 818a 	beq.w	8000d16 <LoraStarter_Process+0x4ee>
                LORA_LOG_JOIN_SUCCESS();
 8000a02:	495d      	ldr	r1, [pc, #372]	@ (8000b78 <LoraStarter_Process+0x350>)
 8000a04:	2002      	movs	r0, #2
 8000a06:	f004 fcb5 	bl	8005374 <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_SEND_PERIODIC;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2205      	movs	r2, #5
 8000a0e:	701a      	strb	r2, [r3, #0]
                ctx->send_count = 0;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
                ctx->error_count = 0; // JOIN 성공 시 에러 카운터 리셋
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
                ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->last_retry_time = 0; // 재시도 시간 리셋
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	@ 0x28
                LOG_WARN("[LoRa] 🚀 PERIODIC SEND STARTED with message: %s", ctx->send_message);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4952      	ldr	r1, [pc, #328]	@ (8000b7c <LoraStarter_Process+0x354>)
 8000a32:	2002      	movs	r0, #2
 8000a34:	f004 fc9e 	bl	8005374 <LOGGER_SendFormatted>
            }
            break;
 8000a38:	e16d      	b.n	8000d16 <LoraStarter_Process+0x4ee>
        case LORA_STATE_SEND_PERIODIC:
            {
                char send_cmd[128];
                char hex_data[64];
                const char* message = (ctx->send_message != NULL) ? ctx->send_message : "Hello";
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d002      	beq.n	8000a48 <LoraStarter_Process+0x220>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	e000      	b.n	8000a4a <LoraStarter_Process+0x222>
 8000a48:	4b40      	ldr	r3, [pc, #256]	@ (8000b4c <LoraStarter_Process+0x324>)
 8000a4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                
                // 문자열을 헥사 문자열로 변환
                int len = strlen(message);
 8000a4e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8000a52:	f7ff fbe7 	bl	8000224 <strlen>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a62:	e014      	b.n	8000a8e <LoraStarter_Process+0x266>
                    sprintf(&hex_data[i*2], "%02X", (unsigned char)message[i]);
 8000a64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	f107 020c 	add.w	r2, r7, #12
 8000a6e:	18d0      	adds	r0, r2, r3
 8000a70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a74:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000a78:	4413      	add	r3, r2
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4940      	ldr	r1, [pc, #256]	@ (8000b80 <LoraStarter_Process+0x358>)
 8000a80:	f016 fd78 	bl	8017574 <siprintf>
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000a84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a88:	3301      	adds	r3, #1
 8000a8a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a8e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000a92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a96:	429a      	cmp	r2, r3
 8000a98:	da03      	bge.n	8000aa2 <LoraStarter_Process+0x27a>
 8000a9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a9e:	2b1e      	cmp	r3, #30
 8000aa0:	dde0      	ble.n	8000a64 <LoraStarter_Process+0x23c>
                }
                hex_data[len*2] = '\0';
 8000aa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	33f0      	adds	r3, #240	@ 0xf0
 8000aaa:	443b      	add	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	f803 2ce4 	strb.w	r2, [r3, #-228]
                
                snprintf(send_cmd, sizeof(send_cmd), "AT+SEND=1:%s\r\n", hex_data);
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000aba:	4a32      	ldr	r2, [pc, #200]	@ (8000b84 <LoraStarter_Process+0x35c>)
 8000abc:	2180      	movs	r1, #128	@ 0x80
 8000abe:	f016 fd23 	bl	8017508 <sniprintf>
                LORA_LOG_SEND_ATTEMPT(message);
 8000ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000ac6:	4930      	ldr	r1, [pc, #192]	@ (8000b88 <LoraStarter_Process+0x360>)
 8000ac8:	2002      	movs	r0, #2
 8000aca:	f004 fc53 	bl	8005374 <LOGGER_SendFormatted>
                CommandSender_Send(send_cmd);
 8000ace:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fd9a 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_SEND_RESPONSE;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2206      	movs	r2, #6
 8000adc:	701a      	strb	r2, [r3, #0]
                ctx->send_count++;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	619a      	str	r2, [r3, #24]
                LOG_DEBUG("[LoRa] Send count: %d", ctx->send_count);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4927      	ldr	r1, [pc, #156]	@ (8000b8c <LoraStarter_Process+0x364>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f004 fc3f 	bl	8005374 <LOGGER_SendFormatted>
            }
            break;
 8000af6:	e111      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_WAIT_SEND_RESPONSE:
            if (uart_rx) {
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 810d 	beq.w	8000d1a <LoraStarter_Process+0x4f2>
                ResponseType response_type = ResponseHandler_ParseSendResponse(uart_rx);
 8000b00:	6838      	ldr	r0, [r7, #0]
 8000b02:	f000 fa2f 	bl	8000f64 <ResponseHandler_ParseSendResponse>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
                switch(response_type) {
 8000b0c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d03f      	beq.n	8000b94 <LoraStarter_Process+0x36c>
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	f300 8086 	bgt.w	8000c26 <LoraStarter_Process+0x3fe>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <LoraStarter_Process+0x2fc>
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d04c      	beq.n	8000bbc <LoraStarter_Process+0x394>
 8000b22:	e080      	b.n	8000c26 <LoraStarter_Process+0x3fe>
                    case RESPONSE_OK:
                        LORA_LOG_SEND_SUCCESS();
 8000b24:	491a      	ldr	r1, [pc, #104]	@ (8000b90 <LoraStarter_Process+0x368>)
 8000b26:	2002      	movs	r0, #2
 8000b28:	f004 fc24 	bl	8005374 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2207      	movs	r2, #7
 8000b30:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000b40:	f004 fbaa 	bl	8005298 <TIME_GetCurrentMs>
 8000b44:	4602      	mov	r2, r0
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	611a      	str	r2, [r3, #16]
                        break;
 8000b4a:	e072      	b.n	8000c32 <LoraStarter_Process+0x40a>
 8000b4c:	08018768 	.word	0x08018768
 8000b50:	08018770 	.word	0x08018770
 8000b54:	080187a8 	.word	0x080187a8
 8000b58:	080187cc 	.word	0x080187cc
 8000b5c:	080186f4 	.word	0x080186f4
 8000b60:	080187ec 	.word	0x080187ec
 8000b64:	08018804 	.word	0x08018804
 8000b68:	08018824 	.word	0x08018824
 8000b6c:	08018850 	.word	0x08018850
 8000b70:	0801888c 	.word	0x0801888c
 8000b74:	080188b0 	.word	0x080188b0
 8000b78:	080188bc 	.word	0x080188bc
 8000b7c:	080188d8 	.word	0x080188d8
 8000b80:	0801890c 	.word	0x0801890c
 8000b84:	08018914 	.word	0x08018914
 8000b88:	08018924 	.word	0x08018924
 8000b8c:	08018944 	.word	0x08018944
 8000b90:	0801895c 	.word	0x0801895c
                    case RESPONSE_TIMEOUT:
                        LOG_WARN("[LoRa] SEND timeout");
 8000b94:	496f      	ldr	r1, [pc, #444]	@ (8000d54 <LoraStarter_Process+0x52c>)
 8000b96:	2002      	movs	r0, #2
 8000b98:	f004 fbec 	bl	8005374 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bae:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000bb0:	f004 fb72 	bl	8005298 <TIME_GetCurrentMs>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	611a      	str	r2, [r3, #16]
                        break;
 8000bba:	e03a      	b.n	8000c32 <LoraStarter_Process+0x40a>
                    case RESPONSE_ERROR:
                        LORA_LOG_SEND_FAILED("Network error");
 8000bbc:	4a66      	ldr	r2, [pc, #408]	@ (8000d58 <LoraStarter_Process+0x530>)
 8000bbe:	4967      	ldr	r1, [pc, #412]	@ (8000d5c <LoraStarter_Process+0x534>)
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	f004 fbd7 	bl	8005374 <LOGGER_SendFormatted>
                        ctx->error_count++;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a1b      	ldr	r3, [r3, #32]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	621a      	str	r2, [r3, #32]
                        LORA_LOG_ERROR_COUNT(ctx->error_count);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4962      	ldr	r1, [pc, #392]	@ (8000d60 <LoraStarter_Process+0x538>)
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f004 fbcb 	bl	8005374 <LOGGER_SendFormatted>
                        // 무제한 재시도 (max_retry_count가 0이거나 아직 제한에 도달하지 않은 경우)
                        if (ctx->max_retry_count == 0 || ctx->error_count < ctx->max_retry_count) {
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d005      	beq.n	8000bf2 <LoraStarter_Process+0x3ca>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a1a      	ldr	r2, [r3, #32]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	da11      	bge.n	8000c16 <LoraStarter_Process+0x3ee>
                            LORA_LOG_RETRY_ATTEMPT(ctx->error_count, ctx->max_retry_count);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a1a      	ldr	r2, [r3, #32]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <LoraStarter_Process+0x3dc>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c02:	e000      	b.n	8000c06 <LoraStarter_Process+0x3de>
 8000c04:	4b57      	ldr	r3, [pc, #348]	@ (8000d64 <LoraStarter_Process+0x53c>)
 8000c06:	4958      	ldr	r1, [pc, #352]	@ (8000d68 <LoraStarter_Process+0x540>)
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f004 fbb3 	bl	8005374 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_JOIN_RETRY; // JOIN 재시도
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2208      	movs	r2, #8
 8000c12:	701a      	strb	r2, [r3, #0]
                        } else {
                            LORA_LOG_MAX_RETRIES_REACHED();
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
                        }
                        break;
 8000c14:	e00d      	b.n	8000c32 <LoraStarter_Process+0x40a>
                            LORA_LOG_MAX_RETRIES_REACHED();
 8000c16:	4955      	ldr	r1, [pc, #340]	@ (8000d6c <LoraStarter_Process+0x544>)
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f004 fbab 	bl	8005374 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	220a      	movs	r2, #10
 8000c22:	701a      	strb	r2, [r3, #0]
                        break;
 8000c24:	e005      	b.n	8000c32 <LoraStarter_Process+0x40a>
                    default:
                        // 알 수 없는 응답은 무시하고 계속 대기
                        LOG_DEBUG("[LoRa] Unknown response: %s", uart_rx);
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	4951      	ldr	r1, [pc, #324]	@ (8000d70 <LoraStarter_Process+0x548>)
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f004 fba2 	bl	8005374 <LOGGER_SendFormatted>
                        break;
 8000c30:	bf00      	nop
                }
            }
            break;
 8000c32:	e072      	b.n	8000d1a <LoraStarter_Process+0x4f2>
        case LORA_STATE_WAIT_SEND_INTERVAL:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c34:	f004 fb30 	bl	8005298 <TIME_GetCurrentMs>
 8000c38:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
                uint32_t interval_ms = (ctx->send_interval_ms > 0) ? ctx->send_interval_ms : 30000; // 기본값 30초
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d002      	beq.n	8000c4a <LoraStarter_Process+0x422>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	e001      	b.n	8000c4e <LoraStarter_Process+0x426>
 8000c4a:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                
                if ((current_time - ctx->last_send_time) >= interval_ms) {
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d809      	bhi.n	8000c78 <LoraStarter_Process+0x450>
                    LOG_DEBUG("[LoRa] Send interval passed (%u ms), ready for next send", interval_ms);
 8000c64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c68:	4942      	ldr	r1, [pc, #264]	@ (8000d74 <LoraStarter_Process+0x54c>)
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f004 fb82 	bl	8005374 <LOGGER_SendFormatted>
                    ctx->state = LORA_STATE_SEND_PERIODIC;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2205      	movs	r2, #5
 8000c74:	701a      	strb	r2, [r3, #0]
                    // 아직 대기 시간이 남았으므로 상태 유지
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
                }
            }
            break;
 8000c76:	e051      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	691a      	ldr	r2, [r3, #16]
 8000c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c86:	4413      	add	r3, r2
 8000c88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
 8000c8c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000c90:	4939      	ldr	r1, [pc, #228]	@ (8000d78 <LoraStarter_Process+0x550>)
 8000c92:	2000      	movs	r0, #0
 8000c94:	f004 fb6e 	bl	8005374 <LOGGER_SendFormatted>
            break;
 8000c98:	e040      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_JOIN_RETRY:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c9a:	f004 fafd 	bl	8005298 <TIME_GetCurrentMs>
 8000c9e:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
                
                if (ctx->last_retry_time == 0) {
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10b      	bne.n	8000cc2 <LoraStarter_Process+0x49a>
                    // 첫 재시도: 바로 SEND_JOIN
                    LOG_DEBUG("[LoRa] First JOIN retry");
 8000caa:	4934      	ldr	r1, [pc, #208]	@ (8000d7c <LoraStarter_Process+0x554>)
 8000cac:	2000      	movs	r0, #0
 8000cae:	f004 fb61 	bl	8005374 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cb8:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	701a      	strb	r2, [r3, #0]
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
                             ctx->retry_delay_ms - (current_time - ctx->last_retry_time));
                    // 아무것도 하지 않음
                }
            }
            break;
 8000cc0:	e02c      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                } else if ((current_time - ctx->last_retry_time) >= ctx->retry_delay_ms) {
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cca:	1ad2      	subs	r2, r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d30e      	bcc.n	8000cf2 <LoraStarter_Process+0x4ca>
                    LOG_DEBUG("[LoRa] JOIN retry after %lu ms delay", ctx->retry_delay_ms);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4929      	ldr	r1, [pc, #164]	@ (8000d80 <LoraStarter_Process+0x558>)
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f004 fb49 	bl	8005374 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000ce8:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2203      	movs	r2, #3
 8000cee:	701a      	strb	r2, [r3, #0]
            break;
 8000cf0:	e014      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cfe:	1acb      	subs	r3, r1, r3
 8000d00:	4413      	add	r3, r2
 8000d02:	461a      	mov	r2, r3
 8000d04:	491f      	ldr	r1, [pc, #124]	@ (8000d84 <LoraStarter_Process+0x55c>)
 8000d06:	2000      	movs	r0, #0
 8000d08:	f004 fb34 	bl	8005374 <LOGGER_SendFormatted>
            break;
 8000d0c:	e006      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_DONE:
        case LORA_STATE_ERROR:
        default:
            // 이미 완료된 상태이므로 아무것도 하지 않음
            break;
 8000d0e:	bf00      	nop
 8000d10:	e004      	b.n	8000d1c <LoraStarter_Process+0x4f4>
            break;
 8000d12:	bf00      	nop
 8000d14:	e002      	b.n	8000d1c <LoraStarter_Process+0x4f4>
            break;
 8000d16:	bf00      	nop
 8000d18:	e000      	b.n	8000d1c <LoraStarter_Process+0x4f4>
            break;
 8000d1a:	bf00      	nop
    }

    // 상태 변경 로깅
    if (old_state != ctx->state) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d012      	beq.n	8000d4e <LoraStarter_Process+0x526>
        LORA_LOG_STATE_CHANGE(get_state_name(old_state), get_state_name(ctx->state));
 8000d28:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fcdb 	bl	80006e8 <get_state_name>
 8000d32:	4604      	mov	r4, r0
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fcd5 	bl	80006e8 <get_state_name>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4622      	mov	r2, r4
 8000d42:	4911      	ldr	r1, [pc, #68]	@ (8000d88 <LoraStarter_Process+0x560>)
 8000d44:	2000      	movs	r0, #0
 8000d46:	f004 fb15 	bl	8005374 <LOGGER_SendFormatted>
 8000d4a:	e000      	b.n	8000d4e <LoraStarter_Process+0x526>
    if (ctx == NULL) return;
 8000d4c:	bf00      	nop
    }
}
 8000d4e:	37f4      	adds	r7, #244	@ 0xf4
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd90      	pop	{r4, r7, pc}
 8000d54:	08018978 	.word	0x08018978
 8000d58:	0801898c 	.word	0x0801898c
 8000d5c:	0801899c 	.word	0x0801899c
 8000d60:	080189b4 	.word	0x080189b4
 8000d64:	080189cc 	.word	0x080189cc
 8000d68:	080189d0 	.word	0x080189d0
 8000d6c:	080189ec 	.word	0x080189ec
 8000d70:	08018a10 	.word	0x08018a10
 8000d74:	08018a2c 	.word	0x08018a2c
 8000d78:	08018a68 	.word	0x08018a68
 8000d7c:	08018a9c 	.word	0x08018a9c
 8000d80:	08018ab4 	.word	0x08018ab4
 8000d84:	08018adc 	.word	0x08018adc
 8000d88:	08018b10 	.word	0x08018b10

08000d8c <is_response_ok>:
#include "ResponseHandler.h"
#include "logger.h"
#include <string.h>

bool is_response_ok(const char* response)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d105      	bne.n	8000da6 <is_response_ok+0x1a>
        LOG_DEBUG("[ResponseHandler] is_response_ok: NULL response");
 8000d9a:	4925      	ldr	r1, [pc, #148]	@ (8000e30 <is_response_ok+0xa4>)
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f004 fae9 	bl	8005374 <LOGGER_SendFormatted>
        return false;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e03f      	b.n	8000e26 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking OK response: '%s'", response);
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	4922      	ldr	r1, [pc, #136]	@ (8000e34 <is_response_ok+0xa8>)
 8000daa:	2000      	movs	r0, #0
 8000dac:	f004 fae2 	bl	8005374 <LOGGER_SendFormatted>
    
    // OK 또는 OK\r\n, OK\n 등 허용
    if (strcmp(response, "OK") == 0) {
 8000db0:	4921      	ldr	r1, [pc, #132]	@ (8000e38 <is_response_ok+0xac>)
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff fa2c 	bl	8000210 <strcmp>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d105      	bne.n	8000dca <is_response_ok+0x3e>
        LOG_DEBUG("[ResponseHandler] OK response confirmed");
 8000dbe:	491f      	ldr	r1, [pc, #124]	@ (8000e3c <is_response_ok+0xb0>)
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f004 fad7 	bl	8005374 <LOGGER_SendFormatted>
        return true;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e02d      	b.n	8000e26 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\r\n") == 0) {
 8000dca:	491d      	ldr	r1, [pc, #116]	@ (8000e40 <is_response_ok+0xb4>)
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fa1f 	bl	8000210 <strcmp>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d105      	bne.n	8000de4 <is_response_ok+0x58>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with CRLF)");
 8000dd8:	491a      	ldr	r1, [pc, #104]	@ (8000e44 <is_response_ok+0xb8>)
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f004 faca 	bl	8005374 <LOGGER_SendFormatted>
        return true;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e020      	b.n	8000e26 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\n") == 0) {
 8000de4:	4918      	ldr	r1, [pc, #96]	@ (8000e48 <is_response_ok+0xbc>)
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff fa12 	bl	8000210 <strcmp>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d105      	bne.n	8000dfe <is_response_ok+0x72>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with LF)");
 8000df2:	4916      	ldr	r1, [pc, #88]	@ (8000e4c <is_response_ok+0xc0>)
 8000df4:	2000      	movs	r0, #0
 8000df6:	f004 fabd 	bl	8005374 <LOGGER_SendFormatted>
        return true;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e013      	b.n	8000e26 <is_response_ok+0x9a>
    }
    
    // AT+VER 버전 응답도 성공으로 간주 (RUI_로 시작하는 응답)
    if (strstr(response, "RUI_") != NULL) {
 8000dfe:	4914      	ldr	r1, [pc, #80]	@ (8000e50 <is_response_ok+0xc4>)
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f016 fc74 	bl	80176ee <strstr>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d006      	beq.n	8000e1a <is_response_ok+0x8e>
        LOG_DEBUG("[ResponseHandler] Version response confirmed: %s", response);
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	4911      	ldr	r1, [pc, #68]	@ (8000e54 <is_response_ok+0xc8>)
 8000e10:	2000      	movs	r0, #0
 8000e12:	f004 faaf 	bl	8005374 <LOGGER_SendFormatted>
        return true;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e005      	b.n	8000e26 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Not an OK response: '%s'", response);
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	490e      	ldr	r1, [pc, #56]	@ (8000e58 <is_response_ok+0xcc>)
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f004 faa8 	bl	8005374 <LOGGER_SendFormatted>
    return false;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	08018b30 	.word	0x08018b30
 8000e34:	08018b60 	.word	0x08018b60
 8000e38:	08018b90 	.word	0x08018b90
 8000e3c:	08018b94 	.word	0x08018b94
 8000e40:	08018bbc 	.word	0x08018bbc
 8000e44:	08018bc4 	.word	0x08018bc4
 8000e48:	08018bf8 	.word	0x08018bf8
 8000e4c:	08018bfc 	.word	0x08018bfc
 8000e50:	08018c30 	.word	0x08018c30
 8000e54:	08018c38 	.word	0x08018c38
 8000e58:	08018c6c 	.word	0x08018c6c

08000e5c <is_join_response_ok>:

bool is_join_response_ok(const char* response)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000e68:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000e6c:	6018      	str	r0, [r3, #0]
    if (response == NULL) {
 8000e6e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000e72:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d105      	bne.n	8000e88 <is_join_response_ok+0x2c>
        LOG_DEBUG("[ResponseHandler] is_join_response_ok: NULL response");
 8000e7c:	4934      	ldr	r1, [pc, #208]	@ (8000f50 <is_join_response_ok+0xf4>)
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f004 fa78 	bl	8005374 <LOGGER_SendFormatted>
        return false;
 8000e84:	2300      	movs	r3, #0
 8000e86:	e05e      	b.n	8000f46 <is_join_response_ok+0xea>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking JOIN response: '%s'", response);
 8000e88:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000e8c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	4930      	ldr	r1, [pc, #192]	@ (8000f54 <is_join_response_ok+0xf8>)
 8000e94:	2000      	movs	r0, #0
 8000e96:	f004 fa6d 	bl	8005374 <LOGGER_SendFormatted>
    
    // 개행 문자 제거하여 비교
    char clean_response[512];
    strncpy(clean_response, response, sizeof(clean_response) - 1);
 8000e9a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000e9e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000ea2:	f107 0008 	add.w	r0, r7, #8
 8000ea6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000eaa:	6819      	ldr	r1, [r3, #0]
 8000eac:	f016 fc0c 	bl	80176c8 <strncpy>
    clean_response[sizeof(clean_response) - 1] = '\0';
 8000eb0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000eb4:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    
    // 개행 문자 제거
    char* pos = clean_response;
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000ec6:	e013      	b.n	8000ef0 <is_join_response_ok+0x94>
        if (*pos == '\r' || *pos == '\n') {
 8000ec8:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b0d      	cmp	r3, #13
 8000ed0:	d004      	beq.n	8000edc <is_join_response_ok+0x80>
 8000ed2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b0a      	cmp	r3, #10
 8000eda:	d104      	bne.n	8000ee6 <is_join_response_ok+0x8a>
            *pos = '\0';
 8000edc:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
            break;
 8000ee4:	e009      	b.n	8000efa <is_join_response_ok+0x9e>
        }
        pos++;
 8000ee6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000eea:	3301      	adds	r3, #1
 8000eec:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000ef0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1e6      	bne.n	8000ec8 <is_join_response_ok+0x6c>
    }
    
    bool result = (strcmp(clean_response, "+EVT:JOINED") == 0);
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	4916      	ldr	r1, [pc, #88]	@ (8000f58 <is_join_response_ok+0xfc>)
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff f985 	bl	8000210 <strcmp>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	bf0c      	ite	eq
 8000f0c:	2301      	moveq	r3, #1
 8000f0e:	2300      	movne	r3, #0
 8000f10:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    
    if (result) {
 8000f14:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d009      	beq.n	8000f30 <is_join_response_ok+0xd4>
        LOG_WARN("[ResponseHandler] ✅ JOIN SUCCESS: %s", response);
 8000f1c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f20:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	490d      	ldr	r1, [pc, #52]	@ (8000f5c <is_join_response_ok+0x100>)
 8000f28:	2002      	movs	r0, #2
 8000f2a:	f004 fa23 	bl	8005374 <LOGGER_SendFormatted>
 8000f2e:	e008      	b.n	8000f42 <is_join_response_ok+0xe6>
    } else {
        LOG_DEBUG("[ResponseHandler] Not a JOIN response: '%s'", response);
 8000f30:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f34:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	4909      	ldr	r1, [pc, #36]	@ (8000f60 <is_join_response_ok+0x104>)
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f004 fa19 	bl	8005374 <LOGGER_SendFormatted>
    }
    
    return result;
 8000f42:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	08018c98 	.word	0x08018c98
 8000f54:	08018cd0 	.word	0x08018cd0
 8000f58:	08018d00 	.word	0x08018d00
 8000f5c:	08018d0c 	.word	0x08018d0c
 8000f60:	08018d34 	.word	0x08018d34

08000f64 <ResponseHandler_ParseSendResponse>:

ResponseType ResponseHandler_ParseSendResponse(const char* response)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d105      	bne.n	8000f7e <ResponseHandler_ParseSendResponse+0x1a>
        LOG_DEBUG("[ResponseHandler] ParseSendResponse: NULL response");
 8000f72:	491e      	ldr	r1, [pc, #120]	@ (8000fec <ResponseHandler_ParseSendResponse+0x88>)
 8000f74:	2000      	movs	r0, #0
 8000f76:	f004 f9fd 	bl	8005374 <LOGGER_SendFormatted>
        return RESPONSE_UNKNOWN;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e031      	b.n	8000fe2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing SEND response: '%s'", response);
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	491b      	ldr	r1, [pc, #108]	@ (8000ff0 <ResponseHandler_ParseSendResponse+0x8c>)
 8000f82:	2000      	movs	r0, #0
 8000f84:	f004 f9f6 	bl	8005374 <LOGGER_SendFormatted>
    
    if (strstr(response, "+EVT:SEND_CONFIRMED_OK") != NULL) {
 8000f88:	491a      	ldr	r1, [pc, #104]	@ (8000ff4 <ResponseHandler_ParseSendResponse+0x90>)
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f016 fbaf 	bl	80176ee <strstr>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d005      	beq.n	8000fa2 <ResponseHandler_ParseSendResponse+0x3e>
        LOG_WARN("[ResponseHandler] ✅ SEND SUCCESS: CONFIRMED_OK");
 8000f96:	4918      	ldr	r1, [pc, #96]	@ (8000ff8 <ResponseHandler_ParseSendResponse+0x94>)
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f004 f9eb 	bl	8005374 <LOGGER_SendFormatted>
        return RESPONSE_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e01f      	b.n	8000fe2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strstr(response, "+EVT:SEND_CONFIRMED_FAILED") != NULL) {
 8000fa2:	4916      	ldr	r1, [pc, #88]	@ (8000ffc <ResponseHandler_ParseSendResponse+0x98>)
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f016 fba2 	bl	80176ee <strstr>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d005      	beq.n	8000fbc <ResponseHandler_ParseSendResponse+0x58>
        LOG_WARN("[ResponseHandler] SEND response: CONFIRMED_FAILED");
 8000fb0:	4913      	ldr	r1, [pc, #76]	@ (8001000 <ResponseHandler_ParseSendResponse+0x9c>)
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f004 f9de 	bl	8005374 <LOGGER_SendFormatted>
        return RESPONSE_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e012      	b.n	8000fe2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strcmp(response, "TIMEOUT") == 0) {
 8000fbc:	4911      	ldr	r1, [pc, #68]	@ (8001004 <ResponseHandler_ParseSendResponse+0xa0>)
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff f926 	bl	8000210 <strcmp>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d105      	bne.n	8000fd6 <ResponseHandler_ParseSendResponse+0x72>
        LOG_WARN("[ResponseHandler] SEND response: TIMEOUT");
 8000fca:	490f      	ldr	r1, [pc, #60]	@ (8001008 <ResponseHandler_ParseSendResponse+0xa4>)
 8000fcc:	2002      	movs	r0, #2
 8000fce:	f004 f9d1 	bl	8005374 <LOGGER_SendFormatted>
        return RESPONSE_TIMEOUT;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e005      	b.n	8000fe2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Unknown SEND response: '%s'", response);
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	490c      	ldr	r1, [pc, #48]	@ (800100c <ResponseHandler_ParseSendResponse+0xa8>)
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f004 f9ca 	bl	8005374 <LOGGER_SendFormatted>
    return RESPONSE_UNKNOWN;
 8000fe0:	2303      	movs	r3, #3
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	08018d60 	.word	0x08018d60
 8000ff0:	08018d94 	.word	0x08018d94
 8000ff4:	08018dc4 	.word	0x08018dc4
 8000ff8:	08018ddc 	.word	0x08018ddc
 8000ffc:	08018e10 	.word	0x08018e10
 8001000:	08018e2c 	.word	0x08018e2c
 8001004:	08018e60 	.word	0x08018e60
 8001008:	08018e68 	.word	0x08018e68
 800100c:	08018e94 	.word	0x08018e94

08001010 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001016:	4b1b      	ldr	r3, [pc, #108]	@ (8001084 <SCB_CleanInvalidateDCache+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800101e:	f3bf 8f4f 	dsb	sy
}
 8001022:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001024:	4b17      	ldr	r3, [pc, #92]	@ (8001084 <SCB_CleanInvalidateDCache+0x74>)
 8001026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800102a:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	0b5b      	lsrs	r3, r3, #13
 8001030:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001034:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	08db      	lsrs	r3, r3, #3
 800103a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800103e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	015a      	lsls	r2, r3, #5
 8001044:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001048:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800104e:	490d      	ldr	r1, [pc, #52]	@ (8001084 <SCB_CleanInvalidateDCache+0x74>)
 8001050:	4313      	orrs	r3, r2
 8001052:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1e5a      	subs	r2, r3, #1
 800105a:	60ba      	str	r2, [r7, #8]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1ef      	bne.n	8001040 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	1e5a      	subs	r2, r3, #1
 8001064:	60fa      	str	r2, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1e5      	bne.n	8001036 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800106a:	f3bf 8f4f 	dsb	sy
}
 800106e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001070:	f3bf 8f6f 	isb	sy
}
 8001074:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <_ensure_file_closed>:
static FILE* g_log_file = NULL;
#endif

// 파일 닫기 보장 함수들
#ifdef STM32F746xx
static void _ensure_file_closed(void) {
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
    if (g_current_file_handle != NULL) {
 800108c:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <_ensure_file_closed+0x38>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d012      	beq.n	80010ba <_ensure_file_closed+0x32>
        LOG_DEBUG("[SDStorage] Force closing previously opened file: %s", g_current_open_file);
 8001094:	4a0b      	ldr	r2, [pc, #44]	@ (80010c4 <_ensure_file_closed+0x3c>)
 8001096:	490c      	ldr	r1, [pc, #48]	@ (80010c8 <_ensure_file_closed+0x40>)
 8001098:	2000      	movs	r0, #0
 800109a:	f004 f96b 	bl	8005374 <LOGGER_SendFormatted>
        f_close(g_current_file_handle);
 800109e:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <_ensure_file_closed+0x38>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f012 fec2 	bl	8013e2c <f_close>
        g_current_file_handle = NULL;
 80010a8:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <_ensure_file_closed+0x38>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
        memset(g_current_open_file, 0, sizeof(g_current_open_file));
 80010ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010b2:	2100      	movs	r1, #0
 80010b4:	4803      	ldr	r0, [pc, #12]	@ (80010c4 <_ensure_file_closed+0x3c>)
 80010b6:	f016 faff 	bl	80176b8 <memset>
    }
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000348 	.word	0x20000348
 80010c4:	2000034c 	.word	0x2000034c
 80010c8:	08018ec4 	.word	0x08018ec4

080010cc <_register_file_opened>:

static void _register_file_opened(FIL* file_handle, const char* filename) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
    g_current_file_handle = file_handle;
 80010d6:	4a08      	ldr	r2, [pc, #32]	@ (80010f8 <_register_file_opened+0x2c>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6013      	str	r3, [r2, #0]
    strncpy(g_current_open_file, filename, sizeof(g_current_open_file) - 1);
 80010dc:	22ff      	movs	r2, #255	@ 0xff
 80010de:	6839      	ldr	r1, [r7, #0]
 80010e0:	4806      	ldr	r0, [pc, #24]	@ (80010fc <_register_file_opened+0x30>)
 80010e2:	f016 faf1 	bl	80176c8 <strncpy>
    g_current_open_file[sizeof(g_current_open_file) - 1] = '\0';
 80010e6:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <_register_file_opened+0x30>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000348 	.word	0x20000348
 80010fc:	2000034c 	.word	0x2000034c

08001100 <_register_file_closed>:

static void _register_file_closed(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
    g_current_file_handle = NULL;
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <_register_file_closed+0x1c>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
    memset(g_current_open_file, 0, sizeof(g_current_open_file));
 800110a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800110e:	2100      	movs	r1, #0
 8001110:	4803      	ldr	r0, [pc, #12]	@ (8001120 <_register_file_closed+0x20>)
 8001112:	f016 fad1 	bl	80176b8 <memset>
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000348 	.word	0x20000348
 8001120:	2000034c 	.word	0x2000034c

08001124 <SDStorage_Init>:
static int _create_log_directory(void);
static int _generate_log_filename(char* filename, size_t max_len);
// static uint32_t _get_current_timestamp(void); - unused function removed

int SDStorage_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af02      	add	r7, sp, #8
#ifdef STM32F746xx
    // STM32 환경: FatFs 초기화 및 진단
    LOG_INFO("[SDStorage] Starting SD card initialization...");
 800112a:	49b0      	ldr	r1, [pc, #704]	@ (80013ec <SDStorage_Init+0x2c8>)
 800112c:	2001      	movs	r0, #1
 800112e:	f004 f921 	bl	8005374 <LOGGER_SendFormatted>
    
    // 초기화 시 파일 닫기 보장
    _ensure_file_closed();
 8001132:	f7ff ffa9 	bl	8001088 <_ensure_file_closed>
    
    // 1. 하드웨어 상태 진단 및 TRANSFER 상태까지 대기
    extern SD_HandleTypeDef hsd1;
    HAL_SD_CardStateTypeDef card_state = HAL_SD_GetCardState(&hsd1);
 8001136:	48ae      	ldr	r0, [pc, #696]	@ (80013f0 <SDStorage_Init+0x2cc>)
 8001138:	f00c f888 	bl	800d24c <HAL_SD_GetCardState>
 800113c:	6178      	str	r0, [r7, #20]
    LOG_INFO("[SDStorage] Initial SD card state: %d", card_state);
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	49ac      	ldr	r1, [pc, #688]	@ (80013f4 <SDStorage_Init+0x2d0>)
 8001142:	2001      	movs	r0, #1
 8001144:	f004 f916 	bl	8005374 <LOGGER_SendFormatted>
    
    // SD 카드가 TRANSFER 상태가 될 때까지 대기 (성공 프로젝트 패턴)
    int wait_count = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
    while (card_state != HAL_SD_CARD_TRANSFER && wait_count < 50) {  // 최대 5초 대기
 800114c:	e010      	b.n	8001170 <SDStorage_Init+0x4c>
        LOG_INFO("[SDStorage] Waiting for SD card TRANSFER state... (attempt %d)", wait_count + 1);
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	3301      	adds	r3, #1
 8001152:	461a      	mov	r2, r3
 8001154:	49a8      	ldr	r1, [pc, #672]	@ (80013f8 <SDStorage_Init+0x2d4>)
 8001156:	2001      	movs	r0, #1
 8001158:	f004 f90c 	bl	8005374 <LOGGER_SendFormatted>
        HAL_Delay(100);
 800115c:	2064      	movs	r0, #100	@ 0x64
 800115e:	f004 fedf 	bl	8005f20 <HAL_Delay>
        card_state = HAL_SD_GetCardState(&hsd1);
 8001162:	48a3      	ldr	r0, [pc, #652]	@ (80013f0 <SDStorage_Init+0x2cc>)
 8001164:	f00c f872 	bl	800d24c <HAL_SD_GetCardState>
 8001168:	6178      	str	r0, [r7, #20]
        wait_count++;
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	3301      	adds	r3, #1
 800116e:	613b      	str	r3, [r7, #16]
    while (card_state != HAL_SD_CARD_TRANSFER && wait_count < 50) {  // 최대 5초 대기
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	2b04      	cmp	r3, #4
 8001174:	d002      	beq.n	800117c <SDStorage_Init+0x58>
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	2b31      	cmp	r3, #49	@ 0x31
 800117a:	dde8      	ble.n	800114e <SDStorage_Init+0x2a>
    }
    
    if (card_state == HAL_SD_CARD_TRANSFER) {
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	2b04      	cmp	r3, #4
 8001180:	d128      	bne.n	80011d4 <SDStorage_Init+0xb0>
        LOG_INFO("[SDStorage] ✅ SD card reached TRANSFER state successfully");
 8001182:	499e      	ldr	r1, [pc, #632]	@ (80013fc <SDStorage_Init+0x2d8>)
 8001184:	2001      	movs	r0, #1
 8001186:	f004 f8f5 	bl	8005374 <LOGGER_SendFormatted>
        
        // SDMMC 에러 코드 상세 체크 (성공 프로젝트 패턴)
        if (hsd1.ErrorCode != HAL_SD_ERROR_NONE) {
 800118a:	4b99      	ldr	r3, [pc, #612]	@ (80013f0 <SDStorage_Init+0x2cc>)
 800118c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800118e:	2b00      	cmp	r3, #0
 8001190:	d02f      	beq.n	80011f2 <SDStorage_Init+0xce>
            LOG_WARN("[SDStorage] SDMMC ErrorCode detected: 0x%08X", hsd1.ErrorCode);
 8001192:	4b97      	ldr	r3, [pc, #604]	@ (80013f0 <SDStorage_Init+0x2cc>)
 8001194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001196:	461a      	mov	r2, r3
 8001198:	4999      	ldr	r1, [pc, #612]	@ (8001400 <SDStorage_Init+0x2dc>)
 800119a:	2002      	movs	r0, #2
 800119c:	f004 f8ea 	bl	8005374 <LOGGER_SendFormatted>
            
            if (hsd1.ErrorCode & SDMMC_ERROR_TX_UNDERRUN) {
 80011a0:	4b93      	ldr	r3, [pc, #588]	@ (80013f0 <SDStorage_Init+0x2cc>)
 80011a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011a4:	f003 0310 	and.w	r3, r3, #16
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <SDStorage_Init+0x90>
                LOG_WARN("[SDStorage] TX_UNDERRUN detected - clock may be too fast");
 80011ac:	4995      	ldr	r1, [pc, #596]	@ (8001404 <SDStorage_Init+0x2e0>)
 80011ae:	2002      	movs	r0, #2
 80011b0:	f004 f8e0 	bl	8005374 <LOGGER_SendFormatted>
            }
            if (hsd1.ErrorCode & SDMMC_ERROR_DATA_CRC_FAIL) {
 80011b4:	4b8e      	ldr	r3, [pc, #568]	@ (80013f0 <SDStorage_Init+0x2cc>)
 80011b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d005      	beq.n	80011cc <SDStorage_Init+0xa8>
                LOG_WARN("[SDStorage] CRC_FAIL detected - cache issue possible");
 80011c0:	4991      	ldr	r1, [pc, #580]	@ (8001408 <SDStorage_Init+0x2e4>)
 80011c2:	2002      	movs	r0, #2
 80011c4:	f004 f8d6 	bl	8005374 <LOGGER_SendFormatted>
                SCB_CleanInvalidateDCache();
 80011c8:	f7ff ff22 	bl	8001010 <SCB_CleanInvalidateDCache>
            }
            
            // 에러 코드 클리어
            hsd1.ErrorCode = HAL_SD_ERROR_NONE;
 80011cc:	4b88      	ldr	r3, [pc, #544]	@ (80013f0 <SDStorage_Init+0x2cc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80011d2:	e00e      	b.n	80011f2 <SDStorage_Init+0xce>
        }
    } else {
        LOG_ERROR("[SDStorage] ❌ SD card failed to reach TRANSFER state (state: %d)", card_state);
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	498d      	ldr	r1, [pc, #564]	@ (800140c <SDStorage_Init+0x2e8>)
 80011d8:	2003      	movs	r0, #3
 80011da:	f004 f8cb 	bl	8005374 <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] SDMMC ErrorCode: 0x%08X", hsd1.ErrorCode);
 80011de:	4b84      	ldr	r3, [pc, #528]	@ (80013f0 <SDStorage_Init+0x2cc>)
 80011e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011e2:	461a      	mov	r2, r3
 80011e4:	498a      	ldr	r1, [pc, #552]	@ (8001410 <SDStorage_Init+0x2ec>)
 80011e6:	2003      	movs	r0, #3
 80011e8:	f004 f8c4 	bl	8005374 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
 80011f0:	e199      	b.n	8001526 <SDStorage_Init+0x402>
    }
    
    DSTATUS disk_status = disk_initialize(0);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f010 fea8 	bl	8011f48 <disk_initialize>
 80011f8:	4603      	mov	r3, r0
 80011fa:	71fb      	strb	r3, [r7, #7]
    LOG_INFO("[SDStorage] disk_initialize result: 0x%02X", disk_status);
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	461a      	mov	r2, r3
 8001200:	4984      	ldr	r1, [pc, #528]	@ (8001414 <SDStorage_Init+0x2f0>)
 8001202:	2001      	movs	r0, #1
 8001204:	f004 f8b6 	bl	8005374 <LOGGER_SendFormatted>
    
    // disk_initialize 실패 시 조기 종료 (블로킹 방지)
    if (disk_status != 0) {
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00a      	beq.n	8001224 <SDStorage_Init+0x100>
        LOG_ERROR("[SDStorage] disk_initialize failed - SD card not ready");
 800120e:	4982      	ldr	r1, [pc, #520]	@ (8001418 <SDStorage_Init+0x2f4>)
 8001210:	2003      	movs	r0, #3
 8001212:	f004 f8af 	bl	8005374 <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] Possible causes: write-protected, bad card, or BSP/HAL conflict");
 8001216:	4981      	ldr	r1, [pc, #516]	@ (800141c <SDStorage_Init+0x2f8>)
 8001218:	2003      	movs	r0, #3
 800121a:	f004 f8ab 	bl	8005374 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
 8001222:	e180      	b.n	8001526 <SDStorage_Init+0x402>
    }
    
    // 2. 파일시스템 마운트 시도 (지연 마운트로 변경 - 블로킹 방지)
    LOG_INFO("[SDStorage] Using deferred mount (flag=0) to avoid blocking...");
 8001224:	497e      	ldr	r1, [pc, #504]	@ (8001420 <SDStorage_Init+0x2fc>)
 8001226:	2001      	movs	r0, #1
 8001228:	f004 f8a4 	bl	8005374 <LOGGER_SendFormatted>
    
    // f_mount 호출 전에 충분한 지연 (SD 카드 안정화)
    #ifdef STM32F746xx
    LOG_INFO("[SDStorage] Waiting for SD card stabilization (500ms)...");
 800122c:	497d      	ldr	r1, [pc, #500]	@ (8001424 <SDStorage_Init+0x300>)
 800122e:	2001      	movs	r0, #1
 8001230:	f004 f8a0 	bl	8005374 <LOGGER_SendFormatted>
    HAL_Delay(500);
 8001234:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001238:	f004 fe72 	bl	8005f20 <HAL_Delay>
    #endif
    
    // f_mount 블로킹 문제 - 완전 우회 시도
    LOG_WARN("[SDStorage] f_mount consistently blocks despite all fixes");
 800123c:	497a      	ldr	r1, [pc, #488]	@ (8001428 <SDStorage_Init+0x304>)
 800123e:	2002      	movs	r0, #2
 8001240:	f004 f898 	bl	8005374 <LOGGER_SendFormatted>
    LOG_INFO("[SDStorage] Attempting direct file operations without f_mount...");
 8001244:	4979      	ldr	r1, [pc, #484]	@ (800142c <SDStorage_Init+0x308>)
 8001246:	2001      	movs	r0, #1
 8001248:	f004 f894 	bl	8005374 <LOGGER_SendFormatted>
    LOG_INFO("[SDStorage] Some FatFs implementations support auto-mount on first file access");
 800124c:	4978      	ldr	r1, [pc, #480]	@ (8001430 <SDStorage_Init+0x30c>)
 800124e:	2001      	movs	r0, #1
 8001250:	f004 f890 	bl	8005374 <LOGGER_SendFormatted>
    
    // f_mount 여러 번 재시도 (성공 프로젝트 패턴)
    LOG_INFO("[SDStorage] Attempting f_mount with retry logic...");
 8001254:	4977      	ldr	r1, [pc, #476]	@ (8001434 <SDStorage_Init+0x310>)
 8001256:	2001      	movs	r0, #1
 8001258:	f004 f88c 	bl	8005374 <LOGGER_SendFormatted>
    FRESULT mount_result = FR_DISK_ERR;  // 초기값
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
    
    for (int retry = 0; retry < 3; retry++) {
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	e035      	b.n	80012d2 <SDStorage_Init+0x1ae>
        LOG_INFO("[SDStorage] f_mount attempt %d/3...", retry + 1);
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	3301      	adds	r3, #1
 800126a:	461a      	mov	r2, r3
 800126c:	4972      	ldr	r1, [pc, #456]	@ (8001438 <SDStorage_Init+0x314>)
 800126e:	2001      	movs	r0, #1
 8001270:	f004 f880 	bl	8005374 <LOGGER_SendFormatted>
        mount_result = f_mount(&SDFatFS, SDPath, 1);  // 즉시 마운트
 8001274:	2201      	movs	r2, #1
 8001276:	4971      	ldr	r1, [pc, #452]	@ (800143c <SDStorage_Init+0x318>)
 8001278:	4871      	ldr	r0, [pc, #452]	@ (8001440 <SDStorage_Init+0x31c>)
 800127a:	f012 fa15 	bl	80136a8 <f_mount>
 800127e:	4603      	mov	r3, r0
 8001280:	73fb      	strb	r3, [r7, #15]
        LOG_INFO("[SDStorage] f_mount result: %d", mount_result);
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	461a      	mov	r2, r3
 8001286:	496f      	ldr	r1, [pc, #444]	@ (8001444 <SDStorage_Init+0x320>)
 8001288:	2001      	movs	r0, #1
 800128a:	f004 f873 	bl	8005374 <LOGGER_SendFormatted>
        
        if (mount_result == FR_OK) {
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d107      	bne.n	80012a4 <SDStorage_Init+0x180>
            LOG_INFO("[SDStorage] ✅ f_mount successful on attempt %d", retry + 1);
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	3301      	adds	r3, #1
 8001298:	461a      	mov	r2, r3
 800129a:	496b      	ldr	r1, [pc, #428]	@ (8001448 <SDStorage_Init+0x324>)
 800129c:	2001      	movs	r0, #1
 800129e:	f004 f869 	bl	8005374 <LOGGER_SendFormatted>
            break;
 80012a2:	e019      	b.n	80012d8 <SDStorage_Init+0x1b4>
        } else {
            LOG_WARN("[SDStorage] f_mount failed on attempt %d, retrying in 1000ms...", retry + 1);
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	3301      	adds	r3, #1
 80012a8:	461a      	mov	r2, r3
 80012aa:	4968      	ldr	r1, [pc, #416]	@ (800144c <SDStorage_Init+0x328>)
 80012ac:	2002      	movs	r0, #2
 80012ae:	f004 f861 	bl	8005374 <LOGGER_SendFormatted>
            if (retry < 2) {  // 마지막 시도가 아니면 대기
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	dc09      	bgt.n	80012cc <SDStorage_Init+0x1a8>
                // STM32F7 D-Cache 클리어 (성공 프로젝트 패턴)
                LOG_INFO("[SDStorage] Clearing D-Cache for STM32F7 compatibility...");
 80012b8:	4965      	ldr	r1, [pc, #404]	@ (8001450 <SDStorage_Init+0x32c>)
 80012ba:	2001      	movs	r0, #1
 80012bc:	f004 f85a 	bl	8005374 <LOGGER_SendFormatted>
                SCB_CleanInvalidateDCache();
 80012c0:	f7ff fea6 	bl	8001010 <SCB_CleanInvalidateDCache>
                HAL_Delay(1000);
 80012c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012c8:	f004 fe2a 	bl	8005f20 <HAL_Delay>
    for (int retry = 0; retry < 3; retry++) {
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	3301      	adds	r3, #1
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	ddc6      	ble.n	8001266 <SDStorage_Init+0x142>
            }
        }
    }
    
    // 즉시 마운트 성공 시 쓰기 준비 완료
    if (mount_result == FR_OK) {
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d103      	bne.n	80012e6 <SDStorage_Init+0x1c2>
        LOG_INFO("[SDStorage] Immediate mount successful - SD ready for write operations");
 80012de:	495d      	ldr	r1, [pc, #372]	@ (8001454 <SDStorage_Init+0x330>)
 80012e0:	2001      	movs	r0, #1
 80012e2:	f004 f847 	bl	8005374 <LOGGER_SendFormatted>
    }
    
    if (mount_result != FR_OK) {
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80f8 	beq.w	80014de <SDStorage_Init+0x3ba>
        LOG_WARN("[SDStorage] f_mount failed with result: %d", mount_result);
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4959      	ldr	r1, [pc, #356]	@ (8001458 <SDStorage_Init+0x334>)
 80012f4:	2002      	movs	r0, #2
 80012f6:	f004 f83d 	bl	8005374 <LOGGER_SendFormatted>
        
        // SD 카드가 이미 포맷되어 있다면 f_mkfs 시도하지 않고 다른 접근법 사용
        if (mount_result == FR_DISK_ERR) {
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d12f      	bne.n	8001360 <SDStorage_Init+0x23c>
            LOG_WARN("[SDStorage] FR_DISK_ERR detected - SD card may be formatted but incompatible");
 8001300:	4956      	ldr	r1, [pc, #344]	@ (800145c <SDStorage_Init+0x338>)
 8001302:	2002      	movs	r0, #2
 8001304:	f004 f836 	bl	8005374 <LOGGER_SendFormatted>
            LOG_INFO("[SDStorage] Skipping f_mkfs since SD card is already FAT32 formatted");
 8001308:	4955      	ldr	r1, [pc, #340]	@ (8001460 <SDStorage_Init+0x33c>)
 800130a:	2001      	movs	r0, #1
 800130c:	f004 f832 	bl	8005374 <LOGGER_SendFormatted>
            LOG_INFO("[SDStorage] Trying alternative mount approach...");
 8001310:	4954      	ldr	r1, [pc, #336]	@ (8001464 <SDStorage_Init+0x340>)
 8001312:	2001      	movs	r0, #1
 8001314:	f004 f82e 	bl	8005374 <LOGGER_SendFormatted>
            
            // 다른 마운트 방식 시도 (지연 마운트)
            LOG_INFO("[SDStorage] Attempting deferred mount (flag=0)...");
 8001318:	4953      	ldr	r1, [pc, #332]	@ (8001468 <SDStorage_Init+0x344>)
 800131a:	2001      	movs	r0, #1
 800131c:	f004 f82a 	bl	8005374 <LOGGER_SendFormatted>
            mount_result = f_mount(&SDFatFS, SDPath, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	4946      	ldr	r1, [pc, #280]	@ (800143c <SDStorage_Init+0x318>)
 8001324:	4846      	ldr	r0, [pc, #280]	@ (8001440 <SDStorage_Init+0x31c>)
 8001326:	f012 f9bf 	bl	80136a8 <f_mount>
 800132a:	4603      	mov	r3, r0
 800132c:	73fb      	strb	r3, [r7, #15]
            LOG_INFO("[SDStorage] Deferred mount result: %d", mount_result);
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	461a      	mov	r2, r3
 8001332:	494e      	ldr	r1, [pc, #312]	@ (800146c <SDStorage_Init+0x348>)
 8001334:	2001      	movs	r0, #1
 8001336:	f004 f81d 	bl	8005374 <LOGGER_SendFormatted>
            
            if (mount_result == FR_OK) {
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d104      	bne.n	800134a <SDStorage_Init+0x226>
                LOG_INFO("[SDStorage] Deferred mount successful!");
 8001340:	494b      	ldr	r1, [pc, #300]	@ (8001470 <SDStorage_Init+0x34c>)
 8001342:	2001      	movs	r0, #1
 8001344:	f004 f816 	bl	8005374 <LOGGER_SendFormatted>
 8001348:	e0c9      	b.n	80014de <SDStorage_Init+0x3ba>
            } else {
                LOG_ERROR("[SDStorage] Both immediate and deferred mount failed");
 800134a:	494a      	ldr	r1, [pc, #296]	@ (8001474 <SDStorage_Init+0x350>)
 800134c:	2003      	movs	r0, #3
 800134e:	f004 f811 	bl	8005374 <LOGGER_SendFormatted>
                LOG_ERROR("[SDStorage] SD card may have hardware compatibility issues");
 8001352:	4949      	ldr	r1, [pc, #292]	@ (8001478 <SDStorage_Init+0x354>)
 8001354:	2003      	movs	r0, #3
 8001356:	f004 f80d 	bl	8005374 <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	e0e2      	b.n	8001526 <SDStorage_Init+0x402>
            }
        }
        else if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	2b03      	cmp	r3, #3
 8001364:	d003      	beq.n	800136e <SDStorage_Init+0x24a>
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	2b0d      	cmp	r3, #13
 800136a:	f040 80ae 	bne.w	80014ca <SDStorage_Init+0x3a6>
            // 작업 버퍼 할당 (전역 또는 스택)
            static BYTE work[_MAX_SS];
            
            // 실제 f_mkfs 시도
            LOG_INFO("[SDStorage] Attempting to create filesystem with f_mkfs...");
 800136e:	4943      	ldr	r1, [pc, #268]	@ (800147c <SDStorage_Init+0x358>)
 8001370:	2001      	movs	r0, #1
 8001372:	f003 ffff 	bl	8005374 <LOGGER_SendFormatted>
            FRESULT mkfs_result = f_mkfs(SDPath, FM_ANY, 0, work, sizeof(work));
 8001376:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	4b40      	ldr	r3, [pc, #256]	@ (8001480 <SDStorage_Init+0x35c>)
 800137e:	2200      	movs	r2, #0
 8001380:	2107      	movs	r1, #7
 8001382:	482e      	ldr	r0, [pc, #184]	@ (800143c <SDStorage_Init+0x318>)
 8001384:	f012 fe7a 	bl	801407c <f_mkfs>
 8001388:	4603      	mov	r3, r0
 800138a:	71bb      	strb	r3, [r7, #6]
            LOG_INFO("[SDStorage] f_mkfs(FM_ANY) result: %d", mkfs_result);
 800138c:	79bb      	ldrb	r3, [r7, #6]
 800138e:	461a      	mov	r2, r3
 8001390:	493c      	ldr	r1, [pc, #240]	@ (8001484 <SDStorage_Init+0x360>)
 8001392:	2001      	movs	r0, #1
 8001394:	f003 ffee 	bl	8005374 <LOGGER_SendFormatted>
            
            if (mkfs_result != FR_OK) {
 8001398:	79bb      	ldrb	r3, [r7, #6]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d07c      	beq.n	8001498 <SDStorage_Init+0x374>
                // FAT32로 다시 시도
                LOG_INFO("[SDStorage] Retrying with explicit FAT32 format...");
 800139e:	493a      	ldr	r1, [pc, #232]	@ (8001488 <SDStorage_Init+0x364>)
 80013a0:	2001      	movs	r0, #1
 80013a2:	f003 ffe7 	bl	8005374 <LOGGER_SendFormatted>
                mkfs_result = f_mkfs(SDPath, FM_FAT32, 4096, work, sizeof(work));
 80013a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	4b34      	ldr	r3, [pc, #208]	@ (8001480 <SDStorage_Init+0x35c>)
 80013ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013b2:	2102      	movs	r1, #2
 80013b4:	4821      	ldr	r0, [pc, #132]	@ (800143c <SDStorage_Init+0x318>)
 80013b6:	f012 fe61 	bl	801407c <f_mkfs>
 80013ba:	4603      	mov	r3, r0
 80013bc:	71bb      	strb	r3, [r7, #6]
                LOG_INFO("[SDStorage] f_mkfs(FM_FAT32) result: %d", mkfs_result);
 80013be:	79bb      	ldrb	r3, [r7, #6]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4932      	ldr	r1, [pc, #200]	@ (800148c <SDStorage_Init+0x368>)
 80013c4:	2001      	movs	r0, #1
 80013c6:	f003 ffd5 	bl	8005374 <LOGGER_SendFormatted>
                
                if (mkfs_result != FR_OK) {
 80013ca:	79bb      	ldrb	r3, [r7, #6]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d063      	beq.n	8001498 <SDStorage_Init+0x374>
                    LOG_ERROR("[SDStorage] File system creation failed: %d", mkfs_result);
 80013d0:	79bb      	ldrb	r3, [r7, #6]
 80013d2:	461a      	mov	r2, r3
 80013d4:	492e      	ldr	r1, [pc, #184]	@ (8001490 <SDStorage_Init+0x36c>)
 80013d6:	2003      	movs	r0, #3
 80013d8:	f003 ffcc 	bl	8005374 <LOGGER_SendFormatted>
                    LOG_ERROR("[SDStorage] Possible SD card hardware issue - try different card");
 80013dc:	492d      	ldr	r1, [pc, #180]	@ (8001494 <SDStorage_Init+0x370>)
 80013de:	2003      	movs	r0, #3
 80013e0:	f003 ffc8 	bl	8005374 <LOGGER_SendFormatted>
                    return SDSTORAGE_ERROR;
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
 80013e8:	e09d      	b.n	8001526 <SDStorage_Init+0x402>
 80013ea:	bf00      	nop
 80013ec:	08018efc 	.word	0x08018efc
 80013f0:	20001d50 	.word	0x20001d50
 80013f4:	08018f2c 	.word	0x08018f2c
 80013f8:	08018f54 	.word	0x08018f54
 80013fc:	08018f94 	.word	0x08018f94
 8001400:	08018fd0 	.word	0x08018fd0
 8001404:	08019000 	.word	0x08019000
 8001408:	0801903c 	.word	0x0801903c
 800140c:	08019074 	.word	0x08019074
 8001410:	080190b8 	.word	0x080190b8
 8001414:	080190dc 	.word	0x080190dc
 8001418:	08019108 	.word	0x08019108
 800141c:	08019140 	.word	0x08019140
 8001420:	0801918c 	.word	0x0801918c
 8001424:	080191cc 	.word	0x080191cc
 8001428:	08019208 	.word	0x08019208
 800142c:	08019244 	.word	0x08019244
 8001430:	08019288 	.word	0x08019288
 8001434:	080192d8 	.word	0x080192d8
 8001438:	0801930c 	.word	0x0801930c
 800143c:	2000268c 	.word	0x2000268c
 8001440:	20002690 	.word	0x20002690
 8001444:	08019330 	.word	0x08019330
 8001448:	08019350 	.word	0x08019350
 800144c:	08019384 	.word	0x08019384
 8001450:	080193c4 	.word	0x080193c4
 8001454:	08019400 	.word	0x08019400
 8001458:	08019448 	.word	0x08019448
 800145c:	08019474 	.word	0x08019474
 8001460:	080194c4 	.word	0x080194c4
 8001464:	0801950c 	.word	0x0801950c
 8001468:	08019540 	.word	0x08019540
 800146c:	08019574 	.word	0x08019574
 8001470:	0801959c 	.word	0x0801959c
 8001474:	080195c4 	.word	0x080195c4
 8001478:	080195fc 	.word	0x080195fc
 800147c:	08019638 	.word	0x08019638
 8001480:	2000044c 	.word	0x2000044c
 8001484:	08019674 	.word	0x08019674
 8001488:	0801969c 	.word	0x0801969c
 800148c:	080196d0 	.word	0x080196d0
 8001490:	080196f8 	.word	0x080196f8
 8001494:	08019724 	.word	0x08019724
                }
            }
            
            // 파일시스템 생성 후 재마운트 시도
            mount_result = f_mount(&SDFatFS, SDPath, 1);
 8001498:	2201      	movs	r2, #1
 800149a:	4925      	ldr	r1, [pc, #148]	@ (8001530 <SDStorage_Init+0x40c>)
 800149c:	4825      	ldr	r0, [pc, #148]	@ (8001534 <SDStorage_Init+0x410>)
 800149e:	f012 f903 	bl	80136a8 <f_mount>
 80014a2:	4603      	mov	r3, r0
 80014a4:	73fb      	strb	r3, [r7, #15]
            LOG_INFO("[SDStorage] Re-mount after mkfs result: %d", mount_result);
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4923      	ldr	r1, [pc, #140]	@ (8001538 <SDStorage_Init+0x414>)
 80014ac:	2001      	movs	r0, #1
 80014ae:	f003 ff61 	bl	8005374 <LOGGER_SendFormatted>
            
            if (mount_result != FR_OK) {
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d011      	beq.n	80014dc <SDStorage_Init+0x3b8>
                LOG_ERROR("[SDStorage] Re-mount failed after mkfs: %d", mount_result);
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	461a      	mov	r2, r3
 80014bc:	491f      	ldr	r1, [pc, #124]	@ (800153c <SDStorage_Init+0x418>)
 80014be:	2003      	movs	r0, #3
 80014c0:	f003 ff58 	bl	8005374 <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295
 80014c8:	e02d      	b.n	8001526 <SDStorage_Init+0x402>
            }
        } else {
            LOG_ERROR("[SDStorage] Mount failed with unrecoverable error: %d", mount_result);
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	461a      	mov	r2, r3
 80014ce:	491c      	ldr	r1, [pc, #112]	@ (8001540 <SDStorage_Init+0x41c>)
 80014d0:	2003      	movs	r0, #3
 80014d2:	f003 ff4f 	bl	8005374 <LOGGER_SendFormatted>
            return SDSTORAGE_ERROR;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	e024      	b.n	8001526 <SDStorage_Init+0x402>
        else if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 80014dc:	bf00      	nop
        }
    }
    
    LOG_INFO("[SDStorage] File system mount successful");
 80014de:	4919      	ldr	r1, [pc, #100]	@ (8001544 <SDStorage_Init+0x420>)
 80014e0:	2001      	movs	r0, #1
 80014e2:	f003 ff47 	bl	8005374 <LOGGER_SendFormatted>
#endif

    // FatFs 마운트 성공 확인됨
    
    // 디렉토리 생성 시도
    LOG_INFO("[SDStorage] Creating log directory...");
 80014e6:	4918      	ldr	r1, [pc, #96]	@ (8001548 <SDStorage_Init+0x424>)
 80014e8:	2001      	movs	r0, #1
 80014ea:	f003 ff43 	bl	8005374 <LOGGER_SendFormatted>
    int dir_result = _create_log_directory();
 80014ee:	f000 fb51 	bl	8001b94 <_create_log_directory>
 80014f2:	6038      	str	r0, [r7, #0]
    g_directory_available = (dir_result == SDSTORAGE_OK);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	bf0c      	ite	eq
 80014fa:	2301      	moveq	r3, #1
 80014fc:	2300      	movne	r3, #0
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <SDStorage_Init+0x428>)
 8001502:	701a      	strb	r2, [r3, #0]
    
    g_sd_ready = true;
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <SDStorage_Init+0x42c>)
 8001506:	2201      	movs	r2, #1
 8001508:	701a      	strb	r2, [r3, #0]
    g_current_log_size = 0;
 800150a:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <SDStorage_Init+0x430>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
    memset(g_current_log_file, 0, sizeof(g_current_log_file));
 8001510:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001514:	2100      	movs	r1, #0
 8001516:	4810      	ldr	r0, [pc, #64]	@ (8001558 <SDStorage_Init+0x434>)
 8001518:	f016 f8ce 	bl	80176b8 <memset>
    
    LOG_INFO("[SDStorage] Initialization completed successfully");
 800151c:	490f      	ldr	r1, [pc, #60]	@ (800155c <SDStorage_Init+0x438>)
 800151e:	2001      	movs	r0, #1
 8001520:	f003 ff28 	bl	8005374 <LOGGER_SendFormatted>
    return SDSTORAGE_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000268c 	.word	0x2000268c
 8001534:	20002690 	.word	0x20002690
 8001538:	08019768 	.word	0x08019768
 800153c:	08019794 	.word	0x08019794
 8001540:	080197c0 	.word	0x080197c0
 8001544:	080197f8 	.word	0x080197f8
 8001548:	08019824 	.word	0x08019824
 800154c:	20000344 	.word	0x20000344
 8001550:	2000023c 	.word	0x2000023c
 8001554:	20000340 	.word	0x20000340
 8001558:	20000240 	.word	0x20000240
 800155c:	0801984c 	.word	0x0801984c

08001560 <SDStorage_WriteLog>:

int SDStorage_WriteLog(const void* data, size_t size)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	f5ad 6d8b 	sub.w	sp, sp, #1112	@ 0x458
 8001566:	af02      	add	r7, sp, #8
 8001568:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800156c:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8001570:	6018      	str	r0, [r3, #0]
 8001572:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001576:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 800157a:	6019      	str	r1, [r3, #0]
    if (!g_sd_ready) {
 800157c:	4b90      	ldr	r3, [pc, #576]	@ (80017c0 <SDStorage_WriteLog+0x260>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	f083 0301 	eor.w	r3, r3, #1
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <SDStorage_WriteLog+0x30>
        return SDSTORAGE_NOT_READY;
 800158a:	f06f 0301 	mvn.w	r3, #1
 800158e:	e23c      	b.n	8001a0a <SDStorage_WriteLog+0x4aa>
    }
    
    if (data == NULL || size == 0) {
 8001590:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001594:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d006      	beq.n	80015ac <SDStorage_WriteLog+0x4c>
 800159e:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80015a2:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <SDStorage_WriteLog+0x52>
        return SDSTORAGE_INVALID_PARAM;
 80015ac:	f06f 0304 	mvn.w	r3, #4
 80015b0:	e22b      	b.n	8001a0a <SDStorage_WriteLog+0x4aa>
    }
    
    // 새 로그 파일이 필요한 경우 생성
    if (strlen(g_current_log_file) == 0 || 
 80015b2:	4b84      	ldr	r3, [pc, #528]	@ (80017c4 <SDStorage_WriteLog+0x264>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00a      	beq.n	80015d0 <SDStorage_WriteLog+0x70>
        g_current_log_size + size > SDSTORAGE_MAX_LOG_SIZE) {
 80015ba:	4b83      	ldr	r3, [pc, #524]	@ (80017c8 <SDStorage_WriteLog+0x268>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80015c2:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4413      	add	r3, r2
    if (strlen(g_current_log_file) == 0 || 
 80015ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80015ce:	d907      	bls.n	80015e0 <SDStorage_WriteLog+0x80>
        if (SDStorage_CreateNewLogFile() != SDSTORAGE_OK) {
 80015d0:	f000 fa3a 	bl	8001a48 <SDStorage_CreateNewLogFile>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <SDStorage_WriteLog+0x80>
            return SDSTORAGE_FILE_ERROR;
 80015da:	f06f 0302 	mvn.w	r3, #2
 80015de:	e214      	b.n	8001a0a <SDStorage_WriteLog+0x4aa>

#ifdef STM32F746xx
    // STM32 환경: 안정적인 열기-쓰기-닫기 방식
    
    // 로그 파일명이 없으면 생성
    if (strlen(g_current_log_file) == 0) {
 80015e0:	4b78      	ldr	r3, [pc, #480]	@ (80017c4 <SDStorage_WriteLog+0x264>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d10e      	bne.n	8001606 <SDStorage_WriteLog+0xa6>
        if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 80015e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015ec:	4875      	ldr	r0, [pc, #468]	@ (80017c4 <SDStorage_WriteLog+0x264>)
 80015ee:	f000 fb33 	bl	8001c58 <_generate_log_filename>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d006      	beq.n	8001606 <SDStorage_WriteLog+0xa6>
            LOG_ERROR("[SDStorage] Failed to generate log filename");
 80015f8:	4974      	ldr	r1, [pc, #464]	@ (80017cc <SDStorage_WriteLog+0x26c>)
 80015fa:	2003      	movs	r0, #3
 80015fc:	f003 feba 	bl	8005374 <LOGGER_SendFormatted>
            return SDSTORAGE_ERROR;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
 8001604:	e201      	b.n	8001a0a <SDStorage_WriteLog+0x4aa>
        }
    }
    
    // SD 카드 상태 변화에 robust한 방식: 매번 열고 닫기
    FIL temp_file;
    memset(&temp_file, 0, sizeof(temp_file));
 8001606:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 800160a:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f016 f851 	bl	80176b8 <memset>
    
    // 파일 닫기 보장: 이전에 열린 파일이 있으면 강제로 닫기
    _ensure_file_closed();
 8001616:	f7ff fd37 	bl	8001088 <_ensure_file_closed>
    
    // 성공 프로젝트 방식: 디스크 상태 먼저 확인
    DSTATUS current_disk_stat = disk_status(0);
 800161a:	2000      	movs	r0, #0
 800161c:	f010 fc7a 	bl	8011f14 <disk_status>
 8001620:	4603      	mov	r3, r0
 8001622:	f887 344e 	strb.w	r3, [r7, #1102]	@ 0x44e
    if (current_disk_stat != 0) {
 8001626:	f897 344e 	ldrb.w	r3, [r7, #1102]	@ 0x44e
 800162a:	2b00      	cmp	r3, #0
 800162c:	d01a      	beq.n	8001664 <SDStorage_WriteLog+0x104>
        LOG_WARN("[SDStorage] Disk not ready (%d), reinitializing...", current_disk_stat);
 800162e:	f897 344e 	ldrb.w	r3, [r7, #1102]	@ 0x44e
 8001632:	461a      	mov	r2, r3
 8001634:	4966      	ldr	r1, [pc, #408]	@ (80017d0 <SDStorage_WriteLog+0x270>)
 8001636:	2002      	movs	r0, #2
 8001638:	f003 fe9c 	bl	8005374 <LOGGER_SendFormatted>
        DSTATUS init_result = disk_initialize(0);
 800163c:	2000      	movs	r0, #0
 800163e:	f010 fc83 	bl	8011f48 <disk_initialize>
 8001642:	4603      	mov	r3, r0
 8001644:	f887 344d 	strb.w	r3, [r7, #1101]	@ 0x44d
        if (init_result != 0) {
 8001648:	f897 344d 	ldrb.w	r3, [r7, #1101]	@ 0x44d
 800164c:	2b00      	cmp	r3, #0
 800164e:	d009      	beq.n	8001664 <SDStorage_WriteLog+0x104>
            LOG_ERROR("[SDStorage] Disk reinitialization failed: %d", init_result);
 8001650:	f897 344d 	ldrb.w	r3, [r7, #1101]	@ 0x44d
 8001654:	461a      	mov	r2, r3
 8001656:	495f      	ldr	r1, [pc, #380]	@ (80017d4 <SDStorage_WriteLog+0x274>)
 8001658:	2003      	movs	r0, #3
 800165a:	f003 fe8b 	bl	8005374 <LOGGER_SendFormatted>
            return SDSTORAGE_NOT_READY;
 800165e:	f06f 0301 	mvn.w	r3, #1
 8001662:	e1d2      	b.n	8001a0a <SDStorage_WriteLog+0x4aa>
        }
    }
    
    // 파일 열기 (성공 프로젝트 방식: 단계적 시도)
    FRESULT open_result = f_open(&temp_file, g_current_log_file, FA_OPEN_APPEND | FA_WRITE);
 8001664:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001668:	2232      	movs	r2, #50	@ 0x32
 800166a:	4956      	ldr	r1, [pc, #344]	@ (80017c4 <SDStorage_WriteLog+0x264>)
 800166c:	4618      	mov	r0, r3
 800166e:	f012 f85f 	bl	8013730 <f_open>
 8001672:	4603      	mov	r3, r0
 8001674:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f
    
    // 파일 열기 성공 시 추적 등록
    if (open_result == FR_OK) {
 8001678:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 800167c:	2b00      	cmp	r3, #0
 800167e:	d10a      	bne.n	8001696 <SDStorage_WriteLog+0x136>
        _register_file_opened(&temp_file, g_current_log_file);
 8001680:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001684:	494f      	ldr	r1, [pc, #316]	@ (80017c4 <SDStorage_WriteLog+0x264>)
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fd20 	bl	80010cc <_register_file_opened>
        LOG_DEBUG("[SDStorage] File opened and registered: %s", g_current_log_file);
 800168c:	4a4d      	ldr	r2, [pc, #308]	@ (80017c4 <SDStorage_WriteLog+0x264>)
 800168e:	4952      	ldr	r1, [pc, #328]	@ (80017d8 <SDStorage_WriteLog+0x278>)
 8001690:	2000      	movs	r0, #0
 8001692:	f003 fe6f 	bl	8005374 <LOGGER_SendFormatted>
    }
    
    // f_open 실패 시 성공 프로젝트 방식의 복구 로직
    if (open_result != FR_OK) {
 8001696:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 80b0 	beq.w	8001800 <SDStorage_WriteLog+0x2a0>
        LOG_WARN("[SDStorage] f_open failed (%d), trying recovery...", open_result);
 80016a0:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 80016a4:	461a      	mov	r2, r3
 80016a6:	494d      	ldr	r1, [pc, #308]	@ (80017dc <SDStorage_WriteLog+0x27c>)
 80016a8:	2002      	movs	r0, #2
 80016aa:	f003 fe63 	bl	8005374 <LOGGER_SendFormatted>
        
        // 1단계: 마운트 재시도
        f_mount(NULL, SDPath, 0);  // 언마운트
 80016ae:	2200      	movs	r2, #0
 80016b0:	494b      	ldr	r1, [pc, #300]	@ (80017e0 <SDStorage_WriteLog+0x280>)
 80016b2:	2000      	movs	r0, #0
 80016b4:	f011 fff8 	bl	80136a8 <f_mount>
        HAL_Delay(200);
 80016b8:	20c8      	movs	r0, #200	@ 0xc8
 80016ba:	f004 fc31 	bl	8005f20 <HAL_Delay>
        FRESULT remount_result = f_mount(&SDFatFS, SDPath, 1);  // 강제 재마운트
 80016be:	2201      	movs	r2, #1
 80016c0:	4947      	ldr	r1, [pc, #284]	@ (80017e0 <SDStorage_WriteLog+0x280>)
 80016c2:	4848      	ldr	r0, [pc, #288]	@ (80017e4 <SDStorage_WriteLog+0x284>)
 80016c4:	f011 fff0 	bl	80136a8 <f_mount>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f887 344c 	strb.w	r3, [r7, #1100]	@ 0x44c
        
        if (remount_result == FR_OK) {
 80016ce:	f897 344c 	ldrb.w	r3, [r7, #1100]	@ 0x44c
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d117      	bne.n	8001706 <SDStorage_WriteLog+0x1a6>
            // 재마운트 성공 후 다시 파일 열기 시도
            open_result = f_open(&temp_file, g_current_log_file, FA_OPEN_APPEND | FA_WRITE);
 80016d6:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 80016da:	2232      	movs	r2, #50	@ 0x32
 80016dc:	4939      	ldr	r1, [pc, #228]	@ (80017c4 <SDStorage_WriteLog+0x264>)
 80016de:	4618      	mov	r0, r3
 80016e0:	f012 f826 	bl	8013730 <f_open>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f
            if (open_result == FR_OK) {
 80016ea:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d109      	bne.n	8001706 <SDStorage_WriteLog+0x1a6>
                _register_file_opened(&temp_file, g_current_log_file);
 80016f2:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 80016f6:	4933      	ldr	r1, [pc, #204]	@ (80017c4 <SDStorage_WriteLog+0x264>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fce7 	bl	80010cc <_register_file_opened>
                LOG_INFO("[SDStorage] File opened after remount recovery");
 80016fe:	493a      	ldr	r1, [pc, #232]	@ (80017e8 <SDStorage_WriteLog+0x288>)
 8001700:	2001      	movs	r0, #1
 8001702:	f003 fe37 	bl	8005374 <LOGGER_SendFormatted>
            }
        }
        
        // 2단계: 여전히 실패하면 f_mkfs 시도
        if (open_result != FR_OK) {
 8001706:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 800170a:	2b00      	cmp	r3, #0
 800170c:	d049      	beq.n	80017a2 <SDStorage_WriteLog+0x242>
            LOG_WARN("[SDStorage] File still failed, trying f_mkfs recovery...");
 800170e:	4937      	ldr	r1, [pc, #220]	@ (80017ec <SDStorage_WriteLog+0x28c>)
 8001710:	2002      	movs	r0, #2
 8001712:	f003 fe2f 	bl	8005374 <LOGGER_SendFormatted>
            static BYTE work[4096];
            FRESULT mkfs_result = f_mkfs(SDPath, FM_ANY, 0, work, sizeof(work));
 8001716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	4b34      	ldr	r3, [pc, #208]	@ (80017f0 <SDStorage_WriteLog+0x290>)
 800171e:	2200      	movs	r2, #0
 8001720:	2107      	movs	r1, #7
 8001722:	482f      	ldr	r0, [pc, #188]	@ (80017e0 <SDStorage_WriteLog+0x280>)
 8001724:	f012 fcaa 	bl	801407c <f_mkfs>
 8001728:	4603      	mov	r3, r0
 800172a:	f887 344b 	strb.w	r3, [r7, #1099]	@ 0x44b
            
            if (mkfs_result == FR_OK) {
 800172e:	f897 344b 	ldrb.w	r3, [r7, #1099]	@ 0x44b
 8001732:	2b00      	cmp	r3, #0
 8001734:	d135      	bne.n	80017a2 <SDStorage_WriteLog+0x242>
                LOG_INFO("[SDStorage] f_mkfs successful, remounting...");
 8001736:	492f      	ldr	r1, [pc, #188]	@ (80017f4 <SDStorage_WriteLog+0x294>)
 8001738:	2001      	movs	r0, #1
 800173a:	f003 fe1b 	bl	8005374 <LOGGER_SendFormatted>
                f_mount(NULL, SDPath, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	4927      	ldr	r1, [pc, #156]	@ (80017e0 <SDStorage_WriteLog+0x280>)
 8001742:	2000      	movs	r0, #0
 8001744:	f011 ffb0 	bl	80136a8 <f_mount>
                HAL_Delay(500);
 8001748:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800174c:	f004 fbe8 	bl	8005f20 <HAL_Delay>
                remount_result = f_mount(&SDFatFS, SDPath, 1);
 8001750:	2201      	movs	r2, #1
 8001752:	4923      	ldr	r1, [pc, #140]	@ (80017e0 <SDStorage_WriteLog+0x280>)
 8001754:	4823      	ldr	r0, [pc, #140]	@ (80017e4 <SDStorage_WriteLog+0x284>)
 8001756:	f011 ffa7 	bl	80136a8 <f_mount>
 800175a:	4603      	mov	r3, r0
 800175c:	f887 344c 	strb.w	r3, [r7, #1100]	@ 0x44c
                
                if (remount_result == FR_OK) {
 8001760:	f897 344c 	ldrb.w	r3, [r7, #1100]	@ 0x44c
 8001764:	2b00      	cmp	r3, #0
 8001766:	d11c      	bne.n	80017a2 <SDStorage_WriteLog+0x242>
                    // 파일명 재생성 (mkfs 후 파일이 사라졌으므로)
                    _generate_log_filename(g_current_log_file, sizeof(g_current_log_file));
 8001768:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800176c:	4815      	ldr	r0, [pc, #84]	@ (80017c4 <SDStorage_WriteLog+0x264>)
 800176e:	f000 fa73 	bl	8001c58 <_generate_log_filename>
                    open_result = f_open(&temp_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 8001772:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001776:	220a      	movs	r2, #10
 8001778:	4912      	ldr	r1, [pc, #72]	@ (80017c4 <SDStorage_WriteLog+0x264>)
 800177a:	4618      	mov	r0, r3
 800177c:	f011 ffd8 	bl	8013730 <f_open>
 8001780:	4603      	mov	r3, r0
 8001782:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f
                    if (open_result == FR_OK) {
 8001786:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <SDStorage_WriteLog+0x242>
                        _register_file_opened(&temp_file, g_current_log_file);
 800178e:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001792:	490c      	ldr	r1, [pc, #48]	@ (80017c4 <SDStorage_WriteLog+0x264>)
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fc99 	bl	80010cc <_register_file_opened>
                        LOG_INFO("[SDStorage] File created after f_mkfs recovery");
 800179a:	4917      	ldr	r1, [pc, #92]	@ (80017f8 <SDStorage_WriteLog+0x298>)
 800179c:	2001      	movs	r0, #1
 800179e:	f003 fde9 	bl	8005374 <LOGGER_SendFormatted>
                }
            }
        }
        
        // 모든 복구 시도 실패
        if (open_result != FR_OK) {
 80017a2:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d02a      	beq.n	8001800 <SDStorage_WriteLog+0x2a0>
            LOG_ERROR("[SDStorage] All recovery attempts failed: %d", open_result);
 80017aa:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 80017ae:	461a      	mov	r2, r3
 80017b0:	4912      	ldr	r1, [pc, #72]	@ (80017fc <SDStorage_WriteLog+0x29c>)
 80017b2:	2003      	movs	r0, #3
 80017b4:	f003 fdde 	bl	8005374 <LOGGER_SendFormatted>
            return SDSTORAGE_FILE_ERROR;
 80017b8:	f06f 0302 	mvn.w	r3, #2
 80017bc:	e125      	b.n	8001a0a <SDStorage_WriteLog+0x4aa>
 80017be:	bf00      	nop
 80017c0:	2000023c 	.word	0x2000023c
 80017c4:	20000240 	.word	0x20000240
 80017c8:	20000340 	.word	0x20000340
 80017cc:	08019880 	.word	0x08019880
 80017d0:	080198ac 	.word	0x080198ac
 80017d4:	080198e0 	.word	0x080198e0
 80017d8:	08019910 	.word	0x08019910
 80017dc:	0801993c 	.word	0x0801993c
 80017e0:	2000268c 	.word	0x2000268c
 80017e4:	20002690 	.word	0x20002690
 80017e8:	08019970 	.word	0x08019970
 80017ec:	080199a0 	.word	0x080199a0
 80017f0:	2000064c 	.word	0x2000064c
 80017f4:	080199dc 	.word	0x080199dc
 80017f8:	08019a0c 	.word	0x08019a0c
 80017fc:	08019a3c 	.word	0x08019a3c
        }
    }
    
    if (open_result == FR_OK) {
 8001800:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001804:	2b00      	cmp	r3, #0
 8001806:	f040 80df 	bne.w	80019c8 <SDStorage_WriteLog+0x468>
        // FA_OPEN_APPEND 사용 시 자동으로 파일 끝에 위치
        
        // 원본 데이터 + 줄바꿈을 함께 쓰기 (FR_INVALID_OBJECT 방지)
        char write_buffer[512];  // 충분한 버퍼 크기
        UINT total_bytes_to_write = size + 2;  // 원본 데이터 + \r\n
 800180a:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800180e:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3302      	adds	r3, #2
 8001816:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
        
        if (size + 2 < sizeof(write_buffer)) {
 800181a:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800181e:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3302      	adds	r3, #2
 8001826:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800182a:	d273      	bcs.n	8001914 <SDStorage_WriteLog+0x3b4>
            // 원본 데이터 복사
            memcpy(write_buffer, data, size);
 800182c:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001830:	f5a3 628a 	sub.w	r2, r3, #1104	@ 0x450
 8001834:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001838:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800183c:	f107 000c 	add.w	r0, r7, #12
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	6819      	ldr	r1, [r3, #0]
 8001844:	f015 ffed 	bl	8017822 <memcpy>
            // 줄바꿈 추가
            write_buffer[size] = '\r';
 8001848:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800184c:	f2a3 4244 	subw	r2, r3, #1092	@ 0x444
 8001850:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001854:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4413      	add	r3, r2
 800185c:	220d      	movs	r2, #13
 800185e:	701a      	strb	r2, [r3, #0]
            write_buffer[size + 1] = '\n';
 8001860:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001864:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	3301      	adds	r3, #1
 800186c:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 8001870:	f2a2 4244 	subw	r2, r2, #1092	@ 0x444
 8001874:	210a      	movs	r1, #10
 8001876:	54d1      	strb	r1, [r2, r3]
            
            // 한 번에 쓰기
            UINT bytes_written;
            FRESULT write_result = f_write(&temp_file, write_buffer, total_bytes_to_write, &bytes_written);
 8001878:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800187c:	f107 010c 	add.w	r1, r7, #12
 8001880:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 8001884:	f8d7 2444 	ldr.w	r2, [r7, #1092]	@ 0x444
 8001888:	f012 f8dd 	bl	8013a46 <f_write>
 800188c:	4603      	mov	r3, r0
 800188e:	f887 3442 	strb.w	r3, [r7, #1090]	@ 0x442
            
            // 즉시 동기화 및 닫기
            f_sync(&temp_file);
 8001892:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001896:	4618      	mov	r0, r3
 8001898:	f012 fa4a 	bl	8013d30 <f_sync>
            f_close(&temp_file);
 800189c:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 80018a0:	4618      	mov	r0, r3
 80018a2:	f012 fac3 	bl	8013e2c <f_close>
            _register_file_closed();  // 추적 해제
 80018a6:	f7ff fc2b 	bl	8001100 <_register_file_closed>
            
            if (write_result == FR_OK && bytes_written == total_bytes_to_write) {
 80018aa:	f897 3442 	ldrb.w	r3, [r7, #1090]	@ 0x442
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d11e      	bne.n	80018f0 <SDStorage_WriteLog+0x390>
 80018b2:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80018b6:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f8d7 2444 	ldr.w	r2, [r7, #1092]	@ 0x444
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d115      	bne.n	80018f0 <SDStorage_WriteLog+0x390>
                g_current_log_size += bytes_written;
 80018c4:	4b53      	ldr	r3, [pc, #332]	@ (8001a14 <SDStorage_WriteLog+0x4b4>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80018cc:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	4a4f      	ldr	r2, [pc, #316]	@ (8001a14 <SDStorage_WriteLog+0x4b4>)
 80018d6:	6013      	str	r3, [r2, #0]
                LOG_DEBUG("[SDStorage] Log written successfully: %d bytes (including CRLF)", bytes_written);
 80018d8:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80018dc:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	494c      	ldr	r1, [pc, #304]	@ (8001a18 <SDStorage_WriteLog+0x4b8>)
 80018e6:	2000      	movs	r0, #0
 80018e8:	f003 fd44 	bl	8005374 <LOGGER_SendFormatted>
                return SDSTORAGE_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	e08c      	b.n	8001a0a <SDStorage_WriteLog+0x4aa>
            } else {
                LOG_ERROR("[SDStorage] f_write failed: %d, written: %d/%d", write_result, bytes_written, total_bytes_to_write);
 80018f0:	f897 2442 	ldrb.w	r2, [r7, #1090]	@ 0x442
 80018f4:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80018f8:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80018fc:	6819      	ldr	r1, [r3, #0]
 80018fe:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	460b      	mov	r3, r1
 8001906:	4945      	ldr	r1, [pc, #276]	@ (8001a1c <SDStorage_WriteLog+0x4bc>)
 8001908:	2003      	movs	r0, #3
 800190a:	f003 fd33 	bl	8005374 <LOGGER_SendFormatted>
                return SDSTORAGE_FILE_ERROR;
 800190e:	f06f 0302 	mvn.w	r3, #2
 8001912:	e07a      	b.n	8001a0a <SDStorage_WriteLog+0x4aa>
            }
        } else {
            // 버퍼 크기 초과 - 원본 데이터만 쓰기
            UINT bytes_written;
            FRESULT write_result = f_write(&temp_file, data, size, &bytes_written);
 8001914:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8001918:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 800191c:	f5a2 628a 	sub.w	r2, r2, #1104	@ 0x450
 8001920:	f507 618a 	add.w	r1, r7, #1104	@ 0x450
 8001924:	f2a1 414c 	subw	r1, r1, #1100	@ 0x44c
 8001928:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 800192c:	6812      	ldr	r2, [r2, #0]
 800192e:	6809      	ldr	r1, [r1, #0]
 8001930:	f012 f889 	bl	8013a46 <f_write>
 8001934:	4603      	mov	r3, r0
 8001936:	f887 3443 	strb.w	r3, [r7, #1091]	@ 0x443
            
            // 즉시 동기화 및 닫기
            f_sync(&temp_file);
 800193a:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 800193e:	4618      	mov	r0, r3
 8001940:	f012 f9f6 	bl	8013d30 <f_sync>
            f_close(&temp_file);
 8001944:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001948:	4618      	mov	r0, r3
 800194a:	f012 fa6f 	bl	8013e2c <f_close>
            _register_file_closed();  // 추적 해제
 800194e:	f7ff fbd7 	bl	8001100 <_register_file_closed>
            
            if (write_result == FR_OK && bytes_written == size) {
 8001952:	f897 3443 	ldrb.w	r3, [r7, #1091]	@ 0x443
 8001956:	2b00      	cmp	r3, #0
 8001958:	d121      	bne.n	800199e <SDStorage_WriteLog+0x43e>
 800195a:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800195e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 8001968:	f5a2 628a 	sub.w	r2, r2, #1104	@ 0x450
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d115      	bne.n	800199e <SDStorage_WriteLog+0x43e>
                g_current_log_size += bytes_written;
 8001972:	4b28      	ldr	r3, [pc, #160]	@ (8001a14 <SDStorage_WriteLog+0x4b4>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800197a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4413      	add	r3, r2
 8001982:	4a24      	ldr	r2, [pc, #144]	@ (8001a14 <SDStorage_WriteLog+0x4b4>)
 8001984:	6013      	str	r3, [r2, #0]
                LOG_DEBUG("[SDStorage] Log written successfully: %d bytes (no CRLF due to size)", bytes_written);
 8001986:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800198a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4923      	ldr	r1, [pc, #140]	@ (8001a20 <SDStorage_WriteLog+0x4c0>)
 8001994:	2000      	movs	r0, #0
 8001996:	f003 fced 	bl	8005374 <LOGGER_SendFormatted>
                return SDSTORAGE_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	e035      	b.n	8001a0a <SDStorage_WriteLog+0x4aa>
            } else {
                LOG_ERROR("[SDStorage] f_write failed: %d, written: %d/%d", write_result, bytes_written, size);
 800199e:	f897 2443 	ldrb.w	r2, [r7, #1091]	@ 0x443
 80019a2:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80019a6:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80019aa:	6819      	ldr	r1, [r3, #0]
 80019ac:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80019b0:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	460b      	mov	r3, r1
 80019ba:	4918      	ldr	r1, [pc, #96]	@ (8001a1c <SDStorage_WriteLog+0x4bc>)
 80019bc:	2003      	movs	r0, #3
 80019be:	f003 fcd9 	bl	8005374 <LOGGER_SendFormatted>
                return SDSTORAGE_FILE_ERROR;
 80019c2:	f06f 0302 	mvn.w	r3, #2
 80019c6:	e020      	b.n	8001a0a <SDStorage_WriteLog+0x4aa>
            }
        }
    } else {
        LOG_ERROR("[SDStorage] f_open failed: %d - SD card state may have changed", open_result);
 80019c8:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 80019cc:	461a      	mov	r2, r3
 80019ce:	4915      	ldr	r1, [pc, #84]	@ (8001a24 <SDStorage_WriteLog+0x4c4>)
 80019d0:	2003      	movs	r0, #3
 80019d2:	f003 fccf 	bl	8005374 <LOGGER_SendFormatted>
        
        // SD 카드 상태 재확인
        DSTATUS current_status = disk_status(0);
 80019d6:	2000      	movs	r0, #0
 80019d8:	f010 fa9c 	bl	8011f14 <disk_status>
 80019dc:	4603      	mov	r3, r0
 80019de:	f887 344a 	strb.w	r3, [r7, #1098]	@ 0x44a
        LOG_WARN("[SDStorage] Current disk status: 0x%02X", current_status);
 80019e2:	f897 344a 	ldrb.w	r3, [r7, #1098]	@ 0x44a
 80019e6:	461a      	mov	r2, r3
 80019e8:	490f      	ldr	r1, [pc, #60]	@ (8001a28 <SDStorage_WriteLog+0x4c8>)
 80019ea:	2002      	movs	r0, #2
 80019ec:	f003 fcc2 	bl	8005374 <LOGGER_SendFormatted>
        
        if (current_status != 0) {
 80019f0:	f897 344a 	ldrb.w	r3, [r7, #1098]	@ 0x44a
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d006      	beq.n	8001a06 <SDStorage_WriteLog+0x4a6>
            LOG_WARN("[SDStorage] SD card not ready - temporarily disabling SD logging");
 80019f8:	490c      	ldr	r1, [pc, #48]	@ (8001a2c <SDStorage_WriteLog+0x4cc>)
 80019fa:	2002      	movs	r0, #2
 80019fc:	f003 fcba 	bl	8005374 <LOGGER_SendFormatted>
            return SDSTORAGE_NOT_READY;
 8001a00:	f06f 0301 	mvn.w	r3, #1
 8001a04:	e001      	b.n	8001a0a <SDStorage_WriteLog+0x4aa>
        }
        
        return SDSTORAGE_FILE_ERROR;
 8001a06:	f06f 0302 	mvn.w	r3, #2
    // 실제 파일 쓰기 없이 성공으로 처리
#endif

    g_current_log_size += size;
    return SDSTORAGE_OK;
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f507 678a 	add.w	r7, r7, #1104	@ 0x450
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000340 	.word	0x20000340
 8001a18:	08019a6c 	.word	0x08019a6c
 8001a1c:	08019aac 	.word	0x08019aac
 8001a20:	08019adc 	.word	0x08019adc
 8001a24:	08019b24 	.word	0x08019b24
 8001a28:	08019b64 	.word	0x08019b64
 8001a2c:	08019b8c 	.word	0x08019b8c

08001a30 <SDStorage_IsReady>:

bool SDStorage_IsReady(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
    return g_sd_ready;
 8001a34:	4b03      	ldr	r3, [pc, #12]	@ (8001a44 <SDStorage_IsReady+0x14>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	2000023c 	.word	0x2000023c

08001a48 <SDStorage_CreateNewLogFile>:
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
    }
}

int SDStorage_CreateNewLogFile(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8001a4e:	af00      	add	r7, sp, #0
    if (!g_sd_ready) {
 8001a50:	4b43      	ldr	r3, [pc, #268]	@ (8001b60 <SDStorage_CreateNewLogFile+0x118>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	f083 0301 	eor.w	r3, r3, #1
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <SDStorage_CreateNewLogFile+0x1c>
        return SDSTORAGE_NOT_READY;
 8001a5e:	f06f 0301 	mvn.w	r3, #1
 8001a62:	e077      	b.n	8001b54 <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 전역 파일 객체 제거됨 - 별도 처리 불필요
    
    // 새 파일명 생성
    if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 8001a64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a68:	483e      	ldr	r0, [pc, #248]	@ (8001b64 <SDStorage_CreateNewLogFile+0x11c>)
 8001a6a:	f000 f8f5 	bl	8001c58 <_generate_log_filename>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <SDStorage_CreateNewLogFile+0x32>
        return SDSTORAGE_ERROR;
 8001a74:	f04f 33ff 	mov.w	r3, #4294967295
 8001a78:	e06c      	b.n	8001b54 <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 파일 생성 테스트 (간단한 방식)
#ifdef STM32F746xx
    LOG_INFO("[SDStorage] Testing file creation: %s", g_current_log_file);
 8001a7a:	4a3a      	ldr	r2, [pc, #232]	@ (8001b64 <SDStorage_CreateNewLogFile+0x11c>)
 8001a7c:	493a      	ldr	r1, [pc, #232]	@ (8001b68 <SDStorage_CreateNewLogFile+0x120>)
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f003 fc78 	bl	8005374 <LOGGER_SendFormatted>
    
    // 지역 변수로 파일 객체 생성
    FIL test_file;
    memset(&test_file, 0, sizeof(test_file));
 8001a84:	463b      	mov	r3, r7
 8001a86:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f015 fe13 	bl	80176b8 <memset>
    
    // SD 카드 상태 재확인
    DSTATUS current_disk_status = disk_status(0);
 8001a92:	2000      	movs	r0, #0
 8001a94:	f010 fa3e 	bl	8011f14 <disk_status>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
    LOG_INFO("[SDStorage] Current disk status: 0x%02X", current_disk_status);
 8001a9e:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4931      	ldr	r1, [pc, #196]	@ (8001b6c <SDStorage_CreateNewLogFile+0x124>)
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	f003 fc64 	bl	8005374 <LOGGER_SendFormatted>
    
    // 파일 생성 테스트
    FRESULT open_result = f_open(&test_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 8001aac:	463b      	mov	r3, r7
 8001aae:	220a      	movs	r2, #10
 8001ab0:	492c      	ldr	r1, [pc, #176]	@ (8001b64 <SDStorage_CreateNewLogFile+0x11c>)
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f011 fe3c 	bl	8013730 <f_open>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f887 322e 	strb.w	r3, [r7, #558]	@ 0x22e
    LOG_INFO("[SDStorage] f_open result: %d", open_result);
 8001abe:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	492a      	ldr	r1, [pc, #168]	@ (8001b70 <SDStorage_CreateNewLogFile+0x128>)
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f003 fc54 	bl	8005374 <LOGGER_SendFormatted>
    
    if (open_result != FR_OK) {
 8001acc:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d032      	beq.n	8001b3a <SDStorage_CreateNewLogFile+0xf2>
        LOG_ERROR("[SDStorage] f_open failed: %d", open_result);
 8001ad4:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4926      	ldr	r1, [pc, #152]	@ (8001b74 <SDStorage_CreateNewLogFile+0x12c>)
 8001adc:	2003      	movs	r0, #3
 8001ade:	f003 fc49 	bl	8005374 <LOGGER_SendFormatted>
        
        // 상세 에러 분석
        switch (open_result) {
 8001ae2:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001ae6:	2b10      	cmp	r3, #16
 8001ae8:	d006      	beq.n	8001af8 <SDStorage_CreateNewLogFile+0xb0>
 8001aea:	2b10      	cmp	r3, #16
 8001aec:	dc13      	bgt.n	8001b16 <SDStorage_CreateNewLogFile+0xce>
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d00c      	beq.n	8001b0c <SDStorage_CreateNewLogFile+0xc4>
 8001af2:	2b09      	cmp	r3, #9
 8001af4:	d005      	beq.n	8001b02 <SDStorage_CreateNewLogFile+0xba>
 8001af6:	e00e      	b.n	8001b16 <SDStorage_CreateNewLogFile+0xce>
            case 16: // FR_INVALID_OBJECT
                LOG_ERROR("[SDStorage] FR_INVALID_OBJECT - File object initialization issue");
 8001af8:	491f      	ldr	r1, [pc, #124]	@ (8001b78 <SDStorage_CreateNewLogFile+0x130>)
 8001afa:	2003      	movs	r0, #3
 8001afc:	f003 fc3a 	bl	8005374 <LOGGER_SendFormatted>
                break;
 8001b00:	e011      	b.n	8001b26 <SDStorage_CreateNewLogFile+0xde>
            case 9: // FR_WRITE_PROTECTED  
                LOG_ERROR("[SDStorage] FR_WRITE_PROTECTED - SD card is write protected");
 8001b02:	491e      	ldr	r1, [pc, #120]	@ (8001b7c <SDStorage_CreateNewLogFile+0x134>)
 8001b04:	2003      	movs	r0, #3
 8001b06:	f003 fc35 	bl	8005374 <LOGGER_SendFormatted>
                break;
 8001b0a:	e00c      	b.n	8001b26 <SDStorage_CreateNewLogFile+0xde>
            case 3: // FR_NOT_READY
                LOG_ERROR("[SDStorage] FR_NOT_READY - Disk not ready");
 8001b0c:	491c      	ldr	r1, [pc, #112]	@ (8001b80 <SDStorage_CreateNewLogFile+0x138>)
 8001b0e:	2003      	movs	r0, #3
 8001b10:	f003 fc30 	bl	8005374 <LOGGER_SendFormatted>
                break;
 8001b14:	e007      	b.n	8001b26 <SDStorage_CreateNewLogFile+0xde>
            default:
                LOG_ERROR("[SDStorage] Unknown f_open error: %d", open_result);
 8001b16:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4919      	ldr	r1, [pc, #100]	@ (8001b84 <SDStorage_CreateNewLogFile+0x13c>)
 8001b1e:	2003      	movs	r0, #3
 8001b20:	f003 fc28 	bl	8005374 <LOGGER_SendFormatted>
                break;
 8001b24:	bf00      	nop
        }
        
        LOG_WARN("[SDStorage] Disabling SD logging due to file creation failure");
 8001b26:	4918      	ldr	r1, [pc, #96]	@ (8001b88 <SDStorage_CreateNewLogFile+0x140>)
 8001b28:	2002      	movs	r0, #2
 8001b2a:	f003 fc23 	bl	8005374 <LOGGER_SendFormatted>
        g_sd_ready = false;  // SD 로깅 비활성화
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <SDStorage_CreateNewLogFile+0x118>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
        return SDSTORAGE_FILE_ERROR;
 8001b34:	f06f 0302 	mvn.w	r3, #2
 8001b38:	e00c      	b.n	8001b54 <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 파일 생성 확인 후 즉시 닫기 (추적 등록 없이)
    f_close(&test_file);
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f012 f975 	bl	8013e2c <f_close>
    LOG_INFO("[SDStorage] File created and ready for logging: %s", g_current_log_file);
 8001b42:	4a08      	ldr	r2, [pc, #32]	@ (8001b64 <SDStorage_CreateNewLogFile+0x11c>)
 8001b44:	4911      	ldr	r1, [pc, #68]	@ (8001b8c <SDStorage_CreateNewLogFile+0x144>)
 8001b46:	2001      	movs	r0, #1
 8001b48:	f003 fc14 	bl	8005374 <LOGGER_SendFormatted>
#else
    // PC/테스트 환경: 파일 생성 시뮬레이션 (항상 성공)
    LOG_INFO("[SDStorage] Test environment - file creation simulated");
#endif
    
    g_current_log_size = 0;
 8001b4c:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <SDStorage_CreateNewLogFile+0x148>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
    return SDSTORAGE_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	f507 770c 	add.w	r7, r7, #560	@ 0x230
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000023c 	.word	0x2000023c
 8001b64:	20000240 	.word	0x20000240
 8001b68:	08019bd0 	.word	0x08019bd0
 8001b6c:	08019b64 	.word	0x08019b64
 8001b70:	08019bf8 	.word	0x08019bf8
 8001b74:	08019c18 	.word	0x08019c18
 8001b78:	08019c38 	.word	0x08019c38
 8001b7c:	08019c7c 	.word	0x08019c7c
 8001b80:	08019cb8 	.word	0x08019cb8
 8001b84:	08019ce4 	.word	0x08019ce4
 8001b88:	08019d0c 	.word	0x08019d0c
 8001b8c:	08019d4c 	.word	0x08019d4c
 8001b90:	20000340 	.word	0x20000340

08001b94 <_create_log_directory>:
    return g_current_log_size;
}

// 내부 함수 구현
static int _create_log_directory(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    // FatFs가 이미 정상 동작하므로 HAL 테스트 불필요
    
    // f_mkdir 전에 볼륨 상태 재확인 (에러 6 방지)
    LOG_INFO("[SDStorage] Verifying volume state before f_mkdir...");
 8001b9a:	4924      	ldr	r1, [pc, #144]	@ (8001c2c <_create_log_directory+0x98>)
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f003 fbe9 	bl	8005374 <LOGGER_SendFormatted>
    
    // 볼륨 재마운트 시도 (상태 안정화)
    FRESULT remount_result = f_mount(&SDFatFS, SDPath, 1);
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4922      	ldr	r1, [pc, #136]	@ (8001c30 <_create_log_directory+0x9c>)
 8001ba6:	4823      	ldr	r0, [pc, #140]	@ (8001c34 <_create_log_directory+0xa0>)
 8001ba8:	f011 fd7e 	bl	80136a8 <f_mount>
 8001bac:	4603      	mov	r3, r0
 8001bae:	71bb      	strb	r3, [r7, #6]
    LOG_INFO("[SDStorage] Volume re-mount result: %d", remount_result);
 8001bb0:	79bb      	ldrb	r3, [r7, #6]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4920      	ldr	r1, [pc, #128]	@ (8001c38 <_create_log_directory+0xa4>)
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f003 fbdc 	bl	8005374 <LOGGER_SendFormatted>
    
    FRESULT mkdir_result = FR_NOT_ENABLED;  // 초기값 설정
 8001bbc:	230c      	movs	r3, #12
 8001bbe:	71fb      	strb	r3, [r7, #7]
    
    if (remount_result == FR_OK) {
 8001bc0:	79bb      	ldrb	r3, [r7, #6]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10f      	bne.n	8001be6 <_create_log_directory+0x52>
        LOG_INFO("[SDStorage] Volume ready - attempting f_mkdir...");
 8001bc6:	491d      	ldr	r1, [pc, #116]	@ (8001c3c <_create_log_directory+0xa8>)
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f003 fbd3 	bl	8005374 <LOGGER_SendFormatted>
        mkdir_result = f_mkdir("lora_logs");
 8001bce:	481c      	ldr	r0, [pc, #112]	@ (8001c40 <_create_log_directory+0xac>)
 8001bd0:	f012 f94c 	bl	8013e6c <f_mkdir>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	71fb      	strb	r3, [r7, #7]
        LOG_INFO("[SDStorage] f_mkdir result: %d", mkdir_result);
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4919      	ldr	r1, [pc, #100]	@ (8001c44 <_create_log_directory+0xb0>)
 8001bde:	2001      	movs	r0, #1
 8001be0:	f003 fbc8 	bl	8005374 <LOGGER_SendFormatted>
 8001be4:	e005      	b.n	8001bf2 <_create_log_directory+0x5e>
    } else {
        LOG_ERROR("[SDStorage] Volume re-mount failed: %d", remount_result);
 8001be6:	79bb      	ldrb	r3, [r7, #6]
 8001be8:	461a      	mov	r2, r3
 8001bea:	4917      	ldr	r1, [pc, #92]	@ (8001c48 <_create_log_directory+0xb4>)
 8001bec:	2003      	movs	r0, #3
 8001bee:	f003 fbc1 	bl	8005374 <LOGGER_SendFormatted>
    }
    
    // FR_EXIST(9)는 이미 존재함을 의미하므로 성공으로 처리
    if (mkdir_result == FR_OK || mkdir_result == FR_EXIST) {
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d002      	beq.n	8001bfe <_create_log_directory+0x6a>
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d105      	bne.n	8001c0a <_create_log_directory+0x76>
        LOG_INFO("[SDStorage] Directory ready (created or already exists)");
 8001bfe:	4913      	ldr	r1, [pc, #76]	@ (8001c4c <_create_log_directory+0xb8>)
 8001c00:	2001      	movs	r0, #1
 8001c02:	f003 fbb7 	bl	8005374 <LOGGER_SendFormatted>
        return SDSTORAGE_OK;  // 디렉토리 성공
 8001c06:	2300      	movs	r3, #0
 8001c08:	e00b      	b.n	8001c22 <_create_log_directory+0x8e>
    } else {
        LOG_ERROR("[SDStorage] f_mkdir failed: %d - FatFs level problem", mkdir_result);
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4910      	ldr	r1, [pc, #64]	@ (8001c50 <_create_log_directory+0xbc>)
 8001c10:	2003      	movs	r0, #3
 8001c12:	f003 fbaf 	bl	8005374 <LOGGER_SendFormatted>
        LOG_INFO("[SDStorage] Will try direct file creation without directory");
 8001c16:	490f      	ldr	r1, [pc, #60]	@ (8001c54 <_create_log_directory+0xc0>)
 8001c18:	2001      	movs	r0, #1
 8001c1a:	f003 fbab 	bl	8005374 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;  // 디렉토리 실패
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
#else
    // PC: mkdir 시뮬레이션 (테스트에서는 성공으로 가정)
    LOG_INFO("[SDStorage] Test environment - directory creation simulated");
    return SDSTORAGE_OK;
#endif
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	08019d80 	.word	0x08019d80
 8001c30:	2000268c 	.word	0x2000268c
 8001c34:	20002690 	.word	0x20002690
 8001c38:	08019db8 	.word	0x08019db8
 8001c3c:	08019de0 	.word	0x08019de0
 8001c40:	08019e14 	.word	0x08019e14
 8001c44:	08019e20 	.word	0x08019e20
 8001c48:	08019e40 	.word	0x08019e40
 8001c4c:	08019e68 	.word	0x08019e68
 8001c50:	08019ea0 	.word	0x08019ea0
 8001c54:	08019ed8 	.word	0x08019ed8

08001c58 <_generate_log_filename>:

static int _generate_log_filename(char* filename, size_t max_len)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001c64:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001c68:	6018      	str	r0, [r3, #0]
 8001c6a:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001c6e:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8001c72:	6019      	str	r1, [r3, #0]
    // 8.3 형식 파일명 생성 - 기존 파일 확인하여 중복 방지
    static int file_counter = 0;  // 0부터 시작하여 첫 번째 호출에서 1로 설정
    
    // 첫 번째 호출에서만 기존 파일 확인
    if (file_counter == 0) {
 8001c74:	4b48      	ldr	r3, [pc, #288]	@ (8001d98 <_generate_log_filename+0x140>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d14a      	bne.n	8001d12 <_generate_log_filename+0xba>
        file_counter = 1;
 8001c7c:	4b46      	ldr	r3, [pc, #280]	@ (8001d98 <_generate_log_filename+0x140>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
        
        // 기존 파일들 확인하여 다음 번호 찾기
        for (int i = 1; i <= 9999; i++) {
 8001c82:	2301      	movs	r3, #1
 8001c84:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001c88:	e034      	b.n	8001cf4 <_generate_log_filename+0x9c>
            char test_filename[256];
            FIL test_file;
            
            if (g_directory_available) {
 8001c8a:	4b44      	ldr	r3, [pc, #272]	@ (8001d9c <_generate_log_filename+0x144>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d009      	beq.n	8001ca6 <_generate_log_filename+0x4e>
                snprintf(test_filename, sizeof(test_filename), "lora_logs/LORA%04d.TXT", i);
 8001c92:	f107 0008 	add.w	r0, r7, #8
 8001c96:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001c9a:	4a41      	ldr	r2, [pc, #260]	@ (8001da0 <_generate_log_filename+0x148>)
 8001c9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ca0:	f015 fc32 	bl	8017508 <sniprintf>
 8001ca4:	e008      	b.n	8001cb8 <_generate_log_filename+0x60>
            } else {
                snprintf(test_filename, sizeof(test_filename), "LORA%04d.TXT", i);
 8001ca6:	f107 0008 	add.w	r0, r7, #8
 8001caa:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001cae:	4a3d      	ldr	r2, [pc, #244]	@ (8001da4 <_generate_log_filename+0x14c>)
 8001cb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cb4:	f015 fc28 	bl	8017508 <sniprintf>
            }
            
            // 파일이 존재하는지 확인
            FRESULT test_result = f_open(&test_file, test_filename, FA_READ);
 8001cb8:	f107 0108 	add.w	r1, r7, #8
 8001cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f011 fd34 	bl	8013730 <f_open>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
            if (test_result == FR_OK) {
 8001cce:	f897 3337 	ldrb.w	r3, [r7, #823]	@ 0x337
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d115      	bne.n	8001d02 <_generate_log_filename+0xaa>
                f_close(&test_file);
 8001cd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f012 f8a6 	bl	8013e2c <f_close>
                file_counter = i + 1;  // 다음 번호로 설정
 8001ce0:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	4a2c      	ldr	r2, [pc, #176]	@ (8001d98 <_generate_log_filename+0x140>)
 8001ce8:	6013      	str	r3, [r2, #0]
        for (int i = 1; i <= 9999; i++) {
 8001cea:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001cf4:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001cf8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	ddc4      	ble.n	8001c8a <_generate_log_filename+0x32>
 8001d00:	e000      	b.n	8001d04 <_generate_log_filename+0xac>
            } else {
                break;  // 파일이 없으면 현재 번호 사용
 8001d02:	bf00      	nop
            }
        }
        
        LOG_DEBUG("[SDStorage] Auto-detected next log file number: %d", file_counter);
 8001d04:	4b24      	ldr	r3, [pc, #144]	@ (8001d98 <_generate_log_filename+0x140>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4927      	ldr	r1, [pc, #156]	@ (8001da8 <_generate_log_filename+0x150>)
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f003 fb31 	bl	8005374 <LOGGER_SendFormatted>
    }
    
    // 디렉토리 사용 가능 여부에 따라 경로 결정
    int result;
    if (g_directory_available) {
 8001d12:	4b22      	ldr	r3, [pc, #136]	@ (8001d9c <_generate_log_filename+0x144>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d011      	beq.n	8001d3e <_generate_log_filename+0xe6>
        // lora_logs 디렉토리에 파일 생성 (TXT 형식)
        result = snprintf(filename, max_len, "lora_logs/LORA%04d.TXT", file_counter);
 8001d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d98 <_generate_log_filename+0x140>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8001d22:	f5a2 7150 	sub.w	r1, r2, #832	@ 0x340
 8001d26:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8001d2a:	f5a2 704f 	sub.w	r0, r2, #828	@ 0x33c
 8001d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001da0 <_generate_log_filename+0x148>)
 8001d30:	6809      	ldr	r1, [r1, #0]
 8001d32:	6800      	ldr	r0, [r0, #0]
 8001d34:	f015 fbe8 	bl	8017508 <sniprintf>
 8001d38:	f8c7 0338 	str.w	r0, [r7, #824]	@ 0x338
 8001d3c:	e010      	b.n	8001d60 <_generate_log_filename+0x108>
    } else {
        // 루트 디렉토리에 파일 생성 (TXT 형식)
        result = snprintf(filename, max_len, "LORA%04d.TXT", file_counter);
 8001d3e:	4b16      	ldr	r3, [pc, #88]	@ (8001d98 <_generate_log_filename+0x140>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8001d46:	f5a2 7150 	sub.w	r1, r2, #832	@ 0x340
 8001d4a:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8001d4e:	f5a2 704f 	sub.w	r0, r2, #828	@ 0x33c
 8001d52:	4a14      	ldr	r2, [pc, #80]	@ (8001da4 <_generate_log_filename+0x14c>)
 8001d54:	6809      	ldr	r1, [r1, #0]
 8001d56:	6800      	ldr	r0, [r0, #0]
 8001d58:	f015 fbd6 	bl	8017508 <sniprintf>
 8001d5c:	f8c7 0338 	str.w	r0, [r7, #824]	@ 0x338
    }
    
    file_counter++;
 8001d60:	4b0d      	ldr	r3, [pc, #52]	@ (8001d98 <_generate_log_filename+0x140>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	3301      	adds	r3, #1
 8001d66:	4a0c      	ldr	r2, [pc, #48]	@ (8001d98 <_generate_log_filename+0x140>)
 8001d68:	6013      	str	r3, [r2, #0]
    
    if (result < 0 || (size_t)result >= max_len) {
 8001d6a:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	db08      	blt.n	8001d84 <_generate_log_filename+0x12c>
 8001d72:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001d76:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8001d7a:	f5a2 7250 	sub.w	r2, r2, #832	@ 0x340
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d802      	bhi.n	8001d8a <_generate_log_filename+0x132>
        return SDSTORAGE_ERROR;
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295
 8001d88:	e000      	b.n	8001d8c <_generate_log_filename+0x134>
    }
    
    return SDSTORAGE_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f507 7750 	add.w	r7, r7, #832	@ 0x340
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2000164c 	.word	0x2000164c
 8001d9c:	20000344 	.word	0x20000344
 8001da0:	08019f14 	.word	0x08019f14
 8001da4:	08019f2c 	.word	0x08019f2c
 8001da8:	08019f3c 	.word	0x08019f3c

08001dac <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4a07      	ldr	r2, [pc, #28]	@ (8001e0c <vApplicationGetIdleTaskMemory+0x2c>)
 8001df0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	4a06      	ldr	r2, [pc, #24]	@ (8001e10 <vApplicationGetIdleTaskMemory+0x30>)
 8001df6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2280      	movs	r2, #128	@ 0x80
 8001dfc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001dfe:	bf00      	nop
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20001650 	.word	0x20001650
 8001e10:	200016a8 	.word	0x200016a8

08001e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e14:	b5b0      	push	{r4, r5, r7, lr}
 8001e16:	b09a      	sub	sp, #104	@ 0x68
 8001e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // 리셋 카운터 추가
  static uint32_t reset_count = 0;
  reset_count++;
 8001e1a:	4b96      	ldr	r3, [pc, #600]	@ (8002074 <main+0x260>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	4a94      	ldr	r2, [pc, #592]	@ (8002074 <main+0x260>)
 8001e22:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e24:	f004 f84f 	bl	8005ec6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e28:	f000 f966 	bl	80020f8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001e2c:	f000 f9d6 	bl	80021dc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e30:	f001 f9a0 	bl	8003174 <MX_GPIO_Init>
  MX_DMA_Init();  // DMA는 UART보다 먼저 초기화
 8001e34:	f001 ff92 	bl	8003d5c <MX_DMA_Init>
  MX_USART6_DMA_Init();  // USART6 DMA 초기화 (UART보다 먼저)
 8001e38:	f001 ffb6 	bl	8003da8 <MX_USART6_DMA_Init>
  MX_ADC3_Init();
 8001e3c:	f000 fa00 	bl	8002240 <MX_ADC3_Init>
  MX_CRC_Init();
 8001e40:	f000 fa50 	bl	80022e4 <MX_CRC_Init>
  MX_DCMI_Init();
 8001e44:	f000 fa70 	bl	8002328 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001e48:	f000 faa2 	bl	8002390 <MX_DMA2D_Init>
  MX_ETH_Init();
 8001e4c:	f000 fad2 	bl	80023f4 <MX_ETH_Init>
  MX_FMC_Init();
 8001e50:	f001 f940 	bl	80030d4 <MX_FMC_Init>
  MX_I2C1_Init();
 8001e54:	f000 fb1c 	bl	8002490 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001e58:	f000 fb5a 	bl	8002510 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001e5c:	f000 fb98 	bl	8002590 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001e60:	f000 fc18 	bl	8002694 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001e64:	f000 fc42 	bl	80026ec <MX_RTC_Init>
  MX_SAI2_Init();
 8001e68:	f000 fce4 	bl	8002834 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001e6c:	f000 fd8a 	bl	8002984 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001e70:	f000 fdb6 	bl	80029e0 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8001e74:	f000 fde4 	bl	8002a40 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001e78:	f000 fe20 	bl	8002abc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001e7c:	f000 feca 	bl	8002c14 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001e80:	f000 ff3e 	bl	8002d00 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001e84:	f000 ffb4 	bl	8002df0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001e88:	f001 f82a 	bl	8002ee0 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001e8c:	f001 f87c 	bl	8002f88 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001e90:	f001 f8c0 	bl	8003014 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001e94:	f001 f8ee 	bl	8003074 <MX_USART6_UART_Init>
  
  // UART 초기화 후 DMA 핸들 다시 연결 (HAL_UART_Init에서 리셋될 수 있음)
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8001e98:	4b77      	ldr	r3, [pc, #476]	@ (8002078 <main+0x264>)
 8001e9a:	4a78      	ldr	r2, [pc, #480]	@ (800207c <main+0x268>)
 8001e9c:	675a      	str	r2, [r3, #116]	@ 0x74
 8001e9e:	4b77      	ldr	r3, [pc, #476]	@ (800207c <main+0x268>)
 8001ea0:	4a75      	ldr	r2, [pc, #468]	@ (8002078 <main+0x264>)
 8001ea2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  // UART IDLE 인터럽트 활성화 (DMA 기반 수신을 위해)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8001ea4:	4b74      	ldr	r3, [pc, #464]	@ (8002078 <main+0x264>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b73      	ldr	r3, [pc, #460]	@ (8002078 <main+0x264>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0210 	orr.w	r2, r2, #16
 8001eb2:	601a      	str	r2, [r3, #0]
  MX_FATFS_Init();
 8001eb4:	f00f fc36 	bl	8011724 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  
  // Logger 초기화 (터미널 출력만 사용)
  LOGGER_Connect("STM32", 0);
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4871      	ldr	r0, [pc, #452]	@ (8002080 <main+0x26c>)
 8001ebc:	f003 f9fa 	bl	80052b4 <LOGGER_Connect>
  
  // 리셋 원인 확인
  LOG_INFO("=== SYSTEM START (Reset #%lu) ===", reset_count);
 8001ec0:	4b6c      	ldr	r3, [pc, #432]	@ (8002074 <main+0x260>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	496f      	ldr	r1, [pc, #444]	@ (8002084 <main+0x270>)
 8001ec8:	2001      	movs	r0, #1
 8001eca:	f003 fa53 	bl	8005374 <LOGGER_SendFormatted>
  
  // RCC 리셋 플래그 확인
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) LOG_WARN("Reset: BOR (Brown-out)");
 8001ece:	4b6e      	ldr	r3, [pc, #440]	@ (8002088 <main+0x274>)
 8001ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <main+0xce>
 8001eda:	496c      	ldr	r1, [pc, #432]	@ (800208c <main+0x278>)
 8001edc:	2002      	movs	r0, #2
 8001ede:	f003 fa49 	bl	8005374 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) LOG_WARN("Reset: PIN (External)");
 8001ee2:	4b69      	ldr	r3, [pc, #420]	@ (8002088 <main+0x274>)
 8001ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ee6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <main+0xe2>
 8001eee:	4968      	ldr	r1, [pc, #416]	@ (8002090 <main+0x27c>)
 8001ef0:	2002      	movs	r0, #2
 8001ef2:	f003 fa3f 	bl	8005374 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) LOG_WARN("Reset: POR (Power-on)");
 8001ef6:	4b64      	ldr	r3, [pc, #400]	@ (8002088 <main+0x274>)
 8001ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001efa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <main+0xf6>
 8001f02:	4964      	ldr	r1, [pc, #400]	@ (8002094 <main+0x280>)
 8001f04:	2002      	movs	r0, #2
 8001f06:	f003 fa35 	bl	8005374 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) LOG_WARN("Reset: SOFTWARE");
 8001f0a:	4b5f      	ldr	r3, [pc, #380]	@ (8002088 <main+0x274>)
 8001f0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <main+0x10a>
 8001f16:	4960      	ldr	r1, [pc, #384]	@ (8002098 <main+0x284>)
 8001f18:	2002      	movs	r0, #2
 8001f1a:	f003 fa2b 	bl	8005374 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) LOG_WARN("Reset: IWDG (Watchdog)");
 8001f1e:	4b5a      	ldr	r3, [pc, #360]	@ (8002088 <main+0x274>)
 8001f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <main+0x11e>
 8001f2a:	495c      	ldr	r1, [pc, #368]	@ (800209c <main+0x288>)
 8001f2c:	2002      	movs	r0, #2
 8001f2e:	f003 fa21 	bl	8005374 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) LOG_WARN("Reset: WWDG (Window Watchdog)");
 8001f32:	4b55      	ldr	r3, [pc, #340]	@ (8002088 <main+0x274>)
 8001f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f36:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <main+0x132>
 8001f3e:	4958      	ldr	r1, [pc, #352]	@ (80020a0 <main+0x28c>)
 8001f40:	2002      	movs	r0, #2
 8001f42:	f003 fa17 	bl	8005374 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) LOG_WARN("Reset: LPWR (Low Power)");
 8001f46:	4b50      	ldr	r3, [pc, #320]	@ (8002088 <main+0x274>)
 8001f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	da03      	bge.n	8001f56 <main+0x142>
 8001f4e:	4955      	ldr	r1, [pc, #340]	@ (80020a4 <main+0x290>)
 8001f50:	2002      	movs	r0, #2
 8001f52:	f003 fa0f 	bl	8005374 <LOGGER_SendFormatted>
  
  // 플래그 클리어
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8001f56:	4b4c      	ldr	r3, [pc, #304]	@ (8002088 <main+0x274>)
 8001f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f5a:	4a4b      	ldr	r2, [pc, #300]	@ (8002088 <main+0x274>)
 8001f5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f60:	6753      	str	r3, [r2, #116]	@ 0x74
  
  // ===== 하드웨어 초기화만 main()에서 수행 =====
  
  // SD카드 초기화는 FreeRTOS 태스크에서 수행 (커널 시작 후)
  LOG_INFO("🔄 SD card initialization will be performed in FreeRTOS task");
 8001f62:	4951      	ldr	r1, [pc, #324]	@ (80020a8 <main+0x294>)
 8001f64:	2001      	movs	r0, #1
 8001f66:	f003 fa05 	bl	8005374 <LOGGER_SendFormatted>
  g_sd_initialization_result = -1;  // 초기화 안됨 상태
 8001f6a:	4b50      	ldr	r3, [pc, #320]	@ (80020ac <main+0x298>)
 8001f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f70:	601a      	str	r2, [r3, #0]
  
  // UART6 DMA 초기화 건너뛰기 (이미 main 초기화에서 완료됨)
  LOG_INFO("📤 UART DMA already initialized in main() - skipping");
 8001f72:	494f      	ldr	r1, [pc, #316]	@ (80020b0 <main+0x29c>)
 8001f74:	2001      	movs	r0, #1
 8001f76:	f003 f9fd 	bl	8005374 <LOGGER_SendFormatted>
  
  // IDLE 인터럽트만 활성화 (메시지 끝 감지용)
  LOG_INFO("📤 Enabling UART IDLE interrupt...");
 8001f7a:	494e      	ldr	r1, [pc, #312]	@ (80020b4 <main+0x2a0>)
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f003 f9f9 	bl	8005374 <LOGGER_SendFormatted>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8001f82:	4b3d      	ldr	r3, [pc, #244]	@ (8002078 <main+0x264>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b3b      	ldr	r3, [pc, #236]	@ (8002078 <main+0x264>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 0210 	orr.w	r2, r2, #16
 8001f90:	601a      	str	r2, [r3, #0]
  LOG_INFO("✅ UART setup completed");
 8001f92:	4949      	ldr	r1, [pc, #292]	@ (80020b8 <main+0x2a4>)
 8001f94:	2001      	movs	r0, #1
 8001f96:	f003 f9ed 	bl	8005374 <LOGGER_SendFormatted>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  // SD 로깅 큐 생성 (안전성 체크 포함)
  LOG_INFO("📤 Creating SD logging queue (size: %d, item: %d bytes)", 
 8001f9a:	2388      	movs	r3, #136	@ 0x88
 8001f9c:	220a      	movs	r2, #10
 8001f9e:	4947      	ldr	r1, [pc, #284]	@ (80020bc <main+0x2a8>)
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f003 f9e7 	bl	8005374 <LOGGER_SendFormatted>
           SD_LOG_QUEUE_SIZE, sizeof(SDLogEntry_t));
  
  osMessageQDef(sdLogQueue, SD_LOG_QUEUE_SIZE, SDLogEntry_t);
 8001fa6:	4b46      	ldr	r3, [pc, #280]	@ (80020c0 <main+0x2ac>)
 8001fa8:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001fac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  sdLogQueueHandle = osMessageCreate(osMessageQ(sdLogQueue), NULL);
 8001fb2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f012 fd93 	bl	8014ae4 <osMessageCreate>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4a40      	ldr	r2, [pc, #256]	@ (80020c4 <main+0x2b0>)
 8001fc2:	6013      	str	r3, [r2, #0]
  
  if (sdLogQueueHandle == NULL) {
 8001fc4:	4b3f      	ldr	r3, [pc, #252]	@ (80020c4 <main+0x2b0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d104      	bne.n	8001fd6 <main+0x1c2>
    LOG_ERROR("❌ SD logging queue creation FAILED - insufficient memory");
 8001fcc:	493e      	ldr	r1, [pc, #248]	@ (80020c8 <main+0x2b4>)
 8001fce:	2003      	movs	r0, #3
 8001fd0:	f003 f9d0 	bl	8005374 <LOGGER_SendFormatted>
 8001fd4:	e003      	b.n	8001fde <main+0x1ca>
  } else {
    LOG_INFO("✅ SD logging queue created successfully");
 8001fd6:	493d      	ldr	r1, [pc, #244]	@ (80020cc <main+0x2b8>)
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f003 f9cb 	bl	8005374 <LOGGER_SendFormatted>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 8192);
 8001fde:	4b3c      	ldr	r3, [pc, #240]	@ (80020d0 <main+0x2bc>)
 8001fe0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001fe4:	461d      	mov	r5, r3
 8001fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001ff2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f012 fd13 	bl	8014a24 <osThreadCreate>
 8001ffe:	4603      	mov	r3, r0
 8002000:	4a34      	ldr	r2, [pc, #208]	@ (80020d4 <main+0x2c0>)
 8002002:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* 수신 태스크 활성화 - LoRa 통신을 위해 필수 */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 4096);
 8002004:	4b34      	ldr	r3, [pc, #208]	@ (80020d8 <main+0x2c4>)
 8002006:	f107 0420 	add.w	r4, r7, #32
 800200a:	461d      	mov	r5, r3
 800200c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800200e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002010:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002014:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 8002018:	f107 0320 	add.w	r3, r7, #32
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f012 fd00 	bl	8014a24 <osThreadCreate>
 8002024:	4603      	mov	r3, r0
 8002026:	4a2d      	ldr	r2, [pc, #180]	@ (80020dc <main+0x2c8>)
 8002028:	6013      	str	r3, [r2, #0]
  LOG_INFO("📤 Receive Task enabled for LoRa communication");
 800202a:	492d      	ldr	r1, [pc, #180]	@ (80020e0 <main+0x2cc>)
 800202c:	2001      	movs	r0, #1
 800202e:	f003 f9a1 	bl	8005374 <LOGGER_SendFormatted>
  
  /* SD 로깅 태스크 활성화 - SD 카드 로깅을 위해 */
  osThreadDef(sdLoggingTask, StartSDLoggingTask, osPriorityLow, 0, 4096);
 8002032:	4b2c      	ldr	r3, [pc, #176]	@ (80020e4 <main+0x2d0>)
 8002034:	1d3c      	adds	r4, r7, #4
 8002036:	461d      	mov	r5, r3
 8002038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800203a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800203c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002040:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sdLoggingTaskHandle = osThreadCreate(osThread(sdLoggingTask), NULL);
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	2100      	movs	r1, #0
 8002048:	4618      	mov	r0, r3
 800204a:	f012 fceb 	bl	8014a24 <osThreadCreate>
 800204e:	4603      	mov	r3, r0
 8002050:	4a25      	ldr	r2, [pc, #148]	@ (80020e8 <main+0x2d4>)
 8002052:	6013      	str	r3, [r2, #0]
  LOG_INFO("📤 SD Logging Task enabled");
 8002054:	4925      	ldr	r1, [pc, #148]	@ (80020ec <main+0x2d8>)
 8002056:	2001      	movs	r0, #1
 8002058:	f003 f98c 	bl	8005374 <LOGGER_SendFormatted>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  LOG_INFO("🚀 Starting FreeRTOS scheduler...");
 800205c:	4924      	ldr	r1, [pc, #144]	@ (80020f0 <main+0x2dc>)
 800205e:	2001      	movs	r0, #1
 8002060:	f003 f988 	bl	8005374 <LOGGER_SendFormatted>
  osKernelStart();
 8002064:	f012 fcbb 	bl	80149de <osKernelStart>
  
  // 이 부분은 절대 실행되면 안됨 (스케줄러가 제어를 가져가야 함)
  LOG_ERROR("❌ FATAL: Scheduler failed to start - system halted");
 8002068:	4922      	ldr	r1, [pc, #136]	@ (80020f4 <main+0x2e0>)
 800206a:	2003      	movs	r0, #3
 800206c:	f003 f982 	bl	8005374 <LOGGER_SendFormatted>

  /* We should never get here as control is now taken by the scheduler */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <main+0x25c>
 8002074:	2000240c 	.word	0x2000240c
 8002078:	200020d4 	.word	0x200020d4
 800207c:	200023ac 	.word	0x200023ac
 8002080:	08019f70 	.word	0x08019f70
 8002084:	08019f78 	.word	0x08019f78
 8002088:	40023800 	.word	0x40023800
 800208c:	08019f9c 	.word	0x08019f9c
 8002090:	08019fb4 	.word	0x08019fb4
 8002094:	08019fcc 	.word	0x08019fcc
 8002098:	08019fe4 	.word	0x08019fe4
 800209c:	08019ff4 	.word	0x08019ff4
 80020a0:	0801a00c 	.word	0x0801a00c
 80020a4:	0801a02c 	.word	0x0801a02c
 80020a8:	0801a044 	.word	0x0801a044
 80020ac:	20000014 	.word	0x20000014
 80020b0:	0801a084 	.word	0x0801a084
 80020b4:	0801a0bc 	.word	0x0801a0bc
 80020b8:	0801a0e4 	.word	0x0801a0e4
 80020bc:	0801a100 	.word	0x0801a100
 80020c0:	0801a254 	.word	0x0801a254
 80020c4:	2000219c 	.word	0x2000219c
 80020c8:	0801a13c 	.word	0x0801a13c
 80020cc:	0801a178 	.word	0x0801a178
 80020d0:	0801a270 	.word	0x0801a270
 80020d4:	20002190 	.word	0x20002190
 80020d8:	0801a298 	.word	0x0801a298
 80020dc:	20002194 	.word	0x20002194
 80020e0:	0801a1a4 	.word	0x0801a1a4
 80020e4:	0801a2c4 	.word	0x0801a2c4
 80020e8:	20002198 	.word	0x20002198
 80020ec:	0801a1d8 	.word	0x0801a1d8
 80020f0:	0801a1f8 	.word	0x0801a1f8
 80020f4:	0801a21c 	.word	0x0801a21c

080020f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b094      	sub	sp, #80	@ 0x50
 80020fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020fe:	f107 0320 	add.w	r3, r7, #32
 8002102:	2230      	movs	r2, #48	@ 0x30
 8002104:	2100      	movs	r1, #0
 8002106:	4618      	mov	r0, r3
 8002108:	f015 fad6 	bl	80176b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800210c:	f107 030c 	add.w	r3, r7, #12
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800211c:	f008 f982 	bl	800a424 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002120:	4b2c      	ldr	r3, [pc, #176]	@ (80021d4 <SystemClock_Config+0xdc>)
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	4a2b      	ldr	r2, [pc, #172]	@ (80021d4 <SystemClock_Config+0xdc>)
 8002126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800212a:	6413      	str	r3, [r2, #64]	@ 0x40
 800212c:	4b29      	ldr	r3, [pc, #164]	@ (80021d4 <SystemClock_Config+0xdc>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002138:	4b27      	ldr	r3, [pc, #156]	@ (80021d8 <SystemClock_Config+0xe0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a26      	ldr	r2, [pc, #152]	@ (80021d8 <SystemClock_Config+0xe0>)
 800213e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	4b24      	ldr	r3, [pc, #144]	@ (80021d8 <SystemClock_Config+0xe0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002150:	2309      	movs	r3, #9
 8002152:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002154:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800215a:	2301      	movs	r3, #1
 800215c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800215e:	2302      	movs	r3, #2
 8002160:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002162:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002166:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002168:	2319      	movs	r3, #25
 800216a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 800216c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002170:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002172:	2302      	movs	r3, #2
 8002174:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002176:	2309      	movs	r3, #9
 8002178:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800217a:	f107 0320 	add.w	r3, r7, #32
 800217e:	4618      	mov	r0, r3
 8002180:	f008 fa72 	bl	800a668 <HAL_RCC_OscConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800218a:	f001 fde1 	bl	8003d50 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800218e:	f008 f959 	bl	800a444 <HAL_PWREx_EnableOverDrive>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002198:	f001 fdda 	bl	8003d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800219c:	230f      	movs	r3, #15
 800219e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021a0:	2302      	movs	r3, #2
 80021a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80021ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80021b4:	f107 030c 	add.w	r3, r7, #12
 80021b8:	2106      	movs	r1, #6
 80021ba:	4618      	mov	r0, r3
 80021bc:	f008 fcf8 	bl	800abb0 <HAL_RCC_ClockConfig>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80021c6:	f001 fdc3 	bl	8003d50 <Error_Handler>
  }
}
 80021ca:	bf00      	nop
 80021cc:	3750      	adds	r7, #80	@ 0x50
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40007000 	.word	0x40007000

080021dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b0a2      	sub	sp, #136	@ 0x88
 80021e0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	2284      	movs	r2, #132	@ 0x84
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f015 fa65 	bl	80176b8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 80021ee:	4b13      	ldr	r3, [pc, #76]	@ (800223c <PeriphCommonClock_Config+0x60>)
 80021f0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80021f2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80021f6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80021f8:	2305      	movs	r3, #5
 80021fa:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80021fc:	2302      	movs	r3, #2
 80021fe:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8002200:	2303      	movs	r3, #3
 8002202:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002204:	2301      	movs	r3, #1
 8002206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002208:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800220c:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800220e:	2300      	movs	r3, #0
 8002210:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8002212:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002216:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800221a:	2300      	movs	r3, #0
 800221c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002220:	1d3b      	adds	r3, r7, #4
 8002222:	4618      	mov	r0, r3
 8002224:	f008 fedc 	bl	800afe0 <HAL_RCCEx_PeriphCLKConfig>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800222e:	f001 fd8f 	bl	8003d50 <Error_Handler>
  }
}
 8002232:	bf00      	nop
 8002234:	3788      	adds	r7, #136	@ 0x88
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	00b00008 	.word	0x00b00008

08002240 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002246:	463b      	mov	r3, r7
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002252:	4b21      	ldr	r3, [pc, #132]	@ (80022d8 <MX_ADC3_Init+0x98>)
 8002254:	4a21      	ldr	r2, [pc, #132]	@ (80022dc <MX_ADC3_Init+0x9c>)
 8002256:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002258:	4b1f      	ldr	r3, [pc, #124]	@ (80022d8 <MX_ADC3_Init+0x98>)
 800225a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800225e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002260:	4b1d      	ldr	r3, [pc, #116]	@ (80022d8 <MX_ADC3_Init+0x98>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002266:	4b1c      	ldr	r3, [pc, #112]	@ (80022d8 <MX_ADC3_Init+0x98>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800226c:	4b1a      	ldr	r3, [pc, #104]	@ (80022d8 <MX_ADC3_Init+0x98>)
 800226e:	2200      	movs	r2, #0
 8002270:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002272:	4b19      	ldr	r3, [pc, #100]	@ (80022d8 <MX_ADC3_Init+0x98>)
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800227a:	4b17      	ldr	r3, [pc, #92]	@ (80022d8 <MX_ADC3_Init+0x98>)
 800227c:	2200      	movs	r2, #0
 800227e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002280:	4b15      	ldr	r3, [pc, #84]	@ (80022d8 <MX_ADC3_Init+0x98>)
 8002282:	4a17      	ldr	r2, [pc, #92]	@ (80022e0 <MX_ADC3_Init+0xa0>)
 8002284:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002286:	4b14      	ldr	r3, [pc, #80]	@ (80022d8 <MX_ADC3_Init+0x98>)
 8002288:	2200      	movs	r2, #0
 800228a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800228c:	4b12      	ldr	r3, [pc, #72]	@ (80022d8 <MX_ADC3_Init+0x98>)
 800228e:	2201      	movs	r2, #1
 8002290:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002292:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <MX_ADC3_Init+0x98>)
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800229a:	4b0f      	ldr	r3, [pc, #60]	@ (80022d8 <MX_ADC3_Init+0x98>)
 800229c:	2201      	movs	r2, #1
 800229e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80022a0:	480d      	ldr	r0, [pc, #52]	@ (80022d8 <MX_ADC3_Init+0x98>)
 80022a2:	f003 fe61 	bl	8005f68 <HAL_ADC_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80022ac:	f001 fd50 	bl	8003d50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80022b0:	2304      	movs	r3, #4
 80022b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022b4:	2301      	movs	r3, #1
 80022b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80022bc:	463b      	mov	r3, r7
 80022be:	4619      	mov	r1, r3
 80022c0:	4805      	ldr	r0, [pc, #20]	@ (80022d8 <MX_ADC3_Init+0x98>)
 80022c2:	f003 fe95 	bl	8005ff0 <HAL_ADC_ConfigChannel>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80022cc:	f001 fd40 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	200018e0 	.word	0x200018e0
 80022dc:	40012200 	.word	0x40012200
 80022e0:	0f000001 	.word	0x0f000001

080022e4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80022e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002320 <MX_CRC_Init+0x3c>)
 80022ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002324 <MX_CRC_Init+0x40>)
 80022ec:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80022ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002320 <MX_CRC_Init+0x3c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80022f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002320 <MX_CRC_Init+0x3c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80022fa:	4b09      	ldr	r3, [pc, #36]	@ (8002320 <MX_CRC_Init+0x3c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002300:	4b07      	ldr	r3, [pc, #28]	@ (8002320 <MX_CRC_Init+0x3c>)
 8002302:	2200      	movs	r2, #0
 8002304:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002306:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <MX_CRC_Init+0x3c>)
 8002308:	2201      	movs	r2, #1
 800230a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800230c:	4804      	ldr	r0, [pc, #16]	@ (8002320 <MX_CRC_Init+0x3c>)
 800230e:	f004 f9a5 	bl	800665c <HAL_CRC_Init>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002318:	f001 fd1a 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20001928 	.word	0x20001928
 8002324:	40023000 	.word	0x40023000

08002328 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800232c:	4b16      	ldr	r3, [pc, #88]	@ (8002388 <MX_DCMI_Init+0x60>)
 800232e:	4a17      	ldr	r2, [pc, #92]	@ (800238c <MX_DCMI_Init+0x64>)
 8002330:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8002332:	4b15      	ldr	r3, [pc, #84]	@ (8002388 <MX_DCMI_Init+0x60>)
 8002334:	2200      	movs	r2, #0
 8002336:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8002338:	4b13      	ldr	r3, [pc, #76]	@ (8002388 <MX_DCMI_Init+0x60>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800233e:	4b12      	ldr	r3, [pc, #72]	@ (8002388 <MX_DCMI_Init+0x60>)
 8002340:	2200      	movs	r2, #0
 8002342:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8002344:	4b10      	ldr	r3, [pc, #64]	@ (8002388 <MX_DCMI_Init+0x60>)
 8002346:	2200      	movs	r2, #0
 8002348:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800234a:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <MX_DCMI_Init+0x60>)
 800234c:	2200      	movs	r2, #0
 800234e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8002350:	4b0d      	ldr	r3, [pc, #52]	@ (8002388 <MX_DCMI_Init+0x60>)
 8002352:	2200      	movs	r2, #0
 8002354:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8002356:	4b0c      	ldr	r3, [pc, #48]	@ (8002388 <MX_DCMI_Init+0x60>)
 8002358:	2200      	movs	r2, #0
 800235a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800235c:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <MX_DCMI_Init+0x60>)
 800235e:	2200      	movs	r2, #0
 8002360:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8002362:	4b09      	ldr	r3, [pc, #36]	@ (8002388 <MX_DCMI_Init+0x60>)
 8002364:	2200      	movs	r2, #0
 8002366:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002368:	4b07      	ldr	r3, [pc, #28]	@ (8002388 <MX_DCMI_Init+0x60>)
 800236a:	2200      	movs	r2, #0
 800236c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800236e:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <MX_DCMI_Init+0x60>)
 8002370:	2200      	movs	r2, #0
 8002372:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8002374:	4804      	ldr	r0, [pc, #16]	@ (8002388 <MX_DCMI_Init+0x60>)
 8002376:	f004 fa63 	bl	8006840 <HAL_DCMI_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8002380:	f001 fce6 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}
 8002388:	2000194c 	.word	0x2000194c
 800238c:	50050000 	.word	0x50050000

08002390 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002394:	4b15      	ldr	r3, [pc, #84]	@ (80023ec <MX_DMA2D_Init+0x5c>)
 8002396:	4a16      	ldr	r2, [pc, #88]	@ (80023f0 <MX_DMA2D_Init+0x60>)
 8002398:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800239a:	4b14      	ldr	r3, [pc, #80]	@ (80023ec <MX_DMA2D_Init+0x5c>)
 800239c:	2200      	movs	r2, #0
 800239e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80023a0:	4b12      	ldr	r3, [pc, #72]	@ (80023ec <MX_DMA2D_Init+0x5c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80023a6:	4b11      	ldr	r3, [pc, #68]	@ (80023ec <MX_DMA2D_Init+0x5c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80023ac:	4b0f      	ldr	r3, [pc, #60]	@ (80023ec <MX_DMA2D_Init+0x5c>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80023b2:	4b0e      	ldr	r3, [pc, #56]	@ (80023ec <MX_DMA2D_Init+0x5c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80023b8:	4b0c      	ldr	r3, [pc, #48]	@ (80023ec <MX_DMA2D_Init+0x5c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80023be:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <MX_DMA2D_Init+0x5c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80023c4:	4809      	ldr	r0, [pc, #36]	@ (80023ec <MX_DMA2D_Init+0x5c>)
 80023c6:	f004 ff29 	bl	800721c <HAL_DMA2D_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80023d0:	f001 fcbe 	bl	8003d50 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80023d4:	2101      	movs	r1, #1
 80023d6:	4805      	ldr	r0, [pc, #20]	@ (80023ec <MX_DMA2D_Init+0x5c>)
 80023d8:	f005 f87a 	bl	80074d0 <HAL_DMA2D_ConfigLayer>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80023e2:	f001 fcb5 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	2000199c 	.word	0x2000199c
 80023f0:	4002b000 	.word	0x4002b000

080023f4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80023f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002478 <MX_ETH_Init+0x84>)
 80023fa:	4a20      	ldr	r2, [pc, #128]	@ (800247c <MX_ETH_Init+0x88>)
 80023fc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80023fe:	4b20      	ldr	r3, [pc, #128]	@ (8002480 <MX_ETH_Init+0x8c>)
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002404:	4b1e      	ldr	r3, [pc, #120]	@ (8002480 <MX_ETH_Init+0x8c>)
 8002406:	2280      	movs	r2, #128	@ 0x80
 8002408:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800240a:	4b1d      	ldr	r3, [pc, #116]	@ (8002480 <MX_ETH_Init+0x8c>)
 800240c:	22e1      	movs	r2, #225	@ 0xe1
 800240e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002410:	4b1b      	ldr	r3, [pc, #108]	@ (8002480 <MX_ETH_Init+0x8c>)
 8002412:	2200      	movs	r2, #0
 8002414:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002416:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <MX_ETH_Init+0x8c>)
 8002418:	2200      	movs	r2, #0
 800241a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800241c:	4b18      	ldr	r3, [pc, #96]	@ (8002480 <MX_ETH_Init+0x8c>)
 800241e:	2200      	movs	r2, #0
 8002420:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002422:	4b15      	ldr	r3, [pc, #84]	@ (8002478 <MX_ETH_Init+0x84>)
 8002424:	4a16      	ldr	r2, [pc, #88]	@ (8002480 <MX_ETH_Init+0x8c>)
 8002426:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002428:	4b13      	ldr	r3, [pc, #76]	@ (8002478 <MX_ETH_Init+0x84>)
 800242a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800242e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002430:	4b11      	ldr	r3, [pc, #68]	@ (8002478 <MX_ETH_Init+0x84>)
 8002432:	4a14      	ldr	r2, [pc, #80]	@ (8002484 <MX_ETH_Init+0x90>)
 8002434:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002436:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <MX_ETH_Init+0x84>)
 8002438:	4a13      	ldr	r2, [pc, #76]	@ (8002488 <MX_ETH_Init+0x94>)
 800243a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800243c:	4b0e      	ldr	r3, [pc, #56]	@ (8002478 <MX_ETH_Init+0x84>)
 800243e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002442:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002444:	480c      	ldr	r0, [pc, #48]	@ (8002478 <MX_ETH_Init+0x84>)
 8002446:	f005 f8d5 	bl	80075f4 <HAL_ETH_Init>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8002450:	f001 fc7e 	bl	8003d50 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002454:	2238      	movs	r2, #56	@ 0x38
 8002456:	2100      	movs	r1, #0
 8002458:	480c      	ldr	r0, [pc, #48]	@ (800248c <MX_ETH_Init+0x98>)
 800245a:	f015 f92d 	bl	80176b8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800245e:	4b0b      	ldr	r3, [pc, #44]	@ (800248c <MX_ETH_Init+0x98>)
 8002460:	2221      	movs	r2, #33	@ 0x21
 8002462:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002464:	4b09      	ldr	r3, [pc, #36]	@ (800248c <MX_ETH_Init+0x98>)
 8002466:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800246a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800246c:	4b07      	ldr	r3, [pc, #28]	@ (800248c <MX_ETH_Init+0x98>)
 800246e:	2200      	movs	r2, #0
 8002470:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200019dc 	.word	0x200019dc
 800247c:	40028000 	.word	0x40028000
 8002480:	20002410 	.word	0x20002410
 8002484:	20000170 	.word	0x20000170
 8002488:	200000d0 	.word	0x200000d0
 800248c:	200018a8 	.word	0x200018a8

08002490 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002494:	4b1b      	ldr	r3, [pc, #108]	@ (8002504 <MX_I2C1_Init+0x74>)
 8002496:	4a1c      	ldr	r2, [pc, #112]	@ (8002508 <MX_I2C1_Init+0x78>)
 8002498:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800249a:	4b1a      	ldr	r3, [pc, #104]	@ (8002504 <MX_I2C1_Init+0x74>)
 800249c:	4a1b      	ldr	r2, [pc, #108]	@ (800250c <MX_I2C1_Init+0x7c>)
 800249e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80024a0:	4b18      	ldr	r3, [pc, #96]	@ (8002504 <MX_I2C1_Init+0x74>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024a6:	4b17      	ldr	r3, [pc, #92]	@ (8002504 <MX_I2C1_Init+0x74>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024ac:	4b15      	ldr	r3, [pc, #84]	@ (8002504 <MX_I2C1_Init+0x74>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80024b2:	4b14      	ldr	r3, [pc, #80]	@ (8002504 <MX_I2C1_Init+0x74>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024b8:	4b12      	ldr	r3, [pc, #72]	@ (8002504 <MX_I2C1_Init+0x74>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024be:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <MX_I2C1_Init+0x74>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002504 <MX_I2C1_Init+0x74>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024ca:	480e      	ldr	r0, [pc, #56]	@ (8002504 <MX_I2C1_Init+0x74>)
 80024cc:	f007 fb64 	bl	8009b98 <HAL_I2C_Init>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80024d6:	f001 fc3b 	bl	8003d50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024da:	2100      	movs	r1, #0
 80024dc:	4809      	ldr	r0, [pc, #36]	@ (8002504 <MX_I2C1_Init+0x74>)
 80024de:	f007 fbf7 	bl	8009cd0 <HAL_I2CEx_ConfigAnalogFilter>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80024e8:	f001 fc32 	bl	8003d50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80024ec:	2100      	movs	r1, #0
 80024ee:	4805      	ldr	r0, [pc, #20]	@ (8002504 <MX_I2C1_Init+0x74>)
 80024f0:	f007 fc39 	bl	8009d66 <HAL_I2CEx_ConfigDigitalFilter>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80024fa:	f001 fc29 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20001a8c 	.word	0x20001a8c
 8002508:	40005400 	.word	0x40005400
 800250c:	00c0eaff 	.word	0x00c0eaff

08002510 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002514:	4b1b      	ldr	r3, [pc, #108]	@ (8002584 <MX_I2C3_Init+0x74>)
 8002516:	4a1c      	ldr	r2, [pc, #112]	@ (8002588 <MX_I2C3_Init+0x78>)
 8002518:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800251a:	4b1a      	ldr	r3, [pc, #104]	@ (8002584 <MX_I2C3_Init+0x74>)
 800251c:	4a1b      	ldr	r2, [pc, #108]	@ (800258c <MX_I2C3_Init+0x7c>)
 800251e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002520:	4b18      	ldr	r3, [pc, #96]	@ (8002584 <MX_I2C3_Init+0x74>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002526:	4b17      	ldr	r3, [pc, #92]	@ (8002584 <MX_I2C3_Init+0x74>)
 8002528:	2201      	movs	r2, #1
 800252a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800252c:	4b15      	ldr	r3, [pc, #84]	@ (8002584 <MX_I2C3_Init+0x74>)
 800252e:	2200      	movs	r2, #0
 8002530:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002532:	4b14      	ldr	r3, [pc, #80]	@ (8002584 <MX_I2C3_Init+0x74>)
 8002534:	2200      	movs	r2, #0
 8002536:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002538:	4b12      	ldr	r3, [pc, #72]	@ (8002584 <MX_I2C3_Init+0x74>)
 800253a:	2200      	movs	r2, #0
 800253c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800253e:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <MX_I2C3_Init+0x74>)
 8002540:	2200      	movs	r2, #0
 8002542:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002544:	4b0f      	ldr	r3, [pc, #60]	@ (8002584 <MX_I2C3_Init+0x74>)
 8002546:	2200      	movs	r2, #0
 8002548:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800254a:	480e      	ldr	r0, [pc, #56]	@ (8002584 <MX_I2C3_Init+0x74>)
 800254c:	f007 fb24 	bl	8009b98 <HAL_I2C_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002556:	f001 fbfb 	bl	8003d50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800255a:	2100      	movs	r1, #0
 800255c:	4809      	ldr	r0, [pc, #36]	@ (8002584 <MX_I2C3_Init+0x74>)
 800255e:	f007 fbb7 	bl	8009cd0 <HAL_I2CEx_ConfigAnalogFilter>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002568:	f001 fbf2 	bl	8003d50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800256c:	2100      	movs	r1, #0
 800256e:	4805      	ldr	r0, [pc, #20]	@ (8002584 <MX_I2C3_Init+0x74>)
 8002570:	f007 fbf9 	bl	8009d66 <HAL_I2CEx_ConfigDigitalFilter>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800257a:	f001 fbe9 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20001ae0 	.word	0x20001ae0
 8002588:	40005c00 	.word	0x40005c00
 800258c:	00c0eaff 	.word	0x00c0eaff

08002590 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08e      	sub	sp, #56	@ 0x38
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	2234      	movs	r2, #52	@ 0x34
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f015 f88b 	bl	80176b8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80025a2:	4b3a      	ldr	r3, [pc, #232]	@ (800268c <MX_LTDC_Init+0xfc>)
 80025a4:	4a3a      	ldr	r2, [pc, #232]	@ (8002690 <MX_LTDC_Init+0x100>)
 80025a6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80025a8:	4b38      	ldr	r3, [pc, #224]	@ (800268c <MX_LTDC_Init+0xfc>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80025ae:	4b37      	ldr	r3, [pc, #220]	@ (800268c <MX_LTDC_Init+0xfc>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80025b4:	4b35      	ldr	r3, [pc, #212]	@ (800268c <MX_LTDC_Init+0xfc>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80025ba:	4b34      	ldr	r3, [pc, #208]	@ (800268c <MX_LTDC_Init+0xfc>)
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80025c0:	4b32      	ldr	r3, [pc, #200]	@ (800268c <MX_LTDC_Init+0xfc>)
 80025c2:	2228      	movs	r2, #40	@ 0x28
 80025c4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80025c6:	4b31      	ldr	r3, [pc, #196]	@ (800268c <MX_LTDC_Init+0xfc>)
 80025c8:	2209      	movs	r2, #9
 80025ca:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80025cc:	4b2f      	ldr	r3, [pc, #188]	@ (800268c <MX_LTDC_Init+0xfc>)
 80025ce:	2235      	movs	r2, #53	@ 0x35
 80025d0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80025d2:	4b2e      	ldr	r3, [pc, #184]	@ (800268c <MX_LTDC_Init+0xfc>)
 80025d4:	220b      	movs	r2, #11
 80025d6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80025d8:	4b2c      	ldr	r3, [pc, #176]	@ (800268c <MX_LTDC_Init+0xfc>)
 80025da:	f240 2215 	movw	r2, #533	@ 0x215
 80025de:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80025e0:	4b2a      	ldr	r3, [pc, #168]	@ (800268c <MX_LTDC_Init+0xfc>)
 80025e2:	f240 121b 	movw	r2, #283	@ 0x11b
 80025e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 80025e8:	4b28      	ldr	r3, [pc, #160]	@ (800268c <MX_LTDC_Init+0xfc>)
 80025ea:	f240 2235 	movw	r2, #565	@ 0x235
 80025ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 80025f0:	4b26      	ldr	r3, [pc, #152]	@ (800268c <MX_LTDC_Init+0xfc>)
 80025f2:	f240 121d 	movw	r2, #285	@ 0x11d
 80025f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80025f8:	4b24      	ldr	r3, [pc, #144]	@ (800268c <MX_LTDC_Init+0xfc>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002600:	4b22      	ldr	r3, [pc, #136]	@ (800268c <MX_LTDC_Init+0xfc>)
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002608:	4b20      	ldr	r3, [pc, #128]	@ (800268c <MX_LTDC_Init+0xfc>)
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002610:	481e      	ldr	r0, [pc, #120]	@ (800268c <MX_LTDC_Init+0xfc>)
 8002612:	f007 fbf4 	bl	8009dfe <HAL_LTDC_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800261c:	f001 fb98 	bl	8003d50 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002624:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002628:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800262e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002632:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002634:	2302      	movs	r3, #2
 8002636:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002638:	23ff      	movs	r3, #255	@ 0xff
 800263a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002640:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002644:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002646:	2307      	movs	r3, #7
 8002648:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800264a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800264e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8002650:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002654:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8002656:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800265a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800266e:	1d3b      	adds	r3, r7, #4
 8002670:	2200      	movs	r2, #0
 8002672:	4619      	mov	r1, r3
 8002674:	4805      	ldr	r0, [pc, #20]	@ (800268c <MX_LTDC_Init+0xfc>)
 8002676:	f007 fd21 	bl	800a0bc <HAL_LTDC_ConfigLayer>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8002680:	f001 fb66 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002684:	bf00      	nop
 8002686:	3738      	adds	r7, #56	@ 0x38
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20001b34 	.word	0x20001b34
 8002690:	40016800 	.word	0x40016800

08002694 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002698:	4b12      	ldr	r3, [pc, #72]	@ (80026e4 <MX_QUADSPI_Init+0x50>)
 800269a:	4a13      	ldr	r2, [pc, #76]	@ (80026e8 <MX_QUADSPI_Init+0x54>)
 800269c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800269e:	4b11      	ldr	r3, [pc, #68]	@ (80026e4 <MX_QUADSPI_Init+0x50>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80026a4:	4b0f      	ldr	r3, [pc, #60]	@ (80026e4 <MX_QUADSPI_Init+0x50>)
 80026a6:	2204      	movs	r2, #4
 80026a8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80026aa:	4b0e      	ldr	r3, [pc, #56]	@ (80026e4 <MX_QUADSPI_Init+0x50>)
 80026ac:	2210      	movs	r2, #16
 80026ae:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80026b0:	4b0c      	ldr	r3, [pc, #48]	@ (80026e4 <MX_QUADSPI_Init+0x50>)
 80026b2:	2218      	movs	r2, #24
 80026b4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80026b6:	4b0b      	ldr	r3, [pc, #44]	@ (80026e4 <MX_QUADSPI_Init+0x50>)
 80026b8:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80026bc:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80026be:	4b09      	ldr	r3, [pc, #36]	@ (80026e4 <MX_QUADSPI_Init+0x50>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80026c4:	4b07      	ldr	r3, [pc, #28]	@ (80026e4 <MX_QUADSPI_Init+0x50>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80026ca:	4b06      	ldr	r3, [pc, #24]	@ (80026e4 <MX_QUADSPI_Init+0x50>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80026d0:	4804      	ldr	r0, [pc, #16]	@ (80026e4 <MX_QUADSPI_Init+0x50>)
 80026d2:	f007 ff07 	bl	800a4e4 <HAL_QSPI_Init>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80026dc:	f001 fb38 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20001bdc 	.word	0x20001bdc
 80026e8:	a0001000 	.word	0xa0001000

080026ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b090      	sub	sp, #64	@ 0x40
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80026f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	60da      	str	r2, [r3, #12]
 8002700:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002702:	2300      	movs	r3, #0
 8002704:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002706:	463b      	mov	r3, r7
 8002708:	2228      	movs	r2, #40	@ 0x28
 800270a:	2100      	movs	r1, #0
 800270c:	4618      	mov	r0, r3
 800270e:	f014 ffd3 	bl	80176b8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002712:	4b46      	ldr	r3, [pc, #280]	@ (800282c <MX_RTC_Init+0x140>)
 8002714:	4a46      	ldr	r2, [pc, #280]	@ (8002830 <MX_RTC_Init+0x144>)
 8002716:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002718:	4b44      	ldr	r3, [pc, #272]	@ (800282c <MX_RTC_Init+0x140>)
 800271a:	2200      	movs	r2, #0
 800271c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800271e:	4b43      	ldr	r3, [pc, #268]	@ (800282c <MX_RTC_Init+0x140>)
 8002720:	227f      	movs	r2, #127	@ 0x7f
 8002722:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002724:	4b41      	ldr	r3, [pc, #260]	@ (800282c <MX_RTC_Init+0x140>)
 8002726:	22ff      	movs	r2, #255	@ 0xff
 8002728:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800272a:	4b40      	ldr	r3, [pc, #256]	@ (800282c <MX_RTC_Init+0x140>)
 800272c:	2200      	movs	r2, #0
 800272e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002730:	4b3e      	ldr	r3, [pc, #248]	@ (800282c <MX_RTC_Init+0x140>)
 8002732:	2200      	movs	r2, #0
 8002734:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002736:	4b3d      	ldr	r3, [pc, #244]	@ (800282c <MX_RTC_Init+0x140>)
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800273c:	483b      	ldr	r0, [pc, #236]	@ (800282c <MX_RTC_Init+0x140>)
 800273e:	f009 f97f 	bl	800ba40 <HAL_RTC_Init>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002748:	f001 fb02 	bl	8003d50 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800274c:	2300      	movs	r3, #0
 800274e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8002752:	2300      	movs	r3, #0
 8002754:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8002758:	2300      	movs	r3, #0
 800275a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800275e:	2300      	movs	r3, #0
 8002760:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002766:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800276a:	2201      	movs	r2, #1
 800276c:	4619      	mov	r1, r3
 800276e:	482f      	ldr	r0, [pc, #188]	@ (800282c <MX_RTC_Init+0x140>)
 8002770:	f009 f9e8 	bl	800bb44 <HAL_RTC_SetTime>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800277a:	f001 fae9 	bl	8003d50 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800277e:	2301      	movs	r3, #1
 8002780:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002784:	2301      	movs	r3, #1
 8002786:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 800278a:	2301      	movs	r3, #1
 800278c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8002790:	2300      	movs	r3, #0
 8002792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002796:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800279a:	2201      	movs	r2, #1
 800279c:	4619      	mov	r1, r3
 800279e:	4823      	ldr	r0, [pc, #140]	@ (800282c <MX_RTC_Init+0x140>)
 80027a0:	f009 fa6a 	bl	800bc78 <HAL_RTC_SetDate>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80027aa:	f001 fad1 	bl	8003d50 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80027d2:	2301      	movs	r3, #1
 80027d4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80027d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80027de:	463b      	mov	r3, r7
 80027e0:	2201      	movs	r2, #1
 80027e2:	4619      	mov	r1, r3
 80027e4:	4811      	ldr	r0, [pc, #68]	@ (800282c <MX_RTC_Init+0x140>)
 80027e6:	f009 facb 	bl	800bd80 <HAL_RTC_SetAlarm>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80027f0:	f001 faae 	bl	8003d50 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80027f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80027fa:	463b      	mov	r3, r7
 80027fc:	2201      	movs	r2, #1
 80027fe:	4619      	mov	r1, r3
 8002800:	480a      	ldr	r0, [pc, #40]	@ (800282c <MX_RTC_Init+0x140>)
 8002802:	f009 fabd 	bl	800bd80 <HAL_RTC_SetAlarm>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 800280c:	f001 faa0 	bl	8003d50 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002810:	2202      	movs	r2, #2
 8002812:	2100      	movs	r1, #0
 8002814:	4805      	ldr	r0, [pc, #20]	@ (800282c <MX_RTC_Init+0x140>)
 8002816:	f009 fc7d 	bl	800c114 <HAL_RTCEx_SetTimeStamp>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002820:	f001 fa96 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002824:	bf00      	nop
 8002826:	3740      	adds	r7, #64	@ 0x40
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20001c28 	.word	0x20001c28
 8002830:	40002800 	.word	0x40002800

08002834 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8002838:	4b4d      	ldr	r3, [pc, #308]	@ (8002970 <MX_SAI2_Init+0x13c>)
 800283a:	4a4e      	ldr	r2, [pc, #312]	@ (8002974 <MX_SAI2_Init+0x140>)
 800283c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800283e:	4b4c      	ldr	r3, [pc, #304]	@ (8002970 <MX_SAI2_Init+0x13c>)
 8002840:	2200      	movs	r2, #0
 8002842:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002844:	4b4a      	ldr	r3, [pc, #296]	@ (8002970 <MX_SAI2_Init+0x13c>)
 8002846:	2200      	movs	r2, #0
 8002848:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800284a:	4b49      	ldr	r3, [pc, #292]	@ (8002970 <MX_SAI2_Init+0x13c>)
 800284c:	2240      	movs	r2, #64	@ 0x40
 800284e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002850:	4b47      	ldr	r3, [pc, #284]	@ (8002970 <MX_SAI2_Init+0x13c>)
 8002852:	2200      	movs	r2, #0
 8002854:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002856:	4b46      	ldr	r3, [pc, #280]	@ (8002970 <MX_SAI2_Init+0x13c>)
 8002858:	2200      	movs	r2, #0
 800285a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800285c:	4b44      	ldr	r3, [pc, #272]	@ (8002970 <MX_SAI2_Init+0x13c>)
 800285e:	2200      	movs	r2, #0
 8002860:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002862:	4b43      	ldr	r3, [pc, #268]	@ (8002970 <MX_SAI2_Init+0x13c>)
 8002864:	2200      	movs	r2, #0
 8002866:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002868:	4b41      	ldr	r3, [pc, #260]	@ (8002970 <MX_SAI2_Init+0x13c>)
 800286a:	2200      	movs	r2, #0
 800286c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800286e:	4b40      	ldr	r3, [pc, #256]	@ (8002970 <MX_SAI2_Init+0x13c>)
 8002870:	2200      	movs	r2, #0
 8002872:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002874:	4b3e      	ldr	r3, [pc, #248]	@ (8002970 <MX_SAI2_Init+0x13c>)
 8002876:	4a40      	ldr	r2, [pc, #256]	@ (8002978 <MX_SAI2_Init+0x144>)
 8002878:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800287a:	4b3d      	ldr	r3, [pc, #244]	@ (8002970 <MX_SAI2_Init+0x13c>)
 800287c:	2200      	movs	r2, #0
 800287e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002880:	4b3b      	ldr	r3, [pc, #236]	@ (8002970 <MX_SAI2_Init+0x13c>)
 8002882:	2200      	movs	r2, #0
 8002884:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002886:	4b3a      	ldr	r3, [pc, #232]	@ (8002970 <MX_SAI2_Init+0x13c>)
 8002888:	2200      	movs	r2, #0
 800288a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800288c:	4b38      	ldr	r3, [pc, #224]	@ (8002970 <MX_SAI2_Init+0x13c>)
 800288e:	2200      	movs	r2, #0
 8002890:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8002892:	4b37      	ldr	r3, [pc, #220]	@ (8002970 <MX_SAI2_Init+0x13c>)
 8002894:	2208      	movs	r2, #8
 8002896:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8002898:	4b35      	ldr	r3, [pc, #212]	@ (8002970 <MX_SAI2_Init+0x13c>)
 800289a:	2201      	movs	r2, #1
 800289c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800289e:	4b34      	ldr	r3, [pc, #208]	@ (8002970 <MX_SAI2_Init+0x13c>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80028a4:	4b32      	ldr	r3, [pc, #200]	@ (8002970 <MX_SAI2_Init+0x13c>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80028aa:	4b31      	ldr	r3, [pc, #196]	@ (8002970 <MX_SAI2_Init+0x13c>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80028b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002970 <MX_SAI2_Init+0x13c>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80028b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002970 <MX_SAI2_Init+0x13c>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80028bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002970 <MX_SAI2_Init+0x13c>)
 80028be:	2201      	movs	r2, #1
 80028c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80028c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002970 <MX_SAI2_Init+0x13c>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80028c8:	4829      	ldr	r0, [pc, #164]	@ (8002970 <MX_SAI2_Init+0x13c>)
 80028ca:	f009 fc8b 	bl	800c1e4 <HAL_SAI_Init>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80028d4:	f001 fa3c 	bl	8003d50 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80028d8:	4b28      	ldr	r3, [pc, #160]	@ (800297c <MX_SAI2_Init+0x148>)
 80028da:	4a29      	ldr	r2, [pc, #164]	@ (8002980 <MX_SAI2_Init+0x14c>)
 80028dc:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80028de:	4b27      	ldr	r3, [pc, #156]	@ (800297c <MX_SAI2_Init+0x148>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80028e4:	4b25      	ldr	r3, [pc, #148]	@ (800297c <MX_SAI2_Init+0x148>)
 80028e6:	2203      	movs	r2, #3
 80028e8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80028ea:	4b24      	ldr	r3, [pc, #144]	@ (800297c <MX_SAI2_Init+0x148>)
 80028ec:	2240      	movs	r2, #64	@ 0x40
 80028ee:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80028f0:	4b22      	ldr	r3, [pc, #136]	@ (800297c <MX_SAI2_Init+0x148>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80028f6:	4b21      	ldr	r3, [pc, #132]	@ (800297c <MX_SAI2_Init+0x148>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80028fc:	4b1f      	ldr	r3, [pc, #124]	@ (800297c <MX_SAI2_Init+0x148>)
 80028fe:	2201      	movs	r2, #1
 8002900:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002902:	4b1e      	ldr	r3, [pc, #120]	@ (800297c <MX_SAI2_Init+0x148>)
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002908:	4b1c      	ldr	r3, [pc, #112]	@ (800297c <MX_SAI2_Init+0x148>)
 800290a:	2200      	movs	r2, #0
 800290c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800290e:	4b1b      	ldr	r3, [pc, #108]	@ (800297c <MX_SAI2_Init+0x148>)
 8002910:	2200      	movs	r2, #0
 8002912:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002914:	4b19      	ldr	r3, [pc, #100]	@ (800297c <MX_SAI2_Init+0x148>)
 8002916:	2200      	movs	r2, #0
 8002918:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800291a:	4b18      	ldr	r3, [pc, #96]	@ (800297c <MX_SAI2_Init+0x148>)
 800291c:	2200      	movs	r2, #0
 800291e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002920:	4b16      	ldr	r3, [pc, #88]	@ (800297c <MX_SAI2_Init+0x148>)
 8002922:	2200      	movs	r2, #0
 8002924:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8002926:	4b15      	ldr	r3, [pc, #84]	@ (800297c <MX_SAI2_Init+0x148>)
 8002928:	2208      	movs	r2, #8
 800292a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800292c:	4b13      	ldr	r3, [pc, #76]	@ (800297c <MX_SAI2_Init+0x148>)
 800292e:	2201      	movs	r2, #1
 8002930:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002932:	4b12      	ldr	r3, [pc, #72]	@ (800297c <MX_SAI2_Init+0x148>)
 8002934:	2200      	movs	r2, #0
 8002936:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002938:	4b10      	ldr	r3, [pc, #64]	@ (800297c <MX_SAI2_Init+0x148>)
 800293a:	2200      	movs	r2, #0
 800293c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800293e:	4b0f      	ldr	r3, [pc, #60]	@ (800297c <MX_SAI2_Init+0x148>)
 8002940:	2200      	movs	r2, #0
 8002942:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8002944:	4b0d      	ldr	r3, [pc, #52]	@ (800297c <MX_SAI2_Init+0x148>)
 8002946:	2200      	movs	r2, #0
 8002948:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800294a:	4b0c      	ldr	r3, [pc, #48]	@ (800297c <MX_SAI2_Init+0x148>)
 800294c:	2200      	movs	r2, #0
 800294e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8002950:	4b0a      	ldr	r3, [pc, #40]	@ (800297c <MX_SAI2_Init+0x148>)
 8002952:	2201      	movs	r2, #1
 8002954:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8002956:	4b09      	ldr	r3, [pc, #36]	@ (800297c <MX_SAI2_Init+0x148>)
 8002958:	2200      	movs	r2, #0
 800295a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800295c:	4807      	ldr	r0, [pc, #28]	@ (800297c <MX_SAI2_Init+0x148>)
 800295e:	f009 fc41 	bl	800c1e4 <HAL_SAI_Init>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8002968:	f001 f9f2 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800296c:	bf00      	nop
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20001c48 	.word	0x20001c48
 8002974:	40015c04 	.word	0x40015c04
 8002978:	0002ee00 	.word	0x0002ee00
 800297c:	20001ccc 	.word	0x20001ccc
 8002980:	40015c24 	.word	0x40015c24

08002984 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800298a:	4b13      	ldr	r3, [pc, #76]	@ (80029d8 <MX_SDMMC1_SD_Init+0x54>)
 800298c:	4a13      	ldr	r2, [pc, #76]	@ (80029dc <MX_SDMMC1_SD_Init+0x58>)
 800298e:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002990:	4b11      	ldr	r3, [pc, #68]	@ (80029d8 <MX_SDMMC1_SD_Init+0x54>)
 8002992:	2200      	movs	r2, #0
 8002994:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002996:	4b10      	ldr	r3, [pc, #64]	@ (80029d8 <MX_SDMMC1_SD_Init+0x54>)
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800299c:	4b0e      	ldr	r3, [pc, #56]	@ (80029d8 <MX_SDMMC1_SD_Init+0x54>)
 800299e:	2200      	movs	r2, #0
 80029a0:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;  // ST 커뮤니티 가이드: 1-bit 모드로 변경
 80029a2:	4b0d      	ldr	r3, [pc, #52]	@ (80029d8 <MX_SDMMC1_SD_Init+0x54>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;  // 하드웨어 플로우 컨트롤 활성화 (안정성 향상)
 80029a8:	4b0b      	ldr	r3, [pc, #44]	@ (80029d8 <MX_SDMMC1_SD_Init+0x54>)
 80029aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80029ae:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 8;  // 클럭 분주비 증가 (2→8, STM32F7 안정화 권장값)
 80029b0:	4b09      	ldr	r3, [pc, #36]	@ (80029d8 <MX_SDMMC1_SD_Init+0x54>)
 80029b2:	2208      	movs	r2, #8
 80029b4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  
  // Initialize SD card with HAL
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80029b6:	4808      	ldr	r0, [pc, #32]	@ (80029d8 <MX_SDMMC1_SD_Init+0x54>)
 80029b8:	f009 fdca 	bl	800c550 <HAL_SD_Init>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <MX_SDMMC1_SD_Init+0x42>
  {
    Error_Handler();
 80029c2:	f001 f9c5 	bl	8003d50 <Error_Handler>
  }
  
  // BSP 초기화도 호출 (FatFs 호환성을 위해)
  uint8_t bsp_result = BSP_SD_Init();
 80029c6:	f00e fec7 	bl	8011758 <BSP_SD_Init>
 80029ca:	4603      	mov	r3, r0
 80029cc:	71fb      	strb	r3, [r7, #7]
    // Error_Handler() 호출하지 않음
  }

  /* USER CODE END SDMMC1_Init 2 */

}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20001d50 	.word	0x20001d50
 80029dc:	40012c00 	.word	0x40012c00

080029e0 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80029e4:	4b15      	ldr	r3, [pc, #84]	@ (8002a3c <MX_SPDIFRX_Init+0x5c>)
 80029e6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80029ea:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80029ec:	4b13      	ldr	r3, [pc, #76]	@ (8002a3c <MX_SPDIFRX_Init+0x5c>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80029f2:	4b12      	ldr	r3, [pc, #72]	@ (8002a3c <MX_SPDIFRX_Init+0x5c>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80029f8:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <MX_SPDIFRX_Init+0x5c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80029fe:	4b0f      	ldr	r3, [pc, #60]	@ (8002a3c <MX_SPDIFRX_Init+0x5c>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8002a04:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <MX_SPDIFRX_Init+0x5c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8002a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a3c <MX_SPDIFRX_Init+0x5c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002a10:	4b0a      	ldr	r3, [pc, #40]	@ (8002a3c <MX_SPDIFRX_Init+0x5c>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8002a16:	4b09      	ldr	r3, [pc, #36]	@ (8002a3c <MX_SPDIFRX_Init+0x5c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8002a1c:	4b07      	ldr	r3, [pc, #28]	@ (8002a3c <MX_SPDIFRX_Init+0x5c>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002a22:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <MX_SPDIFRX_Init+0x5c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8002a28:	4804      	ldr	r0, [pc, #16]	@ (8002a3c <MX_SPDIFRX_Init+0x5c>)
 8002a2a:	f00a ff51 	bl	800d8d0 <HAL_SPDIFRX_Init>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8002a34:	f001 f98c 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8002a38:	bf00      	nop
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20001dd4 	.word	0x20001dd4

08002a40 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002a44:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a46:	4a1c      	ldr	r2, [pc, #112]	@ (8002ab8 <MX_SPI2_Init+0x78>)
 8002a48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a52:	4b18      	ldr	r3, [pc, #96]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002a58:	4b16      	ldr	r3, [pc, #88]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a5a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002a5e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a60:	4b14      	ldr	r3, [pc, #80]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a66:	4b13      	ldr	r3, [pc, #76]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002a6c:	4b11      	ldr	r3, [pc, #68]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a72:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a74:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a80:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a86:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002a8c:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a8e:	2207      	movs	r2, #7
 8002a90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a92:	4b08      	ldr	r3, [pc, #32]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a98:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a9a:	2208      	movs	r2, #8
 8002a9c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002a9e:	4805      	ldr	r0, [pc, #20]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002aa0:	f00a ff72 	bl	800d988 <HAL_SPI_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002aaa:	f001 f951 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20001e20 	.word	0x20001e20
 8002ab8:	40003800 	.word	0x40003800

08002abc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b09a      	sub	sp, #104	@ 0x68
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ac2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	605a      	str	r2, [r3, #4]
 8002acc:	609a      	str	r2, [r3, #8]
 8002ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ad0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002adc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	611a      	str	r2, [r3, #16]
 8002aec:	615a      	str	r2, [r3, #20]
 8002aee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002af0:	1d3b      	adds	r3, r7, #4
 8002af2:	222c      	movs	r2, #44	@ 0x2c
 8002af4:	2100      	movs	r1, #0
 8002af6:	4618      	mov	r0, r3
 8002af8:	f014 fdde 	bl	80176b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002afc:	4b43      	ldr	r3, [pc, #268]	@ (8002c0c <MX_TIM1_Init+0x150>)
 8002afe:	4a44      	ldr	r2, [pc, #272]	@ (8002c10 <MX_TIM1_Init+0x154>)
 8002b00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b02:	4b42      	ldr	r3, [pc, #264]	@ (8002c0c <MX_TIM1_Init+0x150>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b08:	4b40      	ldr	r3, [pc, #256]	@ (8002c0c <MX_TIM1_Init+0x150>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b0e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c0c <MX_TIM1_Init+0x150>)
 8002b10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b16:	4b3d      	ldr	r3, [pc, #244]	@ (8002c0c <MX_TIM1_Init+0x150>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c0c <MX_TIM1_Init+0x150>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b22:	4b3a      	ldr	r3, [pc, #232]	@ (8002c0c <MX_TIM1_Init+0x150>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b28:	4838      	ldr	r0, [pc, #224]	@ (8002c0c <MX_TIM1_Init+0x150>)
 8002b2a:	f00a ffd8 	bl	800dade <HAL_TIM_Base_Init>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002b34:	f001 f90c 	bl	8003d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b3e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002b42:	4619      	mov	r1, r3
 8002b44:	4831      	ldr	r0, [pc, #196]	@ (8002c0c <MX_TIM1_Init+0x150>)
 8002b46:	f00b fb0b 	bl	800e160 <HAL_TIM_ConfigClockSource>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002b50:	f001 f8fe 	bl	8003d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b54:	482d      	ldr	r0, [pc, #180]	@ (8002c0c <MX_TIM1_Init+0x150>)
 8002b56:	f00b f891 	bl	800dc7c <HAL_TIM_PWM_Init>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002b60:	f001 f8f6 	bl	8003d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b64:	2300      	movs	r3, #0
 8002b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b70:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002b74:	4619      	mov	r1, r3
 8002b76:	4825      	ldr	r0, [pc, #148]	@ (8002c0c <MX_TIM1_Init+0x150>)
 8002b78:	f00b ff82 	bl	800ea80 <HAL_TIMEx_MasterConfigSynchronization>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002b82:	f001 f8e5 	bl	8003d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b86:	2360      	movs	r3, #96	@ 0x60
 8002b88:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b92:	2300      	movs	r3, #0
 8002b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ba2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4818      	ldr	r0, [pc, #96]	@ (8002c0c <MX_TIM1_Init+0x150>)
 8002bac:	f00b f9c4 	bl	800df38 <HAL_TIM_PWM_ConfigChannel>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002bb6:	f001 f8cb 	bl	8003d50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bd2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002bdc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002be0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	4619      	mov	r1, r3
 8002bee:	4807      	ldr	r0, [pc, #28]	@ (8002c0c <MX_TIM1_Init+0x150>)
 8002bf0:	f00b ffd4 	bl	800eb9c <HAL_TIMEx_ConfigBreakDeadTime>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002bfa:	f001 f8a9 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002bfe:	4803      	ldr	r0, [pc, #12]	@ (8002c0c <MX_TIM1_Init+0x150>)
 8002c00:	f001 ff1a 	bl	8004a38 <HAL_TIM_MspPostInit>

}
 8002c04:	bf00      	nop
 8002c06:	3768      	adds	r7, #104	@ 0x68
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20001e84 	.word	0x20001e84
 8002c10:	40010000 	.word	0x40010000

08002c14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08e      	sub	sp, #56	@ 0x38
 8002c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	609a      	str	r2, [r3, #8]
 8002c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c28:	f107 031c 	add.w	r3, r7, #28
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c34:	463b      	mov	r3, r7
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	605a      	str	r2, [r3, #4]
 8002c3c:	609a      	str	r2, [r3, #8]
 8002c3e:	60da      	str	r2, [r3, #12]
 8002c40:	611a      	str	r2, [r3, #16]
 8002c42:	615a      	str	r2, [r3, #20]
 8002c44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c46:	4b2d      	ldr	r3, [pc, #180]	@ (8002cfc <MX_TIM2_Init+0xe8>)
 8002c48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002c4e:	4b2b      	ldr	r3, [pc, #172]	@ (8002cfc <MX_TIM2_Init+0xe8>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c54:	4b29      	ldr	r3, [pc, #164]	@ (8002cfc <MX_TIM2_Init+0xe8>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002c5a:	4b28      	ldr	r3, [pc, #160]	@ (8002cfc <MX_TIM2_Init+0xe8>)
 8002c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c62:	4b26      	ldr	r3, [pc, #152]	@ (8002cfc <MX_TIM2_Init+0xe8>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c68:	4b24      	ldr	r3, [pc, #144]	@ (8002cfc <MX_TIM2_Init+0xe8>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c6e:	4823      	ldr	r0, [pc, #140]	@ (8002cfc <MX_TIM2_Init+0xe8>)
 8002c70:	f00a ff35 	bl	800dade <HAL_TIM_Base_Init>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002c7a:	f001 f869 	bl	8003d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c82:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c88:	4619      	mov	r1, r3
 8002c8a:	481c      	ldr	r0, [pc, #112]	@ (8002cfc <MX_TIM2_Init+0xe8>)
 8002c8c:	f00b fa68 	bl	800e160 <HAL_TIM_ConfigClockSource>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002c96:	f001 f85b 	bl	8003d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002c9a:	4818      	ldr	r0, [pc, #96]	@ (8002cfc <MX_TIM2_Init+0xe8>)
 8002c9c:	f00a ffee 	bl	800dc7c <HAL_TIM_PWM_Init>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002ca6:	f001 f853 	bl	8003d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cb2:	f107 031c 	add.w	r3, r7, #28
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4810      	ldr	r0, [pc, #64]	@ (8002cfc <MX_TIM2_Init+0xe8>)
 8002cba:	f00b fee1 	bl	800ea80 <HAL_TIMEx_MasterConfigSynchronization>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002cc4:	f001 f844 	bl	8003d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cc8:	2360      	movs	r3, #96	@ 0x60
 8002cca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cd8:	463b      	mov	r3, r7
 8002cda:	2200      	movs	r2, #0
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4807      	ldr	r0, [pc, #28]	@ (8002cfc <MX_TIM2_Init+0xe8>)
 8002ce0:	f00b f92a 	bl	800df38 <HAL_TIM_PWM_ConfigChannel>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002cea:	f001 f831 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002cee:	4803      	ldr	r0, [pc, #12]	@ (8002cfc <MX_TIM2_Init+0xe8>)
 8002cf0:	f001 fea2 	bl	8004a38 <HAL_TIM_MspPostInit>

}
 8002cf4:	bf00      	nop
 8002cf6:	3738      	adds	r7, #56	@ 0x38
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20001ed0 	.word	0x20001ed0

08002d00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08e      	sub	sp, #56	@ 0x38
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	605a      	str	r2, [r3, #4]
 8002d10:	609a      	str	r2, [r3, #8]
 8002d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d14:	f107 031c 	add.w	r3, r7, #28
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d20:	463b      	mov	r3, r7
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]
 8002d28:	609a      	str	r2, [r3, #8]
 8002d2a:	60da      	str	r2, [r3, #12]
 8002d2c:	611a      	str	r2, [r3, #16]
 8002d2e:	615a      	str	r2, [r3, #20]
 8002d30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d32:	4b2d      	ldr	r3, [pc, #180]	@ (8002de8 <MX_TIM3_Init+0xe8>)
 8002d34:	4a2d      	ldr	r2, [pc, #180]	@ (8002dec <MX_TIM3_Init+0xec>)
 8002d36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002d38:	4b2b      	ldr	r3, [pc, #172]	@ (8002de8 <MX_TIM3_Init+0xe8>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8002de8 <MX_TIM3_Init+0xe8>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002d44:	4b28      	ldr	r3, [pc, #160]	@ (8002de8 <MX_TIM3_Init+0xe8>)
 8002d46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d4c:	4b26      	ldr	r3, [pc, #152]	@ (8002de8 <MX_TIM3_Init+0xe8>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d52:	4b25      	ldr	r3, [pc, #148]	@ (8002de8 <MX_TIM3_Init+0xe8>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d58:	4823      	ldr	r0, [pc, #140]	@ (8002de8 <MX_TIM3_Init+0xe8>)
 8002d5a:	f00a fec0 	bl	800dade <HAL_TIM_Base_Init>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002d64:	f000 fff4 	bl	8003d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d72:	4619      	mov	r1, r3
 8002d74:	481c      	ldr	r0, [pc, #112]	@ (8002de8 <MX_TIM3_Init+0xe8>)
 8002d76:	f00b f9f3 	bl	800e160 <HAL_TIM_ConfigClockSource>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002d80:	f000 ffe6 	bl	8003d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d84:	4818      	ldr	r0, [pc, #96]	@ (8002de8 <MX_TIM3_Init+0xe8>)
 8002d86:	f00a ff79 	bl	800dc7c <HAL_TIM_PWM_Init>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002d90:	f000 ffde 	bl	8003d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d94:	2300      	movs	r3, #0
 8002d96:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d9c:	f107 031c 	add.w	r3, r7, #28
 8002da0:	4619      	mov	r1, r3
 8002da2:	4811      	ldr	r0, [pc, #68]	@ (8002de8 <MX_TIM3_Init+0xe8>)
 8002da4:	f00b fe6c 	bl	800ea80 <HAL_TIMEx_MasterConfigSynchronization>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002dae:	f000 ffcf 	bl	8003d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002db2:	2360      	movs	r3, #96	@ 0x60
 8002db4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dc2:	463b      	mov	r3, r7
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4807      	ldr	r0, [pc, #28]	@ (8002de8 <MX_TIM3_Init+0xe8>)
 8002dca:	f00b f8b5 	bl	800df38 <HAL_TIM_PWM_ConfigChannel>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002dd4:	f000 ffbc 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002dd8:	4803      	ldr	r0, [pc, #12]	@ (8002de8 <MX_TIM3_Init+0xe8>)
 8002dda:	f001 fe2d 	bl	8004a38 <HAL_TIM_MspPostInit>

}
 8002dde:	bf00      	nop
 8002de0:	3738      	adds	r7, #56	@ 0x38
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20001f1c 	.word	0x20001f1c
 8002dec:	40000400 	.word	0x40000400

08002df0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08e      	sub	sp, #56	@ 0x38
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002df6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	605a      	str	r2, [r3, #4]
 8002e00:	609a      	str	r2, [r3, #8]
 8002e02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e04:	f107 031c 	add.w	r3, r7, #28
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e10:	463b      	mov	r3, r7
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]
 8002e18:	609a      	str	r2, [r3, #8]
 8002e1a:	60da      	str	r2, [r3, #12]
 8002e1c:	611a      	str	r2, [r3, #16]
 8002e1e:	615a      	str	r2, [r3, #20]
 8002e20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002e22:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed8 <MX_TIM5_Init+0xe8>)
 8002e24:	4a2d      	ldr	r2, [pc, #180]	@ (8002edc <MX_TIM5_Init+0xec>)
 8002e26:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002e28:	4b2b      	ldr	r3, [pc, #172]	@ (8002ed8 <MX_TIM5_Init+0xe8>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ed8 <MX_TIM5_Init+0xe8>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002e34:	4b28      	ldr	r3, [pc, #160]	@ (8002ed8 <MX_TIM5_Init+0xe8>)
 8002e36:	f04f 32ff 	mov.w	r2, #4294967295
 8002e3a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e3c:	4b26      	ldr	r3, [pc, #152]	@ (8002ed8 <MX_TIM5_Init+0xe8>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e42:	4b25      	ldr	r3, [pc, #148]	@ (8002ed8 <MX_TIM5_Init+0xe8>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002e48:	4823      	ldr	r0, [pc, #140]	@ (8002ed8 <MX_TIM5_Init+0xe8>)
 8002e4a:	f00a fe48 	bl	800dade <HAL_TIM_Base_Init>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002e54:	f000 ff7c 	bl	8003d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002e5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e62:	4619      	mov	r1, r3
 8002e64:	481c      	ldr	r0, [pc, #112]	@ (8002ed8 <MX_TIM5_Init+0xe8>)
 8002e66:	f00b f97b 	bl	800e160 <HAL_TIM_ConfigClockSource>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002e70:	f000 ff6e 	bl	8003d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002e74:	4818      	ldr	r0, [pc, #96]	@ (8002ed8 <MX_TIM5_Init+0xe8>)
 8002e76:	f00a ff01 	bl	800dc7c <HAL_TIM_PWM_Init>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002e80:	f000 ff66 	bl	8003d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e8c:	f107 031c 	add.w	r3, r7, #28
 8002e90:	4619      	mov	r1, r3
 8002e92:	4811      	ldr	r0, [pc, #68]	@ (8002ed8 <MX_TIM5_Init+0xe8>)
 8002e94:	f00b fdf4 	bl	800ea80 <HAL_TIMEx_MasterConfigSynchronization>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002e9e:	f000 ff57 	bl	8003d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ea2:	2360      	movs	r3, #96	@ 0x60
 8002ea4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002eb2:	463b      	mov	r3, r7
 8002eb4:	220c      	movs	r2, #12
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4807      	ldr	r0, [pc, #28]	@ (8002ed8 <MX_TIM5_Init+0xe8>)
 8002eba:	f00b f83d 	bl	800df38 <HAL_TIM_PWM_ConfigChannel>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002ec4:	f000 ff44 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002ec8:	4803      	ldr	r0, [pc, #12]	@ (8002ed8 <MX_TIM5_Init+0xe8>)
 8002eca:	f001 fdb5 	bl	8004a38 <HAL_TIM_MspPostInit>

}
 8002ece:	bf00      	nop
 8002ed0:	3738      	adds	r7, #56	@ 0x38
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20001f68 	.word	0x20001f68
 8002edc:	40000c00 	.word	0x40000c00

08002ee0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ee6:	f107 0310 	add.w	r3, r7, #16
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	605a      	str	r2, [r3, #4]
 8002ef0:	609a      	str	r2, [r3, #8]
 8002ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ef4:	1d3b      	adds	r3, r7, #4
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002efe:	4b20      	ldr	r3, [pc, #128]	@ (8002f80 <MX_TIM8_Init+0xa0>)
 8002f00:	4a20      	ldr	r2, [pc, #128]	@ (8002f84 <MX_TIM8_Init+0xa4>)
 8002f02:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002f04:	4b1e      	ldr	r3, [pc, #120]	@ (8002f80 <MX_TIM8_Init+0xa0>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002f80 <MX_TIM8_Init+0xa0>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002f10:	4b1b      	ldr	r3, [pc, #108]	@ (8002f80 <MX_TIM8_Init+0xa0>)
 8002f12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f16:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f18:	4b19      	ldr	r3, [pc, #100]	@ (8002f80 <MX_TIM8_Init+0xa0>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002f1e:	4b18      	ldr	r3, [pc, #96]	@ (8002f80 <MX_TIM8_Init+0xa0>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f24:	4b16      	ldr	r3, [pc, #88]	@ (8002f80 <MX_TIM8_Init+0xa0>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002f2a:	4815      	ldr	r0, [pc, #84]	@ (8002f80 <MX_TIM8_Init+0xa0>)
 8002f2c:	f00a fdd7 	bl	800dade <HAL_TIM_Base_Init>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002f36:	f000 ff0b 	bl	8003d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002f40:	f107 0310 	add.w	r3, r7, #16
 8002f44:	4619      	mov	r1, r3
 8002f46:	480e      	ldr	r0, [pc, #56]	@ (8002f80 <MX_TIM8_Init+0xa0>)
 8002f48:	f00b f90a 	bl	800e160 <HAL_TIM_ConfigClockSource>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002f52:	f000 fefd 	bl	8003d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f56:	2300      	movs	r3, #0
 8002f58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002f62:	1d3b      	adds	r3, r7, #4
 8002f64:	4619      	mov	r1, r3
 8002f66:	4806      	ldr	r0, [pc, #24]	@ (8002f80 <MX_TIM8_Init+0xa0>)
 8002f68:	f00b fd8a 	bl	800ea80 <HAL_TIMEx_MasterConfigSynchronization>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002f72:	f000 feed 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002f76:	bf00      	nop
 8002f78:	3720      	adds	r7, #32
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20001fb4 	.word	0x20001fb4
 8002f84:	40010400 	.word	0x40010400

08002f88 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f8e:	1d3b      	adds	r3, r7, #4
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
 8002f9c:	615a      	str	r2, [r3, #20]
 8002f9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800300c <MX_TIM12_Init+0x84>)
 8002fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8003010 <MX_TIM12_Init+0x88>)
 8002fa4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002fa6:	4b19      	ldr	r3, [pc, #100]	@ (800300c <MX_TIM12_Init+0x84>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fac:	4b17      	ldr	r3, [pc, #92]	@ (800300c <MX_TIM12_Init+0x84>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002fb2:	4b16      	ldr	r3, [pc, #88]	@ (800300c <MX_TIM12_Init+0x84>)
 8002fb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fb8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fba:	4b14      	ldr	r3, [pc, #80]	@ (800300c <MX_TIM12_Init+0x84>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fc0:	4b12      	ldr	r3, [pc, #72]	@ (800300c <MX_TIM12_Init+0x84>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002fc6:	4811      	ldr	r0, [pc, #68]	@ (800300c <MX_TIM12_Init+0x84>)
 8002fc8:	f00a fe58 	bl	800dc7c <HAL_TIM_PWM_Init>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002fd2:	f000 febd 	bl	8003d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fd6:	2360      	movs	r3, #96	@ 0x60
 8002fd8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fe6:	1d3b      	adds	r3, r7, #4
 8002fe8:	2200      	movs	r2, #0
 8002fea:	4619      	mov	r1, r3
 8002fec:	4807      	ldr	r0, [pc, #28]	@ (800300c <MX_TIM12_Init+0x84>)
 8002fee:	f00a ffa3 	bl	800df38 <HAL_TIM_PWM_ConfigChannel>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002ff8:	f000 feaa 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002ffc:	4803      	ldr	r0, [pc, #12]	@ (800300c <MX_TIM12_Init+0x84>)
 8002ffe:	f001 fd1b 	bl	8004a38 <HAL_TIM_MspPostInit>

}
 8003002:	bf00      	nop
 8003004:	3720      	adds	r7, #32
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20002000 	.word	0x20002000
 8003010:	40001800 	.word	0x40001800

08003014 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003018:	4b14      	ldr	r3, [pc, #80]	@ (800306c <MX_USART1_UART_Init+0x58>)
 800301a:	4a15      	ldr	r2, [pc, #84]	@ (8003070 <MX_USART1_UART_Init+0x5c>)
 800301c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800301e:	4b13      	ldr	r3, [pc, #76]	@ (800306c <MX_USART1_UART_Init+0x58>)
 8003020:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003024:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003026:	4b11      	ldr	r3, [pc, #68]	@ (800306c <MX_USART1_UART_Init+0x58>)
 8003028:	2200      	movs	r2, #0
 800302a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800302c:	4b0f      	ldr	r3, [pc, #60]	@ (800306c <MX_USART1_UART_Init+0x58>)
 800302e:	2200      	movs	r2, #0
 8003030:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003032:	4b0e      	ldr	r3, [pc, #56]	@ (800306c <MX_USART1_UART_Init+0x58>)
 8003034:	2200      	movs	r2, #0
 8003036:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003038:	4b0c      	ldr	r3, [pc, #48]	@ (800306c <MX_USART1_UART_Init+0x58>)
 800303a:	220c      	movs	r2, #12
 800303c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800303e:	4b0b      	ldr	r3, [pc, #44]	@ (800306c <MX_USART1_UART_Init+0x58>)
 8003040:	2200      	movs	r2, #0
 8003042:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003044:	4b09      	ldr	r3, [pc, #36]	@ (800306c <MX_USART1_UART_Init+0x58>)
 8003046:	2200      	movs	r2, #0
 8003048:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800304a:	4b08      	ldr	r3, [pc, #32]	@ (800306c <MX_USART1_UART_Init+0x58>)
 800304c:	2200      	movs	r2, #0
 800304e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003050:	4b06      	ldr	r3, [pc, #24]	@ (800306c <MX_USART1_UART_Init+0x58>)
 8003052:	2200      	movs	r2, #0
 8003054:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003056:	4805      	ldr	r0, [pc, #20]	@ (800306c <MX_USART1_UART_Init+0x58>)
 8003058:	f00b fe3c 	bl	800ecd4 <HAL_UART_Init>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003062:	f000 fe75 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	2000204c 	.word	0x2000204c
 8003070:	40011000 	.word	0x40011000

08003074 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003078:	4b14      	ldr	r3, [pc, #80]	@ (80030cc <MX_USART6_UART_Init+0x58>)
 800307a:	4a15      	ldr	r2, [pc, #84]	@ (80030d0 <MX_USART6_UART_Init+0x5c>)
 800307c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800307e:	4b13      	ldr	r3, [pc, #76]	@ (80030cc <MX_USART6_UART_Init+0x58>)
 8003080:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003084:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003086:	4b11      	ldr	r3, [pc, #68]	@ (80030cc <MX_USART6_UART_Init+0x58>)
 8003088:	2200      	movs	r2, #0
 800308a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800308c:	4b0f      	ldr	r3, [pc, #60]	@ (80030cc <MX_USART6_UART_Init+0x58>)
 800308e:	2200      	movs	r2, #0
 8003090:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003092:	4b0e      	ldr	r3, [pc, #56]	@ (80030cc <MX_USART6_UART_Init+0x58>)
 8003094:	2200      	movs	r2, #0
 8003096:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003098:	4b0c      	ldr	r3, [pc, #48]	@ (80030cc <MX_USART6_UART_Init+0x58>)
 800309a:	220c      	movs	r2, #12
 800309c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800309e:	4b0b      	ldr	r3, [pc, #44]	@ (80030cc <MX_USART6_UART_Init+0x58>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80030a4:	4b09      	ldr	r3, [pc, #36]	@ (80030cc <MX_USART6_UART_Init+0x58>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030aa:	4b08      	ldr	r3, [pc, #32]	@ (80030cc <MX_USART6_UART_Init+0x58>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030b0:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <MX_USART6_UART_Init+0x58>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80030b6:	4805      	ldr	r0, [pc, #20]	@ (80030cc <MX_USART6_UART_Init+0x58>)
 80030b8:	f00b fe0c 	bl	800ecd4 <HAL_UART_Init>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80030c2:	f000 fe45 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	200020d4 	.word	0x200020d4
 80030d0:	40011400 	.word	0x40011400

080030d4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b088      	sub	sp, #32
 80030d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80030da:	1d3b      	adds	r3, r7, #4
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	60da      	str	r2, [r3, #12]
 80030e6:	611a      	str	r2, [r3, #16]
 80030e8:	615a      	str	r2, [r3, #20]
 80030ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80030ec:	4b1f      	ldr	r3, [pc, #124]	@ (800316c <MX_FMC_Init+0x98>)
 80030ee:	4a20      	ldr	r2, [pc, #128]	@ (8003170 <MX_FMC_Init+0x9c>)
 80030f0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80030f2:	4b1e      	ldr	r3, [pc, #120]	@ (800316c <MX_FMC_Init+0x98>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80030f8:	4b1c      	ldr	r3, [pc, #112]	@ (800316c <MX_FMC_Init+0x98>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80030fe:	4b1b      	ldr	r3, [pc, #108]	@ (800316c <MX_FMC_Init+0x98>)
 8003100:	2204      	movs	r2, #4
 8003102:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003104:	4b19      	ldr	r3, [pc, #100]	@ (800316c <MX_FMC_Init+0x98>)
 8003106:	2210      	movs	r2, #16
 8003108:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800310a:	4b18      	ldr	r3, [pc, #96]	@ (800316c <MX_FMC_Init+0x98>)
 800310c:	2240      	movs	r2, #64	@ 0x40
 800310e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8003110:	4b16      	ldr	r3, [pc, #88]	@ (800316c <MX_FMC_Init+0x98>)
 8003112:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8003116:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003118:	4b14      	ldr	r3, [pc, #80]	@ (800316c <MX_FMC_Init+0x98>)
 800311a:	2200      	movs	r2, #0
 800311c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800311e:	4b13      	ldr	r3, [pc, #76]	@ (800316c <MX_FMC_Init+0x98>)
 8003120:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003124:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8003126:	4b11      	ldr	r3, [pc, #68]	@ (800316c <MX_FMC_Init+0x98>)
 8003128:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800312c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800312e:	4b0f      	ldr	r3, [pc, #60]	@ (800316c <MX_FMC_Init+0x98>)
 8003130:	2200      	movs	r2, #0
 8003132:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8003134:	2302      	movs	r3, #2
 8003136:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8003138:	2307      	movs	r3, #7
 800313a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800313c:	2304      	movs	r3, #4
 800313e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8003140:	2307      	movs	r3, #7
 8003142:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8003144:	2303      	movs	r3, #3
 8003146:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8003148:	2302      	movs	r3, #2
 800314a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800314c:	2302      	movs	r3, #2
 800314e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003150:	1d3b      	adds	r3, r7, #4
 8003152:	4619      	mov	r1, r3
 8003154:	4805      	ldr	r0, [pc, #20]	@ (800316c <MX_FMC_Init+0x98>)
 8003156:	f00a fb86 	bl	800d866 <HAL_SDRAM_Init>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8003160:	f000 fdf6 	bl	8003d50 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8003164:	bf00      	nop
 8003166:	3720      	adds	r7, #32
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	2000215c 	.word	0x2000215c
 8003170:	a0000140 	.word	0xa0000140

08003174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b090      	sub	sp, #64	@ 0x40
 8003178:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800317a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	605a      	str	r2, [r3, #4]
 8003184:	609a      	str	r2, [r3, #8]
 8003186:	60da      	str	r2, [r3, #12]
 8003188:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800318a:	4bb0      	ldr	r3, [pc, #704]	@ (800344c <MX_GPIO_Init+0x2d8>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	4aaf      	ldr	r2, [pc, #700]	@ (800344c <MX_GPIO_Init+0x2d8>)
 8003190:	f043 0310 	orr.w	r3, r3, #16
 8003194:	6313      	str	r3, [r2, #48]	@ 0x30
 8003196:	4bad      	ldr	r3, [pc, #692]	@ (800344c <MX_GPIO_Init+0x2d8>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80031a2:	4baa      	ldr	r3, [pc, #680]	@ (800344c <MX_GPIO_Init+0x2d8>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a6:	4aa9      	ldr	r2, [pc, #676]	@ (800344c <MX_GPIO_Init+0x2d8>)
 80031a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ae:	4ba7      	ldr	r3, [pc, #668]	@ (800344c <MX_GPIO_Init+0x2d8>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ba:	4ba4      	ldr	r3, [pc, #656]	@ (800344c <MX_GPIO_Init+0x2d8>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031be:	4aa3      	ldr	r2, [pc, #652]	@ (800344c <MX_GPIO_Init+0x2d8>)
 80031c0:	f043 0302 	orr.w	r3, r3, #2
 80031c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031c6:	4ba1      	ldr	r3, [pc, #644]	@ (800344c <MX_GPIO_Init+0x2d8>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	623b      	str	r3, [r7, #32]
 80031d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031d2:	4b9e      	ldr	r3, [pc, #632]	@ (800344c <MX_GPIO_Init+0x2d8>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d6:	4a9d      	ldr	r2, [pc, #628]	@ (800344c <MX_GPIO_Init+0x2d8>)
 80031d8:	f043 0308 	orr.w	r3, r3, #8
 80031dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031de:	4b9b      	ldr	r3, [pc, #620]	@ (800344c <MX_GPIO_Init+0x2d8>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	61fb      	str	r3, [r7, #28]
 80031e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ea:	4b98      	ldr	r3, [pc, #608]	@ (800344c <MX_GPIO_Init+0x2d8>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	4a97      	ldr	r2, [pc, #604]	@ (800344c <MX_GPIO_Init+0x2d8>)
 80031f0:	f043 0304 	orr.w	r3, r3, #4
 80031f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031f6:	4b95      	ldr	r3, [pc, #596]	@ (800344c <MX_GPIO_Init+0x2d8>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	61bb      	str	r3, [r7, #24]
 8003200:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003202:	4b92      	ldr	r3, [pc, #584]	@ (800344c <MX_GPIO_Init+0x2d8>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003206:	4a91      	ldr	r2, [pc, #580]	@ (800344c <MX_GPIO_Init+0x2d8>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6313      	str	r3, [r2, #48]	@ 0x30
 800320e:	4b8f      	ldr	r3, [pc, #572]	@ (800344c <MX_GPIO_Init+0x2d8>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800321a:	4b8c      	ldr	r3, [pc, #560]	@ (800344c <MX_GPIO_Init+0x2d8>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321e:	4a8b      	ldr	r2, [pc, #556]	@ (800344c <MX_GPIO_Init+0x2d8>)
 8003220:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003224:	6313      	str	r3, [r2, #48]	@ 0x30
 8003226:	4b89      	ldr	r3, [pc, #548]	@ (800344c <MX_GPIO_Init+0x2d8>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003232:	4b86      	ldr	r3, [pc, #536]	@ (800344c <MX_GPIO_Init+0x2d8>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003236:	4a85      	ldr	r2, [pc, #532]	@ (800344c <MX_GPIO_Init+0x2d8>)
 8003238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800323c:	6313      	str	r3, [r2, #48]	@ 0x30
 800323e:	4b83      	ldr	r3, [pc, #524]	@ (800344c <MX_GPIO_Init+0x2d8>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800324a:	4b80      	ldr	r3, [pc, #512]	@ (800344c <MX_GPIO_Init+0x2d8>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324e:	4a7f      	ldr	r2, [pc, #508]	@ (800344c <MX_GPIO_Init+0x2d8>)
 8003250:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003254:	6313      	str	r3, [r2, #48]	@ 0x30
 8003256:	4b7d      	ldr	r3, [pc, #500]	@ (800344c <MX_GPIO_Init+0x2d8>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003262:	4b7a      	ldr	r3, [pc, #488]	@ (800344c <MX_GPIO_Init+0x2d8>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	4a79      	ldr	r2, [pc, #484]	@ (800344c <MX_GPIO_Init+0x2d8>)
 8003268:	f043 0320 	orr.w	r3, r3, #32
 800326c:	6313      	str	r3, [r2, #48]	@ 0x30
 800326e:	4b77      	ldr	r3, [pc, #476]	@ (800344c <MX_GPIO_Init+0x2d8>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	f003 0320 	and.w	r3, r3, #32
 8003276:	607b      	str	r3, [r7, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800327a:	4b74      	ldr	r3, [pc, #464]	@ (800344c <MX_GPIO_Init+0x2d8>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	4a73      	ldr	r2, [pc, #460]	@ (800344c <MX_GPIO_Init+0x2d8>)
 8003280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003284:	6313      	str	r3, [r2, #48]	@ 0x30
 8003286:	4b71      	ldr	r3, [pc, #452]	@ (800344c <MX_GPIO_Init+0x2d8>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003292:	2201      	movs	r2, #1
 8003294:	2120      	movs	r1, #32
 8003296:	486e      	ldr	r0, [pc, #440]	@ (8003450 <MX_GPIO_Init+0x2dc>)
 8003298:	f004 febe 	bl	8008018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800329c:	2200      	movs	r2, #0
 800329e:	210c      	movs	r1, #12
 80032a0:	486c      	ldr	r0, [pc, #432]	@ (8003454 <MX_GPIO_Init+0x2e0>)
 80032a2:	f004 feb9 	bl	8008018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80032a6:	2201      	movs	r2, #1
 80032a8:	2108      	movs	r1, #8
 80032aa:	486b      	ldr	r0, [pc, #428]	@ (8003458 <MX_GPIO_Init+0x2e4>)
 80032ac:	f004 feb4 	bl	8008018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80032b0:	2201      	movs	r2, #1
 80032b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80032b6:	4867      	ldr	r0, [pc, #412]	@ (8003454 <MX_GPIO_Init+0x2e0>)
 80032b8:	f004 feae 	bl	8008018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80032bc:	2200      	movs	r2, #0
 80032be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80032c2:	4866      	ldr	r0, [pc, #408]	@ (800345c <MX_GPIO_Init+0x2e8>)
 80032c4:	f004 fea8 	bl	8008018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80032c8:	2200      	movs	r2, #0
 80032ca:	21c8      	movs	r1, #200	@ 0xc8
 80032cc:	4864      	ldr	r0, [pc, #400]	@ (8003460 <MX_GPIO_Init+0x2ec>)
 80032ce:	f004 fea3 	bl	8008018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80032d2:	2308      	movs	r3, #8
 80032d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032d6:	2300      	movs	r3, #0
 80032d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032da:	2300      	movs	r3, #0
 80032dc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80032de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032e2:	4619      	mov	r1, r3
 80032e4:	485f      	ldr	r0, [pc, #380]	@ (8003464 <MX_GPIO_Init+0x2f0>)
 80032e6:	f004 fcd3 	bl	8007c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80032ea:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80032ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f0:	2302      	movs	r3, #2
 80032f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f8:	2303      	movs	r3, #3
 80032fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80032fc:	230a      	movs	r3, #10
 80032fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003300:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003304:	4619      	mov	r1, r3
 8003306:	4858      	ldr	r0, [pc, #352]	@ (8003468 <MX_GPIO_Init+0x2f4>)
 8003308:	f004 fcc2 	bl	8007c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800330c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003312:	2300      	movs	r3, #0
 8003314:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003316:	2300      	movs	r3, #0
 8003318:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800331a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800331e:	4619      	mov	r1, r3
 8003320:	4852      	ldr	r0, [pc, #328]	@ (800346c <MX_GPIO_Init+0x2f8>)
 8003322:	f004 fcb5 	bl	8007c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8003326:	2340      	movs	r3, #64	@ 0x40
 8003328:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800332a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800332e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003330:	2300      	movs	r3, #0
 8003332:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8003334:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003338:	4619      	mov	r1, r3
 800333a:	4845      	ldr	r0, [pc, #276]	@ (8003450 <MX_GPIO_Init+0x2dc>)
 800333c:	f004 fca8 	bl	8007c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003340:	2320      	movs	r3, #32
 8003342:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003344:	2301      	movs	r3, #1
 8003346:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	2300      	movs	r3, #0
 800334a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334c:	2300      	movs	r3, #0
 800334e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003350:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003354:	4619      	mov	r1, r3
 8003356:	483e      	ldr	r0, [pc, #248]	@ (8003450 <MX_GPIO_Init+0x2dc>)
 8003358:	f004 fc9a 	bl	8007c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800335c:	f241 030c 	movw	r3, #4108	@ 0x100c
 8003360:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003362:	2301      	movs	r3, #1
 8003364:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003366:	2300      	movs	r3, #0
 8003368:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336a:	2300      	movs	r3, #0
 800336c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800336e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003372:	4619      	mov	r1, r3
 8003374:	4837      	ldr	r0, [pc, #220]	@ (8003454 <MX_GPIO_Init+0x2e0>)
 8003376:	f004 fc8b 	bl	8007c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800337a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800337e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003380:	2300      	movs	r3, #0
 8003382:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8003388:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800338c:	4619      	mov	r1, r3
 800338e:	4838      	ldr	r0, [pc, #224]	@ (8003470 <MX_GPIO_Init+0x2fc>)
 8003390:	f004 fc7e 	bl	8007c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8003394:	2308      	movs	r3, #8
 8003396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003398:	2301      	movs	r3, #1
 800339a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a0:	2300      	movs	r3, #0
 80033a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80033a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033a8:	4619      	mov	r1, r3
 80033aa:	482b      	ldr	r0, [pc, #172]	@ (8003458 <MX_GPIO_Init+0x2e4>)
 80033ac:	f004 fc70 	bl	8007c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80033b0:	2310      	movs	r3, #16
 80033b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033b4:	2300      	movs	r3, #0
 80033b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80033bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033c0:	4619      	mov	r1, r3
 80033c2:	4823      	ldr	r0, [pc, #140]	@ (8003450 <MX_GPIO_Init+0x2dc>)
 80033c4:	f004 fc64 	bl	8007c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80033c8:	f248 0304 	movw	r3, #32772	@ 0x8004
 80033cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033ce:	2300      	movs	r3, #0
 80033d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80033d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033da:	4619      	mov	r1, r3
 80033dc:	481f      	ldr	r0, [pc, #124]	@ (800345c <MX_GPIO_Init+0x2e8>)
 80033de:	f004 fc57 	bl	8007c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80033e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033e8:	2301      	movs	r3, #1
 80033ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ec:	2300      	movs	r3, #0
 80033ee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f0:	2300      	movs	r3, #0
 80033f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80033f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033f8:	4619      	mov	r1, r3
 80033fa:	4818      	ldr	r0, [pc, #96]	@ (800345c <MX_GPIO_Init+0x2e8>)
 80033fc:	f004 fc48 	bl	8007c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8003400:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003404:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003406:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800340a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340c:	2300      	movs	r3, #0
 800340e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8003410:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003414:	4619      	mov	r1, r3
 8003416:	480f      	ldr	r0, [pc, #60]	@ (8003454 <MX_GPIO_Init+0x2e0>)
 8003418:	f004 fc3a 	bl	8007c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800341c:	2310      	movs	r3, #16
 800341e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003420:	2302      	movs	r3, #2
 8003422:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003428:	2303      	movs	r3, #3
 800342a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800342c:	230a      	movs	r3, #10
 800342e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8003430:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003434:	4619      	mov	r1, r3
 8003436:	4809      	ldr	r0, [pc, #36]	@ (800345c <MX_GPIO_Init+0x2e8>)
 8003438:	f004 fc2a 	bl	8007c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800343c:	23c8      	movs	r3, #200	@ 0xc8
 800343e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003440:	2301      	movs	r3, #1
 8003442:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003444:	2300      	movs	r3, #0
 8003446:	637b      	str	r3, [r7, #52]	@ 0x34
 8003448:	e014      	b.n	8003474 <MX_GPIO_Init+0x300>
 800344a:	bf00      	nop
 800344c:	40023800 	.word	0x40023800
 8003450:	40020c00 	.word	0x40020c00
 8003454:	40022000 	.word	0x40022000
 8003458:	40022800 	.word	0x40022800
 800345c:	40021c00 	.word	0x40021c00
 8003460:	40021800 	.word	0x40021800
 8003464:	40021000 	.word	0x40021000
 8003468:	40020400 	.word	0x40020400
 800346c:	40022400 	.word	0x40022400
 8003470:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003474:	2300      	movs	r3, #0
 8003476:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003478:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800347c:	4619      	mov	r1, r3
 800347e:	4819      	ldr	r0, [pc, #100]	@ (80034e4 <MX_GPIO_Init+0x370>)
 8003480:	f004 fc06 	bl	8007c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8003484:	2305      	movs	r3, #5
 8003486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003488:	2302      	movs	r3, #2
 800348a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348c:	2300      	movs	r3, #0
 800348e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003490:	2303      	movs	r3, #3
 8003492:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003494:	230a      	movs	r3, #10
 8003496:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003498:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800349c:	4619      	mov	r1, r3
 800349e:	4812      	ldr	r0, [pc, #72]	@ (80034e8 <MX_GPIO_Init+0x374>)
 80034a0:	f004 fbf6 	bl	8007c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80034a4:	2304      	movs	r3, #4
 80034a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034a8:	2300      	movs	r3, #0
 80034aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80034b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034b4:	4619      	mov	r1, r3
 80034b6:	480b      	ldr	r0, [pc, #44]	@ (80034e4 <MX_GPIO_Init+0x370>)
 80034b8:	f004 fbea 	bl	8007c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80034bc:	2328      	movs	r3, #40	@ 0x28
 80034be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c0:	2302      	movs	r3, #2
 80034c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c8:	2303      	movs	r3, #3
 80034ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80034cc:	230a      	movs	r3, #10
 80034ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034d4:	4619      	mov	r1, r3
 80034d6:	4805      	ldr	r0, [pc, #20]	@ (80034ec <MX_GPIO_Init+0x378>)
 80034d8:	f004 fbda 	bl	8007c90 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80034dc:	bf00      	nop
 80034de:	3740      	adds	r7, #64	@ 0x40
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40021800 	.word	0x40021800
 80034e8:	40020800 	.word	0x40020800
 80034ec:	40020000 	.word	0x40020000

080034f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b096      	sub	sp, #88	@ 0x58
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST - 임시 비활성화 (SD 카드 테스트용) */
  LOG_WARN("USB Host initialization temporarily disabled to avoid RTOS task conflicts");
 80034f8:	49b6      	ldr	r1, [pc, #728]	@ (80037d4 <StartDefaultTask+0x2e4>)
 80034fa:	2002      	movs	r0, #2
 80034fc:	f001 ff3a 	bl	8005374 <LOGGER_SendFormatted>
  LOG_INFO("This eliminates USBH_Thread vs defaultTask priority conflicts");
 8003500:	49b5      	ldr	r1, [pc, #724]	@ (80037d8 <StartDefaultTask+0x2e8>)
 8003502:	2001      	movs	r0, #1
 8003504:	f001 ff36 	bl	8005374 <LOGGER_SendFormatted>
  // MX_USB_HOST_Init();  // SD 카드 테스트 완료 후 재활성화 예정
  /* USER CODE BEGIN 5 */
  
  // SD Card 초기화는 이미 main()에서 우선 완료됨
  LOG_INFO("📋 SD card initialization completed in main() - checking status...");
 8003508:	49b4      	ldr	r1, [pc, #720]	@ (80037dc <StartDefaultTask+0x2ec>)
 800350a:	2001      	movs	r0, #1
 800350c:	f001 ff32 	bl	8005374 <LOGGER_SendFormatted>
  
  LOG_INFO("=== STM32F746G-DISCO UART6 Test Started ===");
 8003510:	49b3      	ldr	r1, [pc, #716]	@ (80037e0 <StartDefaultTask+0x2f0>)
 8003512:	2001      	movs	r0, #1
 8003514:	f001 ff2e 	bl	8005374 <LOGGER_SendFormatted>
  LOG_INFO("System Clock: %lu MHz", SystemCoreClock / 1000000);
 8003518:	4bb2      	ldr	r3, [pc, #712]	@ (80037e4 <StartDefaultTask+0x2f4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4ab2      	ldr	r2, [pc, #712]	@ (80037e8 <StartDefaultTask+0x2f8>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	0c9b      	lsrs	r3, r3, #18
 8003524:	461a      	mov	r2, r3
 8003526:	49b1      	ldr	r1, [pc, #708]	@ (80037ec <StartDefaultTask+0x2fc>)
 8003528:	2001      	movs	r0, #1
 800352a:	f001 ff23 	bl	8005374 <LOGGER_SendFormatted>
  LOG_INFO("UART6 Configuration: 115200 baud, 8N1");
 800352e:	49b0      	ldr	r1, [pc, #704]	@ (80037f0 <StartDefaultTask+0x300>)
 8003530:	2001      	movs	r0, #1
 8003532:	f001 ff1f 	bl	8005374 <LOGGER_SendFormatted>
  LOG_INFO("📌 CRITICAL: For loopback test, connect PC6(TX) to PC7(RX) with a wire!");
 8003536:	49af      	ldr	r1, [pc, #700]	@ (80037f4 <StartDefaultTask+0x304>)
 8003538:	2001      	movs	r0, #1
 800353a:	f001 ff1b 	bl	8005374 <LOGGER_SendFormatted>
  LOG_INFO("📌 UART6 Pins: PC6(TX) = Arduino D1, PC7(RX) = Arduino D0");
 800353e:	49ae      	ldr	r1, [pc, #696]	@ (80037f8 <StartDefaultTask+0x308>)
 8003540:	2001      	movs	r0, #1
 8003542:	f001 ff17 	bl	8005374 <LOGGER_SendFormatted>
  
  // SD 카드 기본 기능 테스트 (Default Task에서 수행)
  LOG_INFO("📤 [TX_TASK] Starting SD card basic functionality test...");
 8003546:	49ad      	ldr	r1, [pc, #692]	@ (80037fc <StartDefaultTask+0x30c>)
 8003548:	2001      	movs	r0, #1
 800354a:	f001 ff13 	bl	8005374 <LOGGER_SendFormatted>
  
  // SD 초기화 시도
  LOG_INFO("📤 [TX_TASK] Attempting SD card initialization...");
 800354e:	49ac      	ldr	r1, [pc, #688]	@ (8003800 <StartDefaultTask+0x310>)
 8003550:	2001      	movs	r0, #1
 8003552:	f001 ff0f 	bl	8005374 <LOGGER_SendFormatted>
  g_sd_initialization_result = SDStorage_Init();
 8003556:	f7fd fde5 	bl	8001124 <SDStorage_Init>
 800355a:	4603      	mov	r3, r0
 800355c:	4aa9      	ldr	r2, [pc, #676]	@ (8003804 <StartDefaultTask+0x314>)
 800355e:	6013      	str	r3, [r2, #0]
  
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 8003560:	4ba8      	ldr	r3, [pc, #672]	@ (8003804 <StartDefaultTask+0x314>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d124      	bne.n	80035b2 <StartDefaultTask+0xc2>
    LOG_INFO("✅ [TX_TASK] SD card initialization SUCCESS");
 8003568:	49a7      	ldr	r1, [pc, #668]	@ (8003808 <StartDefaultTask+0x318>)
 800356a:	2001      	movs	r0, #1
 800356c:	f001 ff02 	bl	8005374 <LOGGER_SendFormatted>
    
    // 기본 쓰기 테스트
    LOG_INFO("📤 [TX_TASK] Testing SD card write operation...");
 8003570:	49a6      	ldr	r1, [pc, #664]	@ (800380c <StartDefaultTask+0x31c>)
 8003572:	2001      	movs	r0, #1
 8003574:	f001 fefe 	bl	8005374 <LOGGER_SendFormatted>
    const char* test_message = "SD Card Test - Hello World from FreeRTOS!\n";
 8003578:	4ba5      	ldr	r3, [pc, #660]	@ (8003810 <StartDefaultTask+0x320>)
 800357a:	647b      	str	r3, [r7, #68]	@ 0x44
    int write_result = SDStorage_WriteLog(test_message, strlen(test_message));
 800357c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800357e:	f7fc fe51 	bl	8000224 <strlen>
 8003582:	4603      	mov	r3, r0
 8003584:	4619      	mov	r1, r3
 8003586:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003588:	f7fd ffea 	bl	8001560 <SDStorage_WriteLog>
 800358c:	6438      	str	r0, [r7, #64]	@ 0x40
    
    if (write_result == SDSTORAGE_OK) {
 800358e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003590:	2b00      	cmp	r3, #0
 8003592:	d108      	bne.n	80035a6 <StartDefaultTask+0xb6>
      LOG_INFO("✅ [TX_TASK] SD card write operation SUCCESS");
 8003594:	499f      	ldr	r1, [pc, #636]	@ (8003814 <StartDefaultTask+0x324>)
 8003596:	2001      	movs	r0, #1
 8003598:	f001 feec 	bl	8005374 <LOGGER_SendFormatted>
      LOG_INFO("🎉 [TX_TASK] SD card functionality confirmed - ready for long-term logging");
 800359c:	499e      	ldr	r1, [pc, #632]	@ (8003818 <StartDefaultTask+0x328>)
 800359e:	2001      	movs	r0, #1
 80035a0:	f001 fee8 	bl	8005374 <LOGGER_SendFormatted>
 80035a4:	e010      	b.n	80035c8 <StartDefaultTask+0xd8>
    } else {
      LOG_ERROR("❌ [TX_TASK] SD card write operation FAILED (code: %d)", write_result);
 80035a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035a8:	499c      	ldr	r1, [pc, #624]	@ (800381c <StartDefaultTask+0x32c>)
 80035aa:	2003      	movs	r0, #3
 80035ac:	f001 fee2 	bl	8005374 <LOGGER_SendFormatted>
 80035b0:	e00a      	b.n	80035c8 <StartDefaultTask+0xd8>
    }
  } else {
    LOG_ERROR("❌ [TX_TASK] SD card initialization FAILED (code: %d)", g_sd_initialization_result);
 80035b2:	4b94      	ldr	r3, [pc, #592]	@ (8003804 <StartDefaultTask+0x314>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	4999      	ldr	r1, [pc, #612]	@ (8003820 <StartDefaultTask+0x330>)
 80035ba:	2003      	movs	r0, #3
 80035bc:	f001 feda 	bl	8005374 <LOGGER_SendFormatted>
    LOG_INFO("📺 [TX_TASK] Continuing with terminal-only logging");
 80035c0:	4998      	ldr	r1, [pc, #608]	@ (8003824 <StartDefaultTask+0x334>)
 80035c2:	2001      	movs	r0, #1
 80035c4:	f001 fed6 	bl	8005374 <LOGGER_SendFormatted>
  }

  // SD 테스트 건너뛰고 바로 LoRa 시작
  
  LOG_INFO("📤 [TX_TASK] Starting LoRa initialization and JOIN...");
 80035c8:	4997      	ldr	r1, [pc, #604]	@ (8003828 <StartDefaultTask+0x338>)
 80035ca:	2001      	movs	r0, #1
 80035cc:	f001 fed2 	bl	8005374 <LOGGER_SendFormatted>
  
  // UART 연결 (LoRa 통신을 위해 필수)
  LOG_INFO("📤 [TX_TASK] Connecting to UART for LoRa communication...");
 80035d0:	4996      	ldr	r1, [pc, #600]	@ (800382c <StartDefaultTask+0x33c>)
 80035d2:	2001      	movs	r0, #1
 80035d4:	f001 fece 	bl	8005374 <LOGGER_SendFormatted>
  UartStatus uart_status = UART_Connect("UART6");
 80035d8:	4895      	ldr	r0, [pc, #596]	@ (8003830 <StartDefaultTask+0x340>)
 80035da:	f001 ffad 	bl	8005538 <UART_Connect>
 80035de:	4603      	mov	r3, r0
 80035e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (uart_status == UART_STATUS_OK) {
 80035e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d104      	bne.n	80035f6 <StartDefaultTask+0x106>
    LOG_INFO("✅ [TX_TASK] UART connection successful");
 80035ec:	4991      	ldr	r1, [pc, #580]	@ (8003834 <StartDefaultTask+0x344>)
 80035ee:	2001      	movs	r0, #1
 80035f0:	f001 fec0 	bl	8005374 <LOGGER_SendFormatted>
 80035f4:	e006      	b.n	8003604 <StartDefaultTask+0x114>
  } else {
    LOG_ERROR("❌ [TX_TASK] UART connection failed (status: %d)", uart_status);
 80035f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80035fa:	461a      	mov	r2, r3
 80035fc:	498e      	ldr	r1, [pc, #568]	@ (8003838 <StartDefaultTask+0x348>)
 80035fe:	2003      	movs	r0, #3
 8003600:	f001 feb8 	bl	8005374 <LOGGER_SendFormatted>
  }
  
  LOG_INFO("📤 [TX_TASK] Waiting for LoRa module boot-up (5 seconds - optimized for long-term test)...");
 8003604:	498d      	ldr	r1, [pc, #564]	@ (800383c <StartDefaultTask+0x34c>)
 8003606:	2001      	movs	r0, #1
 8003608:	f001 feb4 	bl	8005374 <LOGGER_SendFormatted>
  osDelay(5000); // 5초 대기 (장기 테스트를 위해 단축)
 800360c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003610:	f011 fa54 	bl	8014abc <osDelay>
  
  // LoraStarter 컨텍스트 초기화 (TDD 검증된 기본 설정 사용)
  LoraStarterContext lora_ctx;
  LoraStarter_InitWithDefaults(&lora_ctx, "TEST");
 8003614:	f107 030c 	add.w	r3, r7, #12
 8003618:	4989      	ldr	r1, [pc, #548]	@ (8003840 <StartDefaultTask+0x350>)
 800361a:	4618      	mov	r0, r3
 800361c:	f7fd f8bc 	bl	8000798 <LoraStarter_InitWithDefaults>
  
  LOG_INFO("=== LoRa Initialization ===");
 8003620:	4988      	ldr	r1, [pc, #544]	@ (8003844 <StartDefaultTask+0x354>)
 8003622:	2001      	movs	r0, #1
 8003624:	f001 fea6 	bl	8005374 <LOGGER_SendFormatted>
  LOG_INFO("📤 Commands: %d, Message: %s, Max retries: %d", 
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800362c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	460b      	mov	r3, r1
 8003632:	4985      	ldr	r1, [pc, #532]	@ (8003848 <StartDefaultTask+0x358>)
 8003634:	2001      	movs	r0, #1
 8003636:	f001 fe9d 	bl	8005374 <LOGGER_SendFormatted>
           lora_ctx.num_commands, lora_ctx.send_message, lora_ctx.max_retry_count);
           
  // SD 카드 로깅 설정 (간단한 방식)
  extern int g_sd_initialization_result; // main()에서 설정된 SD 결과
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 800363a:	4b72      	ldr	r3, [pc, #456]	@ (8003804 <StartDefaultTask+0x314>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d104      	bne.n	800364c <StartDefaultTask+0x15c>
    LOG_INFO("🗂️ LoRa logs will be saved to SD card: lora_logs/");
 8003642:	4982      	ldr	r1, [pc, #520]	@ (800384c <StartDefaultTask+0x35c>)
 8003644:	2001      	movs	r0, #1
 8003646:	f001 fe95 	bl	8005374 <LOGGER_SendFormatted>
 800364a:	e003      	b.n	8003654 <StartDefaultTask+0x164>
  } else {
    LOG_INFO("📺 LoRa logs will be displayed on terminal only (SD not available)");
 800364c:	4980      	ldr	r1, [pc, #512]	@ (8003850 <StartDefaultTask+0x360>)
 800364e:	2001      	movs	r0, #1
 8003650:	f001 fe90 	bl	8005374 <LOGGER_SendFormatted>
  }
  
  // LoRa 로깅 모드 설정 (터미널에서 모든 로그를 보기 위해 INFO 레벨 유지)
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 8003654:	4b6b      	ldr	r3, [pc, #428]	@ (8003804 <StartDefaultTask+0x314>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <StartDefaultTask+0x182>
    LOGGER_SetMode(LOGGER_MODE_DUAL);  // 터미널 + SD 동시 출력
 800365c:	2002      	movs	r0, #2
 800365e:	f001 fe65 	bl	800532c <LOGGER_SetMode>
    LOGGER_SetFilterLevel(LOG_LEVEL_INFO);  // 터미널에서 모든 로그 확인 가능
 8003662:	2001      	movs	r0, #1
 8003664:	f001 fe52 	bl	800530c <LOGGER_SetFilterLevel>
    LOG_WARN("✅ LoRa logging mode: DUAL (Terminal + SD), INFO level for debugging");
 8003668:	497a      	ldr	r1, [pc, #488]	@ (8003854 <StartDefaultTask+0x364>)
 800366a:	2002      	movs	r0, #2
 800366c:	f001 fe82 	bl	8005374 <LOGGER_SendFormatted>
 8003670:	e009      	b.n	8003686 <StartDefaultTask+0x196>
  } else {
    LOGGER_SetMode(LOGGER_MODE_TERMINAL_ONLY);
 8003672:	2000      	movs	r0, #0
 8003674:	f001 fe5a 	bl	800532c <LOGGER_SetMode>
    LOGGER_SetFilterLevel(LOG_LEVEL_INFO);
 8003678:	2001      	movs	r0, #1
 800367a:	f001 fe47 	bl	800530c <LOGGER_SetFilterLevel>
    LOG_INFO("📺 LoRa logging mode: Terminal only");
 800367e:	4976      	ldr	r1, [pc, #472]	@ (8003858 <StartDefaultTask+0x368>)
 8003680:	2001      	movs	r0, #1
 8003682:	f001 fe77 	bl	8005374 <LOGGER_SendFormatted>
  }
  
  // LoRa 프로세스 루프 (초기화 → JOIN → 주기적 전송)
  LOG_INFO("📤 [TX_TASK] Starting LoRa process loop...");
 8003686:	4975      	ldr	r1, [pc, #468]	@ (800385c <StartDefaultTask+0x36c>)
 8003688:	2001      	movs	r0, #1
 800368a:	f001 fe73 	bl	8005374 <LOGGER_SendFormatted>
  
  for(;;)
  {
    // 수신된 응답이 있으면 LoraStarter에 전달
    const char* rx_data = NULL;
 800368e:	2300      	movs	r3, #0
 8003690:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (lora_new_response) {
 8003692:	4b73      	ldr	r3, [pc, #460]	@ (8003860 <StartDefaultTask+0x370>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d004      	beq.n	80036a6 <StartDefaultTask+0x1b6>
      rx_data = lora_rx_response;
 800369c:	4b71      	ldr	r3, [pc, #452]	@ (8003864 <StartDefaultTask+0x374>)
 800369e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      lora_new_response = false; // 플래그 클리어
 80036a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003860 <StartDefaultTask+0x370>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	701a      	strb	r2, [r3, #0]
      // 응답 처리 - 로그는 ResponseHandler에서 이미 출력됨
    }
    
    // LoraStarter 프로세스 실행
    LoraStarter_Process(&lora_ctx, rx_data);
 80036a6:	f107 030c 	add.w	r3, r7, #12
 80036aa:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fd f8bb 	bl	8000828 <LoraStarter_Process>
    
    // 상태별 처리 간격 및 디버깅 (중요한 상태만)
    static int last_state = -1;
    if (lora_ctx.state != last_state) {
 80036b2:	7b3b      	ldrb	r3, [r7, #12]
 80036b4:	461a      	mov	r2, r3
 80036b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003868 <StartDefaultTask+0x378>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d01a      	beq.n	80036f4 <StartDefaultTask+0x204>
      // JOIN, SEND, ERROR 등 중요한 상태 변경만 로그 출력
      if (lora_ctx.state == LORA_STATE_SEND_JOIN || 
 80036be:	7b3b      	ldrb	r3, [r7, #12]
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d008      	beq.n	80036d6 <StartDefaultTask+0x1e6>
          lora_ctx.state == LORA_STATE_SEND_PERIODIC ||
 80036c4:	7b3b      	ldrb	r3, [r7, #12]
      if (lora_ctx.state == LORA_STATE_SEND_JOIN || 
 80036c6:	2b05      	cmp	r3, #5
 80036c8:	d005      	beq.n	80036d6 <StartDefaultTask+0x1e6>
          lora_ctx.state == LORA_STATE_DONE ||
 80036ca:	7b3b      	ldrb	r3, [r7, #12]
          lora_ctx.state == LORA_STATE_SEND_PERIODIC ||
 80036cc:	2b09      	cmp	r3, #9
 80036ce:	d002      	beq.n	80036d6 <StartDefaultTask+0x1e6>
          lora_ctx.state == LORA_STATE_ERROR) {
 80036d0:	7b3b      	ldrb	r3, [r7, #12]
          lora_ctx.state == LORA_STATE_DONE ||
 80036d2:	2b0a      	cmp	r3, #10
 80036d4:	d10a      	bne.n	80036ec <StartDefaultTask+0x1fc>
        LOG_INFO("[TX_TASK] ⚙️ LoRa State: %d, cmd_index: %d/%d", 
 80036d6:	7b3b      	ldrb	r3, [r7, #12]
 80036d8:	4619      	mov	r1, r3
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	4613      	mov	r3, r2
 80036e2:	460a      	mov	r2, r1
 80036e4:	4961      	ldr	r1, [pc, #388]	@ (800386c <StartDefaultTask+0x37c>)
 80036e6:	2001      	movs	r0, #1
 80036e8:	f001 fe44 	bl	8005374 <LOGGER_SendFormatted>
                  lora_ctx.state, lora_ctx.cmd_index, lora_ctx.num_commands);
      }
      last_state = lora_ctx.state;
 80036ec:	7b3b      	ldrb	r3, [r7, #12]
 80036ee:	461a      	mov	r2, r3
 80036f0:	4b5d      	ldr	r3, [pc, #372]	@ (8003868 <StartDefaultTask+0x378>)
 80036f2:	601a      	str	r2, [r3, #0]
    }
    
    switch(lora_ctx.state) {
 80036f4:	7b3b      	ldrb	r3, [r7, #12]
 80036f6:	2b0a      	cmp	r3, #10
 80036f8:	d855      	bhi.n	80037a6 <StartDefaultTask+0x2b6>
 80036fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003700 <StartDefaultTask+0x210>)
 80036fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003700:	0800372d 	.word	0x0800372d
 8003704:	08003737 	.word	0x08003737
 8003708:	0800374f 	.word	0x0800374f
 800370c:	08003759 	.word	0x08003759
 8003710:	08003763 	.word	0x08003763
 8003714:	08003759 	.word	0x08003759
 8003718:	08003763 	.word	0x08003763
 800371c:	0800376d 	.word	0x0800376d
 8003720:	08003777 	.word	0x08003777
 8003724:	08003781 	.word	0x08003781
 8003728:	08003781 	.word	0x08003781
      case LORA_STATE_INIT:
        osDelay(500); // 초기화 상태는 빠르게
 800372c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003730:	f011 f9c4 	bl	8014abc <osDelay>
        break;
 8003734:	e03c      	b.n	80037b0 <StartDefaultTask+0x2c0>
      case LORA_STATE_SEND_CMD:
        LOG_INFO("[TX_TASK] 📤 Sending command %d/%d", 
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	494c      	ldr	r1, [pc, #304]	@ (8003870 <StartDefaultTask+0x380>)
 800373e:	2001      	movs	r0, #1
 8003740:	f001 fe18 	bl	8005374 <LOGGER_SendFormatted>
                lora_ctx.cmd_index + 1, lora_ctx.num_commands);
        osDelay(1000); // 명령어 전송 후 1초 대기
 8003744:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003748:	f011 f9b8 	bl	8014abc <osDelay>
        break;
 800374c:	e030      	b.n	80037b0 <StartDefaultTask+0x2c0>
      case LORA_STATE_WAIT_OK:
        // OK 응답 대기 중 - 조용히 대기
        osDelay(2000); // OK 응답 대기 중 2초 간격
 800374e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003752:	f011 f9b3 	bl	8014abc <osDelay>
        break;
 8003756:	e02b      	b.n	80037b0 <StartDefaultTask+0x2c0>
      case LORA_STATE_SEND_JOIN:
      case LORA_STATE_SEND_PERIODIC:
        osDelay(2000); // JOIN/SEND 명령어 전송 후 2초 대기
 8003758:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800375c:	f011 f9ae 	bl	8014abc <osDelay>
        break;
 8003760:	e026      	b.n	80037b0 <StartDefaultTask+0x2c0>
      case LORA_STATE_WAIT_JOIN_OK:
      case LORA_STATE_WAIT_SEND_RESPONSE:
        osDelay(3000); // JOIN/SEND 응답 대기 중 3초 간격
 8003762:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003766:	f011 f9a9 	bl	8014abc <osDelay>
        break;
 800376a:	e021      	b.n	80037b0 <StartDefaultTask+0x2c0>
      case LORA_STATE_WAIT_SEND_INTERVAL:
        // 주기적 전송 대기 중 - 로그 출력 없이 조용히 대기
        osDelay(5000); // 주기적 전송 대기 중 5초 간격으로 체크
 800376c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003770:	f011 f9a4 	bl	8014abc <osDelay>
        break;
 8003774:	e01c      	b.n	80037b0 <StartDefaultTask+0x2c0>
      case LORA_STATE_JOIN_RETRY:
        osDelay(5000); // 재시도 대기 5초
 8003776:	f241 3088 	movw	r0, #5000	@ 0x1388
 800377a:	f011 f99f 	bl	8014abc <osDelay>
        break;
 800377e:	e017      	b.n	80037b0 <StartDefaultTask+0x2c0>
      case LORA_STATE_DONE:
      case LORA_STATE_ERROR:
        LOG_INFO("📤 [TX_TASK] LoRa process completed with state: %s", 
 8003780:	7b3b      	ldrb	r3, [r7, #12]
 8003782:	2b09      	cmp	r3, #9
 8003784:	d101      	bne.n	800378a <StartDefaultTask+0x29a>
 8003786:	4b3b      	ldr	r3, [pc, #236]	@ (8003874 <StartDefaultTask+0x384>)
 8003788:	e000      	b.n	800378c <StartDefaultTask+0x29c>
 800378a:	4b3b      	ldr	r3, [pc, #236]	@ (8003878 <StartDefaultTask+0x388>)
 800378c:	461a      	mov	r2, r3
 800378e:	493b      	ldr	r1, [pc, #236]	@ (800387c <StartDefaultTask+0x38c>)
 8003790:	2001      	movs	r0, #1
 8003792:	f001 fdef 	bl	8005374 <LOGGER_SendFormatted>
                lora_ctx.state == LORA_STATE_DONE ? "DONE" : "ERROR");
        goto idle_loop;
 8003796:	bf00      	nop
    }
  }

idle_loop:
  /* Infinite idle loop */
  LOG_INFO("📤 [TX_TASK] Entering idle mode...");
 8003798:	4939      	ldr	r1, [pc, #228]	@ (8003880 <StartDefaultTask+0x390>)
 800379a:	2001      	movs	r0, #1
 800379c:	f001 fdea 	bl	8005374 <LOGGER_SendFormatted>
  uint32_t idle_counter = 0;
 80037a0:	2300      	movs	r3, #0
 80037a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037a4:	e005      	b.n	80037b2 <StartDefaultTask+0x2c2>
        osDelay(1000);
 80037a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80037aa:	f011 f987 	bl	8014abc <osDelay>
        break;
 80037ae:	bf00      	nop
  {
 80037b0:	e76d      	b.n	800368e <StartDefaultTask+0x19e>
  
  for(;;)
  {
    // 30초마다 idle 상태 표시
    osDelay(30000);
 80037b2:	f247 5030 	movw	r0, #30000	@ 0x7530
 80037b6:	f011 f981 	bl	8014abc <osDelay>
    idle_counter++;
 80037ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037bc:	3301      	adds	r3, #1
 80037be:	64bb      	str	r3, [r7, #72]	@ 0x48
    LOG_INFO("📤 [TX_TASK] Idle mode: %lu minutes elapsed", idle_counter / 2);
 80037c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037c2:	085b      	lsrs	r3, r3, #1
 80037c4:	461a      	mov	r2, r3
 80037c6:	492f      	ldr	r1, [pc, #188]	@ (8003884 <StartDefaultTask+0x394>)
 80037c8:	2001      	movs	r0, #1
 80037ca:	f001 fdd3 	bl	8005374 <LOGGER_SendFormatted>
    osDelay(30000);
 80037ce:	bf00      	nop
 80037d0:	e7ef      	b.n	80037b2 <StartDefaultTask+0x2c2>
 80037d2:	bf00      	nop
 80037d4:	0801a2e0 	.word	0x0801a2e0
 80037d8:	0801a32c 	.word	0x0801a32c
 80037dc:	0801a36c 	.word	0x0801a36c
 80037e0:	0801a3b4 	.word	0x0801a3b4
 80037e4:	2000001c 	.word	0x2000001c
 80037e8:	431bde83 	.word	0x431bde83
 80037ec:	0801a3e0 	.word	0x0801a3e0
 80037f0:	0801a3f8 	.word	0x0801a3f8
 80037f4:	0801a420 	.word	0x0801a420
 80037f8:	0801a46c 	.word	0x0801a46c
 80037fc:	0801a4a8 	.word	0x0801a4a8
 8003800:	0801a4e4 	.word	0x0801a4e4
 8003804:	20000014 	.word	0x20000014
 8003808:	0801a518 	.word	0x0801a518
 800380c:	0801a548 	.word	0x0801a548
 8003810:	0801a57c 	.word	0x0801a57c
 8003814:	0801a5a8 	.word	0x0801a5a8
 8003818:	0801a5d8 	.word	0x0801a5d8
 800381c:	0801a628 	.word	0x0801a628
 8003820:	0801a660 	.word	0x0801a660
 8003824:	0801a698 	.word	0x0801a698
 8003828:	0801a6d0 	.word	0x0801a6d0
 800382c:	0801a708 	.word	0x0801a708
 8003830:	0801a744 	.word	0x0801a744
 8003834:	0801a74c 	.word	0x0801a74c
 8003838:	0801a778 	.word	0x0801a778
 800383c:	0801a7ac 	.word	0x0801a7ac
 8003840:	0801a80c 	.word	0x0801a80c
 8003844:	0801a814 	.word	0x0801a814
 8003848:	0801a830 	.word	0x0801a830
 800384c:	0801a860 	.word	0x0801a860
 8003850:	0801a898 	.word	0x0801a898
 8003854:	0801a8e0 	.word	0x0801a8e0
 8003858:	0801a928 	.word	0x0801a928
 800385c:	0801a950 	.word	0x0801a950
 8003860:	200023a8 	.word	0x200023a8
 8003864:	200021a8 	.word	0x200021a8
 8003868:	20000018 	.word	0x20000018
 800386c:	0801a980 	.word	0x0801a980
 8003870:	0801a9b4 	.word	0x0801a9b4
 8003874:	0801a9dc 	.word	0x0801a9dc
 8003878:	0801a9e4 	.word	0x0801a9e4
 800387c:	0801a9ec 	.word	0x0801a9ec
 8003880:	0801aa24 	.word	0x0801aa24
 8003884:	0801aa4c 	.word	0x0801aa4c

08003888 <StartSDLoggingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSDLoggingTask */
void StartSDLoggingTask(void const * argument)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b0b2      	sub	sp, #200	@ 0xc8
 800388c:	af02      	add	r7, sp, #8
 800388e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSDLoggingTask */
  LOG_INFO("=== SD Logging Task Started ===");
 8003890:	4971      	ldr	r1, [pc, #452]	@ (8003a58 <StartSDLoggingTask+0x1d0>)
 8003892:	2001      	movs	r0, #1
 8003894:	f001 fd6e 	bl	8005374 <LOGGER_SendFormatted>
  
  // 시스템 안정화 대기 (다른 태스크들 먼저 시작)
  osDelay(3000);
 8003898:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800389c:	f011 f90e 	bl	8014abc <osDelay>
  
  // SD 초기화 시도 (타임아웃 있는 안전한 방식)
  LOG_INFO("[SD_TASK] 🔄 Attempting SD card initialization...");
 80038a0:	496e      	ldr	r1, [pc, #440]	@ (8003a5c <StartSDLoggingTask+0x1d4>)
 80038a2:	2001      	movs	r0, #1
 80038a4:	f001 fd66 	bl	8005374 <LOGGER_SendFormatted>
  
  // 단계별 안전한 SD 초기화
  int init_attempts = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  const int MAX_INIT_ATTEMPTS = 3;
 80038ae:	2303      	movs	r3, #3
 80038b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  
  for (init_attempts = 0; init_attempts < MAX_INIT_ATTEMPTS; init_attempts++) {
 80038b4:	2300      	movs	r3, #0
 80038b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80038ba:	e054      	b.n	8003966 <StartSDLoggingTask+0xde>
    LOG_INFO("[SD_TASK] Initialization attempt %d/%d", init_attempts + 1, MAX_INIT_ATTEMPTS);
 80038bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80038c6:	4966      	ldr	r1, [pc, #408]	@ (8003a60 <StartSDLoggingTask+0x1d8>)
 80038c8:	2001      	movs	r0, #1
 80038ca:	f001 fd53 	bl	8005374 <LOGGER_SendFormatted>
    
    // SDStorage_Init을 타임아웃과 함께 호출
    uint32_t init_start_time = HAL_GetTick();
 80038ce:	f002 fb1b 	bl	8005f08 <HAL_GetTick>
 80038d2:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
    const uint32_t INIT_TIMEOUT_MS = 10000;  // 10초 타임아웃
 80038d6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80038da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    
    // TODO: 실제로는 별도 태스크에서 SDStorage_Init 호출하고 여기서는 폴링
    // 현재는 간단히 직접 호출하되 타임아웃 체크
    int init_result = SDStorage_Init();
 80038de:	f7fd fc21 	bl	8001124 <SDStorage_Init>
 80038e2:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    uint32_t init_duration = HAL_GetTick() - init_start_time;
 80038e6:	f002 fb0f 	bl	8005f08 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    
    LOG_INFO("[SD_TASK] Init attempt %d took %lu ms, result: %d", 
 80038f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003906:	4957      	ldr	r1, [pc, #348]	@ (8003a64 <StartSDLoggingTask+0x1dc>)
 8003908:	2001      	movs	r0, #1
 800390a:	f001 fd33 	bl	8005374 <LOGGER_SendFormatted>
             init_attempts + 1, init_duration, init_result);
    
    if (init_result == SDSTORAGE_OK) {
 800390e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10a      	bne.n	800392c <StartSDLoggingTask+0xa4>
      LOG_INFO("[SD_TASK] ✅ SD initialization successful!");
 8003916:	4954      	ldr	r1, [pc, #336]	@ (8003a68 <StartSDLoggingTask+0x1e0>)
 8003918:	2001      	movs	r0, #1
 800391a:	f001 fd2b 	bl	8005374 <LOGGER_SendFormatted>
      g_sd_initialization_result = SDSTORAGE_OK;
 800391e:	4b53      	ldr	r3, [pc, #332]	@ (8003a6c <StartSDLoggingTask+0x1e4>)
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
      g_sd_logging_active = true;
 8003924:	4b52      	ldr	r3, [pc, #328]	@ (8003a70 <StartSDLoggingTask+0x1e8>)
 8003926:	2201      	movs	r2, #1
 8003928:	701a      	strb	r2, [r3, #0]
      break;
 800392a:	e022      	b.n	8003972 <StartSDLoggingTask+0xea>
    } else {
      LOG_WARN("[SD_TASK] ⚠️ SD init attempt %d failed (code: %d)", 
 800392c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003936:	494f      	ldr	r1, [pc, #316]	@ (8003a74 <StartSDLoggingTask+0x1ec>)
 8003938:	2002      	movs	r0, #2
 800393a:	f001 fd1b 	bl	8005374 <LOGGER_SendFormatted>
               init_attempts + 1, init_result);
      
      if (init_attempts < MAX_INIT_ATTEMPTS - 1) {
 800393e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003942:	3b01      	subs	r3, #1
 8003944:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003948:	429a      	cmp	r2, r3
 800394a:	da07      	bge.n	800395c <StartSDLoggingTask+0xd4>
        LOG_INFO("[SD_TASK] Waiting 5 seconds before retry...");
 800394c:	494a      	ldr	r1, [pc, #296]	@ (8003a78 <StartSDLoggingTask+0x1f0>)
 800394e:	2001      	movs	r0, #1
 8003950:	f001 fd10 	bl	8005374 <LOGGER_SendFormatted>
        osDelay(5000);
 8003954:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003958:	f011 f8b0 	bl	8014abc <osDelay>
  for (init_attempts = 0; init_attempts < MAX_INIT_ATTEMPTS; init_attempts++) {
 800395c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003960:	3301      	adds	r3, #1
 8003962:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003966:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800396a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800396e:	429a      	cmp	r2, r3
 8003970:	dba4      	blt.n	80038bc <StartSDLoggingTask+0x34>
      }
    }
  }
  
  if (!g_sd_logging_active) {
 8003972:	4b3f      	ldr	r3, [pc, #252]	@ (8003a70 <StartSDLoggingTask+0x1e8>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	f083 0301 	eor.w	r3, r3, #1
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00c      	beq.n	800399a <StartSDLoggingTask+0x112>
    LOG_ERROR("[SD_TASK] ❌ All SD initialization attempts failed");
 8003980:	493e      	ldr	r1, [pc, #248]	@ (8003a7c <StartSDLoggingTask+0x1f4>)
 8003982:	2003      	movs	r0, #3
 8003984:	f001 fcf6 	bl	8005374 <LOGGER_SendFormatted>
    LOG_INFO("[SD_TASK] Continuing with terminal-only logging");
 8003988:	493d      	ldr	r1, [pc, #244]	@ (8003a80 <StartSDLoggingTask+0x1f8>)
 800398a:	2001      	movs	r0, #1
 800398c:	f001 fcf2 	bl	8005374 <LOGGER_SendFormatted>
    
    // SD 실패해도 태스크는 계속 실행 (나중에 재시도 가능)
    for(;;) {
      osDelay(60000);  // 1분마다 재시도 체크 (향후 확장)
 8003990:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8003994:	f011 f892 	bl	8014abc <osDelay>
 8003998:	e7fa      	b.n	8003990 <StartSDLoggingTask+0x108>
    }
  }
  
  LOG_INFO("[SD_TASK] 🗂️ SD logging queue processing started");
 800399a:	493a      	ldr	r1, [pc, #232]	@ (8003a84 <StartSDLoggingTask+0x1fc>)
 800399c:	2001      	movs	r0, #1
 800399e:	f001 fce9 	bl	8005374 <LOGGER_SendFormatted>
  
  // SD 로그 큐 처리 메인 루프
  for(;;)
  {
    SDLogEntry_t log_entry;
    osEvent event = osMessageGet(sdLogQueueHandle, 1000);  // 1초 타임아웃
 80039a2:	4b39      	ldr	r3, [pc, #228]	@ (8003a88 <StartSDLoggingTask+0x200>)
 80039a4:	6819      	ldr	r1, [r3, #0]
 80039a6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80039aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80039ae:	4618      	mov	r0, r3
 80039b0:	f011 f900 	bl	8014bb4 <osMessageGet>
    
    if (event.status == osEventMessage) {
 80039b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039b8:	2b10      	cmp	r3, #16
 80039ba:	d12d      	bne.n	8003a18 <StartSDLoggingTask+0x190>
      // 큐에서 로그 엔트리 수신
      log_entry = *((SDLogEntry_t*)event.value.p);
 80039bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039c0:	f107 0308 	add.w	r3, r7, #8
 80039c4:	4611      	mov	r1, r2
 80039c6:	2288      	movs	r2, #136	@ 0x88
 80039c8:	4618      	mov	r0, r3
 80039ca:	f013 ff2a 	bl	8017822 <memcpy>
      
      // SD에 안전하게 쓰기 (타임아웃 포함)
      uint32_t write_start = HAL_GetTick();
 80039ce:	f002 fa9b 	bl	8005f08 <HAL_GetTick>
 80039d2:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
      int write_result = SDStorage_WriteLog(log_entry.message, log_entry.length);
 80039d6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80039da:	f107 0308 	add.w	r3, r7, #8
 80039de:	4611      	mov	r1, r2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fd fdbd 	bl	8001560 <SDStorage_WriteLog>
 80039e6:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
      uint32_t write_duration = HAL_GetTick() - write_start;
 80039ea:	f002 fa8d 	bl	8005f08 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
      
      if (write_result != SDSTORAGE_OK) {
 80039fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <StartSDLoggingTask+0x190>
        // SD 쓰기 실패 - 터미널에만 에러 출력 (무한루프 방지)
        printf("[SD_TASK] Write failed (duration: %lu ms, result: %d)\n", 
 8003a02:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003a06:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003a0a:	4820      	ldr	r0, [pc, #128]	@ (8003a8c <StartSDLoggingTask+0x204>)
 8003a0c:	f013 fd6a 	bl	80174e4 <iprintf>
               write_duration, write_result);
        
        // SD 쓰기 실패 시 잠시 대기 후 재시도 여부 결정
        osDelay(1000);
 8003a10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a14:	f011 f852 	bl	8014abc <osDelay>
      }
    }
    
    // 주기적으로 SD 상태 체크 (1분마다)
    static uint32_t status_check_counter = 0;
    status_check_counter++;
 8003a18:	4b1d      	ldr	r3, [pc, #116]	@ (8003a90 <StartSDLoggingTask+0x208>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8003a90 <StartSDLoggingTask+0x208>)
 8003a20:	6013      	str	r3, [r2, #0]
    if (status_check_counter % 60 == 0) {  // 60초마다
 8003a22:	4b1b      	ldr	r3, [pc, #108]	@ (8003a90 <StartSDLoggingTask+0x208>)
 8003a24:	6819      	ldr	r1, [r3, #0]
 8003a26:	4b1b      	ldr	r3, [pc, #108]	@ (8003a94 <StartSDLoggingTask+0x20c>)
 8003a28:	fba3 2301 	umull	r2, r3, r3, r1
 8003a2c:	095a      	lsrs	r2, r3, #5
 8003a2e:	4613      	mov	r3, r2
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	1a9b      	subs	r3, r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	1aca      	subs	r2, r1, r3
 8003a38:	2a00      	cmp	r2, #0
 8003a3a:	d108      	bne.n	8003a4e <StartSDLoggingTask+0x1c6>
      if (SDStorage_IsReady()) {
 8003a3c:	f7fd fff8 	bl	8001a30 <SDStorage_IsReady>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d103      	bne.n	8003a4e <StartSDLoggingTask+0x1c6>
        // SD 상태 정상
      } else {
        // SD 상태 이상 - 재초기화 시도 (향후 확장)
        LOG_WARN("[SD_TASK] SD card appears disconnected - monitoring");
 8003a46:	4914      	ldr	r1, [pc, #80]	@ (8003a98 <StartSDLoggingTask+0x210>)
 8003a48:	2002      	movs	r0, #2
 8003a4a:	f001 fc93 	bl	8005374 <LOGGER_SendFormatted>
      }
    }
    
    osDelay(50);  // CPU 부하 방지
 8003a4e:	2032      	movs	r0, #50	@ 0x32
 8003a50:	f011 f834 	bl	8014abc <osDelay>
  {
 8003a54:	e7a5      	b.n	80039a2 <StartSDLoggingTask+0x11a>
 8003a56:	bf00      	nop
 8003a58:	0801aa7c 	.word	0x0801aa7c
 8003a5c:	0801aa9c 	.word	0x0801aa9c
 8003a60:	0801aad0 	.word	0x0801aad0
 8003a64:	0801aaf8 	.word	0x0801aaf8
 8003a68:	0801ab2c 	.word	0x0801ab2c
 8003a6c:	20000014 	.word	0x20000014
 8003a70:	200021a0 	.word	0x200021a0
 8003a74:	0801ab58 	.word	0x0801ab58
 8003a78:	0801ab90 	.word	0x0801ab90
 8003a7c:	0801abbc 	.word	0x0801abbc
 8003a80:	0801abf0 	.word	0x0801abf0
 8003a84:	0801ac20 	.word	0x0801ac20
 8003a88:	2000219c 	.word	0x2000219c
 8003a8c:	0801ac58 	.word	0x0801ac58
 8003a90:	20002418 	.word	0x20002418
 8003a94:	88888889 	.word	0x88888889
 8003a98:	0801ac90 	.word	0x0801ac90

08003a9c <StartReceiveTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003aa2:	af02      	add	r7, sp, #8
 8003aa4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003aa8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003aac:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartReceiveTask */
  LOG_INFO("=== DMA-based Receive Task Started ===");
 8003aae:	498c      	ldr	r1, [pc, #560]	@ (8003ce0 <StartReceiveTask+0x244>)
 8003ab0:	2001      	movs	r0, #1
 8003ab2:	f001 fc5f 	bl	8005374 <LOGGER_SendFormatted>
  
  // UART 초기화 대기
  osDelay(2000);
 8003ab6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003aba:	f010 ffff 	bl	8014abc <osDelay>
  
  // TDD 모듈들을 사용한 DMA 기반 수신 태스크
  char local_buffer[512];
  int local_bytes_received = 0;
 8003abe:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003ac2:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
  
  for(;;)
  {
    // TDD UART 모듈을 통한 DMA 기반 수신 체크
    UartStatus status = UART_Receive(local_buffer, sizeof(local_buffer), &local_bytes_received);
 8003aca:	f107 0208 	add.w	r2, r7, #8
 8003ace:	f107 030c 	add.w	r3, r7, #12
 8003ad2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f001 fdaa 	bl	8005630 <UART_Receive>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    
    // 디버깅용: 수신 상태 체크 (에러 상태일 때만)
    static uint32_t debug_counter = 0;
    debug_counter++;
 8003ae2:	4b80      	ldr	r3, [pc, #512]	@ (8003ce4 <StartReceiveTask+0x248>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	4a7e      	ldr	r2, [pc, #504]	@ (8003ce4 <StartReceiveTask+0x248>)
 8003aea:	6013      	str	r3, [r2, #0]
    if (debug_counter % 1200 == 0 && status != UART_STATUS_TIMEOUT) {  // 1분마다, 타임아웃 제외
 8003aec:	4b7d      	ldr	r3, [pc, #500]	@ (8003ce4 <StartReceiveTask+0x248>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	4b7d      	ldr	r3, [pc, #500]	@ (8003ce8 <StartReceiveTask+0x24c>)
 8003af2:	fba3 1302 	umull	r1, r3, r3, r2
 8003af6:	09db      	lsrs	r3, r3, #7
 8003af8:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8003afc:	fb01 f303 	mul.w	r3, r1, r3
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d116      	bne.n	8003b34 <StartReceiveTask+0x98>
 8003b06:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d012      	beq.n	8003b34 <StartReceiveTask+0x98>
      LOG_DEBUG("[RX_TASK] Status check #%lu: status=%d, bytes=%d", 
 8003b0e:	4b75      	ldr	r3, [pc, #468]	@ (8003ce4 <StartReceiveTask+0x248>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a75      	ldr	r2, [pc, #468]	@ (8003ce8 <StartReceiveTask+0x24c>)
 8003b14:	fba2 2303 	umull	r2, r3, r2, r3
 8003b18:	09da      	lsrs	r2, r3, #7
 8003b1a:	f897 120e 	ldrb.w	r1, [r7, #526]	@ 0x20e
 8003b1e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003b22:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	496f      	ldr	r1, [pc, #444]	@ (8003cec <StartReceiveTask+0x250>)
 8003b2e:	2000      	movs	r0, #0
 8003b30:	f001 fc20 	bl	8005374 <LOGGER_SendFormatted>
               debug_counter / 1200, status, local_bytes_received);
    }
    
    if (status == UART_STATUS_OK && local_bytes_received > 0) {
 8003b34:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f040 80cc 	bne.w	8003cd6 <StartReceiveTask+0x23a>
 8003b3e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003b42:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f340 80c4 	ble.w	8003cd6 <StartReceiveTask+0x23a>
      // 수신 완료 - 간단한 수신 로그 + ResponseHandler 분석
      LOG_INFO("📥 RECV: '%.30s%s' (%d bytes)", 
 8003b4e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003b52:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b1e      	cmp	r3, #30
 8003b5a:	dd01      	ble.n	8003b60 <StartReceiveTask+0xc4>
 8003b5c:	4964      	ldr	r1, [pc, #400]	@ (8003cf0 <StartReceiveTask+0x254>)
 8003b5e:	e000      	b.n	8003b62 <StartReceiveTask+0xc6>
 8003b60:	4964      	ldr	r1, [pc, #400]	@ (8003cf4 <StartReceiveTask+0x258>)
 8003b62:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003b66:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f107 020c 	add.w	r2, r7, #12
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	460b      	mov	r3, r1
 8003b74:	4960      	ldr	r1, [pc, #384]	@ (8003cf8 <StartReceiveTask+0x25c>)
 8003b76:	2001      	movs	r0, #1
 8003b78:	f001 fbfc 	bl	8005374 <LOGGER_SendFormatted>
               local_buffer, 
               (local_bytes_received > 30) ? "..." : "", 
               local_bytes_received);
      
      // 기본적인 응답 타입 체크 (ResponseHandler에서 상세 로그 출력)
      if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8003b7c:	f107 030c 	add.w	r3, r7, #12
 8003b80:	495e      	ldr	r1, [pc, #376]	@ (8003cfc <StartReceiveTask+0x260>)
 8003b82:	4618      	mov	r0, r3
 8003b84:	f013 fdb3 	bl	80176ee <strstr>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d004      	beq.n	8003b98 <StartReceiveTask+0xfc>
        LOG_WARN("✅ JOIN CONFIRMED - Network joined successfully");
 8003b8e:	495c      	ldr	r1, [pc, #368]	@ (8003d00 <StartReceiveTask+0x264>)
 8003b90:	2002      	movs	r0, #2
 8003b92:	f001 fbef 	bl	8005374 <LOGGER_SendFormatted>
 8003b96:	e00c      	b.n	8003bb2 <StartReceiveTask+0x116>
      } else if (strstr(local_buffer, "RAKwireless") != NULL) {
 8003b98:	f107 030c 	add.w	r3, r7, #12
 8003b9c:	4959      	ldr	r1, [pc, #356]	@ (8003d04 <StartReceiveTask+0x268>)
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f013 fda5 	bl	80176ee <strstr>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <StartReceiveTask+0x116>
        LOG_DEBUG("📡 LoRa module boot message (ignored)");
 8003baa:	4957      	ldr	r1, [pc, #348]	@ (8003d08 <StartReceiveTask+0x26c>)
 8003bac:	2000      	movs	r0, #0
 8003bae:	f001 fbe1 	bl	8005374 <LOGGER_SendFormatted>
      }
      // 나머지 응답 분석은 아래 필터링 로직에서 한 번만 처리
      
      // 전역 변수에 복사 (다른 태스크에서 사용 가능)
      memcpy(rx_buffer, local_buffer, local_bytes_received);
 8003bb2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003bb6:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f107 030c 	add.w	r3, r7, #12
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4851      	ldr	r0, [pc, #324]	@ (8003d0c <StartReceiveTask+0x270>)
 8003bc6:	f013 fe2c 	bl	8017822 <memcpy>
      rx_bytes_received = local_bytes_received;
 8003bca:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003bce:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a4e      	ldr	r2, [pc, #312]	@ (8003d10 <StartReceiveTask+0x274>)
 8003bd6:	6013      	str	r3, [r2, #0]
      
      // LoRa 상태 머신에 전달할 응답만 필터링
      bool is_lora_command_response = false;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
      
      if (is_response_ok(local_buffer)) {
 8003bde:	f107 030c 	add.w	r3, r7, #12
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fd f8d2 	bl	8000d8c <is_response_ok>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <StartReceiveTask+0x15a>
        // OK 응답 - LoRa 명령에 대한 응답
        is_lora_command_response = true;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003bf4:	e03f      	b.n	8003c76 <StartReceiveTask+0x1da>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8003bf6:	f107 030c 	add.w	r3, r7, #12
 8003bfa:	4940      	ldr	r1, [pc, #256]	@ (8003cfc <StartReceiveTask+0x260>)
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f013 fd76 	bl	80176ee <strstr>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <StartReceiveTask+0x174>
        // JOIN 성공 응답
        is_lora_command_response = true;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003c0e:	e032      	b.n	8003c76 <StartReceiveTask+0x1da>
      } else if (strstr(local_buffer, "+EVT:") != NULL) {
 8003c10:	f107 030c 	add.w	r3, r7, #12
 8003c14:	493f      	ldr	r1, [pc, #252]	@ (8003d14 <StartReceiveTask+0x278>)
 8003c16:	4618      	mov	r0, r3
 8003c18:	f013 fd69 	bl	80176ee <strstr>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <StartReceiveTask+0x18e>
        // 기타 LoRa 이벤트 응답들
        is_lora_command_response = true;
 8003c22:	2301      	movs	r3, #1
 8003c24:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003c28:	e025      	b.n	8003c76 <StartReceiveTask+0x1da>
      } else if (strstr(local_buffer, "RAKwireless") != NULL || strstr(local_buffer, "ORAKwireless") != NULL) {
 8003c2a:	f107 030c 	add.w	r3, r7, #12
 8003c2e:	4935      	ldr	r1, [pc, #212]	@ (8003d04 <StartReceiveTask+0x268>)
 8003c30:	4618      	mov	r0, r3
 8003c32:	f013 fd5c 	bl	80176ee <strstr>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d108      	bne.n	8003c4e <StartReceiveTask+0x1b2>
 8003c3c:	f107 030c 	add.w	r3, r7, #12
 8003c40:	4935      	ldr	r1, [pc, #212]	@ (8003d18 <StartReceiveTask+0x27c>)
 8003c42:	4618      	mov	r0, r3
 8003c44:	f013 fd53 	bl	80176ee <strstr>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d004      	beq.n	8003c58 <StartReceiveTask+0x1bc>
        // 부트 메시지 - LoRa 상태 머신에 전달하지 않음
        LOG_DEBUG("[RX_TASK] Boot message filtered out from LoRa state machine");
 8003c4e:	4933      	ldr	r1, [pc, #204]	@ (8003d1c <StartReceiveTask+0x280>)
 8003c50:	2000      	movs	r0, #0
 8003c52:	f001 fb8f 	bl	8005374 <LOGGER_SendFormatted>
 8003c56:	e00e      	b.n	8003c76 <StartReceiveTask+0x1da>
      } else {
        // 기타 응답들 (ERROR, TIMEOUT 등)
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 8003c58:	f107 030c 	add.w	r3, r7, #12
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fd f981 	bl	8000f64 <ResponseHandler_ParseSendResponse>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
        if (response_type != RESPONSE_UNKNOWN) {
 8003c68:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d002      	beq.n	8003c76 <StartReceiveTask+0x1da>
          is_lora_command_response = true;
 8003c70:	2301      	movs	r3, #1
 8003c72:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
        }
      }
      
      // LoRa 명령 응답만 전역 변수에 복사
      if (is_lora_command_response) {
 8003c76:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d01d      	beq.n	8003cba <StartReceiveTask+0x21e>
        memcpy(lora_rx_response, local_buffer, local_bytes_received);
 8003c7e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003c82:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	f107 030c 	add.w	r3, r7, #12
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4823      	ldr	r0, [pc, #140]	@ (8003d20 <StartReceiveTask+0x284>)
 8003c92:	f013 fdc6 	bl	8017822 <memcpy>
        lora_rx_response[local_bytes_received] = '\0';
 8003c96:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003c9a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8003d20 <StartReceiveTask+0x284>)
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	54d1      	strb	r1, [r2, r3]
        lora_new_response = true;
 8003ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8003d24 <StartReceiveTask+0x288>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	701a      	strb	r2, [r3, #0]
        LOG_DEBUG("[RX_TASK] LoRa response forwarded to state machine: %.20s...", local_buffer);
 8003cac:	f107 030c 	add.w	r3, r7, #12
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	491d      	ldr	r1, [pc, #116]	@ (8003d28 <StartReceiveTask+0x28c>)
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	f001 fb5d 	bl	8005374 <LOGGER_SendFormatted>
      }
      
      // 버퍼 클리어
      memset(local_buffer, 0, sizeof(local_buffer));
 8003cba:	f107 030c 	add.w	r3, r7, #12
 8003cbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f013 fcf7 	bl	80176b8 <memset>
      local_bytes_received = 0;
 8003cca:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003cce:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
    }
    
    // DMA 기반이므로 긴 지연으로 CPU 사용률 감소
    osDelay(50);  // 50ms 지연 (DMA가 백그라운드에서 처리하므로 빠른 폴링 불필요)
 8003cd6:	2032      	movs	r0, #50	@ 0x32
 8003cd8:	f010 fef0 	bl	8014abc <osDelay>
  {
 8003cdc:	e6f5      	b.n	8003aca <StartReceiveTask+0x2e>
 8003cde:	bf00      	nop
 8003ce0:	0801acc4 	.word	0x0801acc4
 8003ce4:	2000241c 	.word	0x2000241c
 8003ce8:	1b4e81b5 	.word	0x1b4e81b5
 8003cec:	0801acec 	.word	0x0801acec
 8003cf0:	0801ad20 	.word	0x0801ad20
 8003cf4:	0801ad24 	.word	0x0801ad24
 8003cf8:	0801ad28 	.word	0x0801ad28
 8003cfc:	0801ad48 	.word	0x0801ad48
 8003d00:	0801ad54 	.word	0x0801ad54
 8003d04:	0801ad88 	.word	0x0801ad88
 8003d08:	0801ad94 	.word	0x0801ad94
 8003d0c:	20002480 	.word	0x20002480
 8003d10:	200021a4 	.word	0x200021a4
 8003d14:	0801adbc 	.word	0x0801adbc
 8003d18:	0801adc4 	.word	0x0801adc4
 8003d1c:	0801add4 	.word	0x0801add4
 8003d20:	200021a8 	.word	0x200021a8
 8003d24:	200023a8 	.word	0x200023a8
 8003d28:	0801ae10 	.word	0x0801ae10

08003d2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a04      	ldr	r2, [pc, #16]	@ (8003d4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d101      	bne.n	8003d42 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003d3e:	f002 f8cf 	bl	8005ee0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40001000 	.word	0x40001000

08003d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003d54:	b672      	cpsid	i
}
 8003d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d58:	bf00      	nop
 8003d5a:	e7fd      	b.n	8003d58 <Error_Handler+0x8>

08003d5c <MX_DMA_Init>:
  * @brief DMA Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003d62:	4b10      	ldr	r3, [pc, #64]	@ (8003da4 <MX_DMA_Init+0x48>)
 8003d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d66:	4a0f      	ldr	r2, [pc, #60]	@ (8003da4 <MX_DMA_Init+0x48>)
 8003d68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003da4 <MX_DMA_Init+0x48>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d76:	607b      	str	r3, [r7, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration - USART6_RX */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	2105      	movs	r1, #5
 8003d7e:	2039      	movs	r0, #57	@ 0x39
 8003d80:	f002 fc42 	bl	8006608 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003d84:	2039      	movs	r0, #57	@ 0x39
 8003d86:	f002 fc5b 	bl	8006640 <HAL_NVIC_EnableIRQ>
  
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2105      	movs	r1, #5
 8003d8e:	2047      	movs	r0, #71	@ 0x47
 8003d90:	f002 fc3a 	bl	8006608 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003d94:	2047      	movs	r0, #71	@ 0x47
 8003d96:	f002 fc53 	bl	8006640 <HAL_NVIC_EnableIRQ>
}
 8003d9a:	bf00      	nop
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800

08003da8 <MX_USART6_DMA_Init>:
  * @brief DMA2 Stream1 DMA configuration for USART6 RX
  * @param None
  * @retval None
  */
void MX_USART6_DMA_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
  // DMA 이미 초기화되었는지 체크
  if (hdma_usart6_rx.Instance != NULL) {
 8003dae:	4b1e      	ldr	r3, [pc, #120]	@ (8003e28 <MX_USART6_DMA_Init+0x80>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d133      	bne.n	8003e1e <MX_USART6_DMA_Init+0x76>
    return; // 이미 초기화됨
  }
  
  /* Configure DMA for USART6 RX */
  hdma_usart6_rx.Instance = DMA2_Stream1;
 8003db6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e28 <MX_USART6_DMA_Init+0x80>)
 8003db8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e2c <MX_USART6_DMA_Init+0x84>)
 8003dba:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8003e28 <MX_USART6_DMA_Init+0x80>)
 8003dbe:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003dc2:	605a      	str	r2, [r3, #4]
  hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003dc4:	4b18      	ldr	r3, [pc, #96]	@ (8003e28 <MX_USART6_DMA_Init+0x80>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	609a      	str	r2, [r3, #8]
  hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dca:	4b17      	ldr	r3, [pc, #92]	@ (8003e28 <MX_USART6_DMA_Init+0x80>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	60da      	str	r2, [r3, #12]
  hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003dd0:	4b15      	ldr	r3, [pc, #84]	@ (8003e28 <MX_USART6_DMA_Init+0x80>)
 8003dd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dd6:	611a      	str	r2, [r3, #16]
  hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dd8:	4b13      	ldr	r3, [pc, #76]	@ (8003e28 <MX_USART6_DMA_Init+0x80>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	615a      	str	r2, [r3, #20]
  hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dde:	4b12      	ldr	r3, [pc, #72]	@ (8003e28 <MX_USART6_DMA_Init+0x80>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	619a      	str	r2, [r3, #24]
  hdma_usart6_rx.Init.Mode = DMA_NORMAL;    // 일반 모드로 변경
 8003de4:	4b10      	ldr	r3, [pc, #64]	@ (8003e28 <MX_USART6_DMA_Init+0x80>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	61da      	str	r2, [r3, #28]
  hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003dea:	4b0f      	ldr	r3, [pc, #60]	@ (8003e28 <MX_USART6_DMA_Init+0x80>)
 8003dec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003df0:	621a      	str	r2, [r3, #32]
  hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003df2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e28 <MX_USART6_DMA_Init+0x80>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	625a      	str	r2, [r3, #36]	@ 0x24
  
  HAL_StatusTypeDef dma_result = HAL_DMA_Init(&hdma_usart6_rx);
 8003df8:	480b      	ldr	r0, [pc, #44]	@ (8003e28 <MX_USART6_DMA_Init+0x80>)
 8003dfa:	f002 fd9b 	bl	8006934 <HAL_DMA_Init>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	71fb      	strb	r3, [r7, #7]
  if (dma_result != HAL_OK)
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <MX_USART6_DMA_Init+0x68>
  {
    // 에러 처리하되 Error_Handler() 호출하지 않음 (시스템 중단 방지)
    hdma_usart6_rx.Instance = NULL; // 실패 표시
 8003e08:	4b07      	ldr	r3, [pc, #28]	@ (8003e28 <MX_USART6_DMA_Init+0x80>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
    return;
 8003e0e:	e007      	b.n	8003e20 <MX_USART6_DMA_Init+0x78>
  }

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8003e10:	4b07      	ldr	r3, [pc, #28]	@ (8003e30 <MX_USART6_DMA_Init+0x88>)
 8003e12:	4a05      	ldr	r2, [pc, #20]	@ (8003e28 <MX_USART6_DMA_Init+0x80>)
 8003e14:	675a      	str	r2, [r3, #116]	@ 0x74
 8003e16:	4b04      	ldr	r3, [pc, #16]	@ (8003e28 <MX_USART6_DMA_Init+0x80>)
 8003e18:	4a05      	ldr	r2, [pc, #20]	@ (8003e30 <MX_USART6_DMA_Init+0x88>)
 8003e1a:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e1c:	e000      	b.n	8003e20 <MX_USART6_DMA_Init+0x78>
    return; // 이미 초기화됨
 8003e1e:	bf00      	nop
}
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	200023ac 	.word	0x200023ac
 8003e2c:	40026428 	.word	0x40026428
 8003e30:	200020d4 	.word	0x200020d4

08003e34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e3a:	4b11      	ldr	r3, [pc, #68]	@ (8003e80 <HAL_MspInit+0x4c>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3e:	4a10      	ldr	r2, [pc, #64]	@ (8003e80 <HAL_MspInit+0x4c>)
 8003e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e46:	4b0e      	ldr	r3, [pc, #56]	@ (8003e80 <HAL_MspInit+0x4c>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e4e:	607b      	str	r3, [r7, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e52:	4b0b      	ldr	r3, [pc, #44]	@ (8003e80 <HAL_MspInit+0x4c>)
 8003e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e56:	4a0a      	ldr	r2, [pc, #40]	@ (8003e80 <HAL_MspInit+0x4c>)
 8003e58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e5e:	4b08      	ldr	r3, [pc, #32]	@ (8003e80 <HAL_MspInit+0x4c>)
 8003e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	210f      	movs	r1, #15
 8003e6e:	f06f 0001 	mvn.w	r0, #1
 8003e72:	f002 fbc9 	bl	8006608 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800

08003e84 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08a      	sub	sp, #40	@ 0x28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e8c:	f107 0314 	add.w	r3, r7, #20
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	605a      	str	r2, [r3, #4]
 8003e96:	609a      	str	r2, [r3, #8]
 8003e98:	60da      	str	r2, [r3, #12]
 8003e9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a21      	ldr	r2, [pc, #132]	@ (8003f28 <HAL_ADC_MspInit+0xa4>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d13c      	bne.n	8003f20 <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003ea6:	4b21      	ldr	r3, [pc, #132]	@ (8003f2c <HAL_ADC_MspInit+0xa8>)
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eaa:	4a20      	ldr	r2, [pc, #128]	@ (8003f2c <HAL_ADC_MspInit+0xa8>)
 8003eac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f2c <HAL_ADC_MspInit+0xa8>)
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8003f2c <HAL_ADC_MspInit+0xa8>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec2:	4a1a      	ldr	r2, [pc, #104]	@ (8003f2c <HAL_ADC_MspInit+0xa8>)
 8003ec4:	f043 0320 	orr.w	r3, r3, #32
 8003ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eca:	4b18      	ldr	r3, [pc, #96]	@ (8003f2c <HAL_ADC_MspInit+0xa8>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ed6:	4b15      	ldr	r3, [pc, #84]	@ (8003f2c <HAL_ADC_MspInit+0xa8>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eda:	4a14      	ldr	r2, [pc, #80]	@ (8003f2c <HAL_ADC_MspInit+0xa8>)
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ee2:	4b12      	ldr	r3, [pc, #72]	@ (8003f2c <HAL_ADC_MspInit+0xa8>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	60bb      	str	r3, [r7, #8]
 8003eec:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8003eee:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8003ef2:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003efc:	f107 0314 	add.w	r3, r7, #20
 8003f00:	4619      	mov	r1, r3
 8003f02:	480b      	ldr	r0, [pc, #44]	@ (8003f30 <HAL_ADC_MspInit+0xac>)
 8003f04:	f003 fec4 	bl	8007c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f10:	2300      	movs	r3, #0
 8003f12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8003f14:	f107 0314 	add.w	r3, r7, #20
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4806      	ldr	r0, [pc, #24]	@ (8003f34 <HAL_ADC_MspInit+0xb0>)
 8003f1c:	f003 feb8 	bl	8007c90 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 8003f20:	bf00      	nop
 8003f22:	3728      	adds	r7, #40	@ 0x28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40012200 	.word	0x40012200
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	40021400 	.word	0x40021400
 8003f34:	40020000 	.word	0x40020000

08003f38 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a0a      	ldr	r2, [pc, #40]	@ (8003f70 <HAL_CRC_MspInit+0x38>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d10b      	bne.n	8003f62 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f74 <HAL_CRC_MspInit+0x3c>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4e:	4a09      	ldr	r2, [pc, #36]	@ (8003f74 <HAL_CRC_MspInit+0x3c>)
 8003f50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f56:	4b07      	ldr	r3, [pc, #28]	@ (8003f74 <HAL_CRC_MspInit+0x3c>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8003f62:	bf00      	nop
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40023000 	.word	0x40023000
 8003f74:	40023800 	.word	0x40023800

08003f78 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08e      	sub	sp, #56	@ 0x38
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	60da      	str	r2, [r3, #12]
 8003f8e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a50      	ldr	r2, [pc, #320]	@ (80040d8 <HAL_DCMI_MspInit+0x160>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	f040 809a 	bne.w	80040d0 <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8003f9c:	4b4f      	ldr	r3, [pc, #316]	@ (80040dc <HAL_DCMI_MspInit+0x164>)
 8003f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fa0:	4a4e      	ldr	r2, [pc, #312]	@ (80040dc <HAL_DCMI_MspInit+0x164>)
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	6353      	str	r3, [r2, #52]	@ 0x34
 8003fa8:	4b4c      	ldr	r3, [pc, #304]	@ (80040dc <HAL_DCMI_MspInit+0x164>)
 8003faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	623b      	str	r3, [r7, #32]
 8003fb2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fb4:	4b49      	ldr	r3, [pc, #292]	@ (80040dc <HAL_DCMI_MspInit+0x164>)
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb8:	4a48      	ldr	r2, [pc, #288]	@ (80040dc <HAL_DCMI_MspInit+0x164>)
 8003fba:	f043 0310 	orr.w	r3, r3, #16
 8003fbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fc0:	4b46      	ldr	r3, [pc, #280]	@ (80040dc <HAL_DCMI_MspInit+0x164>)
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc4:	f003 0310 	and.w	r3, r3, #16
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fcc:	4b43      	ldr	r3, [pc, #268]	@ (80040dc <HAL_DCMI_MspInit+0x164>)
 8003fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd0:	4a42      	ldr	r2, [pc, #264]	@ (80040dc <HAL_DCMI_MspInit+0x164>)
 8003fd2:	f043 0308 	orr.w	r3, r3, #8
 8003fd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fd8:	4b40      	ldr	r3, [pc, #256]	@ (80040dc <HAL_DCMI_MspInit+0x164>)
 8003fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	61bb      	str	r3, [r7, #24]
 8003fe2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003fe4:	4b3d      	ldr	r3, [pc, #244]	@ (80040dc <HAL_DCMI_MspInit+0x164>)
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe8:	4a3c      	ldr	r2, [pc, #240]	@ (80040dc <HAL_DCMI_MspInit+0x164>)
 8003fea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fee:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80040dc <HAL_DCMI_MspInit+0x164>)
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff8:	617b      	str	r3, [r7, #20]
 8003ffa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ffc:	4b37      	ldr	r3, [pc, #220]	@ (80040dc <HAL_DCMI_MspInit+0x164>)
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004000:	4a36      	ldr	r2, [pc, #216]	@ (80040dc <HAL_DCMI_MspInit+0x164>)
 8004002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004006:	6313      	str	r3, [r2, #48]	@ 0x30
 8004008:	4b34      	ldr	r3, [pc, #208]	@ (80040dc <HAL_DCMI_MspInit+0x164>)
 800400a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004010:	613b      	str	r3, [r7, #16]
 8004012:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004014:	4b31      	ldr	r3, [pc, #196]	@ (80040dc <HAL_DCMI_MspInit+0x164>)
 8004016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004018:	4a30      	ldr	r2, [pc, #192]	@ (80040dc <HAL_DCMI_MspInit+0x164>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004020:	4b2e      	ldr	r3, [pc, #184]	@ (80040dc <HAL_DCMI_MspInit+0x164>)
 8004022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800402c:	2360      	movs	r3, #96	@ 0x60
 800402e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004030:	2302      	movs	r3, #2
 8004032:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004034:	2300      	movs	r3, #0
 8004036:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004038:	2300      	movs	r3, #0
 800403a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800403c:	230d      	movs	r3, #13
 800403e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004040:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004044:	4619      	mov	r1, r3
 8004046:	4826      	ldr	r0, [pc, #152]	@ (80040e0 <HAL_DCMI_MspInit+0x168>)
 8004048:	f003 fe22 	bl	8007c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800404c:	2308      	movs	r3, #8
 800404e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004050:	2302      	movs	r3, #2
 8004052:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004054:	2300      	movs	r3, #0
 8004056:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004058:	2300      	movs	r3, #0
 800405a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800405c:	230d      	movs	r3, #13
 800405e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8004060:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004064:	4619      	mov	r1, r3
 8004066:	481f      	ldr	r0, [pc, #124]	@ (80040e4 <HAL_DCMI_MspInit+0x16c>)
 8004068:	f003 fe12 	bl	8007c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800406c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004072:	2302      	movs	r3, #2
 8004074:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004076:	2300      	movs	r3, #0
 8004078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800407a:	2300      	movs	r3, #0
 800407c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800407e:	230d      	movs	r3, #13
 8004080:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8004082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004086:	4619      	mov	r1, r3
 8004088:	4817      	ldr	r0, [pc, #92]	@ (80040e8 <HAL_DCMI_MspInit+0x170>)
 800408a:	f003 fe01 	bl	8007c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800408e:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8004092:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004094:	2302      	movs	r3, #2
 8004096:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004098:	2300      	movs	r3, #0
 800409a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800409c:	2300      	movs	r3, #0
 800409e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80040a0:	230d      	movs	r3, #13
 80040a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80040a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040a8:	4619      	mov	r1, r3
 80040aa:	4810      	ldr	r0, [pc, #64]	@ (80040ec <HAL_DCMI_MspInit+0x174>)
 80040ac:	f003 fdf0 	bl	8007c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80040b0:	2350      	movs	r3, #80	@ 0x50
 80040b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b4:	2302      	movs	r3, #2
 80040b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b8:	2300      	movs	r3, #0
 80040ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040bc:	2300      	movs	r3, #0
 80040be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80040c0:	230d      	movs	r3, #13
 80040c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040c8:	4619      	mov	r1, r3
 80040ca:	4809      	ldr	r0, [pc, #36]	@ (80040f0 <HAL_DCMI_MspInit+0x178>)
 80040cc:	f003 fde0 	bl	8007c90 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 80040d0:	bf00      	nop
 80040d2:	3738      	adds	r7, #56	@ 0x38
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	50050000 	.word	0x50050000
 80040dc:	40023800 	.word	0x40023800
 80040e0:	40021000 	.word	0x40021000
 80040e4:	40020c00 	.word	0x40020c00
 80040e8:	40021800 	.word	0x40021800
 80040ec:	40021c00 	.word	0x40021c00
 80040f0:	40020000 	.word	0x40020000

080040f4 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a0d      	ldr	r2, [pc, #52]	@ (8004138 <HAL_DMA2D_MspInit+0x44>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d113      	bne.n	800412e <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004106:	4b0d      	ldr	r3, [pc, #52]	@ (800413c <HAL_DMA2D_MspInit+0x48>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410a:	4a0c      	ldr	r2, [pc, #48]	@ (800413c <HAL_DMA2D_MspInit+0x48>)
 800410c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004110:	6313      	str	r3, [r2, #48]	@ 0x30
 8004112:	4b0a      	ldr	r3, [pc, #40]	@ (800413c <HAL_DMA2D_MspInit+0x48>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004116:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800411e:	2200      	movs	r2, #0
 8004120:	2105      	movs	r1, #5
 8004122:	205a      	movs	r0, #90	@ 0x5a
 8004124:	f002 fa70 	bl	8006608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004128:	205a      	movs	r0, #90	@ 0x5a
 800412a:	f002 fa89 	bl	8006640 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800412e:	bf00      	nop
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	4002b000 	.word	0x4002b000
 800413c:	40023800 	.word	0x40023800

08004140 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08e      	sub	sp, #56	@ 0x38
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004148:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	60da      	str	r2, [r3, #12]
 8004156:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a3f      	ldr	r2, [pc, #252]	@ (800425c <HAL_ETH_MspInit+0x11c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d178      	bne.n	8004254 <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004162:	4b3f      	ldr	r3, [pc, #252]	@ (8004260 <HAL_ETH_MspInit+0x120>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004166:	4a3e      	ldr	r2, [pc, #248]	@ (8004260 <HAL_ETH_MspInit+0x120>)
 8004168:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800416c:	6313      	str	r3, [r2, #48]	@ 0x30
 800416e:	4b3c      	ldr	r3, [pc, #240]	@ (8004260 <HAL_ETH_MspInit+0x120>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004176:	623b      	str	r3, [r7, #32]
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	4b39      	ldr	r3, [pc, #228]	@ (8004260 <HAL_ETH_MspInit+0x120>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417e:	4a38      	ldr	r2, [pc, #224]	@ (8004260 <HAL_ETH_MspInit+0x120>)
 8004180:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004184:	6313      	str	r3, [r2, #48]	@ 0x30
 8004186:	4b36      	ldr	r3, [pc, #216]	@ (8004260 <HAL_ETH_MspInit+0x120>)
 8004188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800418e:	61fb      	str	r3, [r7, #28]
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	4b33      	ldr	r3, [pc, #204]	@ (8004260 <HAL_ETH_MspInit+0x120>)
 8004194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004196:	4a32      	ldr	r2, [pc, #200]	@ (8004260 <HAL_ETH_MspInit+0x120>)
 8004198:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800419c:	6313      	str	r3, [r2, #48]	@ 0x30
 800419e:	4b30      	ldr	r3, [pc, #192]	@ (8004260 <HAL_ETH_MspInit+0x120>)
 80041a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041a6:	61bb      	str	r3, [r7, #24]
 80041a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80041aa:	4b2d      	ldr	r3, [pc, #180]	@ (8004260 <HAL_ETH_MspInit+0x120>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004260 <HAL_ETH_MspInit+0x120>)
 80041b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80041b6:	4b2a      	ldr	r3, [pc, #168]	@ (8004260 <HAL_ETH_MspInit+0x120>)
 80041b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041c2:	4b27      	ldr	r3, [pc, #156]	@ (8004260 <HAL_ETH_MspInit+0x120>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c6:	4a26      	ldr	r2, [pc, #152]	@ (8004260 <HAL_ETH_MspInit+0x120>)
 80041c8:	f043 0304 	orr.w	r3, r3, #4
 80041cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80041ce:	4b24      	ldr	r3, [pc, #144]	@ (8004260 <HAL_ETH_MspInit+0x120>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041da:	4b21      	ldr	r3, [pc, #132]	@ (8004260 <HAL_ETH_MspInit+0x120>)
 80041dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041de:	4a20      	ldr	r2, [pc, #128]	@ (8004260 <HAL_ETH_MspInit+0x120>)
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80041e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004260 <HAL_ETH_MspInit+0x120>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80041f2:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80041f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f8:	2302      	movs	r3, #2
 80041fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041fc:	2300      	movs	r3, #0
 80041fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004200:	2303      	movs	r3, #3
 8004202:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004204:	230b      	movs	r3, #11
 8004206:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004208:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800420c:	4619      	mov	r1, r3
 800420e:	4815      	ldr	r0, [pc, #84]	@ (8004264 <HAL_ETH_MspInit+0x124>)
 8004210:	f003 fd3e 	bl	8007c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004214:	2332      	movs	r3, #50	@ 0x32
 8004216:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004218:	2302      	movs	r3, #2
 800421a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421c:	2300      	movs	r3, #0
 800421e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004220:	2303      	movs	r3, #3
 8004222:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004224:	230b      	movs	r3, #11
 8004226:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004228:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800422c:	4619      	mov	r1, r3
 800422e:	480e      	ldr	r0, [pc, #56]	@ (8004268 <HAL_ETH_MspInit+0x128>)
 8004230:	f003 fd2e 	bl	8007c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004234:	2386      	movs	r3, #134	@ 0x86
 8004236:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004238:	2302      	movs	r3, #2
 800423a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423c:	2300      	movs	r3, #0
 800423e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004240:	2303      	movs	r3, #3
 8004242:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004244:	230b      	movs	r3, #11
 8004246:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004248:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800424c:	4619      	mov	r1, r3
 800424e:	4807      	ldr	r0, [pc, #28]	@ (800426c <HAL_ETH_MspInit+0x12c>)
 8004250:	f003 fd1e 	bl	8007c90 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8004254:	bf00      	nop
 8004256:	3738      	adds	r7, #56	@ 0x38
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40028000 	.word	0x40028000
 8004260:	40023800 	.word	0x40023800
 8004264:	40021800 	.word	0x40021800
 8004268:	40020800 	.word	0x40020800
 800426c:	40020000 	.word	0x40020000

08004270 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b0ac      	sub	sp, #176	@ 0xb0
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004278:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	605a      	str	r2, [r3, #4]
 8004282:	609a      	str	r2, [r3, #8]
 8004284:	60da      	str	r2, [r3, #12]
 8004286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004288:	f107 0318 	add.w	r3, r7, #24
 800428c:	2284      	movs	r2, #132	@ 0x84
 800428e:	2100      	movs	r1, #0
 8004290:	4618      	mov	r0, r3
 8004292:	f013 fa11 	bl	80176b8 <memset>
  if(hi2c->Instance==I2C1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a44      	ldr	r2, [pc, #272]	@ (80043ac <HAL_I2C_MspInit+0x13c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d13d      	bne.n	800431c <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80042a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80042a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80042a6:	2300      	movs	r3, #0
 80042a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042aa:	f107 0318 	add.w	r3, r7, #24
 80042ae:	4618      	mov	r0, r3
 80042b0:	f006 fe96 	bl	800afe0 <HAL_RCCEx_PeriphCLKConfig>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80042ba:	f7ff fd49 	bl	8003d50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042be:	4b3c      	ldr	r3, [pc, #240]	@ (80043b0 <HAL_I2C_MspInit+0x140>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c2:	4a3b      	ldr	r2, [pc, #236]	@ (80043b0 <HAL_I2C_MspInit+0x140>)
 80042c4:	f043 0302 	orr.w	r3, r3, #2
 80042c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80042ca:	4b39      	ldr	r3, [pc, #228]	@ (80043b0 <HAL_I2C_MspInit+0x140>)
 80042cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80042d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80042da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042de:	2312      	movs	r3, #18
 80042e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042e4:	2301      	movs	r3, #1
 80042e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ea:	2300      	movs	r3, #0
 80042ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80042f0:	2304      	movs	r3, #4
 80042f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042f6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80042fa:	4619      	mov	r1, r3
 80042fc:	482d      	ldr	r0, [pc, #180]	@ (80043b4 <HAL_I2C_MspInit+0x144>)
 80042fe:	f003 fcc7 	bl	8007c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004302:	4b2b      	ldr	r3, [pc, #172]	@ (80043b0 <HAL_I2C_MspInit+0x140>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	4a2a      	ldr	r2, [pc, #168]	@ (80043b0 <HAL_I2C_MspInit+0x140>)
 8004308:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800430c:	6413      	str	r3, [r2, #64]	@ 0x40
 800430e:	4b28      	ldr	r3, [pc, #160]	@ (80043b0 <HAL_I2C_MspInit+0x140>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004316:	613b      	str	r3, [r7, #16]
 8004318:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 800431a:	e042      	b.n	80043a2 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a25      	ldr	r2, [pc, #148]	@ (80043b8 <HAL_I2C_MspInit+0x148>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d13d      	bne.n	80043a2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004326:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800432a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800432c:	2300      	movs	r3, #0
 800432e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004332:	f107 0318 	add.w	r3, r7, #24
 8004336:	4618      	mov	r0, r3
 8004338:	f006 fe52 	bl	800afe0 <HAL_RCCEx_PeriphCLKConfig>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8004342:	f7ff fd05 	bl	8003d50 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004346:	4b1a      	ldr	r3, [pc, #104]	@ (80043b0 <HAL_I2C_MspInit+0x140>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434a:	4a19      	ldr	r2, [pc, #100]	@ (80043b0 <HAL_I2C_MspInit+0x140>)
 800434c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004350:	6313      	str	r3, [r2, #48]	@ 0x30
 8004352:	4b17      	ldr	r3, [pc, #92]	@ (80043b0 <HAL_I2C_MspInit+0x140>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800435e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8004362:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004366:	2312      	movs	r3, #18
 8004368:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800436c:	2301      	movs	r3, #1
 800436e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004372:	2303      	movs	r3, #3
 8004374:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004378:	2304      	movs	r3, #4
 800437a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800437e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004382:	4619      	mov	r1, r3
 8004384:	480d      	ldr	r0, [pc, #52]	@ (80043bc <HAL_I2C_MspInit+0x14c>)
 8004386:	f003 fc83 	bl	8007c90 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800438a:	4b09      	ldr	r3, [pc, #36]	@ (80043b0 <HAL_I2C_MspInit+0x140>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438e:	4a08      	ldr	r2, [pc, #32]	@ (80043b0 <HAL_I2C_MspInit+0x140>)
 8004390:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004394:	6413      	str	r3, [r2, #64]	@ 0x40
 8004396:	4b06      	ldr	r3, [pc, #24]	@ (80043b0 <HAL_I2C_MspInit+0x140>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800439e:	60bb      	str	r3, [r7, #8]
 80043a0:	68bb      	ldr	r3, [r7, #8]
}
 80043a2:	bf00      	nop
 80043a4:	37b0      	adds	r7, #176	@ 0xb0
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40005400 	.word	0x40005400
 80043b0:	40023800 	.word	0x40023800
 80043b4:	40020400 	.word	0x40020400
 80043b8:	40005c00 	.word	0x40005c00
 80043bc:	40021c00 	.word	0x40021c00

080043c0 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08e      	sub	sp, #56	@ 0x38
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	605a      	str	r2, [r3, #4]
 80043d2:	609a      	str	r2, [r3, #8]
 80043d4:	60da      	str	r2, [r3, #12]
 80043d6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a55      	ldr	r2, [pc, #340]	@ (8004534 <HAL_LTDC_MspInit+0x174>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	f040 80a3 	bne.w	800452a <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80043e4:	4b54      	ldr	r3, [pc, #336]	@ (8004538 <HAL_LTDC_MspInit+0x178>)
 80043e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e8:	4a53      	ldr	r2, [pc, #332]	@ (8004538 <HAL_LTDC_MspInit+0x178>)
 80043ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80043f0:	4b51      	ldr	r3, [pc, #324]	@ (8004538 <HAL_LTDC_MspInit+0x178>)
 80043f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80043f8:	623b      	str	r3, [r7, #32]
 80043fa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80043fc:	4b4e      	ldr	r3, [pc, #312]	@ (8004538 <HAL_LTDC_MspInit+0x178>)
 80043fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004400:	4a4d      	ldr	r2, [pc, #308]	@ (8004538 <HAL_LTDC_MspInit+0x178>)
 8004402:	f043 0310 	orr.w	r3, r3, #16
 8004406:	6313      	str	r3, [r2, #48]	@ 0x30
 8004408:	4b4b      	ldr	r3, [pc, #300]	@ (8004538 <HAL_LTDC_MspInit+0x178>)
 800440a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440c:	f003 0310 	and.w	r3, r3, #16
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004414:	4b48      	ldr	r3, [pc, #288]	@ (8004538 <HAL_LTDC_MspInit+0x178>)
 8004416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004418:	4a47      	ldr	r2, [pc, #284]	@ (8004538 <HAL_LTDC_MspInit+0x178>)
 800441a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800441e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004420:	4b45      	ldr	r3, [pc, #276]	@ (8004538 <HAL_LTDC_MspInit+0x178>)
 8004422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004424:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004428:	61bb      	str	r3, [r7, #24]
 800442a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800442c:	4b42      	ldr	r3, [pc, #264]	@ (8004538 <HAL_LTDC_MspInit+0x178>)
 800442e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004430:	4a41      	ldr	r2, [pc, #260]	@ (8004538 <HAL_LTDC_MspInit+0x178>)
 8004432:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004436:	6313      	str	r3, [r2, #48]	@ 0x30
 8004438:	4b3f      	ldr	r3, [pc, #252]	@ (8004538 <HAL_LTDC_MspInit+0x178>)
 800443a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004444:	4b3c      	ldr	r3, [pc, #240]	@ (8004538 <HAL_LTDC_MspInit+0x178>)
 8004446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004448:	4a3b      	ldr	r2, [pc, #236]	@ (8004538 <HAL_LTDC_MspInit+0x178>)
 800444a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800444e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004450:	4b39      	ldr	r3, [pc, #228]	@ (8004538 <HAL_LTDC_MspInit+0x178>)
 8004452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800445c:	4b36      	ldr	r3, [pc, #216]	@ (8004538 <HAL_LTDC_MspInit+0x178>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004460:	4a35      	ldr	r2, [pc, #212]	@ (8004538 <HAL_LTDC_MspInit+0x178>)
 8004462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004466:	6313      	str	r3, [r2, #48]	@ 0x30
 8004468:	4b33      	ldr	r3, [pc, #204]	@ (8004538 <HAL_LTDC_MspInit+0x178>)
 800446a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8004474:	2310      	movs	r3, #16
 8004476:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004478:	2302      	movs	r3, #2
 800447a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447c:	2300      	movs	r3, #0
 800447e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004480:	2300      	movs	r3, #0
 8004482:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004484:	230e      	movs	r3, #14
 8004486:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004488:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800448c:	4619      	mov	r1, r3
 800448e:	482b      	ldr	r0, [pc, #172]	@ (800453c <HAL_LTDC_MspInit+0x17c>)
 8004490:	f003 fbfe 	bl	8007c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8004494:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8004498:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800449a:	2302      	movs	r3, #2
 800449c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044a2:	2300      	movs	r3, #0
 80044a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80044a6:	230e      	movs	r3, #14
 80044a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80044aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044ae:	4619      	mov	r1, r3
 80044b0:	4823      	ldr	r0, [pc, #140]	@ (8004540 <HAL_LTDC_MspInit+0x180>)
 80044b2:	f003 fbed 	bl	8007c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80044b6:	23f7      	movs	r3, #247	@ 0xf7
 80044b8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ba:	2302      	movs	r3, #2
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c2:	2300      	movs	r3, #0
 80044c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80044c6:	230e      	movs	r3, #14
 80044c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80044ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044ce:	4619      	mov	r1, r3
 80044d0:	481c      	ldr	r0, [pc, #112]	@ (8004544 <HAL_LTDC_MspInit+0x184>)
 80044d2:	f003 fbdd 	bl	8007c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80044d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044dc:	2302      	movs	r3, #2
 80044de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e4:	2300      	movs	r3, #0
 80044e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80044e8:	2309      	movs	r3, #9
 80044ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80044ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044f0:	4619      	mov	r1, r3
 80044f2:	4815      	ldr	r0, [pc, #84]	@ (8004548 <HAL_LTDC_MspInit+0x188>)
 80044f4:	f003 fbcc 	bl	8007c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80044f8:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80044fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044fe:	2302      	movs	r3, #2
 8004500:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004502:	2300      	movs	r3, #0
 8004504:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004506:	2300      	movs	r3, #0
 8004508:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800450a:	230e      	movs	r3, #14
 800450c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800450e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004512:	4619      	mov	r1, r3
 8004514:	480d      	ldr	r0, [pc, #52]	@ (800454c <HAL_LTDC_MspInit+0x18c>)
 8004516:	f003 fbbb 	bl	8007c90 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800451a:	2200      	movs	r2, #0
 800451c:	2105      	movs	r1, #5
 800451e:	2058      	movs	r0, #88	@ 0x58
 8004520:	f002 f872 	bl	8006608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004524:	2058      	movs	r0, #88	@ 0x58
 8004526:	f002 f88b 	bl	8006640 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 800452a:	bf00      	nop
 800452c:	3738      	adds	r7, #56	@ 0x38
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40016800 	.word	0x40016800
 8004538:	40023800 	.word	0x40023800
 800453c:	40021000 	.word	0x40021000
 8004540:	40022400 	.word	0x40022400
 8004544:	40022800 	.word	0x40022800
 8004548:	40021800 	.word	0x40021800
 800454c:	40022000 	.word	0x40022000

08004550 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08c      	sub	sp, #48	@ 0x30
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004558:	f107 031c 	add.w	r3, r7, #28
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	605a      	str	r2, [r3, #4]
 8004562:	609a      	str	r2, [r3, #8]
 8004564:	60da      	str	r2, [r3, #12]
 8004566:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a3b      	ldr	r2, [pc, #236]	@ (800465c <HAL_QSPI_MspInit+0x10c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d170      	bne.n	8004654 <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004572:	4b3b      	ldr	r3, [pc, #236]	@ (8004660 <HAL_QSPI_MspInit+0x110>)
 8004574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004576:	4a3a      	ldr	r2, [pc, #232]	@ (8004660 <HAL_QSPI_MspInit+0x110>)
 8004578:	f043 0302 	orr.w	r3, r3, #2
 800457c:	6393      	str	r3, [r2, #56]	@ 0x38
 800457e:	4b38      	ldr	r3, [pc, #224]	@ (8004660 <HAL_QSPI_MspInit+0x110>)
 8004580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	61bb      	str	r3, [r7, #24]
 8004588:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800458a:	4b35      	ldr	r3, [pc, #212]	@ (8004660 <HAL_QSPI_MspInit+0x110>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458e:	4a34      	ldr	r2, [pc, #208]	@ (8004660 <HAL_QSPI_MspInit+0x110>)
 8004590:	f043 0310 	orr.w	r3, r3, #16
 8004594:	6313      	str	r3, [r2, #48]	@ 0x30
 8004596:	4b32      	ldr	r3, [pc, #200]	@ (8004660 <HAL_QSPI_MspInit+0x110>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459a:	f003 0310 	and.w	r3, r3, #16
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004660 <HAL_QSPI_MspInit+0x110>)
 80045a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a6:	4a2e      	ldr	r2, [pc, #184]	@ (8004660 <HAL_QSPI_MspInit+0x110>)
 80045a8:	f043 0302 	orr.w	r3, r3, #2
 80045ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80045ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004660 <HAL_QSPI_MspInit+0x110>)
 80045b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045ba:	4b29      	ldr	r3, [pc, #164]	@ (8004660 <HAL_QSPI_MspInit+0x110>)
 80045bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045be:	4a28      	ldr	r2, [pc, #160]	@ (8004660 <HAL_QSPI_MspInit+0x110>)
 80045c0:	f043 0308 	orr.w	r3, r3, #8
 80045c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80045c6:	4b26      	ldr	r3, [pc, #152]	@ (8004660 <HAL_QSPI_MspInit+0x110>)
 80045c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80045d2:	2304      	movs	r3, #4
 80045d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d6:	2302      	movs	r3, #2
 80045d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045de:	2303      	movs	r3, #3
 80045e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80045e2:	2309      	movs	r3, #9
 80045e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80045e6:	f107 031c 	add.w	r3, r7, #28
 80045ea:	4619      	mov	r1, r3
 80045ec:	481d      	ldr	r0, [pc, #116]	@ (8004664 <HAL_QSPI_MspInit+0x114>)
 80045ee:	f003 fb4f 	bl	8007c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80045f2:	2340      	movs	r3, #64	@ 0x40
 80045f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f6:	2302      	movs	r3, #2
 80045f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045fe:	2303      	movs	r3, #3
 8004600:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004602:	230a      	movs	r3, #10
 8004604:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8004606:	f107 031c 	add.w	r3, r7, #28
 800460a:	4619      	mov	r1, r3
 800460c:	4816      	ldr	r0, [pc, #88]	@ (8004668 <HAL_QSPI_MspInit+0x118>)
 800460e:	f003 fb3f 	bl	8007c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004612:	2304      	movs	r3, #4
 8004614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004616:	2302      	movs	r3, #2
 8004618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461a:	2300      	movs	r3, #0
 800461c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800461e:	2303      	movs	r3, #3
 8004620:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004622:	2309      	movs	r3, #9
 8004624:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004626:	f107 031c 	add.w	r3, r7, #28
 800462a:	4619      	mov	r1, r3
 800462c:	480e      	ldr	r0, [pc, #56]	@ (8004668 <HAL_QSPI_MspInit+0x118>)
 800462e:	f003 fb2f 	bl	8007c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8004632:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8004636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004638:	2302      	movs	r3, #2
 800463a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463c:	2300      	movs	r3, #0
 800463e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004640:	2303      	movs	r3, #3
 8004642:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004644:	2309      	movs	r3, #9
 8004646:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004648:	f107 031c 	add.w	r3, r7, #28
 800464c:	4619      	mov	r1, r3
 800464e:	4807      	ldr	r0, [pc, #28]	@ (800466c <HAL_QSPI_MspInit+0x11c>)
 8004650:	f003 fb1e 	bl	8007c90 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8004654:	bf00      	nop
 8004656:	3730      	adds	r7, #48	@ 0x30
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	a0001000 	.word	0xa0001000
 8004660:	40023800 	.word	0x40023800
 8004664:	40021000 	.word	0x40021000
 8004668:	40020400 	.word	0x40020400
 800466c:	40020c00 	.word	0x40020c00

08004670 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b0a4      	sub	sp, #144	@ 0x90
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004678:	f107 030c 	add.w	r3, r7, #12
 800467c:	2284      	movs	r2, #132	@ 0x84
 800467e:	2100      	movs	r1, #0
 8004680:	4618      	mov	r0, r3
 8004682:	f013 f819 	bl	80176b8 <memset>
  if(hrtc->Instance==RTC)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a0e      	ldr	r2, [pc, #56]	@ (80046c4 <HAL_RTC_MspInit+0x54>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d114      	bne.n	80046ba <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004690:	2320      	movs	r3, #32
 8004692:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004694:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004698:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800469a:	f107 030c 	add.w	r3, r7, #12
 800469e:	4618      	mov	r0, r3
 80046a0:	f006 fc9e 	bl	800afe0 <HAL_RCCEx_PeriphCLKConfig>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80046aa:	f7ff fb51 	bl	8003d50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80046ae:	4b06      	ldr	r3, [pc, #24]	@ (80046c8 <HAL_RTC_MspInit+0x58>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b2:	4a05      	ldr	r2, [pc, #20]	@ (80046c8 <HAL_RTC_MspInit+0x58>)
 80046b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046b8:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80046ba:	bf00      	nop
 80046bc:	3790      	adds	r7, #144	@ 0x90
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40002800 	.word	0x40002800
 80046c8:	40023800 	.word	0x40023800

080046cc <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08a      	sub	sp, #40	@ 0x28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d4:	f107 0314 	add.w	r3, r7, #20
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	605a      	str	r2, [r3, #4]
 80046de:	609a      	str	r2, [r3, #8]
 80046e0:	60da      	str	r2, [r3, #12]
 80046e2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a25      	ldr	r2, [pc, #148]	@ (8004780 <HAL_SD_MspInit+0xb4>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d144      	bne.n	8004778 <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80046ee:	4b25      	ldr	r3, [pc, #148]	@ (8004784 <HAL_SD_MspInit+0xb8>)
 80046f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f2:	4a24      	ldr	r2, [pc, #144]	@ (8004784 <HAL_SD_MspInit+0xb8>)
 80046f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80046f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80046fa:	4b22      	ldr	r3, [pc, #136]	@ (8004784 <HAL_SD_MspInit+0xb8>)
 80046fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004702:	613b      	str	r3, [r7, #16]
 8004704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004706:	4b1f      	ldr	r3, [pc, #124]	@ (8004784 <HAL_SD_MspInit+0xb8>)
 8004708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470a:	4a1e      	ldr	r2, [pc, #120]	@ (8004784 <HAL_SD_MspInit+0xb8>)
 800470c:	f043 0304 	orr.w	r3, r3, #4
 8004710:	6313      	str	r3, [r2, #48]	@ 0x30
 8004712:	4b1c      	ldr	r3, [pc, #112]	@ (8004784 <HAL_SD_MspInit+0xb8>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800471e:	4b19      	ldr	r3, [pc, #100]	@ (8004784 <HAL_SD_MspInit+0xb8>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004722:	4a18      	ldr	r2, [pc, #96]	@ (8004784 <HAL_SD_MspInit+0xb8>)
 8004724:	f043 0308 	orr.w	r3, r3, #8
 8004728:	6313      	str	r3, [r2, #48]	@ 0x30
 800472a:	4b16      	ldr	r3, [pc, #88]	@ (8004784 <HAL_SD_MspInit+0xb8>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8004736:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800473a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800473c:	2302      	movs	r3, #2
 800473e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004740:	2300      	movs	r3, #0
 8004742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004744:	2303      	movs	r3, #3
 8004746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004748:	230c      	movs	r3, #12
 800474a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800474c:	f107 0314 	add.w	r3, r7, #20
 8004750:	4619      	mov	r1, r3
 8004752:	480d      	ldr	r0, [pc, #52]	@ (8004788 <HAL_SD_MspInit+0xbc>)
 8004754:	f003 fa9c 	bl	8007c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8004758:	2304      	movs	r3, #4
 800475a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800475c:	2302      	movs	r3, #2
 800475e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004760:	2300      	movs	r3, #0
 8004762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004764:	2303      	movs	r3, #3
 8004766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004768:	230c      	movs	r3, #12
 800476a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800476c:	f107 0314 	add.w	r3, r7, #20
 8004770:	4619      	mov	r1, r3
 8004772:	4806      	ldr	r0, [pc, #24]	@ (800478c <HAL_SD_MspInit+0xc0>)
 8004774:	f003 fa8c 	bl	8007c90 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8004778:	bf00      	nop
 800477a:	3728      	adds	r7, #40	@ 0x28
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40012c00 	.word	0x40012c00
 8004784:	40023800 	.word	0x40023800
 8004788:	40020800 	.word	0x40020800
 800478c:	40020c00 	.word	0x40020c00

08004790 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b0aa      	sub	sp, #168	@ 0xa8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004798:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	605a      	str	r2, [r3, #4]
 80047a2:	609a      	str	r2, [r3, #8]
 80047a4:	60da      	str	r2, [r3, #12]
 80047a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80047a8:	f107 0310 	add.w	r3, r7, #16
 80047ac:	2284      	movs	r2, #132	@ 0x84
 80047ae:	2100      	movs	r1, #0
 80047b0:	4618      	mov	r0, r3
 80047b2:	f012 ff81 	bl	80176b8 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 80047be:	d143      	bne.n	8004848 <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 80047c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047c4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80047c6:	2364      	movs	r3, #100	@ 0x64
 80047c8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80047ca:	2302      	movs	r3, #2
 80047cc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80047ce:	2302      	movs	r3, #2
 80047d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80047d2:	2302      	movs	r3, #2
 80047d4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80047d6:	2301      	movs	r3, #1
 80047d8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047da:	f107 0310 	add.w	r3, r7, #16
 80047de:	4618      	mov	r0, r3
 80047e0:	f006 fbfe 	bl	800afe0 <HAL_RCCEx_PeriphCLKConfig>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 80047ea:	f7ff fab1 	bl	8003d50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80047ee:	4b18      	ldr	r3, [pc, #96]	@ (8004850 <HAL_SPDIFRX_MspInit+0xc0>)
 80047f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f2:	4a17      	ldr	r2, [pc, #92]	@ (8004850 <HAL_SPDIFRX_MspInit+0xc0>)
 80047f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80047fa:	4b15      	ldr	r3, [pc, #84]	@ (8004850 <HAL_SPDIFRX_MspInit+0xc0>)
 80047fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004806:	4b12      	ldr	r3, [pc, #72]	@ (8004850 <HAL_SPDIFRX_MspInit+0xc0>)
 8004808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480a:	4a11      	ldr	r2, [pc, #68]	@ (8004850 <HAL_SPDIFRX_MspInit+0xc0>)
 800480c:	f043 0308 	orr.w	r3, r3, #8
 8004810:	6313      	str	r3, [r2, #48]	@ 0x30
 8004812:	4b0f      	ldr	r3, [pc, #60]	@ (8004850 <HAL_SPDIFRX_MspInit+0xc0>)
 8004814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	60bb      	str	r3, [r7, #8]
 800481c:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800481e:	2380      	movs	r3, #128	@ 0x80
 8004820:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004824:	2302      	movs	r3, #2
 8004826:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482a:	2300      	movs	r3, #0
 800482c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004830:	2300      	movs	r3, #0
 8004832:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8004836:	2308      	movs	r3, #8
 8004838:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800483c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004840:	4619      	mov	r1, r3
 8004842:	4804      	ldr	r0, [pc, #16]	@ (8004854 <HAL_SPDIFRX_MspInit+0xc4>)
 8004844:	f003 fa24 	bl	8007c90 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8004848:	bf00      	nop
 800484a:	37a8      	adds	r7, #168	@ 0xa8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40023800 	.word	0x40023800
 8004854:	40020c00 	.word	0x40020c00

08004858 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08a      	sub	sp, #40	@ 0x28
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004860:	f107 0314 	add.w	r3, r7, #20
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	605a      	str	r2, [r3, #4]
 800486a:	609a      	str	r2, [r3, #8]
 800486c:	60da      	str	r2, [r3, #12]
 800486e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a25      	ldr	r2, [pc, #148]	@ (800490c <HAL_SPI_MspInit+0xb4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d144      	bne.n	8004904 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800487a:	4b25      	ldr	r3, [pc, #148]	@ (8004910 <HAL_SPI_MspInit+0xb8>)
 800487c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487e:	4a24      	ldr	r2, [pc, #144]	@ (8004910 <HAL_SPI_MspInit+0xb8>)
 8004880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004884:	6413      	str	r3, [r2, #64]	@ 0x40
 8004886:	4b22      	ldr	r3, [pc, #136]	@ (8004910 <HAL_SPI_MspInit+0xb8>)
 8004888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004892:	4b1f      	ldr	r3, [pc, #124]	@ (8004910 <HAL_SPI_MspInit+0xb8>)
 8004894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004896:	4a1e      	ldr	r2, [pc, #120]	@ (8004910 <HAL_SPI_MspInit+0xb8>)
 8004898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800489c:	6313      	str	r3, [r2, #48]	@ 0x30
 800489e:	4b1c      	ldr	r3, [pc, #112]	@ (8004910 <HAL_SPI_MspInit+0xb8>)
 80048a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048aa:	4b19      	ldr	r3, [pc, #100]	@ (8004910 <HAL_SPI_MspInit+0xb8>)
 80048ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ae:	4a18      	ldr	r2, [pc, #96]	@ (8004910 <HAL_SPI_MspInit+0xb8>)
 80048b0:	f043 0302 	orr.w	r3, r3, #2
 80048b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80048b6:	4b16      	ldr	r3, [pc, #88]	@ (8004910 <HAL_SPI_MspInit+0xb8>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	60bb      	str	r3, [r7, #8]
 80048c0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80048c2:	2302      	movs	r3, #2
 80048c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c6:	2302      	movs	r3, #2
 80048c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ce:	2300      	movs	r3, #0
 80048d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80048d2:	2305      	movs	r3, #5
 80048d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80048d6:	f107 0314 	add.w	r3, r7, #20
 80048da:	4619      	mov	r1, r3
 80048dc:	480d      	ldr	r0, [pc, #52]	@ (8004914 <HAL_SPI_MspInit+0xbc>)
 80048de:	f003 f9d7 	bl	8007c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80048e2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80048e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e8:	2302      	movs	r3, #2
 80048ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ec:	2300      	movs	r3, #0
 80048ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048f0:	2300      	movs	r3, #0
 80048f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80048f4:	2305      	movs	r3, #5
 80048f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048f8:	f107 0314 	add.w	r3, r7, #20
 80048fc:	4619      	mov	r1, r3
 80048fe:	4806      	ldr	r0, [pc, #24]	@ (8004918 <HAL_SPI_MspInit+0xc0>)
 8004900:	f003 f9c6 	bl	8007c90 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004904:	bf00      	nop
 8004906:	3728      	adds	r7, #40	@ 0x28
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40003800 	.word	0x40003800
 8004910:	40023800 	.word	0x40023800
 8004914:	40022000 	.word	0x40022000
 8004918:	40020400 	.word	0x40020400

0800491c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800491c:	b480      	push	{r7}
 800491e:	b089      	sub	sp, #36	@ 0x24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a2e      	ldr	r2, [pc, #184]	@ (80049e4 <HAL_TIM_Base_MspInit+0xc8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d10c      	bne.n	8004948 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800492e:	4b2e      	ldr	r3, [pc, #184]	@ (80049e8 <HAL_TIM_Base_MspInit+0xcc>)
 8004930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004932:	4a2d      	ldr	r2, [pc, #180]	@ (80049e8 <HAL_TIM_Base_MspInit+0xcc>)
 8004934:	f043 0301 	orr.w	r3, r3, #1
 8004938:	6453      	str	r3, [r2, #68]	@ 0x44
 800493a:	4b2b      	ldr	r3, [pc, #172]	@ (80049e8 <HAL_TIM_Base_MspInit+0xcc>)
 800493c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	61fb      	str	r3, [r7, #28]
 8004944:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004946:	e046      	b.n	80049d6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004950:	d10c      	bne.n	800496c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004952:	4b25      	ldr	r3, [pc, #148]	@ (80049e8 <HAL_TIM_Base_MspInit+0xcc>)
 8004954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004956:	4a24      	ldr	r2, [pc, #144]	@ (80049e8 <HAL_TIM_Base_MspInit+0xcc>)
 8004958:	f043 0301 	orr.w	r3, r3, #1
 800495c:	6413      	str	r3, [r2, #64]	@ 0x40
 800495e:	4b22      	ldr	r3, [pc, #136]	@ (80049e8 <HAL_TIM_Base_MspInit+0xcc>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	61bb      	str	r3, [r7, #24]
 8004968:	69bb      	ldr	r3, [r7, #24]
}
 800496a:	e034      	b.n	80049d6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a1e      	ldr	r2, [pc, #120]	@ (80049ec <HAL_TIM_Base_MspInit+0xd0>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d10c      	bne.n	8004990 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004976:	4b1c      	ldr	r3, [pc, #112]	@ (80049e8 <HAL_TIM_Base_MspInit+0xcc>)
 8004978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497a:	4a1b      	ldr	r2, [pc, #108]	@ (80049e8 <HAL_TIM_Base_MspInit+0xcc>)
 800497c:	f043 0302 	orr.w	r3, r3, #2
 8004980:	6413      	str	r3, [r2, #64]	@ 0x40
 8004982:	4b19      	ldr	r3, [pc, #100]	@ (80049e8 <HAL_TIM_Base_MspInit+0xcc>)
 8004984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	697b      	ldr	r3, [r7, #20]
}
 800498e:	e022      	b.n	80049d6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a16      	ldr	r2, [pc, #88]	@ (80049f0 <HAL_TIM_Base_MspInit+0xd4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d10c      	bne.n	80049b4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800499a:	4b13      	ldr	r3, [pc, #76]	@ (80049e8 <HAL_TIM_Base_MspInit+0xcc>)
 800499c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499e:	4a12      	ldr	r2, [pc, #72]	@ (80049e8 <HAL_TIM_Base_MspInit+0xcc>)
 80049a0:	f043 0308 	orr.w	r3, r3, #8
 80049a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80049a6:	4b10      	ldr	r3, [pc, #64]	@ (80049e8 <HAL_TIM_Base_MspInit+0xcc>)
 80049a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	613b      	str	r3, [r7, #16]
 80049b0:	693b      	ldr	r3, [r7, #16]
}
 80049b2:	e010      	b.n	80049d6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a0e      	ldr	r2, [pc, #56]	@ (80049f4 <HAL_TIM_Base_MspInit+0xd8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d10b      	bne.n	80049d6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80049be:	4b0a      	ldr	r3, [pc, #40]	@ (80049e8 <HAL_TIM_Base_MspInit+0xcc>)
 80049c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c2:	4a09      	ldr	r2, [pc, #36]	@ (80049e8 <HAL_TIM_Base_MspInit+0xcc>)
 80049c4:	f043 0302 	orr.w	r3, r3, #2
 80049c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80049ca:	4b07      	ldr	r3, [pc, #28]	@ (80049e8 <HAL_TIM_Base_MspInit+0xcc>)
 80049cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
}
 80049d6:	bf00      	nop
 80049d8:	3724      	adds	r7, #36	@ 0x24
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40010000 	.word	0x40010000
 80049e8:	40023800 	.word	0x40023800
 80049ec:	40000400 	.word	0x40000400
 80049f0:	40000c00 	.word	0x40000c00
 80049f4:	40010400 	.word	0x40010400

080049f8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a0a      	ldr	r2, [pc, #40]	@ (8004a30 <HAL_TIM_PWM_MspInit+0x38>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d10b      	bne.n	8004a22 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a34 <HAL_TIM_PWM_MspInit+0x3c>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0e:	4a09      	ldr	r2, [pc, #36]	@ (8004a34 <HAL_TIM_PWM_MspInit+0x3c>)
 8004a10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a16:	4b07      	ldr	r3, [pc, #28]	@ (8004a34 <HAL_TIM_PWM_MspInit+0x3c>)
 8004a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 8004a22:	bf00      	nop
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40001800 	.word	0x40001800
 8004a34:	40023800 	.word	0x40023800

08004a38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08c      	sub	sp, #48	@ 0x30
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a40:	f107 031c 	add.w	r3, r7, #28
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	605a      	str	r2, [r3, #4]
 8004a4a:	609a      	str	r2, [r3, #8]
 8004a4c:	60da      	str	r2, [r3, #12]
 8004a4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a56      	ldr	r2, [pc, #344]	@ (8004bb0 <HAL_TIM_MspPostInit+0x178>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d11d      	bne.n	8004a96 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a5a:	4b56      	ldr	r3, [pc, #344]	@ (8004bb4 <HAL_TIM_MspPostInit+0x17c>)
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5e:	4a55      	ldr	r2, [pc, #340]	@ (8004bb4 <HAL_TIM_MspPostInit+0x17c>)
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a66:	4b53      	ldr	r3, [pc, #332]	@ (8004bb4 <HAL_TIM_MspPostInit+0x17c>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	61bb      	str	r3, [r7, #24]
 8004a70:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8004a72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a78:	2302      	movs	r3, #2
 8004a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a80:	2300      	movs	r3, #0
 8004a82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004a84:	2301      	movs	r3, #1
 8004a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8004a88:	f107 031c 	add.w	r3, r7, #28
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	484a      	ldr	r0, [pc, #296]	@ (8004bb8 <HAL_TIM_MspPostInit+0x180>)
 8004a90:	f003 f8fe 	bl	8007c90 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004a94:	e087      	b.n	8004ba6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a9e:	d11d      	bne.n	8004adc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aa0:	4b44      	ldr	r3, [pc, #272]	@ (8004bb4 <HAL_TIM_MspPostInit+0x17c>)
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa4:	4a43      	ldr	r2, [pc, #268]	@ (8004bb4 <HAL_TIM_MspPostInit+0x17c>)
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aac:	4b41      	ldr	r3, [pc, #260]	@ (8004bb4 <HAL_TIM_MspPostInit+0x17c>)
 8004aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8004ab8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004abe:	2302      	movs	r3, #2
 8004ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004aca:	2301      	movs	r3, #1
 8004acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8004ace:	f107 031c 	add.w	r3, r7, #28
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4838      	ldr	r0, [pc, #224]	@ (8004bb8 <HAL_TIM_MspPostInit+0x180>)
 8004ad6:	f003 f8db 	bl	8007c90 <HAL_GPIO_Init>
}
 8004ada:	e064      	b.n	8004ba6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a36      	ldr	r2, [pc, #216]	@ (8004bbc <HAL_TIM_MspPostInit+0x184>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d11c      	bne.n	8004b20 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ae6:	4b33      	ldr	r3, [pc, #204]	@ (8004bb4 <HAL_TIM_MspPostInit+0x17c>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aea:	4a32      	ldr	r2, [pc, #200]	@ (8004bb4 <HAL_TIM_MspPostInit+0x17c>)
 8004aec:	f043 0302 	orr.w	r3, r3, #2
 8004af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004af2:	4b30      	ldr	r3, [pc, #192]	@ (8004bb4 <HAL_TIM_MspPostInit+0x17c>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8004afe:	2310      	movs	r3, #16
 8004b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b02:	2302      	movs	r3, #2
 8004b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004b0e:	2302      	movs	r3, #2
 8004b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8004b12:	f107 031c 	add.w	r3, r7, #28
 8004b16:	4619      	mov	r1, r3
 8004b18:	4829      	ldr	r0, [pc, #164]	@ (8004bc0 <HAL_TIM_MspPostInit+0x188>)
 8004b1a:	f003 f8b9 	bl	8007c90 <HAL_GPIO_Init>
}
 8004b1e:	e042      	b.n	8004ba6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a27      	ldr	r2, [pc, #156]	@ (8004bc4 <HAL_TIM_MspPostInit+0x18c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d11c      	bne.n	8004b64 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004b2a:	4b22      	ldr	r3, [pc, #136]	@ (8004bb4 <HAL_TIM_MspPostInit+0x17c>)
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2e:	4a21      	ldr	r2, [pc, #132]	@ (8004bb4 <HAL_TIM_MspPostInit+0x17c>)
 8004b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b36:	4b1f      	ldr	r3, [pc, #124]	@ (8004bb4 <HAL_TIM_MspPostInit+0x17c>)
 8004b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8004b42:	2301      	movs	r3, #1
 8004b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b46:	2302      	movs	r3, #2
 8004b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004b52:	2302      	movs	r3, #2
 8004b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8004b56:	f107 031c 	add.w	r3, r7, #28
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	481a      	ldr	r0, [pc, #104]	@ (8004bc8 <HAL_TIM_MspPostInit+0x190>)
 8004b5e:	f003 f897 	bl	8007c90 <HAL_GPIO_Init>
}
 8004b62:	e020      	b.n	8004ba6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a18      	ldr	r2, [pc, #96]	@ (8004bcc <HAL_TIM_MspPostInit+0x194>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d11b      	bne.n	8004ba6 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b6e:	4b11      	ldr	r3, [pc, #68]	@ (8004bb4 <HAL_TIM_MspPostInit+0x17c>)
 8004b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b72:	4a10      	ldr	r2, [pc, #64]	@ (8004bb4 <HAL_TIM_MspPostInit+0x17c>)
 8004b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8004bb4 <HAL_TIM_MspPostInit+0x17c>)
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b82:	60bb      	str	r3, [r7, #8]
 8004b84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8004b86:	2340      	movs	r3, #64	@ 0x40
 8004b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b92:	2300      	movs	r3, #0
 8004b94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004b96:	2309      	movs	r3, #9
 8004b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8004b9a:	f107 031c 	add.w	r3, r7, #28
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	480b      	ldr	r0, [pc, #44]	@ (8004bd0 <HAL_TIM_MspPostInit+0x198>)
 8004ba2:	f003 f875 	bl	8007c90 <HAL_GPIO_Init>
}
 8004ba6:	bf00      	nop
 8004ba8:	3730      	adds	r7, #48	@ 0x30
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40010000 	.word	0x40010000
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	40020000 	.word	0x40020000
 8004bbc:	40000400 	.word	0x40000400
 8004bc0:	40020400 	.word	0x40020400
 8004bc4:	40000c00 	.word	0x40000c00
 8004bc8:	40022000 	.word	0x40022000
 8004bcc:	40001800 	.word	0x40001800
 8004bd0:	40021c00 	.word	0x40021c00

08004bd4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b0ae      	sub	sp, #184	@ 0xb8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bdc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	605a      	str	r2, [r3, #4]
 8004be6:	609a      	str	r2, [r3, #8]
 8004be8:	60da      	str	r2, [r3, #12]
 8004bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004bec:	f107 0320 	add.w	r3, r7, #32
 8004bf0:	2284      	movs	r2, #132	@ 0x84
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f012 fd5f 	bl	80176b8 <memset>
  if(huart->Instance==USART1)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a53      	ldr	r2, [pc, #332]	@ (8004d4c <HAL_UART_MspInit+0x178>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d15d      	bne.n	8004cc0 <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004c04:	2340      	movs	r3, #64	@ 0x40
 8004c06:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c0c:	f107 0320 	add.w	r3, r7, #32
 8004c10:	4618      	mov	r0, r3
 8004c12:	f006 f9e5 	bl	800afe0 <HAL_RCCEx_PeriphCLKConfig>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004c1c:	f7ff f898 	bl	8003d50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c20:	4b4b      	ldr	r3, [pc, #300]	@ (8004d50 <HAL_UART_MspInit+0x17c>)
 8004c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c24:	4a4a      	ldr	r2, [pc, #296]	@ (8004d50 <HAL_UART_MspInit+0x17c>)
 8004c26:	f043 0310 	orr.w	r3, r3, #16
 8004c2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c2c:	4b48      	ldr	r3, [pc, #288]	@ (8004d50 <HAL_UART_MspInit+0x17c>)
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c30:	f003 0310 	and.w	r3, r3, #16
 8004c34:	61fb      	str	r3, [r7, #28]
 8004c36:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c38:	4b45      	ldr	r3, [pc, #276]	@ (8004d50 <HAL_UART_MspInit+0x17c>)
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3c:	4a44      	ldr	r2, [pc, #272]	@ (8004d50 <HAL_UART_MspInit+0x17c>)
 8004c3e:	f043 0302 	orr.w	r3, r3, #2
 8004c42:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c44:	4b42      	ldr	r3, [pc, #264]	@ (8004d50 <HAL_UART_MspInit+0x17c>)
 8004c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c50:	4b3f      	ldr	r3, [pc, #252]	@ (8004d50 <HAL_UART_MspInit+0x17c>)
 8004c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c54:	4a3e      	ldr	r2, [pc, #248]	@ (8004d50 <HAL_UART_MspInit+0x17c>)
 8004c56:	f043 0301 	orr.w	r3, r3, #1
 8004c5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c5c:	4b3c      	ldr	r3, [pc, #240]	@ (8004d50 <HAL_UART_MspInit+0x17c>)
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004c68:	2380      	movs	r3, #128	@ 0x80
 8004c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c6e:	2302      	movs	r3, #2
 8004c70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c74:	2300      	movs	r3, #0
 8004c76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c80:	2307      	movs	r3, #7
 8004c82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004c86:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4831      	ldr	r0, [pc, #196]	@ (8004d54 <HAL_UART_MspInit+0x180>)
 8004c8e:	f002 ffff 	bl	8007c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004c92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004cac:	2307      	movs	r3, #7
 8004cae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004cb2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4827      	ldr	r0, [pc, #156]	@ (8004d58 <HAL_UART_MspInit+0x184>)
 8004cba:	f002 ffe9 	bl	8007c90 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8004cbe:	e040      	b.n	8004d42 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a25      	ldr	r2, [pc, #148]	@ (8004d5c <HAL_UART_MspInit+0x188>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d13b      	bne.n	8004d42 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004cca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004cce:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004cd4:	f107 0320 	add.w	r3, r7, #32
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f006 f981 	bl	800afe0 <HAL_RCCEx_PeriphCLKConfig>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8004ce4:	f7ff f834 	bl	8003d50 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004ce8:	4b19      	ldr	r3, [pc, #100]	@ (8004d50 <HAL_UART_MspInit+0x17c>)
 8004cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cec:	4a18      	ldr	r2, [pc, #96]	@ (8004d50 <HAL_UART_MspInit+0x17c>)
 8004cee:	f043 0320 	orr.w	r3, r3, #32
 8004cf2:	6453      	str	r3, [r2, #68]	@ 0x44
 8004cf4:	4b16      	ldr	r3, [pc, #88]	@ (8004d50 <HAL_UART_MspInit+0x17c>)
 8004cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf8:	f003 0320 	and.w	r3, r3, #32
 8004cfc:	613b      	str	r3, [r7, #16]
 8004cfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d00:	4b13      	ldr	r3, [pc, #76]	@ (8004d50 <HAL_UART_MspInit+0x17c>)
 8004d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d04:	4a12      	ldr	r2, [pc, #72]	@ (8004d50 <HAL_UART_MspInit+0x17c>)
 8004d06:	f043 0304 	orr.w	r3, r3, #4
 8004d0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d0c:	4b10      	ldr	r3, [pc, #64]	@ (8004d50 <HAL_UART_MspInit+0x17c>)
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004d18:	23c0      	movs	r3, #192	@ 0xc0
 8004d1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d1e:	2302      	movs	r3, #2
 8004d20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004d30:	2308      	movs	r3, #8
 8004d32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d36:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4808      	ldr	r0, [pc, #32]	@ (8004d60 <HAL_UART_MspInit+0x18c>)
 8004d3e:	f002 ffa7 	bl	8007c90 <HAL_GPIO_Init>
}
 8004d42:	bf00      	nop
 8004d44:	37b8      	adds	r7, #184	@ 0xb8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40011000 	.word	0x40011000
 8004d50:	40023800 	.word	0x40023800
 8004d54:	40020400 	.word	0x40020400
 8004d58:	40020000 	.word	0x40020000
 8004d5c:	40011400 	.word	0x40011400
 8004d60:	40020800 	.word	0x40020800

08004d64 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004d6a:	1d3b      	adds	r3, r7, #4
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	605a      	str	r2, [r3, #4]
 8004d72:	609a      	str	r2, [r3, #8]
 8004d74:	60da      	str	r2, [r3, #12]
 8004d76:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004d78:	4b3a      	ldr	r3, [pc, #232]	@ (8004e64 <HAL_FMC_MspInit+0x100>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d16d      	bne.n	8004e5c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8004d80:	4b38      	ldr	r3, [pc, #224]	@ (8004e64 <HAL_FMC_MspInit+0x100>)
 8004d82:	2201      	movs	r2, #1
 8004d84:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004d86:	4b38      	ldr	r3, [pc, #224]	@ (8004e68 <HAL_FMC_MspInit+0x104>)
 8004d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8a:	4a37      	ldr	r2, [pc, #220]	@ (8004e68 <HAL_FMC_MspInit+0x104>)
 8004d8c:	f043 0301 	orr.w	r3, r3, #1
 8004d90:	6393      	str	r3, [r2, #56]	@ 0x38
 8004d92:	4b35      	ldr	r3, [pc, #212]	@ (8004e68 <HAL_FMC_MspInit+0x104>)
 8004d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	603b      	str	r3, [r7, #0]
 8004d9c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8004d9e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004da2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da4:	2302      	movs	r3, #2
 8004da6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dac:	2303      	movs	r3, #3
 8004dae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004db0:	230c      	movs	r3, #12
 8004db2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004db4:	1d3b      	adds	r3, r7, #4
 8004db6:	4619      	mov	r1, r3
 8004db8:	482c      	ldr	r0, [pc, #176]	@ (8004e6c <HAL_FMC_MspInit+0x108>)
 8004dba:	f002 ff69 	bl	8007c90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8004dbe:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004dc2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004dd0:	230c      	movs	r3, #12
 8004dd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004dd4:	1d3b      	adds	r3, r7, #4
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4825      	ldr	r0, [pc, #148]	@ (8004e70 <HAL_FMC_MspInit+0x10c>)
 8004dda:	f002 ff59 	bl	8007c90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8004dde:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004de2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004de4:	2302      	movs	r3, #2
 8004de6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dec:	2303      	movs	r3, #3
 8004dee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004df0:	230c      	movs	r3, #12
 8004df2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004df4:	1d3b      	adds	r3, r7, #4
 8004df6:	4619      	mov	r1, r3
 8004df8:	481e      	ldr	r0, [pc, #120]	@ (8004e74 <HAL_FMC_MspInit+0x110>)
 8004dfa:	f002 ff49 	bl	8007c90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8004dfe:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004e02:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e04:	2302      	movs	r3, #2
 8004e06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004e10:	230c      	movs	r3, #12
 8004e12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004e14:	1d3b      	adds	r3, r7, #4
 8004e16:	4619      	mov	r1, r3
 8004e18:	4817      	ldr	r0, [pc, #92]	@ (8004e78 <HAL_FMC_MspInit+0x114>)
 8004e1a:	f002 ff39 	bl	8007c90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8004e1e:	2328      	movs	r3, #40	@ 0x28
 8004e20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e22:	2302      	movs	r3, #2
 8004e24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004e2e:	230c      	movs	r3, #12
 8004e30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004e32:	1d3b      	adds	r3, r7, #4
 8004e34:	4619      	mov	r1, r3
 8004e36:	4811      	ldr	r0, [pc, #68]	@ (8004e7c <HAL_FMC_MspInit+0x118>)
 8004e38:	f002 ff2a 	bl	8007c90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8004e3c:	2308      	movs	r3, #8
 8004e3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e40:	2302      	movs	r3, #2
 8004e42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e44:	2300      	movs	r3, #0
 8004e46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004e4c:	230c      	movs	r3, #12
 8004e4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8004e50:	1d3b      	adds	r3, r7, #4
 8004e52:	4619      	mov	r1, r3
 8004e54:	480a      	ldr	r0, [pc, #40]	@ (8004e80 <HAL_FMC_MspInit+0x11c>)
 8004e56:	f002 ff1b 	bl	8007c90 <HAL_GPIO_Init>
 8004e5a:	e000      	b.n	8004e5e <HAL_FMC_MspInit+0xfa>
    return;
 8004e5c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20002420 	.word	0x20002420
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	40021800 	.word	0x40021800
 8004e74:	40020c00 	.word	0x40020c00
 8004e78:	40021400 	.word	0x40021400
 8004e7c:	40021c00 	.word	0x40021c00
 8004e80:	40020800 	.word	0x40020800

08004e84 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004e8c:	f7ff ff6a 	bl	8004d64 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004e90:	bf00      	nop
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08a      	sub	sp, #40	@ 0x28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a2b      	ldr	r2, [pc, #172]	@ (8004f54 <HAL_SAI_MspInit+0xbc>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d124      	bne.n	8004ef4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8004eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8004f58 <HAL_SAI_MspInit+0xc0>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10b      	bne.n	8004eca <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8004f5c <HAL_SAI_MspInit+0xc4>)
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb6:	4a29      	ldr	r2, [pc, #164]	@ (8004f5c <HAL_SAI_MspInit+0xc4>)
 8004eb8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ebe:	4b27      	ldr	r3, [pc, #156]	@ (8004f5c <HAL_SAI_MspInit+0xc4>)
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ec6:	613b      	str	r3, [r7, #16]
 8004ec8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8004eca:	4b23      	ldr	r3, [pc, #140]	@ (8004f58 <HAL_SAI_MspInit+0xc0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	4a21      	ldr	r2, [pc, #132]	@ (8004f58 <HAL_SAI_MspInit+0xc0>)
 8004ed2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8004ed4:	23f0      	movs	r3, #240	@ 0xf0
 8004ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed8:	2302      	movs	r3, #2
 8004eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004edc:	2300      	movs	r3, #0
 8004ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004ee4:	230a      	movs	r3, #10
 8004ee6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004ee8:	f107 0314 	add.w	r3, r7, #20
 8004eec:	4619      	mov	r1, r3
 8004eee:	481c      	ldr	r0, [pc, #112]	@ (8004f60 <HAL_SAI_MspInit+0xc8>)
 8004ef0:	f002 fece 	bl	8007c90 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8004f64 <HAL_SAI_MspInit+0xcc>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d125      	bne.n	8004f4a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8004efe:	4b16      	ldr	r3, [pc, #88]	@ (8004f58 <HAL_SAI_MspInit+0xc0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10b      	bne.n	8004f1e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004f06:	4b15      	ldr	r3, [pc, #84]	@ (8004f5c <HAL_SAI_MspInit+0xc4>)
 8004f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f0a:	4a14      	ldr	r2, [pc, #80]	@ (8004f5c <HAL_SAI_MspInit+0xc4>)
 8004f0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f10:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f12:	4b12      	ldr	r3, [pc, #72]	@ (8004f5c <HAL_SAI_MspInit+0xc4>)
 8004f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8004f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f58 <HAL_SAI_MspInit+0xc0>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3301      	adds	r3, #1
 8004f24:	4a0c      	ldr	r2, [pc, #48]	@ (8004f58 <HAL_SAI_MspInit+0xc0>)
 8004f26:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8004f28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f2e:	2302      	movs	r3, #2
 8004f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f36:	2300      	movs	r3, #0
 8004f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004f3a:	230a      	movs	r3, #10
 8004f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8004f3e:	f107 0314 	add.w	r3, r7, #20
 8004f42:	4619      	mov	r1, r3
 8004f44:	4808      	ldr	r0, [pc, #32]	@ (8004f68 <HAL_SAI_MspInit+0xd0>)
 8004f46:	f002 fea3 	bl	8007c90 <HAL_GPIO_Init>

    }
}
 8004f4a:	bf00      	nop
 8004f4c:	3728      	adds	r7, #40	@ 0x28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40015c04 	.word	0x40015c04
 8004f58:	20002424 	.word	0x20002424
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	40022000 	.word	0x40022000
 8004f64:	40015c24 	.word	0x40015c24
 8004f68:	40021800 	.word	0x40021800

08004f6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08e      	sub	sp, #56	@ 0x38
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004f7c:	4b33      	ldr	r3, [pc, #204]	@ (800504c <HAL_InitTick+0xe0>)
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f80:	4a32      	ldr	r2, [pc, #200]	@ (800504c <HAL_InitTick+0xe0>)
 8004f82:	f043 0310 	orr.w	r3, r3, #16
 8004f86:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f88:	4b30      	ldr	r3, [pc, #192]	@ (800504c <HAL_InitTick+0xe0>)
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004f94:	f107 0210 	add.w	r2, r7, #16
 8004f98:	f107 0314 	add.w	r3, r7, #20
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f005 ffec 	bl	800af7c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d103      	bne.n	8004fb6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004fae:	f005 ffbd 	bl	800af2c <HAL_RCC_GetPCLK1Freq>
 8004fb2:	6378      	str	r0, [r7, #52]	@ 0x34
 8004fb4:	e004      	b.n	8004fc0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004fb6:	f005 ffb9 	bl	800af2c <HAL_RCC_GetPCLK1Freq>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc2:	4a23      	ldr	r2, [pc, #140]	@ (8005050 <HAL_InitTick+0xe4>)
 8004fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc8:	0c9b      	lsrs	r3, r3, #18
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004fce:	4b21      	ldr	r3, [pc, #132]	@ (8005054 <HAL_InitTick+0xe8>)
 8004fd0:	4a21      	ldr	r2, [pc, #132]	@ (8005058 <HAL_InitTick+0xec>)
 8004fd2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8005054 <HAL_InitTick+0xe8>)
 8004fd6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004fda:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8005054 <HAL_InitTick+0xe8>)
 8004fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8005054 <HAL_InitTick+0xe8>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8005054 <HAL_InitTick+0xe8>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fee:	4b19      	ldr	r3, [pc, #100]	@ (8005054 <HAL_InitTick+0xe8>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004ff4:	4817      	ldr	r0, [pc, #92]	@ (8005054 <HAL_InitTick+0xe8>)
 8004ff6:	f008 fd72 	bl	800dade <HAL_TIM_Base_Init>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005000:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005004:	2b00      	cmp	r3, #0
 8005006:	d11b      	bne.n	8005040 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005008:	4812      	ldr	r0, [pc, #72]	@ (8005054 <HAL_InitTick+0xe8>)
 800500a:	f008 fdbf 	bl	800db8c <HAL_TIM_Base_Start_IT>
 800500e:	4603      	mov	r3, r0
 8005010:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8005014:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005018:	2b00      	cmp	r3, #0
 800501a:	d111      	bne.n	8005040 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800501c:	2036      	movs	r0, #54	@ 0x36
 800501e:	f001 fb0f 	bl	8006640 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b0f      	cmp	r3, #15
 8005026:	d808      	bhi.n	800503a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005028:	2200      	movs	r2, #0
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	2036      	movs	r0, #54	@ 0x36
 800502e:	f001 faeb 	bl	8006608 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005032:	4a0a      	ldr	r2, [pc, #40]	@ (800505c <HAL_InitTick+0xf0>)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	e002      	b.n	8005040 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005040:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8005044:	4618      	mov	r0, r3
 8005046:	3738      	adds	r7, #56	@ 0x38
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	40023800 	.word	0x40023800
 8005050:	431bde83 	.word	0x431bde83
 8005054:	20002428 	.word	0x20002428
 8005058:	40001000 	.word	0x40001000
 800505c:	20000068 	.word	0x20000068

08005060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005064:	bf00      	nop
 8005066:	e7fd      	b.n	8005064 <NMI_Handler+0x4>

08005068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800506c:	bf00      	nop
 800506e:	e7fd      	b.n	800506c <HardFault_Handler+0x4>

08005070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005074:	bf00      	nop
 8005076:	e7fd      	b.n	8005074 <MemManage_Handler+0x4>

08005078 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800507c:	bf00      	nop
 800507e:	e7fd      	b.n	800507c <BusFault_Handler+0x4>

08005080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005084:	bf00      	nop
 8005086:	e7fd      	b.n	8005084 <UsageFault_Handler+0x4>

08005088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800508c:	bf00      	nop
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
	...

08005098 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800509c:	4802      	ldr	r0, [pc, #8]	@ (80050a8 <TIM6_DAC_IRQHandler+0x10>)
 800509e:	f008 fe44 	bl	800dd2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80050a2:	bf00      	nop
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20002428 	.word	0x20002428

080050ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80050b0:	4802      	ldr	r0, [pc, #8]	@ (80050bc <OTG_FS_IRQHandler+0x10>)
 80050b2:	f002 ffca 	bl	800804a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80050b6:	bf00      	nop
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20012c24 	.word	0x20012c24

080050c0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80050c4:	4802      	ldr	r0, [pc, #8]	@ (80050d0 <LTDC_IRQHandler+0x10>)
 80050c6:	f004 ff37 	bl	8009f38 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80050ca:	bf00      	nop
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	20001b34 	.word	0x20001b34

080050d4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80050d8:	4802      	ldr	r0, [pc, #8]	@ (80050e4 <DMA2D_IRQHandler+0x10>)
 80050da:	f002 f8e9 	bl	80072b0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80050de:	bf00      	nop
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	2000199c 	.word	0x2000199c

080050e8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt (USART6_RX).
  */
void DMA2_Stream1_IRQHandler(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80050ec:	4802      	ldr	r0, [pc, #8]	@ (80050f8 <DMA2_Stream1_IRQHandler+0x10>)
 80050ee:	f001 fe1f 	bl	8006d30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80050f2:	bf00      	nop
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	200023ac 	.word	0x200023ac

080050fc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  
  // IDLE 인터럽트 체크 (메시지 끝 감지)
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 8005100:	4b09      	ldr	r3, [pc, #36]	@ (8005128 <USART6_IRQHandler+0x2c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	f003 0310 	and.w	r3, r3, #16
 800510a:	2b10      	cmp	r3, #16
 800510c:	d106      	bne.n	800511c <USART6_IRQHandler+0x20>
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);  // IDLE 플래그 클리어
 800510e:	4b06      	ldr	r3, [pc, #24]	@ (8005128 <USART6_IRQHandler+0x2c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2210      	movs	r2, #16
 8005114:	621a      	str	r2, [r3, #32]
    
    // 외부 함수 호출
    extern void USER_UART_IDLECallback(UART_HandleTypeDef *huart);
    USER_UART_IDLECallback(&huart6);
 8005116:	4804      	ldr	r0, [pc, #16]	@ (8005128 <USART6_IRQHandler+0x2c>)
 8005118:	f000 fe18 	bl	8005d4c <USER_UART_IDLECallback>
  }

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800511c:	4802      	ldr	r0, [pc, #8]	@ (8005128 <USART6_IRQHandler+0x2c>)
 800511e:	f00a f84f 	bl	800f1c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005122:	bf00      	nop
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	200020d4 	.word	0x200020d4

0800512c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	e00a      	b.n	8005154 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800513e:	f3af 8000 	nop.w
 8005142:	4601      	mov	r1, r0
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	60ba      	str	r2, [r7, #8]
 800514a:	b2ca      	uxtb	r2, r1
 800514c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	3301      	adds	r3, #1
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	429a      	cmp	r2, r3
 800515a:	dbf0      	blt.n	800513e <_read+0x12>
  }

  return len;
 800515c:	687b      	ldr	r3, [r7, #4]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b086      	sub	sp, #24
 800516a:	af00      	add	r7, sp, #0
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]
 8005176:	e009      	b.n	800518c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	60ba      	str	r2, [r7, #8]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	4618      	mov	r0, r3
 8005182:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	3301      	adds	r3, #1
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	429a      	cmp	r2, r3
 8005192:	dbf1      	blt.n	8005178 <_write+0x12>
  }
  return len;
 8005194:	687b      	ldr	r3, [r7, #4]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <_close>:

int _close(int file)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80051a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80051c6:	605a      	str	r2, [r3, #4]
  return 0;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <_isatty>:

int _isatty(int file)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80051de:	2301      	movs	r3, #1
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
	...

08005208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005210:	4a14      	ldr	r2, [pc, #80]	@ (8005264 <_sbrk+0x5c>)
 8005212:	4b15      	ldr	r3, [pc, #84]	@ (8005268 <_sbrk+0x60>)
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800521c:	4b13      	ldr	r3, [pc, #76]	@ (800526c <_sbrk+0x64>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d102      	bne.n	800522a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005224:	4b11      	ldr	r3, [pc, #68]	@ (800526c <_sbrk+0x64>)
 8005226:	4a12      	ldr	r2, [pc, #72]	@ (8005270 <_sbrk+0x68>)
 8005228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800522a:	4b10      	ldr	r3, [pc, #64]	@ (800526c <_sbrk+0x64>)
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4413      	add	r3, r2
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	429a      	cmp	r2, r3
 8005236:	d207      	bcs.n	8005248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005238:	f012 fac6 	bl	80177c8 <__errno>
 800523c:	4603      	mov	r3, r0
 800523e:	220c      	movs	r2, #12
 8005240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005242:	f04f 33ff 	mov.w	r3, #4294967295
 8005246:	e009      	b.n	800525c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005248:	4b08      	ldr	r3, [pc, #32]	@ (800526c <_sbrk+0x64>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800524e:	4b07      	ldr	r3, [pc, #28]	@ (800526c <_sbrk+0x64>)
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4413      	add	r3, r2
 8005256:	4a05      	ldr	r2, [pc, #20]	@ (800526c <_sbrk+0x64>)
 8005258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800525a:	68fb      	ldr	r3, [r7, #12]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	20050000 	.word	0x20050000
 8005268:	00000400 	.word	0x00000400
 800526c:	20002474 	.word	0x20002474
 8005270:	20013150 	.word	0x20013150

08005274 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005274:	b480      	push	{r7}
 8005276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005278:	4b06      	ldr	r3, [pc, #24]	@ (8005294 <SystemInit+0x20>)
 800527a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800527e:	4a05      	ldr	r2, [pc, #20]	@ (8005294 <SystemInit+0x20>)
 8005280:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005284:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005288:	bf00      	nop
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	e000ed00 	.word	0xe000ed00

08005298 <TIME_GetCurrentMs>:
// ============================================================================
// 기본 시간 함수
// ============================================================================

uint32_t TIME_GetCurrentMs(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0
    return TIME_Platform_GetCurrentMs();
 800529c:	f000 f803 	bl	80052a6 <TIME_Platform_GetCurrentMs>
 80052a0:	4603      	mov	r3, r0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <TIME_Platform_GetCurrentMs>:
#include "time.h"
#include "stm32f7xx_hal.h"

// STM32용 플랫폼 함수들
uint32_t TIME_Platform_GetCurrentMs(void)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // HAL_GetTick()은 1ms 단위로 시간을 반환
 80052aa:	f000 fe2d 	bl	8005f08 <HAL_GetTick>
 80052ae:	4603      	mov	r3, r0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d102      	bne.n	80052ca <LOGGER_Connect+0x16>
 80052c4:	f04f 33ff 	mov.w	r3, #4294967295
 80052c8:	e016      	b.n	80052f8 <LOGGER_Connect+0x44>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 80052ca:	223f      	movs	r2, #63	@ 0x3f
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	480c      	ldr	r0, [pc, #48]	@ (8005300 <LOGGER_Connect+0x4c>)
 80052d0:	f012 f9fa 	bl	80176c8 <strncpy>
    current_config.server_port = port;
 80052d4:	4a0b      	ldr	r2, [pc, #44]	@ (8005304 <LOGGER_Connect+0x50>)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 80052da:	6839      	ldr	r1, [r7, #0]
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f8ef 	bl	80054c0 <LOGGER_Platform_Connect>
 80052e2:	4603      	mov	r3, r0
 80052e4:	73fb      	strb	r3, [r7, #15]
    if (status == LOGGER_STATUS_OK) {
 80052e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d102      	bne.n	80052f4 <LOGGER_Connect+0x40>
        logger_connected = true;
 80052ee:	4b06      	ldr	r3, [pc, #24]	@ (8005308 <LOGGER_Connect+0x54>)
 80052f0:	2201      	movs	r2, #1
 80052f2:	701a      	strb	r2, [r3, #0]
    }
    return status;
 80052f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	20000023 	.word	0x20000023
 8005304:	20000020 	.word	0x20000020
 8005308:	20002478 	.word	0x20002478

0800530c <LOGGER_SetFilterLevel>:
bool LOGGER_IsConnected(void) {
    return logger_connected;
}

// Logger 제어 함수들
void LOGGER_SetFilterLevel(LogLevel min_level) {
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	4603      	mov	r3, r0
 8005314:	71fb      	strb	r3, [r7, #7]
    filter_level = min_level;
 8005316:	4a04      	ldr	r2, [pc, #16]	@ (8005328 <LOGGER_SetFilterLevel+0x1c>)
 8005318:	79fb      	ldrb	r3, [r7, #7]
 800531a:	7013      	strb	r3, [r2, #0]
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	2000247a 	.word	0x2000247a

0800532c <LOGGER_SetMode>:

void LOGGER_SetMode(LoggerMode_t mode) {
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	4603      	mov	r3, r0
 8005334:	71fb      	strb	r3, [r7, #7]
    current_mode = mode;
 8005336:	4a0d      	ldr	r2, [pc, #52]	@ (800536c <LOGGER_SetMode+0x40>)
 8005338:	79fb      	ldrb	r3, [r7, #7]
 800533a:	7013      	strb	r3, [r2, #0]
    
    // 모드에 따른 연결 상태 설정
    if (mode == LOGGER_MODE_TERMINAL_ONLY) {
 800533c:	79fb      	ldrb	r3, [r7, #7]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d103      	bne.n	800534a <LOGGER_SetMode+0x1e>
        logger_connected = true;  // 터미널은 항상 연결됨
 8005342:	4b0b      	ldr	r3, [pc, #44]	@ (8005370 <LOGGER_SetMode+0x44>)
 8005344:	2201      	movs	r2, #1
 8005346:	701a      	strb	r2, [r3, #0]
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
        // SD 백엔드 사용 시 SDStorage 연결 상태에 따라 결정
        logger_connected = SDStorage_IsReady();
    }
}
 8005348:	e00b      	b.n	8005362 <LOGGER_SetMode+0x36>
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
 800534a:	79fb      	ldrb	r3, [r7, #7]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d002      	beq.n	8005356 <LOGGER_SetMode+0x2a>
 8005350:	79fb      	ldrb	r3, [r7, #7]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d105      	bne.n	8005362 <LOGGER_SetMode+0x36>
        logger_connected = SDStorage_IsReady();
 8005356:	f7fc fb6b 	bl	8001a30 <SDStorage_IsReady>
 800535a:	4603      	mov	r3, r0
 800535c:	461a      	mov	r2, r3
 800535e:	4b04      	ldr	r3, [pc, #16]	@ (8005370 <LOGGER_SetMode+0x44>)
 8005360:	701a      	strb	r2, [r3, #0]
}
 8005362:	bf00      	nop
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20002479 	.word	0x20002479
 8005370:	20002478 	.word	0x20002478

08005374 <LOGGER_SendFormatted>:

LoggerMode_t LOGGER_GetMode(void) {
    return current_mode;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 8005374:	b40e      	push	{r1, r2, r3}
 8005376:	b590      	push	{r4, r7, lr}
 8005378:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 800537c:	af00      	add	r7, sp, #0
 800537e:	4602      	mov	r2, r0
 8005380:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005384:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8005388:	701a      	strb	r2, [r3, #0]
    // 필터 레벨 체크
    if (level < filter_level) return;
 800538a:	4b48      	ldr	r3, [pc, #288]	@ (80054ac <LOGGER_SendFormatted+0x138>)
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005392:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 8005396:	7812      	ldrb	r2, [r2, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d379      	bcc.n	8005490 <LOGGER_SendFormatted+0x11c>
    if (level < current_config.level) return;
 800539c:	4b44      	ldr	r3, [pc, #272]	@ (80054b0 <LOGGER_SendFormatted+0x13c>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80053a4:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 80053a8:	7812      	ldrb	r2, [r2, #0]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d372      	bcc.n	8005494 <LOGGER_SendFormatted+0x120>
    
    char buffer[512];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 80053ae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80053b2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80053b6:	4a3f      	ldr	r2, [pc, #252]	@ (80054b4 <LOGGER_SendFormatted+0x140>)
 80053b8:	461c      	mov	r4, r3
 80053ba:	4613      	mov	r3, r2
 80053bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 레벨 문자열 추가
    int offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 80053c2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80053c6:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80053ca:	781a      	ldrb	r2, [r3, #0]
 80053cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80053d0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80053d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053d8:	f107 001c 	add.w	r0, r7, #28
 80053dc:	4a36      	ldr	r2, [pc, #216]	@ (80054b8 <LOGGER_SendFormatted+0x144>)
 80053de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80053e2:	f012 f891 	bl	8017508 <sniprintf>
 80053e6:	f8c7 021c 	str.w	r0, [r7, #540]	@ 0x21c
    
    // 가변 인수 처리
    va_list args;
    va_start(args, format);
 80053ea:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 80053ee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80053f2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80053f6:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, sizeof(buffer) - offset, format, args);
 80053f8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80053fc:	f107 021c 	add.w	r2, r7, #28
 8005400:	18d0      	adds	r0, r2, r3
 8005402:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005406:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 800540a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800540e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8005418:	f012 f940 	bl	801769c <vsniprintf>
    va_end(args);
    
    // 모드에 따른 출력 처리
    switch (current_mode) {
 800541c:	4b27      	ldr	r3, [pc, #156]	@ (80054bc <LOGGER_SendFormatted+0x148>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b02      	cmp	r3, #2
 8005422:	d01e      	beq.n	8005462 <LOGGER_SendFormatted+0xee>
 8005424:	2b02      	cmp	r3, #2
 8005426:	dc3a      	bgt.n	800549e <LOGGER_SendFormatted+0x12a>
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <LOGGER_SendFormatted+0xbe>
 800542c:	2b01      	cmp	r3, #1
 800542e:	d006      	beq.n	800543e <LOGGER_SendFormatted+0xca>
 8005430:	e035      	b.n	800549e <LOGGER_SendFormatted+0x12a>
        case LOGGER_MODE_TERMINAL_ONLY:
            LOGGER_Platform_Send(buffer);
 8005432:	f107 031c 	add.w	r3, r7, #28
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f84e 	bl	80054d8 <LOGGER_Platform_Send>
            break;
 800543c:	e02f      	b.n	800549e <LOGGER_SendFormatted+0x12a>
            
        case LOGGER_MODE_SD_ONLY:
            if (SDStorage_IsReady()) {
 800543e:	f7fc faf7 	bl	8001a30 <SDStorage_IsReady>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d027      	beq.n	8005498 <LOGGER_SendFormatted+0x124>
                SDStorage_WriteLog(buffer, strlen(buffer));
 8005448:	f107 031c 	add.w	r3, r7, #28
 800544c:	4618      	mov	r0, r3
 800544e:	f7fa fee9 	bl	8000224 <strlen>
 8005452:	4602      	mov	r2, r0
 8005454:	f107 031c 	add.w	r3, r7, #28
 8005458:	4611      	mov	r1, r2
 800545a:	4618      	mov	r0, r3
 800545c:	f7fc f880 	bl	8001560 <SDStorage_WriteLog>
            }
            break;
 8005460:	e01a      	b.n	8005498 <LOGGER_SendFormatted+0x124>
            
        case LOGGER_MODE_DUAL:
            // 터미널 출력 (실시간)
            LOGGER_Platform_Send(buffer);
 8005462:	f107 031c 	add.w	r3, r7, #28
 8005466:	4618      	mov	r0, r3
 8005468:	f000 f836 	bl	80054d8 <LOGGER_Platform_Send>
            // SD 출력 (에러 무시)
            if (SDStorage_IsReady()) {
 800546c:	f7fc fae0 	bl	8001a30 <SDStorage_IsReady>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d012      	beq.n	800549c <LOGGER_SendFormatted+0x128>
                SDStorage_WriteLog(buffer, strlen(buffer));
 8005476:	f107 031c 	add.w	r3, r7, #28
 800547a:	4618      	mov	r0, r3
 800547c:	f7fa fed2 	bl	8000224 <strlen>
 8005480:	4602      	mov	r2, r0
 8005482:	f107 031c 	add.w	r3, r7, #28
 8005486:	4611      	mov	r1, r2
 8005488:	4618      	mov	r0, r3
 800548a:	f7fc f869 	bl	8001560 <SDStorage_WriteLog>
            }
            break;
 800548e:	e005      	b.n	800549c <LOGGER_SendFormatted+0x128>
    if (level < filter_level) return;
 8005490:	bf00      	nop
 8005492:	e004      	b.n	800549e <LOGGER_SendFormatted+0x12a>
    if (level < current_config.level) return;
 8005494:	bf00      	nop
 8005496:	e002      	b.n	800549e <LOGGER_SendFormatted+0x12a>
            break;
 8005498:	bf00      	nop
 800549a:	e000      	b.n	800549e <LOGGER_SendFormatted+0x12a>
            break;
 800549c:	bf00      	nop
    }
}
 800549e:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80054a2:	46bd      	mov	sp, r7
 80054a4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80054a8:	b003      	add	sp, #12
 80054aa:	4770      	bx	lr
 80054ac:	2000247a 	.word	0x2000247a
 80054b0:	20000020 	.word	0x20000020
 80054b4:	0801ae7c 	.word	0x0801ae7c
 80054b8:	0801ae8c 	.word	0x0801ae8c
 80054bc:	20002479 	.word	0x20002479

080054c0 <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d102      	bne.n	80054ec <LOGGER_Platform_Send+0x14>
 80054e6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ea:	e01c      	b.n	8005526 <LOGGER_Platform_Send+0x4e>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7fa fe99 	bl	8000224 <strlen>
 80054f2:	4603      	mov	r3, r0
 80054f4:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	dd12      	ble.n	8005522 <LOGGER_Platform_Send+0x4a>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	b29a      	uxth	r2, r3
 8005500:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005504:	6879      	ldr	r1, [r7, #4]
 8005506:	480a      	ldr	r0, [pc, #40]	@ (8005530 <LOGGER_Platform_Send+0x58>)
 8005508:	f009 fc32 	bl	800ed70 <HAL_UART_Transmit>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d107      	bne.n	8005522 <LOGGER_Platform_Send+0x4a>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 8005512:	2364      	movs	r3, #100	@ 0x64
 8005514:	2202      	movs	r2, #2
 8005516:	4907      	ldr	r1, [pc, #28]	@ (8005534 <LOGGER_Platform_Send+0x5c>)
 8005518:	4805      	ldr	r0, [pc, #20]	@ (8005530 <LOGGER_Platform_Send+0x58>)
 800551a:	f009 fc29 	bl	800ed70 <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	e001      	b.n	8005526 <LOGGER_Platform_Send+0x4e>
        }
    }
    return LOGGER_STATUS_ERROR;
 8005522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	2000204c 	.word	0x2000204c
 8005534:	0801ae90 	.word	0x0801ae90

08005538 <UART_Connect>:
    .timeout_ms = UART_DEFAULT_TIMEOUT_MS
};

// 공통 함수들 (테스트와 실제 빌드 모두에서 사용)
UartStatus UART_Connect(const char* port)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
    if (port == NULL) {
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d105      	bne.n	8005552 <UART_Connect+0x1a>
        LOG_ERROR("[UART] Connect failed: NULL port");
 8005546:	4913      	ldr	r1, [pc, #76]	@ (8005594 <UART_Connect+0x5c>)
 8005548:	2003      	movs	r0, #3
 800554a:	f7ff ff13 	bl	8005374 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e01c      	b.n	800558c <UART_Connect+0x54>
    }

    LOG_INFO("[UART] Connecting to %s", port);
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	4910      	ldr	r1, [pc, #64]	@ (8005598 <UART_Connect+0x60>)
 8005556:	2001      	movs	r0, #1
 8005558:	f7ff ff0c 	bl	8005374 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Connect(port);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f8ef 	bl	8005740 <UART_Platform_Connect>
 8005562:	4603      	mov	r3, r0
 8005564:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8005566:	7bfb      	ldrb	r3, [r7, #15]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d108      	bne.n	800557e <UART_Connect+0x46>
        uart_connected = true;
 800556c:	4b0b      	ldr	r3, [pc, #44]	@ (800559c <UART_Connect+0x64>)
 800556e:	2201      	movs	r2, #1
 8005570:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART] Successfully connected to %s", port);
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	490a      	ldr	r1, [pc, #40]	@ (80055a0 <UART_Connect+0x68>)
 8005576:	2001      	movs	r0, #1
 8005578:	f7ff fefc 	bl	8005374 <LOGGER_SendFormatted>
 800557c:	e005      	b.n	800558a <UART_Connect+0x52>
    } else {
        LOG_ERROR("[UART] Failed to connect to %s (status: %d)", port, status);
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	4908      	ldr	r1, [pc, #32]	@ (80055a4 <UART_Connect+0x6c>)
 8005584:	2003      	movs	r0, #3
 8005586:	f7ff fef5 	bl	8005374 <LOGGER_SendFormatted>
    }

    return status;
 800558a:	7bfb      	ldrb	r3, [r7, #15]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	0801ae94 	.word	0x0801ae94
 8005598:	0801aeb8 	.word	0x0801aeb8
 800559c:	2000247b 	.word	0x2000247b
 80055a0:	0801aed0 	.word	0x0801aed0
 80055a4:	0801aef4 	.word	0x0801aef4

080055a8 <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 80055b0:	4b19      	ldr	r3, [pc, #100]	@ (8005618 <UART_Send+0x70>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	f083 0301 	eor.w	r3, r3, #1
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d005      	beq.n	80055ca <UART_Send+0x22>
        LOG_ERROR("[UART] Send failed: not connected");
 80055be:	4917      	ldr	r1, [pc, #92]	@ (800561c <UART_Send+0x74>)
 80055c0:	2003      	movs	r0, #3
 80055c2:	f7ff fed7 	bl	8005374 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e022      	b.n	8005610 <UART_Send+0x68>
    }

    if (data == NULL) {
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d105      	bne.n	80055dc <UART_Send+0x34>
        LOG_ERROR("[UART] Send failed: NULL data");
 80055d0:	4913      	ldr	r1, [pc, #76]	@ (8005620 <UART_Send+0x78>)
 80055d2:	2003      	movs	r0, #3
 80055d4:	f7ff fece 	bl	8005374 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e019      	b.n	8005610 <UART_Send+0x68>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	4911      	ldr	r1, [pc, #68]	@ (8005624 <UART_Send+0x7c>)
 80055e0:	2000      	movs	r0, #0
 80055e2:	f7ff fec7 	bl	8005374 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f992 	bl	8005910 <UART_Platform_Send>
 80055ec:	4603      	mov	r3, r0
 80055ee:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d105      	bne.n	8005602 <UART_Send+0x5a>
        LOG_DEBUG("[UART] Send successful: %s", data);
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	490b      	ldr	r1, [pc, #44]	@ (8005628 <UART_Send+0x80>)
 80055fa:	2000      	movs	r0, #0
 80055fc:	f7ff feba 	bl	8005374 <LOGGER_SendFormatted>
 8005600:	e005      	b.n	800560e <UART_Send+0x66>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	4909      	ldr	r1, [pc, #36]	@ (800562c <UART_Send+0x84>)
 8005608:	2003      	movs	r0, #3
 800560a:	f7ff feb3 	bl	8005374 <LOGGER_SendFormatted>
    }

    return status;
 800560e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	2000247b 	.word	0x2000247b
 800561c:	0801af20 	.word	0x0801af20
 8005620:	0801af44 	.word	0x0801af44
 8005624:	0801af64 	.word	0x0801af64
 8005628:	0801af7c 	.word	0x0801af7c
 800562c:	0801af98 	.word	0x0801af98

08005630 <UART_Receive>:

UartStatus UART_Receive(char* buffer, int buffer_size, int* bytes_received)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
    if (!uart_connected) {
 800563c:	4b22      	ldr	r3, [pc, #136]	@ (80056c8 <UART_Receive+0x98>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	f083 0301 	eor.w	r3, r3, #1
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d005      	beq.n	8005656 <UART_Receive+0x26>
        LOG_ERROR("[UART] Receive failed: not connected");
 800564a:	4920      	ldr	r1, [pc, #128]	@ (80056cc <UART_Receive+0x9c>)
 800564c:	2003      	movs	r0, #3
 800564e:	f7ff fe91 	bl	8005374 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e034      	b.n	80056c0 <UART_Receive+0x90>
    }

    if (buffer == NULL || buffer_size <= 0 || bytes_received == NULL) {
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d005      	beq.n	8005668 <UART_Receive+0x38>
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	dd02      	ble.n	8005668 <UART_Receive+0x38>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d105      	bne.n	8005674 <UART_Receive+0x44>
        LOG_ERROR("[UART] Receive failed: invalid parameters");
 8005668:	4919      	ldr	r1, [pc, #100]	@ (80056d0 <UART_Receive+0xa0>)
 800566a:	2003      	movs	r0, #3
 800566c:	f7ff fe82 	bl	8005374 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e025      	b.n	80056c0 <UART_Receive+0x90>
    }

    LOG_DEBUG("[UART] Receiving data (buffer_size: %d)", buffer_size);
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	4917      	ldr	r1, [pc, #92]	@ (80056d4 <UART_Receive+0xa4>)
 8005678:	2000      	movs	r0, #0
 800567a:	f7ff fe7b 	bl	8005374 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Receive(buffer, buffer_size, bytes_received);
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 f980 	bl	8005988 <UART_Platform_Receive>
 8005688:	4603      	mov	r3, r0
 800568a:	75fb      	strb	r3, [r7, #23]

    if (status == UART_STATUS_OK) {
 800568c:	7dfb      	ldrb	r3, [r7, #23]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d107      	bne.n	80056a2 <UART_Receive+0x72>
        LOG_DEBUG("[UART] Received %d bytes: %s", *bytes_received, buffer);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	490f      	ldr	r1, [pc, #60]	@ (80056d8 <UART_Receive+0xa8>)
 800569a:	2000      	movs	r0, #0
 800569c:	f7ff fe6a 	bl	8005374 <LOGGER_SendFormatted>
 80056a0:	e00d      	b.n	80056be <UART_Receive+0x8e>
    } else if (status == UART_STATUS_TIMEOUT) {
 80056a2:	7dfb      	ldrb	r3, [r7, #23]
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d104      	bne.n	80056b2 <UART_Receive+0x82>
        LOG_DEBUG("[UART] Receive timeout");
 80056a8:	490c      	ldr	r1, [pc, #48]	@ (80056dc <UART_Receive+0xac>)
 80056aa:	2000      	movs	r0, #0
 80056ac:	f7ff fe62 	bl	8005374 <LOGGER_SendFormatted>
 80056b0:	e005      	b.n	80056be <UART_Receive+0x8e>
    } else {
        LOG_ERROR("[UART] Receive failed (status: %d)", status);
 80056b2:	7dfb      	ldrb	r3, [r7, #23]
 80056b4:	461a      	mov	r2, r3
 80056b6:	490a      	ldr	r1, [pc, #40]	@ (80056e0 <UART_Receive+0xb0>)
 80056b8:	2003      	movs	r0, #3
 80056ba:	f7ff fe5b 	bl	8005374 <LOGGER_SendFormatted>
    }

    return status;
 80056be:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	2000247b 	.word	0x2000247b
 80056cc:	0801afbc 	.word	0x0801afbc
 80056d0:	0801afe4 	.word	0x0801afe4
 80056d4:	0801b010 	.word	0x0801b010
 80056d8:	0801b038 	.word	0x0801b038
 80056dc:	0801b058 	.word	0x0801b058
 80056e0:	0801b070 	.word	0x0801b070

080056e4 <flush_rx_buffer>:
// 내부 상태 변수들
static bool uart_initialized = false;
static bool dma_receiving = false;

// 수신 버퍼 플러시 함수
static void flush_rx_buffer(void) {
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
    uint8_t dummy;
    int flush_count = 0;
 80056ea:	2300      	movs	r3, #0
 80056ec:	607b      	str	r3, [r7, #4]
    
    // 방법 1: 직접 레지스터 체크로 기존 데이터 클리어
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 80056ee:	e007      	b.n	8005700 <flush_rx_buffer+0x1c>
        dummy = (uint8_t)(huart6.Instance->RDR & 0xFF);
 80056f0:	4b12      	ldr	r3, [pc, #72]	@ (800573c <flush_rx_buffer+0x58>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	70fb      	strb	r3, [r7, #3]
        flush_count++;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	3301      	adds	r3, #1
 80056fe:	607b      	str	r3, [r7, #4]
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8005700:	4b0e      	ldr	r3, [pc, #56]	@ (800573c <flush_rx_buffer+0x58>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	2b20      	cmp	r3, #32
 800570c:	d106      	bne.n	800571c <flush_rx_buffer+0x38>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b63      	cmp	r3, #99	@ 0x63
 8005712:	dded      	ble.n	80056f0 <flush_rx_buffer+0xc>
    }
    
    // 방법 2: HAL로 남은 데이터 클리어 (타임아웃 1ms)
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8005714:	e002      	b.n	800571c <flush_rx_buffer+0x38>
        flush_count++;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3301      	adds	r3, #1
 800571a:	607b      	str	r3, [r7, #4]
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 800571c:	1cf9      	adds	r1, r7, #3
 800571e:	2301      	movs	r3, #1
 8005720:	2201      	movs	r2, #1
 8005722:	4806      	ldr	r0, [pc, #24]	@ (800573c <flush_rx_buffer+0x58>)
 8005724:	f009 fbad 	bl	800ee82 <HAL_UART_Receive>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d102      	bne.n	8005734 <flush_rx_buffer+0x50>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b63      	cmp	r3, #99	@ 0x63
 8005732:	ddf0      	ble.n	8005716 <flush_rx_buffer+0x32>
    }
}
 8005734:	bf00      	nop
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	200020d4 	.word	0x200020d4

08005740 <UART_Platform_Connect>:

UartStatus UART_Platform_Connect(const char* port) {
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
    // STM32에서는 이미 HAL_UART_Init()이 실행됨
    uart_initialized = true;
 8005748:	4b5b      	ldr	r3, [pc, #364]	@ (80058b8 <UART_Platform_Connect+0x178>)
 800574a:	2201      	movs	r2, #1
 800574c:	701a      	strb	r2, [r3, #0]
    
    // UART 상태 체크 및 리셋
    LOG_INFO("[UART_STM32] UART gState: %d, RxState: %d", 
 800574e:	4b5b      	ldr	r3, [pc, #364]	@ (80058bc <UART_Platform_Connect+0x17c>)
 8005750:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005752:	4b5a      	ldr	r3, [pc, #360]	@ (80058bc <UART_Platform_Connect+0x17c>)
 8005754:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005758:	4959      	ldr	r1, [pc, #356]	@ (80058c0 <UART_Platform_Connect+0x180>)
 800575a:	2001      	movs	r0, #1
 800575c:	f7ff fe0a 	bl	8005374 <LOGGER_SendFormatted>
             huart6.gState, huart6.RxState);
    
    // DMA 핸들 연결 상태 확인
    if (huart6.hdmarx != NULL) {
 8005760:	4b56      	ldr	r3, [pc, #344]	@ (80058bc <UART_Platform_Connect+0x17c>)
 8005762:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00e      	beq.n	8005786 <UART_Platform_Connect+0x46>
        LOG_INFO("[UART_STM32] DMA RX handle is connected");
 8005768:	4956      	ldr	r1, [pc, #344]	@ (80058c4 <UART_Platform_Connect+0x184>)
 800576a:	2001      	movs	r0, #1
 800576c:	f7ff fe02 	bl	8005374 <LOGGER_SendFormatted>
        LOG_INFO("[UART_STM32] DMA State: %d", huart6.hdmarx->State);
 8005770:	4b52      	ldr	r3, [pc, #328]	@ (80058bc <UART_Platform_Connect+0x17c>)
 8005772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005774:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005778:	b2db      	uxtb	r3, r3
 800577a:	461a      	mov	r2, r3
 800577c:	4952      	ldr	r1, [pc, #328]	@ (80058c8 <UART_Platform_Connect+0x188>)
 800577e:	2001      	movs	r0, #1
 8005780:	f7ff fdf8 	bl	8005374 <LOGGER_SendFormatted>
 8005784:	e018      	b.n	80057b8 <UART_Platform_Connect+0x78>
    } else {
        LOG_ERROR("[UART_STM32] DMA RX handle is NULL - DMA not initialized!");
 8005786:	4951      	ldr	r1, [pc, #324]	@ (80058cc <UART_Platform_Connect+0x18c>)
 8005788:	2003      	movs	r0, #3
 800578a:	f7ff fdf3 	bl	8005374 <LOGGER_SendFormatted>
        
        // DMA 핸들 강제 연결 시도
        extern DMA_HandleTypeDef hdma_usart6_rx;
        __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 800578e:	4b4b      	ldr	r3, [pc, #300]	@ (80058bc <UART_Platform_Connect+0x17c>)
 8005790:	4a4f      	ldr	r2, [pc, #316]	@ (80058d0 <UART_Platform_Connect+0x190>)
 8005792:	675a      	str	r2, [r3, #116]	@ 0x74
 8005794:	4b4e      	ldr	r3, [pc, #312]	@ (80058d0 <UART_Platform_Connect+0x190>)
 8005796:	4a49      	ldr	r2, [pc, #292]	@ (80058bc <UART_Platform_Connect+0x17c>)
 8005798:	639a      	str	r2, [r3, #56]	@ 0x38
        
        if (huart6.hdmarx != NULL) {
 800579a:	4b48      	ldr	r3, [pc, #288]	@ (80058bc <UART_Platform_Connect+0x17c>)
 800579c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d004      	beq.n	80057ac <UART_Platform_Connect+0x6c>
            LOG_INFO("[UART_STM32] DMA RX handle manually linked");
 80057a2:	494c      	ldr	r1, [pc, #304]	@ (80058d4 <UART_Platform_Connect+0x194>)
 80057a4:	2001      	movs	r0, #1
 80057a6:	f7ff fde5 	bl	8005374 <LOGGER_SendFormatted>
 80057aa:	e005      	b.n	80057b8 <UART_Platform_Connect+0x78>
        } else {
            LOG_ERROR("[UART_STM32] Failed to link DMA RX handle");
 80057ac:	494a      	ldr	r1, [pc, #296]	@ (80058d8 <UART_Platform_Connect+0x198>)
 80057ae:	2003      	movs	r0, #3
 80057b0:	f7ff fde0 	bl	8005374 <LOGGER_SendFormatted>
            return UART_STATUS_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e07a      	b.n	80058ae <UART_Platform_Connect+0x16e>
        }
    }
    
    // 이전에 시작된 DMA 작업이 있으면 중지
    if (dma_receiving) {
 80057b8:	4b48      	ldr	r3, [pc, #288]	@ (80058dc <UART_Platform_Connect+0x19c>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d009      	beq.n	80057d4 <UART_Platform_Connect+0x94>
        HAL_UART_DMAStop(&huart6);
 80057c0:	483e      	ldr	r0, [pc, #248]	@ (80058bc <UART_Platform_Connect+0x17c>)
 80057c2:	f009 fc6a 	bl	800f09a <HAL_UART_DMAStop>
        dma_receiving = false;
 80057c6:	4b45      	ldr	r3, [pc, #276]	@ (80058dc <UART_Platform_Connect+0x19c>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] Previous DMA reception stopped");
 80057cc:	4944      	ldr	r1, [pc, #272]	@ (80058e0 <UART_Platform_Connect+0x1a0>)
 80057ce:	2001      	movs	r0, #1
 80057d0:	f7ff fdd0 	bl	8005374 <LOGGER_SendFormatted>
    }
    
    // UART 상태를 READY로 강제 설정
    huart6.gState = HAL_UART_STATE_READY;
 80057d4:	4b39      	ldr	r3, [pc, #228]	@ (80058bc <UART_Platform_Connect+0x17c>)
 80057d6:	2220      	movs	r2, #32
 80057d8:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart6.RxState = HAL_UART_STATE_READY;
 80057da:	4b38      	ldr	r3, [pc, #224]	@ (80058bc <UART_Platform_Connect+0x17c>)
 80057dc:	2220      	movs	r2, #32
 80057de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    
    // DMA 상태도 READY로 설정
    if (huart6.hdmarx != NULL) {
 80057e2:	4b36      	ldr	r3, [pc, #216]	@ (80058bc <UART_Platform_Connect+0x17c>)
 80057e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d026      	beq.n	8005838 <UART_Platform_Connect+0xf8>
        // DMA 재초기화 (기존 상태 문제 해결)
        if (huart6.hdmarx->State != HAL_DMA_STATE_READY) {
 80057ea:	4b34      	ldr	r3, [pc, #208]	@ (80058bc <UART_Platform_Connect+0x17c>)
 80057ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d01a      	beq.n	800582e <UART_Platform_Connect+0xee>
            LOG_INFO("[UART_STM32] DMA not ready, reinitializing...");
 80057f8:	493a      	ldr	r1, [pc, #232]	@ (80058e4 <UART_Platform_Connect+0x1a4>)
 80057fa:	2001      	movs	r0, #1
 80057fc:	f7ff fdba 	bl	8005374 <LOGGER_SendFormatted>
            HAL_DMA_DeInit(huart6.hdmarx);
 8005800:	4b2e      	ldr	r3, [pc, #184]	@ (80058bc <UART_Platform_Connect+0x17c>)
 8005802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005804:	4618      	mov	r0, r3
 8005806:	f001 f943 	bl	8006a90 <HAL_DMA_DeInit>
            if (HAL_DMA_Init(huart6.hdmarx) != HAL_OK) {
 800580a:	4b2c      	ldr	r3, [pc, #176]	@ (80058bc <UART_Platform_Connect+0x17c>)
 800580c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800580e:	4618      	mov	r0, r3
 8005810:	f001 f890 	bl	8006934 <HAL_DMA_Init>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d005      	beq.n	8005826 <UART_Platform_Connect+0xe6>
                LOG_ERROR("[UART_STM32] DMA reinitialization failed");
 800581a:	4933      	ldr	r1, [pc, #204]	@ (80058e8 <UART_Platform_Connect+0x1a8>)
 800581c:	2003      	movs	r0, #3
 800581e:	f7ff fda9 	bl	8005374 <LOGGER_SendFormatted>
                return UART_STATUS_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e043      	b.n	80058ae <UART_Platform_Connect+0x16e>
            }
            LOG_INFO("[UART_STM32] DMA reinitialized successfully");
 8005826:	4931      	ldr	r1, [pc, #196]	@ (80058ec <UART_Platform_Connect+0x1ac>)
 8005828:	2001      	movs	r0, #1
 800582a:	f7ff fda3 	bl	8005374 <LOGGER_SendFormatted>
        }
        huart6.hdmarx->State = HAL_DMA_STATE_READY;
 800582e:	4b23      	ldr	r3, [pc, #140]	@ (80058bc <UART_Platform_Connect+0x17c>)
 8005830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 초기 버퍼 플러시
    flush_rx_buffer();
 8005838:	f7ff ff54 	bl	80056e4 <flush_rx_buffer>
    
    // DMA 기반 연속 수신 시작
    uart_rx_complete_flag = 0;
 800583c:	4b2c      	ldr	r3, [pc, #176]	@ (80058f0 <UART_Platform_Connect+0x1b0>)
 800583e:	2200      	movs	r2, #0
 8005840:	701a      	strb	r2, [r3, #0]
    uart_rx_error_flag = 0;
 8005842:	4b2c      	ldr	r3, [pc, #176]	@ (80058f4 <UART_Platform_Connect+0x1b4>)
 8005844:	2200      	movs	r2, #0
 8005846:	701a      	strb	r2, [r3, #0]
    uart_rx_length = 0;
 8005848:	4b2b      	ldr	r3, [pc, #172]	@ (80058f8 <UART_Platform_Connect+0x1b8>)
 800584a:	2200      	movs	r2, #0
 800584c:	801a      	strh	r2, [r3, #0]
    
    // DMA 수신 버퍼 클리어
    memset(rx_buffer, 0, sizeof(rx_buffer));
 800584e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005852:	2100      	movs	r1, #0
 8005854:	4829      	ldr	r0, [pc, #164]	@ (80058fc <UART_Platform_Connect+0x1bc>)
 8005856:	f011 ff2f 	bl	80176b8 <memset>
    
    LOG_INFO("[UART_STM32] Starting DMA reception...");
 800585a:	4929      	ldr	r1, [pc, #164]	@ (8005900 <UART_Platform_Connect+0x1c0>)
 800585c:	2001      	movs	r0, #1
 800585e:	f7ff fd89 	bl	8005374 <LOGGER_SendFormatted>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8005862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005866:	4925      	ldr	r1, [pc, #148]	@ (80058fc <UART_Platform_Connect+0x1bc>)
 8005868:	4814      	ldr	r0, [pc, #80]	@ (80058bc <UART_Platform_Connect+0x17c>)
 800586a:	f009 fbd2 	bl	800f012 <HAL_UART_Receive_DMA>
 800586e:	4603      	mov	r3, r0
 8005870:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8005872:	7bfb      	ldrb	r3, [r7, #15]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10a      	bne.n	800588e <UART_Platform_Connect+0x14e>
        dma_receiving = true;
 8005878:	4b18      	ldr	r3, [pc, #96]	@ (80058dc <UART_Platform_Connect+0x19c>)
 800587a:	2201      	movs	r2, #1
 800587c:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] ✓ DMA continuous reception started (buffer size: %d)", sizeof(rx_buffer));
 800587e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005882:	4920      	ldr	r1, [pc, #128]	@ (8005904 <UART_Platform_Connect+0x1c4>)
 8005884:	2001      	movs	r0, #1
 8005886:	f7ff fd75 	bl	8005374 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
                  huart6.gState, huart6.RxState);
        return UART_STATUS_ERROR;
    }
    
    return UART_STATUS_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	e00f      	b.n	80058ae <UART_Platform_Connect+0x16e>
        LOG_ERROR("[UART_STM32] ✗ Failed to start DMA reception (status: %d)", status);
 800588e:	7bfb      	ldrb	r3, [r7, #15]
 8005890:	461a      	mov	r2, r3
 8005892:	491d      	ldr	r1, [pc, #116]	@ (8005908 <UART_Platform_Connect+0x1c8>)
 8005894:	2003      	movs	r0, #3
 8005896:	f7ff fd6d 	bl	8005374 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
 800589a:	4b08      	ldr	r3, [pc, #32]	@ (80058bc <UART_Platform_Connect+0x17c>)
 800589c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800589e:	4b07      	ldr	r3, [pc, #28]	@ (80058bc <UART_Platform_Connect+0x17c>)
 80058a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058a4:	4919      	ldr	r1, [pc, #100]	@ (800590c <UART_Platform_Connect+0x1cc>)
 80058a6:	2003      	movs	r0, #3
 80058a8:	f7ff fd64 	bl	8005374 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80058ac:	2301      	movs	r3, #1
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20002680 	.word	0x20002680
 80058bc:	200020d4 	.word	0x200020d4
 80058c0:	0801b26c 	.word	0x0801b26c
 80058c4:	0801b298 	.word	0x0801b298
 80058c8:	0801b2c0 	.word	0x0801b2c0
 80058cc:	0801b2dc 	.word	0x0801b2dc
 80058d0:	200023ac 	.word	0x200023ac
 80058d4:	0801b318 	.word	0x0801b318
 80058d8:	0801b344 	.word	0x0801b344
 80058dc:	20002681 	.word	0x20002681
 80058e0:	0801b370 	.word	0x0801b370
 80058e4:	0801b39c 	.word	0x0801b39c
 80058e8:	0801b3cc 	.word	0x0801b3cc
 80058ec:	0801b3f8 	.word	0x0801b3f8
 80058f0:	2000247c 	.word	0x2000247c
 80058f4:	2000247d 	.word	0x2000247d
 80058f8:	2000247e 	.word	0x2000247e
 80058fc:	20002480 	.word	0x20002480
 8005900:	0801b424 	.word	0x0801b424
 8005904:	0801b44c 	.word	0x0801b44c
 8005908:	0801b490 	.word	0x0801b490
 800590c:	0801b4cc 	.word	0x0801b4cc

08005910 <UART_Platform_Send>:
    uart_initialized = false;
    
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d006      	beq.n	800592c <UART_Platform_Send+0x1c>
 800591e:	4b17      	ldr	r3, [pc, #92]	@ (800597c <UART_Platform_Send+0x6c>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	f083 0301 	eor.w	r3, r3, #1
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <UART_Platform_Send+0x20>
 800592c:	2301      	movs	r3, #1
 800592e:	e021      	b.n	8005974 <UART_Platform_Send+0x64>
    
    int len = strlen(data);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7fa fc77 	bl	8000224 <strlen>
 8005936:	4603      	mov	r3, r0
 8005938:	60fb      	str	r3, [r7, #12]
    if (len == 0) return UART_STATUS_OK;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <UART_Platform_Send+0x34>
 8005940:	2300      	movs	r3, #0
 8005942:	e017      	b.n	8005974 <UART_Platform_Send+0x64>
    
    // 송신 전 수신 버퍼 플러시 (깨끗한 상태에서 시작)
    flush_rx_buffer();
 8005944:	f7ff fece 	bl	80056e4 <flush_rx_buffer>
    
    // 단순한 송신
    HAL_StatusTypeDef tx_status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	b29a      	uxth	r2, r3
 800594c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005950:	6879      	ldr	r1, [r7, #4]
 8005952:	480b      	ldr	r0, [pc, #44]	@ (8005980 <UART_Platform_Send+0x70>)
 8005954:	f009 fa0c 	bl	800ed70 <HAL_UART_Transmit>
 8005958:	4603      	mov	r3, r0
 800595a:	72fb      	strb	r3, [r7, #11]
    
    if (tx_status == HAL_OK) {
 800595c:	7afb      	ldrb	r3, [r7, #11]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <UART_Platform_Send+0x56>
        return UART_STATUS_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	e006      	b.n	8005974 <UART_Platform_Send+0x64>
    } else {
        LOG_ERROR("[UART_STM32] ✗ Transmission failed (HAL status: %d)", tx_status);
 8005966:	7afb      	ldrb	r3, [r7, #11]
 8005968:	461a      	mov	r2, r3
 800596a:	4906      	ldr	r1, [pc, #24]	@ (8005984 <UART_Platform_Send+0x74>)
 800596c:	2003      	movs	r0, #3
 800596e:	f7ff fd01 	bl	8005374 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005972:	2301      	movs	r3, #1
    }
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20002680 	.word	0x20002680
 8005980:	200020d4 	.word	0x200020d4
 8005984:	0801b52c 	.word	0x0801b52c

08005988 <UART_Platform_Receive>:

UartStatus UART_Platform_Receive(char* buffer, int buffer_size, int* bytes_received) {
 8005988:	b580      	push	{r7, lr}
 800598a:	b08a      	sub	sp, #40	@ 0x28
 800598c:	af02      	add	r7, sp, #8
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || bytes_received == NULL || !uart_initialized) {
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d009      	beq.n	80059ae <UART_Platform_Receive+0x26>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d006      	beq.n	80059ae <UART_Platform_Receive+0x26>
 80059a0:	4b74      	ldr	r3, [pc, #464]	@ (8005b74 <UART_Platform_Receive+0x1ec>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	f083 0301 	eor.w	r3, r3, #1
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <UART_Platform_Receive+0x2a>
        return UART_STATUS_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e0dc      	b.n	8005b6c <UART_Platform_Receive+0x1e4>
    }
    
    if (buffer_size <= 0) {
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	dc04      	bgt.n	80059c2 <UART_Platform_Receive+0x3a>
        *bytes_received = 0;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]
        return UART_STATUS_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e0d4      	b.n	8005b6c <UART_Platform_Receive+0x1e4>
    }
    
    *bytes_received = 0;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	601a      	str	r2, [r3, #0]
    
    // DMA 수신이 시작되지 않았으면 에러
    if (!dma_receiving) {
 80059c8:	4b6b      	ldr	r3, [pc, #428]	@ (8005b78 <UART_Platform_Receive+0x1f0>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	f083 0301 	eor.w	r3, r3, #1
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <UART_Platform_Receive+0x52>
        return UART_STATUS_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e0c8      	b.n	8005b6c <UART_Platform_Receive+0x1e4>
    }
    
    // 에러 체크
    if (uart_rx_error_flag) {
 80059da:	4b68      	ldr	r3, [pc, #416]	@ (8005b7c <UART_Platform_Receive+0x1f4>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d008      	beq.n	80059f6 <UART_Platform_Receive+0x6e>
        uart_rx_error_flag = 0;  // 플래그 클리어
 80059e4:	4b65      	ldr	r3, [pc, #404]	@ (8005b7c <UART_Platform_Receive+0x1f4>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	701a      	strb	r2, [r3, #0]
        LOG_WARN("[UART_STM32] ⚠ DMA reception error occurred");
 80059ea:	4965      	ldr	r1, [pc, #404]	@ (8005b80 <UART_Platform_Receive+0x1f8>)
 80059ec:	2002      	movs	r0, #2
 80059ee:	f7ff fcc1 	bl	8005374 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e0ba      	b.n	8005b6c <UART_Platform_Receive+0x1e4>
    }
    
    // DMA 수신 완료 체크
    if (uart_rx_complete_flag) {
 80059f6:	4b63      	ldr	r3, [pc, #396]	@ (8005b84 <UART_Platform_Receive+0x1fc>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 80b4 	beq.w	8005b6a <UART_Platform_Receive+0x1e2>
        uart_rx_complete_flag = 0;  // 플래그 클리어
 8005a02:	4b60      	ldr	r3, [pc, #384]	@ (8005b84 <UART_Platform_Receive+0x1fc>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	701a      	strb	r2, [r3, #0]
        
        // 실제 수신된 바이트 수 확인
        uint16_t received_length = uart_rx_length;
 8005a08:	4b5f      	ldr	r3, [pc, #380]	@ (8005b88 <UART_Platform_Receive+0x200>)
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	837b      	strh	r3, [r7, #26]
        LOG_DEBUG("[UART_STM32] DMA received %d bytes", received_length);
 8005a0e:	8b7b      	ldrh	r3, [r7, #26]
 8005a10:	461a      	mov	r2, r3
 8005a12:	495e      	ldr	r1, [pc, #376]	@ (8005b8c <UART_Platform_Receive+0x204>)
 8005a14:	2000      	movs	r0, #0
 8005a16:	f7ff fcad 	bl	8005374 <LOGGER_SendFormatted>
        
        if (received_length > 0 && received_length <= buffer_size - 1) {
 8005a1a:	8b7b      	ldrh	r3, [r7, #26]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 809e 	beq.w	8005b5e <UART_Platform_Receive+0x1d6>
 8005a22:	8b7b      	ldrh	r3, [r7, #26]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	f340 8099 	ble.w	8005b5e <UART_Platform_Receive+0x1d6>
            // 데이터 복사
            memcpy(buffer, rx_buffer, received_length);
 8005a2c:	8b7b      	ldrh	r3, [r7, #26]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	4957      	ldr	r1, [pc, #348]	@ (8005b90 <UART_Platform_Receive+0x208>)
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f011 fef5 	bl	8017822 <memcpy>
            buffer[received_length] = '\0';  // null terminate
 8005a38:	8b7b      	ldrh	r3, [r7, #26]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	2200      	movs	r2, #0
 8005a40:	701a      	strb	r2, [r3, #0]
            *bytes_received = received_length;
 8005a42:	8b7a      	ldrh	r2, [r7, #26]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	601a      	str	r2, [r3, #0]
            
            // 수신된 데이터 로그 (간단하게)
            LOG_DEBUG("[UART_STM32] Received data (%d bytes): '%s'", received_length, buffer);
 8005a48:	8b7a      	ldrh	r2, [r7, #26]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4951      	ldr	r1, [pc, #324]	@ (8005b94 <UART_Platform_Receive+0x20c>)
 8005a4e:	2000      	movs	r0, #0
 8005a50:	f7ff fc90 	bl	8005374 <LOGGER_SendFormatted>
            
            // 새로운 수신을 위해 DMA 완전 리셋 후 재시작
            memset(rx_buffer, 0, sizeof(rx_buffer));
 8005a54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a58:	2100      	movs	r1, #0
 8005a5a:	484d      	ldr	r0, [pc, #308]	@ (8005b90 <UART_Platform_Receive+0x208>)
 8005a5c:	f011 fe2c 	bl	80176b8 <memset>
            
            // 1. DMA 완전 정지
            HAL_UART_DMAStop(&huart6);
 8005a60:	484d      	ldr	r0, [pc, #308]	@ (8005b98 <UART_Platform_Receive+0x210>)
 8005a62:	f009 fb1a 	bl	800f09a <HAL_UART_DMAStop>
            
            // 2. 모든 UART 에러 플래그 클리어
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_PEF);
 8005a66:	4b4c      	ldr	r3, [pc, #304]	@ (8005b98 <UART_Platform_Receive+0x210>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_FEF);
 8005a6e:	4b4a      	ldr	r3, [pc, #296]	@ (8005b98 <UART_Platform_Receive+0x210>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2202      	movs	r2, #2
 8005a74:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_NEF);
 8005a76:	4b48      	ldr	r3, [pc, #288]	@ (8005b98 <UART_Platform_Receive+0x210>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2204      	movs	r2, #4
 8005a7c:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_OREF);
 8005a7e:	4b46      	ldr	r3, [pc, #280]	@ (8005b98 <UART_Platform_Receive+0x210>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2208      	movs	r2, #8
 8005a84:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_IDLEF);
 8005a86:	4b44      	ldr	r3, [pc, #272]	@ (8005b98 <UART_Platform_Receive+0x210>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2210      	movs	r2, #16
 8005a8c:	621a      	str	r2, [r3, #32]
            
            // 3. DMA 스트림이 완전히 정지될 때까지 대기
            if (huart6.hdmarx != NULL) {
 8005a8e:	4b42      	ldr	r3, [pc, #264]	@ (8005b98 <UART_Platform_Receive+0x210>)
 8005a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d025      	beq.n	8005ae2 <UART_Platform_Receive+0x15a>
                int timeout = 1000;
 8005a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005a9a:	61fb      	str	r3, [r7, #28]
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8005a9c:	e00b      	b.n	8005ab6 <UART_Platform_Receive+0x12e>
                    timeout--;
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	61fb      	str	r3, [r7, #28]
                    for(volatile int i = 0; i < 100; i++); // 짧은 지연
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	e002      	b.n	8005ab0 <UART_Platform_Receive+0x128>
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	3301      	adds	r3, #1
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	2b63      	cmp	r3, #99	@ 0x63
 8005ab4:	ddf9      	ble.n	8005aaa <UART_Platform_Receive+0x122>
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8005ab6:	4b38      	ldr	r3, [pc, #224]	@ (8005b98 <UART_Platform_Receive+0x210>)
 8005ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d002      	beq.n	8005aca <UART_Platform_Receive+0x142>
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	dce9      	bgt.n	8005a9e <UART_Platform_Receive+0x116>
                }
                
                if (timeout == 0) {
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d108      	bne.n	8005ae2 <UART_Platform_Receive+0x15a>
                    LOG_WARN("[UART_STM32] DMA did not reach READY state, forcing reset");
 8005ad0:	4932      	ldr	r1, [pc, #200]	@ (8005b9c <UART_Platform_Receive+0x214>)
 8005ad2:	2002      	movs	r0, #2
 8005ad4:	f7ff fc4e 	bl	8005374 <LOGGER_SendFormatted>
                    huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8005ad8:	4b2f      	ldr	r3, [pc, #188]	@ (8005b98 <UART_Platform_Receive+0x210>)
 8005ada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                }
            }
            
            // 4. UART 상태 리셋 (DMA 완전 정지 후)
            huart6.RxState = HAL_UART_STATE_READY;
 8005ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8005b98 <UART_Platform_Receive+0x210>)
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            huart6.gState = HAL_UART_STATE_READY;
 8005aea:	4b2b      	ldr	r3, [pc, #172]	@ (8005b98 <UART_Platform_Receive+0x210>)
 8005aec:	2220      	movs	r2, #32
 8005aee:	67da      	str	r2, [r3, #124]	@ 0x7c
            
            // 5. 충분한 지연 후 재시작
            for(volatile int i = 0; i < 10000; i++); // 더 긴 지연
 8005af0:	2300      	movs	r3, #0
 8005af2:	613b      	str	r3, [r7, #16]
 8005af4:	e002      	b.n	8005afc <UART_Platform_Receive+0x174>
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	3301      	adds	r3, #1
 8005afa:	613b      	str	r3, [r7, #16]
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005b02:	4293      	cmp	r3, r2
 8005b04:	ddf7      	ble.n	8005af6 <UART_Platform_Receive+0x16e>
            
            // 6. DMA 재시작
            HAL_StatusTypeDef restart_status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8005b06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b0a:	4921      	ldr	r1, [pc, #132]	@ (8005b90 <UART_Platform_Receive+0x208>)
 8005b0c:	4822      	ldr	r0, [pc, #136]	@ (8005b98 <UART_Platform_Receive+0x210>)
 8005b0e:	f009 fa80 	bl	800f012 <HAL_UART_Receive_DMA>
 8005b12:	4603      	mov	r3, r0
 8005b14:	767b      	strb	r3, [r7, #25]
            if (restart_status == HAL_OK) {
 8005b16:	7e7b      	ldrb	r3, [r7, #25]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d104      	bne.n	8005b26 <UART_Platform_Receive+0x19e>
                LOG_DEBUG("[UART_STM32] DMA restarted for next reception");
 8005b1c:	4920      	ldr	r1, [pc, #128]	@ (8005ba0 <UART_Platform_Receive+0x218>)
 8005b1e:	2000      	movs	r0, #0
 8005b20:	f7ff fc28 	bl	8005374 <LOGGER_SendFormatted>
 8005b24:	e019      	b.n	8005b5a <UART_Platform_Receive+0x1d2>
            } else {
                LOG_WARN("[UART_STM32] DMA restart failed (status: %d), UART state: g=%d rx=%d", 
 8005b26:	7e7a      	ldrb	r2, [r7, #25]
 8005b28:	4b1b      	ldr	r3, [pc, #108]	@ (8005b98 <UART_Platform_Receive+0x210>)
 8005b2a:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8005b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8005b98 <UART_Platform_Receive+0x210>)
 8005b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	460b      	mov	r3, r1
 8005b36:	491b      	ldr	r1, [pc, #108]	@ (8005ba4 <UART_Platform_Receive+0x21c>)
 8005b38:	2002      	movs	r0, #2
 8005b3a:	f7ff fc1b 	bl	8005374 <LOGGER_SendFormatted>
                        restart_status, huart6.gState, huart6.RxState);
                if (huart6.hdmarx != NULL) {
 8005b3e:	4b16      	ldr	r3, [pc, #88]	@ (8005b98 <UART_Platform_Receive+0x210>)
 8005b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d009      	beq.n	8005b5a <UART_Platform_Receive+0x1d2>
                    LOG_WARN("[UART_STM32] DMA state: %d", huart6.hdmarx->State);
 8005b46:	4b14      	ldr	r3, [pc, #80]	@ (8005b98 <UART_Platform_Receive+0x210>)
 8005b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	4915      	ldr	r1, [pc, #84]	@ (8005ba8 <UART_Platform_Receive+0x220>)
 8005b54:	2002      	movs	r0, #2
 8005b56:	f7ff fc0d 	bl	8005374 <LOGGER_SendFormatted>
                }
            }
            
            return UART_STATUS_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e006      	b.n	8005b6c <UART_Platform_Receive+0x1e4>
        } else {
            LOG_WARN("[UART_STM32] Invalid received length: %d (buffer size: %d)", received_length, buffer_size);
 8005b5e:	8b7a      	ldrh	r2, [r7, #26]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	4912      	ldr	r1, [pc, #72]	@ (8005bac <UART_Platform_Receive+0x224>)
 8005b64:	2002      	movs	r0, #2
 8005b66:	f7ff fc05 	bl	8005374 <LOGGER_SendFormatted>
        }
    }
    
    // 수신된 데이터 없음
    return UART_STATUS_TIMEOUT;
 8005b6a:	2302      	movs	r3, #2
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3720      	adds	r7, #32
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	20002680 	.word	0x20002680
 8005b78:	20002681 	.word	0x20002681
 8005b7c:	2000247d 	.word	0x2000247d
 8005b80:	0801b564 	.word	0x0801b564
 8005b84:	2000247c 	.word	0x2000247c
 8005b88:	2000247e 	.word	0x2000247e
 8005b8c:	0801b594 	.word	0x0801b594
 8005b90:	20002480 	.word	0x20002480
 8005b94:	0801b5b8 	.word	0x0801b5b8
 8005b98:	200020d4 	.word	0x200020d4
 8005b9c:	0801b5e4 	.word	0x0801b5e4
 8005ba0:	0801b620 	.word	0x0801b620
 8005ba4:	0801b650 	.word	0x0801b650
 8005ba8:	0801b698 	.word	0x0801b698
 8005bac:	0801b6b4 	.word	0x0801b6b4

08005bb0 <HAL_UART_RxCpltCallback>:
// ============================================================================
// HAL UART 콜백 함수들 - main.c에서 이동됨
// ============================================================================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8005be8 <HAL_UART_RxCpltCallback+0x38>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d10e      	bne.n	8005be0 <HAL_UART_RxCpltCallback+0x30>
  {
    // DMA 수신 완료 (전체 버퍼) - 거의 발생하지 않음
    uart_rx_complete_flag = 1;
 8005bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bec <HAL_UART_RxCpltCallback+0x3c>)
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	701a      	strb	r2, [r3, #0]
    uart_rx_length = sizeof(rx_buffer);
 8005bc8:	4b09      	ldr	r3, [pc, #36]	@ (8005bf0 <HAL_UART_RxCpltCallback+0x40>)
 8005bca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bce:	801a      	strh	r2, [r3, #0]
    LOG_DEBUG("[DMA] RxCpltCallback: Full buffer received (%d bytes)", uart_rx_length);
 8005bd0:	4b07      	ldr	r3, [pc, #28]	@ (8005bf0 <HAL_UART_RxCpltCallback+0x40>)
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	4906      	ldr	r1, [pc, #24]	@ (8005bf4 <HAL_UART_RxCpltCallback+0x44>)
 8005bda:	2000      	movs	r0, #0
 8005bdc:	f7ff fbca 	bl	8005374 <LOGGER_SendFormatted>
  }
}
 8005be0:	bf00      	nop
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	40011400 	.word	0x40011400
 8005bec:	2000247c 	.word	0x2000247c
 8005bf0:	2000247e 	.word	0x2000247e
 8005bf4:	0801b6f0 	.word	0x0801b6f0

08005bf8 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a05      	ldr	r2, [pc, #20]	@ (8005c1c <HAL_UART_RxHalfCpltCallback+0x24>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d103      	bne.n	8005c12 <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    // DMA 수신 절반 완료 - NORMAL 모드에서는 처리하지 않음 (IDLE 인터럽트가 처리)
    LOG_WARN("[DMA] RxHalfCpltCallback: Half buffer reached but ignoring in NORMAL mode");
 8005c0a:	4905      	ldr	r1, [pc, #20]	@ (8005c20 <HAL_UART_RxHalfCpltCallback+0x28>)
 8005c0c:	2002      	movs	r0, #2
 8005c0e:	f7ff fbb1 	bl	8005374 <LOGGER_SendFormatted>
    // uart_rx_complete_flag는 설정하지 않음 - IDLE 인터럽트에서만 설정
  }
}
 8005c12:	bf00      	nop
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	40011400 	.word	0x40011400
 8005c20:	0801b728 	.word	0x0801b728

08005c24 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a3c      	ldr	r2, [pc, #240]	@ (8005d24 <HAL_UART_ErrorCallback+0x100>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d171      	bne.n	8005d1a <HAL_UART_ErrorCallback+0xf6>
  {
    // UART 에러 발생
    uart_rx_error_flag = 1;
 8005c36:	4b3c      	ldr	r3, [pc, #240]	@ (8005d28 <HAL_UART_ErrorCallback+0x104>)
 8005c38:	2201      	movs	r2, #1
 8005c3a:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[DMA] ErrorCallback: UART error occurred");
 8005c3c:	493b      	ldr	r1, [pc, #236]	@ (8005d2c <HAL_UART_ErrorCallback+0x108>)
 8005c3e:	2002      	movs	r0, #2
 8005c40:	f7ff fb98 	bl	8005374 <LOGGER_SendFormatted>
    
    // 모든 에러 플래그 클리어
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b08      	cmp	r3, #8
 8005c50:	d107      	bne.n	8005c62 <HAL_UART_ErrorCallback+0x3e>
      __HAL_UART_CLEAR_OREFLAG(huart);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2208      	movs	r2, #8
 8005c58:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Overrun error cleared");
 8005c5a:	4935      	ldr	r1, [pc, #212]	@ (8005d30 <HAL_UART_ErrorCallback+0x10c>)
 8005c5c:	2002      	movs	r0, #2
 8005c5e:	f7ff fb89 	bl	8005374 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	d107      	bne.n	8005c80 <HAL_UART_ErrorCallback+0x5c>
      __HAL_UART_CLEAR_NEFLAG(huart);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2204      	movs	r2, #4
 8005c76:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Noise error cleared");
 8005c78:	492e      	ldr	r1, [pc, #184]	@ (8005d34 <HAL_UART_ErrorCallback+0x110>)
 8005c7a:	2002      	movs	r0, #2
 8005c7c:	f7ff fb7a 	bl	8005374 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) {
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d107      	bne.n	8005c9e <HAL_UART_ErrorCallback+0x7a>
      __HAL_UART_CLEAR_FEFLAG(huart);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2202      	movs	r2, #2
 8005c94:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Frame error cleared");
 8005c96:	4928      	ldr	r1, [pc, #160]	@ (8005d38 <HAL_UART_ErrorCallback+0x114>)
 8005c98:	2002      	movs	r0, #2
 8005c9a:	f7ff fb6b 	bl	8005374 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) {
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d107      	bne.n	8005cbc <HAL_UART_ErrorCallback+0x98>
      __HAL_UART_CLEAR_PEFLAG(huart);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Parity error cleared");
 8005cb4:	4921      	ldr	r1, [pc, #132]	@ (8005d3c <HAL_UART_ErrorCallback+0x118>)
 8005cb6:	2002      	movs	r0, #2
 8005cb8:	f7ff fb5c 	bl	8005374 <LOGGER_SendFormatted>
    }
    
    // UART와 DMA 상태 강제 리셋
    HAL_UART_DMAStop(huart);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f009 f9ec 	bl	800f09a <HAL_UART_DMAStop>
    huart->gState = HAL_UART_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (huart->hdmarx != NULL) {
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d004      	beq.n	8005ce2 <HAL_UART_ErrorCallback+0xbe>
      huart->hdmarx->State = HAL_DMA_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 버퍼 클리어 후 DMA 재시작 (일반 모드)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8005ce2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	4815      	ldr	r0, [pc, #84]	@ (8005d40 <HAL_UART_ErrorCallback+0x11c>)
 8005cea:	f011 fce5 	bl	80176b8 <memset>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8005cee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cf2:	4913      	ldr	r1, [pc, #76]	@ (8005d40 <HAL_UART_ErrorCallback+0x11c>)
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f009 f98c 	bl	800f012 <HAL_UART_Receive_DMA>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d104      	bne.n	8005d0e <HAL_UART_ErrorCallback+0xea>
      LOG_INFO("[DMA] Error recovery: DMA restarted successfully");
 8005d04:	490f      	ldr	r1, [pc, #60]	@ (8005d44 <HAL_UART_ErrorCallback+0x120>)
 8005d06:	2001      	movs	r0, #1
 8005d08:	f7ff fb34 	bl	8005374 <LOGGER_SendFormatted>
    } else {
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
    }
  }
}
 8005d0c:	e005      	b.n	8005d1a <HAL_UART_ErrorCallback+0xf6>
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
 8005d10:	461a      	mov	r2, r3
 8005d12:	490d      	ldr	r1, [pc, #52]	@ (8005d48 <HAL_UART_ErrorCallback+0x124>)
 8005d14:	2003      	movs	r0, #3
 8005d16:	f7ff fb2d 	bl	8005374 <LOGGER_SendFormatted>
}
 8005d1a:	bf00      	nop
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	40011400 	.word	0x40011400
 8005d28:	2000247d 	.word	0x2000247d
 8005d2c:	0801b774 	.word	0x0801b774
 8005d30:	0801b7a0 	.word	0x0801b7a0
 8005d34:	0801b7bc 	.word	0x0801b7bc
 8005d38:	0801b7d8 	.word	0x0801b7d8
 8005d3c:	0801b7f4 	.word	0x0801b7f4
 8005d40:	20002480 	.word	0x20002480
 8005d44:	0801b810 	.word	0x0801b810
 8005d48:	0801b844 	.word	0x0801b844

08005d4c <USER_UART_IDLECallback>:

// UART IDLE 인터럽트 콜백 (메시지 끝 감지)
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af02      	add	r7, sp, #8
 8005d52:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a3e      	ldr	r2, [pc, #248]	@ (8005e54 <USER_UART_IDLECallback+0x108>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d175      	bne.n	8005e4a <USER_UART_IDLECallback+0xfe>
  {
    // UART 에러 상태 체크
    uint32_t error_flags = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) error_flags |= 0x01;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d103      	bne.n	8005d78 <USER_UART_IDLECallback+0x2c>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f043 0301 	orr.w	r3, r3, #1
 8005d76:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) error_flags |= 0x02;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d103      	bne.n	8005d8e <USER_UART_IDLECallback+0x42>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f043 0302 	orr.w	r3, r3, #2
 8005d8c:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) error_flags |= 0x04;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d103      	bne.n	8005da4 <USER_UART_IDLECallback+0x58>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f043 0304 	orr.w	r3, r3, #4
 8005da2:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) error_flags |= 0x08;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d103      	bne.n	8005dba <USER_UART_IDLECallback+0x6e>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f043 0308 	orr.w	r3, r3, #8
 8005db8:	60fb      	str	r3, [r7, #12]
    
    // IDLE 감지 - 메시지 끝
    uint16_t remaining = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	817b      	strh	r3, [r7, #10]
    uart_rx_length = sizeof(rx_buffer) - remaining;
 8005dc4:	897b      	ldrh	r3, [r7, #10]
 8005dc6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	4b22      	ldr	r3, [pc, #136]	@ (8005e58 <USER_UART_IDLECallback+0x10c>)
 8005dce:	801a      	strh	r2, [r3, #0]
    
    if (uart_rx_length > 0) {
 8005dd0:	4b21      	ldr	r3, [pc, #132]	@ (8005e58 <USER_UART_IDLECallback+0x10c>)
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d033      	beq.n	8005e42 <USER_UART_IDLECallback+0xf6>
      uart_rx_complete_flag = 1;
 8005dda:	4b20      	ldr	r3, [pc, #128]	@ (8005e5c <USER_UART_IDLECallback+0x110>)
 8005ddc:	2201      	movs	r2, #1
 8005dde:	701a      	strb	r2, [r3, #0]
      if (error_flags != 0) {
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d009      	beq.n	8005dfa <USER_UART_IDLECallback+0xae>
        LOG_WARN("[DMA] IDLE detected: %d bytes received (UART errors: 0x%02lX)", uart_rx_length, error_flags);
 8005de6:	4b1c      	ldr	r3, [pc, #112]	@ (8005e58 <USER_UART_IDLECallback+0x10c>)
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	461a      	mov	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	491b      	ldr	r1, [pc, #108]	@ (8005e60 <USER_UART_IDLECallback+0x114>)
 8005df2:	2002      	movs	r0, #2
 8005df4:	f7ff fabe 	bl	8005374 <LOGGER_SendFormatted>
 8005df8:	e007      	b.n	8005e0a <USER_UART_IDLECallback+0xbe>
      } else {
        LOG_DEBUG("[DMA] IDLE detected: %d bytes received", uart_rx_length);
 8005dfa:	4b17      	ldr	r3, [pc, #92]	@ (8005e58 <USER_UART_IDLECallback+0x10c>)
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	461a      	mov	r2, r3
 8005e02:	4918      	ldr	r1, [pc, #96]	@ (8005e64 <USER_UART_IDLECallback+0x118>)
 8005e04:	2000      	movs	r0, #0
 8005e06:	f7ff fab5 	bl	8005374 <LOGGER_SendFormatted>
      }
      
      // 첫 몇 바이트 확인 (디버깅용)
      if (uart_rx_length >= 4) {
 8005e0a:	4b13      	ldr	r3, [pc, #76]	@ (8005e58 <USER_UART_IDLECallback+0x10c>)
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d912      	bls.n	8005e3a <USER_UART_IDLECallback+0xee>
        LOG_DEBUG("[DMA] First 4 bytes: %02X %02X %02X %02X", 
 8005e14:	4b14      	ldr	r3, [pc, #80]	@ (8005e68 <USER_UART_IDLECallback+0x11c>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4b13      	ldr	r3, [pc, #76]	@ (8005e68 <USER_UART_IDLECallback+0x11c>)
 8005e1c:	785b      	ldrb	r3, [r3, #1]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	4b11      	ldr	r3, [pc, #68]	@ (8005e68 <USER_UART_IDLECallback+0x11c>)
 8005e22:	789b      	ldrb	r3, [r3, #2]
 8005e24:	461a      	mov	r2, r3
 8005e26:	4b10      	ldr	r3, [pc, #64]	@ (8005e68 <USER_UART_IDLECallback+0x11c>)
 8005e28:	78db      	ldrb	r3, [r3, #3]
 8005e2a:	9301      	str	r3, [sp, #4]
 8005e2c:	9200      	str	r2, [sp, #0]
 8005e2e:	4603      	mov	r3, r0
 8005e30:	460a      	mov	r2, r1
 8005e32:	490e      	ldr	r1, [pc, #56]	@ (8005e6c <USER_UART_IDLECallback+0x120>)
 8005e34:	2000      	movs	r0, #0
 8005e36:	f7ff fa9d 	bl	8005374 <LOGGER_SendFormatted>
                  rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
      }
      
      // DMA 중지 (일반 모드에서는 자동으로 완료됨)
      HAL_UART_DMAStop(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f009 f92d 	bl	800f09a <HAL_UART_DMAStop>
      // 다음 수신을 위해 즉시 재시작하지 않음 - uart_stm32.c에서 처리
    } else {
      LOG_DEBUG("[DMA] IDLE detected but no data");
    }
  }
}
 8005e40:	e003      	b.n	8005e4a <USER_UART_IDLECallback+0xfe>
      LOG_DEBUG("[DMA] IDLE detected but no data");
 8005e42:	490b      	ldr	r1, [pc, #44]	@ (8005e70 <USER_UART_IDLECallback+0x124>)
 8005e44:	2000      	movs	r0, #0
 8005e46:	f7ff fa95 	bl	8005374 <LOGGER_SendFormatted>
}
 8005e4a:	bf00      	nop
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	40011400 	.word	0x40011400
 8005e58:	2000247e 	.word	0x2000247e
 8005e5c:	2000247c 	.word	0x2000247c
 8005e60:	0801b87c 	.word	0x0801b87c
 8005e64:	0801b8bc 	.word	0x0801b8bc
 8005e68:	20002480 	.word	0x20002480
 8005e6c:	0801b8e4 	.word	0x0801b8e4
 8005e70:	0801b910 	.word	0x0801b910

08005e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005e74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005eac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005e78:	f7ff f9fc 	bl	8005274 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005e7c:	480c      	ldr	r0, [pc, #48]	@ (8005eb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005e7e:	490d      	ldr	r1, [pc, #52]	@ (8005eb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005e80:	4a0d      	ldr	r2, [pc, #52]	@ (8005eb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e84:	e002      	b.n	8005e8c <LoopCopyDataInit>

08005e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e8a:	3304      	adds	r3, #4

08005e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e90:	d3f9      	bcc.n	8005e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e92:	4a0a      	ldr	r2, [pc, #40]	@ (8005ebc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005e94:	4c0a      	ldr	r4, [pc, #40]	@ (8005ec0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e98:	e001      	b.n	8005e9e <LoopFillZerobss>

08005e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e9c:	3204      	adds	r2, #4

08005e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ea0:	d3fb      	bcc.n	8005e9a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005ea2:	f011 fc97 	bl	80177d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ea6:	f7fb ffb5 	bl	8001e14 <main>
  bx  lr    
 8005eaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005eac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005eb4:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8005eb8:	0801baa4 	.word	0x0801baa4
  ldr r2, =_sbss
 8005ebc:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8005ec0:	20013150 	.word	0x20013150

08005ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ec4:	e7fe      	b.n	8005ec4 <ADC_IRQHandler>

08005ec6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005eca:	2003      	movs	r0, #3
 8005ecc:	f000 fb91 	bl	80065f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	f7ff f84b 	bl	8004f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ed6:	f7fd ffad 	bl	8003e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ee4:	4b06      	ldr	r3, [pc, #24]	@ (8005f00 <HAL_IncTick+0x20>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	4b06      	ldr	r3, [pc, #24]	@ (8005f04 <HAL_IncTick+0x24>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4413      	add	r3, r2
 8005ef0:	4a04      	ldr	r2, [pc, #16]	@ (8005f04 <HAL_IncTick+0x24>)
 8005ef2:	6013      	str	r3, [r2, #0]
}
 8005ef4:	bf00      	nop
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	2000006c 	.word	0x2000006c
 8005f04:	20002684 	.word	0x20002684

08005f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8005f0c:	4b03      	ldr	r3, [pc, #12]	@ (8005f1c <HAL_GetTick+0x14>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	20002684 	.word	0x20002684

08005f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f28:	f7ff ffee 	bl	8005f08 <HAL_GetTick>
 8005f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f38:	d005      	beq.n	8005f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f64 <HAL_Delay+0x44>)
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4413      	add	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005f46:	bf00      	nop
 8005f48:	f7ff ffde 	bl	8005f08 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d8f7      	bhi.n	8005f48 <HAL_Delay+0x28>
  {
  }
}
 8005f58:	bf00      	nop
 8005f5a:	bf00      	nop
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	2000006c 	.word	0x2000006c

08005f68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e031      	b.n	8005fe2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d109      	bne.n	8005f9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fd ff7c 	bl	8003e84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9e:	f003 0310 	and.w	r3, r3, #16
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d116      	bne.n	8005fd4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005faa:	4b10      	ldr	r3, [pc, #64]	@ (8005fec <HAL_ADC_Init+0x84>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	f043 0202 	orr.w	r2, r3, #2
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f974 	bl	80062a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc6:	f023 0303 	bic.w	r3, r3, #3
 8005fca:	f043 0201 	orr.w	r2, r3, #1
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	641a      	str	r2, [r3, #64]	@ 0x40
 8005fd2:	e001      	b.n	8005fd8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	ffffeefd 	.word	0xffffeefd

08005ff0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_ADC_ConfigChannel+0x1c>
 8006008:	2302      	movs	r3, #2
 800600a:	e13a      	b.n	8006282 <HAL_ADC_ConfigChannel+0x292>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b09      	cmp	r3, #9
 800601a:	d93a      	bls.n	8006092 <HAL_ADC_ConfigChannel+0xa2>
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006024:	d035      	beq.n	8006092 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68d9      	ldr	r1, [r3, #12]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	b29b      	uxth	r3, r3
 8006032:	461a      	mov	r2, r3
 8006034:	4613      	mov	r3, r2
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	4413      	add	r3, r2
 800603a:	3b1e      	subs	r3, #30
 800603c:	2207      	movs	r2, #7
 800603e:	fa02 f303 	lsl.w	r3, r2, r3
 8006042:	43da      	mvns	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	400a      	ands	r2, r1
 800604a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a8f      	ldr	r2, [pc, #572]	@ (8006290 <HAL_ADC_ConfigChannel+0x2a0>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d10a      	bne.n	800606c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68d9      	ldr	r1, [r3, #12]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	061a      	lsls	r2, r3, #24
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800606a:	e039      	b.n	80060e0 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68d9      	ldr	r1, [r3, #12]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	4618      	mov	r0, r3
 800607e:	4603      	mov	r3, r0
 8006080:	005b      	lsls	r3, r3, #1
 8006082:	4403      	add	r3, r0
 8006084:	3b1e      	subs	r3, #30
 8006086:	409a      	lsls	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006090:	e026      	b.n	80060e0 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6919      	ldr	r1, [r3, #16]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	461a      	mov	r2, r3
 80060a0:	4613      	mov	r3, r2
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	4413      	add	r3, r2
 80060a6:	f003 031f 	and.w	r3, r3, #31
 80060aa:	2207      	movs	r2, #7
 80060ac:	fa02 f303 	lsl.w	r3, r2, r3
 80060b0:	43da      	mvns	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	400a      	ands	r2, r1
 80060b8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6919      	ldr	r1, [r3, #16]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	4618      	mov	r0, r3
 80060cc:	4603      	mov	r3, r0
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	4403      	add	r3, r0
 80060d2:	f003 031f 	and.w	r3, r3, #31
 80060d6:	409a      	lsls	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2b06      	cmp	r3, #6
 80060e6:	d824      	bhi.n	8006132 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	3b05      	subs	r3, #5
 80060fa:	221f      	movs	r2, #31
 80060fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006100:	43da      	mvns	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	400a      	ands	r2, r1
 8006108:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	b29b      	uxth	r3, r3
 8006116:	4618      	mov	r0, r3
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	3b05      	subs	r3, #5
 8006124:	fa00 f203 	lsl.w	r2, r0, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	635a      	str	r2, [r3, #52]	@ 0x34
 8006130:	e04c      	b.n	80061cc <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	2b0c      	cmp	r3, #12
 8006138:	d824      	bhi.n	8006184 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	3b23      	subs	r3, #35	@ 0x23
 800614c:	221f      	movs	r2, #31
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	43da      	mvns	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	400a      	ands	r2, r1
 800615a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	b29b      	uxth	r3, r3
 8006168:	4618      	mov	r0, r3
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	4613      	mov	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	3b23      	subs	r3, #35	@ 0x23
 8006176:	fa00 f203 	lsl.w	r2, r0, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	631a      	str	r2, [r3, #48]	@ 0x30
 8006182:	e023      	b.n	80061cc <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	3b41      	subs	r3, #65	@ 0x41
 8006196:	221f      	movs	r2, #31
 8006198:	fa02 f303 	lsl.w	r3, r2, r3
 800619c:	43da      	mvns	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	400a      	ands	r2, r1
 80061a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	4618      	mov	r0, r3
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	4613      	mov	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	3b41      	subs	r3, #65	@ 0x41
 80061c0:	fa00 f203 	lsl.w	r2, r0, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a30      	ldr	r2, [pc, #192]	@ (8006294 <HAL_ADC_ConfigChannel+0x2a4>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d10a      	bne.n	80061ec <HAL_ADC_ConfigChannel+0x1fc>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061de:	d105      	bne.n	80061ec <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80061e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006298 <HAL_ADC_ConfigChannel+0x2a8>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	4a2c      	ldr	r2, [pc, #176]	@ (8006298 <HAL_ADC_ConfigChannel+0x2a8>)
 80061e6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80061ea:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a28      	ldr	r2, [pc, #160]	@ (8006294 <HAL_ADC_ConfigChannel+0x2a4>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d10f      	bne.n	8006216 <HAL_ADC_ConfigChannel+0x226>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b12      	cmp	r3, #18
 80061fc:	d10b      	bne.n	8006216 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80061fe:	4b26      	ldr	r3, [pc, #152]	@ (8006298 <HAL_ADC_ConfigChannel+0x2a8>)
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	4a25      	ldr	r2, [pc, #148]	@ (8006298 <HAL_ADC_ConfigChannel+0x2a8>)
 8006204:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006208:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800620a:	4b23      	ldr	r3, [pc, #140]	@ (8006298 <HAL_ADC_ConfigChannel+0x2a8>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	4a22      	ldr	r2, [pc, #136]	@ (8006298 <HAL_ADC_ConfigChannel+0x2a8>)
 8006210:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006214:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a1e      	ldr	r2, [pc, #120]	@ (8006294 <HAL_ADC_ConfigChannel+0x2a4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d12b      	bne.n	8006278 <HAL_ADC_ConfigChannel+0x288>
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a1a      	ldr	r2, [pc, #104]	@ (8006290 <HAL_ADC_ConfigChannel+0x2a0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d003      	beq.n	8006232 <HAL_ADC_ConfigChannel+0x242>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b11      	cmp	r3, #17
 8006230:	d122      	bne.n	8006278 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8006232:	4b19      	ldr	r3, [pc, #100]	@ (8006298 <HAL_ADC_ConfigChannel+0x2a8>)
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	4a18      	ldr	r2, [pc, #96]	@ (8006298 <HAL_ADC_ConfigChannel+0x2a8>)
 8006238:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800623c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800623e:	4b16      	ldr	r3, [pc, #88]	@ (8006298 <HAL_ADC_ConfigChannel+0x2a8>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	4a15      	ldr	r2, [pc, #84]	@ (8006298 <HAL_ADC_ConfigChannel+0x2a8>)
 8006244:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006248:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a10      	ldr	r2, [pc, #64]	@ (8006290 <HAL_ADC_ConfigChannel+0x2a0>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d111      	bne.n	8006278 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006254:	4b11      	ldr	r3, [pc, #68]	@ (800629c <HAL_ADC_ConfigChannel+0x2ac>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a11      	ldr	r2, [pc, #68]	@ (80062a0 <HAL_ADC_ConfigChannel+0x2b0>)
 800625a:	fba2 2303 	umull	r2, r3, r2, r3
 800625e:	0c9a      	lsrs	r2, r3, #18
 8006260:	4613      	mov	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800626a:	e002      	b.n	8006272 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3b01      	subs	r3, #1
 8006270:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1f9      	bne.n	800626c <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	10000012 	.word	0x10000012
 8006294:	40012000 	.word	0x40012000
 8006298:	40012300 	.word	0x40012300
 800629c:	2000001c 	.word	0x2000001c
 80062a0:	431bde83 	.word	0x431bde83

080062a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80062ac:	4b78      	ldr	r3, [pc, #480]	@ (8006490 <ADC_Init+0x1ec>)
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	4a77      	ldr	r2, [pc, #476]	@ (8006490 <ADC_Init+0x1ec>)
 80062b2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80062b6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80062b8:	4b75      	ldr	r3, [pc, #468]	@ (8006490 <ADC_Init+0x1ec>)
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	4973      	ldr	r1, [pc, #460]	@ (8006490 <ADC_Init+0x1ec>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6859      	ldr	r1, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	021a      	lsls	r2, r3, #8
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80062f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6859      	ldr	r1, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	430a      	orrs	r2, r1
 800630a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800631a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6899      	ldr	r1, [r3, #8]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68da      	ldr	r2, [r3, #12]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006332:	4a58      	ldr	r2, [pc, #352]	@ (8006494 <ADC_Init+0x1f0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d022      	beq.n	800637e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006346:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6899      	ldr	r1, [r3, #8]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006368:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6899      	ldr	r1, [r3, #8]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	609a      	str	r2, [r3, #8]
 800637c:	e00f      	b.n	800639e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800638c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800639c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689a      	ldr	r2, [r3, #8]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0202 	bic.w	r2, r2, #2
 80063ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6899      	ldr	r1, [r3, #8]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	005a      	lsls	r2, r3, #1
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01b      	beq.n	8006404 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80063ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6859      	ldr	r1, [r3, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f6:	3b01      	subs	r3, #1
 80063f8:	035a      	lsls	r2, r3, #13
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	605a      	str	r2, [r3, #4]
 8006402:	e007      	b.n	8006414 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006412:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006422:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	3b01      	subs	r3, #1
 8006430:	051a      	lsls	r2, r3, #20
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006448:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6899      	ldr	r1, [r3, #8]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006456:	025a      	lsls	r2, r3, #9
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689a      	ldr	r2, [r3, #8]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800646e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6899      	ldr	r1, [r3, #8]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	029a      	lsls	r2, r3, #10
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	609a      	str	r2, [r3, #8]
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	40012300 	.word	0x40012300
 8006494:	0f000001 	.word	0x0f000001

08006498 <__NVIC_SetPriorityGrouping>:
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064a8:	4b0b      	ldr	r3, [pc, #44]	@ (80064d8 <__NVIC_SetPriorityGrouping+0x40>)
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80064b4:	4013      	ands	r3, r2
 80064b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80064c0:	4b06      	ldr	r3, [pc, #24]	@ (80064dc <__NVIC_SetPriorityGrouping+0x44>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064c6:	4a04      	ldr	r2, [pc, #16]	@ (80064d8 <__NVIC_SetPriorityGrouping+0x40>)
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	60d3      	str	r3, [r2, #12]
}
 80064cc:	bf00      	nop
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	e000ed00 	.word	0xe000ed00
 80064dc:	05fa0000 	.word	0x05fa0000

080064e0 <__NVIC_GetPriorityGrouping>:
{
 80064e0:	b480      	push	{r7}
 80064e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064e4:	4b04      	ldr	r3, [pc, #16]	@ (80064f8 <__NVIC_GetPriorityGrouping+0x18>)
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	0a1b      	lsrs	r3, r3, #8
 80064ea:	f003 0307 	and.w	r3, r3, #7
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	e000ed00 	.word	0xe000ed00

080064fc <__NVIC_EnableIRQ>:
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	4603      	mov	r3, r0
 8006504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800650a:	2b00      	cmp	r3, #0
 800650c:	db0b      	blt.n	8006526 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800650e:	79fb      	ldrb	r3, [r7, #7]
 8006510:	f003 021f 	and.w	r2, r3, #31
 8006514:	4907      	ldr	r1, [pc, #28]	@ (8006534 <__NVIC_EnableIRQ+0x38>)
 8006516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800651a:	095b      	lsrs	r3, r3, #5
 800651c:	2001      	movs	r0, #1
 800651e:	fa00 f202 	lsl.w	r2, r0, r2
 8006522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	e000e100 	.word	0xe000e100

08006538 <__NVIC_SetPriority>:
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	4603      	mov	r3, r0
 8006540:	6039      	str	r1, [r7, #0]
 8006542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006548:	2b00      	cmp	r3, #0
 800654a:	db0a      	blt.n	8006562 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	b2da      	uxtb	r2, r3
 8006550:	490c      	ldr	r1, [pc, #48]	@ (8006584 <__NVIC_SetPriority+0x4c>)
 8006552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006556:	0112      	lsls	r2, r2, #4
 8006558:	b2d2      	uxtb	r2, r2
 800655a:	440b      	add	r3, r1
 800655c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006560:	e00a      	b.n	8006578 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	b2da      	uxtb	r2, r3
 8006566:	4908      	ldr	r1, [pc, #32]	@ (8006588 <__NVIC_SetPriority+0x50>)
 8006568:	79fb      	ldrb	r3, [r7, #7]
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	3b04      	subs	r3, #4
 8006570:	0112      	lsls	r2, r2, #4
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	440b      	add	r3, r1
 8006576:	761a      	strb	r2, [r3, #24]
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr
 8006584:	e000e100 	.word	0xe000e100
 8006588:	e000ed00 	.word	0xe000ed00

0800658c <NVIC_EncodePriority>:
{
 800658c:	b480      	push	{r7}
 800658e:	b089      	sub	sp, #36	@ 0x24
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f003 0307 	and.w	r3, r3, #7
 800659e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	f1c3 0307 	rsb	r3, r3, #7
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	bf28      	it	cs
 80065aa:	2304      	movcs	r3, #4
 80065ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	3304      	adds	r3, #4
 80065b2:	2b06      	cmp	r3, #6
 80065b4:	d902      	bls.n	80065bc <NVIC_EncodePriority+0x30>
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	3b03      	subs	r3, #3
 80065ba:	e000      	b.n	80065be <NVIC_EncodePriority+0x32>
 80065bc:	2300      	movs	r3, #0
 80065be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065c0:	f04f 32ff 	mov.w	r2, #4294967295
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ca:	43da      	mvns	r2, r3
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	401a      	ands	r2, r3
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065d4:	f04f 31ff 	mov.w	r1, #4294967295
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	fa01 f303 	lsl.w	r3, r1, r3
 80065de:	43d9      	mvns	r1, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065e4:	4313      	orrs	r3, r2
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3724      	adds	r7, #36	@ 0x24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b082      	sub	sp, #8
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff ff4c 	bl	8006498 <__NVIC_SetPriorityGrouping>
}
 8006600:	bf00      	nop
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	4603      	mov	r3, r0
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
 8006614:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006616:	2300      	movs	r3, #0
 8006618:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800661a:	f7ff ff61 	bl	80064e0 <__NVIC_GetPriorityGrouping>
 800661e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	68b9      	ldr	r1, [r7, #8]
 8006624:	6978      	ldr	r0, [r7, #20]
 8006626:	f7ff ffb1 	bl	800658c <NVIC_EncodePriority>
 800662a:	4602      	mov	r2, r0
 800662c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006630:	4611      	mov	r1, r2
 8006632:	4618      	mov	r0, r3
 8006634:	f7ff ff80 	bl	8006538 <__NVIC_SetPriority>
}
 8006638:	bf00      	nop
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	4603      	mov	r3, r0
 8006648:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800664a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800664e:	4618      	mov	r0, r3
 8006650:	f7ff ff54 	bl	80064fc <__NVIC_EnableIRQ>
}
 8006654:	bf00      	nop
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e054      	b.n	8006718 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	7f5b      	ldrb	r3, [r3, #29]
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	d105      	bne.n	8006684 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7fd fc5a 	bl	8003f38 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	791b      	ldrb	r3, [r3, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10c      	bne.n	80066ac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a22      	ldr	r2, [pc, #136]	@ (8006720 <HAL_CRC_Init+0xc4>)
 8006698:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f022 0218 	bic.w	r2, r2, #24
 80066a8:	609a      	str	r2, [r3, #8]
 80066aa:	e00c      	b.n	80066c6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6899      	ldr	r1, [r3, #8]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	461a      	mov	r2, r3
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f834 	bl	8006724 <HAL_CRCEx_Polynomial_Set>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e028      	b.n	8006718 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	795b      	ldrb	r3, [r3, #5]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d105      	bne.n	80066da <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f04f 32ff 	mov.w	r2, #4294967295
 80066d6:	611a      	str	r2, [r3, #16]
 80066d8:	e004      	b.n	80066e4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	6912      	ldr	r2, [r2, #16]
 80066e2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	695a      	ldr	r2, [r3, #20]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	699a      	ldr	r2, [r3, #24]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	04c11db7 	.word	0x04c11db7

08006724 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006730:	2300      	movs	r3, #0
 8006732:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006734:	231f      	movs	r3, #31
 8006736:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d102      	bne.n	8006748 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	75fb      	strb	r3, [r7, #23]
 8006746:	e063      	b.n	8006810 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006748:	bf00      	nop
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	1e5a      	subs	r2, r3, #1
 800674e:	613a      	str	r2, [r7, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d009      	beq.n	8006768 <HAL_CRCEx_Polynomial_Set+0x44>
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	f003 031f 	and.w	r3, r3, #31
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	fa22 f303 	lsr.w	r3, r2, r3
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	d0f0      	beq.n	800674a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b18      	cmp	r3, #24
 800676c:	d846      	bhi.n	80067fc <HAL_CRCEx_Polynomial_Set+0xd8>
 800676e:	a201      	add	r2, pc, #4	@ (adr r2, 8006774 <HAL_CRCEx_Polynomial_Set+0x50>)
 8006770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006774:	08006803 	.word	0x08006803
 8006778:	080067fd 	.word	0x080067fd
 800677c:	080067fd 	.word	0x080067fd
 8006780:	080067fd 	.word	0x080067fd
 8006784:	080067fd 	.word	0x080067fd
 8006788:	080067fd 	.word	0x080067fd
 800678c:	080067fd 	.word	0x080067fd
 8006790:	080067fd 	.word	0x080067fd
 8006794:	080067f1 	.word	0x080067f1
 8006798:	080067fd 	.word	0x080067fd
 800679c:	080067fd 	.word	0x080067fd
 80067a0:	080067fd 	.word	0x080067fd
 80067a4:	080067fd 	.word	0x080067fd
 80067a8:	080067fd 	.word	0x080067fd
 80067ac:	080067fd 	.word	0x080067fd
 80067b0:	080067fd 	.word	0x080067fd
 80067b4:	080067e5 	.word	0x080067e5
 80067b8:	080067fd 	.word	0x080067fd
 80067bc:	080067fd 	.word	0x080067fd
 80067c0:	080067fd 	.word	0x080067fd
 80067c4:	080067fd 	.word	0x080067fd
 80067c8:	080067fd 	.word	0x080067fd
 80067cc:	080067fd 	.word	0x080067fd
 80067d0:	080067fd 	.word	0x080067fd
 80067d4:	080067d9 	.word	0x080067d9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	2b06      	cmp	r3, #6
 80067dc:	d913      	bls.n	8006806 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80067e2:	e010      	b.n	8006806 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	2b07      	cmp	r3, #7
 80067e8:	d90f      	bls.n	800680a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80067ee:	e00c      	b.n	800680a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	2b0f      	cmp	r3, #15
 80067f4:	d90b      	bls.n	800680e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80067fa:	e008      	b.n	800680e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	75fb      	strb	r3, [r7, #23]
        break;
 8006800:	e006      	b.n	8006810 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006802:	bf00      	nop
 8006804:	e004      	b.n	8006810 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006806:	bf00      	nop
 8006808:	e002      	b.n	8006810 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800680a:	bf00      	nop
 800680c:	e000      	b.n	8006810 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800680e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8006810:	7dfb      	ldrb	r3, [r7, #23]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10d      	bne.n	8006832 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f023 0118 	bic.w	r1, r3, #24
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	430a      	orrs	r2, r1
 8006830:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006832:	7dfb      	ldrb	r3, [r7, #23]
}
 8006834:	4618      	mov	r0, r3
 8006836:	371c      	adds	r7, #28
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e069      	b.n	8006926 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d102      	bne.n	8006864 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7fd fb8a 	bl	8003f78 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6819      	ldr	r1, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	4b2a      	ldr	r3, [pc, #168]	@ (8006930 <HAL_DCMI_Init+0xf0>)
 8006886:	400b      	ands	r3, r1
 8006888:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6819      	ldr	r1, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800689e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80068aa:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80068b6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068bc:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80068c2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80068ce:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	430a      	orrs	r2, r1
 80068d6:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	2b10      	cmp	r3, #16
 80068de:	d112      	bne.n	8006906 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	7f1b      	ldrb	r3, [r3, #28]
 80068e4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	7f5b      	ldrb	r3, [r3, #29]
 80068ea:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80068ec:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	7f9b      	ldrb	r3, [r3, #30]
 80068f2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80068f4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	7fdb      	ldrb	r3, [r3, #31]
 80068fc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006902:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006904:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f042 021e 	orr.w	r2, r2, #30
 8006914:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	ffe0f007 	.word	0xffe0f007

08006934 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006940:	f7ff fae2 	bl	8005f08 <HAL_GetTick>
 8006944:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d101      	bne.n	8006950 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e099      	b.n	8006a84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f022 0201 	bic.w	r2, r2, #1
 800696e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006970:	e00f      	b.n	8006992 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006972:	f7ff fac9 	bl	8005f08 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b05      	cmp	r3, #5
 800697e:	d908      	bls.n	8006992 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2220      	movs	r2, #32
 8006984:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2203      	movs	r2, #3
 800698a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e078      	b.n	8006a84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1e8      	bne.n	8006972 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4b38      	ldr	r3, [pc, #224]	@ (8006a8c <HAL_DMA_Init+0x158>)
 80069ac:	4013      	ands	r3, r2
 80069ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80069be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e8:	2b04      	cmp	r3, #4
 80069ea:	d107      	bne.n	80069fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f4:	4313      	orrs	r3, r2
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f023 0307 	bic.w	r3, r3, #7
 8006a12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	d117      	bne.n	8006a56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00e      	beq.n	8006a56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fb73 	bl	8007124 <DMA_CheckFifoParam>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d008      	beq.n	8006a56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2240      	movs	r2, #64	@ 0x40
 8006a48:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006a52:	2301      	movs	r3, #1
 8006a54:	e016      	b.n	8006a84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fb2a 	bl	80070b8 <DMA_CalcBaseAndBitshift>
 8006a64:	4603      	mov	r3, r0
 8006a66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a6c:	223f      	movs	r2, #63	@ 0x3f
 8006a6e:	409a      	lsls	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	f010803f 	.word	0xf010803f

08006a90 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d101      	bne.n	8006aa2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e050      	b.n	8006b44 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d101      	bne.n	8006ab2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006aae:	2302      	movs	r3, #2
 8006ab0:	e048      	b.n	8006b44 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 0201 	bic.w	r2, r2, #1
 8006ac0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2221      	movs	r2, #33	@ 0x21
 8006af0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fae0 	bl	80070b8 <DMA_CalcBaseAndBitshift>
 8006af8:	4603      	mov	r3, r0
 8006afa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b00:	223f      	movs	r2, #63	@ 0x3f
 8006b02:	409a      	lsls	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
 8006b58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d101      	bne.n	8006b72 <HAL_DMA_Start_IT+0x26>
 8006b6e:	2302      	movs	r3, #2
 8006b70:	e048      	b.n	8006c04 <HAL_DMA_Start_IT+0xb8>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d137      	bne.n	8006bf6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2202      	movs	r2, #2
 8006b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	68b9      	ldr	r1, [r7, #8]
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f000 fa5e 	bl	800705c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ba4:	223f      	movs	r2, #63	@ 0x3f
 8006ba6:	409a      	lsls	r2, r3
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0216 	orr.w	r2, r2, #22
 8006bba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	695a      	ldr	r2, [r3, #20]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006bca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d007      	beq.n	8006be4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f042 0208 	orr.w	r2, r2, #8
 8006be2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f042 0201 	orr.w	r2, r2, #1
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	e005      	b.n	8006c02 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006bfe:	2302      	movs	r3, #2
 8006c00:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006c1a:	f7ff f975 	bl	8005f08 <HAL_GetTick>
 8006c1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d008      	beq.n	8006c3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2280      	movs	r2, #128	@ 0x80
 8006c30:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e052      	b.n	8006ce4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0216 	bic.w	r2, r2, #22
 8006c4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	695a      	ldr	r2, [r3, #20]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d103      	bne.n	8006c6e <HAL_DMA_Abort+0x62>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d007      	beq.n	8006c7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 0208 	bic.w	r2, r2, #8
 8006c7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f022 0201 	bic.w	r2, r2, #1
 8006c8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c8e:	e013      	b.n	8006cb8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c90:	f7ff f93a 	bl	8005f08 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b05      	cmp	r3, #5
 8006c9c:	d90c      	bls.n	8006cb8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2220      	movs	r2, #32
 8006ca2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2203      	movs	r2, #3
 8006ca8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e015      	b.n	8006ce4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1e4      	bne.n	8006c90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cca:	223f      	movs	r2, #63	@ 0x3f
 8006ccc:	409a      	lsls	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d004      	beq.n	8006d0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2280      	movs	r2, #128	@ 0x80
 8006d04:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e00c      	b.n	8006d24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2205      	movs	r2, #5
 8006d0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f022 0201 	bic.w	r2, r2, #1
 8006d20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006d3c:	4b8e      	ldr	r3, [pc, #568]	@ (8006f78 <HAL_DMA_IRQHandler+0x248>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a8e      	ldr	r2, [pc, #568]	@ (8006f7c <HAL_DMA_IRQHandler+0x24c>)
 8006d42:	fba2 2303 	umull	r2, r3, r2, r3
 8006d46:	0a9b      	lsrs	r3, r3, #10
 8006d48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d5a:	2208      	movs	r2, #8
 8006d5c:	409a      	lsls	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	4013      	ands	r3, r2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d01a      	beq.n	8006d9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d013      	beq.n	8006d9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f022 0204 	bic.w	r2, r2, #4
 8006d82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d88:	2208      	movs	r2, #8
 8006d8a:	409a      	lsls	r2, r3
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d94:	f043 0201 	orr.w	r2, r3, #1
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006da0:	2201      	movs	r2, #1
 8006da2:	409a      	lsls	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4013      	ands	r3, r2
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d012      	beq.n	8006dd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00b      	beq.n	8006dd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	409a      	lsls	r2, r3
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dca:	f043 0202 	orr.w	r2, r3, #2
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dd6:	2204      	movs	r2, #4
 8006dd8:	409a      	lsls	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	4013      	ands	r3, r2
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d012      	beq.n	8006e08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00b      	beq.n	8006e08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006df4:	2204      	movs	r2, #4
 8006df6:	409a      	lsls	r2, r3
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e00:	f043 0204 	orr.w	r2, r3, #4
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e0c:	2210      	movs	r2, #16
 8006e0e:	409a      	lsls	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4013      	ands	r3, r2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d043      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0308 	and.w	r3, r3, #8
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d03c      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e2a:	2210      	movs	r2, #16
 8006e2c:	409a      	lsls	r2, r3
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d018      	beq.n	8006e72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d108      	bne.n	8006e60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d024      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	4798      	blx	r3
 8006e5e:	e01f      	b.n	8006ea0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d01b      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	4798      	blx	r3
 8006e70:	e016      	b.n	8006ea0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d107      	bne.n	8006e90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0208 	bic.w	r2, r2, #8
 8006e8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d003      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	409a      	lsls	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 808f 	beq.w	8006fd0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0310 	and.w	r3, r3, #16
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 8087 	beq.w	8006fd0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	409a      	lsls	r2, r3
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b05      	cmp	r3, #5
 8006ed8:	d136      	bne.n	8006f48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f022 0216 	bic.w	r2, r2, #22
 8006ee8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	695a      	ldr	r2, [r3, #20]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ef8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d103      	bne.n	8006f0a <HAL_DMA_IRQHandler+0x1da>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d007      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f022 0208 	bic.w	r2, r2, #8
 8006f18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f1e:	223f      	movs	r2, #63	@ 0x3f
 8006f20:	409a      	lsls	r2, r3
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d07e      	beq.n	800703c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	4798      	blx	r3
        }
        return;
 8006f46:	e079      	b.n	800703c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d01d      	beq.n	8006f92 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10d      	bne.n	8006f80 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d031      	beq.n	8006fd0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	4798      	blx	r3
 8006f74:	e02c      	b.n	8006fd0 <HAL_DMA_IRQHandler+0x2a0>
 8006f76:	bf00      	nop
 8006f78:	2000001c 	.word	0x2000001c
 8006f7c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d023      	beq.n	8006fd0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	4798      	blx	r3
 8006f90:	e01e      	b.n	8006fd0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10f      	bne.n	8006fc0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0210 	bic.w	r2, r2, #16
 8006fae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d003      	beq.n	8006fd0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d032      	beq.n	800703e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d022      	beq.n	800702a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2205      	movs	r2, #5
 8006fe8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 0201 	bic.w	r2, r2, #1
 8006ffa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	3301      	adds	r3, #1
 8007000:	60bb      	str	r3, [r7, #8]
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	429a      	cmp	r2, r3
 8007006:	d307      	bcc.n	8007018 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1f2      	bne.n	8006ffc <HAL_DMA_IRQHandler+0x2cc>
 8007016:	e000      	b.n	800701a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007018:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800702e:	2b00      	cmp	r3, #0
 8007030:	d005      	beq.n	800703e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	4798      	blx	r3
 800703a:	e000      	b.n	800703e <HAL_DMA_IRQHandler+0x30e>
        return;
 800703c:	bf00      	nop
    }
  }
}
 800703e:	3718      	adds	r7, #24
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8007050:	4618      	mov	r0, r3
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007078:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	2b40      	cmp	r3, #64	@ 0x40
 8007088:	d108      	bne.n	800709c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800709a:	e007      	b.n	80070ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	60da      	str	r2, [r3, #12]
}
 80070ac:	bf00      	nop
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	3b10      	subs	r3, #16
 80070c8:	4a13      	ldr	r2, [pc, #76]	@ (8007118 <DMA_CalcBaseAndBitshift+0x60>)
 80070ca:	fba2 2303 	umull	r2, r3, r2, r3
 80070ce:	091b      	lsrs	r3, r3, #4
 80070d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80070d2:	4a12      	ldr	r2, [pc, #72]	@ (800711c <DMA_CalcBaseAndBitshift+0x64>)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4413      	add	r3, r2
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d908      	bls.n	80070f8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007120 <DMA_CalcBaseAndBitshift+0x68>)
 80070ee:	4013      	ands	r3, r2
 80070f0:	1d1a      	adds	r2, r3, #4
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80070f6:	e006      	b.n	8007106 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	461a      	mov	r2, r3
 80070fe:	4b08      	ldr	r3, [pc, #32]	@ (8007120 <DMA_CalcBaseAndBitshift+0x68>)
 8007100:	4013      	ands	r3, r2
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800710a:	4618      	mov	r0, r3
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	aaaaaaab 	.word	0xaaaaaaab
 800711c:	0801b9a4 	.word	0x0801b9a4
 8007120:	fffffc00 	.word	0xfffffc00

08007124 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007134:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d11f      	bne.n	800717e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	2b03      	cmp	r3, #3
 8007142:	d856      	bhi.n	80071f2 <DMA_CheckFifoParam+0xce>
 8007144:	a201      	add	r2, pc, #4	@ (adr r2, 800714c <DMA_CheckFifoParam+0x28>)
 8007146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714a:	bf00      	nop
 800714c:	0800715d 	.word	0x0800715d
 8007150:	0800716f 	.word	0x0800716f
 8007154:	0800715d 	.word	0x0800715d
 8007158:	080071f3 	.word	0x080071f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007160:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d046      	beq.n	80071f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800716c:	e043      	b.n	80071f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007172:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007176:	d140      	bne.n	80071fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800717c:	e03d      	b.n	80071fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007186:	d121      	bne.n	80071cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2b03      	cmp	r3, #3
 800718c:	d837      	bhi.n	80071fe <DMA_CheckFifoParam+0xda>
 800718e:	a201      	add	r2, pc, #4	@ (adr r2, 8007194 <DMA_CheckFifoParam+0x70>)
 8007190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007194:	080071a5 	.word	0x080071a5
 8007198:	080071ab 	.word	0x080071ab
 800719c:	080071a5 	.word	0x080071a5
 80071a0:	080071bd 	.word	0x080071bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	73fb      	strb	r3, [r7, #15]
      break;
 80071a8:	e030      	b.n	800720c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d025      	beq.n	8007202 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071ba:	e022      	b.n	8007202 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80071c4:	d11f      	bne.n	8007206 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80071ca:	e01c      	b.n	8007206 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d903      	bls.n	80071da <DMA_CheckFifoParam+0xb6>
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b03      	cmp	r3, #3
 80071d6:	d003      	beq.n	80071e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80071d8:	e018      	b.n	800720c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	73fb      	strb	r3, [r7, #15]
      break;
 80071de:	e015      	b.n	800720c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00e      	beq.n	800720a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	73fb      	strb	r3, [r7, #15]
      break;
 80071f0:	e00b      	b.n	800720a <DMA_CheckFifoParam+0xe6>
      break;
 80071f2:	bf00      	nop
 80071f4:	e00a      	b.n	800720c <DMA_CheckFifoParam+0xe8>
      break;
 80071f6:	bf00      	nop
 80071f8:	e008      	b.n	800720c <DMA_CheckFifoParam+0xe8>
      break;
 80071fa:	bf00      	nop
 80071fc:	e006      	b.n	800720c <DMA_CheckFifoParam+0xe8>
      break;
 80071fe:	bf00      	nop
 8007200:	e004      	b.n	800720c <DMA_CheckFifoParam+0xe8>
      break;
 8007202:	bf00      	nop
 8007204:	e002      	b.n	800720c <DMA_CheckFifoParam+0xe8>
      break;   
 8007206:	bf00      	nop
 8007208:	e000      	b.n	800720c <DMA_CheckFifoParam+0xe8>
      break;
 800720a:	bf00      	nop
    }
  } 
  
  return status; 
 800720c:	7bfb      	ldrb	r3, [r7, #15]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop

0800721c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e039      	b.n	80072a2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b00      	cmp	r3, #0
 8007238:	d106      	bne.n	8007248 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7fc ff56 	bl	80040f4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2202      	movs	r2, #2
 800724c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685a      	ldr	r2, [r3, #4]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800726c:	f023 0107 	bic.w	r1, r3, #7
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007282:	4b0a      	ldr	r3, [pc, #40]	@ (80072ac <HAL_DMA2D_Init+0x90>)
 8007284:	4013      	ands	r3, r2
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	68d1      	ldr	r1, [r2, #12]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	6812      	ldr	r2, [r2, #0]
 800728e:	430b      	orrs	r3, r1
 8007290:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	ffffc000 	.word	0xffffc000

080072b0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d026      	beq.n	8007320 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d021      	beq.n	8007320 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80072ea:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f0:	f043 0201 	orr.w	r2, r3, #1
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2201      	movs	r2, #1
 80072fe:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2204      	movs	r2, #4
 8007304:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d003      	beq.n	8007320 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f003 0320 	and.w	r3, r3, #32
 8007326:	2b00      	cmp	r3, #0
 8007328:	d026      	beq.n	8007378 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d021      	beq.n	8007378 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007342:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2220      	movs	r2, #32
 800734a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007350:	f043 0202 	orr.w	r2, r3, #2
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2204      	movs	r2, #4
 800735c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f003 0308 	and.w	r3, r3, #8
 800737e:	2b00      	cmp	r3, #0
 8007380:	d026      	beq.n	80073d0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007388:	2b00      	cmp	r3, #0
 800738a:	d021      	beq.n	80073d0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800739a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2208      	movs	r2, #8
 80073a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073a8:	f043 0204 	orr.w	r2, r3, #4
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2204      	movs	r2, #4
 80073b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	695b      	ldr	r3, [r3, #20]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d003      	beq.n	80073d0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f003 0304 	and.w	r3, r3, #4
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d013      	beq.n	8007402 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00e      	beq.n	8007402 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073f2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2204      	movs	r2, #4
 80073fa:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f853 	bl	80074a8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	2b00      	cmp	r3, #0
 800740a:	d024      	beq.n	8007456 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007412:	2b00      	cmp	r3, #0
 8007414:	d01f      	beq.n	8007456 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007424:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2202      	movs	r2, #2
 800742c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f003 0310 	and.w	r3, r3, #16
 800745c:	2b00      	cmp	r3, #0
 800745e:	d01f      	beq.n	80074a0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d01a      	beq.n	80074a0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007478:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2210      	movs	r2, #16
 8007480:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f80e 	bl	80074bc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80074a0:	bf00      	nop
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b087      	sub	sp, #28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d101      	bne.n	80074f0 <HAL_DMA2D_ConfigLayer+0x20>
 80074ec:	2302      	movs	r3, #2
 80074ee:	e079      	b.n	80075e4 <HAL_DMA2D_ConfigLayer+0x114>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	011b      	lsls	r3, r3, #4
 8007504:	3318      	adds	r3, #24
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	4413      	add	r3, r2
 800750a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	685a      	ldr	r2, [r3, #4]
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	041b      	lsls	r3, r3, #16
 8007516:	4313      	orrs	r3, r2
 8007518:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800751a:	4b35      	ldr	r3, [pc, #212]	@ (80075f0 <HAL_DMA2D_ConfigLayer+0x120>)
 800751c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	2b0a      	cmp	r3, #10
 8007524:	d003      	beq.n	800752e <HAL_DMA2D_ConfigLayer+0x5e>
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	2b09      	cmp	r3, #9
 800752c:	d107      	bne.n	800753e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	4313      	orrs	r3, r2
 800753a:	617b      	str	r3, [r7, #20]
 800753c:	e005      	b.n	800754a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	061b      	lsls	r3, r3, #24
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	4313      	orrs	r3, r2
 8007548:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d120      	bne.n	8007592 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	43db      	mvns	r3, r3
 800755a:	ea02 0103 	and.w	r1, r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	430a      	orrs	r2, r1
 8007566:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	6812      	ldr	r2, [r2, #0]
 8007570:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	2b0a      	cmp	r3, #10
 8007578:	d003      	beq.n	8007582 <HAL_DMA2D_ConfigLayer+0xb2>
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	2b09      	cmp	r3, #9
 8007580:	d127      	bne.n	80075d2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	68da      	ldr	r2, [r3, #12]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800758e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007590:	e01f      	b.n	80075d2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	69da      	ldr	r2, [r3, #28]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	43db      	mvns	r3, r3
 800759c:	ea02 0103 	and.w	r1, r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	6812      	ldr	r2, [r2, #0]
 80075b2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	2b0a      	cmp	r3, #10
 80075ba:	d003      	beq.n	80075c4 <HAL_DMA2D_ConfigLayer+0xf4>
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	2b09      	cmp	r3, #9
 80075c2:	d106      	bne.n	80075d2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	68da      	ldr	r2, [r3, #12]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80075d0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	371c      	adds	r7, #28
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	ff03000f 	.word	0xff03000f

080075f4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e086      	b.n	8007714 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800760c:	2b00      	cmp	r3, #0
 800760e:	d106      	bne.n	800761e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2220      	movs	r2, #32
 8007614:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7fc fd91 	bl	8004140 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800761e:	4b3f      	ldr	r3, [pc, #252]	@ (800771c <HAL_ETH_Init+0x128>)
 8007620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007622:	4a3e      	ldr	r2, [pc, #248]	@ (800771c <HAL_ETH_Init+0x128>)
 8007624:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007628:	6453      	str	r3, [r2, #68]	@ 0x44
 800762a:	4b3c      	ldr	r3, [pc, #240]	@ (800771c <HAL_ETH_Init+0x128>)
 800762c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800762e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007632:	60bb      	str	r3, [r7, #8]
 8007634:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8007636:	4b3a      	ldr	r3, [pc, #232]	@ (8007720 <HAL_ETH_Init+0x12c>)
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	4a39      	ldr	r2, [pc, #228]	@ (8007720 <HAL_ETH_Init+0x12c>)
 800763c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007640:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8007642:	4b37      	ldr	r3, [pc, #220]	@ (8007720 <HAL_ETH_Init+0x12c>)
 8007644:	685a      	ldr	r2, [r3, #4]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	4935      	ldr	r1, [pc, #212]	@ (8007720 <HAL_ETH_Init+0x12c>)
 800764c:	4313      	orrs	r3, r2
 800764e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8007650:	4b33      	ldr	r3, [pc, #204]	@ (8007720 <HAL_ETH_Init+0x12c>)
 8007652:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	6812      	ldr	r2, [r2, #0]
 8007662:	f043 0301 	orr.w	r3, r3, #1
 8007666:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800766a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800766c:	f7fe fc4c 	bl	8005f08 <HAL_GetTick>
 8007670:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007672:	e011      	b.n	8007698 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8007674:	f7fe fc48 	bl	8005f08 <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007682:	d909      	bls.n	8007698 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2204      	movs	r2, #4
 8007688:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	22e0      	movs	r2, #224	@ 0xe0
 8007690:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e03d      	b.n	8007714 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1e4      	bne.n	8007674 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f97a 	bl	80079a4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fa25 	bl	8007b00 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fa7b 	bl	8007bb2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	461a      	mov	r2, r3
 80076c2:	2100      	movs	r1, #0
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f9e3 	bl	8007a90 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80076d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007724 <HAL_ETH_Init+0x130>)
 80076e8:	430b      	orrs	r3, r1
 80076ea:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80076fe:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2210      	movs	r2, #16
 800770e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	40023800 	.word	0x40023800
 8007720:	40013800 	.word	0x40013800
 8007724:	00020060 	.word	0x00020060

08007728 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	4b53      	ldr	r3, [pc, #332]	@ (800788c <ETH_SetMACConfig+0x164>)
 800773e:	4013      	ands	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	7b9b      	ldrb	r3, [r3, #14]
 8007746:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	7c12      	ldrb	r2, [r2, #16]
 800774c:	2a00      	cmp	r2, #0
 800774e:	d102      	bne.n	8007756 <ETH_SetMACConfig+0x2e>
 8007750:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007754:	e000      	b.n	8007758 <ETH_SetMACConfig+0x30>
 8007756:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007758:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800775a:	683a      	ldr	r2, [r7, #0]
 800775c:	7c52      	ldrb	r2, [r2, #17]
 800775e:	2a00      	cmp	r2, #0
 8007760:	d102      	bne.n	8007768 <ETH_SetMACConfig+0x40>
 8007762:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007766:	e000      	b.n	800776a <ETH_SetMACConfig+0x42>
 8007768:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800776a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007770:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	7fdb      	ldrb	r3, [r3, #31]
 8007776:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8007778:	431a      	orrs	r2, r3
                        macconf->Speed |
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800777e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	7f92      	ldrb	r2, [r2, #30]
 8007784:	2a00      	cmp	r2, #0
 8007786:	d102      	bne.n	800778e <ETH_SetMACConfig+0x66>
 8007788:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800778c:	e000      	b.n	8007790 <ETH_SetMACConfig+0x68>
 800778e:	2200      	movs	r2, #0
                        macconf->Speed |
 8007790:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	7f1b      	ldrb	r3, [r3, #28]
 8007796:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007798:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800779e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	791b      	ldrb	r3, [r3, #4]
 80077a4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80077a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80077a8:	683a      	ldr	r2, [r7, #0]
 80077aa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80077ae:	2a00      	cmp	r2, #0
 80077b0:	d102      	bne.n	80077b8 <ETH_SetMACConfig+0x90>
 80077b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077b6:	e000      	b.n	80077ba <ETH_SetMACConfig+0x92>
 80077b8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80077ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	7bdb      	ldrb	r3, [r3, #15]
 80077c0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80077c2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80077c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077d0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80077d2:	4313      	orrs	r3, r2
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80077ea:	2001      	movs	r0, #1
 80077ec:	f7fe fb98 	bl	8005f20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8007806:	4013      	ands	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800780e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8007816:	2a00      	cmp	r2, #0
 8007818:	d101      	bne.n	800781e <ETH_SetMACConfig+0xf6>
 800781a:	2280      	movs	r2, #128	@ 0x80
 800781c:	e000      	b.n	8007820 <ETH_SetMACConfig+0xf8>
 800781e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007820:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007826:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800782e:	2a01      	cmp	r2, #1
 8007830:	d101      	bne.n	8007836 <ETH_SetMACConfig+0x10e>
 8007832:	2208      	movs	r2, #8
 8007834:	e000      	b.n	8007838 <ETH_SetMACConfig+0x110>
 8007836:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8007838:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8007840:	2a01      	cmp	r2, #1
 8007842:	d101      	bne.n	8007848 <ETH_SetMACConfig+0x120>
 8007844:	2204      	movs	r2, #4
 8007846:	e000      	b.n	800784a <ETH_SetMACConfig+0x122>
 8007848:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800784a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8007852:	2a01      	cmp	r2, #1
 8007854:	d101      	bne.n	800785a <ETH_SetMACConfig+0x132>
 8007856:	2202      	movs	r2, #2
 8007858:	e000      	b.n	800785c <ETH_SetMACConfig+0x134>
 800785a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800785c:	4313      	orrs	r3, r2
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	4313      	orrs	r3, r2
 8007862:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007874:	2001      	movs	r0, #1
 8007876:	f7fe fb53 	bl	8005f20 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	619a      	str	r2, [r3, #24]
}
 8007882:	bf00      	nop
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	fd20810f 	.word	0xfd20810f

08007890 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	4b3d      	ldr	r3, [pc, #244]	@ (80079a0 <ETH_SetDMAConfig+0x110>)
 80078aa:	4013      	ands	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	7b1b      	ldrb	r3, [r3, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d102      	bne.n	80078bc <ETH_SetDMAConfig+0x2c>
 80078b6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80078ba:	e000      	b.n	80078be <ETH_SetDMAConfig+0x2e>
 80078bc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	7b5b      	ldrb	r3, [r3, #13]
 80078c2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80078c4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	7f52      	ldrb	r2, [r2, #29]
 80078ca:	2a00      	cmp	r2, #0
 80078cc:	d102      	bne.n	80078d4 <ETH_SetDMAConfig+0x44>
 80078ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80078d2:	e000      	b.n	80078d6 <ETH_SetDMAConfig+0x46>
 80078d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80078d6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	7b9b      	ldrb	r3, [r3, #14]
 80078dc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80078de:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80078e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	7f1b      	ldrb	r3, [r3, #28]
 80078ea:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80078ec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	7f9b      	ldrb	r3, [r3, #30]
 80078f2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80078f4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80078fa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007902:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007904:	4313      	orrs	r3, r2
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	4313      	orrs	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007914:	461a      	mov	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007926:	2001      	movs	r0, #1
 8007928:	f7fe fafa 	bl	8005f20 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007934:	461a      	mov	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	791b      	ldrb	r3, [r3, #4]
 800793e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007944:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800794a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007950:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007958:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800795a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007960:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007962:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007968:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	6812      	ldr	r2, [r2, #0]
 800796e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007972:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007976:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007984:	2001      	movs	r0, #1
 8007986:	f7fe facb 	bl	8005f20 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007992:	461a      	mov	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6013      	str	r3, [r2, #0]
}
 8007998:	bf00      	nop
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	f8de3f23 	.word	0xf8de3f23

080079a4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b0a6      	sub	sp, #152	@ 0x98
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80079ac:	2301      	movs	r3, #1
 80079ae:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80079b2:	2301      	movs	r3, #1
 80079b4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80079b8:	2300      	movs	r3, #0
 80079ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80079bc:	2300      	movs	r3, #0
 80079be:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80079c2:	2301      	movs	r3, #1
 80079c4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80079c8:	2300      	movs	r3, #0
 80079ca:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80079ce:	2301      	movs	r3, #1
 80079d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80079d4:	2301      	movs	r3, #1
 80079d6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80079da:	2300      	movs	r3, #0
 80079dc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80079e0:	2300      	movs	r3, #0
 80079e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80079e6:	2300      	movs	r3, #0
 80079e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80079ea:	2300      	movs	r3, #0
 80079ec:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80079f0:	2300      	movs	r3, #0
 80079f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80079f4:	2300      	movs	r3, #0
 80079f6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80079fa:	2300      	movs	r3, #0
 80079fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007a00:	2300      	movs	r3, #0
 8007a02:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007a06:	2300      	movs	r3, #0
 8007a08:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007a0c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007a10:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007a12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007a1e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7ff fe7f 	bl	8007728 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8007a32:	2301      	movs	r3, #1
 8007a34:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8007a40:	2300      	movs	r3, #0
 8007a42:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8007a46:	2300      	movs	r3, #0
 8007a48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8007a50:	2301      	movs	r3, #1
 8007a52:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007a56:	2301      	movs	r3, #1
 8007a58:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007a5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007a5e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007a60:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007a64:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007a66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007a6a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8007a76:	2300      	movs	r3, #0
 8007a78:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007a7a:	f107 0308 	add.w	r3, r7, #8
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7ff ff05 	bl	8007890 <ETH_SetDMAConfig>
}
 8007a86:	bf00      	nop
 8007a88:	3798      	adds	r7, #152	@ 0x98
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
	...

08007a90 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b087      	sub	sp, #28
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3305      	adds	r3, #5
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	021b      	lsls	r3, r3, #8
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	3204      	adds	r2, #4
 8007aa8:	7812      	ldrb	r2, [r2, #0]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	4b11      	ldr	r3, [pc, #68]	@ (8007af8 <ETH_MACAddressConfig+0x68>)
 8007ab2:	4413      	add	r3, r2
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	3303      	adds	r3, #3
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	061a      	lsls	r2, r3, #24
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3302      	adds	r3, #2
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	041b      	lsls	r3, r3, #16
 8007aca:	431a      	orrs	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	021b      	lsls	r3, r3, #8
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	7812      	ldrb	r2, [r2, #0]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	4b06      	ldr	r3, [pc, #24]	@ (8007afc <ETH_MACAddressConfig+0x6c>)
 8007ae2:	4413      	add	r3, r2
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	6013      	str	r3, [r2, #0]
}
 8007aea:	bf00      	nop
 8007aec:	371c      	adds	r7, #28
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	40028040 	.word	0x40028040
 8007afc:	40028044 	.word	0x40028044

08007b00 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007b08:	2300      	movs	r3, #0
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	e03e      	b.n	8007b8c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68d9      	ldr	r1, [r3, #12]
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	4613      	mov	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	00db      	lsls	r3, r3, #3
 8007b1c:	440b      	add	r3, r1
 8007b1e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	2200      	movs	r2, #0
 8007b36:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007b38:	68b9      	ldr	r1, [r7, #8]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	3206      	adds	r2, #6
 8007b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d80c      	bhi.n	8007b70 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68d9      	ldr	r1, [r3, #12]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	1c5a      	adds	r2, r3, #1
 8007b5e:	4613      	mov	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	00db      	lsls	r3, r3, #3
 8007b66:	440b      	add	r3, r1
 8007b68:	461a      	mov	r2, r3
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	60da      	str	r2, [r3, #12]
 8007b6e:	e004      	b.n	8007b7a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	461a      	mov	r2, r3
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	d9bd      	bls.n	8007b0e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	68da      	ldr	r2, [r3, #12]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ba4:	611a      	str	r2, [r3, #16]
}
 8007ba6:	bf00      	nop
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b085      	sub	sp, #20
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	e048      	b.n	8007c52 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6919      	ldr	r1, [r3, #16]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4413      	add	r3, r2
 8007bcc:	00db      	lsls	r3, r3, #3
 8007bce:	440b      	add	r3, r1
 8007bd0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	2200      	movs	r2, #0
 8007be2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	2200      	movs	r2, #0
 8007be8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2200      	movs	r2, #0
 8007bee:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007bfc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007c16:	68b9      	ldr	r1, [r7, #8]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	3212      	adds	r2, #18
 8007c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d80c      	bhi.n	8007c42 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6919      	ldr	r1, [r3, #16]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	1c5a      	adds	r2, r3, #1
 8007c30:	4613      	mov	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	00db      	lsls	r3, r3, #3
 8007c38:	440b      	add	r3, r1
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	60da      	str	r2, [r3, #12]
 8007c40:	e004      	b.n	8007c4c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	461a      	mov	r2, r3
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	60fb      	str	r3, [r7, #12]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2b03      	cmp	r3, #3
 8007c56:	d9b3      	bls.n	8007bc0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	691a      	ldr	r2, [r3, #16]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c82:	60da      	str	r2, [r3, #12]
}
 8007c84:	bf00      	nop
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b089      	sub	sp, #36	@ 0x24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8007caa:	2300      	movs	r3, #0
 8007cac:	61fb      	str	r3, [r7, #28]
 8007cae:	e175      	b.n	8007f9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	f040 8164 	bne.w	8007f96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	f003 0303 	and.w	r3, r3, #3
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d005      	beq.n	8007ce6 <HAL_GPIO_Init+0x56>
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f003 0303 	and.w	r3, r3, #3
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d130      	bne.n	8007d48 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	005b      	lsls	r3, r3, #1
 8007cf0:	2203      	movs	r2, #3
 8007cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf6:	43db      	mvns	r3, r3
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	68da      	ldr	r2, [r3, #12]
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	005b      	lsls	r3, r3, #1
 8007d06:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0a:	69ba      	ldr	r2, [r7, #24]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	fa02 f303 	lsl.w	r3, r2, r3
 8007d24:	43db      	mvns	r3, r3
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	4013      	ands	r3, r2
 8007d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	091b      	lsrs	r3, r3, #4
 8007d32:	f003 0201 	and.w	r2, r3, #1
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	69ba      	ldr	r2, [r7, #24]
 8007d46:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f003 0303 	and.w	r3, r3, #3
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	d017      	beq.n	8007d84 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	005b      	lsls	r3, r3, #1
 8007d5e:	2203      	movs	r2, #3
 8007d60:	fa02 f303 	lsl.w	r3, r2, r3
 8007d64:	43db      	mvns	r3, r3
 8007d66:	69ba      	ldr	r2, [r7, #24]
 8007d68:	4013      	ands	r3, r2
 8007d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	689a      	ldr	r2, [r3, #8]
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	fa02 f303 	lsl.w	r3, r2, r3
 8007d78:	69ba      	ldr	r2, [r7, #24]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f003 0303 	and.w	r3, r3, #3
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d123      	bne.n	8007dd8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	08da      	lsrs	r2, r3, #3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	3208      	adds	r2, #8
 8007d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	f003 0307 	and.w	r3, r3, #7
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	220f      	movs	r2, #15
 8007da8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dac:	43db      	mvns	r3, r3
 8007dae:	69ba      	ldr	r2, [r7, #24]
 8007db0:	4013      	ands	r3, r2
 8007db2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	691a      	ldr	r2, [r3, #16]
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	f003 0307 	and.w	r3, r3, #7
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc4:	69ba      	ldr	r2, [r7, #24]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	08da      	lsrs	r2, r3, #3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	3208      	adds	r2, #8
 8007dd2:	69b9      	ldr	r1, [r7, #24]
 8007dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	005b      	lsls	r3, r3, #1
 8007de2:	2203      	movs	r2, #3
 8007de4:	fa02 f303 	lsl.w	r3, r2, r3
 8007de8:	43db      	mvns	r3, r3
 8007dea:	69ba      	ldr	r2, [r7, #24]
 8007dec:	4013      	ands	r3, r2
 8007dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f003 0203 	and.w	r2, r3, #3
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	005b      	lsls	r3, r3, #1
 8007dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007e00:	69ba      	ldr	r2, [r7, #24]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	69ba      	ldr	r2, [r7, #24]
 8007e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f000 80be 	beq.w	8007f96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e1a:	4b66      	ldr	r3, [pc, #408]	@ (8007fb4 <HAL_GPIO_Init+0x324>)
 8007e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e1e:	4a65      	ldr	r2, [pc, #404]	@ (8007fb4 <HAL_GPIO_Init+0x324>)
 8007e20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8007e26:	4b63      	ldr	r3, [pc, #396]	@ (8007fb4 <HAL_GPIO_Init+0x324>)
 8007e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007e32:	4a61      	ldr	r2, [pc, #388]	@ (8007fb8 <HAL_GPIO_Init+0x328>)
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	089b      	lsrs	r3, r3, #2
 8007e38:	3302      	adds	r3, #2
 8007e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	f003 0303 	and.w	r3, r3, #3
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	220f      	movs	r2, #15
 8007e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4e:	43db      	mvns	r3, r3
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	4013      	ands	r3, r2
 8007e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a58      	ldr	r2, [pc, #352]	@ (8007fbc <HAL_GPIO_Init+0x32c>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d037      	beq.n	8007ece <HAL_GPIO_Init+0x23e>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a57      	ldr	r2, [pc, #348]	@ (8007fc0 <HAL_GPIO_Init+0x330>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d031      	beq.n	8007eca <HAL_GPIO_Init+0x23a>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a56      	ldr	r2, [pc, #344]	@ (8007fc4 <HAL_GPIO_Init+0x334>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d02b      	beq.n	8007ec6 <HAL_GPIO_Init+0x236>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a55      	ldr	r2, [pc, #340]	@ (8007fc8 <HAL_GPIO_Init+0x338>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d025      	beq.n	8007ec2 <HAL_GPIO_Init+0x232>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a54      	ldr	r2, [pc, #336]	@ (8007fcc <HAL_GPIO_Init+0x33c>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d01f      	beq.n	8007ebe <HAL_GPIO_Init+0x22e>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a53      	ldr	r2, [pc, #332]	@ (8007fd0 <HAL_GPIO_Init+0x340>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d019      	beq.n	8007eba <HAL_GPIO_Init+0x22a>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a52      	ldr	r2, [pc, #328]	@ (8007fd4 <HAL_GPIO_Init+0x344>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d013      	beq.n	8007eb6 <HAL_GPIO_Init+0x226>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a51      	ldr	r2, [pc, #324]	@ (8007fd8 <HAL_GPIO_Init+0x348>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d00d      	beq.n	8007eb2 <HAL_GPIO_Init+0x222>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a50      	ldr	r2, [pc, #320]	@ (8007fdc <HAL_GPIO_Init+0x34c>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d007      	beq.n	8007eae <HAL_GPIO_Init+0x21e>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a4f      	ldr	r2, [pc, #316]	@ (8007fe0 <HAL_GPIO_Init+0x350>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d101      	bne.n	8007eaa <HAL_GPIO_Init+0x21a>
 8007ea6:	2309      	movs	r3, #9
 8007ea8:	e012      	b.n	8007ed0 <HAL_GPIO_Init+0x240>
 8007eaa:	230a      	movs	r3, #10
 8007eac:	e010      	b.n	8007ed0 <HAL_GPIO_Init+0x240>
 8007eae:	2308      	movs	r3, #8
 8007eb0:	e00e      	b.n	8007ed0 <HAL_GPIO_Init+0x240>
 8007eb2:	2307      	movs	r3, #7
 8007eb4:	e00c      	b.n	8007ed0 <HAL_GPIO_Init+0x240>
 8007eb6:	2306      	movs	r3, #6
 8007eb8:	e00a      	b.n	8007ed0 <HAL_GPIO_Init+0x240>
 8007eba:	2305      	movs	r3, #5
 8007ebc:	e008      	b.n	8007ed0 <HAL_GPIO_Init+0x240>
 8007ebe:	2304      	movs	r3, #4
 8007ec0:	e006      	b.n	8007ed0 <HAL_GPIO_Init+0x240>
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e004      	b.n	8007ed0 <HAL_GPIO_Init+0x240>
 8007ec6:	2302      	movs	r3, #2
 8007ec8:	e002      	b.n	8007ed0 <HAL_GPIO_Init+0x240>
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e000      	b.n	8007ed0 <HAL_GPIO_Init+0x240>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	69fa      	ldr	r2, [r7, #28]
 8007ed2:	f002 0203 	and.w	r2, r2, #3
 8007ed6:	0092      	lsls	r2, r2, #2
 8007ed8:	4093      	lsls	r3, r2
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007ee0:	4935      	ldr	r1, [pc, #212]	@ (8007fb8 <HAL_GPIO_Init+0x328>)
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	089b      	lsrs	r3, r3, #2
 8007ee6:	3302      	adds	r3, #2
 8007ee8:	69ba      	ldr	r2, [r7, #24]
 8007eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007eee:	4b3d      	ldr	r3, [pc, #244]	@ (8007fe4 <HAL_GPIO_Init+0x354>)
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	43db      	mvns	r3, r3
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	4013      	ands	r3, r2
 8007efc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007f0a:	69ba      	ldr	r2, [r7, #24]
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007f12:	4a34      	ldr	r2, [pc, #208]	@ (8007fe4 <HAL_GPIO_Init+0x354>)
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007f18:	4b32      	ldr	r3, [pc, #200]	@ (8007fe4 <HAL_GPIO_Init+0x354>)
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	43db      	mvns	r3, r3
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	4013      	ands	r3, r2
 8007f26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d003      	beq.n	8007f3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007f34:	69ba      	ldr	r2, [r7, #24]
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007f3c:	4a29      	ldr	r2, [pc, #164]	@ (8007fe4 <HAL_GPIO_Init+0x354>)
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007f42:	4b28      	ldr	r3, [pc, #160]	@ (8007fe4 <HAL_GPIO_Init+0x354>)
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	43db      	mvns	r3, r3
 8007f4c:	69ba      	ldr	r2, [r7, #24]
 8007f4e:	4013      	ands	r3, r2
 8007f50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d003      	beq.n	8007f66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007f66:	4a1f      	ldr	r2, [pc, #124]	@ (8007fe4 <HAL_GPIO_Init+0x354>)
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007fe4 <HAL_GPIO_Init+0x354>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	43db      	mvns	r3, r3
 8007f76:	69ba      	ldr	r2, [r7, #24]
 8007f78:	4013      	ands	r3, r2
 8007f7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d003      	beq.n	8007f90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007f90:	4a14      	ldr	r2, [pc, #80]	@ (8007fe4 <HAL_GPIO_Init+0x354>)
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	61fb      	str	r3, [r7, #28]
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	2b0f      	cmp	r3, #15
 8007fa0:	f67f ae86 	bls.w	8007cb0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop
 8007fa8:	3724      	adds	r7, #36	@ 0x24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	40023800 	.word	0x40023800
 8007fb8:	40013800 	.word	0x40013800
 8007fbc:	40020000 	.word	0x40020000
 8007fc0:	40020400 	.word	0x40020400
 8007fc4:	40020800 	.word	0x40020800
 8007fc8:	40020c00 	.word	0x40020c00
 8007fcc:	40021000 	.word	0x40021000
 8007fd0:	40021400 	.word	0x40021400
 8007fd4:	40021800 	.word	0x40021800
 8007fd8:	40021c00 	.word	0x40021c00
 8007fdc:	40022000 	.word	0x40022000
 8007fe0:	40022400 	.word	0x40022400
 8007fe4:	40013c00 	.word	0x40013c00

08007fe8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	691a      	ldr	r2, [r3, #16]
 8007ff8:	887b      	ldrh	r3, [r7, #2]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008000:	2301      	movs	r3, #1
 8008002:	73fb      	strb	r3, [r7, #15]
 8008004:	e001      	b.n	800800a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008006:	2300      	movs	r3, #0
 8008008:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800800a:	7bfb      	ldrb	r3, [r7, #15]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	807b      	strh	r3, [r7, #2]
 8008024:	4613      	mov	r3, r2
 8008026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008028:	787b      	ldrb	r3, [r7, #1]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d003      	beq.n	8008036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800802e:	887a      	ldrh	r2, [r7, #2]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008034:	e003      	b.n	800803e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008036:	887b      	ldrh	r3, [r7, #2]
 8008038:	041a      	lsls	r2, r3, #16
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	619a      	str	r2, [r3, #24]
}
 800803e:	bf00      	nop
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b086      	sub	sp, #24
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4618      	mov	r0, r3
 8008062:	f009 f951 	bl	8011308 <USB_GetMode>
 8008066:	4603      	mov	r3, r0
 8008068:	2b01      	cmp	r3, #1
 800806a:	f040 80fb 	bne.w	8008264 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4618      	mov	r0, r3
 8008074:	f009 f914 	bl	80112a0 <USB_ReadInterrupts>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	f000 80f1 	beq.w	8008262 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4618      	mov	r0, r3
 8008086:	f009 f90b 	bl	80112a0 <USB_ReadInterrupts>
 800808a:	4603      	mov	r3, r0
 800808c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008090:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008094:	d104      	bne.n	80080a0 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800809e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f009 f8fb 	bl	80112a0 <USB_ReadInterrupts>
 80080aa:	4603      	mov	r3, r0
 80080ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80080b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080b4:	d104      	bne.n	80080c0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80080be:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f009 f8eb 	bl	80112a0 <USB_ReadInterrupts>
 80080ca:	4603      	mov	r3, r0
 80080cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80080d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80080d4:	d104      	bne.n	80080e0 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80080de:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f009 f8db 	bl	80112a0 <USB_ReadInterrupts>
 80080ea:	4603      	mov	r3, r0
 80080ec:	f003 0302 	and.w	r3, r3, #2
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d103      	bne.n	80080fc <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2202      	movs	r2, #2
 80080fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4618      	mov	r0, r3
 8008102:	f009 f8cd 	bl	80112a0 <USB_ReadInterrupts>
 8008106:	4603      	mov	r3, r0
 8008108:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800810c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008110:	d120      	bne.n	8008154 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800811a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	2b00      	cmp	r3, #0
 800812a:	d113      	bne.n	8008154 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800812c:	2110      	movs	r1, #16
 800812e:	6938      	ldr	r0, [r7, #16]
 8008130:	f008 fffe 	bl	8011130 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8008134:	6938      	ldr	r0, [r7, #16]
 8008136:	f009 f82d 	bl	8011194 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	7a5b      	ldrb	r3, [r3, #9]
 800813e:	2b02      	cmp	r3, #2
 8008140:	d105      	bne.n	800814e <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2101      	movs	r1, #1
 8008148:	4618      	mov	r0, r3
 800814a:	f009 f8eb 	bl	8011324 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f00e ffd4 	bl	80170fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4618      	mov	r0, r3
 800815a:	f009 f8a1 	bl	80112a0 <USB_ReadInterrupts>
 800815e:	4603      	mov	r3, r0
 8008160:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008164:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008168:	d102      	bne.n	8008170 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f001 fca1 	bl	8009ab2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4618      	mov	r0, r3
 8008176:	f009 f893 	bl	80112a0 <USB_ReadInterrupts>
 800817a:	4603      	mov	r3, r0
 800817c:	f003 0308 	and.w	r3, r3, #8
 8008180:	2b08      	cmp	r3, #8
 8008182:	d106      	bne.n	8008192 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f00e ff9d 	bl	80170c4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2208      	movs	r2, #8
 8008190:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4618      	mov	r0, r3
 8008198:	f009 f882 	bl	80112a0 <USB_ReadInterrupts>
 800819c:	4603      	mov	r3, r0
 800819e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081a6:	d139      	bne.n	800821c <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f009 f8f6 	bl	801139e <USB_HC_ReadInterrupt>
 80081b2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80081b4:	2300      	movs	r3, #0
 80081b6:	617b      	str	r3, [r7, #20]
 80081b8:	e025      	b.n	8008206 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f003 030f 	and.w	r3, r3, #15
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	fa22 f303 	lsr.w	r3, r2, r3
 80081c6:	f003 0301 	and.w	r3, r3, #1
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d018      	beq.n	8008200 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	015a      	lsls	r2, r3, #5
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	4413      	add	r3, r2
 80081d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80081e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081e4:	d106      	bne.n	80081f4 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f859 	bl	80082a4 <HCD_HC_IN_IRQHandler>
 80081f2:	e005      	b.n	8008200 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	4619      	mov	r1, r3
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 febb 	bl	8008f76 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	3301      	adds	r3, #1
 8008204:	617b      	str	r3, [r7, #20]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	795b      	ldrb	r3, [r3, #5]
 800820a:	461a      	mov	r2, r3
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	4293      	cmp	r3, r2
 8008210:	d3d3      	bcc.n	80081ba <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800821a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4618      	mov	r0, r3
 8008222:	f009 f83d 	bl	80112a0 <USB_ReadInterrupts>
 8008226:	4603      	mov	r3, r0
 8008228:	f003 0310 	and.w	r3, r3, #16
 800822c:	2b10      	cmp	r3, #16
 800822e:	d101      	bne.n	8008234 <HAL_HCD_IRQHandler+0x1ea>
 8008230:	2301      	movs	r3, #1
 8008232:	e000      	b.n	8008236 <HAL_HCD_IRQHandler+0x1ec>
 8008234:	2300      	movs	r3, #0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d014      	beq.n	8008264 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	699a      	ldr	r2, [r3, #24]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f022 0210 	bic.w	r2, r2, #16
 8008248:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f001 fb52 	bl	80098f4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	699a      	ldr	r2, [r3, #24]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f042 0210 	orr.w	r2, r2, #16
 800825e:	619a      	str	r2, [r3, #24]
 8008260:	e000      	b.n	8008264 <HAL_HCD_IRQHandler+0x21a>
      return;
 8008262:	bf00      	nop
    }
  }
}
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b082      	sub	sp, #8
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8008278:	2b01      	cmp	r3, #1
 800827a:	d101      	bne.n	8008280 <HAL_HCD_Stop+0x16>
 800827c:	2302      	movs	r3, #2
 800827e:	e00d      	b.n	800829c <HAL_HCD_Stop+0x32>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4618      	mov	r0, r3
 800828e:	f009 f9b7 	bl	8011600 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	460b      	mov	r3, r1
 80082ae:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	78fa      	ldrb	r2, [r7, #3]
 80082c0:	4611      	mov	r1, r2
 80082c2:	4618      	mov	r0, r3
 80082c4:	f008 ffff 	bl	80112c6 <USB_ReadChInterrupts>
 80082c8:	4603      	mov	r3, r0
 80082ca:	f003 0304 	and.w	r3, r3, #4
 80082ce:	2b04      	cmp	r3, #4
 80082d0:	d11a      	bne.n	8008308 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80082d2:	78fb      	ldrb	r3, [r7, #3]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082de:	461a      	mov	r2, r3
 80082e0:	2304      	movs	r3, #4
 80082e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80082e4:	78fa      	ldrb	r2, [r7, #3]
 80082e6:	6879      	ldr	r1, [r7, #4]
 80082e8:	4613      	mov	r3, r2
 80082ea:	011b      	lsls	r3, r3, #4
 80082ec:	1a9b      	subs	r3, r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	440b      	add	r3, r1
 80082f2:	334d      	adds	r3, #77	@ 0x4d
 80082f4:	2207      	movs	r2, #7
 80082f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	78fa      	ldrb	r2, [r7, #3]
 80082fe:	4611      	mov	r1, r2
 8008300:	4618      	mov	r0, r3
 8008302:	f009 f85d 	bl	80113c0 <USB_HC_Halt>
 8008306:	e09e      	b.n	8008446 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	78fa      	ldrb	r2, [r7, #3]
 800830e:	4611      	mov	r1, r2
 8008310:	4618      	mov	r0, r3
 8008312:	f008 ffd8 	bl	80112c6 <USB_ReadChInterrupts>
 8008316:	4603      	mov	r3, r0
 8008318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800831c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008320:	d11b      	bne.n	800835a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8008322:	78fb      	ldrb	r3, [r7, #3]
 8008324:	015a      	lsls	r2, r3, #5
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	4413      	add	r3, r2
 800832a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800832e:	461a      	mov	r2, r3
 8008330:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008334:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8008336:	78fa      	ldrb	r2, [r7, #3]
 8008338:	6879      	ldr	r1, [r7, #4]
 800833a:	4613      	mov	r3, r2
 800833c:	011b      	lsls	r3, r3, #4
 800833e:	1a9b      	subs	r3, r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	440b      	add	r3, r1
 8008344:	334d      	adds	r3, #77	@ 0x4d
 8008346:	2208      	movs	r2, #8
 8008348:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	78fa      	ldrb	r2, [r7, #3]
 8008350:	4611      	mov	r1, r2
 8008352:	4618      	mov	r0, r3
 8008354:	f009 f834 	bl	80113c0 <USB_HC_Halt>
 8008358:	e075      	b.n	8008446 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	78fa      	ldrb	r2, [r7, #3]
 8008360:	4611      	mov	r1, r2
 8008362:	4618      	mov	r0, r3
 8008364:	f008 ffaf 	bl	80112c6 <USB_ReadChInterrupts>
 8008368:	4603      	mov	r3, r0
 800836a:	f003 0308 	and.w	r3, r3, #8
 800836e:	2b08      	cmp	r3, #8
 8008370:	d11a      	bne.n	80083a8 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8008372:	78fb      	ldrb	r3, [r7, #3]
 8008374:	015a      	lsls	r2, r3, #5
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	4413      	add	r3, r2
 800837a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800837e:	461a      	mov	r2, r3
 8008380:	2308      	movs	r3, #8
 8008382:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8008384:	78fa      	ldrb	r2, [r7, #3]
 8008386:	6879      	ldr	r1, [r7, #4]
 8008388:	4613      	mov	r3, r2
 800838a:	011b      	lsls	r3, r3, #4
 800838c:	1a9b      	subs	r3, r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	440b      	add	r3, r1
 8008392:	334d      	adds	r3, #77	@ 0x4d
 8008394:	2206      	movs	r2, #6
 8008396:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	78fa      	ldrb	r2, [r7, #3]
 800839e:	4611      	mov	r1, r2
 80083a0:	4618      	mov	r0, r3
 80083a2:	f009 f80d 	bl	80113c0 <USB_HC_Halt>
 80083a6:	e04e      	b.n	8008446 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	78fa      	ldrb	r2, [r7, #3]
 80083ae:	4611      	mov	r1, r2
 80083b0:	4618      	mov	r0, r3
 80083b2:	f008 ff88 	bl	80112c6 <USB_ReadChInterrupts>
 80083b6:	4603      	mov	r3, r0
 80083b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083c0:	d11b      	bne.n	80083fa <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80083c2:	78fb      	ldrb	r3, [r7, #3]
 80083c4:	015a      	lsls	r2, r3, #5
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083ce:	461a      	mov	r2, r3
 80083d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80083d6:	78fa      	ldrb	r2, [r7, #3]
 80083d8:	6879      	ldr	r1, [r7, #4]
 80083da:	4613      	mov	r3, r2
 80083dc:	011b      	lsls	r3, r3, #4
 80083de:	1a9b      	subs	r3, r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	440b      	add	r3, r1
 80083e4:	334d      	adds	r3, #77	@ 0x4d
 80083e6:	2209      	movs	r2, #9
 80083e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	78fa      	ldrb	r2, [r7, #3]
 80083f0:	4611      	mov	r1, r2
 80083f2:	4618      	mov	r0, r3
 80083f4:	f008 ffe4 	bl	80113c0 <USB_HC_Halt>
 80083f8:	e025      	b.n	8008446 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	78fa      	ldrb	r2, [r7, #3]
 8008400:	4611      	mov	r1, r2
 8008402:	4618      	mov	r0, r3
 8008404:	f008 ff5f 	bl	80112c6 <USB_ReadChInterrupts>
 8008408:	4603      	mov	r3, r0
 800840a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800840e:	2b80      	cmp	r3, #128	@ 0x80
 8008410:	d119      	bne.n	8008446 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8008412:	78fb      	ldrb	r3, [r7, #3]
 8008414:	015a      	lsls	r2, r3, #5
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	4413      	add	r3, r2
 800841a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800841e:	461a      	mov	r2, r3
 8008420:	2380      	movs	r3, #128	@ 0x80
 8008422:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008424:	78fa      	ldrb	r2, [r7, #3]
 8008426:	6879      	ldr	r1, [r7, #4]
 8008428:	4613      	mov	r3, r2
 800842a:	011b      	lsls	r3, r3, #4
 800842c:	1a9b      	subs	r3, r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	440b      	add	r3, r1
 8008432:	334d      	adds	r3, #77	@ 0x4d
 8008434:	2207      	movs	r2, #7
 8008436:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	78fa      	ldrb	r2, [r7, #3]
 800843e:	4611      	mov	r1, r2
 8008440:	4618      	mov	r0, r3
 8008442:	f008 ffbd 	bl	80113c0 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	78fa      	ldrb	r2, [r7, #3]
 800844c:	4611      	mov	r1, r2
 800844e:	4618      	mov	r0, r3
 8008450:	f008 ff39 	bl	80112c6 <USB_ReadChInterrupts>
 8008454:	4603      	mov	r3, r0
 8008456:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800845a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800845e:	d112      	bne.n	8008486 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	78fa      	ldrb	r2, [r7, #3]
 8008466:	4611      	mov	r1, r2
 8008468:	4618      	mov	r0, r3
 800846a:	f008 ffa9 	bl	80113c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800846e:	78fb      	ldrb	r3, [r7, #3]
 8008470:	015a      	lsls	r2, r3, #5
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	4413      	add	r3, r2
 8008476:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800847a:	461a      	mov	r2, r3
 800847c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008480:	6093      	str	r3, [r2, #8]
 8008482:	f000 bd75 	b.w	8008f70 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	78fa      	ldrb	r2, [r7, #3]
 800848c:	4611      	mov	r1, r2
 800848e:	4618      	mov	r0, r3
 8008490:	f008 ff19 	bl	80112c6 <USB_ReadChInterrupts>
 8008494:	4603      	mov	r3, r0
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	2b01      	cmp	r3, #1
 800849c:	f040 8128 	bne.w	80086f0 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80084a0:	78fb      	ldrb	r3, [r7, #3]
 80084a2:	015a      	lsls	r2, r3, #5
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	4413      	add	r3, r2
 80084a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084ac:	461a      	mov	r2, r3
 80084ae:	2320      	movs	r3, #32
 80084b0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80084b2:	78fa      	ldrb	r2, [r7, #3]
 80084b4:	6879      	ldr	r1, [r7, #4]
 80084b6:	4613      	mov	r3, r2
 80084b8:	011b      	lsls	r3, r3, #4
 80084ba:	1a9b      	subs	r3, r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	440b      	add	r3, r1
 80084c0:	331b      	adds	r3, #27
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d119      	bne.n	80084fc <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80084c8:	78fa      	ldrb	r2, [r7, #3]
 80084ca:	6879      	ldr	r1, [r7, #4]
 80084cc:	4613      	mov	r3, r2
 80084ce:	011b      	lsls	r3, r3, #4
 80084d0:	1a9b      	subs	r3, r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	440b      	add	r3, r1
 80084d6:	331b      	adds	r3, #27
 80084d8:	2200      	movs	r2, #0
 80084da:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80084dc:	78fb      	ldrb	r3, [r7, #3]
 80084de:	015a      	lsls	r2, r3, #5
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	4413      	add	r3, r2
 80084e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	78fa      	ldrb	r2, [r7, #3]
 80084ec:	0151      	lsls	r1, r2, #5
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	440a      	add	r2, r1
 80084f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084fa:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	799b      	ldrb	r3, [r3, #6]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d01b      	beq.n	800853c <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8008504:	78fa      	ldrb	r2, [r7, #3]
 8008506:	6879      	ldr	r1, [r7, #4]
 8008508:	4613      	mov	r3, r2
 800850a:	011b      	lsls	r3, r3, #4
 800850c:	1a9b      	subs	r3, r3, r2
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	440b      	add	r3, r1
 8008512:	3330      	adds	r3, #48	@ 0x30
 8008514:	6819      	ldr	r1, [r3, #0]
 8008516:	78fb      	ldrb	r3, [r7, #3]
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	4413      	add	r3, r2
 800851e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008528:	78fa      	ldrb	r2, [r7, #3]
 800852a:	1ac9      	subs	r1, r1, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	4613      	mov	r3, r2
 8008530:	011b      	lsls	r3, r3, #4
 8008532:	1a9b      	subs	r3, r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4403      	add	r3, r0
 8008538:	3338      	adds	r3, #56	@ 0x38
 800853a:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800853c:	78fa      	ldrb	r2, [r7, #3]
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	4613      	mov	r3, r2
 8008542:	011b      	lsls	r3, r3, #4
 8008544:	1a9b      	subs	r3, r3, r2
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	440b      	add	r3, r1
 800854a:	334d      	adds	r3, #77	@ 0x4d
 800854c:	2201      	movs	r2, #1
 800854e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8008550:	78fa      	ldrb	r2, [r7, #3]
 8008552:	6879      	ldr	r1, [r7, #4]
 8008554:	4613      	mov	r3, r2
 8008556:	011b      	lsls	r3, r3, #4
 8008558:	1a9b      	subs	r3, r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	440b      	add	r3, r1
 800855e:	3344      	adds	r3, #68	@ 0x44
 8008560:	2200      	movs	r2, #0
 8008562:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8008564:	78fb      	ldrb	r3, [r7, #3]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	4413      	add	r3, r2
 800856c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008570:	461a      	mov	r2, r3
 8008572:	2301      	movs	r3, #1
 8008574:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008576:	78fa      	ldrb	r2, [r7, #3]
 8008578:	6879      	ldr	r1, [r7, #4]
 800857a:	4613      	mov	r3, r2
 800857c:	011b      	lsls	r3, r3, #4
 800857e:	1a9b      	subs	r3, r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	440b      	add	r3, r1
 8008584:	3326      	adds	r3, #38	@ 0x26
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00a      	beq.n	80085a2 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800858c:	78fa      	ldrb	r2, [r7, #3]
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	4613      	mov	r3, r2
 8008592:	011b      	lsls	r3, r3, #4
 8008594:	1a9b      	subs	r3, r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	440b      	add	r3, r1
 800859a:	3326      	adds	r3, #38	@ 0x26
 800859c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d110      	bne.n	80085c4 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	78fa      	ldrb	r2, [r7, #3]
 80085a8:	4611      	mov	r1, r2
 80085aa:	4618      	mov	r0, r3
 80085ac:	f008 ff08 	bl	80113c0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80085b0:	78fb      	ldrb	r3, [r7, #3]
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085bc:	461a      	mov	r2, r3
 80085be:	2310      	movs	r3, #16
 80085c0:	6093      	str	r3, [r2, #8]
 80085c2:	e03d      	b.n	8008640 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80085c4:	78fa      	ldrb	r2, [r7, #3]
 80085c6:	6879      	ldr	r1, [r7, #4]
 80085c8:	4613      	mov	r3, r2
 80085ca:	011b      	lsls	r3, r3, #4
 80085cc:	1a9b      	subs	r3, r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	440b      	add	r3, r1
 80085d2:	3326      	adds	r3, #38	@ 0x26
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	d00a      	beq.n	80085f0 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80085da:	78fa      	ldrb	r2, [r7, #3]
 80085dc:	6879      	ldr	r1, [r7, #4]
 80085de:	4613      	mov	r3, r2
 80085e0:	011b      	lsls	r3, r3, #4
 80085e2:	1a9b      	subs	r3, r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	440b      	add	r3, r1
 80085e8:	3326      	adds	r3, #38	@ 0x26
 80085ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d127      	bne.n	8008640 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80085f0:	78fb      	ldrb	r3, [r7, #3]
 80085f2:	015a      	lsls	r2, r3, #5
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	78fa      	ldrb	r2, [r7, #3]
 8008600:	0151      	lsls	r1, r2, #5
 8008602:	693a      	ldr	r2, [r7, #16]
 8008604:	440a      	add	r2, r1
 8008606:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800860a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800860e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008610:	78fa      	ldrb	r2, [r7, #3]
 8008612:	6879      	ldr	r1, [r7, #4]
 8008614:	4613      	mov	r3, r2
 8008616:	011b      	lsls	r3, r3, #4
 8008618:	1a9b      	subs	r3, r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	440b      	add	r3, r1
 800861e:	334c      	adds	r3, #76	@ 0x4c
 8008620:	2201      	movs	r2, #1
 8008622:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008624:	78fa      	ldrb	r2, [r7, #3]
 8008626:	6879      	ldr	r1, [r7, #4]
 8008628:	4613      	mov	r3, r2
 800862a:	011b      	lsls	r3, r3, #4
 800862c:	1a9b      	subs	r3, r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	440b      	add	r3, r1
 8008632:	334c      	adds	r3, #76	@ 0x4c
 8008634:	781a      	ldrb	r2, [r3, #0]
 8008636:	78fb      	ldrb	r3, [r7, #3]
 8008638:	4619      	mov	r1, r3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f00e fd6c 	bl	8017118 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	799b      	ldrb	r3, [r3, #6]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d13b      	bne.n	80086c0 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8008648:	78fa      	ldrb	r2, [r7, #3]
 800864a:	6879      	ldr	r1, [r7, #4]
 800864c:	4613      	mov	r3, r2
 800864e:	011b      	lsls	r3, r3, #4
 8008650:	1a9b      	subs	r3, r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	440b      	add	r3, r1
 8008656:	3338      	adds	r3, #56	@ 0x38
 8008658:	6819      	ldr	r1, [r3, #0]
 800865a:	78fa      	ldrb	r2, [r7, #3]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	4613      	mov	r3, r2
 8008660:	011b      	lsls	r3, r3, #4
 8008662:	1a9b      	subs	r3, r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	4403      	add	r3, r0
 8008668:	3328      	adds	r3, #40	@ 0x28
 800866a:	881b      	ldrh	r3, [r3, #0]
 800866c:	440b      	add	r3, r1
 800866e:	1e59      	subs	r1, r3, #1
 8008670:	78fa      	ldrb	r2, [r7, #3]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	4613      	mov	r3, r2
 8008676:	011b      	lsls	r3, r3, #4
 8008678:	1a9b      	subs	r3, r3, r2
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	4403      	add	r3, r0
 800867e:	3328      	adds	r3, #40	@ 0x28
 8008680:	881b      	ldrh	r3, [r3, #0]
 8008682:	fbb1 f3f3 	udiv	r3, r1, r3
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 8470 	beq.w	8008f70 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8008690:	78fa      	ldrb	r2, [r7, #3]
 8008692:	6879      	ldr	r1, [r7, #4]
 8008694:	4613      	mov	r3, r2
 8008696:	011b      	lsls	r3, r3, #4
 8008698:	1a9b      	subs	r3, r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	440b      	add	r3, r1
 800869e:	333c      	adds	r3, #60	@ 0x3c
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	78fa      	ldrb	r2, [r7, #3]
 80086a4:	f083 0301 	eor.w	r3, r3, #1
 80086a8:	b2d8      	uxtb	r0, r3
 80086aa:	6879      	ldr	r1, [r7, #4]
 80086ac:	4613      	mov	r3, r2
 80086ae:	011b      	lsls	r3, r3, #4
 80086b0:	1a9b      	subs	r3, r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	440b      	add	r3, r1
 80086b6:	333c      	adds	r3, #60	@ 0x3c
 80086b8:	4602      	mov	r2, r0
 80086ba:	701a      	strb	r2, [r3, #0]
 80086bc:	f000 bc58 	b.w	8008f70 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80086c0:	78fa      	ldrb	r2, [r7, #3]
 80086c2:	6879      	ldr	r1, [r7, #4]
 80086c4:	4613      	mov	r3, r2
 80086c6:	011b      	lsls	r3, r3, #4
 80086c8:	1a9b      	subs	r3, r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	440b      	add	r3, r1
 80086ce:	333c      	adds	r3, #60	@ 0x3c
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	78fa      	ldrb	r2, [r7, #3]
 80086d4:	f083 0301 	eor.w	r3, r3, #1
 80086d8:	b2d8      	uxtb	r0, r3
 80086da:	6879      	ldr	r1, [r7, #4]
 80086dc:	4613      	mov	r3, r2
 80086de:	011b      	lsls	r3, r3, #4
 80086e0:	1a9b      	subs	r3, r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	440b      	add	r3, r1
 80086e6:	333c      	adds	r3, #60	@ 0x3c
 80086e8:	4602      	mov	r2, r0
 80086ea:	701a      	strb	r2, [r3, #0]
 80086ec:	f000 bc40 	b.w	8008f70 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	78fa      	ldrb	r2, [r7, #3]
 80086f6:	4611      	mov	r1, r2
 80086f8:	4618      	mov	r0, r3
 80086fa:	f008 fde4 	bl	80112c6 <USB_ReadChInterrupts>
 80086fe:	4603      	mov	r3, r0
 8008700:	f003 0320 	and.w	r3, r3, #32
 8008704:	2b20      	cmp	r3, #32
 8008706:	d131      	bne.n	800876c <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008708:	78fb      	ldrb	r3, [r7, #3]
 800870a:	015a      	lsls	r2, r3, #5
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	4413      	add	r3, r2
 8008710:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008714:	461a      	mov	r2, r3
 8008716:	2320      	movs	r3, #32
 8008718:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800871a:	78fa      	ldrb	r2, [r7, #3]
 800871c:	6879      	ldr	r1, [r7, #4]
 800871e:	4613      	mov	r3, r2
 8008720:	011b      	lsls	r3, r3, #4
 8008722:	1a9b      	subs	r3, r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	440b      	add	r3, r1
 8008728:	331a      	adds	r3, #26
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	2b01      	cmp	r3, #1
 800872e:	f040 841f 	bne.w	8008f70 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8008732:	78fa      	ldrb	r2, [r7, #3]
 8008734:	6879      	ldr	r1, [r7, #4]
 8008736:	4613      	mov	r3, r2
 8008738:	011b      	lsls	r3, r3, #4
 800873a:	1a9b      	subs	r3, r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	440b      	add	r3, r1
 8008740:	331b      	adds	r3, #27
 8008742:	2201      	movs	r2, #1
 8008744:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8008746:	78fa      	ldrb	r2, [r7, #3]
 8008748:	6879      	ldr	r1, [r7, #4]
 800874a:	4613      	mov	r3, r2
 800874c:	011b      	lsls	r3, r3, #4
 800874e:	1a9b      	subs	r3, r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	440b      	add	r3, r1
 8008754:	334d      	adds	r3, #77	@ 0x4d
 8008756:	2203      	movs	r2, #3
 8008758:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	78fa      	ldrb	r2, [r7, #3]
 8008760:	4611      	mov	r1, r2
 8008762:	4618      	mov	r0, r3
 8008764:	f008 fe2c 	bl	80113c0 <USB_HC_Halt>
 8008768:	f000 bc02 	b.w	8008f70 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	78fa      	ldrb	r2, [r7, #3]
 8008772:	4611      	mov	r1, r2
 8008774:	4618      	mov	r0, r3
 8008776:	f008 fda6 	bl	80112c6 <USB_ReadChInterrupts>
 800877a:	4603      	mov	r3, r0
 800877c:	f003 0302 	and.w	r3, r3, #2
 8008780:	2b02      	cmp	r3, #2
 8008782:	f040 8305 	bne.w	8008d90 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008786:	78fb      	ldrb	r3, [r7, #3]
 8008788:	015a      	lsls	r2, r3, #5
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	4413      	add	r3, r2
 800878e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008792:	461a      	mov	r2, r3
 8008794:	2302      	movs	r3, #2
 8008796:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8008798:	78fa      	ldrb	r2, [r7, #3]
 800879a:	6879      	ldr	r1, [r7, #4]
 800879c:	4613      	mov	r3, r2
 800879e:	011b      	lsls	r3, r3, #4
 80087a0:	1a9b      	subs	r3, r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	440b      	add	r3, r1
 80087a6:	334d      	adds	r3, #77	@ 0x4d
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d114      	bne.n	80087d8 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80087ae:	78fa      	ldrb	r2, [r7, #3]
 80087b0:	6879      	ldr	r1, [r7, #4]
 80087b2:	4613      	mov	r3, r2
 80087b4:	011b      	lsls	r3, r3, #4
 80087b6:	1a9b      	subs	r3, r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	440b      	add	r3, r1
 80087bc:	334d      	adds	r3, #77	@ 0x4d
 80087be:	2202      	movs	r2, #2
 80087c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80087c2:	78fa      	ldrb	r2, [r7, #3]
 80087c4:	6879      	ldr	r1, [r7, #4]
 80087c6:	4613      	mov	r3, r2
 80087c8:	011b      	lsls	r3, r3, #4
 80087ca:	1a9b      	subs	r3, r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	440b      	add	r3, r1
 80087d0:	334c      	adds	r3, #76	@ 0x4c
 80087d2:	2201      	movs	r2, #1
 80087d4:	701a      	strb	r2, [r3, #0]
 80087d6:	e2cc      	b.n	8008d72 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80087d8:	78fa      	ldrb	r2, [r7, #3]
 80087da:	6879      	ldr	r1, [r7, #4]
 80087dc:	4613      	mov	r3, r2
 80087de:	011b      	lsls	r3, r3, #4
 80087e0:	1a9b      	subs	r3, r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	440b      	add	r3, r1
 80087e6:	334d      	adds	r3, #77	@ 0x4d
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	2b06      	cmp	r3, #6
 80087ec:	d114      	bne.n	8008818 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80087ee:	78fa      	ldrb	r2, [r7, #3]
 80087f0:	6879      	ldr	r1, [r7, #4]
 80087f2:	4613      	mov	r3, r2
 80087f4:	011b      	lsls	r3, r3, #4
 80087f6:	1a9b      	subs	r3, r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	440b      	add	r3, r1
 80087fc:	334d      	adds	r3, #77	@ 0x4d
 80087fe:	2202      	movs	r2, #2
 8008800:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8008802:	78fa      	ldrb	r2, [r7, #3]
 8008804:	6879      	ldr	r1, [r7, #4]
 8008806:	4613      	mov	r3, r2
 8008808:	011b      	lsls	r3, r3, #4
 800880a:	1a9b      	subs	r3, r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	440b      	add	r3, r1
 8008810:	334c      	adds	r3, #76	@ 0x4c
 8008812:	2205      	movs	r2, #5
 8008814:	701a      	strb	r2, [r3, #0]
 8008816:	e2ac      	b.n	8008d72 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008818:	78fa      	ldrb	r2, [r7, #3]
 800881a:	6879      	ldr	r1, [r7, #4]
 800881c:	4613      	mov	r3, r2
 800881e:	011b      	lsls	r3, r3, #4
 8008820:	1a9b      	subs	r3, r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	440b      	add	r3, r1
 8008826:	334d      	adds	r3, #77	@ 0x4d
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	2b07      	cmp	r3, #7
 800882c:	d00b      	beq.n	8008846 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800882e:	78fa      	ldrb	r2, [r7, #3]
 8008830:	6879      	ldr	r1, [r7, #4]
 8008832:	4613      	mov	r3, r2
 8008834:	011b      	lsls	r3, r3, #4
 8008836:	1a9b      	subs	r3, r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	440b      	add	r3, r1
 800883c:	334d      	adds	r3, #77	@ 0x4d
 800883e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008840:	2b09      	cmp	r3, #9
 8008842:	f040 80a6 	bne.w	8008992 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008846:	78fa      	ldrb	r2, [r7, #3]
 8008848:	6879      	ldr	r1, [r7, #4]
 800884a:	4613      	mov	r3, r2
 800884c:	011b      	lsls	r3, r3, #4
 800884e:	1a9b      	subs	r3, r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	440b      	add	r3, r1
 8008854:	334d      	adds	r3, #77	@ 0x4d
 8008856:	2202      	movs	r2, #2
 8008858:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800885a:	78fa      	ldrb	r2, [r7, #3]
 800885c:	6879      	ldr	r1, [r7, #4]
 800885e:	4613      	mov	r3, r2
 8008860:	011b      	lsls	r3, r3, #4
 8008862:	1a9b      	subs	r3, r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	440b      	add	r3, r1
 8008868:	3344      	adds	r3, #68	@ 0x44
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	1c59      	adds	r1, r3, #1
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	4613      	mov	r3, r2
 8008872:	011b      	lsls	r3, r3, #4
 8008874:	1a9b      	subs	r3, r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4403      	add	r3, r0
 800887a:	3344      	adds	r3, #68	@ 0x44
 800887c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800887e:	78fa      	ldrb	r2, [r7, #3]
 8008880:	6879      	ldr	r1, [r7, #4]
 8008882:	4613      	mov	r3, r2
 8008884:	011b      	lsls	r3, r3, #4
 8008886:	1a9b      	subs	r3, r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	440b      	add	r3, r1
 800888c:	3344      	adds	r3, #68	@ 0x44
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b02      	cmp	r3, #2
 8008892:	d943      	bls.n	800891c <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008894:	78fa      	ldrb	r2, [r7, #3]
 8008896:	6879      	ldr	r1, [r7, #4]
 8008898:	4613      	mov	r3, r2
 800889a:	011b      	lsls	r3, r3, #4
 800889c:	1a9b      	subs	r3, r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	440b      	add	r3, r1
 80088a2:	3344      	adds	r3, #68	@ 0x44
 80088a4:	2200      	movs	r2, #0
 80088a6:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80088a8:	78fa      	ldrb	r2, [r7, #3]
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	4613      	mov	r3, r2
 80088ae:	011b      	lsls	r3, r3, #4
 80088b0:	1a9b      	subs	r3, r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	440b      	add	r3, r1
 80088b6:	331a      	adds	r3, #26
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d123      	bne.n	8008906 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80088be:	78fa      	ldrb	r2, [r7, #3]
 80088c0:	6879      	ldr	r1, [r7, #4]
 80088c2:	4613      	mov	r3, r2
 80088c4:	011b      	lsls	r3, r3, #4
 80088c6:	1a9b      	subs	r3, r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	440b      	add	r3, r1
 80088cc:	331b      	adds	r3, #27
 80088ce:	2200      	movs	r2, #0
 80088d0:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80088d2:	78fa      	ldrb	r2, [r7, #3]
 80088d4:	6879      	ldr	r1, [r7, #4]
 80088d6:	4613      	mov	r3, r2
 80088d8:	011b      	lsls	r3, r3, #4
 80088da:	1a9b      	subs	r3, r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	440b      	add	r3, r1
 80088e0:	331c      	adds	r3, #28
 80088e2:	2200      	movs	r2, #0
 80088e4:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80088e6:	78fb      	ldrb	r3, [r7, #3]
 80088e8:	015a      	lsls	r2, r3, #5
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	4413      	add	r3, r2
 80088ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	78fa      	ldrb	r2, [r7, #3]
 80088f6:	0151      	lsls	r1, r2, #5
 80088f8:	693a      	ldr	r2, [r7, #16]
 80088fa:	440a      	add	r2, r1
 80088fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008900:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008904:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008906:	78fa      	ldrb	r2, [r7, #3]
 8008908:	6879      	ldr	r1, [r7, #4]
 800890a:	4613      	mov	r3, r2
 800890c:	011b      	lsls	r3, r3, #4
 800890e:	1a9b      	subs	r3, r3, r2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	440b      	add	r3, r1
 8008914:	334c      	adds	r3, #76	@ 0x4c
 8008916:	2204      	movs	r2, #4
 8008918:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800891a:	e229      	b.n	8008d70 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800891c:	78fa      	ldrb	r2, [r7, #3]
 800891e:	6879      	ldr	r1, [r7, #4]
 8008920:	4613      	mov	r3, r2
 8008922:	011b      	lsls	r3, r3, #4
 8008924:	1a9b      	subs	r3, r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	440b      	add	r3, r1
 800892a:	334c      	adds	r3, #76	@ 0x4c
 800892c:	2202      	movs	r2, #2
 800892e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008930:	78fa      	ldrb	r2, [r7, #3]
 8008932:	6879      	ldr	r1, [r7, #4]
 8008934:	4613      	mov	r3, r2
 8008936:	011b      	lsls	r3, r3, #4
 8008938:	1a9b      	subs	r3, r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	440b      	add	r3, r1
 800893e:	3326      	adds	r3, #38	@ 0x26
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00b      	beq.n	800895e <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008946:	78fa      	ldrb	r2, [r7, #3]
 8008948:	6879      	ldr	r1, [r7, #4]
 800894a:	4613      	mov	r3, r2
 800894c:	011b      	lsls	r3, r3, #4
 800894e:	1a9b      	subs	r3, r3, r2
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	440b      	add	r3, r1
 8008954:	3326      	adds	r3, #38	@ 0x26
 8008956:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008958:	2b02      	cmp	r3, #2
 800895a:	f040 8209 	bne.w	8008d70 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800895e:	78fb      	ldrb	r3, [r7, #3]
 8008960:	015a      	lsls	r2, r3, #5
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	4413      	add	r3, r2
 8008966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008974:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800897c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800897e:	78fb      	ldrb	r3, [r7, #3]
 8008980:	015a      	lsls	r2, r3, #5
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	4413      	add	r3, r2
 8008986:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800898a:	461a      	mov	r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008990:	e1ee      	b.n	8008d70 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8008992:	78fa      	ldrb	r2, [r7, #3]
 8008994:	6879      	ldr	r1, [r7, #4]
 8008996:	4613      	mov	r3, r2
 8008998:	011b      	lsls	r3, r3, #4
 800899a:	1a9b      	subs	r3, r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	440b      	add	r3, r1
 80089a0:	334d      	adds	r3, #77	@ 0x4d
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b05      	cmp	r3, #5
 80089a6:	f040 80c8 	bne.w	8008b3a <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80089aa:	78fa      	ldrb	r2, [r7, #3]
 80089ac:	6879      	ldr	r1, [r7, #4]
 80089ae:	4613      	mov	r3, r2
 80089b0:	011b      	lsls	r3, r3, #4
 80089b2:	1a9b      	subs	r3, r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	440b      	add	r3, r1
 80089b8:	334d      	adds	r3, #77	@ 0x4d
 80089ba:	2202      	movs	r2, #2
 80089bc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80089be:	78fa      	ldrb	r2, [r7, #3]
 80089c0:	6879      	ldr	r1, [r7, #4]
 80089c2:	4613      	mov	r3, r2
 80089c4:	011b      	lsls	r3, r3, #4
 80089c6:	1a9b      	subs	r3, r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	440b      	add	r3, r1
 80089cc:	331b      	adds	r3, #27
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	f040 81ce 	bne.w	8008d72 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80089d6:	78fa      	ldrb	r2, [r7, #3]
 80089d8:	6879      	ldr	r1, [r7, #4]
 80089da:	4613      	mov	r3, r2
 80089dc:	011b      	lsls	r3, r3, #4
 80089de:	1a9b      	subs	r3, r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	440b      	add	r3, r1
 80089e4:	3326      	adds	r3, #38	@ 0x26
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	2b03      	cmp	r3, #3
 80089ea:	d16b      	bne.n	8008ac4 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80089ec:	78fa      	ldrb	r2, [r7, #3]
 80089ee:	6879      	ldr	r1, [r7, #4]
 80089f0:	4613      	mov	r3, r2
 80089f2:	011b      	lsls	r3, r3, #4
 80089f4:	1a9b      	subs	r3, r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	440b      	add	r3, r1
 80089fa:	3348      	adds	r3, #72	@ 0x48
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	1c59      	adds	r1, r3, #1
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	4613      	mov	r3, r2
 8008a04:	011b      	lsls	r3, r3, #4
 8008a06:	1a9b      	subs	r3, r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4403      	add	r3, r0
 8008a0c:	3348      	adds	r3, #72	@ 0x48
 8008a0e:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8008a10:	78fa      	ldrb	r2, [r7, #3]
 8008a12:	6879      	ldr	r1, [r7, #4]
 8008a14:	4613      	mov	r3, r2
 8008a16:	011b      	lsls	r3, r3, #4
 8008a18:	1a9b      	subs	r3, r3, r2
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	440b      	add	r3, r1
 8008a1e:	3348      	adds	r3, #72	@ 0x48
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d943      	bls.n	8008aae <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8008a26:	78fa      	ldrb	r2, [r7, #3]
 8008a28:	6879      	ldr	r1, [r7, #4]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	011b      	lsls	r3, r3, #4
 8008a2e:	1a9b      	subs	r3, r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	440b      	add	r3, r1
 8008a34:	3348      	adds	r3, #72	@ 0x48
 8008a36:	2200      	movs	r2, #0
 8008a38:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8008a3a:	78fa      	ldrb	r2, [r7, #3]
 8008a3c:	6879      	ldr	r1, [r7, #4]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	011b      	lsls	r3, r3, #4
 8008a42:	1a9b      	subs	r3, r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	440b      	add	r3, r1
 8008a48:	331b      	adds	r3, #27
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8008a4e:	78fa      	ldrb	r2, [r7, #3]
 8008a50:	6879      	ldr	r1, [r7, #4]
 8008a52:	4613      	mov	r3, r2
 8008a54:	011b      	lsls	r3, r3, #4
 8008a56:	1a9b      	subs	r3, r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	440b      	add	r3, r1
 8008a5c:	3344      	adds	r3, #68	@ 0x44
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d809      	bhi.n	8008a78 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8008a64:	78fa      	ldrb	r2, [r7, #3]
 8008a66:	6879      	ldr	r1, [r7, #4]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	011b      	lsls	r3, r3, #4
 8008a6c:	1a9b      	subs	r3, r3, r2
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	440b      	add	r3, r1
 8008a72:	331c      	adds	r3, #28
 8008a74:	2201      	movs	r2, #1
 8008a76:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008a78:	78fb      	ldrb	r3, [r7, #3]
 8008a7a:	015a      	lsls	r2, r3, #5
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	4413      	add	r3, r2
 8008a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	78fa      	ldrb	r2, [r7, #3]
 8008a88:	0151      	lsls	r1, r2, #5
 8008a8a:	693a      	ldr	r2, [r7, #16]
 8008a8c:	440a      	add	r2, r1
 8008a8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a96:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8008a98:	78fa      	ldrb	r2, [r7, #3]
 8008a9a:	6879      	ldr	r1, [r7, #4]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	011b      	lsls	r3, r3, #4
 8008aa0:	1a9b      	subs	r3, r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	440b      	add	r3, r1
 8008aa6:	334c      	adds	r3, #76	@ 0x4c
 8008aa8:	2204      	movs	r2, #4
 8008aaa:	701a      	strb	r2, [r3, #0]
 8008aac:	e014      	b.n	8008ad8 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008aae:	78fa      	ldrb	r2, [r7, #3]
 8008ab0:	6879      	ldr	r1, [r7, #4]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	011b      	lsls	r3, r3, #4
 8008ab6:	1a9b      	subs	r3, r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	440b      	add	r3, r1
 8008abc:	334c      	adds	r3, #76	@ 0x4c
 8008abe:	2202      	movs	r2, #2
 8008ac0:	701a      	strb	r2, [r3, #0]
 8008ac2:	e009      	b.n	8008ad8 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008ac4:	78fa      	ldrb	r2, [r7, #3]
 8008ac6:	6879      	ldr	r1, [r7, #4]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	011b      	lsls	r3, r3, #4
 8008acc:	1a9b      	subs	r3, r3, r2
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	440b      	add	r3, r1
 8008ad2:	334c      	adds	r3, #76	@ 0x4c
 8008ad4:	2202      	movs	r2, #2
 8008ad6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008ad8:	78fa      	ldrb	r2, [r7, #3]
 8008ada:	6879      	ldr	r1, [r7, #4]
 8008adc:	4613      	mov	r3, r2
 8008ade:	011b      	lsls	r3, r3, #4
 8008ae0:	1a9b      	subs	r3, r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	440b      	add	r3, r1
 8008ae6:	3326      	adds	r3, #38	@ 0x26
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00b      	beq.n	8008b06 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008aee:	78fa      	ldrb	r2, [r7, #3]
 8008af0:	6879      	ldr	r1, [r7, #4]
 8008af2:	4613      	mov	r3, r2
 8008af4:	011b      	lsls	r3, r3, #4
 8008af6:	1a9b      	subs	r3, r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	440b      	add	r3, r1
 8008afc:	3326      	adds	r3, #38	@ 0x26
 8008afe:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	f040 8136 	bne.w	8008d72 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8008b06:	78fb      	ldrb	r3, [r7, #3]
 8008b08:	015a      	lsls	r2, r3, #5
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008b1c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008b24:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8008b26:	78fb      	ldrb	r3, [r7, #3]
 8008b28:	015a      	lsls	r2, r3, #5
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b32:	461a      	mov	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	e11b      	b.n	8008d72 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8008b3a:	78fa      	ldrb	r2, [r7, #3]
 8008b3c:	6879      	ldr	r1, [r7, #4]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	011b      	lsls	r3, r3, #4
 8008b42:	1a9b      	subs	r3, r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	440b      	add	r3, r1
 8008b48:	334d      	adds	r3, #77	@ 0x4d
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	2b03      	cmp	r3, #3
 8008b4e:	f040 8081 	bne.w	8008c54 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008b52:	78fa      	ldrb	r2, [r7, #3]
 8008b54:	6879      	ldr	r1, [r7, #4]
 8008b56:	4613      	mov	r3, r2
 8008b58:	011b      	lsls	r3, r3, #4
 8008b5a:	1a9b      	subs	r3, r3, r2
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	440b      	add	r3, r1
 8008b60:	334d      	adds	r3, #77	@ 0x4d
 8008b62:	2202      	movs	r2, #2
 8008b64:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008b66:	78fa      	ldrb	r2, [r7, #3]
 8008b68:	6879      	ldr	r1, [r7, #4]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	011b      	lsls	r3, r3, #4
 8008b6e:	1a9b      	subs	r3, r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	440b      	add	r3, r1
 8008b74:	331b      	adds	r3, #27
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	f040 80fa 	bne.w	8008d72 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008b7e:	78fa      	ldrb	r2, [r7, #3]
 8008b80:	6879      	ldr	r1, [r7, #4]
 8008b82:	4613      	mov	r3, r2
 8008b84:	011b      	lsls	r3, r3, #4
 8008b86:	1a9b      	subs	r3, r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	440b      	add	r3, r1
 8008b8c:	334c      	adds	r3, #76	@ 0x4c
 8008b8e:	2202      	movs	r2, #2
 8008b90:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008b92:	78fb      	ldrb	r3, [r7, #3]
 8008b94:	015a      	lsls	r2, r3, #5
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	4413      	add	r3, r2
 8008b9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	78fa      	ldrb	r2, [r7, #3]
 8008ba2:	0151      	lsls	r1, r2, #5
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	440a      	add	r2, r1
 8008ba8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bb0:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008bb2:	78fb      	ldrb	r3, [r7, #3]
 8008bb4:	015a      	lsls	r2, r3, #5
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	4413      	add	r3, r2
 8008bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	78fa      	ldrb	r2, [r7, #3]
 8008bc2:	0151      	lsls	r1, r2, #5
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	440a      	add	r2, r1
 8008bc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bd0:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8008bd2:	78fb      	ldrb	r3, [r7, #3]
 8008bd4:	015a      	lsls	r2, r3, #5
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	4413      	add	r3, r2
 8008bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	78fa      	ldrb	r2, [r7, #3]
 8008be2:	0151      	lsls	r1, r2, #5
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	440a      	add	r2, r1
 8008be8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bec:	f023 0320 	bic.w	r3, r3, #32
 8008bf0:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008bf2:	78fa      	ldrb	r2, [r7, #3]
 8008bf4:	6879      	ldr	r1, [r7, #4]
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	011b      	lsls	r3, r3, #4
 8008bfa:	1a9b      	subs	r3, r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	440b      	add	r3, r1
 8008c00:	3326      	adds	r3, #38	@ 0x26
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00b      	beq.n	8008c20 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008c08:	78fa      	ldrb	r2, [r7, #3]
 8008c0a:	6879      	ldr	r1, [r7, #4]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	011b      	lsls	r3, r3, #4
 8008c10:	1a9b      	subs	r3, r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	440b      	add	r3, r1
 8008c16:	3326      	adds	r3, #38	@ 0x26
 8008c18:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	f040 80a9 	bne.w	8008d72 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8008c20:	78fb      	ldrb	r3, [r7, #3]
 8008c22:	015a      	lsls	r2, r3, #5
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	4413      	add	r3, r2
 8008c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008c36:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c3e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8008c40:	78fb      	ldrb	r3, [r7, #3]
 8008c42:	015a      	lsls	r2, r3, #5
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	4413      	add	r3, r2
 8008c48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6013      	str	r3, [r2, #0]
 8008c52:	e08e      	b.n	8008d72 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8008c54:	78fa      	ldrb	r2, [r7, #3]
 8008c56:	6879      	ldr	r1, [r7, #4]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	011b      	lsls	r3, r3, #4
 8008c5c:	1a9b      	subs	r3, r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	440b      	add	r3, r1
 8008c62:	334d      	adds	r3, #77	@ 0x4d
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	2b04      	cmp	r3, #4
 8008c68:	d143      	bne.n	8008cf2 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008c6a:	78fa      	ldrb	r2, [r7, #3]
 8008c6c:	6879      	ldr	r1, [r7, #4]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	011b      	lsls	r3, r3, #4
 8008c72:	1a9b      	subs	r3, r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	440b      	add	r3, r1
 8008c78:	334d      	adds	r3, #77	@ 0x4d
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008c7e:	78fa      	ldrb	r2, [r7, #3]
 8008c80:	6879      	ldr	r1, [r7, #4]
 8008c82:	4613      	mov	r3, r2
 8008c84:	011b      	lsls	r3, r3, #4
 8008c86:	1a9b      	subs	r3, r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	440b      	add	r3, r1
 8008c8c:	334c      	adds	r3, #76	@ 0x4c
 8008c8e:	2202      	movs	r2, #2
 8008c90:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008c92:	78fa      	ldrb	r2, [r7, #3]
 8008c94:	6879      	ldr	r1, [r7, #4]
 8008c96:	4613      	mov	r3, r2
 8008c98:	011b      	lsls	r3, r3, #4
 8008c9a:	1a9b      	subs	r3, r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	440b      	add	r3, r1
 8008ca0:	3326      	adds	r3, #38	@ 0x26
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00a      	beq.n	8008cbe <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008ca8:	78fa      	ldrb	r2, [r7, #3]
 8008caa:	6879      	ldr	r1, [r7, #4]
 8008cac:	4613      	mov	r3, r2
 8008cae:	011b      	lsls	r3, r3, #4
 8008cb0:	1a9b      	subs	r3, r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	440b      	add	r3, r1
 8008cb6:	3326      	adds	r3, #38	@ 0x26
 8008cb8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d159      	bne.n	8008d72 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008cbe:	78fb      	ldrb	r3, [r7, #3]
 8008cc0:	015a      	lsls	r2, r3, #5
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008cd4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008cdc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008cde:	78fb      	ldrb	r3, [r7, #3]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cea:	461a      	mov	r2, r3
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6013      	str	r3, [r2, #0]
 8008cf0:	e03f      	b.n	8008d72 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8008cf2:	78fa      	ldrb	r2, [r7, #3]
 8008cf4:	6879      	ldr	r1, [r7, #4]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	011b      	lsls	r3, r3, #4
 8008cfa:	1a9b      	subs	r3, r3, r2
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	440b      	add	r3, r1
 8008d00:	334d      	adds	r3, #77	@ 0x4d
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	2b08      	cmp	r3, #8
 8008d06:	d126      	bne.n	8008d56 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008d08:	78fa      	ldrb	r2, [r7, #3]
 8008d0a:	6879      	ldr	r1, [r7, #4]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	011b      	lsls	r3, r3, #4
 8008d10:	1a9b      	subs	r3, r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	440b      	add	r3, r1
 8008d16:	334d      	adds	r3, #77	@ 0x4d
 8008d18:	2202      	movs	r2, #2
 8008d1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8008d1c:	78fa      	ldrb	r2, [r7, #3]
 8008d1e:	6879      	ldr	r1, [r7, #4]
 8008d20:	4613      	mov	r3, r2
 8008d22:	011b      	lsls	r3, r3, #4
 8008d24:	1a9b      	subs	r3, r3, r2
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	440b      	add	r3, r1
 8008d2a:	3344      	adds	r3, #68	@ 0x44
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	1c59      	adds	r1, r3, #1
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	4613      	mov	r3, r2
 8008d34:	011b      	lsls	r3, r3, #4
 8008d36:	1a9b      	subs	r3, r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4403      	add	r3, r0
 8008d3c:	3344      	adds	r3, #68	@ 0x44
 8008d3e:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8008d40:	78fa      	ldrb	r2, [r7, #3]
 8008d42:	6879      	ldr	r1, [r7, #4]
 8008d44:	4613      	mov	r3, r2
 8008d46:	011b      	lsls	r3, r3, #4
 8008d48:	1a9b      	subs	r3, r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	440b      	add	r3, r1
 8008d4e:	334c      	adds	r3, #76	@ 0x4c
 8008d50:	2204      	movs	r2, #4
 8008d52:	701a      	strb	r2, [r3, #0]
 8008d54:	e00d      	b.n	8008d72 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8008d56:	78fa      	ldrb	r2, [r7, #3]
 8008d58:	6879      	ldr	r1, [r7, #4]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	011b      	lsls	r3, r3, #4
 8008d5e:	1a9b      	subs	r3, r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	440b      	add	r3, r1
 8008d64:	334d      	adds	r3, #77	@ 0x4d
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	f000 8100 	beq.w	8008f6e <HCD_HC_IN_IRQHandler+0xcca>
 8008d6e:	e000      	b.n	8008d72 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008d70:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008d72:	78fa      	ldrb	r2, [r7, #3]
 8008d74:	6879      	ldr	r1, [r7, #4]
 8008d76:	4613      	mov	r3, r2
 8008d78:	011b      	lsls	r3, r3, #4
 8008d7a:	1a9b      	subs	r3, r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	440b      	add	r3, r1
 8008d80:	334c      	adds	r3, #76	@ 0x4c
 8008d82:	781a      	ldrb	r2, [r3, #0]
 8008d84:	78fb      	ldrb	r3, [r7, #3]
 8008d86:	4619      	mov	r1, r3
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f00e f9c5 	bl	8017118 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008d8e:	e0ef      	b.n	8008f70 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	78fa      	ldrb	r2, [r7, #3]
 8008d96:	4611      	mov	r1, r2
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f008 fa94 	bl	80112c6 <USB_ReadChInterrupts>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008da4:	2b40      	cmp	r3, #64	@ 0x40
 8008da6:	d12f      	bne.n	8008e08 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008da8:	78fb      	ldrb	r3, [r7, #3]
 8008daa:	015a      	lsls	r2, r3, #5
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	4413      	add	r3, r2
 8008db0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008db4:	461a      	mov	r2, r3
 8008db6:	2340      	movs	r3, #64	@ 0x40
 8008db8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8008dba:	78fa      	ldrb	r2, [r7, #3]
 8008dbc:	6879      	ldr	r1, [r7, #4]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	011b      	lsls	r3, r3, #4
 8008dc2:	1a9b      	subs	r3, r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	440b      	add	r3, r1
 8008dc8:	334d      	adds	r3, #77	@ 0x4d
 8008dca:	2205      	movs	r2, #5
 8008dcc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8008dce:	78fa      	ldrb	r2, [r7, #3]
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	011b      	lsls	r3, r3, #4
 8008dd6:	1a9b      	subs	r3, r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	440b      	add	r3, r1
 8008ddc:	331a      	adds	r3, #26
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d109      	bne.n	8008df8 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008de4:	78fa      	ldrb	r2, [r7, #3]
 8008de6:	6879      	ldr	r1, [r7, #4]
 8008de8:	4613      	mov	r3, r2
 8008dea:	011b      	lsls	r3, r3, #4
 8008dec:	1a9b      	subs	r3, r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	440b      	add	r3, r1
 8008df2:	3344      	adds	r3, #68	@ 0x44
 8008df4:	2200      	movs	r2, #0
 8008df6:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	78fa      	ldrb	r2, [r7, #3]
 8008dfe:	4611      	mov	r1, r2
 8008e00:	4618      	mov	r0, r3
 8008e02:	f008 fadd 	bl	80113c0 <USB_HC_Halt>
 8008e06:	e0b3      	b.n	8008f70 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	78fa      	ldrb	r2, [r7, #3]
 8008e0e:	4611      	mov	r1, r2
 8008e10:	4618      	mov	r0, r3
 8008e12:	f008 fa58 	bl	80112c6 <USB_ReadChInterrupts>
 8008e16:	4603      	mov	r3, r0
 8008e18:	f003 0310 	and.w	r3, r3, #16
 8008e1c:	2b10      	cmp	r3, #16
 8008e1e:	f040 80a7 	bne.w	8008f70 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008e22:	78fa      	ldrb	r2, [r7, #3]
 8008e24:	6879      	ldr	r1, [r7, #4]
 8008e26:	4613      	mov	r3, r2
 8008e28:	011b      	lsls	r3, r3, #4
 8008e2a:	1a9b      	subs	r3, r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	440b      	add	r3, r1
 8008e30:	3326      	adds	r3, #38	@ 0x26
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	2b03      	cmp	r3, #3
 8008e36:	d11b      	bne.n	8008e70 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008e38:	78fa      	ldrb	r2, [r7, #3]
 8008e3a:	6879      	ldr	r1, [r7, #4]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	011b      	lsls	r3, r3, #4
 8008e40:	1a9b      	subs	r3, r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	440b      	add	r3, r1
 8008e46:	3344      	adds	r3, #68	@ 0x44
 8008e48:	2200      	movs	r2, #0
 8008e4a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8008e4c:	78fa      	ldrb	r2, [r7, #3]
 8008e4e:	6879      	ldr	r1, [r7, #4]
 8008e50:	4613      	mov	r3, r2
 8008e52:	011b      	lsls	r3, r3, #4
 8008e54:	1a9b      	subs	r3, r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	440b      	add	r3, r1
 8008e5a:	334d      	adds	r3, #77	@ 0x4d
 8008e5c:	2204      	movs	r2, #4
 8008e5e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	78fa      	ldrb	r2, [r7, #3]
 8008e66:	4611      	mov	r1, r2
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f008 faa9 	bl	80113c0 <USB_HC_Halt>
 8008e6e:	e03f      	b.n	8008ef0 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008e70:	78fa      	ldrb	r2, [r7, #3]
 8008e72:	6879      	ldr	r1, [r7, #4]
 8008e74:	4613      	mov	r3, r2
 8008e76:	011b      	lsls	r3, r3, #4
 8008e78:	1a9b      	subs	r3, r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	440b      	add	r3, r1
 8008e7e:	3326      	adds	r3, #38	@ 0x26
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00a      	beq.n	8008e9c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008e86:	78fa      	ldrb	r2, [r7, #3]
 8008e88:	6879      	ldr	r1, [r7, #4]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	011b      	lsls	r3, r3, #4
 8008e8e:	1a9b      	subs	r3, r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	440b      	add	r3, r1
 8008e94:	3326      	adds	r3, #38	@ 0x26
 8008e96:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d129      	bne.n	8008ef0 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008e9c:	78fa      	ldrb	r2, [r7, #3]
 8008e9e:	6879      	ldr	r1, [r7, #4]
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	011b      	lsls	r3, r3, #4
 8008ea4:	1a9b      	subs	r3, r3, r2
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	440b      	add	r3, r1
 8008eaa:	3344      	adds	r3, #68	@ 0x44
 8008eac:	2200      	movs	r2, #0
 8008eae:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	799b      	ldrb	r3, [r3, #6]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00a      	beq.n	8008ece <HCD_HC_IN_IRQHandler+0xc2a>
 8008eb8:	78fa      	ldrb	r2, [r7, #3]
 8008eba:	6879      	ldr	r1, [r7, #4]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	011b      	lsls	r3, r3, #4
 8008ec0:	1a9b      	subs	r3, r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	440b      	add	r3, r1
 8008ec6:	331b      	adds	r3, #27
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d110      	bne.n	8008ef0 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8008ece:	78fa      	ldrb	r2, [r7, #3]
 8008ed0:	6879      	ldr	r1, [r7, #4]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	011b      	lsls	r3, r3, #4
 8008ed6:	1a9b      	subs	r3, r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	440b      	add	r3, r1
 8008edc:	334d      	adds	r3, #77	@ 0x4d
 8008ede:	2204      	movs	r2, #4
 8008ee0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	78fa      	ldrb	r2, [r7, #3]
 8008ee8:	4611      	mov	r1, r2
 8008eea:	4618      	mov	r0, r3
 8008eec:	f008 fa68 	bl	80113c0 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8008ef0:	78fa      	ldrb	r2, [r7, #3]
 8008ef2:	6879      	ldr	r1, [r7, #4]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	011b      	lsls	r3, r3, #4
 8008ef8:	1a9b      	subs	r3, r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	440b      	add	r3, r1
 8008efe:	331b      	adds	r3, #27
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d129      	bne.n	8008f5a <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008f06:	78fa      	ldrb	r2, [r7, #3]
 8008f08:	6879      	ldr	r1, [r7, #4]
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	011b      	lsls	r3, r3, #4
 8008f0e:	1a9b      	subs	r3, r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	440b      	add	r3, r1
 8008f14:	331b      	adds	r3, #27
 8008f16:	2200      	movs	r2, #0
 8008f18:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008f1a:	78fb      	ldrb	r3, [r7, #3]
 8008f1c:	015a      	lsls	r2, r3, #5
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	78fa      	ldrb	r2, [r7, #3]
 8008f2a:	0151      	lsls	r1, r2, #5
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	440a      	add	r2, r1
 8008f30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f38:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8008f3a:	78fb      	ldrb	r3, [r7, #3]
 8008f3c:	015a      	lsls	r2, r3, #5
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	4413      	add	r3, r2
 8008f42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	78fa      	ldrb	r2, [r7, #3]
 8008f4a:	0151      	lsls	r1, r2, #5
 8008f4c:	693a      	ldr	r2, [r7, #16]
 8008f4e:	440a      	add	r2, r1
 8008f50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f54:	f043 0320 	orr.w	r3, r3, #32
 8008f58:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008f5a:	78fb      	ldrb	r3, [r7, #3]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f66:	461a      	mov	r2, r3
 8008f68:	2310      	movs	r3, #16
 8008f6a:	6093      	str	r3, [r2, #8]
 8008f6c:	e000      	b.n	8008f70 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8008f6e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8008f70:	3718      	adds	r7, #24
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b086      	sub	sp, #24
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	460b      	mov	r3, r1
 8008f80:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	78fa      	ldrb	r2, [r7, #3]
 8008f92:	4611      	mov	r1, r2
 8008f94:	4618      	mov	r0, r3
 8008f96:	f008 f996 	bl	80112c6 <USB_ReadChInterrupts>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	f003 0304 	and.w	r3, r3, #4
 8008fa0:	2b04      	cmp	r3, #4
 8008fa2:	d11b      	bne.n	8008fdc <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8008fa4:	78fb      	ldrb	r3, [r7, #3]
 8008fa6:	015a      	lsls	r2, r3, #5
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	4413      	add	r3, r2
 8008fac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	2304      	movs	r3, #4
 8008fb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008fb6:	78fa      	ldrb	r2, [r7, #3]
 8008fb8:	6879      	ldr	r1, [r7, #4]
 8008fba:	4613      	mov	r3, r2
 8008fbc:	011b      	lsls	r3, r3, #4
 8008fbe:	1a9b      	subs	r3, r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	440b      	add	r3, r1
 8008fc4:	334d      	adds	r3, #77	@ 0x4d
 8008fc6:	2207      	movs	r2, #7
 8008fc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	78fa      	ldrb	r2, [r7, #3]
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f008 f9f4 	bl	80113c0 <USB_HC_Halt>
 8008fd8:	f000 bc89 	b.w	80098ee <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	78fa      	ldrb	r2, [r7, #3]
 8008fe2:	4611      	mov	r1, r2
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f008 f96e 	bl	80112c6 <USB_ReadChInterrupts>
 8008fea:	4603      	mov	r3, r0
 8008fec:	f003 0320 	and.w	r3, r3, #32
 8008ff0:	2b20      	cmp	r3, #32
 8008ff2:	f040 8082 	bne.w	80090fa <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008ff6:	78fb      	ldrb	r3, [r7, #3]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009002:	461a      	mov	r2, r3
 8009004:	2320      	movs	r3, #32
 8009006:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8009008:	78fa      	ldrb	r2, [r7, #3]
 800900a:	6879      	ldr	r1, [r7, #4]
 800900c:	4613      	mov	r3, r2
 800900e:	011b      	lsls	r3, r3, #4
 8009010:	1a9b      	subs	r3, r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	440b      	add	r3, r1
 8009016:	3319      	adds	r3, #25
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d124      	bne.n	8009068 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800901e:	78fa      	ldrb	r2, [r7, #3]
 8009020:	6879      	ldr	r1, [r7, #4]
 8009022:	4613      	mov	r3, r2
 8009024:	011b      	lsls	r3, r3, #4
 8009026:	1a9b      	subs	r3, r3, r2
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	440b      	add	r3, r1
 800902c:	3319      	adds	r3, #25
 800902e:	2200      	movs	r2, #0
 8009030:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009032:	78fa      	ldrb	r2, [r7, #3]
 8009034:	6879      	ldr	r1, [r7, #4]
 8009036:	4613      	mov	r3, r2
 8009038:	011b      	lsls	r3, r3, #4
 800903a:	1a9b      	subs	r3, r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	440b      	add	r3, r1
 8009040:	334c      	adds	r3, #76	@ 0x4c
 8009042:	2202      	movs	r2, #2
 8009044:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8009046:	78fa      	ldrb	r2, [r7, #3]
 8009048:	6879      	ldr	r1, [r7, #4]
 800904a:	4613      	mov	r3, r2
 800904c:	011b      	lsls	r3, r3, #4
 800904e:	1a9b      	subs	r3, r3, r2
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	440b      	add	r3, r1
 8009054:	334d      	adds	r3, #77	@ 0x4d
 8009056:	2203      	movs	r2, #3
 8009058:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	78fa      	ldrb	r2, [r7, #3]
 8009060:	4611      	mov	r1, r2
 8009062:	4618      	mov	r0, r3
 8009064:	f008 f9ac 	bl	80113c0 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8009068:	78fa      	ldrb	r2, [r7, #3]
 800906a:	6879      	ldr	r1, [r7, #4]
 800906c:	4613      	mov	r3, r2
 800906e:	011b      	lsls	r3, r3, #4
 8009070:	1a9b      	subs	r3, r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	440b      	add	r3, r1
 8009076:	331a      	adds	r3, #26
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	2b01      	cmp	r3, #1
 800907c:	f040 8437 	bne.w	80098ee <HCD_HC_OUT_IRQHandler+0x978>
 8009080:	78fa      	ldrb	r2, [r7, #3]
 8009082:	6879      	ldr	r1, [r7, #4]
 8009084:	4613      	mov	r3, r2
 8009086:	011b      	lsls	r3, r3, #4
 8009088:	1a9b      	subs	r3, r3, r2
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	440b      	add	r3, r1
 800908e:	331b      	adds	r3, #27
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	f040 842b 	bne.w	80098ee <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8009098:	78fa      	ldrb	r2, [r7, #3]
 800909a:	6879      	ldr	r1, [r7, #4]
 800909c:	4613      	mov	r3, r2
 800909e:	011b      	lsls	r3, r3, #4
 80090a0:	1a9b      	subs	r3, r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	440b      	add	r3, r1
 80090a6:	3326      	adds	r3, #38	@ 0x26
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d009      	beq.n	80090c2 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80090ae:	78fa      	ldrb	r2, [r7, #3]
 80090b0:	6879      	ldr	r1, [r7, #4]
 80090b2:	4613      	mov	r3, r2
 80090b4:	011b      	lsls	r3, r3, #4
 80090b6:	1a9b      	subs	r3, r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	440b      	add	r3, r1
 80090bc:	331b      	adds	r3, #27
 80090be:	2201      	movs	r2, #1
 80090c0:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80090c2:	78fa      	ldrb	r2, [r7, #3]
 80090c4:	6879      	ldr	r1, [r7, #4]
 80090c6:	4613      	mov	r3, r2
 80090c8:	011b      	lsls	r3, r3, #4
 80090ca:	1a9b      	subs	r3, r3, r2
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	440b      	add	r3, r1
 80090d0:	334d      	adds	r3, #77	@ 0x4d
 80090d2:	2203      	movs	r2, #3
 80090d4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	78fa      	ldrb	r2, [r7, #3]
 80090dc:	4611      	mov	r1, r2
 80090de:	4618      	mov	r0, r3
 80090e0:	f008 f96e 	bl	80113c0 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80090e4:	78fa      	ldrb	r2, [r7, #3]
 80090e6:	6879      	ldr	r1, [r7, #4]
 80090e8:	4613      	mov	r3, r2
 80090ea:	011b      	lsls	r3, r3, #4
 80090ec:	1a9b      	subs	r3, r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	440b      	add	r3, r1
 80090f2:	3344      	adds	r3, #68	@ 0x44
 80090f4:	2200      	movs	r2, #0
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	e3f9      	b.n	80098ee <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	78fa      	ldrb	r2, [r7, #3]
 8009100:	4611      	mov	r1, r2
 8009102:	4618      	mov	r0, r3
 8009104:	f008 f8df 	bl	80112c6 <USB_ReadChInterrupts>
 8009108:	4603      	mov	r3, r0
 800910a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800910e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009112:	d111      	bne.n	8009138 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8009114:	78fb      	ldrb	r3, [r7, #3]
 8009116:	015a      	lsls	r2, r3, #5
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	4413      	add	r3, r2
 800911c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009120:	461a      	mov	r2, r3
 8009122:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009126:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	78fa      	ldrb	r2, [r7, #3]
 800912e:	4611      	mov	r1, r2
 8009130:	4618      	mov	r0, r3
 8009132:	f008 f945 	bl	80113c0 <USB_HC_Halt>
 8009136:	e3da      	b.n	80098ee <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	78fa      	ldrb	r2, [r7, #3]
 800913e:	4611      	mov	r1, r2
 8009140:	4618      	mov	r0, r3
 8009142:	f008 f8c0 	bl	80112c6 <USB_ReadChInterrupts>
 8009146:	4603      	mov	r3, r0
 8009148:	f003 0301 	and.w	r3, r3, #1
 800914c:	2b01      	cmp	r3, #1
 800914e:	d168      	bne.n	8009222 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8009150:	78fa      	ldrb	r2, [r7, #3]
 8009152:	6879      	ldr	r1, [r7, #4]
 8009154:	4613      	mov	r3, r2
 8009156:	011b      	lsls	r3, r3, #4
 8009158:	1a9b      	subs	r3, r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	440b      	add	r3, r1
 800915e:	3344      	adds	r3, #68	@ 0x44
 8009160:	2200      	movs	r2, #0
 8009162:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	78fa      	ldrb	r2, [r7, #3]
 800916a:	4611      	mov	r1, r2
 800916c:	4618      	mov	r0, r3
 800916e:	f008 f8aa 	bl	80112c6 <USB_ReadChInterrupts>
 8009172:	4603      	mov	r3, r0
 8009174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009178:	2b40      	cmp	r3, #64	@ 0x40
 800917a:	d112      	bne.n	80091a2 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800917c:	78fa      	ldrb	r2, [r7, #3]
 800917e:	6879      	ldr	r1, [r7, #4]
 8009180:	4613      	mov	r3, r2
 8009182:	011b      	lsls	r3, r3, #4
 8009184:	1a9b      	subs	r3, r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	440b      	add	r3, r1
 800918a:	3319      	adds	r3, #25
 800918c:	2201      	movs	r2, #1
 800918e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8009190:	78fb      	ldrb	r3, [r7, #3]
 8009192:	015a      	lsls	r2, r3, #5
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	4413      	add	r3, r2
 8009198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800919c:	461a      	mov	r2, r3
 800919e:	2340      	movs	r3, #64	@ 0x40
 80091a0:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80091a2:	78fa      	ldrb	r2, [r7, #3]
 80091a4:	6879      	ldr	r1, [r7, #4]
 80091a6:	4613      	mov	r3, r2
 80091a8:	011b      	lsls	r3, r3, #4
 80091aa:	1a9b      	subs	r3, r3, r2
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	440b      	add	r3, r1
 80091b0:	331b      	adds	r3, #27
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d019      	beq.n	80091ec <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80091b8:	78fa      	ldrb	r2, [r7, #3]
 80091ba:	6879      	ldr	r1, [r7, #4]
 80091bc:	4613      	mov	r3, r2
 80091be:	011b      	lsls	r3, r3, #4
 80091c0:	1a9b      	subs	r3, r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	440b      	add	r3, r1
 80091c6:	331b      	adds	r3, #27
 80091c8:	2200      	movs	r2, #0
 80091ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80091cc:	78fb      	ldrb	r3, [r7, #3]
 80091ce:	015a      	lsls	r2, r3, #5
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	4413      	add	r3, r2
 80091d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	78fa      	ldrb	r2, [r7, #3]
 80091dc:	0151      	lsls	r1, r2, #5
 80091de:	693a      	ldr	r2, [r7, #16]
 80091e0:	440a      	add	r2, r1
 80091e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091ea:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80091ec:	78fb      	ldrb	r3, [r7, #3]
 80091ee:	015a      	lsls	r2, r3, #5
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	4413      	add	r3, r2
 80091f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091f8:	461a      	mov	r2, r3
 80091fa:	2301      	movs	r3, #1
 80091fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80091fe:	78fa      	ldrb	r2, [r7, #3]
 8009200:	6879      	ldr	r1, [r7, #4]
 8009202:	4613      	mov	r3, r2
 8009204:	011b      	lsls	r3, r3, #4
 8009206:	1a9b      	subs	r3, r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	440b      	add	r3, r1
 800920c:	334d      	adds	r3, #77	@ 0x4d
 800920e:	2201      	movs	r2, #1
 8009210:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	78fa      	ldrb	r2, [r7, #3]
 8009218:	4611      	mov	r1, r2
 800921a:	4618      	mov	r0, r3
 800921c:	f008 f8d0 	bl	80113c0 <USB_HC_Halt>
 8009220:	e365      	b.n	80098ee <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	78fa      	ldrb	r2, [r7, #3]
 8009228:	4611      	mov	r1, r2
 800922a:	4618      	mov	r0, r3
 800922c:	f008 f84b 	bl	80112c6 <USB_ReadChInterrupts>
 8009230:	4603      	mov	r3, r0
 8009232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009236:	2b40      	cmp	r3, #64	@ 0x40
 8009238:	d139      	bne.n	80092ae <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800923a:	78fa      	ldrb	r2, [r7, #3]
 800923c:	6879      	ldr	r1, [r7, #4]
 800923e:	4613      	mov	r3, r2
 8009240:	011b      	lsls	r3, r3, #4
 8009242:	1a9b      	subs	r3, r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	440b      	add	r3, r1
 8009248:	334d      	adds	r3, #77	@ 0x4d
 800924a:	2205      	movs	r2, #5
 800924c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800924e:	78fa      	ldrb	r2, [r7, #3]
 8009250:	6879      	ldr	r1, [r7, #4]
 8009252:	4613      	mov	r3, r2
 8009254:	011b      	lsls	r3, r3, #4
 8009256:	1a9b      	subs	r3, r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	440b      	add	r3, r1
 800925c:	331a      	adds	r3, #26
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d109      	bne.n	8009278 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8009264:	78fa      	ldrb	r2, [r7, #3]
 8009266:	6879      	ldr	r1, [r7, #4]
 8009268:	4613      	mov	r3, r2
 800926a:	011b      	lsls	r3, r3, #4
 800926c:	1a9b      	subs	r3, r3, r2
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	440b      	add	r3, r1
 8009272:	3319      	adds	r3, #25
 8009274:	2201      	movs	r2, #1
 8009276:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8009278:	78fa      	ldrb	r2, [r7, #3]
 800927a:	6879      	ldr	r1, [r7, #4]
 800927c:	4613      	mov	r3, r2
 800927e:	011b      	lsls	r3, r3, #4
 8009280:	1a9b      	subs	r3, r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	440b      	add	r3, r1
 8009286:	3344      	adds	r3, #68	@ 0x44
 8009288:	2200      	movs	r2, #0
 800928a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	78fa      	ldrb	r2, [r7, #3]
 8009292:	4611      	mov	r1, r2
 8009294:	4618      	mov	r0, r3
 8009296:	f008 f893 	bl	80113c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800929a:	78fb      	ldrb	r3, [r7, #3]
 800929c:	015a      	lsls	r2, r3, #5
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	4413      	add	r3, r2
 80092a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092a6:	461a      	mov	r2, r3
 80092a8:	2340      	movs	r3, #64	@ 0x40
 80092aa:	6093      	str	r3, [r2, #8]
 80092ac:	e31f      	b.n	80098ee <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	78fa      	ldrb	r2, [r7, #3]
 80092b4:	4611      	mov	r1, r2
 80092b6:	4618      	mov	r0, r3
 80092b8:	f008 f805 	bl	80112c6 <USB_ReadChInterrupts>
 80092bc:	4603      	mov	r3, r0
 80092be:	f003 0308 	and.w	r3, r3, #8
 80092c2:	2b08      	cmp	r3, #8
 80092c4:	d11a      	bne.n	80092fc <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80092c6:	78fb      	ldrb	r3, [r7, #3]
 80092c8:	015a      	lsls	r2, r3, #5
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	4413      	add	r3, r2
 80092ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092d2:	461a      	mov	r2, r3
 80092d4:	2308      	movs	r3, #8
 80092d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80092d8:	78fa      	ldrb	r2, [r7, #3]
 80092da:	6879      	ldr	r1, [r7, #4]
 80092dc:	4613      	mov	r3, r2
 80092de:	011b      	lsls	r3, r3, #4
 80092e0:	1a9b      	subs	r3, r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	440b      	add	r3, r1
 80092e6:	334d      	adds	r3, #77	@ 0x4d
 80092e8:	2206      	movs	r2, #6
 80092ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	78fa      	ldrb	r2, [r7, #3]
 80092f2:	4611      	mov	r1, r2
 80092f4:	4618      	mov	r0, r3
 80092f6:	f008 f863 	bl	80113c0 <USB_HC_Halt>
 80092fa:	e2f8      	b.n	80098ee <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	78fa      	ldrb	r2, [r7, #3]
 8009302:	4611      	mov	r1, r2
 8009304:	4618      	mov	r0, r3
 8009306:	f007 ffde 	bl	80112c6 <USB_ReadChInterrupts>
 800930a:	4603      	mov	r3, r0
 800930c:	f003 0310 	and.w	r3, r3, #16
 8009310:	2b10      	cmp	r3, #16
 8009312:	d144      	bne.n	800939e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8009314:	78fa      	ldrb	r2, [r7, #3]
 8009316:	6879      	ldr	r1, [r7, #4]
 8009318:	4613      	mov	r3, r2
 800931a:	011b      	lsls	r3, r3, #4
 800931c:	1a9b      	subs	r3, r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	440b      	add	r3, r1
 8009322:	3344      	adds	r3, #68	@ 0x44
 8009324:	2200      	movs	r2, #0
 8009326:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8009328:	78fa      	ldrb	r2, [r7, #3]
 800932a:	6879      	ldr	r1, [r7, #4]
 800932c:	4613      	mov	r3, r2
 800932e:	011b      	lsls	r3, r3, #4
 8009330:	1a9b      	subs	r3, r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	440b      	add	r3, r1
 8009336:	334d      	adds	r3, #77	@ 0x4d
 8009338:	2204      	movs	r2, #4
 800933a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800933c:	78fa      	ldrb	r2, [r7, #3]
 800933e:	6879      	ldr	r1, [r7, #4]
 8009340:	4613      	mov	r3, r2
 8009342:	011b      	lsls	r3, r3, #4
 8009344:	1a9b      	subs	r3, r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	440b      	add	r3, r1
 800934a:	3319      	adds	r3, #25
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d114      	bne.n	800937c <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8009352:	78fa      	ldrb	r2, [r7, #3]
 8009354:	6879      	ldr	r1, [r7, #4]
 8009356:	4613      	mov	r3, r2
 8009358:	011b      	lsls	r3, r3, #4
 800935a:	1a9b      	subs	r3, r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	440b      	add	r3, r1
 8009360:	3318      	adds	r3, #24
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d109      	bne.n	800937c <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8009368:	78fa      	ldrb	r2, [r7, #3]
 800936a:	6879      	ldr	r1, [r7, #4]
 800936c:	4613      	mov	r3, r2
 800936e:	011b      	lsls	r3, r3, #4
 8009370:	1a9b      	subs	r3, r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	440b      	add	r3, r1
 8009376:	3319      	adds	r3, #25
 8009378:	2201      	movs	r2, #1
 800937a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	78fa      	ldrb	r2, [r7, #3]
 8009382:	4611      	mov	r1, r2
 8009384:	4618      	mov	r0, r3
 8009386:	f008 f81b 	bl	80113c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800938a:	78fb      	ldrb	r3, [r7, #3]
 800938c:	015a      	lsls	r2, r3, #5
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	4413      	add	r3, r2
 8009392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009396:	461a      	mov	r2, r3
 8009398:	2310      	movs	r3, #16
 800939a:	6093      	str	r3, [r2, #8]
 800939c:	e2a7      	b.n	80098ee <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	78fa      	ldrb	r2, [r7, #3]
 80093a4:	4611      	mov	r1, r2
 80093a6:	4618      	mov	r0, r3
 80093a8:	f007 ff8d 	bl	80112c6 <USB_ReadChInterrupts>
 80093ac:	4603      	mov	r3, r0
 80093ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093b2:	2b80      	cmp	r3, #128	@ 0x80
 80093b4:	f040 8083 	bne.w	80094be <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	799b      	ldrb	r3, [r3, #6]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d111      	bne.n	80093e4 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80093c0:	78fa      	ldrb	r2, [r7, #3]
 80093c2:	6879      	ldr	r1, [r7, #4]
 80093c4:	4613      	mov	r3, r2
 80093c6:	011b      	lsls	r3, r3, #4
 80093c8:	1a9b      	subs	r3, r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	440b      	add	r3, r1
 80093ce:	334d      	adds	r3, #77	@ 0x4d
 80093d0:	2207      	movs	r2, #7
 80093d2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	78fa      	ldrb	r2, [r7, #3]
 80093da:	4611      	mov	r1, r2
 80093dc:	4618      	mov	r0, r3
 80093de:	f007 ffef 	bl	80113c0 <USB_HC_Halt>
 80093e2:	e062      	b.n	80094aa <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80093e4:	78fa      	ldrb	r2, [r7, #3]
 80093e6:	6879      	ldr	r1, [r7, #4]
 80093e8:	4613      	mov	r3, r2
 80093ea:	011b      	lsls	r3, r3, #4
 80093ec:	1a9b      	subs	r3, r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	440b      	add	r3, r1
 80093f2:	3344      	adds	r3, #68	@ 0x44
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	1c59      	adds	r1, r3, #1
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	4613      	mov	r3, r2
 80093fc:	011b      	lsls	r3, r3, #4
 80093fe:	1a9b      	subs	r3, r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4403      	add	r3, r0
 8009404:	3344      	adds	r3, #68	@ 0x44
 8009406:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009408:	78fa      	ldrb	r2, [r7, #3]
 800940a:	6879      	ldr	r1, [r7, #4]
 800940c:	4613      	mov	r3, r2
 800940e:	011b      	lsls	r3, r3, #4
 8009410:	1a9b      	subs	r3, r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	440b      	add	r3, r1
 8009416:	3344      	adds	r3, #68	@ 0x44
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b02      	cmp	r3, #2
 800941c:	d922      	bls.n	8009464 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800941e:	78fa      	ldrb	r2, [r7, #3]
 8009420:	6879      	ldr	r1, [r7, #4]
 8009422:	4613      	mov	r3, r2
 8009424:	011b      	lsls	r3, r3, #4
 8009426:	1a9b      	subs	r3, r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	440b      	add	r3, r1
 800942c:	3344      	adds	r3, #68	@ 0x44
 800942e:	2200      	movs	r2, #0
 8009430:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8009432:	78fa      	ldrb	r2, [r7, #3]
 8009434:	6879      	ldr	r1, [r7, #4]
 8009436:	4613      	mov	r3, r2
 8009438:	011b      	lsls	r3, r3, #4
 800943a:	1a9b      	subs	r3, r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	440b      	add	r3, r1
 8009440:	334c      	adds	r3, #76	@ 0x4c
 8009442:	2204      	movs	r2, #4
 8009444:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009446:	78fa      	ldrb	r2, [r7, #3]
 8009448:	6879      	ldr	r1, [r7, #4]
 800944a:	4613      	mov	r3, r2
 800944c:	011b      	lsls	r3, r3, #4
 800944e:	1a9b      	subs	r3, r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	440b      	add	r3, r1
 8009454:	334c      	adds	r3, #76	@ 0x4c
 8009456:	781a      	ldrb	r2, [r3, #0]
 8009458:	78fb      	ldrb	r3, [r7, #3]
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f00d fe5b 	bl	8017118 <HAL_HCD_HC_NotifyURBChange_Callback>
 8009462:	e022      	b.n	80094aa <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009464:	78fa      	ldrb	r2, [r7, #3]
 8009466:	6879      	ldr	r1, [r7, #4]
 8009468:	4613      	mov	r3, r2
 800946a:	011b      	lsls	r3, r3, #4
 800946c:	1a9b      	subs	r3, r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	440b      	add	r3, r1
 8009472:	334c      	adds	r3, #76	@ 0x4c
 8009474:	2202      	movs	r2, #2
 8009476:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009478:	78fb      	ldrb	r3, [r7, #3]
 800947a:	015a      	lsls	r2, r3, #5
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	4413      	add	r3, r2
 8009480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800948e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009496:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009498:	78fb      	ldrb	r3, [r7, #3]
 800949a:	015a      	lsls	r2, r3, #5
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	4413      	add	r3, r2
 80094a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094a4:	461a      	mov	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80094aa:	78fb      	ldrb	r3, [r7, #3]
 80094ac:	015a      	lsls	r2, r3, #5
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	4413      	add	r3, r2
 80094b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094b6:	461a      	mov	r2, r3
 80094b8:	2380      	movs	r3, #128	@ 0x80
 80094ba:	6093      	str	r3, [r2, #8]
 80094bc:	e217      	b.n	80098ee <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	78fa      	ldrb	r2, [r7, #3]
 80094c4:	4611      	mov	r1, r2
 80094c6:	4618      	mov	r0, r3
 80094c8:	f007 fefd 	bl	80112c6 <USB_ReadChInterrupts>
 80094cc:	4603      	mov	r3, r0
 80094ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094d6:	d11b      	bne.n	8009510 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80094d8:	78fa      	ldrb	r2, [r7, #3]
 80094da:	6879      	ldr	r1, [r7, #4]
 80094dc:	4613      	mov	r3, r2
 80094de:	011b      	lsls	r3, r3, #4
 80094e0:	1a9b      	subs	r3, r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	440b      	add	r3, r1
 80094e6:	334d      	adds	r3, #77	@ 0x4d
 80094e8:	2209      	movs	r2, #9
 80094ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	78fa      	ldrb	r2, [r7, #3]
 80094f2:	4611      	mov	r1, r2
 80094f4:	4618      	mov	r0, r3
 80094f6:	f007 ff63 	bl	80113c0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80094fa:	78fb      	ldrb	r3, [r7, #3]
 80094fc:	015a      	lsls	r2, r3, #5
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	4413      	add	r3, r2
 8009502:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009506:	461a      	mov	r2, r3
 8009508:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800950c:	6093      	str	r3, [r2, #8]
 800950e:	e1ee      	b.n	80098ee <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	78fa      	ldrb	r2, [r7, #3]
 8009516:	4611      	mov	r1, r2
 8009518:	4618      	mov	r0, r3
 800951a:	f007 fed4 	bl	80112c6 <USB_ReadChInterrupts>
 800951e:	4603      	mov	r3, r0
 8009520:	f003 0302 	and.w	r3, r3, #2
 8009524:	2b02      	cmp	r3, #2
 8009526:	f040 81df 	bne.w	80098e8 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800952a:	78fb      	ldrb	r3, [r7, #3]
 800952c:	015a      	lsls	r2, r3, #5
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	4413      	add	r3, r2
 8009532:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009536:	461a      	mov	r2, r3
 8009538:	2302      	movs	r3, #2
 800953a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800953c:	78fa      	ldrb	r2, [r7, #3]
 800953e:	6879      	ldr	r1, [r7, #4]
 8009540:	4613      	mov	r3, r2
 8009542:	011b      	lsls	r3, r3, #4
 8009544:	1a9b      	subs	r3, r3, r2
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	440b      	add	r3, r1
 800954a:	334d      	adds	r3, #77	@ 0x4d
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	2b01      	cmp	r3, #1
 8009550:	f040 8093 	bne.w	800967a <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009554:	78fa      	ldrb	r2, [r7, #3]
 8009556:	6879      	ldr	r1, [r7, #4]
 8009558:	4613      	mov	r3, r2
 800955a:	011b      	lsls	r3, r3, #4
 800955c:	1a9b      	subs	r3, r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	440b      	add	r3, r1
 8009562:	334d      	adds	r3, #77	@ 0x4d
 8009564:	2202      	movs	r2, #2
 8009566:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009568:	78fa      	ldrb	r2, [r7, #3]
 800956a:	6879      	ldr	r1, [r7, #4]
 800956c:	4613      	mov	r3, r2
 800956e:	011b      	lsls	r3, r3, #4
 8009570:	1a9b      	subs	r3, r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	440b      	add	r3, r1
 8009576:	334c      	adds	r3, #76	@ 0x4c
 8009578:	2201      	movs	r2, #1
 800957a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800957c:	78fa      	ldrb	r2, [r7, #3]
 800957e:	6879      	ldr	r1, [r7, #4]
 8009580:	4613      	mov	r3, r2
 8009582:	011b      	lsls	r3, r3, #4
 8009584:	1a9b      	subs	r3, r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	440b      	add	r3, r1
 800958a:	3326      	adds	r3, #38	@ 0x26
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	2b02      	cmp	r3, #2
 8009590:	d00b      	beq.n	80095aa <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8009592:	78fa      	ldrb	r2, [r7, #3]
 8009594:	6879      	ldr	r1, [r7, #4]
 8009596:	4613      	mov	r3, r2
 8009598:	011b      	lsls	r3, r3, #4
 800959a:	1a9b      	subs	r3, r3, r2
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	440b      	add	r3, r1
 80095a0:	3326      	adds	r3, #38	@ 0x26
 80095a2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80095a4:	2b03      	cmp	r3, #3
 80095a6:	f040 8190 	bne.w	80098ca <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	799b      	ldrb	r3, [r3, #6]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d115      	bne.n	80095de <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80095b2:	78fa      	ldrb	r2, [r7, #3]
 80095b4:	6879      	ldr	r1, [r7, #4]
 80095b6:	4613      	mov	r3, r2
 80095b8:	011b      	lsls	r3, r3, #4
 80095ba:	1a9b      	subs	r3, r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	440b      	add	r3, r1
 80095c0:	333d      	adds	r3, #61	@ 0x3d
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	78fa      	ldrb	r2, [r7, #3]
 80095c6:	f083 0301 	eor.w	r3, r3, #1
 80095ca:	b2d8      	uxtb	r0, r3
 80095cc:	6879      	ldr	r1, [r7, #4]
 80095ce:	4613      	mov	r3, r2
 80095d0:	011b      	lsls	r3, r3, #4
 80095d2:	1a9b      	subs	r3, r3, r2
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	440b      	add	r3, r1
 80095d8:	333d      	adds	r3, #61	@ 0x3d
 80095da:	4602      	mov	r2, r0
 80095dc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	799b      	ldrb	r3, [r3, #6]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	f040 8171 	bne.w	80098ca <HCD_HC_OUT_IRQHandler+0x954>
 80095e8:	78fa      	ldrb	r2, [r7, #3]
 80095ea:	6879      	ldr	r1, [r7, #4]
 80095ec:	4613      	mov	r3, r2
 80095ee:	011b      	lsls	r3, r3, #4
 80095f0:	1a9b      	subs	r3, r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	440b      	add	r3, r1
 80095f6:	3334      	adds	r3, #52	@ 0x34
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f000 8165 	beq.w	80098ca <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8009600:	78fa      	ldrb	r2, [r7, #3]
 8009602:	6879      	ldr	r1, [r7, #4]
 8009604:	4613      	mov	r3, r2
 8009606:	011b      	lsls	r3, r3, #4
 8009608:	1a9b      	subs	r3, r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	440b      	add	r3, r1
 800960e:	3334      	adds	r3, #52	@ 0x34
 8009610:	6819      	ldr	r1, [r3, #0]
 8009612:	78fa      	ldrb	r2, [r7, #3]
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	4613      	mov	r3, r2
 8009618:	011b      	lsls	r3, r3, #4
 800961a:	1a9b      	subs	r3, r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	4403      	add	r3, r0
 8009620:	3328      	adds	r3, #40	@ 0x28
 8009622:	881b      	ldrh	r3, [r3, #0]
 8009624:	440b      	add	r3, r1
 8009626:	1e59      	subs	r1, r3, #1
 8009628:	78fa      	ldrb	r2, [r7, #3]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	4613      	mov	r3, r2
 800962e:	011b      	lsls	r3, r3, #4
 8009630:	1a9b      	subs	r3, r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	4403      	add	r3, r0
 8009636:	3328      	adds	r3, #40	@ 0x28
 8009638:	881b      	ldrh	r3, [r3, #0]
 800963a:	fbb1 f3f3 	udiv	r3, r1, r3
 800963e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	f003 0301 	and.w	r3, r3, #1
 8009646:	2b00      	cmp	r3, #0
 8009648:	f000 813f 	beq.w	80098ca <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800964c:	78fa      	ldrb	r2, [r7, #3]
 800964e:	6879      	ldr	r1, [r7, #4]
 8009650:	4613      	mov	r3, r2
 8009652:	011b      	lsls	r3, r3, #4
 8009654:	1a9b      	subs	r3, r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	440b      	add	r3, r1
 800965a:	333d      	adds	r3, #61	@ 0x3d
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	78fa      	ldrb	r2, [r7, #3]
 8009660:	f083 0301 	eor.w	r3, r3, #1
 8009664:	b2d8      	uxtb	r0, r3
 8009666:	6879      	ldr	r1, [r7, #4]
 8009668:	4613      	mov	r3, r2
 800966a:	011b      	lsls	r3, r3, #4
 800966c:	1a9b      	subs	r3, r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	440b      	add	r3, r1
 8009672:	333d      	adds	r3, #61	@ 0x3d
 8009674:	4602      	mov	r2, r0
 8009676:	701a      	strb	r2, [r3, #0]
 8009678:	e127      	b.n	80098ca <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800967a:	78fa      	ldrb	r2, [r7, #3]
 800967c:	6879      	ldr	r1, [r7, #4]
 800967e:	4613      	mov	r3, r2
 8009680:	011b      	lsls	r3, r3, #4
 8009682:	1a9b      	subs	r3, r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	440b      	add	r3, r1
 8009688:	334d      	adds	r3, #77	@ 0x4d
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	2b03      	cmp	r3, #3
 800968e:	d120      	bne.n	80096d2 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009690:	78fa      	ldrb	r2, [r7, #3]
 8009692:	6879      	ldr	r1, [r7, #4]
 8009694:	4613      	mov	r3, r2
 8009696:	011b      	lsls	r3, r3, #4
 8009698:	1a9b      	subs	r3, r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	440b      	add	r3, r1
 800969e:	334d      	adds	r3, #77	@ 0x4d
 80096a0:	2202      	movs	r2, #2
 80096a2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80096a4:	78fa      	ldrb	r2, [r7, #3]
 80096a6:	6879      	ldr	r1, [r7, #4]
 80096a8:	4613      	mov	r3, r2
 80096aa:	011b      	lsls	r3, r3, #4
 80096ac:	1a9b      	subs	r3, r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	440b      	add	r3, r1
 80096b2:	331b      	adds	r3, #27
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	f040 8107 	bne.w	80098ca <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80096bc:	78fa      	ldrb	r2, [r7, #3]
 80096be:	6879      	ldr	r1, [r7, #4]
 80096c0:	4613      	mov	r3, r2
 80096c2:	011b      	lsls	r3, r3, #4
 80096c4:	1a9b      	subs	r3, r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	440b      	add	r3, r1
 80096ca:	334c      	adds	r3, #76	@ 0x4c
 80096cc:	2202      	movs	r2, #2
 80096ce:	701a      	strb	r2, [r3, #0]
 80096d0:	e0fb      	b.n	80098ca <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80096d2:	78fa      	ldrb	r2, [r7, #3]
 80096d4:	6879      	ldr	r1, [r7, #4]
 80096d6:	4613      	mov	r3, r2
 80096d8:	011b      	lsls	r3, r3, #4
 80096da:	1a9b      	subs	r3, r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	440b      	add	r3, r1
 80096e0:	334d      	adds	r3, #77	@ 0x4d
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	2b04      	cmp	r3, #4
 80096e6:	d13a      	bne.n	800975e <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80096e8:	78fa      	ldrb	r2, [r7, #3]
 80096ea:	6879      	ldr	r1, [r7, #4]
 80096ec:	4613      	mov	r3, r2
 80096ee:	011b      	lsls	r3, r3, #4
 80096f0:	1a9b      	subs	r3, r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	440b      	add	r3, r1
 80096f6:	334d      	adds	r3, #77	@ 0x4d
 80096f8:	2202      	movs	r2, #2
 80096fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80096fc:	78fa      	ldrb	r2, [r7, #3]
 80096fe:	6879      	ldr	r1, [r7, #4]
 8009700:	4613      	mov	r3, r2
 8009702:	011b      	lsls	r3, r3, #4
 8009704:	1a9b      	subs	r3, r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	440b      	add	r3, r1
 800970a:	334c      	adds	r3, #76	@ 0x4c
 800970c:	2202      	movs	r2, #2
 800970e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009710:	78fa      	ldrb	r2, [r7, #3]
 8009712:	6879      	ldr	r1, [r7, #4]
 8009714:	4613      	mov	r3, r2
 8009716:	011b      	lsls	r3, r3, #4
 8009718:	1a9b      	subs	r3, r3, r2
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	440b      	add	r3, r1
 800971e:	331b      	adds	r3, #27
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	2b01      	cmp	r3, #1
 8009724:	f040 80d1 	bne.w	80098ca <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8009728:	78fa      	ldrb	r2, [r7, #3]
 800972a:	6879      	ldr	r1, [r7, #4]
 800972c:	4613      	mov	r3, r2
 800972e:	011b      	lsls	r3, r3, #4
 8009730:	1a9b      	subs	r3, r3, r2
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	440b      	add	r3, r1
 8009736:	331b      	adds	r3, #27
 8009738:	2200      	movs	r2, #0
 800973a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800973c:	78fb      	ldrb	r3, [r7, #3]
 800973e:	015a      	lsls	r2, r3, #5
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	4413      	add	r3, r2
 8009744:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	78fa      	ldrb	r2, [r7, #3]
 800974c:	0151      	lsls	r1, r2, #5
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	440a      	add	r2, r1
 8009752:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800975a:	6053      	str	r3, [r2, #4]
 800975c:	e0b5      	b.n	80098ca <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800975e:	78fa      	ldrb	r2, [r7, #3]
 8009760:	6879      	ldr	r1, [r7, #4]
 8009762:	4613      	mov	r3, r2
 8009764:	011b      	lsls	r3, r3, #4
 8009766:	1a9b      	subs	r3, r3, r2
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	440b      	add	r3, r1
 800976c:	334d      	adds	r3, #77	@ 0x4d
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	2b05      	cmp	r3, #5
 8009772:	d114      	bne.n	800979e <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009774:	78fa      	ldrb	r2, [r7, #3]
 8009776:	6879      	ldr	r1, [r7, #4]
 8009778:	4613      	mov	r3, r2
 800977a:	011b      	lsls	r3, r3, #4
 800977c:	1a9b      	subs	r3, r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	440b      	add	r3, r1
 8009782:	334d      	adds	r3, #77	@ 0x4d
 8009784:	2202      	movs	r2, #2
 8009786:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8009788:	78fa      	ldrb	r2, [r7, #3]
 800978a:	6879      	ldr	r1, [r7, #4]
 800978c:	4613      	mov	r3, r2
 800978e:	011b      	lsls	r3, r3, #4
 8009790:	1a9b      	subs	r3, r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	440b      	add	r3, r1
 8009796:	334c      	adds	r3, #76	@ 0x4c
 8009798:	2202      	movs	r2, #2
 800979a:	701a      	strb	r2, [r3, #0]
 800979c:	e095      	b.n	80098ca <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800979e:	78fa      	ldrb	r2, [r7, #3]
 80097a0:	6879      	ldr	r1, [r7, #4]
 80097a2:	4613      	mov	r3, r2
 80097a4:	011b      	lsls	r3, r3, #4
 80097a6:	1a9b      	subs	r3, r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	440b      	add	r3, r1
 80097ac:	334d      	adds	r3, #77	@ 0x4d
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	2b06      	cmp	r3, #6
 80097b2:	d114      	bne.n	80097de <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80097b4:	78fa      	ldrb	r2, [r7, #3]
 80097b6:	6879      	ldr	r1, [r7, #4]
 80097b8:	4613      	mov	r3, r2
 80097ba:	011b      	lsls	r3, r3, #4
 80097bc:	1a9b      	subs	r3, r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	440b      	add	r3, r1
 80097c2:	334d      	adds	r3, #77	@ 0x4d
 80097c4:	2202      	movs	r2, #2
 80097c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80097c8:	78fa      	ldrb	r2, [r7, #3]
 80097ca:	6879      	ldr	r1, [r7, #4]
 80097cc:	4613      	mov	r3, r2
 80097ce:	011b      	lsls	r3, r3, #4
 80097d0:	1a9b      	subs	r3, r3, r2
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	440b      	add	r3, r1
 80097d6:	334c      	adds	r3, #76	@ 0x4c
 80097d8:	2205      	movs	r2, #5
 80097da:	701a      	strb	r2, [r3, #0]
 80097dc:	e075      	b.n	80098ca <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80097de:	78fa      	ldrb	r2, [r7, #3]
 80097e0:	6879      	ldr	r1, [r7, #4]
 80097e2:	4613      	mov	r3, r2
 80097e4:	011b      	lsls	r3, r3, #4
 80097e6:	1a9b      	subs	r3, r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	440b      	add	r3, r1
 80097ec:	334d      	adds	r3, #77	@ 0x4d
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	2b07      	cmp	r3, #7
 80097f2:	d00a      	beq.n	800980a <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80097f4:	78fa      	ldrb	r2, [r7, #3]
 80097f6:	6879      	ldr	r1, [r7, #4]
 80097f8:	4613      	mov	r3, r2
 80097fa:	011b      	lsls	r3, r3, #4
 80097fc:	1a9b      	subs	r3, r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	440b      	add	r3, r1
 8009802:	334d      	adds	r3, #77	@ 0x4d
 8009804:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009806:	2b09      	cmp	r3, #9
 8009808:	d170      	bne.n	80098ec <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800980a:	78fa      	ldrb	r2, [r7, #3]
 800980c:	6879      	ldr	r1, [r7, #4]
 800980e:	4613      	mov	r3, r2
 8009810:	011b      	lsls	r3, r3, #4
 8009812:	1a9b      	subs	r3, r3, r2
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	440b      	add	r3, r1
 8009818:	334d      	adds	r3, #77	@ 0x4d
 800981a:	2202      	movs	r2, #2
 800981c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800981e:	78fa      	ldrb	r2, [r7, #3]
 8009820:	6879      	ldr	r1, [r7, #4]
 8009822:	4613      	mov	r3, r2
 8009824:	011b      	lsls	r3, r3, #4
 8009826:	1a9b      	subs	r3, r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	440b      	add	r3, r1
 800982c:	3344      	adds	r3, #68	@ 0x44
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	1c59      	adds	r1, r3, #1
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	4613      	mov	r3, r2
 8009836:	011b      	lsls	r3, r3, #4
 8009838:	1a9b      	subs	r3, r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4403      	add	r3, r0
 800983e:	3344      	adds	r3, #68	@ 0x44
 8009840:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009842:	78fa      	ldrb	r2, [r7, #3]
 8009844:	6879      	ldr	r1, [r7, #4]
 8009846:	4613      	mov	r3, r2
 8009848:	011b      	lsls	r3, r3, #4
 800984a:	1a9b      	subs	r3, r3, r2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	440b      	add	r3, r1
 8009850:	3344      	adds	r3, #68	@ 0x44
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b02      	cmp	r3, #2
 8009856:	d914      	bls.n	8009882 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8009858:	78fa      	ldrb	r2, [r7, #3]
 800985a:	6879      	ldr	r1, [r7, #4]
 800985c:	4613      	mov	r3, r2
 800985e:	011b      	lsls	r3, r3, #4
 8009860:	1a9b      	subs	r3, r3, r2
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	440b      	add	r3, r1
 8009866:	3344      	adds	r3, #68	@ 0x44
 8009868:	2200      	movs	r2, #0
 800986a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800986c:	78fa      	ldrb	r2, [r7, #3]
 800986e:	6879      	ldr	r1, [r7, #4]
 8009870:	4613      	mov	r3, r2
 8009872:	011b      	lsls	r3, r3, #4
 8009874:	1a9b      	subs	r3, r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	440b      	add	r3, r1
 800987a:	334c      	adds	r3, #76	@ 0x4c
 800987c:	2204      	movs	r2, #4
 800987e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009880:	e022      	b.n	80098c8 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009882:	78fa      	ldrb	r2, [r7, #3]
 8009884:	6879      	ldr	r1, [r7, #4]
 8009886:	4613      	mov	r3, r2
 8009888:	011b      	lsls	r3, r3, #4
 800988a:	1a9b      	subs	r3, r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	440b      	add	r3, r1
 8009890:	334c      	adds	r3, #76	@ 0x4c
 8009892:	2202      	movs	r2, #2
 8009894:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009896:	78fb      	ldrb	r3, [r7, #3]
 8009898:	015a      	lsls	r2, r3, #5
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	4413      	add	r3, r2
 800989e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80098ac:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80098b4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80098b6:	78fb      	ldrb	r3, [r7, #3]
 80098b8:	015a      	lsls	r2, r3, #5
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	4413      	add	r3, r2
 80098be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098c2:	461a      	mov	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80098c8:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80098ca:	78fa      	ldrb	r2, [r7, #3]
 80098cc:	6879      	ldr	r1, [r7, #4]
 80098ce:	4613      	mov	r3, r2
 80098d0:	011b      	lsls	r3, r3, #4
 80098d2:	1a9b      	subs	r3, r3, r2
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	440b      	add	r3, r1
 80098d8:	334c      	adds	r3, #76	@ 0x4c
 80098da:	781a      	ldrb	r2, [r3, #0]
 80098dc:	78fb      	ldrb	r3, [r7, #3]
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f00d fc19 	bl	8017118 <HAL_HCD_HC_NotifyURBChange_Callback>
 80098e6:	e002      	b.n	80098ee <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80098e8:	bf00      	nop
 80098ea:	e000      	b.n	80098ee <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80098ec:	bf00      	nop
  }
}
 80098ee:	3718      	adds	r7, #24
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b08a      	sub	sp, #40	@ 0x28
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009904:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	6a1b      	ldr	r3, [r3, #32]
 800990c:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	f003 030f 	and.w	r3, r3, #15
 8009914:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	0c5b      	lsrs	r3, r3, #17
 800991a:	f003 030f 	and.w	r3, r3, #15
 800991e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	091b      	lsrs	r3, r3, #4
 8009924:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009928:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	2b02      	cmp	r3, #2
 800992e:	d004      	beq.n	800993a <HCD_RXQLVL_IRQHandler+0x46>
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	2b05      	cmp	r3, #5
 8009934:	f000 80b6 	beq.w	8009aa4 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8009938:	e0b7      	b.n	8009aaa <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	2b00      	cmp	r3, #0
 800993e:	f000 80b3 	beq.w	8009aa8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8009942:	6879      	ldr	r1, [r7, #4]
 8009944:	69ba      	ldr	r2, [r7, #24]
 8009946:	4613      	mov	r3, r2
 8009948:	011b      	lsls	r3, r3, #4
 800994a:	1a9b      	subs	r3, r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	440b      	add	r3, r1
 8009950:	332c      	adds	r3, #44	@ 0x2c
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	f000 80a7 	beq.w	8009aa8 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800995a:	6879      	ldr	r1, [r7, #4]
 800995c:	69ba      	ldr	r2, [r7, #24]
 800995e:	4613      	mov	r3, r2
 8009960:	011b      	lsls	r3, r3, #4
 8009962:	1a9b      	subs	r3, r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	440b      	add	r3, r1
 8009968:	3338      	adds	r3, #56	@ 0x38
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	18d1      	adds	r1, r2, r3
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	69ba      	ldr	r2, [r7, #24]
 8009974:	4613      	mov	r3, r2
 8009976:	011b      	lsls	r3, r3, #4
 8009978:	1a9b      	subs	r3, r3, r2
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	4403      	add	r3, r0
 800997e:	3334      	adds	r3, #52	@ 0x34
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4299      	cmp	r1, r3
 8009984:	f200 8083 	bhi.w	8009a8e <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6818      	ldr	r0, [r3, #0]
 800998c:	6879      	ldr	r1, [r7, #4]
 800998e:	69ba      	ldr	r2, [r7, #24]
 8009990:	4613      	mov	r3, r2
 8009992:	011b      	lsls	r3, r3, #4
 8009994:	1a9b      	subs	r3, r3, r2
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	440b      	add	r3, r1
 800999a:	332c      	adds	r3, #44	@ 0x2c
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	693a      	ldr	r2, [r7, #16]
 80099a0:	b292      	uxth	r2, r2
 80099a2:	4619      	mov	r1, r3
 80099a4:	f007 fc24 	bl	80111f0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80099a8:	6879      	ldr	r1, [r7, #4]
 80099aa:	69ba      	ldr	r2, [r7, #24]
 80099ac:	4613      	mov	r3, r2
 80099ae:	011b      	lsls	r3, r3, #4
 80099b0:	1a9b      	subs	r3, r3, r2
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	440b      	add	r3, r1
 80099b6:	332c      	adds	r3, #44	@ 0x2c
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	18d1      	adds	r1, r2, r3
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	69ba      	ldr	r2, [r7, #24]
 80099c2:	4613      	mov	r3, r2
 80099c4:	011b      	lsls	r3, r3, #4
 80099c6:	1a9b      	subs	r3, r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	4403      	add	r3, r0
 80099cc:	332c      	adds	r3, #44	@ 0x2c
 80099ce:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80099d0:	6879      	ldr	r1, [r7, #4]
 80099d2:	69ba      	ldr	r2, [r7, #24]
 80099d4:	4613      	mov	r3, r2
 80099d6:	011b      	lsls	r3, r3, #4
 80099d8:	1a9b      	subs	r3, r3, r2
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	440b      	add	r3, r1
 80099de:	3338      	adds	r3, #56	@ 0x38
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	18d1      	adds	r1, r2, r3
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	69ba      	ldr	r2, [r7, #24]
 80099ea:	4613      	mov	r3, r2
 80099ec:	011b      	lsls	r3, r3, #4
 80099ee:	1a9b      	subs	r3, r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4403      	add	r3, r0
 80099f4:	3338      	adds	r3, #56	@ 0x38
 80099f6:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	015a      	lsls	r2, r3, #5
 80099fc:	6a3b      	ldr	r3, [r7, #32]
 80099fe:	4413      	add	r3, r2
 8009a00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	0cdb      	lsrs	r3, r3, #19
 8009a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a0c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8009a0e:	6879      	ldr	r1, [r7, #4]
 8009a10:	69ba      	ldr	r2, [r7, #24]
 8009a12:	4613      	mov	r3, r2
 8009a14:	011b      	lsls	r3, r3, #4
 8009a16:	1a9b      	subs	r3, r3, r2
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	440b      	add	r3, r1
 8009a1c:	3328      	adds	r3, #40	@ 0x28
 8009a1e:	881b      	ldrh	r3, [r3, #0]
 8009a20:	461a      	mov	r2, r3
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d13f      	bne.n	8009aa8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d03c      	beq.n	8009aa8 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	015a      	lsls	r2, r3, #5
 8009a32:	6a3b      	ldr	r3, [r7, #32]
 8009a34:	4413      	add	r3, r2
 8009a36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009a44:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009a4c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	015a      	lsls	r2, r3, #5
 8009a52:	6a3b      	ldr	r3, [r7, #32]
 8009a54:	4413      	add	r3, r2
 8009a56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8009a60:	6879      	ldr	r1, [r7, #4]
 8009a62:	69ba      	ldr	r2, [r7, #24]
 8009a64:	4613      	mov	r3, r2
 8009a66:	011b      	lsls	r3, r3, #4
 8009a68:	1a9b      	subs	r3, r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	440b      	add	r3, r1
 8009a6e:	333c      	adds	r3, #60	@ 0x3c
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	f083 0301 	eor.w	r3, r3, #1
 8009a76:	b2d8      	uxtb	r0, r3
 8009a78:	6879      	ldr	r1, [r7, #4]
 8009a7a:	69ba      	ldr	r2, [r7, #24]
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	011b      	lsls	r3, r3, #4
 8009a80:	1a9b      	subs	r3, r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	440b      	add	r3, r1
 8009a86:	333c      	adds	r3, #60	@ 0x3c
 8009a88:	4602      	mov	r2, r0
 8009a8a:	701a      	strb	r2, [r3, #0]
      break;
 8009a8c:	e00c      	b.n	8009aa8 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8009a8e:	6879      	ldr	r1, [r7, #4]
 8009a90:	69ba      	ldr	r2, [r7, #24]
 8009a92:	4613      	mov	r3, r2
 8009a94:	011b      	lsls	r3, r3, #4
 8009a96:	1a9b      	subs	r3, r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	440b      	add	r3, r1
 8009a9c:	334c      	adds	r3, #76	@ 0x4c
 8009a9e:	2204      	movs	r2, #4
 8009aa0:	701a      	strb	r2, [r3, #0]
      break;
 8009aa2:	e001      	b.n	8009aa8 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8009aa4:	bf00      	nop
 8009aa6:	e000      	b.n	8009aaa <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8009aa8:	bf00      	nop
  }
}
 8009aaa:	bf00      	nop
 8009aac:	3728      	adds	r7, #40	@ 0x28
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b086      	sub	sp, #24
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009ade:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f003 0302 	and.w	r3, r3, #2
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d10b      	bne.n	8009b02 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f003 0301 	and.w	r3, r3, #1
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d102      	bne.n	8009afa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f00d faf3 	bl	80170e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	f043 0302 	orr.w	r3, r3, #2
 8009b00:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f003 0308 	and.w	r3, r3, #8
 8009b08:	2b08      	cmp	r3, #8
 8009b0a:	d132      	bne.n	8009b72 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	f043 0308 	orr.w	r3, r3, #8
 8009b12:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f003 0304 	and.w	r3, r3, #4
 8009b1a:	2b04      	cmp	r3, #4
 8009b1c:	d126      	bne.n	8009b6c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	7a5b      	ldrb	r3, [r3, #9]
 8009b22:	2b02      	cmp	r3, #2
 8009b24:	d113      	bne.n	8009b4e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8009b2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009b30:	d106      	bne.n	8009b40 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2102      	movs	r1, #2
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f007 fbf3 	bl	8011324 <USB_InitFSLSPClkSel>
 8009b3e:	e011      	b.n	8009b64 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2101      	movs	r1, #1
 8009b46:	4618      	mov	r0, r3
 8009b48:	f007 fbec 	bl	8011324 <USB_InitFSLSPClkSel>
 8009b4c:	e00a      	b.n	8009b64 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	79db      	ldrb	r3, [r3, #7]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d106      	bne.n	8009b64 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8009b62:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f00d fae9 	bl	801713c <HAL_HCD_PortEnabled_Callback>
 8009b6a:	e002      	b.n	8009b72 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f00d faf3 	bl	8017158 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f003 0320 	and.w	r3, r3, #32
 8009b78:	2b20      	cmp	r3, #32
 8009b7a:	d103      	bne.n	8009b84 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	f043 0320 	orr.w	r3, r3, #32
 8009b82:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	6013      	str	r3, [r2, #0]
}
 8009b90:	bf00      	nop
 8009b92:	3718      	adds	r7, #24
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d101      	bne.n	8009baa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e08b      	b.n	8009cc2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d106      	bne.n	8009bc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7fa fb56 	bl	8004270 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2224      	movs	r2, #36	@ 0x24
 8009bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f022 0201 	bic.w	r2, r2, #1
 8009bda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685a      	ldr	r2, [r3, #4]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009be8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	689a      	ldr	r2, [r3, #8]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009bf8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d107      	bne.n	8009c12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	689a      	ldr	r2, [r3, #8]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009c0e:	609a      	str	r2, [r3, #8]
 8009c10:	e006      	b.n	8009c20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	689a      	ldr	r2, [r3, #8]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009c1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d108      	bne.n	8009c3a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	685a      	ldr	r2, [r3, #4]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c36:	605a      	str	r2, [r3, #4]
 8009c38:	e007      	b.n	8009c4a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	685a      	ldr	r2, [r3, #4]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009c48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	6859      	ldr	r1, [r3, #4]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	4b1d      	ldr	r3, [pc, #116]	@ (8009ccc <HAL_I2C_Init+0x134>)
 8009c56:	430b      	orrs	r3, r1
 8009c58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68da      	ldr	r2, [r3, #12]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009c68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	691a      	ldr	r2, [r3, #16]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	695b      	ldr	r3, [r3, #20]
 8009c72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	699b      	ldr	r3, [r3, #24]
 8009c7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	430a      	orrs	r2, r1
 8009c82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	69d9      	ldr	r1, [r3, #28]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6a1a      	ldr	r2, [r3, #32]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	430a      	orrs	r2, r1
 8009c92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f042 0201 	orr.w	r2, r2, #1
 8009ca2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2220      	movs	r2, #32
 8009cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	02008000 	.word	0x02008000

08009cd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	2b20      	cmp	r3, #32
 8009ce4:	d138      	bne.n	8009d58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d101      	bne.n	8009cf4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009cf0:	2302      	movs	r3, #2
 8009cf2:	e032      	b.n	8009d5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2224      	movs	r2, #36	@ 0x24
 8009d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f022 0201 	bic.w	r2, r2, #1
 8009d12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009d22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	6819      	ldr	r1, [r3, #0]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	683a      	ldr	r2, [r7, #0]
 8009d30:	430a      	orrs	r2, r1
 8009d32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f042 0201 	orr.w	r2, r2, #1
 8009d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2220      	movs	r2, #32
 8009d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009d54:	2300      	movs	r3, #0
 8009d56:	e000      	b.n	8009d5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009d58:	2302      	movs	r3, #2
  }
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	370c      	adds	r7, #12
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009d66:	b480      	push	{r7}
 8009d68:	b085      	sub	sp, #20
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	2b20      	cmp	r3, #32
 8009d7a:	d139      	bne.n	8009df0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d101      	bne.n	8009d8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009d86:	2302      	movs	r3, #2
 8009d88:	e033      	b.n	8009df2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2224      	movs	r2, #36	@ 0x24
 8009d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f022 0201 	bic.w	r2, r2, #1
 8009da8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009db8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	021b      	lsls	r3, r3, #8
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f042 0201 	orr.w	r2, r2, #1
 8009dda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2220      	movs	r2, #32
 8009de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	e000      	b.n	8009df2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009df0:	2302      	movs	r3, #2
  }
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3714      	adds	r7, #20
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr

08009dfe <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b084      	sub	sp, #16
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d101      	bne.n	8009e10 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	e08f      	b.n	8009f30 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d106      	bne.n	8009e2a <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f7fa facb 	bl	80043c0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2202      	movs	r2, #2
 8009e2e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	699a      	ldr	r2, [r3, #24]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009e40:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	6999      	ldr	r1, [r3, #24]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	685a      	ldr	r2, [r3, #4]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009e56:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	430a      	orrs	r2, r1
 8009e64:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	695b      	ldr	r3, [r3, #20]
 8009e6a:	041b      	lsls	r3, r3, #16
 8009e6c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6999      	ldr	r1, [r3, #24]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	69db      	ldr	r3, [r3, #28]
 8009e80:	041b      	lsls	r3, r3, #16
 8009e82:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a19      	ldr	r1, [r3, #32]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	430a      	orrs	r2, r1
 8009e90:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e96:	041b      	lsls	r3, r3, #16
 8009e98:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68fa      	ldr	r2, [r7, #12]
 8009ea4:	430a      	orrs	r2, r1
 8009ea6:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eac:	041b      	lsls	r3, r3, #16
 8009eae:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	430a      	orrs	r2, r1
 8009ebc:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009ec4:	021b      	lsls	r3, r3, #8
 8009ec6:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009ece:	041b      	lsls	r3, r3, #16
 8009ed0:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8009ef4:	431a      	orrs	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	430a      	orrs	r2, r1
 8009efc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f042 0206 	orr.w	r2, r2, #6
 8009f0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	699a      	ldr	r2, [r3, #24]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f042 0201 	orr.w	r2, r2, #1
 8009f1c:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f46:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f4e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f003 0304 	and.w	r3, r3, #4
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d023      	beq.n	8009fa2 <HAL_LTDC_IRQHandler+0x6a>
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	f003 0304 	and.w	r3, r3, #4
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d01e      	beq.n	8009fa2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f022 0204 	bic.w	r2, r2, #4
 8009f72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2204      	movs	r2, #4
 8009f7a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f82:	f043 0201 	orr.w	r2, r3, #1
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2204      	movs	r2, #4
 8009f90:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f86f 	bl	800a080 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f003 0302 	and.w	r3, r3, #2
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d023      	beq.n	8009ff4 <HAL_LTDC_IRQHandler+0xbc>
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	f003 0302 	and.w	r3, r3, #2
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d01e      	beq.n	8009ff4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f022 0202 	bic.w	r2, r2, #2
 8009fc4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2202      	movs	r2, #2
 8009fcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009fd4:	f043 0202 	orr.w	r2, r3, #2
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2204      	movs	r2, #4
 8009fe2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 f846 	bl	800a080 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f003 0301 	and.w	r3, r3, #1
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d01b      	beq.n	800a036 <HAL_LTDC_IRQHandler+0xfe>
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	f003 0301 	and.w	r3, r3, #1
 800a004:	2b00      	cmp	r3, #0
 800a006:	d016      	beq.n	800a036 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f022 0201 	bic.w	r2, r2, #1
 800a016:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2201      	movs	r2, #1
 800a01e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f82f 	bl	800a094 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f003 0308 	and.w	r3, r3, #8
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d01b      	beq.n	800a078 <HAL_LTDC_IRQHandler+0x140>
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	f003 0308 	and.w	r3, r3, #8
 800a046:	2b00      	cmp	r3, #0
 800a048:	d016      	beq.n	800a078 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f022 0208 	bic.w	r2, r2, #8
 800a058:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2208      	movs	r2, #8
 800a060:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2201      	movs	r2, #1
 800a066:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f818 	bl	800a0a8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a078:	bf00      	nop
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800a09c:	bf00      	nop
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a0b0:	bf00      	nop
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a0bc:	b5b0      	push	{r4, r5, r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d101      	bne.n	800a0d6 <HAL_LTDC_ConfigLayer+0x1a>
 800a0d2:	2302      	movs	r3, #2
 800a0d4:	e02c      	b.n	800a130 <HAL_LTDC_ConfigLayer+0x74>
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2202      	movs	r2, #2
 800a0e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2134      	movs	r1, #52	@ 0x34
 800a0ec:	fb01 f303 	mul.w	r3, r1, r3
 800a0f0:	4413      	add	r3, r2
 800a0f2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	4614      	mov	r4, r2
 800a0fa:	461d      	mov	r5, r3
 800a0fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a108:	682b      	ldr	r3, [r5, #0]
 800a10a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	68b9      	ldr	r1, [r7, #8]
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f000 f811 	bl	800a138 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2201      	movs	r2, #1
 800a11c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bdb0      	pop	{r4, r5, r7, pc}

0800a138 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a138:	b480      	push	{r7}
 800a13a:	b089      	sub	sp, #36	@ 0x24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	685a      	ldr	r2, [r3, #4]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	0c1b      	lsrs	r3, r3, #16
 800a150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a154:	4413      	add	r3, r2
 800a156:	041b      	lsls	r3, r3, #16
 800a158:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	461a      	mov	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	01db      	lsls	r3, r3, #7
 800a164:	4413      	add	r3, r2
 800a166:	3384      	adds	r3, #132	@ 0x84
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	6812      	ldr	r2, [r2, #0]
 800a16e:	4611      	mov	r1, r2
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	01d2      	lsls	r2, r2, #7
 800a174:	440a      	add	r2, r1
 800a176:	3284      	adds	r2, #132	@ 0x84
 800a178:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a17c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	0c1b      	lsrs	r3, r3, #16
 800a18a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a18e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a190:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4619      	mov	r1, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	01db      	lsls	r3, r3, #7
 800a19c:	440b      	add	r3, r1
 800a19e:	3384      	adds	r3, #132	@ 0x84
 800a1a0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a1a6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	68da      	ldr	r2, [r3, #12]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a1b6:	4413      	add	r3, r2
 800a1b8:	041b      	lsls	r3, r3, #16
 800a1ba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	01db      	lsls	r3, r3, #7
 800a1c6:	4413      	add	r3, r2
 800a1c8:	3384      	adds	r3, #132	@ 0x84
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	6812      	ldr	r2, [r2, #0]
 800a1d0:	4611      	mov	r1, r2
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	01d2      	lsls	r2, r2, #7
 800a1d6:	440a      	add	r2, r1
 800a1d8:	3284      	adds	r2, #132	@ 0x84
 800a1da:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a1de:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	689a      	ldr	r2, [r3, #8]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a1ee:	4413      	add	r3, r2
 800a1f0:	1c5a      	adds	r2, r3, #1
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	01db      	lsls	r3, r3, #7
 800a1fc:	440b      	add	r3, r1
 800a1fe:	3384      	adds	r3, #132	@ 0x84
 800a200:	4619      	mov	r1, r3
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	4313      	orrs	r3, r2
 800a206:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	461a      	mov	r2, r3
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	01db      	lsls	r3, r3, #7
 800a212:	4413      	add	r3, r2
 800a214:	3384      	adds	r3, #132	@ 0x84
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	6812      	ldr	r2, [r2, #0]
 800a21c:	4611      	mov	r1, r2
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	01d2      	lsls	r2, r2, #7
 800a222:	440a      	add	r2, r1
 800a224:	3284      	adds	r2, #132	@ 0x84
 800a226:	f023 0307 	bic.w	r3, r3, #7
 800a22a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	461a      	mov	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	01db      	lsls	r3, r3, #7
 800a236:	4413      	add	r3, r2
 800a238:	3384      	adds	r3, #132	@ 0x84
 800a23a:	461a      	mov	r2, r3
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a248:	021b      	lsls	r3, r3, #8
 800a24a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a252:	041b      	lsls	r3, r3, #16
 800a254:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	061b      	lsls	r3, r3, #24
 800a25c:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a264:	461a      	mov	r2, r3
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	431a      	orrs	r2, r3
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	431a      	orrs	r2, r3
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4619      	mov	r1, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	01db      	lsls	r3, r3, #7
 800a278:	440b      	add	r3, r1
 800a27a:	3384      	adds	r3, #132	@ 0x84
 800a27c:	4619      	mov	r1, r3
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	4313      	orrs	r3, r2
 800a282:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	461a      	mov	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	01db      	lsls	r3, r3, #7
 800a28e:	4413      	add	r3, r2
 800a290:	3384      	adds	r3, #132	@ 0x84
 800a292:	695b      	ldr	r3, [r3, #20]
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	6812      	ldr	r2, [r2, #0]
 800a298:	4611      	mov	r1, r2
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	01d2      	lsls	r2, r2, #7
 800a29e:	440a      	add	r2, r1
 800a2a0:	3284      	adds	r2, #132	@ 0x84
 800a2a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a2a6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	01db      	lsls	r3, r3, #7
 800a2b2:	4413      	add	r3, r2
 800a2b4:	3384      	adds	r3, #132	@ 0x84
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	695b      	ldr	r3, [r3, #20]
 800a2bc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	01db      	lsls	r3, r3, #7
 800a2c8:	4413      	add	r3, r2
 800a2ca:	3384      	adds	r3, #132	@ 0x84
 800a2cc:	69da      	ldr	r2, [r3, #28]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	01db      	lsls	r3, r3, #7
 800a2d8:	440b      	add	r3, r1
 800a2da:	3384      	adds	r3, #132	@ 0x84
 800a2dc:	4619      	mov	r1, r3
 800a2de:	4b4f      	ldr	r3, [pc, #316]	@ (800a41c <LTDC_SetConfig+0x2e4>)
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	69da      	ldr	r2, [r3, #28]
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	6a1b      	ldr	r3, [r3, #32]
 800a2ec:	68f9      	ldr	r1, [r7, #12]
 800a2ee:	6809      	ldr	r1, [r1, #0]
 800a2f0:	4608      	mov	r0, r1
 800a2f2:	6879      	ldr	r1, [r7, #4]
 800a2f4:	01c9      	lsls	r1, r1, #7
 800a2f6:	4401      	add	r1, r0
 800a2f8:	3184      	adds	r1, #132	@ 0x84
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	461a      	mov	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	01db      	lsls	r3, r3, #7
 800a308:	4413      	add	r3, r2
 800a30a:	3384      	adds	r3, #132	@ 0x84
 800a30c:	461a      	mov	r2, r3
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a312:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d102      	bne.n	800a322 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 800a31c:	2304      	movs	r3, #4
 800a31e:	61fb      	str	r3, [r7, #28]
 800a320:	e01b      	b.n	800a35a <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d102      	bne.n	800a330 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 800a32a:	2303      	movs	r3, #3
 800a32c:	61fb      	str	r3, [r7, #28]
 800a32e:	e014      	b.n	800a35a <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	2b04      	cmp	r3, #4
 800a336:	d00b      	beq.n	800a350 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d007      	beq.n	800a350 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a344:	2b03      	cmp	r3, #3
 800a346:	d003      	beq.n	800a350 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a34c:	2b07      	cmp	r3, #7
 800a34e:	d102      	bne.n	800a356 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 800a350:	2302      	movs	r3, #2
 800a352:	61fb      	str	r3, [r7, #28]
 800a354:	e001      	b.n	800a35a <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 800a356:	2301      	movs	r3, #1
 800a358:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	461a      	mov	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	01db      	lsls	r3, r3, #7
 800a364:	4413      	add	r3, r2
 800a366:	3384      	adds	r3, #132	@ 0x84
 800a368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a36a:	68fa      	ldr	r2, [r7, #12]
 800a36c:	6812      	ldr	r2, [r2, #0]
 800a36e:	4611      	mov	r1, r2
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	01d2      	lsls	r2, r2, #7
 800a374:	440a      	add	r2, r1
 800a376:	3284      	adds	r2, #132	@ 0x84
 800a378:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800a37c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a382:	69fa      	ldr	r2, [r7, #28]
 800a384:	fb02 f303 	mul.w	r3, r2, r3
 800a388:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	6859      	ldr	r1, [r3, #4]
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	1acb      	subs	r3, r1, r3
 800a394:	69f9      	ldr	r1, [r7, #28]
 800a396:	fb01 f303 	mul.w	r3, r1, r3
 800a39a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a39c:	68f9      	ldr	r1, [r7, #12]
 800a39e:	6809      	ldr	r1, [r1, #0]
 800a3a0:	4608      	mov	r0, r1
 800a3a2:	6879      	ldr	r1, [r7, #4]
 800a3a4:	01c9      	lsls	r1, r1, #7
 800a3a6:	4401      	add	r1, r0
 800a3a8:	3184      	adds	r1, #132	@ 0x84
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	01db      	lsls	r3, r3, #7
 800a3b8:	4413      	add	r3, r2
 800a3ba:	3384      	adds	r3, #132	@ 0x84
 800a3bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	01db      	lsls	r3, r3, #7
 800a3c8:	440b      	add	r3, r1
 800a3ca:	3384      	adds	r3, #132	@ 0x84
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	4b14      	ldr	r3, [pc, #80]	@ (800a420 <LTDC_SetConfig+0x2e8>)
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	461a      	mov	r2, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	01db      	lsls	r3, r3, #7
 800a3de:	4413      	add	r3, r2
 800a3e0:	3384      	adds	r3, #132	@ 0x84
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	01db      	lsls	r3, r3, #7
 800a3f4:	4413      	add	r3, r2
 800a3f6:	3384      	adds	r3, #132	@ 0x84
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	6812      	ldr	r2, [r2, #0]
 800a3fe:	4611      	mov	r1, r2
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	01d2      	lsls	r2, r2, #7
 800a404:	440a      	add	r2, r1
 800a406:	3284      	adds	r2, #132	@ 0x84
 800a408:	f043 0301 	orr.w	r3, r3, #1
 800a40c:	6013      	str	r3, [r2, #0]
}
 800a40e:	bf00      	nop
 800a410:	3724      	adds	r7, #36	@ 0x24
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	fffff8f8 	.word	0xfffff8f8
 800a420:	fffff800 	.word	0xfffff800

0800a424 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a424:	b480      	push	{r7}
 800a426:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a428:	4b05      	ldr	r3, [pc, #20]	@ (800a440 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a04      	ldr	r2, [pc, #16]	@ (800a440 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a42e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a432:	6013      	str	r3, [r2, #0]
}
 800a434:	bf00      	nop
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	40007000 	.word	0x40007000

0800a444 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a44a:	2300      	movs	r3, #0
 800a44c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a44e:	4b23      	ldr	r3, [pc, #140]	@ (800a4dc <HAL_PWREx_EnableOverDrive+0x98>)
 800a450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a452:	4a22      	ldr	r2, [pc, #136]	@ (800a4dc <HAL_PWREx_EnableOverDrive+0x98>)
 800a454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a458:	6413      	str	r3, [r2, #64]	@ 0x40
 800a45a:	4b20      	ldr	r3, [pc, #128]	@ (800a4dc <HAL_PWREx_EnableOverDrive+0x98>)
 800a45c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a45e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a462:	603b      	str	r3, [r7, #0]
 800a464:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a466:	4b1e      	ldr	r3, [pc, #120]	@ (800a4e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a1d      	ldr	r2, [pc, #116]	@ (800a4e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a46c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a470:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a472:	f7fb fd49 	bl	8005f08 <HAL_GetTick>
 800a476:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a478:	e009      	b.n	800a48e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a47a:	f7fb fd45 	bl	8005f08 <HAL_GetTick>
 800a47e:	4602      	mov	r2, r0
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	1ad3      	subs	r3, r2, r3
 800a484:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a488:	d901      	bls.n	800a48e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a48a:	2303      	movs	r3, #3
 800a48c:	e022      	b.n	800a4d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a48e:	4b14      	ldr	r3, [pc, #80]	@ (800a4e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a496:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a49a:	d1ee      	bne.n	800a47a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a49c:	4b10      	ldr	r3, [pc, #64]	@ (800a4e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a0f      	ldr	r2, [pc, #60]	@ (800a4e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a4a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a4a8:	f7fb fd2e 	bl	8005f08 <HAL_GetTick>
 800a4ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a4ae:	e009      	b.n	800a4c4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a4b0:	f7fb fd2a 	bl	8005f08 <HAL_GetTick>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a4be:	d901      	bls.n	800a4c4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	e007      	b.n	800a4d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a4c4:	4b06      	ldr	r3, [pc, #24]	@ (800a4e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4d0:	d1ee      	bne.n	800a4b0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	40023800 	.word	0x40023800
 800a4e0:	40007000 	.word	0x40007000

0800a4e4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b086      	sub	sp, #24
 800a4e8:	af02      	add	r7, sp, #8
 800a4ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a4ec:	f7fb fd0c 	bl	8005f08 <HAL_GetTick>
 800a4f0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e067      	b.n	800a5cc <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a502:	b2db      	uxtb	r3, r3
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10b      	bne.n	800a520 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f7fa f81d 	bl	8004550 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a516:	f241 3188 	movw	r1, #5000	@ 0x1388
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f85e 	bl	800a5dc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	3b01      	subs	r3, #1
 800a530:	021a      	lsls	r2, r3, #8
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	430a      	orrs	r2, r1
 800a538:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a53e:	9300      	str	r3, [sp, #0]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2200      	movs	r2, #0
 800a544:	2120      	movs	r1, #32
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f856 	bl	800a5f8 <QSPI_WaitFlagStateUntilTimeout>
 800a54c:	4603      	mov	r3, r0
 800a54e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a550:	7afb      	ldrb	r3, [r7, #11]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d135      	bne.n	800a5c2 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	4b1d      	ldr	r3, [pc, #116]	@ (800a5d4 <HAL_QSPI_Init+0xf0>)
 800a55e:	4013      	ands	r3, r2
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	6852      	ldr	r2, [r2, #4]
 800a564:	0611      	lsls	r1, r2, #24
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	68d2      	ldr	r2, [r2, #12]
 800a56a:	4311      	orrs	r1, r2
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	69d2      	ldr	r2, [r2, #28]
 800a570:	4311      	orrs	r1, r2
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	6a12      	ldr	r2, [r2, #32]
 800a576:	4311      	orrs	r1, r2
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	6812      	ldr	r2, [r2, #0]
 800a57c:	430b      	orrs	r3, r1
 800a57e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	685a      	ldr	r2, [r3, #4]
 800a586:	4b14      	ldr	r3, [pc, #80]	@ (800a5d8 <HAL_QSPI_Init+0xf4>)
 800a588:	4013      	ands	r3, r2
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	6912      	ldr	r2, [r2, #16]
 800a58e:	0411      	lsls	r1, r2, #16
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	6952      	ldr	r2, [r2, #20]
 800a594:	4311      	orrs	r1, r2
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	6992      	ldr	r2, [r2, #24]
 800a59a:	4311      	orrs	r1, r2
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	6812      	ldr	r2, [r2, #0]
 800a5a0:	430b      	orrs	r3, r1
 800a5a2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f042 0201 	orr.w	r2, r2, #1
 800a5b2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800a5ca:	7afb      	ldrb	r3, [r7, #11]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3710      	adds	r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	00ffff2f 	.word	0x00ffff2f
 800a5d8:	ffe0f8fe 	.word	0xffe0f8fe

0800a5dc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	683a      	ldr	r2, [r7, #0]
 800a5ea:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	603b      	str	r3, [r7, #0]
 800a604:	4613      	mov	r3, r2
 800a606:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a608:	e01a      	b.n	800a640 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a610:	d016      	beq.n	800a640 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a612:	f7fb fc79 	bl	8005f08 <HAL_GetTick>
 800a616:	4602      	mov	r2, r0
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	1ad3      	subs	r3, r2, r3
 800a61c:	69ba      	ldr	r2, [r7, #24]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d302      	bcc.n	800a628 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d10b      	bne.n	800a640 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2204      	movs	r2, #4
 800a62c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a634:	f043 0201 	orr.w	r2, r3, #1
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	e00e      	b.n	800a65e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	689a      	ldr	r2, [r3, #8]
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	4013      	ands	r3, r2
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	bf14      	ite	ne
 800a64e:	2301      	movne	r3, #1
 800a650:	2300      	moveq	r3, #0
 800a652:	b2db      	uxtb	r3, r3
 800a654:	461a      	mov	r2, r3
 800a656:	79fb      	ldrb	r3, [r7, #7]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d1d6      	bne.n	800a60a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a65c:	2300      	movs	r3, #0
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
	...

0800a668 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b086      	sub	sp, #24
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a670:	2300      	movs	r3, #0
 800a672:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d101      	bne.n	800a67e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e291      	b.n	800aba2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f003 0301 	and.w	r3, r3, #1
 800a686:	2b00      	cmp	r3, #0
 800a688:	f000 8087 	beq.w	800a79a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a68c:	4b96      	ldr	r3, [pc, #600]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	f003 030c 	and.w	r3, r3, #12
 800a694:	2b04      	cmp	r3, #4
 800a696:	d00c      	beq.n	800a6b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a698:	4b93      	ldr	r3, [pc, #588]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	f003 030c 	and.w	r3, r3, #12
 800a6a0:	2b08      	cmp	r3, #8
 800a6a2:	d112      	bne.n	800a6ca <HAL_RCC_OscConfig+0x62>
 800a6a4:	4b90      	ldr	r3, [pc, #576]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a6b0:	d10b      	bne.n	800a6ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6b2:	4b8d      	ldr	r3, [pc, #564]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d06c      	beq.n	800a798 <HAL_RCC_OscConfig+0x130>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d168      	bne.n	800a798 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e26b      	b.n	800aba2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6d2:	d106      	bne.n	800a6e2 <HAL_RCC_OscConfig+0x7a>
 800a6d4:	4b84      	ldr	r3, [pc, #528]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a83      	ldr	r2, [pc, #524]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a6da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a6de:	6013      	str	r3, [r2, #0]
 800a6e0:	e02e      	b.n	800a740 <HAL_RCC_OscConfig+0xd8>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d10c      	bne.n	800a704 <HAL_RCC_OscConfig+0x9c>
 800a6ea:	4b7f      	ldr	r3, [pc, #508]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a7e      	ldr	r2, [pc, #504]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a6f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a6f4:	6013      	str	r3, [r2, #0]
 800a6f6:	4b7c      	ldr	r3, [pc, #496]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a7b      	ldr	r2, [pc, #492]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a6fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a700:	6013      	str	r3, [r2, #0]
 800a702:	e01d      	b.n	800a740 <HAL_RCC_OscConfig+0xd8>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a70c:	d10c      	bne.n	800a728 <HAL_RCC_OscConfig+0xc0>
 800a70e:	4b76      	ldr	r3, [pc, #472]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a75      	ldr	r2, [pc, #468]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a714:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a718:	6013      	str	r3, [r2, #0]
 800a71a:	4b73      	ldr	r3, [pc, #460]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4a72      	ldr	r2, [pc, #456]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a724:	6013      	str	r3, [r2, #0]
 800a726:	e00b      	b.n	800a740 <HAL_RCC_OscConfig+0xd8>
 800a728:	4b6f      	ldr	r3, [pc, #444]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a6e      	ldr	r2, [pc, #440]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a72e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a732:	6013      	str	r3, [r2, #0]
 800a734:	4b6c      	ldr	r3, [pc, #432]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a6b      	ldr	r2, [pc, #428]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a73a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a73e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d013      	beq.n	800a770 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a748:	f7fb fbde 	bl	8005f08 <HAL_GetTick>
 800a74c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a74e:	e008      	b.n	800a762 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a750:	f7fb fbda 	bl	8005f08 <HAL_GetTick>
 800a754:	4602      	mov	r2, r0
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	1ad3      	subs	r3, r2, r3
 800a75a:	2b64      	cmp	r3, #100	@ 0x64
 800a75c:	d901      	bls.n	800a762 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a75e:	2303      	movs	r3, #3
 800a760:	e21f      	b.n	800aba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a762:	4b61      	ldr	r3, [pc, #388]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d0f0      	beq.n	800a750 <HAL_RCC_OscConfig+0xe8>
 800a76e:	e014      	b.n	800a79a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a770:	f7fb fbca 	bl	8005f08 <HAL_GetTick>
 800a774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a776:	e008      	b.n	800a78a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a778:	f7fb fbc6 	bl	8005f08 <HAL_GetTick>
 800a77c:	4602      	mov	r2, r0
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	2b64      	cmp	r3, #100	@ 0x64
 800a784:	d901      	bls.n	800a78a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a786:	2303      	movs	r3, #3
 800a788:	e20b      	b.n	800aba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a78a:	4b57      	ldr	r3, [pc, #348]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a792:	2b00      	cmp	r3, #0
 800a794:	d1f0      	bne.n	800a778 <HAL_RCC_OscConfig+0x110>
 800a796:	e000      	b.n	800a79a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f003 0302 	and.w	r3, r3, #2
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d069      	beq.n	800a87a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a7a6:	4b50      	ldr	r3, [pc, #320]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	f003 030c 	and.w	r3, r3, #12
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00b      	beq.n	800a7ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a7b2:	4b4d      	ldr	r3, [pc, #308]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	f003 030c 	and.w	r3, r3, #12
 800a7ba:	2b08      	cmp	r3, #8
 800a7bc:	d11c      	bne.n	800a7f8 <HAL_RCC_OscConfig+0x190>
 800a7be:	4b4a      	ldr	r3, [pc, #296]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d116      	bne.n	800a7f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a7ca:	4b47      	ldr	r3, [pc, #284]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f003 0302 	and.w	r3, r3, #2
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d005      	beq.n	800a7e2 <HAL_RCC_OscConfig+0x17a>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d001      	beq.n	800a7e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e1df      	b.n	800aba2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7e2:	4b41      	ldr	r3, [pc, #260]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	691b      	ldr	r3, [r3, #16]
 800a7ee:	00db      	lsls	r3, r3, #3
 800a7f0:	493d      	ldr	r1, [pc, #244]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a7f6:	e040      	b.n	800a87a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d023      	beq.n	800a848 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a800:	4b39      	ldr	r3, [pc, #228]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a38      	ldr	r2, [pc, #224]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a806:	f043 0301 	orr.w	r3, r3, #1
 800a80a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a80c:	f7fb fb7c 	bl	8005f08 <HAL_GetTick>
 800a810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a812:	e008      	b.n	800a826 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a814:	f7fb fb78 	bl	8005f08 <HAL_GetTick>
 800a818:	4602      	mov	r2, r0
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	1ad3      	subs	r3, r2, r3
 800a81e:	2b02      	cmp	r3, #2
 800a820:	d901      	bls.n	800a826 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a822:	2303      	movs	r3, #3
 800a824:	e1bd      	b.n	800aba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a826:	4b30      	ldr	r3, [pc, #192]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f003 0302 	and.w	r3, r3, #2
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d0f0      	beq.n	800a814 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a832:	4b2d      	ldr	r3, [pc, #180]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	00db      	lsls	r3, r3, #3
 800a840:	4929      	ldr	r1, [pc, #164]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a842:	4313      	orrs	r3, r2
 800a844:	600b      	str	r3, [r1, #0]
 800a846:	e018      	b.n	800a87a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a848:	4b27      	ldr	r3, [pc, #156]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a26      	ldr	r2, [pc, #152]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a84e:	f023 0301 	bic.w	r3, r3, #1
 800a852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a854:	f7fb fb58 	bl	8005f08 <HAL_GetTick>
 800a858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a85a:	e008      	b.n	800a86e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a85c:	f7fb fb54 	bl	8005f08 <HAL_GetTick>
 800a860:	4602      	mov	r2, r0
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	2b02      	cmp	r3, #2
 800a868:	d901      	bls.n	800a86e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a86a:	2303      	movs	r3, #3
 800a86c:	e199      	b.n	800aba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a86e:	4b1e      	ldr	r3, [pc, #120]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f003 0302 	and.w	r3, r3, #2
 800a876:	2b00      	cmp	r3, #0
 800a878:	d1f0      	bne.n	800a85c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f003 0308 	and.w	r3, r3, #8
 800a882:	2b00      	cmp	r3, #0
 800a884:	d038      	beq.n	800a8f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	695b      	ldr	r3, [r3, #20]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d019      	beq.n	800a8c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a88e:	4b16      	ldr	r3, [pc, #88]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a892:	4a15      	ldr	r2, [pc, #84]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a894:	f043 0301 	orr.w	r3, r3, #1
 800a898:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a89a:	f7fb fb35 	bl	8005f08 <HAL_GetTick>
 800a89e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a8a0:	e008      	b.n	800a8b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8a2:	f7fb fb31 	bl	8005f08 <HAL_GetTick>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	1ad3      	subs	r3, r2, r3
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d901      	bls.n	800a8b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a8b0:	2303      	movs	r3, #3
 800a8b2:	e176      	b.n	800aba2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a8b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a8b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8b8:	f003 0302 	and.w	r3, r3, #2
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d0f0      	beq.n	800a8a2 <HAL_RCC_OscConfig+0x23a>
 800a8c0:	e01a      	b.n	800a8f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a8c2:	4b09      	ldr	r3, [pc, #36]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a8c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8c6:	4a08      	ldr	r2, [pc, #32]	@ (800a8e8 <HAL_RCC_OscConfig+0x280>)
 800a8c8:	f023 0301 	bic.w	r3, r3, #1
 800a8cc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8ce:	f7fb fb1b 	bl	8005f08 <HAL_GetTick>
 800a8d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a8d4:	e00a      	b.n	800a8ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8d6:	f7fb fb17 	bl	8005f08 <HAL_GetTick>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	1ad3      	subs	r3, r2, r3
 800a8e0:	2b02      	cmp	r3, #2
 800a8e2:	d903      	bls.n	800a8ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	e15c      	b.n	800aba2 <HAL_RCC_OscConfig+0x53a>
 800a8e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a8ec:	4b91      	ldr	r3, [pc, #580]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800a8ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8f0:	f003 0302 	and.w	r3, r3, #2
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1ee      	bne.n	800a8d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f003 0304 	and.w	r3, r3, #4
 800a900:	2b00      	cmp	r3, #0
 800a902:	f000 80a4 	beq.w	800aa4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a906:	4b8b      	ldr	r3, [pc, #556]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800a908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a90a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d10d      	bne.n	800a92e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a912:	4b88      	ldr	r3, [pc, #544]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800a914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a916:	4a87      	ldr	r2, [pc, #540]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800a918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a91c:	6413      	str	r3, [r2, #64]	@ 0x40
 800a91e:	4b85      	ldr	r3, [pc, #532]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800a920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a926:	60bb      	str	r3, [r7, #8]
 800a928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a92a:	2301      	movs	r3, #1
 800a92c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a92e:	4b82      	ldr	r3, [pc, #520]	@ (800ab38 <HAL_RCC_OscConfig+0x4d0>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a936:	2b00      	cmp	r3, #0
 800a938:	d118      	bne.n	800a96c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a93a:	4b7f      	ldr	r3, [pc, #508]	@ (800ab38 <HAL_RCC_OscConfig+0x4d0>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a7e      	ldr	r2, [pc, #504]	@ (800ab38 <HAL_RCC_OscConfig+0x4d0>)
 800a940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a946:	f7fb fadf 	bl	8005f08 <HAL_GetTick>
 800a94a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a94c:	e008      	b.n	800a960 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a94e:	f7fb fadb 	bl	8005f08 <HAL_GetTick>
 800a952:	4602      	mov	r2, r0
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	2b64      	cmp	r3, #100	@ 0x64
 800a95a:	d901      	bls.n	800a960 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a95c:	2303      	movs	r3, #3
 800a95e:	e120      	b.n	800aba2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a960:	4b75      	ldr	r3, [pc, #468]	@ (800ab38 <HAL_RCC_OscConfig+0x4d0>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d0f0      	beq.n	800a94e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d106      	bne.n	800a982 <HAL_RCC_OscConfig+0x31a>
 800a974:	4b6f      	ldr	r3, [pc, #444]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800a976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a978:	4a6e      	ldr	r2, [pc, #440]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800a97a:	f043 0301 	orr.w	r3, r3, #1
 800a97e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a980:	e02d      	b.n	800a9de <HAL_RCC_OscConfig+0x376>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d10c      	bne.n	800a9a4 <HAL_RCC_OscConfig+0x33c>
 800a98a:	4b6a      	ldr	r3, [pc, #424]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800a98c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a98e:	4a69      	ldr	r2, [pc, #420]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800a990:	f023 0301 	bic.w	r3, r3, #1
 800a994:	6713      	str	r3, [r2, #112]	@ 0x70
 800a996:	4b67      	ldr	r3, [pc, #412]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800a998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a99a:	4a66      	ldr	r2, [pc, #408]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800a99c:	f023 0304 	bic.w	r3, r3, #4
 800a9a0:	6713      	str	r3, [r2, #112]	@ 0x70
 800a9a2:	e01c      	b.n	800a9de <HAL_RCC_OscConfig+0x376>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	2b05      	cmp	r3, #5
 800a9aa:	d10c      	bne.n	800a9c6 <HAL_RCC_OscConfig+0x35e>
 800a9ac:	4b61      	ldr	r3, [pc, #388]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800a9ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9b0:	4a60      	ldr	r2, [pc, #384]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800a9b2:	f043 0304 	orr.w	r3, r3, #4
 800a9b6:	6713      	str	r3, [r2, #112]	@ 0x70
 800a9b8:	4b5e      	ldr	r3, [pc, #376]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800a9ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9bc:	4a5d      	ldr	r2, [pc, #372]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800a9be:	f043 0301 	orr.w	r3, r3, #1
 800a9c2:	6713      	str	r3, [r2, #112]	@ 0x70
 800a9c4:	e00b      	b.n	800a9de <HAL_RCC_OscConfig+0x376>
 800a9c6:	4b5b      	ldr	r3, [pc, #364]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800a9c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9ca:	4a5a      	ldr	r2, [pc, #360]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800a9cc:	f023 0301 	bic.w	r3, r3, #1
 800a9d0:	6713      	str	r3, [r2, #112]	@ 0x70
 800a9d2:	4b58      	ldr	r3, [pc, #352]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800a9d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9d6:	4a57      	ldr	r2, [pc, #348]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800a9d8:	f023 0304 	bic.w	r3, r3, #4
 800a9dc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d015      	beq.n	800aa12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9e6:	f7fb fa8f 	bl	8005f08 <HAL_GetTick>
 800a9ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9ec:	e00a      	b.n	800aa04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9ee:	f7fb fa8b 	bl	8005f08 <HAL_GetTick>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	1ad3      	subs	r3, r2, r3
 800a9f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d901      	bls.n	800aa04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800aa00:	2303      	movs	r3, #3
 800aa02:	e0ce      	b.n	800aba2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa04:	4b4b      	ldr	r3, [pc, #300]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800aa06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa08:	f003 0302 	and.w	r3, r3, #2
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d0ee      	beq.n	800a9ee <HAL_RCC_OscConfig+0x386>
 800aa10:	e014      	b.n	800aa3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa12:	f7fb fa79 	bl	8005f08 <HAL_GetTick>
 800aa16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa18:	e00a      	b.n	800aa30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa1a:	f7fb fa75 	bl	8005f08 <HAL_GetTick>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	1ad3      	subs	r3, r2, r3
 800aa24:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d901      	bls.n	800aa30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	e0b8      	b.n	800aba2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa30:	4b40      	ldr	r3, [pc, #256]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800aa32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa34:	f003 0302 	and.w	r3, r3, #2
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1ee      	bne.n	800aa1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800aa3c:	7dfb      	ldrb	r3, [r7, #23]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d105      	bne.n	800aa4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa42:	4b3c      	ldr	r3, [pc, #240]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800aa44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa46:	4a3b      	ldr	r2, [pc, #236]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800aa48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa4c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	699b      	ldr	r3, [r3, #24]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f000 80a4 	beq.w	800aba0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aa58:	4b36      	ldr	r3, [pc, #216]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	f003 030c 	and.w	r3, r3, #12
 800aa60:	2b08      	cmp	r3, #8
 800aa62:	d06b      	beq.n	800ab3c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	699b      	ldr	r3, [r3, #24]
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	d149      	bne.n	800ab00 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa6c:	4b31      	ldr	r3, [pc, #196]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a30      	ldr	r2, [pc, #192]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800aa72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa78:	f7fb fa46 	bl	8005f08 <HAL_GetTick>
 800aa7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa7e:	e008      	b.n	800aa92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa80:	f7fb fa42 	bl	8005f08 <HAL_GetTick>
 800aa84:	4602      	mov	r2, r0
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	1ad3      	subs	r3, r2, r3
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	d901      	bls.n	800aa92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	e087      	b.n	800aba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa92:	4b28      	ldr	r3, [pc, #160]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1f0      	bne.n	800aa80 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	69da      	ldr	r2, [r3, #28]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6a1b      	ldr	r3, [r3, #32]
 800aaa6:	431a      	orrs	r2, r3
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaac:	019b      	lsls	r3, r3, #6
 800aaae:	431a      	orrs	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aab4:	085b      	lsrs	r3, r3, #1
 800aab6:	3b01      	subs	r3, #1
 800aab8:	041b      	lsls	r3, r3, #16
 800aaba:	431a      	orrs	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aac0:	061b      	lsls	r3, r3, #24
 800aac2:	4313      	orrs	r3, r2
 800aac4:	4a1b      	ldr	r2, [pc, #108]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800aac6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aaca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aacc:	4b19      	ldr	r3, [pc, #100]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a18      	ldr	r2, [pc, #96]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800aad2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aad8:	f7fb fa16 	bl	8005f08 <HAL_GetTick>
 800aadc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aade:	e008      	b.n	800aaf2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aae0:	f7fb fa12 	bl	8005f08 <HAL_GetTick>
 800aae4:	4602      	mov	r2, r0
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	1ad3      	subs	r3, r2, r3
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d901      	bls.n	800aaf2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800aaee:	2303      	movs	r3, #3
 800aaf0:	e057      	b.n	800aba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aaf2:	4b10      	ldr	r3, [pc, #64]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d0f0      	beq.n	800aae0 <HAL_RCC_OscConfig+0x478>
 800aafe:	e04f      	b.n	800aba0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab00:	4b0c      	ldr	r3, [pc, #48]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a0b      	ldr	r2, [pc, #44]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800ab06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ab0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab0c:	f7fb f9fc 	bl	8005f08 <HAL_GetTick>
 800ab10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab12:	e008      	b.n	800ab26 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab14:	f7fb f9f8 	bl	8005f08 <HAL_GetTick>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	1ad3      	subs	r3, r2, r3
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	d901      	bls.n	800ab26 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800ab22:	2303      	movs	r3, #3
 800ab24:	e03d      	b.n	800aba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab26:	4b03      	ldr	r3, [pc, #12]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1f0      	bne.n	800ab14 <HAL_RCC_OscConfig+0x4ac>
 800ab32:	e035      	b.n	800aba0 <HAL_RCC_OscConfig+0x538>
 800ab34:	40023800 	.word	0x40023800
 800ab38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800ab3c:	4b1b      	ldr	r3, [pc, #108]	@ (800abac <HAL_RCC_OscConfig+0x544>)
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	699b      	ldr	r3, [r3, #24]
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d028      	beq.n	800ab9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d121      	bne.n	800ab9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d11a      	bne.n	800ab9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ab6c:	4013      	ands	r3, r2
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ab72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d111      	bne.n	800ab9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab82:	085b      	lsrs	r3, r3, #1
 800ab84:	3b01      	subs	r3, #1
 800ab86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d107      	bne.n	800ab9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d001      	beq.n	800aba0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	e000      	b.n	800aba2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3718      	adds	r7, #24
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	40023800 	.word	0x40023800

0800abb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d101      	bne.n	800abc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	e0d0      	b.n	800ad6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800abc8:	4b6a      	ldr	r3, [pc, #424]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c4>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 030f 	and.w	r3, r3, #15
 800abd0:	683a      	ldr	r2, [r7, #0]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d910      	bls.n	800abf8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abd6:	4b67      	ldr	r3, [pc, #412]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c4>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f023 020f 	bic.w	r2, r3, #15
 800abde:	4965      	ldr	r1, [pc, #404]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c4>)
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800abe6:	4b63      	ldr	r3, [pc, #396]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c4>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f003 030f 	and.w	r3, r3, #15
 800abee:	683a      	ldr	r2, [r7, #0]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d001      	beq.n	800abf8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	e0b8      	b.n	800ad6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f003 0302 	and.w	r3, r3, #2
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d020      	beq.n	800ac46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f003 0304 	and.w	r3, r3, #4
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d005      	beq.n	800ac1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ac10:	4b59      	ldr	r3, [pc, #356]	@ (800ad78 <HAL_RCC_ClockConfig+0x1c8>)
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	4a58      	ldr	r2, [pc, #352]	@ (800ad78 <HAL_RCC_ClockConfig+0x1c8>)
 800ac16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ac1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f003 0308 	and.w	r3, r3, #8
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d005      	beq.n	800ac34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ac28:	4b53      	ldr	r3, [pc, #332]	@ (800ad78 <HAL_RCC_ClockConfig+0x1c8>)
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	4a52      	ldr	r2, [pc, #328]	@ (800ad78 <HAL_RCC_ClockConfig+0x1c8>)
 800ac2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ac32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac34:	4b50      	ldr	r3, [pc, #320]	@ (800ad78 <HAL_RCC_ClockConfig+0x1c8>)
 800ac36:	689b      	ldr	r3, [r3, #8]
 800ac38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	494d      	ldr	r1, [pc, #308]	@ (800ad78 <HAL_RCC_ClockConfig+0x1c8>)
 800ac42:	4313      	orrs	r3, r2
 800ac44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f003 0301 	and.w	r3, r3, #1
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d040      	beq.n	800acd4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d107      	bne.n	800ac6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac5a:	4b47      	ldr	r3, [pc, #284]	@ (800ad78 <HAL_RCC_ClockConfig+0x1c8>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d115      	bne.n	800ac92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ac66:	2301      	movs	r3, #1
 800ac68:	e07f      	b.n	800ad6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	d107      	bne.n	800ac82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac72:	4b41      	ldr	r3, [pc, #260]	@ (800ad78 <HAL_RCC_ClockConfig+0x1c8>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d109      	bne.n	800ac92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e073      	b.n	800ad6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac82:	4b3d      	ldr	r3, [pc, #244]	@ (800ad78 <HAL_RCC_ClockConfig+0x1c8>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f003 0302 	and.w	r3, r3, #2
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d101      	bne.n	800ac92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e06b      	b.n	800ad6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ac92:	4b39      	ldr	r3, [pc, #228]	@ (800ad78 <HAL_RCC_ClockConfig+0x1c8>)
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	f023 0203 	bic.w	r2, r3, #3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	4936      	ldr	r1, [pc, #216]	@ (800ad78 <HAL_RCC_ClockConfig+0x1c8>)
 800aca0:	4313      	orrs	r3, r2
 800aca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aca4:	f7fb f930 	bl	8005f08 <HAL_GetTick>
 800aca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800acaa:	e00a      	b.n	800acc2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800acac:	f7fb f92c 	bl	8005f08 <HAL_GetTick>
 800acb0:	4602      	mov	r2, r0
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acba:	4293      	cmp	r3, r2
 800acbc:	d901      	bls.n	800acc2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800acbe:	2303      	movs	r3, #3
 800acc0:	e053      	b.n	800ad6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800acc2:	4b2d      	ldr	r3, [pc, #180]	@ (800ad78 <HAL_RCC_ClockConfig+0x1c8>)
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	f003 020c 	and.w	r2, r3, #12
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d1eb      	bne.n	800acac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800acd4:	4b27      	ldr	r3, [pc, #156]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c4>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f003 030f 	and.w	r3, r3, #15
 800acdc:	683a      	ldr	r2, [r7, #0]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d210      	bcs.n	800ad04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ace2:	4b24      	ldr	r3, [pc, #144]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c4>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f023 020f 	bic.w	r2, r3, #15
 800acea:	4922      	ldr	r1, [pc, #136]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c4>)
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	4313      	orrs	r3, r2
 800acf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800acf2:	4b20      	ldr	r3, [pc, #128]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c4>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f003 030f 	and.w	r3, r3, #15
 800acfa:	683a      	ldr	r2, [r7, #0]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d001      	beq.n	800ad04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	e032      	b.n	800ad6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f003 0304 	and.w	r3, r3, #4
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d008      	beq.n	800ad22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ad10:	4b19      	ldr	r3, [pc, #100]	@ (800ad78 <HAL_RCC_ClockConfig+0x1c8>)
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	4916      	ldr	r1, [pc, #88]	@ (800ad78 <HAL_RCC_ClockConfig+0x1c8>)
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f003 0308 	and.w	r3, r3, #8
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d009      	beq.n	800ad42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ad2e:	4b12      	ldr	r3, [pc, #72]	@ (800ad78 <HAL_RCC_ClockConfig+0x1c8>)
 800ad30:	689b      	ldr	r3, [r3, #8]
 800ad32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	691b      	ldr	r3, [r3, #16]
 800ad3a:	00db      	lsls	r3, r3, #3
 800ad3c:	490e      	ldr	r1, [pc, #56]	@ (800ad78 <HAL_RCC_ClockConfig+0x1c8>)
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ad42:	f000 f821 	bl	800ad88 <HAL_RCC_GetSysClockFreq>
 800ad46:	4602      	mov	r2, r0
 800ad48:	4b0b      	ldr	r3, [pc, #44]	@ (800ad78 <HAL_RCC_ClockConfig+0x1c8>)
 800ad4a:	689b      	ldr	r3, [r3, #8]
 800ad4c:	091b      	lsrs	r3, r3, #4
 800ad4e:	f003 030f 	and.w	r3, r3, #15
 800ad52:	490a      	ldr	r1, [pc, #40]	@ (800ad7c <HAL_RCC_ClockConfig+0x1cc>)
 800ad54:	5ccb      	ldrb	r3, [r1, r3]
 800ad56:	fa22 f303 	lsr.w	r3, r2, r3
 800ad5a:	4a09      	ldr	r2, [pc, #36]	@ (800ad80 <HAL_RCC_ClockConfig+0x1d0>)
 800ad5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ad5e:	4b09      	ldr	r3, [pc, #36]	@ (800ad84 <HAL_RCC_ClockConfig+0x1d4>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fa f902 	bl	8004f6c <HAL_InitTick>

  return HAL_OK;
 800ad68:	2300      	movs	r3, #0
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	40023c00 	.word	0x40023c00
 800ad78:	40023800 	.word	0x40023800
 800ad7c:	0801b98c 	.word	0x0801b98c
 800ad80:	2000001c 	.word	0x2000001c
 800ad84:	20000068 	.word	0x20000068

0800ad88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ad88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad8c:	b090      	sub	sp, #64	@ 0x40
 800ad8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800ad90:	2300      	movs	r3, #0
 800ad92:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad94:	2300      	movs	r3, #0
 800ad96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad98:	2300      	movs	r3, #0
 800ad9a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ada0:	4b59      	ldr	r3, [pc, #356]	@ (800af08 <HAL_RCC_GetSysClockFreq+0x180>)
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	f003 030c 	and.w	r3, r3, #12
 800ada8:	2b08      	cmp	r3, #8
 800adaa:	d00d      	beq.n	800adc8 <HAL_RCC_GetSysClockFreq+0x40>
 800adac:	2b08      	cmp	r3, #8
 800adae:	f200 80a1 	bhi.w	800aef4 <HAL_RCC_GetSysClockFreq+0x16c>
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d002      	beq.n	800adbc <HAL_RCC_GetSysClockFreq+0x34>
 800adb6:	2b04      	cmp	r3, #4
 800adb8:	d003      	beq.n	800adc2 <HAL_RCC_GetSysClockFreq+0x3a>
 800adba:	e09b      	b.n	800aef4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800adbc:	4b53      	ldr	r3, [pc, #332]	@ (800af0c <HAL_RCC_GetSysClockFreq+0x184>)
 800adbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800adc0:	e09b      	b.n	800aefa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800adc2:	4b53      	ldr	r3, [pc, #332]	@ (800af10 <HAL_RCC_GetSysClockFreq+0x188>)
 800adc4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800adc6:	e098      	b.n	800aefa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800adc8:	4b4f      	ldr	r3, [pc, #316]	@ (800af08 <HAL_RCC_GetSysClockFreq+0x180>)
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800add0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800add2:	4b4d      	ldr	r3, [pc, #308]	@ (800af08 <HAL_RCC_GetSysClockFreq+0x180>)
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800adda:	2b00      	cmp	r3, #0
 800addc:	d028      	beq.n	800ae30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800adde:	4b4a      	ldr	r3, [pc, #296]	@ (800af08 <HAL_RCC_GetSysClockFreq+0x180>)
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	099b      	lsrs	r3, r3, #6
 800ade4:	2200      	movs	r2, #0
 800ade6:	623b      	str	r3, [r7, #32]
 800ade8:	627a      	str	r2, [r7, #36]	@ 0x24
 800adea:	6a3b      	ldr	r3, [r7, #32]
 800adec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800adf0:	2100      	movs	r1, #0
 800adf2:	4b47      	ldr	r3, [pc, #284]	@ (800af10 <HAL_RCC_GetSysClockFreq+0x188>)
 800adf4:	fb03 f201 	mul.w	r2, r3, r1
 800adf8:	2300      	movs	r3, #0
 800adfa:	fb00 f303 	mul.w	r3, r0, r3
 800adfe:	4413      	add	r3, r2
 800ae00:	4a43      	ldr	r2, [pc, #268]	@ (800af10 <HAL_RCC_GetSysClockFreq+0x188>)
 800ae02:	fba0 1202 	umull	r1, r2, r0, r2
 800ae06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae08:	460a      	mov	r2, r1
 800ae0a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ae0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae0e:	4413      	add	r3, r2
 800ae10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae14:	2200      	movs	r2, #0
 800ae16:	61bb      	str	r3, [r7, #24]
 800ae18:	61fa      	str	r2, [r7, #28]
 800ae1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ae1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800ae22:	f7f5 fa5d 	bl	80002e0 <__aeabi_uldivmod>
 800ae26:	4602      	mov	r2, r0
 800ae28:	460b      	mov	r3, r1
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae2e:	e053      	b.n	800aed8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ae30:	4b35      	ldr	r3, [pc, #212]	@ (800af08 <HAL_RCC_GetSysClockFreq+0x180>)
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	099b      	lsrs	r3, r3, #6
 800ae36:	2200      	movs	r2, #0
 800ae38:	613b      	str	r3, [r7, #16]
 800ae3a:	617a      	str	r2, [r7, #20]
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800ae42:	f04f 0b00 	mov.w	fp, #0
 800ae46:	4652      	mov	r2, sl
 800ae48:	465b      	mov	r3, fp
 800ae4a:	f04f 0000 	mov.w	r0, #0
 800ae4e:	f04f 0100 	mov.w	r1, #0
 800ae52:	0159      	lsls	r1, r3, #5
 800ae54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ae58:	0150      	lsls	r0, r2, #5
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	ebb2 080a 	subs.w	r8, r2, sl
 800ae62:	eb63 090b 	sbc.w	r9, r3, fp
 800ae66:	f04f 0200 	mov.w	r2, #0
 800ae6a:	f04f 0300 	mov.w	r3, #0
 800ae6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ae72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ae76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ae7a:	ebb2 0408 	subs.w	r4, r2, r8
 800ae7e:	eb63 0509 	sbc.w	r5, r3, r9
 800ae82:	f04f 0200 	mov.w	r2, #0
 800ae86:	f04f 0300 	mov.w	r3, #0
 800ae8a:	00eb      	lsls	r3, r5, #3
 800ae8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ae90:	00e2      	lsls	r2, r4, #3
 800ae92:	4614      	mov	r4, r2
 800ae94:	461d      	mov	r5, r3
 800ae96:	eb14 030a 	adds.w	r3, r4, sl
 800ae9a:	603b      	str	r3, [r7, #0]
 800ae9c:	eb45 030b 	adc.w	r3, r5, fp
 800aea0:	607b      	str	r3, [r7, #4]
 800aea2:	f04f 0200 	mov.w	r2, #0
 800aea6:	f04f 0300 	mov.w	r3, #0
 800aeaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 800aeae:	4629      	mov	r1, r5
 800aeb0:	028b      	lsls	r3, r1, #10
 800aeb2:	4621      	mov	r1, r4
 800aeb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800aeb8:	4621      	mov	r1, r4
 800aeba:	028a      	lsls	r2, r1, #10
 800aebc:	4610      	mov	r0, r2
 800aebe:	4619      	mov	r1, r3
 800aec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aec2:	2200      	movs	r2, #0
 800aec4:	60bb      	str	r3, [r7, #8]
 800aec6:	60fa      	str	r2, [r7, #12]
 800aec8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aecc:	f7f5 fa08 	bl	80002e0 <__aeabi_uldivmod>
 800aed0:	4602      	mov	r2, r0
 800aed2:	460b      	mov	r3, r1
 800aed4:	4613      	mov	r3, r2
 800aed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800aed8:	4b0b      	ldr	r3, [pc, #44]	@ (800af08 <HAL_RCC_GetSysClockFreq+0x180>)
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	0c1b      	lsrs	r3, r3, #16
 800aede:	f003 0303 	and.w	r3, r3, #3
 800aee2:	3301      	adds	r3, #1
 800aee4:	005b      	lsls	r3, r3, #1
 800aee6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800aee8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aeea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeec:	fbb2 f3f3 	udiv	r3, r2, r3
 800aef0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800aef2:	e002      	b.n	800aefa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aef4:	4b05      	ldr	r3, [pc, #20]	@ (800af0c <HAL_RCC_GetSysClockFreq+0x184>)
 800aef6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800aef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aefa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3740      	adds	r7, #64	@ 0x40
 800af00:	46bd      	mov	sp, r7
 800af02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af06:	bf00      	nop
 800af08:	40023800 	.word	0x40023800
 800af0c:	00f42400 	.word	0x00f42400
 800af10:	017d7840 	.word	0x017d7840

0800af14 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af14:	b480      	push	{r7}
 800af16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800af18:	4b03      	ldr	r3, [pc, #12]	@ (800af28 <HAL_RCC_GetHCLKFreq+0x14>)
 800af1a:	681b      	ldr	r3, [r3, #0]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr
 800af26:	bf00      	nop
 800af28:	2000001c 	.word	0x2000001c

0800af2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800af30:	f7ff fff0 	bl	800af14 <HAL_RCC_GetHCLKFreq>
 800af34:	4602      	mov	r2, r0
 800af36:	4b05      	ldr	r3, [pc, #20]	@ (800af4c <HAL_RCC_GetPCLK1Freq+0x20>)
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	0a9b      	lsrs	r3, r3, #10
 800af3c:	f003 0307 	and.w	r3, r3, #7
 800af40:	4903      	ldr	r1, [pc, #12]	@ (800af50 <HAL_RCC_GetPCLK1Freq+0x24>)
 800af42:	5ccb      	ldrb	r3, [r1, r3]
 800af44:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af48:	4618      	mov	r0, r3
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	40023800 	.word	0x40023800
 800af50:	0801b99c 	.word	0x0801b99c

0800af54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800af58:	f7ff ffdc 	bl	800af14 <HAL_RCC_GetHCLKFreq>
 800af5c:	4602      	mov	r2, r0
 800af5e:	4b05      	ldr	r3, [pc, #20]	@ (800af74 <HAL_RCC_GetPCLK2Freq+0x20>)
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	0b5b      	lsrs	r3, r3, #13
 800af64:	f003 0307 	and.w	r3, r3, #7
 800af68:	4903      	ldr	r1, [pc, #12]	@ (800af78 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af6a:	5ccb      	ldrb	r3, [r1, r3]
 800af6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af70:	4618      	mov	r0, r3
 800af72:	bd80      	pop	{r7, pc}
 800af74:	40023800 	.word	0x40023800
 800af78:	0801b99c 	.word	0x0801b99c

0800af7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	220f      	movs	r2, #15
 800af8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800af8c:	4b12      	ldr	r3, [pc, #72]	@ (800afd8 <HAL_RCC_GetClockConfig+0x5c>)
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	f003 0203 	and.w	r2, r3, #3
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800af98:	4b0f      	ldr	r3, [pc, #60]	@ (800afd8 <HAL_RCC_GetClockConfig+0x5c>)
 800af9a:	689b      	ldr	r3, [r3, #8]
 800af9c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800afa4:	4b0c      	ldr	r3, [pc, #48]	@ (800afd8 <HAL_RCC_GetClockConfig+0x5c>)
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800afb0:	4b09      	ldr	r3, [pc, #36]	@ (800afd8 <HAL_RCC_GetClockConfig+0x5c>)
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	08db      	lsrs	r3, r3, #3
 800afb6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800afbe:	4b07      	ldr	r3, [pc, #28]	@ (800afdc <HAL_RCC_GetClockConfig+0x60>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f003 020f 	and.w	r2, r3, #15
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	601a      	str	r2, [r3, #0]
}
 800afca:	bf00      	nop
 800afcc:	370c      	adds	r7, #12
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	40023800 	.word	0x40023800
 800afdc:	40023c00 	.word	0x40023c00

0800afe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b088      	sub	sp, #32
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800afe8:	2300      	movs	r3, #0
 800afea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800afec:	2300      	movs	r3, #0
 800afee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800aff4:	2300      	movs	r3, #0
 800aff6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800aff8:	2300      	movs	r3, #0
 800affa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f003 0301 	and.w	r3, r3, #1
 800b004:	2b00      	cmp	r3, #0
 800b006:	d012      	beq.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b008:	4b69      	ldr	r3, [pc, #420]	@ (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	4a68      	ldr	r2, [pc, #416]	@ (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b00e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b012:	6093      	str	r3, [r2, #8]
 800b014:	4b66      	ldr	r3, [pc, #408]	@ (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b016:	689a      	ldr	r2, [r3, #8]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b01c:	4964      	ldr	r1, [pc, #400]	@ (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b01e:	4313      	orrs	r3, r2
 800b020:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b026:	2b00      	cmp	r3, #0
 800b028:	d101      	bne.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800b02a:	2301      	movs	r3, #1
 800b02c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b036:	2b00      	cmp	r3, #0
 800b038:	d017      	beq.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b03a:	4b5d      	ldr	r3, [pc, #372]	@ (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b03c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b040:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b048:	4959      	ldr	r1, [pc, #356]	@ (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b04a:	4313      	orrs	r3, r2
 800b04c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b054:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b058:	d101      	bne.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800b05a:	2301      	movs	r3, #1
 800b05c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b062:	2b00      	cmp	r3, #0
 800b064:	d101      	bne.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800b066:	2301      	movs	r3, #1
 800b068:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b072:	2b00      	cmp	r3, #0
 800b074:	d017      	beq.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b076:	4b4e      	ldr	r3, [pc, #312]	@ (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b078:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b07c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b084:	494a      	ldr	r1, [pc, #296]	@ (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b086:	4313      	orrs	r3, r2
 800b088:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b090:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b094:	d101      	bne.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800b096:	2301      	movs	r3, #1
 800b098:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d101      	bne.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d001      	beq.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f003 0320 	and.w	r3, r3, #32
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	f000 808b 	beq.w	800b1da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b0c4:	4b3a      	ldr	r3, [pc, #232]	@ (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b0c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0c8:	4a39      	ldr	r2, [pc, #228]	@ (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b0ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b0ce:	6413      	str	r3, [r2, #64]	@ 0x40
 800b0d0:	4b37      	ldr	r3, [pc, #220]	@ (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b0d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b0d8:	60bb      	str	r3, [r7, #8]
 800b0da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b0dc:	4b35      	ldr	r3, [pc, #212]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a34      	ldr	r2, [pc, #208]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b0e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b0e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0e8:	f7fa ff0e 	bl	8005f08 <HAL_GetTick>
 800b0ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b0ee:	e008      	b.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0f0:	f7fa ff0a 	bl	8005f08 <HAL_GetTick>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	2b64      	cmp	r3, #100	@ 0x64
 800b0fc:	d901      	bls.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800b0fe:	2303      	movs	r3, #3
 800b100:	e357      	b.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b102:	4b2c      	ldr	r3, [pc, #176]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d0f0      	beq.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b10e:	4b28      	ldr	r3, [pc, #160]	@ (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b116:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d035      	beq.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b122:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	429a      	cmp	r2, r3
 800b12a:	d02e      	beq.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b12c:	4b20      	ldr	r3, [pc, #128]	@ (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b12e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b130:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b134:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b136:	4b1e      	ldr	r3, [pc, #120]	@ (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b13a:	4a1d      	ldr	r2, [pc, #116]	@ (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b13c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b140:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b142:	4b1b      	ldr	r3, [pc, #108]	@ (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b146:	4a1a      	ldr	r2, [pc, #104]	@ (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b148:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b14c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b14e:	4a18      	ldr	r2, [pc, #96]	@ (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b154:	4b16      	ldr	r3, [pc, #88]	@ (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b158:	f003 0301 	and.w	r3, r3, #1
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d114      	bne.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b160:	f7fa fed2 	bl	8005f08 <HAL_GetTick>
 800b164:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b166:	e00a      	b.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b168:	f7fa fece 	bl	8005f08 <HAL_GetTick>
 800b16c:	4602      	mov	r2, r0
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	1ad3      	subs	r3, r2, r3
 800b172:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b176:	4293      	cmp	r3, r2
 800b178:	d901      	bls.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800b17a:	2303      	movs	r3, #3
 800b17c:	e319      	b.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b17e:	4b0c      	ldr	r3, [pc, #48]	@ (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b182:	f003 0302 	and.w	r3, r3, #2
 800b186:	2b00      	cmp	r3, #0
 800b188:	d0ee      	beq.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b18e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b192:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b196:	d111      	bne.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800b198:	4b05      	ldr	r3, [pc, #20]	@ (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b1a4:	4b04      	ldr	r3, [pc, #16]	@ (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b1a6:	400b      	ands	r3, r1
 800b1a8:	4901      	ldr	r1, [pc, #4]	@ (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	608b      	str	r3, [r1, #8]
 800b1ae:	e00b      	b.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b1b0:	40023800 	.word	0x40023800
 800b1b4:	40007000 	.word	0x40007000
 800b1b8:	0ffffcff 	.word	0x0ffffcff
 800b1bc:	4baa      	ldr	r3, [pc, #680]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	4aa9      	ldr	r2, [pc, #676]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1c2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800b1c6:	6093      	str	r3, [r2, #8]
 800b1c8:	4ba7      	ldr	r3, [pc, #668]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b1d4:	49a4      	ldr	r1, [pc, #656]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f003 0310 	and.w	r3, r3, #16
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d010      	beq.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b1e6:	4ba0      	ldr	r3, [pc, #640]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1ec:	4a9e      	ldr	r2, [pc, #632]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b1f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b1f6:	4b9c      	ldr	r3, [pc, #624]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b200:	4999      	ldr	r1, [pc, #612]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b202:	4313      	orrs	r3, r2
 800b204:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b210:	2b00      	cmp	r3, #0
 800b212:	d00a      	beq.n	800b22a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b214:	4b94      	ldr	r3, [pc, #592]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b21a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b222:	4991      	ldr	r1, [pc, #580]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b224:	4313      	orrs	r3, r2
 800b226:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b232:	2b00      	cmp	r3, #0
 800b234:	d00a      	beq.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b236:	4b8c      	ldr	r3, [pc, #560]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b23c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b244:	4988      	ldr	r1, [pc, #544]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b246:	4313      	orrs	r3, r2
 800b248:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00a      	beq.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b258:	4b83      	ldr	r3, [pc, #524]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b25a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b25e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b266:	4980      	ldr	r1, [pc, #512]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b268:	4313      	orrs	r3, r2
 800b26a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b276:	2b00      	cmp	r3, #0
 800b278:	d00a      	beq.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b27a:	4b7b      	ldr	r3, [pc, #492]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b27c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b280:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b288:	4977      	ldr	r1, [pc, #476]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b28a:	4313      	orrs	r3, r2
 800b28c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d00a      	beq.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b29c:	4b72      	ldr	r3, [pc, #456]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b29e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2a2:	f023 0203 	bic.w	r2, r3, #3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2aa:	496f      	ldr	r1, [pc, #444]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d00a      	beq.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b2be:	4b6a      	ldr	r3, [pc, #424]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2c4:	f023 020c 	bic.w	r2, r3, #12
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2cc:	4966      	ldr	r1, [pc, #408]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00a      	beq.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b2e0:	4b61      	ldr	r3, [pc, #388]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2e6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2ee:	495e      	ldr	r1, [pc, #376]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00a      	beq.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b302:	4b59      	ldr	r3, [pc, #356]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b308:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b310:	4955      	ldr	r1, [pc, #340]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b312:	4313      	orrs	r3, r2
 800b314:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00a      	beq.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b324:	4b50      	ldr	r3, [pc, #320]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b32a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b332:	494d      	ldr	r1, [pc, #308]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b334:	4313      	orrs	r3, r2
 800b336:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00a      	beq.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b346:	4b48      	ldr	r3, [pc, #288]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b34c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b354:	4944      	ldr	r1, [pc, #272]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b356:	4313      	orrs	r3, r2
 800b358:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b364:	2b00      	cmp	r3, #0
 800b366:	d00a      	beq.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b368:	4b3f      	ldr	r3, [pc, #252]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b36a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b36e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b376:	493c      	ldr	r1, [pc, #240]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b378:	4313      	orrs	r3, r2
 800b37a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b386:	2b00      	cmp	r3, #0
 800b388:	d00a      	beq.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b38a:	4b37      	ldr	r3, [pc, #220]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b38c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b390:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b398:	4933      	ldr	r1, [pc, #204]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b39a:	4313      	orrs	r3, r2
 800b39c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d00a      	beq.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b3ac:	4b2e      	ldr	r3, [pc, #184]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b3ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3b2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b3ba:	492b      	ldr	r1, [pc, #172]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d011      	beq.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b3ce:	4b26      	ldr	r3, [pc, #152]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b3d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3d4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b3dc:	4922      	ldr	r1, [pc, #136]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b3e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b3ec:	d101      	bne.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f003 0308 	and.w	r3, r3, #8
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d001      	beq.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b3fe:	2301      	movs	r3, #1
 800b400:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d00a      	beq.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b40e:	4b16      	ldr	r3, [pc, #88]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b414:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b41c:	4912      	ldr	r1, [pc, #72]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b41e:	4313      	orrs	r3, r2
 800b420:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d00b      	beq.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b430:	4b0d      	ldr	r3, [pc, #52]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b436:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b440:	4909      	ldr	r1, [pc, #36]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b442:	4313      	orrs	r3, r2
 800b444:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d006      	beq.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b456:	2b00      	cmp	r3, #0
 800b458:	f000 80d9 	beq.w	800b60e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b45c:	4b02      	ldr	r3, [pc, #8]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a01      	ldr	r2, [pc, #4]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b462:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b466:	e001      	b.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800b468:	40023800 	.word	0x40023800
 800b46c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b46e:	f7fa fd4b 	bl	8005f08 <HAL_GetTick>
 800b472:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b474:	e008      	b.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b476:	f7fa fd47 	bl	8005f08 <HAL_GetTick>
 800b47a:	4602      	mov	r2, r0
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	1ad3      	subs	r3, r2, r3
 800b480:	2b64      	cmp	r3, #100	@ 0x64
 800b482:	d901      	bls.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b484:	2303      	movs	r3, #3
 800b486:	e194      	b.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b488:	4b6c      	ldr	r3, [pc, #432]	@ (800b63c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b490:	2b00      	cmp	r3, #0
 800b492:	d1f0      	bne.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f003 0301 	and.w	r3, r3, #1
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d021      	beq.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d11d      	bne.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b4a8:	4b64      	ldr	r3, [pc, #400]	@ (800b63c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b4aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4ae:	0c1b      	lsrs	r3, r3, #16
 800b4b0:	f003 0303 	and.w	r3, r3, #3
 800b4b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b4b6:	4b61      	ldr	r3, [pc, #388]	@ (800b63c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b4b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4bc:	0e1b      	lsrs	r3, r3, #24
 800b4be:	f003 030f 	and.w	r3, r3, #15
 800b4c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	019a      	lsls	r2, r3, #6
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	041b      	lsls	r3, r3, #16
 800b4ce:	431a      	orrs	r2, r3
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	061b      	lsls	r3, r3, #24
 800b4d4:	431a      	orrs	r2, r3
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	689b      	ldr	r3, [r3, #8]
 800b4da:	071b      	lsls	r3, r3, #28
 800b4dc:	4957      	ldr	r1, [pc, #348]	@ (800b63c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d004      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4f8:	d00a      	beq.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b502:	2b00      	cmp	r3, #0
 800b504:	d02e      	beq.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b50a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b50e:	d129      	bne.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b510:	4b4a      	ldr	r3, [pc, #296]	@ (800b63c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b516:	0c1b      	lsrs	r3, r3, #16
 800b518:	f003 0303 	and.w	r3, r3, #3
 800b51c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b51e:	4b47      	ldr	r3, [pc, #284]	@ (800b63c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b520:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b524:	0f1b      	lsrs	r3, r3, #28
 800b526:	f003 0307 	and.w	r3, r3, #7
 800b52a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	019a      	lsls	r2, r3, #6
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	041b      	lsls	r3, r3, #16
 800b536:	431a      	orrs	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	061b      	lsls	r3, r3, #24
 800b53e:	431a      	orrs	r2, r3
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	071b      	lsls	r3, r3, #28
 800b544:	493d      	ldr	r1, [pc, #244]	@ (800b63c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b546:	4313      	orrs	r3, r2
 800b548:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b54c:	4b3b      	ldr	r3, [pc, #236]	@ (800b63c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b54e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b552:	f023 021f 	bic.w	r2, r3, #31
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b55a:	3b01      	subs	r3, #1
 800b55c:	4937      	ldr	r1, [pc, #220]	@ (800b63c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b55e:	4313      	orrs	r3, r2
 800b560:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d01d      	beq.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b570:	4b32      	ldr	r3, [pc, #200]	@ (800b63c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b572:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b576:	0e1b      	lsrs	r3, r3, #24
 800b578:	f003 030f 	and.w	r3, r3, #15
 800b57c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b57e:	4b2f      	ldr	r3, [pc, #188]	@ (800b63c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b580:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b584:	0f1b      	lsrs	r3, r3, #28
 800b586:	f003 0307 	and.w	r3, r3, #7
 800b58a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	019a      	lsls	r2, r3, #6
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	691b      	ldr	r3, [r3, #16]
 800b596:	041b      	lsls	r3, r3, #16
 800b598:	431a      	orrs	r2, r3
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	061b      	lsls	r3, r3, #24
 800b59e:	431a      	orrs	r2, r3
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	071b      	lsls	r3, r3, #28
 800b5a4:	4925      	ldr	r1, [pc, #148]	@ (800b63c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d011      	beq.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	019a      	lsls	r2, r3, #6
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	691b      	ldr	r3, [r3, #16]
 800b5c2:	041b      	lsls	r3, r3, #16
 800b5c4:	431a      	orrs	r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	061b      	lsls	r3, r3, #24
 800b5cc:	431a      	orrs	r2, r3
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	071b      	lsls	r3, r3, #28
 800b5d4:	4919      	ldr	r1, [pc, #100]	@ (800b63c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b5dc:	4b17      	ldr	r3, [pc, #92]	@ (800b63c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4a16      	ldr	r2, [pc, #88]	@ (800b63c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b5e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b5e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5e8:	f7fa fc8e 	bl	8005f08 <HAL_GetTick>
 800b5ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b5ee:	e008      	b.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b5f0:	f7fa fc8a 	bl	8005f08 <HAL_GetTick>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	1ad3      	subs	r3, r2, r3
 800b5fa:	2b64      	cmp	r3, #100	@ 0x64
 800b5fc:	d901      	bls.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b5fe:	2303      	movs	r3, #3
 800b600:	e0d7      	b.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b602:	4b0e      	ldr	r3, [pc, #56]	@ (800b63c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d0f0      	beq.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	2b01      	cmp	r3, #1
 800b612:	f040 80cd 	bne.w	800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b616:	4b09      	ldr	r3, [pc, #36]	@ (800b63c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a08      	ldr	r2, [pc, #32]	@ (800b63c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b61c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b622:	f7fa fc71 	bl	8005f08 <HAL_GetTick>
 800b626:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b628:	e00a      	b.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b62a:	f7fa fc6d 	bl	8005f08 <HAL_GetTick>
 800b62e:	4602      	mov	r2, r0
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	1ad3      	subs	r3, r2, r3
 800b634:	2b64      	cmp	r3, #100	@ 0x64
 800b636:	d903      	bls.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b638:	2303      	movs	r3, #3
 800b63a:	e0ba      	b.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800b63c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b640:	4b5e      	ldr	r3, [pc, #376]	@ (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b64c:	d0ed      	beq.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b656:	2b00      	cmp	r3, #0
 800b658:	d003      	beq.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d009      	beq.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d02e      	beq.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b672:	2b00      	cmp	r3, #0
 800b674:	d12a      	bne.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b676:	4b51      	ldr	r3, [pc, #324]	@ (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b67c:	0c1b      	lsrs	r3, r3, #16
 800b67e:	f003 0303 	and.w	r3, r3, #3
 800b682:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b684:	4b4d      	ldr	r3, [pc, #308]	@ (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b68a:	0f1b      	lsrs	r3, r3, #28
 800b68c:	f003 0307 	and.w	r3, r3, #7
 800b690:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	695b      	ldr	r3, [r3, #20]
 800b696:	019a      	lsls	r2, r3, #6
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	041b      	lsls	r3, r3, #16
 800b69c:	431a      	orrs	r2, r3
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	699b      	ldr	r3, [r3, #24]
 800b6a2:	061b      	lsls	r3, r3, #24
 800b6a4:	431a      	orrs	r2, r3
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	071b      	lsls	r3, r3, #28
 800b6aa:	4944      	ldr	r1, [pc, #272]	@ (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b6b2:	4b42      	ldr	r3, [pc, #264]	@ (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b6b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b6b8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	021b      	lsls	r3, r3, #8
 800b6c4:	493d      	ldr	r1, [pc, #244]	@ (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d022      	beq.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b6dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b6e0:	d11d      	bne.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b6e2:	4b36      	ldr	r3, [pc, #216]	@ (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b6e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6e8:	0e1b      	lsrs	r3, r3, #24
 800b6ea:	f003 030f 	and.w	r3, r3, #15
 800b6ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b6f0:	4b32      	ldr	r3, [pc, #200]	@ (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b6f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6f6:	0f1b      	lsrs	r3, r3, #28
 800b6f8:	f003 0307 	and.w	r3, r3, #7
 800b6fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	695b      	ldr	r3, [r3, #20]
 800b702:	019a      	lsls	r2, r3, #6
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6a1b      	ldr	r3, [r3, #32]
 800b708:	041b      	lsls	r3, r3, #16
 800b70a:	431a      	orrs	r2, r3
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	061b      	lsls	r3, r3, #24
 800b710:	431a      	orrs	r2, r3
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	071b      	lsls	r3, r3, #28
 800b716:	4929      	ldr	r1, [pc, #164]	@ (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b718:	4313      	orrs	r3, r2
 800b71a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f003 0308 	and.w	r3, r3, #8
 800b726:	2b00      	cmp	r3, #0
 800b728:	d028      	beq.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b72a:	4b24      	ldr	r3, [pc, #144]	@ (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b72c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b730:	0e1b      	lsrs	r3, r3, #24
 800b732:	f003 030f 	and.w	r3, r3, #15
 800b736:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b738:	4b20      	ldr	r3, [pc, #128]	@ (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b73a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b73e:	0c1b      	lsrs	r3, r3, #16
 800b740:	f003 0303 	and.w	r3, r3, #3
 800b744:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	695b      	ldr	r3, [r3, #20]
 800b74a:	019a      	lsls	r2, r3, #6
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	041b      	lsls	r3, r3, #16
 800b750:	431a      	orrs	r2, r3
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	061b      	lsls	r3, r3, #24
 800b756:	431a      	orrs	r2, r3
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	69db      	ldr	r3, [r3, #28]
 800b75c:	071b      	lsls	r3, r3, #28
 800b75e:	4917      	ldr	r1, [pc, #92]	@ (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b760:	4313      	orrs	r3, r2
 800b762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b766:	4b15      	ldr	r3, [pc, #84]	@ (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b768:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b76c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b774:	4911      	ldr	r1, [pc, #68]	@ (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b776:	4313      	orrs	r3, r2
 800b778:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b77c:	4b0f      	ldr	r3, [pc, #60]	@ (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4a0e      	ldr	r2, [pc, #56]	@ (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b788:	f7fa fbbe 	bl	8005f08 <HAL_GetTick>
 800b78c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b78e:	e008      	b.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b790:	f7fa fbba 	bl	8005f08 <HAL_GetTick>
 800b794:	4602      	mov	r2, r0
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	1ad3      	subs	r3, r2, r3
 800b79a:	2b64      	cmp	r3, #100	@ 0x64
 800b79c:	d901      	bls.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b79e:	2303      	movs	r3, #3
 800b7a0:	e007      	b.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b7a2:	4b06      	ldr	r3, [pc, #24]	@ (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b7aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7ae:	d1ef      	bne.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800b7b0:	2300      	movs	r3, #0
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3720      	adds	r7, #32
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	40023800 	.word	0x40023800

0800b7c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b087      	sub	sp, #28
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b7de:	f040 808d 	bne.w	800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b7e2:	4b93      	ldr	r3, [pc, #588]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b7e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7e8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b7f0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b7f8:	d07c      	beq.n	800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b800:	d87b      	bhi.n	800b8fa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d004      	beq.n	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b80e:	d039      	beq.n	800b884 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b810:	e073      	b.n	800b8fa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b812:	4b87      	ldr	r3, [pc, #540]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d108      	bne.n	800b830 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b81e:	4b84      	ldr	r3, [pc, #528]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b826:	4a83      	ldr	r2, [pc, #524]	@ (800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b828:	fbb2 f3f3 	udiv	r3, r2, r3
 800b82c:	613b      	str	r3, [r7, #16]
 800b82e:	e007      	b.n	800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b830:	4b7f      	ldr	r3, [pc, #508]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b838:	4a7f      	ldr	r2, [pc, #508]	@ (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b83a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b83e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b840:	4b7b      	ldr	r3, [pc, #492]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b846:	0e1b      	lsrs	r3, r3, #24
 800b848:	f003 030f 	and.w	r3, r3, #15
 800b84c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b84e:	4b78      	ldr	r3, [pc, #480]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b854:	099b      	lsrs	r3, r3, #6
 800b856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b85a:	693a      	ldr	r2, [r7, #16]
 800b85c:	fb03 f202 	mul.w	r2, r3, r2
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	fbb2 f3f3 	udiv	r3, r2, r3
 800b866:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b868:	4b71      	ldr	r3, [pc, #452]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b86a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b86e:	0a1b      	lsrs	r3, r3, #8
 800b870:	f003 031f 	and.w	r3, r3, #31
 800b874:	3301      	adds	r3, #1
 800b876:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b878:	697a      	ldr	r2, [r7, #20]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b880:	617b      	str	r3, [r7, #20]
        break;
 800b882:	e03b      	b.n	800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b884:	4b6a      	ldr	r3, [pc, #424]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d108      	bne.n	800b8a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b890:	4b67      	ldr	r3, [pc, #412]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b898:	4a66      	ldr	r2, [pc, #408]	@ (800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b89a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b89e:	613b      	str	r3, [r7, #16]
 800b8a0:	e007      	b.n	800b8b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b8a2:	4b63      	ldr	r3, [pc, #396]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b8aa:	4a63      	ldr	r2, [pc, #396]	@ (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b8ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8b0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b8b2:	4b5f      	ldr	r3, [pc, #380]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b8b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8b8:	0e1b      	lsrs	r3, r3, #24
 800b8ba:	f003 030f 	and.w	r3, r3, #15
 800b8be:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b8c0:	4b5b      	ldr	r3, [pc, #364]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b8c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8c6:	099b      	lsrs	r3, r3, #6
 800b8c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8cc:	693a      	ldr	r2, [r7, #16]
 800b8ce:	fb03 f202 	mul.w	r2, r3, r2
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8d8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b8da:	4b55      	ldr	r3, [pc, #340]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b8dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8e0:	f003 031f 	and.w	r3, r3, #31
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b8e8:	697a      	ldr	r2, [r7, #20]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8f0:	617b      	str	r3, [r7, #20]
        break;
 800b8f2:	e003      	b.n	800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b8f4:	4b51      	ldr	r3, [pc, #324]	@ (800ba3c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b8f6:	617b      	str	r3, [r7, #20]
        break;
 800b8f8:	e000      	b.n	800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800b8fa:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b902:	f040 808d 	bne.w	800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b906:	4b4a      	ldr	r3, [pc, #296]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b908:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b90c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b914:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b91c:	d07c      	beq.n	800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b924:	d87b      	bhi.n	800ba1e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d004      	beq.n	800b936 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b932:	d039      	beq.n	800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b934:	e073      	b.n	800ba1e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b936:	4b3e      	ldr	r3, [pc, #248]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d108      	bne.n	800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b942:	4b3b      	ldr	r3, [pc, #236]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b94a:	4a3a      	ldr	r2, [pc, #232]	@ (800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b94c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b950:	613b      	str	r3, [r7, #16]
 800b952:	e007      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b954:	4b36      	ldr	r3, [pc, #216]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b95c:	4a36      	ldr	r2, [pc, #216]	@ (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b95e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b962:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b964:	4b32      	ldr	r3, [pc, #200]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b96a:	0e1b      	lsrs	r3, r3, #24
 800b96c:	f003 030f 	and.w	r3, r3, #15
 800b970:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b972:	4b2f      	ldr	r3, [pc, #188]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b978:	099b      	lsrs	r3, r3, #6
 800b97a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b97e:	693a      	ldr	r2, [r7, #16]
 800b980:	fb03 f202 	mul.w	r2, r3, r2
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	fbb2 f3f3 	udiv	r3, r2, r3
 800b98a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b98c:	4b28      	ldr	r3, [pc, #160]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b98e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b992:	0a1b      	lsrs	r3, r3, #8
 800b994:	f003 031f 	and.w	r3, r3, #31
 800b998:	3301      	adds	r3, #1
 800b99a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b99c:	697a      	ldr	r2, [r7, #20]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9a4:	617b      	str	r3, [r7, #20]
        break;
 800b9a6:	e03b      	b.n	800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b9a8:	4b21      	ldr	r3, [pc, #132]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d108      	bne.n	800b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b9b4:	4b1e      	ldr	r3, [pc, #120]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b9bc:	4a1d      	ldr	r2, [pc, #116]	@ (800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b9be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9c2:	613b      	str	r3, [r7, #16]
 800b9c4:	e007      	b.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b9c6:	4b1a      	ldr	r3, [pc, #104]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b9ce:	4a1a      	ldr	r2, [pc, #104]	@ (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b9d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9d4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b9d6:	4b16      	ldr	r3, [pc, #88]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b9d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9dc:	0e1b      	lsrs	r3, r3, #24
 800b9de:	f003 030f 	and.w	r3, r3, #15
 800b9e2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b9e4:	4b12      	ldr	r3, [pc, #72]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b9e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9ea:	099b      	lsrs	r3, r3, #6
 800b9ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9f0:	693a      	ldr	r2, [r7, #16]
 800b9f2:	fb03 f202 	mul.w	r2, r3, r2
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9fc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b9fe:	4b0c      	ldr	r3, [pc, #48]	@ (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ba00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba04:	f003 031f 	and.w	r3, r3, #31
 800ba08:	3301      	adds	r3, #1
 800ba0a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ba0c:	697a      	ldr	r2, [r7, #20]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba14:	617b      	str	r3, [r7, #20]
        break;
 800ba16:	e003      	b.n	800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800ba18:	4b08      	ldr	r3, [pc, #32]	@ (800ba3c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ba1a:	617b      	str	r3, [r7, #20]
        break;
 800ba1c:	e000      	b.n	800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800ba1e:	bf00      	nop
      }
    }
  }

  return frequency;
 800ba20:	697b      	ldr	r3, [r7, #20]
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	371c      	adds	r7, #28
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr
 800ba2e:	bf00      	nop
 800ba30:	40023800 	.word	0x40023800
 800ba34:	00f42400 	.word	0x00f42400
 800ba38:	017d7840 	.word	0x017d7840
 800ba3c:	00bb8000 	.word	0x00bb8000

0800ba40 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d101      	bne.n	800ba52 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e071      	b.n	800bb36 <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	7f5b      	ldrb	r3, [r3, #29]
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d105      	bne.n	800ba68 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f7f8 fe04 	bl	8004670 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2202      	movs	r2, #2
 800ba6c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	f003 0310 	and.w	r3, r3, #16
 800ba78:	2b10      	cmp	r3, #16
 800ba7a:	d053      	beq.n	800bb24 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	22ca      	movs	r2, #202	@ 0xca
 800ba82:	625a      	str	r2, [r3, #36]	@ 0x24
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	2253      	movs	r2, #83	@ 0x53
 800ba8a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 fac7 	bl	800c020 <RTC_EnterInitMode>
 800ba92:	4603      	mov	r3, r0
 800ba94:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800ba96:	7bfb      	ldrb	r3, [r7, #15]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d12a      	bne.n	800baf2 <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	6899      	ldr	r1, [r3, #8]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	4b26      	ldr	r3, [pc, #152]	@ (800bb40 <HAL_RTC_Init+0x100>)
 800baa8:	400b      	ands	r3, r1
 800baaa:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	6899      	ldr	r1, [r3, #8]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	685a      	ldr	r2, [r3, #4]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	691b      	ldr	r3, [r3, #16]
 800baba:	431a      	orrs	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	695b      	ldr	r3, [r3, #20]
 800bac0:	431a      	orrs	r2, r3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	430a      	orrs	r2, r1
 800bac8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	68d2      	ldr	r2, [r2, #12]
 800bad2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	6919      	ldr	r1, [r3, #16]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	689b      	ldr	r3, [r3, #8]
 800bade:	041a      	lsls	r2, r3, #16
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	430a      	orrs	r2, r1
 800bae6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 fad0 	bl	800c08e <RTC_ExitInitMode>
 800baee:	4603      	mov	r3, r0
 800baf0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800baf2:	7bfb      	ldrb	r3, [r7, #15]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d110      	bne.n	800bb1a <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f022 0208 	bic.w	r2, r2, #8
 800bb06:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	699a      	ldr	r2, [r3, #24]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	430a      	orrs	r2, r1
 800bb18:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	22ff      	movs	r2, #255	@ 0xff
 800bb20:	625a      	str	r2, [r3, #36]	@ 0x24
 800bb22:	e001      	b.n	800bb28 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800bb24:	2300      	movs	r3, #0
 800bb26:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800bb28:	7bfb      	ldrb	r3, [r7, #15]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d102      	bne.n	800bb34 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2201      	movs	r2, #1
 800bb32:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800bb34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	ff8fffbf 	.word	0xff8fffbf

0800bb44 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bb44:	b590      	push	{r4, r7, lr}
 800bb46:	b087      	sub	sp, #28
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bb50:	2300      	movs	r3, #0
 800bb52:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	7f1b      	ldrb	r3, [r3, #28]
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d101      	bne.n	800bb60 <HAL_RTC_SetTime+0x1c>
 800bb5c:	2302      	movs	r3, #2
 800bb5e:	e085      	b.n	800bc6c <HAL_RTC_SetTime+0x128>
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2201      	movs	r2, #1
 800bb64:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2202      	movs	r2, #2
 800bb6a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d126      	bne.n	800bbc0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d102      	bne.n	800bb86 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	2200      	movs	r2, #0
 800bb84:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f000 faa4 	bl	800c0d8 <RTC_ByteToBcd2>
 800bb90:	4603      	mov	r3, r0
 800bb92:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	785b      	ldrb	r3, [r3, #1]
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f000 fa9d 	bl	800c0d8 <RTC_ByteToBcd2>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bba2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	789b      	ldrb	r3, [r3, #2]
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f000 fa95 	bl	800c0d8 <RTC_ByteToBcd2>
 800bbae:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bbb0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	78db      	ldrb	r3, [r3, #3]
 800bbb8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	617b      	str	r3, [r7, #20]
 800bbbe:	e018      	b.n	800bbf2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d102      	bne.n	800bbd4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	785b      	ldrb	r3, [r3, #1]
 800bbde:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800bbe0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800bbe6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	78db      	ldrb	r3, [r3, #3]
 800bbec:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	22ca      	movs	r2, #202	@ 0xca
 800bbf8:	625a      	str	r2, [r3, #36]	@ 0x24
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2253      	movs	r2, #83	@ 0x53
 800bc00:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bc02:	68f8      	ldr	r0, [r7, #12]
 800bc04:	f000 fa0c 	bl	800c020 <RTC_EnterInitMode>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800bc0c:	7cfb      	ldrb	r3, [r7, #19]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d11e      	bne.n	800bc50 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	6979      	ldr	r1, [r7, #20]
 800bc18:	4b16      	ldr	r3, [pc, #88]	@ (800bc74 <HAL_RTC_SetTime+0x130>)
 800bc1a:	400b      	ands	r3, r1
 800bc1c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	689a      	ldr	r2, [r3, #8]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800bc2c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	6899      	ldr	r1, [r3, #8]
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	68da      	ldr	r2, [r3, #12]
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	691b      	ldr	r3, [r3, #16]
 800bc3c:	431a      	orrs	r2, r3
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	430a      	orrs	r2, r1
 800bc44:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f000 fa21 	bl	800c08e <RTC_ExitInitMode>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800bc50:	7cfb      	ldrb	r3, [r7, #19]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d102      	bne.n	800bc5c <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2201      	movs	r2, #1
 800bc5a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	22ff      	movs	r2, #255	@ 0xff
 800bc62:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	771a      	strb	r2, [r3, #28]

  return status;
 800bc6a:	7cfb      	ldrb	r3, [r7, #19]
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	371c      	adds	r7, #28
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd90      	pop	{r4, r7, pc}
 800bc74:	007f7f7f 	.word	0x007f7f7f

0800bc78 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bc78:	b590      	push	{r4, r7, lr}
 800bc7a:	b087      	sub	sp, #28
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800bc84:	2300      	movs	r3, #0
 800bc86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	7f1b      	ldrb	r3, [r3, #28]
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d101      	bne.n	800bc94 <HAL_RTC_SetDate+0x1c>
 800bc90:	2302      	movs	r3, #2
 800bc92:	e06f      	b.n	800bd74 <HAL_RTC_SetDate+0xfc>
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2201      	movs	r2, #1
 800bc98:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2202      	movs	r2, #2
 800bc9e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d10e      	bne.n	800bcc4 <HAL_RTC_SetDate+0x4c>
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	785b      	ldrb	r3, [r3, #1]
 800bcaa:	f003 0310 	and.w	r3, r3, #16
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d008      	beq.n	800bcc4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	785b      	ldrb	r3, [r3, #1]
 800bcb6:	f023 0310 	bic.w	r3, r3, #16
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	330a      	adds	r3, #10
 800bcbe:	b2da      	uxtb	r2, r3
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d11c      	bne.n	800bd04 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	78db      	ldrb	r3, [r3, #3]
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f000 fa02 	bl	800c0d8 <RTC_ByteToBcd2>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	785b      	ldrb	r3, [r3, #1]
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f000 f9fb 	bl	800c0d8 <RTC_ByteToBcd2>
 800bce2:	4603      	mov	r3, r0
 800bce4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bce6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	789b      	ldrb	r3, [r3, #2]
 800bcec:	4618      	mov	r0, r3
 800bcee:	f000 f9f3 	bl	800c0d8 <RTC_ByteToBcd2>
 800bcf2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bcf4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	617b      	str	r3, [r7, #20]
 800bd02:	e00e      	b.n	800bd22 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	78db      	ldrb	r3, [r3, #3]
 800bd08:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	785b      	ldrb	r3, [r3, #1]
 800bd0e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bd10:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800bd12:	68ba      	ldr	r2, [r7, #8]
 800bd14:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800bd16:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	22ca      	movs	r2, #202	@ 0xca
 800bd28:	625a      	str	r2, [r3, #36]	@ 0x24
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	2253      	movs	r2, #83	@ 0x53
 800bd30:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bd32:	68f8      	ldr	r0, [r7, #12]
 800bd34:	f000 f974 	bl	800c020 <RTC_EnterInitMode>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800bd3c:	7cfb      	ldrb	r3, [r7, #19]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d10a      	bne.n	800bd58 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	6979      	ldr	r1, [r7, #20]
 800bd48:	4b0c      	ldr	r3, [pc, #48]	@ (800bd7c <HAL_RTC_SetDate+0x104>)
 800bd4a:	400b      	ands	r3, r1
 800bd4c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bd4e:	68f8      	ldr	r0, [r7, #12]
 800bd50:	f000 f99d 	bl	800c08e <RTC_ExitInitMode>
 800bd54:	4603      	mov	r3, r0
 800bd56:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800bd58:	7cfb      	ldrb	r3, [r7, #19]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d102      	bne.n	800bd64 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2201      	movs	r2, #1
 800bd62:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	22ff      	movs	r2, #255	@ 0xff
 800bd6a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	771a      	strb	r2, [r3, #28]

  return status;
 800bd72:	7cfb      	ldrb	r3, [r7, #19]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	371c      	adds	r7, #28
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd90      	pop	{r4, r7, pc}
 800bd7c:	00ffff3f 	.word	0x00ffff3f

0800bd80 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800bd80:	b590      	push	{r4, r7, lr}
 800bd82:	b089      	sub	sp, #36	@ 0x24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800bd90:	2300      	movs	r3, #0
 800bd92:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800bd94:	2300      	movs	r3, #0
 800bd96:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	7f1b      	ldrb	r3, [r3, #28]
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d101      	bne.n	800bda4 <HAL_RTC_SetAlarm+0x24>
 800bda0:	2302      	movs	r3, #2
 800bda2:	e113      	b.n	800bfcc <HAL_RTC_SetAlarm+0x24c>
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2201      	movs	r2, #1
 800bda8:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2202      	movs	r2, #2
 800bdae:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d137      	bne.n	800be26 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d102      	bne.n	800bdca <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f000 f982 	bl	800c0d8 <RTC_ByteToBcd2>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	785b      	ldrb	r3, [r3, #1]
 800bddc:	4618      	mov	r0, r3
 800bdde:	f000 f97b 	bl	800c0d8 <RTC_ByteToBcd2>
 800bde2:	4603      	mov	r3, r0
 800bde4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800bde6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	789b      	ldrb	r3, [r3, #2]
 800bdec:	4618      	mov	r0, r3
 800bdee:	f000 f973 	bl	800c0d8 <RTC_ByteToBcd2>
 800bdf2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800bdf4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	78db      	ldrb	r3, [r3, #3]
 800bdfc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800bdfe:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be08:	4618      	mov	r0, r3
 800be0a:	f000 f965 	bl	800c0d8 <RTC_ByteToBcd2>
 800be0e:	4603      	mov	r3, r0
 800be10:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800be12:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800be1a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800be20:	4313      	orrs	r3, r2
 800be22:	61fb      	str	r3, [r7, #28]
 800be24:	e023      	b.n	800be6e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be30:	2b00      	cmp	r3, #0
 800be32:	d102      	bne.n	800be3a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	2200      	movs	r2, #0
 800be38:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	785b      	ldrb	r3, [r3, #1]
 800be44:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800be46:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800be48:	68ba      	ldr	r2, [r7, #8]
 800be4a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800be4c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	78db      	ldrb	r3, [r3, #3]
 800be52:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800be54:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be5c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800be5e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800be64:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800be6a:	4313      	orrs	r3, r2
 800be6c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800be76:	4313      	orrs	r3, r2
 800be78:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	22ca      	movs	r2, #202	@ 0xca
 800be80:	625a      	str	r2, [r3, #36]	@ 0x24
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	2253      	movs	r2, #83	@ 0x53
 800be88:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be92:	d148      	bne.n	800bf26 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	689a      	ldr	r2, [r3, #8]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bea2:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	689a      	ldr	r2, [r3, #8]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800beb2:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	68db      	ldr	r3, [r3, #12]
 800beba:	b2da      	uxtb	r2, r3
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800bec4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bec6:	f7fa f81f 	bl	8005f08 <HAL_GetTick>
 800beca:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800becc:	e013      	b.n	800bef6 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bece:	f7fa f81b 	bl	8005f08 <HAL_GetTick>
 800bed2:	4602      	mov	r2, r0
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	1ad3      	subs	r3, r2, r3
 800bed8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bedc:	d90b      	bls.n	800bef6 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	22ff      	movs	r2, #255	@ 0xff
 800bee4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2203      	movs	r2, #3
 800beea:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2200      	movs	r2, #0
 800bef0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bef2:	2303      	movs	r3, #3
 800bef4:	e06a      	b.n	800bfcc <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	68db      	ldr	r3, [r3, #12]
 800befc:	f003 0301 	and.w	r3, r3, #1
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d0e4      	beq.n	800bece <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	69fa      	ldr	r2, [r7, #28]
 800bf0a:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	697a      	ldr	r2, [r7, #20]
 800bf12:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	689a      	ldr	r2, [r3, #8]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bf22:	609a      	str	r2, [r3, #8]
 800bf24:	e047      	b.n	800bfb6 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	689a      	ldr	r2, [r3, #8]
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800bf34:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	689a      	ldr	r2, [r3, #8]
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bf44:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	b2da      	uxtb	r2, r3
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800bf56:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bf58:	f7f9 ffd6 	bl	8005f08 <HAL_GetTick>
 800bf5c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800bf5e:	e013      	b.n	800bf88 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bf60:	f7f9 ffd2 	bl	8005f08 <HAL_GetTick>
 800bf64:	4602      	mov	r2, r0
 800bf66:	69bb      	ldr	r3, [r7, #24]
 800bf68:	1ad3      	subs	r3, r2, r3
 800bf6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bf6e:	d90b      	bls.n	800bf88 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	22ff      	movs	r2, #255	@ 0xff
 800bf76:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2203      	movs	r2, #3
 800bf7c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2200      	movs	r2, #0
 800bf82:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bf84:	2303      	movs	r3, #3
 800bf86:	e021      	b.n	800bfcc <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	f003 0302 	and.w	r3, r3, #2
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d0e4      	beq.n	800bf60 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	69fa      	ldr	r2, [r7, #28]
 800bf9c:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	697a      	ldr	r2, [r7, #20]
 800bfa4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	689a      	ldr	r2, [r3, #8]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bfb4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	22ff      	movs	r2, #255	@ 0xff
 800bfbc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bfca:	2300      	movs	r3, #0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3724      	adds	r7, #36	@ 0x24
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd90      	pop	{r4, r7, pc}

0800bfd4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4a0d      	ldr	r2, [pc, #52]	@ (800c01c <HAL_RTC_WaitForSynchro+0x48>)
 800bfe6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bfe8:	f7f9 ff8e 	bl	8005f08 <HAL_GetTick>
 800bfec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bfee:	e009      	b.n	800c004 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bff0:	f7f9 ff8a 	bl	8005f08 <HAL_GetTick>
 800bff4:	4602      	mov	r2, r0
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	1ad3      	subs	r3, r2, r3
 800bffa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bffe:	d901      	bls.n	800c004 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800c000:	2303      	movs	r3, #3
 800c002:	e007      	b.n	800c014 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	f003 0320 	and.w	r3, r3, #32
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d0ee      	beq.n	800bff0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800c012:	2300      	movs	r3, #0
}
 800c014:	4618      	mov	r0, r3
 800c016:	3710      	adds	r7, #16
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	0001ff5f 	.word	0x0001ff5f

0800c020 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c028:	2300      	movs	r3, #0
 800c02a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800c02c:	2300      	movs	r3, #0
 800c02e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	68db      	ldr	r3, [r3, #12]
 800c036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d122      	bne.n	800c084 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	68da      	ldr	r2, [r3, #12]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c04c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c04e:	f7f9 ff5b 	bl	8005f08 <HAL_GetTick>
 800c052:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c054:	e00c      	b.n	800c070 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c056:	f7f9 ff57 	bl	8005f08 <HAL_GetTick>
 800c05a:	4602      	mov	r2, r0
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	1ad3      	subs	r3, r2, r3
 800c060:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c064:	d904      	bls.n	800c070 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2204      	movs	r2, #4
 800c06a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800c06c:	2301      	movs	r3, #1
 800c06e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d102      	bne.n	800c084 <RTC_EnterInitMode+0x64>
 800c07e:	7bfb      	ldrb	r3, [r7, #15]
 800c080:	2b01      	cmp	r3, #1
 800c082:	d1e8      	bne.n	800c056 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800c084:	7bfb      	ldrb	r3, [r7, #15]
}
 800c086:	4618      	mov	r0, r3
 800c088:	3710      	adds	r7, #16
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}

0800c08e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c08e:	b580      	push	{r7, lr}
 800c090:	b084      	sub	sp, #16
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c096:	2300      	movs	r3, #0
 800c098:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	68da      	ldr	r2, [r3, #12]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c0a8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	689b      	ldr	r3, [r3, #8]
 800c0b0:	f003 0320 	and.w	r3, r3, #32
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d10a      	bne.n	800c0ce <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f7ff ff8b 	bl	800bfd4 <HAL_RTC_WaitForSynchro>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d004      	beq.n	800c0ce <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2204      	movs	r2, #4
 800c0c8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800c0ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3710      	adds	r7, #16
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b085      	sub	sp, #20
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	4603      	mov	r3, r0
 800c0e0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800c0e6:	e005      	b.n	800c0f4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800c0ee:	79fb      	ldrb	r3, [r7, #7]
 800c0f0:	3b0a      	subs	r3, #10
 800c0f2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800c0f4:	79fb      	ldrb	r3, [r7, #7]
 800c0f6:	2b09      	cmp	r3, #9
 800c0f8:	d8f6      	bhi.n	800c0e8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	011b      	lsls	r3, r3, #4
 800c100:	b2da      	uxtb	r2, r3
 800c102:	79fb      	ldrb	r3, [r7, #7]
 800c104:	4313      	orrs	r3, r2
 800c106:	b2db      	uxtb	r3, r3
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3714      	adds	r7, #20
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr

0800c114 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800c114:	b480      	push	{r7}
 800c116:	b087      	sub	sp, #28
 800c118:	af00      	add	r7, sp, #0
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c120:	2300      	movs	r3, #0
 800c122:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	7f1b      	ldrb	r3, [r3, #28]
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d101      	bne.n	800c130 <HAL_RTCEx_SetTimeStamp+0x1c>
 800c12c:	2302      	movs	r3, #2
 800c12e:	e050      	b.n	800c1d2 <HAL_RTCEx_SetTimeStamp+0xbe>
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2201      	movs	r2, #1
 800c134:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2202      	movs	r2, #2
 800c13a:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f022 0206 	bic.w	r2, r2, #6
 800c14a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	430a      	orrs	r2, r1
 800c15a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	689a      	ldr	r2, [r3, #8]
 800c162:	4b1f      	ldr	r3, [pc, #124]	@ (800c1e0 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800c164:	4013      	ands	r3, r2
 800c166:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800c168:	697a      	ldr	r2, [r7, #20]
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	4313      	orrs	r3, r2
 800c16e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	22ca      	movs	r2, #202	@ 0xca
 800c176:	625a      	str	r2, [r3, #36]	@ 0x24
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2253      	movs	r2, #83	@ 0x53
 800c17e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	697a      	ldr	r2, [r7, #20]
 800c186:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	68db      	ldr	r3, [r3, #12]
 800c18e:	b2da      	uxtb	r2, r3
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800c198:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	68db      	ldr	r3, [r3, #12]
 800c1a0:	b2da      	uxtb	r2, r3
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800c1aa:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	689a      	ldr	r2, [r3, #8]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c1ba:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	22ff      	movs	r2, #255	@ 0xff
 800c1c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c1d0:	2300      	movs	r3, #0
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	371c      	adds	r7, #28
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr
 800c1de:	bf00      	nop
 800c1e0:	fffff7f7 	.word	0xfffff7f7

0800c1e4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b088      	sub	sp, #32
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d101      	bne.n	800c202 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800c1fe:	2301      	movs	r3, #1
 800c200:	e156      	b.n	800c4b0 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d106      	bne.n	800c21c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2200      	movs	r2, #0
 800c212:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f7f8 fe3e 	bl	8004e98 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2202      	movs	r2, #2
 800c220:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 f95b 	bl	800c4e0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	68db      	ldr	r3, [r3, #12]
 800c22e:	2b02      	cmp	r3, #2
 800c230:	d00c      	beq.n	800c24c <HAL_SAI_Init+0x68>
 800c232:	2b02      	cmp	r3, #2
 800c234:	d80d      	bhi.n	800c252 <HAL_SAI_Init+0x6e>
 800c236:	2b00      	cmp	r3, #0
 800c238:	d002      	beq.n	800c240 <HAL_SAI_Init+0x5c>
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d003      	beq.n	800c246 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800c23e:	e008      	b.n	800c252 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800c240:	2300      	movs	r3, #0
 800c242:	61fb      	str	r3, [r7, #28]
      break;
 800c244:	e006      	b.n	800c254 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800c246:	2310      	movs	r3, #16
 800c248:	61fb      	str	r3, [r7, #28]
      break;
 800c24a:	e003      	b.n	800c254 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800c24c:	2320      	movs	r3, #32
 800c24e:	61fb      	str	r3, [r7, #28]
      break;
 800c250:	e000      	b.n	800c254 <HAL_SAI_Init+0x70>
      break;
 800c252:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	2b03      	cmp	r3, #3
 800c25a:	d81e      	bhi.n	800c29a <HAL_SAI_Init+0xb6>
 800c25c:	a201      	add	r2, pc, #4	@ (adr r2, 800c264 <HAL_SAI_Init+0x80>)
 800c25e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c262:	bf00      	nop
 800c264:	0800c275 	.word	0x0800c275
 800c268:	0800c27b 	.word	0x0800c27b
 800c26c:	0800c283 	.word	0x0800c283
 800c270:	0800c28b 	.word	0x0800c28b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800c274:	2300      	movs	r3, #0
 800c276:	617b      	str	r3, [r7, #20]
    }
    break;
 800c278:	e010      	b.n	800c29c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800c27a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c27e:	617b      	str	r3, [r7, #20]
    }
    break;
 800c280:	e00c      	b.n	800c29c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c282:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c286:	617b      	str	r3, [r7, #20]
    }
    break;
 800c288:	e008      	b.n	800c29c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c28a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c28e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	f043 0301 	orr.w	r3, r3, #1
 800c296:	61fb      	str	r3, [r7, #28]
    }
    break;
 800c298:	e000      	b.n	800c29c <HAL_SAI_Init+0xb8>
    default:
      break;
 800c29a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a85      	ldr	r2, [pc, #532]	@ (800c4b8 <HAL_SAI_Init+0x2d4>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d004      	beq.n	800c2b0 <HAL_SAI_Init+0xcc>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a84      	ldr	r2, [pc, #528]	@ (800c4bc <HAL_SAI_Init+0x2d8>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d103      	bne.n	800c2b8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800c2b0:	4a83      	ldr	r2, [pc, #524]	@ (800c4c0 <HAL_SAI_Init+0x2dc>)
 800c2b2:	69fb      	ldr	r3, [r7, #28]
 800c2b4:	6013      	str	r3, [r2, #0]
 800c2b6:	e002      	b.n	800c2be <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800c2b8:	4a82      	ldr	r2, [pc, #520]	@ (800c4c4 <HAL_SAI_Init+0x2e0>)
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	69db      	ldr	r3, [r3, #28]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d04c      	beq.n	800c360 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a7a      	ldr	r2, [pc, #488]	@ (800c4b8 <HAL_SAI_Init+0x2d4>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d004      	beq.n	800c2de <HAL_SAI_Init+0xfa>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a78      	ldr	r2, [pc, #480]	@ (800c4bc <HAL_SAI_Init+0x2d8>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d104      	bne.n	800c2e8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c2de:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800c2e2:	f7ff fa6d 	bl	800b7c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800c2e6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a76      	ldr	r2, [pc, #472]	@ (800c4c8 <HAL_SAI_Init+0x2e4>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d004      	beq.n	800c2fc <HAL_SAI_Init+0x118>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4a75      	ldr	r2, [pc, #468]	@ (800c4cc <HAL_SAI_Init+0x2e8>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d104      	bne.n	800c306 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c2fc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c300:	f7ff fa5e 	bl	800b7c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800c304:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800c306:	693a      	ldr	r2, [r7, #16]
 800c308:	4613      	mov	r3, r2
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	4413      	add	r3, r2
 800c30e:	005b      	lsls	r3, r3, #1
 800c310:	461a      	mov	r2, r3
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	69db      	ldr	r3, [r3, #28]
 800c316:	025b      	lsls	r3, r3, #9
 800c318:	fbb2 f3f3 	udiv	r3, r2, r3
 800c31c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	4a6b      	ldr	r2, [pc, #428]	@ (800c4d0 <HAL_SAI_Init+0x2ec>)
 800c322:	fba2 2303 	umull	r2, r3, r2, r3
 800c326:	08da      	lsrs	r2, r3, #3
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800c32c:	68f9      	ldr	r1, [r7, #12]
 800c32e:	4b68      	ldr	r3, [pc, #416]	@ (800c4d0 <HAL_SAI_Init+0x2ec>)
 800c330:	fba3 2301 	umull	r2, r3, r3, r1
 800c334:	08da      	lsrs	r2, r3, #3
 800c336:	4613      	mov	r3, r2
 800c338:	009b      	lsls	r3, r3, #2
 800c33a:	4413      	add	r3, r2
 800c33c:	005b      	lsls	r3, r3, #1
 800c33e:	1aca      	subs	r2, r1, r3
 800c340:	2a08      	cmp	r2, #8
 800c342:	d904      	bls.n	800c34e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6a1b      	ldr	r3, [r3, #32]
 800c348:	1c5a      	adds	r2, r3, #1
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c352:	2b04      	cmp	r3, #4
 800c354:	d104      	bne.n	800c360 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6a1b      	ldr	r3, [r3, #32]
 800c35a:	085a      	lsrs	r2, r3, #1
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d003      	beq.n	800c370 <HAL_SAI_Init+0x18c>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	2b02      	cmp	r3, #2
 800c36e:	d109      	bne.n	800c384 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c374:	2b01      	cmp	r3, #1
 800c376:	d101      	bne.n	800c37c <HAL_SAI_Init+0x198>
 800c378:	2300      	movs	r3, #0
 800c37a:	e001      	b.n	800c380 <HAL_SAI_Init+0x19c>
 800c37c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c380:	61bb      	str	r3, [r7, #24]
 800c382:	e008      	b.n	800c396 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d102      	bne.n	800c392 <HAL_SAI_Init+0x1ae>
 800c38c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c390:	e000      	b.n	800c394 <HAL_SAI_Init+0x1b0>
 800c392:	2300      	movs	r3, #0
 800c394:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	6819      	ldr	r1, [r3, #0]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	4b4c      	ldr	r3, [pc, #304]	@ (800c4d4 <HAL_SAI_Init+0x2f0>)
 800c3a2:	400b      	ands	r3, r1
 800c3a4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	6819      	ldr	r1, [r3, #0]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	685a      	ldr	r2, [r3, #4]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3b4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c3ba:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3c0:	431a      	orrs	r2, r3
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800c3ce:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	691b      	ldr	r3, [r3, #16]
 800c3d4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c3da:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6a1b      	ldr	r3, [r3, #32]
 800c3e0:	051b      	lsls	r3, r3, #20
 800c3e2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	430a      	orrs	r2, r1
 800c3ea:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	6859      	ldr	r1, [r3, #4]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	4b38      	ldr	r3, [pc, #224]	@ (800c4d8 <HAL_SAI_Init+0x2f4>)
 800c3f8:	400b      	ands	r3, r1
 800c3fa:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	6859      	ldr	r1, [r3, #4]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	699a      	ldr	r2, [r3, #24]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c40a:	431a      	orrs	r2, r3
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c410:	431a      	orrs	r2, r3
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	430a      	orrs	r2, r1
 800c418:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	6899      	ldr	r1, [r3, #8]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681a      	ldr	r2, [r3, #0]
 800c424:	4b2d      	ldr	r3, [pc, #180]	@ (800c4dc <HAL_SAI_Init+0x2f8>)
 800c426:	400b      	ands	r3, r1
 800c428:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	6899      	ldr	r1, [r3, #8]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c434:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c43a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800c440:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800c446:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c44c:	3b01      	subs	r3, #1
 800c44e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800c450:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	430a      	orrs	r2, r1
 800c458:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	68d9      	ldr	r1, [r3, #12]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681a      	ldr	r2, [r3, #0]
 800c464:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800c468:	400b      	ands	r3, r1
 800c46a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68d9      	ldr	r1, [r3, #12]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c47a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c480:	041b      	lsls	r3, r3, #16
 800c482:	431a      	orrs	r2, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c488:	3b01      	subs	r3, #1
 800c48a:	021b      	lsls	r3, r3, #8
 800c48c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	430a      	orrs	r2, r1
 800c494:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800c4ae:	2300      	movs	r3, #0
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3720      	adds	r7, #32
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}
 800c4b8:	40015804 	.word	0x40015804
 800c4bc:	40015824 	.word	0x40015824
 800c4c0:	40015800 	.word	0x40015800
 800c4c4:	40015c00 	.word	0x40015c00
 800c4c8:	40015c04 	.word	0x40015c04
 800c4cc:	40015c24 	.word	0x40015c24
 800c4d0:	cccccccd 	.word	0xcccccccd
 800c4d4:	ff05c010 	.word	0xff05c010
 800c4d8:	ffff1ff0 	.word	0xffff1ff0
 800c4dc:	fff88000 	.word	0xfff88000

0800c4e0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b085      	sub	sp, #20
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800c4e8:	4b17      	ldr	r3, [pc, #92]	@ (800c548 <SAI_Disable+0x68>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a17      	ldr	r2, [pc, #92]	@ (800c54c <SAI_Disable+0x6c>)
 800c4ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c4f2:	0b1b      	lsrs	r3, r3, #12
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c50a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	1e5a      	subs	r2, r3, #1
 800c510:	60fa      	str	r2, [r7, #12]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d10a      	bne.n	800c52c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c51c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800c526:	2303      	movs	r3, #3
 800c528:	72fb      	strb	r3, [r7, #11]
      break;
 800c52a:	e006      	b.n	800c53a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1e8      	bne.n	800c50c <SAI_Disable+0x2c>

  return status;
 800c53a:	7afb      	ldrb	r3, [r7, #11]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3714      	adds	r7, #20
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr
 800c548:	2000001c 	.word	0x2000001c
 800c54c:	95cbec1b 	.word	0x95cbec1b

0800c550 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d101      	bne.n	800c562 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c55e:	2301      	movs	r3, #1
 800c560:	e022      	b.n	800c5a8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c568:	b2db      	uxtb	r3, r3
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d105      	bne.n	800c57a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2200      	movs	r2, #0
 800c572:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f7f8 f8a9 	bl	80046cc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2203      	movs	r2, #3
 800c57e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 f814 	bl	800c5b0 <HAL_SD_InitCard>
 800c588:	4603      	mov	r3, r0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d001      	beq.n	800c592 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c58e:	2301      	movs	r3, #1
 800c590:	e00a      	b.n	800c5a8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2200      	movs	r2, #0
 800c596:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2200      	movs	r2, #0
 800c59c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c5a6:	2300      	movs	r3, #0
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3708      	adds	r7, #8
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c5b0:	b5b0      	push	{r4, r5, r7, lr}
 800c5b2:	b08e      	sub	sp, #56	@ 0x38
 800c5b4:	af04      	add	r7, sp, #16
 800c5b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800c5cc:	2376      	movs	r3, #118	@ 0x76
 800c5ce:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681d      	ldr	r5, [r3, #0]
 800c5d4:	466c      	mov	r4, sp
 800c5d6:	f107 0318 	add.w	r3, r7, #24
 800c5da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c5de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c5e2:	f107 030c 	add.w	r3, r7, #12
 800c5e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c5e8:	4628      	mov	r0, r5
 800c5ea:	f004 f809 	bl	8010600 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	685a      	ldr	r2, [r3, #4]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c5fc:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	4618      	mov	r0, r3
 800c604:	f004 f846 	bl	8010694 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	685a      	ldr	r2, [r3, #4]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c616:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800c618:	2002      	movs	r0, #2
 800c61a:	f7f9 fc81 	bl	8005f20 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 ff02 	bl	800d428 <SD_PowerON>
 800c624:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d00b      	beq.n	800c644 <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2201      	movs	r2, #1
 800c630:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c63a:	431a      	orrs	r2, r3
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c640:	2301      	movs	r3, #1
 800c642:	e02e      	b.n	800c6a2 <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 fe21 	bl	800d28c <SD_InitCard>
 800c64a:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d00b      	beq.n	800c66a <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2201      	movs	r2, #1
 800c656:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c660:	431a      	orrs	r2, r3
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c666:	2301      	movs	r3, #1
 800c668:	e01b      	b.n	800c6a2 <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c672:	4618      	mov	r0, r3
 800c674:	f004 f8a0 	bl	80107b8 <SDMMC_CmdBlockLength>
 800c678:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00f      	beq.n	800c6a0 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a09      	ldr	r2, [pc, #36]	@ (800c6ac <HAL_SD_InitCard+0xfc>)
 800c686:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68e:	431a      	orrs	r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2201      	movs	r2, #1
 800c698:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c69c:	2301      	movs	r3, #1
 800c69e:	e000      	b.n	800c6a2 <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800c6a0:	2300      	movs	r3, #0
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3728      	adds	r7, #40	@ 0x28
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bdb0      	pop	{r4, r5, r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	004005ff 	.word	0x004005ff

0800c6b0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b092      	sub	sp, #72	@ 0x48
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
 800c6bc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c6be:	f7f9 fc23 	bl	8005f08 <HAL_GetTick>
 800c6c2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d107      	bne.n	800c6e2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6d6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c6de:	2301      	movs	r3, #1
 800c6e0:	e1bd      	b.n	800ca5e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c6e8:	b2db      	uxtb	r3, r3
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	f040 81b0 	bne.w	800ca50 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c6f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	441a      	add	r2, r3
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c700:	429a      	cmp	r2, r3
 800c702:	d907      	bls.n	800c714 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c708:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c710:	2301      	movs	r3, #1
 800c712:	e1a4      	b.n	800ca5e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2203      	movs	r2, #3
 800c718:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2200      	movs	r2, #0
 800c722:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d002      	beq.n	800c732 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800c72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c72e:	025b      	lsls	r3, r3, #9
 800c730:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c732:	f04f 33ff 	mov.w	r3, #4294967295
 800c736:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	025b      	lsls	r3, r3, #9
 800c73c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c73e:	2390      	movs	r3, #144	@ 0x90
 800c740:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c742:	2302      	movs	r3, #2
 800c744:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c746:	2300      	movs	r3, #0
 800c748:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800c74a:	2301      	movs	r3, #1
 800c74c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f107 0214 	add.w	r2, r7, #20
 800c756:	4611      	mov	r1, r2
 800c758:	4618      	mov	r0, r3
 800c75a:	f004 f801 	bl	8010760 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	2b01      	cmp	r3, #1
 800c762:	d90a      	bls.n	800c77a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2202      	movs	r2, #2
 800c768:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c770:	4618      	mov	r0, r3
 800c772:	f004 f865 	bl	8010840 <SDMMC_CmdReadMultiBlock>
 800c776:	6478      	str	r0, [r7, #68]	@ 0x44
 800c778:	e009      	b.n	800c78e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2201      	movs	r2, #1
 800c77e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c786:	4618      	mov	r0, r3
 800c788:	f004 f838 	bl	80107fc <SDMMC_CmdReadSingleBlock>
 800c78c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c78e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c790:	2b00      	cmp	r3, #0
 800c792:	d012      	beq.n	800c7ba <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a7a      	ldr	r2, [pc, #488]	@ (800c984 <HAL_SD_ReadBlocks+0x2d4>)
 800c79a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c7a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7a2:	431a      	orrs	r2, r3
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	e151      	b.n	800ca5e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800c7ba:	69bb      	ldr	r3, [r7, #24]
 800c7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c7be:	e061      	b.n	800c884 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d03c      	beq.n	800c848 <HAL_SD_ReadBlocks+0x198>
 800c7ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d039      	beq.n	800c848 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c7d8:	e033      	b.n	800c842 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f003 ff3a 	bl	8010658 <SDMMC_ReadFIFO>
 800c7e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800c7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7e8:	b2da      	uxtb	r2, r3
 800c7ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7ec:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c7ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c7f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7f6:	3b01      	subs	r3, #1
 800c7f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7fc:	0a1b      	lsrs	r3, r3, #8
 800c7fe:	b2da      	uxtb	r2, r3
 800c800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c802:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c806:	3301      	adds	r3, #1
 800c808:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c80a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c80c:	3b01      	subs	r3, #1
 800c80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c812:	0c1b      	lsrs	r3, r3, #16
 800c814:	b2da      	uxtb	r2, r3
 800c816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c818:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c81a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c81c:	3301      	adds	r3, #1
 800c81e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c822:	3b01      	subs	r3, #1
 800c824:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c828:	0e1b      	lsrs	r3, r3, #24
 800c82a:	b2da      	uxtb	r2, r3
 800c82c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c82e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c832:	3301      	adds	r3, #1
 800c834:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c838:	3b01      	subs	r3, #1
 800c83a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800c83c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c83e:	3301      	adds	r3, #1
 800c840:	643b      	str	r3, [r7, #64]	@ 0x40
 800c842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c844:	2b07      	cmp	r3, #7
 800c846:	d9c8      	bls.n	800c7da <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c848:	f7f9 fb5e 	bl	8005f08 <HAL_GetTick>
 800c84c:	4602      	mov	r2, r0
 800c84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c850:	1ad3      	subs	r3, r2, r3
 800c852:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c854:	429a      	cmp	r2, r3
 800c856:	d902      	bls.n	800c85e <HAL_SD_ReadBlocks+0x1ae>
 800c858:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d112      	bne.n	800c884 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	4a48      	ldr	r2, [pc, #288]	@ (800c984 <HAL_SD_ReadBlocks+0x2d4>)
 800c864:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c86a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2201      	movs	r2, #1
 800c876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2200      	movs	r2, #0
 800c87e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800c880:	2303      	movs	r3, #3
 800c882:	e0ec      	b.n	800ca5e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c88a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d096      	beq.n	800c7c0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d022      	beq.n	800c8e6 <HAL_SD_ReadBlocks+0x236>
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	2b01      	cmp	r3, #1
 800c8a4:	d91f      	bls.n	800c8e6 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8aa:	2b03      	cmp	r3, #3
 800c8ac:	d01b      	beq.n	800c8e6 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f004 f82a 	bl	801090c <SDMMC_CmdStopTransfer>
 800c8b8:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c8ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d012      	beq.n	800c8e6 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4a2f      	ldr	r2, [pc, #188]	@ (800c984 <HAL_SD_ReadBlocks+0x2d4>)
 800c8c6:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8ce:	431a      	orrs	r2, r3
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e0bb      	b.n	800ca5e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8ec:	f003 0308 	and.w	r3, r3, #8
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d012      	beq.n	800c91a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a22      	ldr	r2, [pc, #136]	@ (800c984 <HAL_SD_ReadBlocks+0x2d4>)
 800c8fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c900:	f043 0208 	orr.w	r2, r3, #8
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2201      	movs	r2, #1
 800c90c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2200      	movs	r2, #0
 800c914:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c916:	2301      	movs	r3, #1
 800c918:	e0a1      	b.n	800ca5e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c920:	f003 0302 	and.w	r3, r3, #2
 800c924:	2b00      	cmp	r3, #0
 800c926:	d012      	beq.n	800c94e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a15      	ldr	r2, [pc, #84]	@ (800c984 <HAL_SD_ReadBlocks+0x2d4>)
 800c92e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c934:	f043 0202 	orr.w	r2, r3, #2
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2201      	movs	r2, #1
 800c940:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2200      	movs	r2, #0
 800c948:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c94a:	2301      	movs	r3, #1
 800c94c:	e087      	b.n	800ca5e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c954:	f003 0320 	and.w	r3, r3, #32
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d064      	beq.n	800ca26 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a08      	ldr	r2, [pc, #32]	@ (800c984 <HAL_SD_ReadBlocks+0x2d4>)
 800c962:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c968:	f043 0220 	orr.w	r2, r3, #32
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	2201      	movs	r2, #1
 800c974:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2200      	movs	r2, #0
 800c97c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c97e:	2301      	movs	r3, #1
 800c980:	e06d      	b.n	800ca5e <HAL_SD_ReadBlocks+0x3ae>
 800c982:	bf00      	nop
 800c984:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4618      	mov	r0, r3
 800c98e:	f003 fe63 	bl	8010658 <SDMMC_ReadFIFO>
 800c992:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800c994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c996:	b2da      	uxtb	r2, r3
 800c998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c99a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c99c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c99e:	3301      	adds	r3, #1
 800c9a0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c9a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9a4:	3b01      	subs	r3, #1
 800c9a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9aa:	0a1b      	lsrs	r3, r3, #8
 800c9ac:	b2da      	uxtb	r2, r3
 800c9ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9b0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c9b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c9b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9ba:	3b01      	subs	r3, #1
 800c9bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c9be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9c0:	0c1b      	lsrs	r3, r3, #16
 800c9c2:	b2da      	uxtb	r2, r3
 800c9c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9c6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c9c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c9ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9d0:	3b01      	subs	r3, #1
 800c9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d6:	0e1b      	lsrs	r3, r3, #24
 800c9d8:	b2da      	uxtb	r2, r3
 800c9da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9dc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c9de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c9e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c9ea:	f7f9 fa8d 	bl	8005f08 <HAL_GetTick>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9f2:	1ad3      	subs	r3, r2, r3
 800c9f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d902      	bls.n	800ca00 <HAL_SD_ReadBlocks+0x350>
 800c9fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d112      	bne.n	800ca26 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a18      	ldr	r2, [pc, #96]	@ (800ca68 <HAL_SD_ReadBlocks+0x3b8>)
 800ca06:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca0c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2201      	movs	r2, #1
 800ca18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800ca22:	2301      	movs	r3, #1
 800ca24:	e01b      	b.n	800ca5e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d002      	beq.n	800ca3a <HAL_SD_ReadBlocks+0x38a>
 800ca34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d1a6      	bne.n	800c988 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f240 523a 	movw	r2, #1338	@ 0x53a
 800ca42:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2201      	movs	r2, #1
 800ca48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	e006      	b.n	800ca5e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca54:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ca5c:	2301      	movs	r3, #1
  }
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3748      	adds	r7, #72	@ 0x48
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	004005ff 	.word	0x004005ff

0800ca6c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b092      	sub	sp, #72	@ 0x48
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	60f8      	str	r0, [r7, #12]
 800ca74:	60b9      	str	r1, [r7, #8]
 800ca76:	607a      	str	r2, [r7, #4]
 800ca78:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ca7a:	f7f9 fa45 	bl	8005f08 <HAL_GetTick>
 800ca7e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d107      	bne.n	800ca9e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca92:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	e165      	b.n	800cd6a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800caa4:	b2db      	uxtb	r3, r3
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	f040 8158 	bne.w	800cd5c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2200      	movs	r2, #0
 800cab0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cab2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	441a      	add	r2, r3
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d907      	bls.n	800cad0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cac4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800cacc:	2301      	movs	r3, #1
 800cace:	e14c      	b.n	800cd6a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2203      	movs	r2, #3
 800cad4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2200      	movs	r2, #0
 800cade:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d002      	beq.n	800caee <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800cae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caea:	025b      	lsls	r3, r3, #9
 800caec:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800caee:	f04f 33ff 	mov.w	r3, #4294967295
 800caf2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	025b      	lsls	r3, r3, #9
 800caf8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cafa:	2390      	movs	r3, #144	@ 0x90
 800cafc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800cafe:	2300      	movs	r3, #0
 800cb00:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cb02:	2300      	movs	r3, #0
 800cb04:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800cb06:	2301      	movs	r3, #1
 800cb08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f107 0218 	add.w	r2, r7, #24
 800cb12:	4611      	mov	r1, r2
 800cb14:	4618      	mov	r0, r3
 800cb16:	f003 fe23 	bl	8010760 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d90a      	bls.n	800cb36 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2220      	movs	r2, #32
 800cb24:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f003 fecb 	bl	80108c8 <SDMMC_CmdWriteMultiBlock>
 800cb32:	6478      	str	r0, [r7, #68]	@ 0x44
 800cb34:	e009      	b.n	800cb4a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2210      	movs	r2, #16
 800cb3a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cb42:	4618      	mov	r0, r3
 800cb44:	f003 fe9e 	bl	8010884 <SDMMC_CmdWriteSingleBlock>
 800cb48:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d012      	beq.n	800cb76 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4a87      	ldr	r2, [pc, #540]	@ (800cd74 <HAL_SD_WriteBlocks+0x308>)
 800cb56:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb5e:	431a      	orrs	r2, r3
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2201      	movs	r2, #1
 800cb68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cb72:	2301      	movs	r3, #1
 800cb74:	e0f9      	b.n	800cd6a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800cb76:	69fb      	ldr	r3, [r7, #28]
 800cb78:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cb7a:	e065      	b.n	800cc48 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d040      	beq.n	800cc0c <HAL_SD_WriteBlocks+0x1a0>
 800cb8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d03d      	beq.n	800cc0c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800cb90:	2300      	movs	r3, #0
 800cb92:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb94:	e037      	b.n	800cc06 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800cb96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cb9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb9e:	3301      	adds	r3, #1
 800cba0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cba4:	3b01      	subs	r3, #1
 800cba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800cba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	021a      	lsls	r2, r3, #8
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cbb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cbba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbbc:	3b01      	subs	r3, #1
 800cbbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800cbc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	041a      	lsls	r2, r3, #16
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	4313      	orrs	r3, r2
 800cbca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cbcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbce:	3301      	adds	r3, #1
 800cbd0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cbd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800cbd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	061a      	lsls	r2, r3, #24
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	4313      	orrs	r3, r2
 800cbe2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cbe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cbea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbec:	3b01      	subs	r3, #1
 800cbee:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f107 0214 	add.w	r2, r7, #20
 800cbf8:	4611      	mov	r1, r2
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f003 fd39 	bl	8010672 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800cc00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc02:	3301      	adds	r3, #1
 800cc04:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc08:	2b07      	cmp	r3, #7
 800cc0a:	d9c4      	bls.n	800cb96 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cc0c:	f7f9 f97c 	bl	8005f08 <HAL_GetTick>
 800cc10:	4602      	mov	r2, r0
 800cc12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc14:	1ad3      	subs	r3, r2, r3
 800cc16:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d902      	bls.n	800cc22 <HAL_SD_WriteBlocks+0x1b6>
 800cc1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d112      	bne.n	800cc48 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4a53      	ldr	r2, [pc, #332]	@ (800cd74 <HAL_SD_WriteBlocks+0x308>)
 800cc28:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc30:	431a      	orrs	r2, r3
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	2201      	movs	r2, #1
 800cc3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	2200      	movs	r2, #0
 800cc42:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800cc44:	2303      	movs	r3, #3
 800cc46:	e090      	b.n	800cd6a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc4e:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d092      	beq.n	800cb7c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d022      	beq.n	800ccaa <HAL_SD_WriteBlocks+0x23e>
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	d91f      	bls.n	800ccaa <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc6e:	2b03      	cmp	r3, #3
 800cc70:	d01b      	beq.n	800ccaa <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	4618      	mov	r0, r3
 800cc78:	f003 fe48 	bl	801090c <SDMMC_CmdStopTransfer>
 800cc7c:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800cc7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d012      	beq.n	800ccaa <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a3a      	ldr	r2, [pc, #232]	@ (800cd74 <HAL_SD_WriteBlocks+0x308>)
 800cc8a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc92:	431a      	orrs	r2, r3
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2200      	movs	r2, #0
 800cca4:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800cca6:	2301      	movs	r3, #1
 800cca8:	e05f      	b.n	800cd6a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccb0:	f003 0308 	and.w	r3, r3, #8
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d012      	beq.n	800ccde <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4a2d      	ldr	r2, [pc, #180]	@ (800cd74 <HAL_SD_WriteBlocks+0x308>)
 800ccbe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccc4:	f043 0208 	orr.w	r2, r3, #8
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2201      	movs	r2, #1
 800ccd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e045      	b.n	800cd6a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cce4:	f003 0302 	and.w	r3, r3, #2
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d012      	beq.n	800cd12 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4a20      	ldr	r2, [pc, #128]	@ (800cd74 <HAL_SD_WriteBlocks+0x308>)
 800ccf2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccf8:	f043 0202 	orr.w	r2, r3, #2
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	2201      	movs	r2, #1
 800cd04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	e02b      	b.n	800cd6a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd18:	f003 0310 	and.w	r3, r3, #16
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d012      	beq.n	800cd46 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a13      	ldr	r2, [pc, #76]	@ (800cd74 <HAL_SD_WriteBlocks+0x308>)
 800cd26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd2c:	f043 0210 	orr.w	r2, r3, #16
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2201      	movs	r2, #1
 800cd38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cd42:	2301      	movs	r3, #1
 800cd44:	e011      	b.n	800cd6a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800cd4e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2201      	movs	r2, #1
 800cd54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	e006      	b.n	800cd6a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd60:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cd68:	2301      	movs	r3, #1
  }
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3748      	adds	r7, #72	@ 0x48
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	004005ff 	.word	0x004005ff

0800cd78 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b083      	sub	sp, #12
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd86:	0f9b      	lsrs	r3, r3, #30
 800cd88:	b2da      	uxtb	r2, r3
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd92:	0e9b      	lsrs	r3, r3, #26
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	f003 030f 	and.w	r3, r3, #15
 800cd9a:	b2da      	uxtb	r2, r3
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cda4:	0e1b      	lsrs	r3, r3, #24
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	f003 0303 	and.w	r3, r3, #3
 800cdac:	b2da      	uxtb	r2, r3
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdb6:	0c1b      	lsrs	r3, r3, #16
 800cdb8:	b2da      	uxtb	r2, r3
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdc2:	0a1b      	lsrs	r3, r3, #8
 800cdc4:	b2da      	uxtb	r2, r3
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdce:	b2da      	uxtb	r2, r3
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cdd8:	0d1b      	lsrs	r3, r3, #20
 800cdda:	b29a      	uxth	r2, r3
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cde4:	0c1b      	lsrs	r3, r3, #16
 800cde6:	b2db      	uxtb	r3, r3
 800cde8:	f003 030f 	and.w	r3, r3, #15
 800cdec:	b2da      	uxtb	r2, r3
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cdf6:	0bdb      	lsrs	r3, r3, #15
 800cdf8:	b2db      	uxtb	r3, r3
 800cdfa:	f003 0301 	and.w	r3, r3, #1
 800cdfe:	b2da      	uxtb	r2, r3
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ce08:	0b9b      	lsrs	r3, r3, #14
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	f003 0301 	and.w	r3, r3, #1
 800ce10:	b2da      	uxtb	r2, r3
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ce1a:	0b5b      	lsrs	r3, r3, #13
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	f003 0301 	and.w	r3, r3, #1
 800ce22:	b2da      	uxtb	r2, r3
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ce2c:	0b1b      	lsrs	r3, r3, #12
 800ce2e:	b2db      	uxtb	r3, r3
 800ce30:	f003 0301 	and.w	r3, r3, #1
 800ce34:	b2da      	uxtb	r2, r3
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d163      	bne.n	800cf10 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ce4c:	009a      	lsls	r2, r3, #2
 800ce4e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800ce52:	4013      	ands	r3, r2
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800ce58:	0f92      	lsrs	r2, r2, #30
 800ce5a:	431a      	orrs	r2, r3
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce64:	0edb      	lsrs	r3, r3, #27
 800ce66:	b2db      	uxtb	r3, r3
 800ce68:	f003 0307 	and.w	r3, r3, #7
 800ce6c:	b2da      	uxtb	r2, r3
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce76:	0e1b      	lsrs	r3, r3, #24
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	f003 0307 	and.w	r3, r3, #7
 800ce7e:	b2da      	uxtb	r2, r3
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce88:	0d5b      	lsrs	r3, r3, #21
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	f003 0307 	and.w	r3, r3, #7
 800ce90:	b2da      	uxtb	r2, r3
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce9a:	0c9b      	lsrs	r3, r3, #18
 800ce9c:	b2db      	uxtb	r3, r3
 800ce9e:	f003 0307 	and.w	r3, r3, #7
 800cea2:	b2da      	uxtb	r2, r3
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ceac:	0bdb      	lsrs	r3, r3, #15
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	f003 0307 	and.w	r3, r3, #7
 800ceb4:	b2da      	uxtb	r2, r3
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	691b      	ldr	r3, [r3, #16]
 800cebe:	1c5a      	adds	r2, r3, #1
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	7e1b      	ldrb	r3, [r3, #24]
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	f003 0307 	and.w	r3, r3, #7
 800cece:	3302      	adds	r3, #2
 800ced0:	2201      	movs	r2, #1
 800ced2:	fa02 f303 	lsl.w	r3, r2, r3
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800ceda:	fb03 f202 	mul.w	r2, r3, r2
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	7a1b      	ldrb	r3, [r3, #8]
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	f003 030f 	and.w	r3, r3, #15
 800ceec:	2201      	movs	r2, #1
 800ceee:	409a      	lsls	r2, r3
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cef8:	687a      	ldr	r2, [r7, #4]
 800cefa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800cefc:	0a52      	lsrs	r2, r2, #9
 800cefe:	fb03 f202 	mul.w	r2, r3, r2
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf0c:	661a      	str	r2, [r3, #96]	@ 0x60
 800cf0e:	e031      	b.n	800cf74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d11d      	bne.n	800cf54 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf1c:	041b      	lsls	r3, r3, #16
 800cf1e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf26:	0c1b      	lsrs	r3, r3, #16
 800cf28:	431a      	orrs	r2, r3
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	691b      	ldr	r3, [r3, #16]
 800cf32:	3301      	adds	r3, #1
 800cf34:	029a      	lsls	r2, r3, #10
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf48:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	661a      	str	r2, [r3, #96]	@ 0x60
 800cf52:	e00f      	b.n	800cf74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4a58      	ldr	r2, [pc, #352]	@ (800d0bc <HAL_SD_GetCardCSD+0x344>)
 800cf5a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800cf70:	2301      	movs	r3, #1
 800cf72:	e09d      	b.n	800d0b0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf78:	0b9b      	lsrs	r3, r3, #14
 800cf7a:	b2db      	uxtb	r3, r3
 800cf7c:	f003 0301 	and.w	r3, r3, #1
 800cf80:	b2da      	uxtb	r2, r3
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf8a:	09db      	lsrs	r3, r3, #7
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf92:	b2da      	uxtb	r2, r3
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfa2:	b2da      	uxtb	r2, r3
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfac:	0fdb      	lsrs	r3, r3, #31
 800cfae:	b2da      	uxtb	r2, r3
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfb8:	0f5b      	lsrs	r3, r3, #29
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	f003 0303 	and.w	r3, r3, #3
 800cfc0:	b2da      	uxtb	r2, r3
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfca:	0e9b      	lsrs	r3, r3, #26
 800cfcc:	b2db      	uxtb	r3, r3
 800cfce:	f003 0307 	and.w	r3, r3, #7
 800cfd2:	b2da      	uxtb	r2, r3
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfdc:	0d9b      	lsrs	r3, r3, #22
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	f003 030f 	and.w	r3, r3, #15
 800cfe4:	b2da      	uxtb	r2, r3
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfee:	0d5b      	lsrs	r3, r3, #21
 800cff0:	b2db      	uxtb	r3, r3
 800cff2:	f003 0301 	and.w	r3, r3, #1
 800cff6:	b2da      	uxtb	r2, r3
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	2200      	movs	r2, #0
 800d002:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d00a:	0c1b      	lsrs	r3, r3, #16
 800d00c:	b2db      	uxtb	r3, r3
 800d00e:	f003 0301 	and.w	r3, r3, #1
 800d012:	b2da      	uxtb	r2, r3
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d01e:	0bdb      	lsrs	r3, r3, #15
 800d020:	b2db      	uxtb	r3, r3
 800d022:	f003 0301 	and.w	r3, r3, #1
 800d026:	b2da      	uxtb	r2, r3
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d032:	0b9b      	lsrs	r3, r3, #14
 800d034:	b2db      	uxtb	r3, r3
 800d036:	f003 0301 	and.w	r3, r3, #1
 800d03a:	b2da      	uxtb	r2, r3
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d046:	0b5b      	lsrs	r3, r3, #13
 800d048:	b2db      	uxtb	r3, r3
 800d04a:	f003 0301 	and.w	r3, r3, #1
 800d04e:	b2da      	uxtb	r2, r3
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d05a:	0b1b      	lsrs	r3, r3, #12
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	f003 0301 	and.w	r3, r3, #1
 800d062:	b2da      	uxtb	r2, r3
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d06e:	0a9b      	lsrs	r3, r3, #10
 800d070:	b2db      	uxtb	r3, r3
 800d072:	f003 0303 	and.w	r3, r3, #3
 800d076:	b2da      	uxtb	r2, r3
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d082:	0a1b      	lsrs	r3, r3, #8
 800d084:	b2db      	uxtb	r3, r3
 800d086:	f003 0303 	and.w	r3, r3, #3
 800d08a:	b2da      	uxtb	r2, r3
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d096:	085b      	lsrs	r3, r3, #1
 800d098:	b2db      	uxtb	r3, r3
 800d09a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d09e:	b2da      	uxtb	r2, r3
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	2201      	movs	r2, #1
 800d0aa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d0ae:	2300      	movs	r3, #0
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	370c      	adds	r7, #12
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr
 800d0bc:	004005ff 	.word	0x004005ff

0800d0c0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b083      	sub	sp, #12
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d10a:	2300      	movs	r3, #0
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	370c      	adds	r7, #12
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr

0800d118 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d118:	b5b0      	push	{r4, r5, r7, lr}
 800d11a:	b08e      	sub	sp, #56	@ 0x38
 800d11c:	af04      	add	r7, sp, #16
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d122:	2300      	movs	r3, #0
 800d124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2203      	movs	r2, #3
 800d12c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d134:	2b03      	cmp	r3, #3
 800d136:	d02e      	beq.n	800d196 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d13e:	d106      	bne.n	800d14e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d144:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	639a      	str	r2, [r3, #56]	@ 0x38
 800d14c:	e029      	b.n	800d1a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d154:	d10a      	bne.n	800d16c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 fa1c 	bl	800d594 <SD_WideBus_Enable>
 800d15c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d162:	6a3b      	ldr	r3, [r7, #32]
 800d164:	431a      	orrs	r2, r3
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	639a      	str	r2, [r3, #56]	@ 0x38
 800d16a:	e01a      	b.n	800d1a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d10a      	bne.n	800d188 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 fa59 	bl	800d62a <SD_WideBus_Disable>
 800d178:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d17e:	6a3b      	ldr	r3, [r7, #32]
 800d180:	431a      	orrs	r2, r3
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	639a      	str	r2, [r3, #56]	@ 0x38
 800d186:	e00c      	b.n	800d1a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d18c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	639a      	str	r2, [r3, #56]	@ 0x38
 800d194:	e005      	b.n	800d1a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d19a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d00b      	beq.n	800d1c2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	4a26      	ldr	r2, [pc, #152]	@ (800d248 <HAL_SD_ConfigWideBusOperation+0x130>)
 800d1b0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d1c0:	e01f      	b.n	800d202 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	689b      	ldr	r3, [r3, #8]
 800d1cc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	695b      	ldr	r3, [r3, #20]
 800d1dc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	699b      	ldr	r3, [r3, #24]
 800d1e2:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681d      	ldr	r5, [r3, #0]
 800d1e8:	466c      	mov	r4, sp
 800d1ea:	f107 0314 	add.w	r3, r7, #20
 800d1ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d1f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d1f6:	f107 0308 	add.w	r3, r7, #8
 800d1fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d1fc:	4628      	mov	r0, r5
 800d1fe:	f003 f9ff 	bl	8010600 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d20a:	4618      	mov	r0, r3
 800d20c:	f003 fad4 	bl	80107b8 <SDMMC_CmdBlockLength>
 800d210:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d212:	6a3b      	ldr	r3, [r7, #32]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d00c      	beq.n	800d232 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a0a      	ldr	r2, [pc, #40]	@ (800d248 <HAL_SD_ConfigWideBusOperation+0x130>)
 800d21e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d224:	6a3b      	ldr	r3, [r7, #32]
 800d226:	431a      	orrs	r2, r3
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800d22c:	2301      	movs	r3, #1
 800d22e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2201      	movs	r2, #1
 800d236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800d23a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3728      	adds	r7, #40	@ 0x28
 800d242:	46bd      	mov	sp, r7
 800d244:	bdb0      	pop	{r4, r5, r7, pc}
 800d246:	bf00      	nop
 800d248:	004005ff 	.word	0x004005ff

0800d24c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b086      	sub	sp, #24
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d254:	2300      	movs	r3, #0
 800d256:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d258:	f107 030c 	add.w	r3, r7, #12
 800d25c:	4619      	mov	r1, r3
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f000 f970 	bl	800d544 <SD_SendStatus>
 800d264:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d005      	beq.n	800d278 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	431a      	orrs	r2, r3
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	0a5b      	lsrs	r3, r3, #9
 800d27c:	f003 030f 	and.w	r3, r3, #15
 800d280:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d282:	693b      	ldr	r3, [r7, #16]
}
 800d284:	4618      	mov	r0, r3
 800d286:	3718      	adds	r7, #24
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d28c:	b5b0      	push	{r4, r5, r7, lr}
 800d28e:	b094      	sub	sp, #80	@ 0x50
 800d290:	af04      	add	r7, sp, #16
 800d292:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d294:	2301      	movs	r3, #1
 800d296:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4618      	mov	r0, r3
 800d29e:	f003 fa07 	bl	80106b0 <SDMMC_GetPowerState>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d102      	bne.n	800d2ae <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d2a8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d2ac:	e0b8      	b.n	800d420 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2b2:	2b03      	cmp	r3, #3
 800d2b4:	d02f      	beq.n	800d316 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f003 fc31 	bl	8010b22 <SDMMC_CmdSendCID>
 800d2c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d001      	beq.n	800d2cc <SD_InitCard+0x40>
    {
      return errorstate;
 800d2c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2ca:	e0a9      	b.n	800d420 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2100      	movs	r1, #0
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f003 fa31 	bl	801073a <SDMMC_GetResponse>
 800d2d8:	4602      	mov	r2, r0
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	2104      	movs	r1, #4
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f003 fa28 	bl	801073a <SDMMC_GetResponse>
 800d2ea:	4602      	mov	r2, r0
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	2108      	movs	r1, #8
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f003 fa1f 	bl	801073a <SDMMC_GetResponse>
 800d2fc:	4602      	mov	r2, r0
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	210c      	movs	r1, #12
 800d308:	4618      	mov	r0, r3
 800d30a:	f003 fa16 	bl	801073a <SDMMC_GetResponse>
 800d30e:	4602      	mov	r2, r0
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d31a:	2b03      	cmp	r3, #3
 800d31c:	d00d      	beq.n	800d33a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f107 020e 	add.w	r2, r7, #14
 800d326:	4611      	mov	r1, r2
 800d328:	4618      	mov	r0, r3
 800d32a:	f003 fc37 	bl	8010b9c <SDMMC_CmdSetRelAdd>
 800d32e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d332:	2b00      	cmp	r3, #0
 800d334:	d001      	beq.n	800d33a <SD_InitCard+0xae>
    {
      return errorstate;
 800d336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d338:	e072      	b.n	800d420 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d33e:	2b03      	cmp	r3, #3
 800d340:	d036      	beq.n	800d3b0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d342:	89fb      	ldrh	r3, [r7, #14]
 800d344:	461a      	mov	r2, r3
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d352:	041b      	lsls	r3, r3, #16
 800d354:	4619      	mov	r1, r3
 800d356:	4610      	mov	r0, r2
 800d358:	f003 fc01 	bl	8010b5e <SDMMC_CmdSendCSD>
 800d35c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d35e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d360:	2b00      	cmp	r3, #0
 800d362:	d001      	beq.n	800d368 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d366:	e05b      	b.n	800d420 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2100      	movs	r1, #0
 800d36e:	4618      	mov	r0, r3
 800d370:	f003 f9e3 	bl	801073a <SDMMC_GetResponse>
 800d374:	4602      	mov	r2, r0
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	2104      	movs	r1, #4
 800d380:	4618      	mov	r0, r3
 800d382:	f003 f9da 	bl	801073a <SDMMC_GetResponse>
 800d386:	4602      	mov	r2, r0
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2108      	movs	r1, #8
 800d392:	4618      	mov	r0, r3
 800d394:	f003 f9d1 	bl	801073a <SDMMC_GetResponse>
 800d398:	4602      	mov	r2, r0
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	210c      	movs	r1, #12
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f003 f9c8 	bl	801073a <SDMMC_GetResponse>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2104      	movs	r1, #4
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f003 f9bf 	bl	801073a <SDMMC_GetResponse>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	0d1a      	lsrs	r2, r3, #20
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d3c4:	f107 0310 	add.w	r3, r7, #16
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f7ff fcd4 	bl	800cd78 <HAL_SD_GetCardCSD>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d002      	beq.n	800d3dc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d3d6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d3da:	e021      	b.n	800d420 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6819      	ldr	r1, [r3, #0]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3e4:	041b      	lsls	r3, r3, #16
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	461c      	mov	r4, r3
 800d3ea:	4615      	mov	r5, r2
 800d3ec:	4622      	mov	r2, r4
 800d3ee:	462b      	mov	r3, r5
 800d3f0:	4608      	mov	r0, r1
 800d3f2:	f003 faad 	bl	8010950 <SDMMC_CmdSelDesel>
 800d3f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d3f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d001      	beq.n	800d402 <SD_InitCard+0x176>
  {
    return errorstate;
 800d3fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d400:	e00e      	b.n	800d420 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681d      	ldr	r5, [r3, #0]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	466c      	mov	r4, sp
 800d40a:	f103 0210 	add.w	r2, r3, #16
 800d40e:	ca07      	ldmia	r2, {r0, r1, r2}
 800d410:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d414:	3304      	adds	r3, #4
 800d416:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d418:	4628      	mov	r0, r5
 800d41a:	f003 f8f1 	bl	8010600 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d41e:	2300      	movs	r3, #0
}
 800d420:	4618      	mov	r0, r3
 800d422:	3740      	adds	r7, #64	@ 0x40
 800d424:	46bd      	mov	sp, r7
 800d426:	bdb0      	pop	{r4, r5, r7, pc}

0800d428 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b086      	sub	sp, #24
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d430:	2300      	movs	r3, #0
 800d432:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d434:	2300      	movs	r3, #0
 800d436:	617b      	str	r3, [r7, #20]
 800d438:	2300      	movs	r3, #0
 800d43a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4618      	mov	r0, r3
 800d442:	f003 faa8 	bl	8010996 <SDMMC_CmdGoIdleState>
 800d446:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d001      	beq.n	800d452 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	e072      	b.n	800d538 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	4618      	mov	r0, r3
 800d458:	f003 fabb 	bl	80109d2 <SDMMC_CmdOperCond>
 800d45c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d00d      	beq.n	800d480 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4618      	mov	r0, r3
 800d470:	f003 fa91 	bl	8010996 <SDMMC_CmdGoIdleState>
 800d474:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d004      	beq.n	800d486 <SD_PowerON+0x5e>
    {
      return errorstate;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	e05b      	b.n	800d538 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2201      	movs	r2, #1
 800d484:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	d137      	bne.n	800d4fe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	2100      	movs	r1, #0
 800d494:	4618      	mov	r0, r3
 800d496:	f003 fabb 	bl	8010a10 <SDMMC_CmdAppCommand>
 800d49a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d02d      	beq.n	800d4fe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d4a2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d4a6:	e047      	b.n	800d538 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	2100      	movs	r1, #0
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f003 faae 	bl	8010a10 <SDMMC_CmdAppCommand>
 800d4b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d001      	beq.n	800d4c0 <SD_PowerON+0x98>
    {
      return errorstate;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	e03b      	b.n	800d538 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	491e      	ldr	r1, [pc, #120]	@ (800d540 <SD_PowerON+0x118>)
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f003 fac4 	bl	8010a54 <SDMMC_CmdAppOperCommand>
 800d4cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d002      	beq.n	800d4da <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d4d4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d4d8:	e02e      	b.n	800d538 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	2100      	movs	r1, #0
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f003 f92a 	bl	801073a <SDMMC_GetResponse>
 800d4e6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	0fdb      	lsrs	r3, r3, #31
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	d101      	bne.n	800d4f4 <SD_PowerON+0xcc>
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	e000      	b.n	800d4f6 <SD_PowerON+0xce>
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	613b      	str	r3, [r7, #16]

    count++;
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d504:	4293      	cmp	r3, r2
 800d506:	d802      	bhi.n	800d50e <SD_PowerON+0xe6>
 800d508:	693b      	ldr	r3, [r7, #16]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d0cc      	beq.n	800d4a8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d514:	4293      	cmp	r3, r2
 800d516:	d902      	bls.n	800d51e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d518:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d51c:	e00c      	b.n	800d538 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d524:	2b00      	cmp	r3, #0
 800d526:	d003      	beq.n	800d530 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2201      	movs	r2, #1
 800d52c:	645a      	str	r2, [r3, #68]	@ 0x44
 800d52e:	e002      	b.n	800d536 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2200      	movs	r2, #0
 800d534:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d536:	2300      	movs	r3, #0
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3718      	adds	r7, #24
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	c1100000 	.word	0xc1100000

0800d544 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b084      	sub	sp, #16
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d102      	bne.n	800d55a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d554:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d558:	e018      	b.n	800d58c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681a      	ldr	r2, [r3, #0]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d562:	041b      	lsls	r3, r3, #16
 800d564:	4619      	mov	r1, r3
 800d566:	4610      	mov	r0, r2
 800d568:	f003 fb39 	bl	8010bde <SDMMC_CmdSendStatus>
 800d56c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d001      	beq.n	800d578 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	e009      	b.n	800d58c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	2100      	movs	r1, #0
 800d57e:	4618      	mov	r0, r3
 800d580:	f003 f8db 	bl	801073a <SDMMC_GetResponse>
 800d584:	4602      	mov	r2, r0
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d58a:	2300      	movs	r3, #0
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3710      	adds	r7, #16
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b086      	sub	sp, #24
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d59c:	2300      	movs	r3, #0
 800d59e:	60fb      	str	r3, [r7, #12]
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f003 f8c5 	bl	801073a <SDMMC_GetResponse>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d5b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d5ba:	d102      	bne.n	800d5c2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d5bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d5c0:	e02f      	b.n	800d622 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d5c2:	f107 030c 	add.w	r3, r7, #12
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 f879 	bl	800d6c0 <SD_FindSCR>
 800d5ce:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d001      	beq.n	800d5da <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	e023      	b.n	800d622 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d01c      	beq.n	800d61e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5ec:	041b      	lsls	r3, r3, #16
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	4610      	mov	r0, r2
 800d5f2:	f003 fa0d 	bl	8010a10 <SDMMC_CmdAppCommand>
 800d5f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d001      	beq.n	800d602 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	e00f      	b.n	800d622 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	2102      	movs	r1, #2
 800d608:	4618      	mov	r0, r3
 800d60a:	f003 fa47 	bl	8010a9c <SDMMC_CmdBusWidth>
 800d60e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d001      	beq.n	800d61a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	e003      	b.n	800d622 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d61a:	2300      	movs	r3, #0
 800d61c:	e001      	b.n	800d622 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d61e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d622:	4618      	mov	r0, r3
 800d624:	3718      	adds	r7, #24
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}

0800d62a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d62a:	b580      	push	{r7, lr}
 800d62c:	b086      	sub	sp, #24
 800d62e:	af00      	add	r7, sp, #0
 800d630:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d632:	2300      	movs	r3, #0
 800d634:	60fb      	str	r3, [r7, #12]
 800d636:	2300      	movs	r3, #0
 800d638:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	2100      	movs	r1, #0
 800d640:	4618      	mov	r0, r3
 800d642:	f003 f87a 	bl	801073a <SDMMC_GetResponse>
 800d646:	4603      	mov	r3, r0
 800d648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d64c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d650:	d102      	bne.n	800d658 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d652:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d656:	e02f      	b.n	800d6b8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d658:	f107 030c 	add.w	r3, r7, #12
 800d65c:	4619      	mov	r1, r3
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f000 f82e 	bl	800d6c0 <SD_FindSCR>
 800d664:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d001      	beq.n	800d670 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	e023      	b.n	800d6b8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d676:	2b00      	cmp	r3, #0
 800d678:	d01c      	beq.n	800d6b4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d682:	041b      	lsls	r3, r3, #16
 800d684:	4619      	mov	r1, r3
 800d686:	4610      	mov	r0, r2
 800d688:	f003 f9c2 	bl	8010a10 <SDMMC_CmdAppCommand>
 800d68c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d001      	beq.n	800d698 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	e00f      	b.n	800d6b8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	2100      	movs	r1, #0
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f003 f9fc 	bl	8010a9c <SDMMC_CmdBusWidth>
 800d6a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d001      	beq.n	800d6b0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	e003      	b.n	800d6b8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	e001      	b.n	800d6b8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d6b4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3718      	adds	r7, #24
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}

0800d6c0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d6c0:	b590      	push	{r4, r7, lr}
 800d6c2:	b08f      	sub	sp, #60	@ 0x3c
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d6ca:	f7f8 fc1d 	bl	8005f08 <HAL_GetTick>
 800d6ce:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	60bb      	str	r3, [r7, #8]
 800d6d8:	2300      	movs	r3, #0
 800d6da:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	2108      	movs	r1, #8
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f003 f866 	bl	80107b8 <SDMMC_CmdBlockLength>
 800d6ec:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d001      	beq.n	800d6f8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6f6:	e0b2      	b.n	800d85e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d700:	041b      	lsls	r3, r3, #16
 800d702:	4619      	mov	r1, r3
 800d704:	4610      	mov	r0, r2
 800d706:	f003 f983 	bl	8010a10 <SDMMC_CmdAppCommand>
 800d70a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d70c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d001      	beq.n	800d716 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d714:	e0a3      	b.n	800d85e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d716:	f04f 33ff 	mov.w	r3, #4294967295
 800d71a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d71c:	2308      	movs	r3, #8
 800d71e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d720:	2330      	movs	r3, #48	@ 0x30
 800d722:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d724:	2302      	movs	r3, #2
 800d726:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d728:	2300      	movs	r3, #0
 800d72a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d72c:	2301      	movs	r3, #1
 800d72e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f107 0210 	add.w	r2, r7, #16
 800d738:	4611      	mov	r1, r2
 800d73a:	4618      	mov	r0, r3
 800d73c:	f003 f810 	bl	8010760 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4618      	mov	r0, r3
 800d746:	f003 f9cb 	bl	8010ae0 <SDMMC_CmdSendSCR>
 800d74a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d02a      	beq.n	800d7a8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800d752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d754:	e083      	b.n	800d85e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d75c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d760:	2b00      	cmp	r3, #0
 800d762:	d00f      	beq.n	800d784 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6819      	ldr	r1, [r3, #0]
 800d768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	f107 0208 	add.w	r2, r7, #8
 800d770:	18d4      	adds	r4, r2, r3
 800d772:	4608      	mov	r0, r1
 800d774:	f002 ff70 	bl	8010658 <SDMMC_ReadFIFO>
 800d778:	4603      	mov	r3, r0
 800d77a:	6023      	str	r3, [r4, #0]
      index++;
 800d77c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d77e:	3301      	adds	r3, #1
 800d780:	637b      	str	r3, [r7, #52]	@ 0x34
 800d782:	e006      	b.n	800d792 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d78a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d012      	beq.n	800d7b8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800d792:	f7f8 fbb9 	bl	8005f08 <HAL_GetTick>
 800d796:	4602      	mov	r2, r0
 800d798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d79a:	1ad3      	subs	r3, r2, r3
 800d79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7a0:	d102      	bne.n	800d7a8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d7a2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d7a6:	e05a      	b.n	800d85e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7ae:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d0cf      	beq.n	800d756 <SD_FindSCR+0x96>
 800d7b6:	e000      	b.n	800d7ba <SD_FindSCR+0xfa>
      break;
 800d7b8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7c0:	f003 0308 	and.w	r3, r3, #8
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d005      	beq.n	800d7d4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	2208      	movs	r2, #8
 800d7ce:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d7d0:	2308      	movs	r3, #8
 800d7d2:	e044      	b.n	800d85e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7da:	f003 0302 	and.w	r3, r3, #2
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d005      	beq.n	800d7ee <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	2202      	movs	r2, #2
 800d7e8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d7ea:	2302      	movs	r3, #2
 800d7ec:	e037      	b.n	800d85e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7f4:	f003 0320 	and.w	r3, r3, #32
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d005      	beq.n	800d808 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	2220      	movs	r2, #32
 800d802:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d804:	2320      	movs	r3, #32
 800d806:	e02a      	b.n	800d85e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d810:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	061a      	lsls	r2, r3, #24
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	021b      	lsls	r3, r3, #8
 800d81a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d81e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	0a1b      	lsrs	r3, r3, #8
 800d824:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d828:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	0e1b      	lsrs	r3, r3, #24
 800d82e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d832:	601a      	str	r2, [r3, #0]
    scr++;
 800d834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d836:	3304      	adds	r3, #4
 800d838:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	061a      	lsls	r2, r3, #24
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	021b      	lsls	r3, r3, #8
 800d842:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d846:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	0a1b      	lsrs	r3, r3, #8
 800d84c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d850:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	0e1b      	lsrs	r3, r3, #24
 800d856:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d85a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d85c:	2300      	movs	r3, #0
}
 800d85e:	4618      	mov	r0, r3
 800d860:	373c      	adds	r7, #60	@ 0x3c
 800d862:	46bd      	mov	sp, r7
 800d864:	bd90      	pop	{r4, r7, pc}

0800d866 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d866:	b580      	push	{r7, lr}
 800d868:	b082      	sub	sp, #8
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
 800d86e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d101      	bne.n	800d87a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d876:	2301      	movs	r3, #1
 800d878:	e025      	b.n	800d8c6 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d880:	b2db      	uxtb	r3, r3
 800d882:	2b00      	cmp	r3, #0
 800d884:	d106      	bne.n	800d894 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2200      	movs	r2, #0
 800d88a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f7f7 faf8 	bl	8004e84 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2202      	movs	r2, #2
 800d898:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	3304      	adds	r3, #4
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	4610      	mov	r0, r2
 800d8a8:	f002 fde4 	bl	8010474 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6818      	ldr	r0, [r3, #0]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	685b      	ldr	r3, [r3, #4]
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	6839      	ldr	r1, [r7, #0]
 800d8b8:	f002 fe38 	bl	801052c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2201      	movs	r2, #1
 800d8c0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d8c4:	2300      	movs	r3, #0
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3708      	adds	r7, #8
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
	...

0800d8d0 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d101      	bne.n	800d8e2 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800d8de:	2301      	movs	r3, #1
 800d8e0:	e04c      	b.n	800d97c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d8e8:	b2db      	uxtb	r3, r3
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d106      	bne.n	800d8fc <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f7f6 ff4a 	bl	8004790 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2202      	movs	r2, #2
 800d900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f022 0203 	bic.w	r2, r2, #3
 800d912:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800d91c:	68fa      	ldr	r2, [r7, #12]
 800d91e:	4b19      	ldr	r3, [pc, #100]	@ (800d984 <HAL_SPDIFRX_Init+0xb4>)
 800d920:	4013      	ands	r3, r2
 800d922:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800d92c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800d932:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800d938:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800d93e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800d944:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800d94a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800d950:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800d956:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800d95c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800d95e:	68fa      	ldr	r2, [r7, #12]
 800d960:	4313      	orrs	r3, r2
 800d962:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	68fa      	ldr	r2, [r7, #12]
 800d96a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2200      	movs	r2, #0
 800d970:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2201      	movs	r2, #1
 800d976:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800d97a:	2300      	movs	r3, #0
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3710      	adds	r7, #16
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	fff88407 	.word	0xfff88407

0800d988 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b084      	sub	sp, #16
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d101      	bne.n	800d99a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d996:	2301      	movs	r3, #1
 800d998:	e09d      	b.n	800dad6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d108      	bne.n	800d9b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	685b      	ldr	r3, [r3, #4]
 800d9a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d9aa:	d009      	beq.n	800d9c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	61da      	str	r2, [r3, #28]
 800d9b2:	e005      	b.n	800d9c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d9cc:	b2db      	uxtb	r3, r3
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d106      	bne.n	800d9e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f7f6 ff3c 	bl	8004858 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2202      	movs	r2, #2
 800d9e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	681a      	ldr	r2, [r3, #0]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d9f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800da00:	d902      	bls.n	800da08 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800da02:	2300      	movs	r3, #0
 800da04:	60fb      	str	r3, [r7, #12]
 800da06:	e002      	b.n	800da0e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800da08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800da0c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	68db      	ldr	r3, [r3, #12]
 800da12:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800da16:	d007      	beq.n	800da28 <HAL_SPI_Init+0xa0>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	68db      	ldr	r3, [r3, #12]
 800da1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800da20:	d002      	beq.n	800da28 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2200      	movs	r2, #0
 800da26:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	689b      	ldr	r3, [r3, #8]
 800da34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800da38:	431a      	orrs	r2, r3
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	691b      	ldr	r3, [r3, #16]
 800da3e:	f003 0302 	and.w	r3, r3, #2
 800da42:	431a      	orrs	r2, r3
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	695b      	ldr	r3, [r3, #20]
 800da48:	f003 0301 	and.w	r3, r3, #1
 800da4c:	431a      	orrs	r2, r3
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	699b      	ldr	r3, [r3, #24]
 800da52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800da56:	431a      	orrs	r2, r3
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	69db      	ldr	r3, [r3, #28]
 800da5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800da60:	431a      	orrs	r2, r3
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6a1b      	ldr	r3, [r3, #32]
 800da66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da6a:	ea42 0103 	orr.w	r1, r2, r3
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da72:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	430a      	orrs	r2, r1
 800da7c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	699b      	ldr	r3, [r3, #24]
 800da82:	0c1b      	lsrs	r3, r3, #16
 800da84:	f003 0204 	and.w	r2, r3, #4
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da8c:	f003 0310 	and.w	r3, r3, #16
 800da90:	431a      	orrs	r2, r3
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da96:	f003 0308 	and.w	r3, r3, #8
 800da9a:	431a      	orrs	r2, r3
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	68db      	ldr	r3, [r3, #12]
 800daa0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800daa4:	ea42 0103 	orr.w	r1, r2, r3
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	430a      	orrs	r2, r1
 800dab4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	69da      	ldr	r2, [r3, #28]
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dac4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2200      	movs	r2, #0
 800daca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2201      	movs	r2, #1
 800dad0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800dad4:	2300      	movs	r3, #0
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3710      	adds	r7, #16
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}

0800dade <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dade:	b580      	push	{r7, lr}
 800dae0:	b082      	sub	sp, #8
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d101      	bne.n	800daf0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800daec:	2301      	movs	r3, #1
 800daee:	e049      	b.n	800db84 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800daf6:	b2db      	uxtb	r3, r3
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d106      	bne.n	800db0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2200      	movs	r2, #0
 800db00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f7f6 ff09 	bl	800491c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2202      	movs	r2, #2
 800db0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681a      	ldr	r2, [r3, #0]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	3304      	adds	r3, #4
 800db1a:	4619      	mov	r1, r3
 800db1c:	4610      	mov	r0, r2
 800db1e:	f000 fc11 	bl	800e344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2201      	movs	r2, #1
 800db26:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2201      	movs	r2, #1
 800db2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2201      	movs	r2, #1
 800db36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2201      	movs	r2, #1
 800db3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2201      	movs	r2, #1
 800db46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2201      	movs	r2, #1
 800db4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2201      	movs	r2, #1
 800db56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2201      	movs	r2, #1
 800db5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2201      	movs	r2, #1
 800db66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2201      	movs	r2, #1
 800db6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2201      	movs	r2, #1
 800db76:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2201      	movs	r2, #1
 800db7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800db82:	2300      	movs	r3, #0
}
 800db84:	4618      	mov	r0, r3
 800db86:	3708      	adds	r7, #8
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800db8c:	b480      	push	{r7}
 800db8e:	b085      	sub	sp, #20
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	2b01      	cmp	r3, #1
 800db9e:	d001      	beq.n	800dba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dba0:	2301      	movs	r3, #1
 800dba2:	e054      	b.n	800dc4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2202      	movs	r2, #2
 800dba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	68da      	ldr	r2, [r3, #12]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f042 0201 	orr.w	r2, r2, #1
 800dbba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4a26      	ldr	r2, [pc, #152]	@ (800dc5c <HAL_TIM_Base_Start_IT+0xd0>)
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d022      	beq.n	800dc0c <HAL_TIM_Base_Start_IT+0x80>
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbce:	d01d      	beq.n	800dc0c <HAL_TIM_Base_Start_IT+0x80>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	4a22      	ldr	r2, [pc, #136]	@ (800dc60 <HAL_TIM_Base_Start_IT+0xd4>)
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d018      	beq.n	800dc0c <HAL_TIM_Base_Start_IT+0x80>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	4a21      	ldr	r2, [pc, #132]	@ (800dc64 <HAL_TIM_Base_Start_IT+0xd8>)
 800dbe0:	4293      	cmp	r3, r2
 800dbe2:	d013      	beq.n	800dc0c <HAL_TIM_Base_Start_IT+0x80>
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	4a1f      	ldr	r2, [pc, #124]	@ (800dc68 <HAL_TIM_Base_Start_IT+0xdc>)
 800dbea:	4293      	cmp	r3, r2
 800dbec:	d00e      	beq.n	800dc0c <HAL_TIM_Base_Start_IT+0x80>
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	4a1e      	ldr	r2, [pc, #120]	@ (800dc6c <HAL_TIM_Base_Start_IT+0xe0>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d009      	beq.n	800dc0c <HAL_TIM_Base_Start_IT+0x80>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	4a1c      	ldr	r2, [pc, #112]	@ (800dc70 <HAL_TIM_Base_Start_IT+0xe4>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d004      	beq.n	800dc0c <HAL_TIM_Base_Start_IT+0x80>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	4a1b      	ldr	r2, [pc, #108]	@ (800dc74 <HAL_TIM_Base_Start_IT+0xe8>)
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	d115      	bne.n	800dc38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	689a      	ldr	r2, [r3, #8]
 800dc12:	4b19      	ldr	r3, [pc, #100]	@ (800dc78 <HAL_TIM_Base_Start_IT+0xec>)
 800dc14:	4013      	ands	r3, r2
 800dc16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2b06      	cmp	r3, #6
 800dc1c:	d015      	beq.n	800dc4a <HAL_TIM_Base_Start_IT+0xbe>
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc24:	d011      	beq.n	800dc4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f042 0201 	orr.w	r2, r2, #1
 800dc34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc36:	e008      	b.n	800dc4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	681a      	ldr	r2, [r3, #0]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f042 0201 	orr.w	r2, r2, #1
 800dc46:	601a      	str	r2, [r3, #0]
 800dc48:	e000      	b.n	800dc4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dc4c:	2300      	movs	r3, #0
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3714      	adds	r7, #20
 800dc52:	46bd      	mov	sp, r7
 800dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc58:	4770      	bx	lr
 800dc5a:	bf00      	nop
 800dc5c:	40010000 	.word	0x40010000
 800dc60:	40000400 	.word	0x40000400
 800dc64:	40000800 	.word	0x40000800
 800dc68:	40000c00 	.word	0x40000c00
 800dc6c:	40010400 	.word	0x40010400
 800dc70:	40014000 	.word	0x40014000
 800dc74:	40001800 	.word	0x40001800
 800dc78:	00010007 	.word	0x00010007

0800dc7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d101      	bne.n	800dc8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	e049      	b.n	800dd22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d106      	bne.n	800dca8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f7f6 fea8 	bl	80049f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2202      	movs	r2, #2
 800dcac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681a      	ldr	r2, [r3, #0]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	3304      	adds	r3, #4
 800dcb8:	4619      	mov	r1, r3
 800dcba:	4610      	mov	r0, r2
 800dcbc:	f000 fb42 	bl	800e344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2201      	movs	r2, #1
 800dccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2201      	movs	r2, #1
 800dcd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2201      	movs	r2, #1
 800dcdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2201      	movs	r2, #1
 800dce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2201      	movs	r2, #1
 800dcec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2201      	movs	r2, #1
 800dd04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2201      	movs	r2, #1
 800dd14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dd20:	2300      	movs	r3, #0
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3708      	adds	r7, #8
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}

0800dd2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dd2a:	b580      	push	{r7, lr}
 800dd2c:	b084      	sub	sp, #16
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	68db      	ldr	r3, [r3, #12]
 800dd38:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	691b      	ldr	r3, [r3, #16]
 800dd40:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	f003 0302 	and.w	r3, r3, #2
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d020      	beq.n	800dd8e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f003 0302 	and.w	r3, r3, #2
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d01b      	beq.n	800dd8e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f06f 0202 	mvn.w	r2, #2
 800dd5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2201      	movs	r2, #1
 800dd64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	699b      	ldr	r3, [r3, #24]
 800dd6c:	f003 0303 	and.w	r3, r3, #3
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d003      	beq.n	800dd7c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f000 fac7 	bl	800e308 <HAL_TIM_IC_CaptureCallback>
 800dd7a:	e005      	b.n	800dd88 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f000 fab9 	bl	800e2f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f000 faca 	bl	800e31c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	f003 0304 	and.w	r3, r3, #4
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d020      	beq.n	800ddda <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f003 0304 	and.w	r3, r3, #4
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d01b      	beq.n	800ddda <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	f06f 0204 	mvn.w	r2, #4
 800ddaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2202      	movs	r2, #2
 800ddb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	699b      	ldr	r3, [r3, #24]
 800ddb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d003      	beq.n	800ddc8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f000 faa1 	bl	800e308 <HAL_TIM_IC_CaptureCallback>
 800ddc6:	e005      	b.n	800ddd4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f000 fa93 	bl	800e2f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f000 faa4 	bl	800e31c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	f003 0308 	and.w	r3, r3, #8
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d020      	beq.n	800de26 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	f003 0308 	and.w	r3, r3, #8
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d01b      	beq.n	800de26 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f06f 0208 	mvn.w	r2, #8
 800ddf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2204      	movs	r2, #4
 800ddfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	69db      	ldr	r3, [r3, #28]
 800de04:	f003 0303 	and.w	r3, r3, #3
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d003      	beq.n	800de14 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 fa7b 	bl	800e308 <HAL_TIM_IC_CaptureCallback>
 800de12:	e005      	b.n	800de20 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f000 fa6d 	bl	800e2f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f000 fa7e 	bl	800e31c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2200      	movs	r2, #0
 800de24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	f003 0310 	and.w	r3, r3, #16
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d020      	beq.n	800de72 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	f003 0310 	and.w	r3, r3, #16
 800de36:	2b00      	cmp	r3, #0
 800de38:	d01b      	beq.n	800de72 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	f06f 0210 	mvn.w	r2, #16
 800de42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2208      	movs	r2, #8
 800de48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	69db      	ldr	r3, [r3, #28]
 800de50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800de54:	2b00      	cmp	r3, #0
 800de56:	d003      	beq.n	800de60 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f000 fa55 	bl	800e308 <HAL_TIM_IC_CaptureCallback>
 800de5e:	e005      	b.n	800de6c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f000 fa47 	bl	800e2f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 fa58 	bl	800e31c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2200      	movs	r2, #0
 800de70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	f003 0301 	and.w	r3, r3, #1
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d00c      	beq.n	800de96 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	f003 0301 	and.w	r3, r3, #1
 800de82:	2b00      	cmp	r3, #0
 800de84:	d007      	beq.n	800de96 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f06f 0201 	mvn.w	r2, #1
 800de8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f7f5 ff4b 	bl	8003d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d104      	bne.n	800deaa <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d00c      	beq.n	800dec4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d007      	beq.n	800dec4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800debc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f000 fef4 	bl	800ecac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800deca:	2b00      	cmp	r3, #0
 800decc:	d00c      	beq.n	800dee8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d007      	beq.n	800dee8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800dee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f000 feec 	bl	800ecc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800deee:	2b00      	cmp	r3, #0
 800def0:	d00c      	beq.n	800df0c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800def8:	2b00      	cmp	r3, #0
 800defa:	d007      	beq.n	800df0c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800df04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f000 fa12 	bl	800e330 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	f003 0320 	and.w	r3, r3, #32
 800df12:	2b00      	cmp	r3, #0
 800df14:	d00c      	beq.n	800df30 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	f003 0320 	and.w	r3, r3, #32
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d007      	beq.n	800df30 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f06f 0220 	mvn.w	r2, #32
 800df28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f000 feb4 	bl	800ec98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800df30:	bf00      	nop
 800df32:	3710      	adds	r7, #16
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b086      	sub	sp, #24
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800df44:	2300      	movs	r3, #0
 800df46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800df4e:	2b01      	cmp	r3, #1
 800df50:	d101      	bne.n	800df56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800df52:	2302      	movs	r3, #2
 800df54:	e0ff      	b.n	800e156 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	2201      	movs	r2, #1
 800df5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2b14      	cmp	r3, #20
 800df62:	f200 80f0 	bhi.w	800e146 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800df66:	a201      	add	r2, pc, #4	@ (adr r2, 800df6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800df68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df6c:	0800dfc1 	.word	0x0800dfc1
 800df70:	0800e147 	.word	0x0800e147
 800df74:	0800e147 	.word	0x0800e147
 800df78:	0800e147 	.word	0x0800e147
 800df7c:	0800e001 	.word	0x0800e001
 800df80:	0800e147 	.word	0x0800e147
 800df84:	0800e147 	.word	0x0800e147
 800df88:	0800e147 	.word	0x0800e147
 800df8c:	0800e043 	.word	0x0800e043
 800df90:	0800e147 	.word	0x0800e147
 800df94:	0800e147 	.word	0x0800e147
 800df98:	0800e147 	.word	0x0800e147
 800df9c:	0800e083 	.word	0x0800e083
 800dfa0:	0800e147 	.word	0x0800e147
 800dfa4:	0800e147 	.word	0x0800e147
 800dfa8:	0800e147 	.word	0x0800e147
 800dfac:	0800e0c5 	.word	0x0800e0c5
 800dfb0:	0800e147 	.word	0x0800e147
 800dfb4:	0800e147 	.word	0x0800e147
 800dfb8:	0800e147 	.word	0x0800e147
 800dfbc:	0800e105 	.word	0x0800e105
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	68b9      	ldr	r1, [r7, #8]
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f000 fa62 	bl	800e490 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	699a      	ldr	r2, [r3, #24]
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f042 0208 	orr.w	r2, r2, #8
 800dfda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	699a      	ldr	r2, [r3, #24]
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f022 0204 	bic.w	r2, r2, #4
 800dfea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	6999      	ldr	r1, [r3, #24]
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	691a      	ldr	r2, [r3, #16]
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	430a      	orrs	r2, r1
 800dffc:	619a      	str	r2, [r3, #24]
      break;
 800dffe:	e0a5      	b.n	800e14c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	68b9      	ldr	r1, [r7, #8]
 800e006:	4618      	mov	r0, r3
 800e008:	f000 fab4 	bl	800e574 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	699a      	ldr	r2, [r3, #24]
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e01a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	699a      	ldr	r2, [r3, #24]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e02a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	6999      	ldr	r1, [r3, #24]
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	691b      	ldr	r3, [r3, #16]
 800e036:	021a      	lsls	r2, r3, #8
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	430a      	orrs	r2, r1
 800e03e:	619a      	str	r2, [r3, #24]
      break;
 800e040:	e084      	b.n	800e14c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	68b9      	ldr	r1, [r7, #8]
 800e048:	4618      	mov	r0, r3
 800e04a:	f000 fb0b 	bl	800e664 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	69da      	ldr	r2, [r3, #28]
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	f042 0208 	orr.w	r2, r2, #8
 800e05c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	69da      	ldr	r2, [r3, #28]
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f022 0204 	bic.w	r2, r2, #4
 800e06c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	69d9      	ldr	r1, [r3, #28]
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	691a      	ldr	r2, [r3, #16]
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	430a      	orrs	r2, r1
 800e07e:	61da      	str	r2, [r3, #28]
      break;
 800e080:	e064      	b.n	800e14c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	68b9      	ldr	r1, [r7, #8]
 800e088:	4618      	mov	r0, r3
 800e08a:	f000 fb61 	bl	800e750 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	69da      	ldr	r2, [r3, #28]
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e09c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	69da      	ldr	r2, [r3, #28]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e0ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	69d9      	ldr	r1, [r3, #28]
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	691b      	ldr	r3, [r3, #16]
 800e0b8:	021a      	lsls	r2, r3, #8
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	430a      	orrs	r2, r1
 800e0c0:	61da      	str	r2, [r3, #28]
      break;
 800e0c2:	e043      	b.n	800e14c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	68b9      	ldr	r1, [r7, #8]
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f000 fb98 	bl	800e800 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	f042 0208 	orr.w	r2, r2, #8
 800e0de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	f022 0204 	bic.w	r2, r2, #4
 800e0ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	691a      	ldr	r2, [r3, #16]
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	430a      	orrs	r2, r1
 800e100:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e102:	e023      	b.n	800e14c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	68b9      	ldr	r1, [r7, #8]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f000 fbca 	bl	800e8a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e11e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e12e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	691b      	ldr	r3, [r3, #16]
 800e13a:	021a      	lsls	r2, r3, #8
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	430a      	orrs	r2, r1
 800e142:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e144:	e002      	b.n	800e14c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e146:	2301      	movs	r3, #1
 800e148:	75fb      	strb	r3, [r7, #23]
      break;
 800e14a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2200      	movs	r2, #0
 800e150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e154:	7dfb      	ldrb	r3, [r7, #23]
}
 800e156:	4618      	mov	r0, r3
 800e158:	3718      	adds	r7, #24
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
 800e15e:	bf00      	nop

0800e160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b084      	sub	sp, #16
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
 800e168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e16a:	2300      	movs	r3, #0
 800e16c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e174:	2b01      	cmp	r3, #1
 800e176:	d101      	bne.n	800e17c <HAL_TIM_ConfigClockSource+0x1c>
 800e178:	2302      	movs	r3, #2
 800e17a:	e0b4      	b.n	800e2e6 <HAL_TIM_ConfigClockSource+0x186>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2201      	movs	r2, #1
 800e180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2202      	movs	r2, #2
 800e188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	689b      	ldr	r3, [r3, #8]
 800e192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e194:	68ba      	ldr	r2, [r7, #8]
 800e196:	4b56      	ldr	r3, [pc, #344]	@ (800e2f0 <HAL_TIM_ConfigClockSource+0x190>)
 800e198:	4013      	ands	r3, r2
 800e19a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e1a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	68ba      	ldr	r2, [r7, #8]
 800e1aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e1b4:	d03e      	beq.n	800e234 <HAL_TIM_ConfigClockSource+0xd4>
 800e1b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e1ba:	f200 8087 	bhi.w	800e2cc <HAL_TIM_ConfigClockSource+0x16c>
 800e1be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e1c2:	f000 8086 	beq.w	800e2d2 <HAL_TIM_ConfigClockSource+0x172>
 800e1c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e1ca:	d87f      	bhi.n	800e2cc <HAL_TIM_ConfigClockSource+0x16c>
 800e1cc:	2b70      	cmp	r3, #112	@ 0x70
 800e1ce:	d01a      	beq.n	800e206 <HAL_TIM_ConfigClockSource+0xa6>
 800e1d0:	2b70      	cmp	r3, #112	@ 0x70
 800e1d2:	d87b      	bhi.n	800e2cc <HAL_TIM_ConfigClockSource+0x16c>
 800e1d4:	2b60      	cmp	r3, #96	@ 0x60
 800e1d6:	d050      	beq.n	800e27a <HAL_TIM_ConfigClockSource+0x11a>
 800e1d8:	2b60      	cmp	r3, #96	@ 0x60
 800e1da:	d877      	bhi.n	800e2cc <HAL_TIM_ConfigClockSource+0x16c>
 800e1dc:	2b50      	cmp	r3, #80	@ 0x50
 800e1de:	d03c      	beq.n	800e25a <HAL_TIM_ConfigClockSource+0xfa>
 800e1e0:	2b50      	cmp	r3, #80	@ 0x50
 800e1e2:	d873      	bhi.n	800e2cc <HAL_TIM_ConfigClockSource+0x16c>
 800e1e4:	2b40      	cmp	r3, #64	@ 0x40
 800e1e6:	d058      	beq.n	800e29a <HAL_TIM_ConfigClockSource+0x13a>
 800e1e8:	2b40      	cmp	r3, #64	@ 0x40
 800e1ea:	d86f      	bhi.n	800e2cc <HAL_TIM_ConfigClockSource+0x16c>
 800e1ec:	2b30      	cmp	r3, #48	@ 0x30
 800e1ee:	d064      	beq.n	800e2ba <HAL_TIM_ConfigClockSource+0x15a>
 800e1f0:	2b30      	cmp	r3, #48	@ 0x30
 800e1f2:	d86b      	bhi.n	800e2cc <HAL_TIM_ConfigClockSource+0x16c>
 800e1f4:	2b20      	cmp	r3, #32
 800e1f6:	d060      	beq.n	800e2ba <HAL_TIM_ConfigClockSource+0x15a>
 800e1f8:	2b20      	cmp	r3, #32
 800e1fa:	d867      	bhi.n	800e2cc <HAL_TIM_ConfigClockSource+0x16c>
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d05c      	beq.n	800e2ba <HAL_TIM_ConfigClockSource+0x15a>
 800e200:	2b10      	cmp	r3, #16
 800e202:	d05a      	beq.n	800e2ba <HAL_TIM_ConfigClockSource+0x15a>
 800e204:	e062      	b.n	800e2cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e216:	f000 fc13 	bl	800ea40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	689b      	ldr	r3, [r3, #8]
 800e220:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e228:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	68ba      	ldr	r2, [r7, #8]
 800e230:	609a      	str	r2, [r3, #8]
      break;
 800e232:	e04f      	b.n	800e2d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e244:	f000 fbfc 	bl	800ea40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	689a      	ldr	r2, [r3, #8]
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e256:	609a      	str	r2, [r3, #8]
      break;
 800e258:	e03c      	b.n	800e2d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e266:	461a      	mov	r2, r3
 800e268:	f000 fb70 	bl	800e94c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	2150      	movs	r1, #80	@ 0x50
 800e272:	4618      	mov	r0, r3
 800e274:	f000 fbc9 	bl	800ea0a <TIM_ITRx_SetConfig>
      break;
 800e278:	e02c      	b.n	800e2d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e286:	461a      	mov	r2, r3
 800e288:	f000 fb8f 	bl	800e9aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	2160      	movs	r1, #96	@ 0x60
 800e292:	4618      	mov	r0, r3
 800e294:	f000 fbb9 	bl	800ea0a <TIM_ITRx_SetConfig>
      break;
 800e298:	e01c      	b.n	800e2d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	f000 fb50 	bl	800e94c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	2140      	movs	r1, #64	@ 0x40
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f000 fba9 	bl	800ea0a <TIM_ITRx_SetConfig>
      break;
 800e2b8:	e00c      	b.n	800e2d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681a      	ldr	r2, [r3, #0]
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	4610      	mov	r0, r2
 800e2c6:	f000 fba0 	bl	800ea0a <TIM_ITRx_SetConfig>
      break;
 800e2ca:	e003      	b.n	800e2d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	73fb      	strb	r3, [r7, #15]
      break;
 800e2d0:	e000      	b.n	800e2d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e2d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2201      	movs	r2, #1
 800e2d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e2e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3710      	adds	r7, #16
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	fffeff88 	.word	0xfffeff88

0800e2f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e2fc:	bf00      	nop
 800e2fe:	370c      	adds	r7, #12
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr

0800e308 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e308:	b480      	push	{r7}
 800e30a:	b083      	sub	sp, #12
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e310:	bf00      	nop
 800e312:	370c      	adds	r7, #12
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr

0800e31c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e31c:	b480      	push	{r7}
 800e31e:	b083      	sub	sp, #12
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e324:	bf00      	nop
 800e326:	370c      	adds	r7, #12
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr

0800e330 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e330:	b480      	push	{r7}
 800e332:	b083      	sub	sp, #12
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e338:	bf00      	nop
 800e33a:	370c      	adds	r7, #12
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr

0800e344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e344:	b480      	push	{r7}
 800e346:	b085      	sub	sp, #20
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	4a43      	ldr	r2, [pc, #268]	@ (800e464 <TIM_Base_SetConfig+0x120>)
 800e358:	4293      	cmp	r3, r2
 800e35a:	d013      	beq.n	800e384 <TIM_Base_SetConfig+0x40>
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e362:	d00f      	beq.n	800e384 <TIM_Base_SetConfig+0x40>
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	4a40      	ldr	r2, [pc, #256]	@ (800e468 <TIM_Base_SetConfig+0x124>)
 800e368:	4293      	cmp	r3, r2
 800e36a:	d00b      	beq.n	800e384 <TIM_Base_SetConfig+0x40>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	4a3f      	ldr	r2, [pc, #252]	@ (800e46c <TIM_Base_SetConfig+0x128>)
 800e370:	4293      	cmp	r3, r2
 800e372:	d007      	beq.n	800e384 <TIM_Base_SetConfig+0x40>
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	4a3e      	ldr	r2, [pc, #248]	@ (800e470 <TIM_Base_SetConfig+0x12c>)
 800e378:	4293      	cmp	r3, r2
 800e37a:	d003      	beq.n	800e384 <TIM_Base_SetConfig+0x40>
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	4a3d      	ldr	r2, [pc, #244]	@ (800e474 <TIM_Base_SetConfig+0x130>)
 800e380:	4293      	cmp	r3, r2
 800e382:	d108      	bne.n	800e396 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e38a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	68fa      	ldr	r2, [r7, #12]
 800e392:	4313      	orrs	r3, r2
 800e394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	4a32      	ldr	r2, [pc, #200]	@ (800e464 <TIM_Base_SetConfig+0x120>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d02b      	beq.n	800e3f6 <TIM_Base_SetConfig+0xb2>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e3a4:	d027      	beq.n	800e3f6 <TIM_Base_SetConfig+0xb2>
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	4a2f      	ldr	r2, [pc, #188]	@ (800e468 <TIM_Base_SetConfig+0x124>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d023      	beq.n	800e3f6 <TIM_Base_SetConfig+0xb2>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	4a2e      	ldr	r2, [pc, #184]	@ (800e46c <TIM_Base_SetConfig+0x128>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d01f      	beq.n	800e3f6 <TIM_Base_SetConfig+0xb2>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	4a2d      	ldr	r2, [pc, #180]	@ (800e470 <TIM_Base_SetConfig+0x12c>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d01b      	beq.n	800e3f6 <TIM_Base_SetConfig+0xb2>
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	4a2c      	ldr	r2, [pc, #176]	@ (800e474 <TIM_Base_SetConfig+0x130>)
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d017      	beq.n	800e3f6 <TIM_Base_SetConfig+0xb2>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	4a2b      	ldr	r2, [pc, #172]	@ (800e478 <TIM_Base_SetConfig+0x134>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d013      	beq.n	800e3f6 <TIM_Base_SetConfig+0xb2>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	4a2a      	ldr	r2, [pc, #168]	@ (800e47c <TIM_Base_SetConfig+0x138>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d00f      	beq.n	800e3f6 <TIM_Base_SetConfig+0xb2>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	4a29      	ldr	r2, [pc, #164]	@ (800e480 <TIM_Base_SetConfig+0x13c>)
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	d00b      	beq.n	800e3f6 <TIM_Base_SetConfig+0xb2>
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	4a28      	ldr	r2, [pc, #160]	@ (800e484 <TIM_Base_SetConfig+0x140>)
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d007      	beq.n	800e3f6 <TIM_Base_SetConfig+0xb2>
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	4a27      	ldr	r2, [pc, #156]	@ (800e488 <TIM_Base_SetConfig+0x144>)
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	d003      	beq.n	800e3f6 <TIM_Base_SetConfig+0xb2>
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	4a26      	ldr	r2, [pc, #152]	@ (800e48c <TIM_Base_SetConfig+0x148>)
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d108      	bne.n	800e408 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e3fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	68db      	ldr	r3, [r3, #12]
 800e402:	68fa      	ldr	r2, [r7, #12]
 800e404:	4313      	orrs	r3, r2
 800e406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	695b      	ldr	r3, [r3, #20]
 800e412:	4313      	orrs	r3, r2
 800e414:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	689a      	ldr	r2, [r3, #8]
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	4a0e      	ldr	r2, [pc, #56]	@ (800e464 <TIM_Base_SetConfig+0x120>)
 800e42a:	4293      	cmp	r3, r2
 800e42c:	d003      	beq.n	800e436 <TIM_Base_SetConfig+0xf2>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	4a10      	ldr	r2, [pc, #64]	@ (800e474 <TIM_Base_SetConfig+0x130>)
 800e432:	4293      	cmp	r3, r2
 800e434:	d103      	bne.n	800e43e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	691a      	ldr	r2, [r3, #16]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f043 0204 	orr.w	r2, r3, #4
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2201      	movs	r2, #1
 800e44e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	68fa      	ldr	r2, [r7, #12]
 800e454:	601a      	str	r2, [r3, #0]
}
 800e456:	bf00      	nop
 800e458:	3714      	adds	r7, #20
 800e45a:	46bd      	mov	sp, r7
 800e45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e460:	4770      	bx	lr
 800e462:	bf00      	nop
 800e464:	40010000 	.word	0x40010000
 800e468:	40000400 	.word	0x40000400
 800e46c:	40000800 	.word	0x40000800
 800e470:	40000c00 	.word	0x40000c00
 800e474:	40010400 	.word	0x40010400
 800e478:	40014000 	.word	0x40014000
 800e47c:	40014400 	.word	0x40014400
 800e480:	40014800 	.word	0x40014800
 800e484:	40001800 	.word	0x40001800
 800e488:	40001c00 	.word	0x40001c00
 800e48c:	40002000 	.word	0x40002000

0800e490 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e490:	b480      	push	{r7}
 800e492:	b087      	sub	sp, #28
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6a1b      	ldr	r3, [r3, #32]
 800e49e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6a1b      	ldr	r3, [r3, #32]
 800e4a4:	f023 0201 	bic.w	r2, r3, #1
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	685b      	ldr	r3, [r3, #4]
 800e4b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	699b      	ldr	r3, [r3, #24]
 800e4b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e4b8:	68fa      	ldr	r2, [r7, #12]
 800e4ba:	4b2b      	ldr	r3, [pc, #172]	@ (800e568 <TIM_OC1_SetConfig+0xd8>)
 800e4bc:	4013      	ands	r3, r2
 800e4be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	f023 0303 	bic.w	r3, r3, #3
 800e4c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	68fa      	ldr	r2, [r7, #12]
 800e4ce:	4313      	orrs	r3, r2
 800e4d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	f023 0302 	bic.w	r3, r3, #2
 800e4d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	689b      	ldr	r3, [r3, #8]
 800e4de:	697a      	ldr	r2, [r7, #20]
 800e4e0:	4313      	orrs	r3, r2
 800e4e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	4a21      	ldr	r2, [pc, #132]	@ (800e56c <TIM_OC1_SetConfig+0xdc>)
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	d003      	beq.n	800e4f4 <TIM_OC1_SetConfig+0x64>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	4a20      	ldr	r2, [pc, #128]	@ (800e570 <TIM_OC1_SetConfig+0xe0>)
 800e4f0:	4293      	cmp	r3, r2
 800e4f2:	d10c      	bne.n	800e50e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	f023 0308 	bic.w	r3, r3, #8
 800e4fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	68db      	ldr	r3, [r3, #12]
 800e500:	697a      	ldr	r2, [r7, #20]
 800e502:	4313      	orrs	r3, r2
 800e504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	f023 0304 	bic.w	r3, r3, #4
 800e50c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	4a16      	ldr	r2, [pc, #88]	@ (800e56c <TIM_OC1_SetConfig+0xdc>)
 800e512:	4293      	cmp	r3, r2
 800e514:	d003      	beq.n	800e51e <TIM_OC1_SetConfig+0x8e>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	4a15      	ldr	r2, [pc, #84]	@ (800e570 <TIM_OC1_SetConfig+0xe0>)
 800e51a:	4293      	cmp	r3, r2
 800e51c:	d111      	bne.n	800e542 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e52c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	695b      	ldr	r3, [r3, #20]
 800e532:	693a      	ldr	r2, [r7, #16]
 800e534:	4313      	orrs	r3, r2
 800e536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	699b      	ldr	r3, [r3, #24]
 800e53c:	693a      	ldr	r2, [r7, #16]
 800e53e:	4313      	orrs	r3, r2
 800e540:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	693a      	ldr	r2, [r7, #16]
 800e546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	68fa      	ldr	r2, [r7, #12]
 800e54c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	685a      	ldr	r2, [r3, #4]
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	697a      	ldr	r2, [r7, #20]
 800e55a:	621a      	str	r2, [r3, #32]
}
 800e55c:	bf00      	nop
 800e55e:	371c      	adds	r7, #28
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr
 800e568:	fffeff8f 	.word	0xfffeff8f
 800e56c:	40010000 	.word	0x40010000
 800e570:	40010400 	.word	0x40010400

0800e574 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e574:	b480      	push	{r7}
 800e576:	b087      	sub	sp, #28
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6a1b      	ldr	r3, [r3, #32]
 800e582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6a1b      	ldr	r3, [r3, #32]
 800e588:	f023 0210 	bic.w	r2, r3, #16
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	685b      	ldr	r3, [r3, #4]
 800e594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	699b      	ldr	r3, [r3, #24]
 800e59a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e59c:	68fa      	ldr	r2, [r7, #12]
 800e59e:	4b2e      	ldr	r3, [pc, #184]	@ (800e658 <TIM_OC2_SetConfig+0xe4>)
 800e5a0:	4013      	ands	r3, r2
 800e5a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e5aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	021b      	lsls	r3, r3, #8
 800e5b2:	68fa      	ldr	r2, [r7, #12]
 800e5b4:	4313      	orrs	r3, r2
 800e5b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	f023 0320 	bic.w	r3, r3, #32
 800e5be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	689b      	ldr	r3, [r3, #8]
 800e5c4:	011b      	lsls	r3, r3, #4
 800e5c6:	697a      	ldr	r2, [r7, #20]
 800e5c8:	4313      	orrs	r3, r2
 800e5ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	4a23      	ldr	r2, [pc, #140]	@ (800e65c <TIM_OC2_SetConfig+0xe8>)
 800e5d0:	4293      	cmp	r3, r2
 800e5d2:	d003      	beq.n	800e5dc <TIM_OC2_SetConfig+0x68>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	4a22      	ldr	r2, [pc, #136]	@ (800e660 <TIM_OC2_SetConfig+0xec>)
 800e5d8:	4293      	cmp	r3, r2
 800e5da:	d10d      	bne.n	800e5f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e5e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	68db      	ldr	r3, [r3, #12]
 800e5e8:	011b      	lsls	r3, r3, #4
 800e5ea:	697a      	ldr	r2, [r7, #20]
 800e5ec:	4313      	orrs	r3, r2
 800e5ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e5f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	4a18      	ldr	r2, [pc, #96]	@ (800e65c <TIM_OC2_SetConfig+0xe8>)
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d003      	beq.n	800e608 <TIM_OC2_SetConfig+0x94>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	4a17      	ldr	r2, [pc, #92]	@ (800e660 <TIM_OC2_SetConfig+0xec>)
 800e604:	4293      	cmp	r3, r2
 800e606:	d113      	bne.n	800e630 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e60e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e616:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	695b      	ldr	r3, [r3, #20]
 800e61c:	009b      	lsls	r3, r3, #2
 800e61e:	693a      	ldr	r2, [r7, #16]
 800e620:	4313      	orrs	r3, r2
 800e622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	699b      	ldr	r3, [r3, #24]
 800e628:	009b      	lsls	r3, r3, #2
 800e62a:	693a      	ldr	r2, [r7, #16]
 800e62c:	4313      	orrs	r3, r2
 800e62e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	693a      	ldr	r2, [r7, #16]
 800e634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	68fa      	ldr	r2, [r7, #12]
 800e63a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	685a      	ldr	r2, [r3, #4]
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	697a      	ldr	r2, [r7, #20]
 800e648:	621a      	str	r2, [r3, #32]
}
 800e64a:	bf00      	nop
 800e64c:	371c      	adds	r7, #28
 800e64e:	46bd      	mov	sp, r7
 800e650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e654:	4770      	bx	lr
 800e656:	bf00      	nop
 800e658:	feff8fff 	.word	0xfeff8fff
 800e65c:	40010000 	.word	0x40010000
 800e660:	40010400 	.word	0x40010400

0800e664 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e664:	b480      	push	{r7}
 800e666:	b087      	sub	sp, #28
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6a1b      	ldr	r3, [r3, #32]
 800e672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6a1b      	ldr	r3, [r3, #32]
 800e678:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	685b      	ldr	r3, [r3, #4]
 800e684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	69db      	ldr	r3, [r3, #28]
 800e68a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e68c:	68fa      	ldr	r2, [r7, #12]
 800e68e:	4b2d      	ldr	r3, [pc, #180]	@ (800e744 <TIM_OC3_SetConfig+0xe0>)
 800e690:	4013      	ands	r3, r2
 800e692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f023 0303 	bic.w	r3, r3, #3
 800e69a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	68fa      	ldr	r2, [r7, #12]
 800e6a2:	4313      	orrs	r3, r2
 800e6a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e6ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	689b      	ldr	r3, [r3, #8]
 800e6b2:	021b      	lsls	r3, r3, #8
 800e6b4:	697a      	ldr	r2, [r7, #20]
 800e6b6:	4313      	orrs	r3, r2
 800e6b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	4a22      	ldr	r2, [pc, #136]	@ (800e748 <TIM_OC3_SetConfig+0xe4>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d003      	beq.n	800e6ca <TIM_OC3_SetConfig+0x66>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	4a21      	ldr	r2, [pc, #132]	@ (800e74c <TIM_OC3_SetConfig+0xe8>)
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d10d      	bne.n	800e6e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e6d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	68db      	ldr	r3, [r3, #12]
 800e6d6:	021b      	lsls	r3, r3, #8
 800e6d8:	697a      	ldr	r2, [r7, #20]
 800e6da:	4313      	orrs	r3, r2
 800e6dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e6e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	4a17      	ldr	r2, [pc, #92]	@ (800e748 <TIM_OC3_SetConfig+0xe4>)
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d003      	beq.n	800e6f6 <TIM_OC3_SetConfig+0x92>
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	4a16      	ldr	r2, [pc, #88]	@ (800e74c <TIM_OC3_SetConfig+0xe8>)
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d113      	bne.n	800e71e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e6fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	695b      	ldr	r3, [r3, #20]
 800e70a:	011b      	lsls	r3, r3, #4
 800e70c:	693a      	ldr	r2, [r7, #16]
 800e70e:	4313      	orrs	r3, r2
 800e710:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	699b      	ldr	r3, [r3, #24]
 800e716:	011b      	lsls	r3, r3, #4
 800e718:	693a      	ldr	r2, [r7, #16]
 800e71a:	4313      	orrs	r3, r2
 800e71c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	693a      	ldr	r2, [r7, #16]
 800e722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	68fa      	ldr	r2, [r7, #12]
 800e728:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	685a      	ldr	r2, [r3, #4]
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	697a      	ldr	r2, [r7, #20]
 800e736:	621a      	str	r2, [r3, #32]
}
 800e738:	bf00      	nop
 800e73a:	371c      	adds	r7, #28
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr
 800e744:	fffeff8f 	.word	0xfffeff8f
 800e748:	40010000 	.word	0x40010000
 800e74c:	40010400 	.word	0x40010400

0800e750 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e750:	b480      	push	{r7}
 800e752:	b087      	sub	sp, #28
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6a1b      	ldr	r3, [r3, #32]
 800e75e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	6a1b      	ldr	r3, [r3, #32]
 800e764:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	69db      	ldr	r3, [r3, #28]
 800e776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e778:	68fa      	ldr	r2, [r7, #12]
 800e77a:	4b1e      	ldr	r3, [pc, #120]	@ (800e7f4 <TIM_OC4_SetConfig+0xa4>)
 800e77c:	4013      	ands	r3, r2
 800e77e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	021b      	lsls	r3, r3, #8
 800e78e:	68fa      	ldr	r2, [r7, #12]
 800e790:	4313      	orrs	r3, r2
 800e792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e79a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	689b      	ldr	r3, [r3, #8]
 800e7a0:	031b      	lsls	r3, r3, #12
 800e7a2:	693a      	ldr	r2, [r7, #16]
 800e7a4:	4313      	orrs	r3, r2
 800e7a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	4a13      	ldr	r2, [pc, #76]	@ (800e7f8 <TIM_OC4_SetConfig+0xa8>)
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	d003      	beq.n	800e7b8 <TIM_OC4_SetConfig+0x68>
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	4a12      	ldr	r2, [pc, #72]	@ (800e7fc <TIM_OC4_SetConfig+0xac>)
 800e7b4:	4293      	cmp	r3, r2
 800e7b6:	d109      	bne.n	800e7cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e7be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	695b      	ldr	r3, [r3, #20]
 800e7c4:	019b      	lsls	r3, r3, #6
 800e7c6:	697a      	ldr	r2, [r7, #20]
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	697a      	ldr	r2, [r7, #20]
 800e7d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	68fa      	ldr	r2, [r7, #12]
 800e7d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	685a      	ldr	r2, [r3, #4]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	693a      	ldr	r2, [r7, #16]
 800e7e4:	621a      	str	r2, [r3, #32]
}
 800e7e6:	bf00      	nop
 800e7e8:	371c      	adds	r7, #28
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f0:	4770      	bx	lr
 800e7f2:	bf00      	nop
 800e7f4:	feff8fff 	.word	0xfeff8fff
 800e7f8:	40010000 	.word	0x40010000
 800e7fc:	40010400 	.word	0x40010400

0800e800 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e800:	b480      	push	{r7}
 800e802:	b087      	sub	sp, #28
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6a1b      	ldr	r3, [r3, #32]
 800e80e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6a1b      	ldr	r3, [r3, #32]
 800e814:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	685b      	ldr	r3, [r3, #4]
 800e820:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e828:	68fa      	ldr	r2, [r7, #12]
 800e82a:	4b1b      	ldr	r3, [pc, #108]	@ (800e898 <TIM_OC5_SetConfig+0x98>)
 800e82c:	4013      	ands	r3, r2
 800e82e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	68fa      	ldr	r2, [r7, #12]
 800e836:	4313      	orrs	r3, r2
 800e838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e83a:	693b      	ldr	r3, [r7, #16]
 800e83c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e840:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	689b      	ldr	r3, [r3, #8]
 800e846:	041b      	lsls	r3, r3, #16
 800e848:	693a      	ldr	r2, [r7, #16]
 800e84a:	4313      	orrs	r3, r2
 800e84c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	4a12      	ldr	r2, [pc, #72]	@ (800e89c <TIM_OC5_SetConfig+0x9c>)
 800e852:	4293      	cmp	r3, r2
 800e854:	d003      	beq.n	800e85e <TIM_OC5_SetConfig+0x5e>
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	4a11      	ldr	r2, [pc, #68]	@ (800e8a0 <TIM_OC5_SetConfig+0xa0>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d109      	bne.n	800e872 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e864:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	695b      	ldr	r3, [r3, #20]
 800e86a:	021b      	lsls	r3, r3, #8
 800e86c:	697a      	ldr	r2, [r7, #20]
 800e86e:	4313      	orrs	r3, r2
 800e870:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	697a      	ldr	r2, [r7, #20]
 800e876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	68fa      	ldr	r2, [r7, #12]
 800e87c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	685a      	ldr	r2, [r3, #4]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	693a      	ldr	r2, [r7, #16]
 800e88a:	621a      	str	r2, [r3, #32]
}
 800e88c:	bf00      	nop
 800e88e:	371c      	adds	r7, #28
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr
 800e898:	fffeff8f 	.word	0xfffeff8f
 800e89c:	40010000 	.word	0x40010000
 800e8a0:	40010400 	.word	0x40010400

0800e8a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b087      	sub	sp, #28
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6a1b      	ldr	r3, [r3, #32]
 800e8b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6a1b      	ldr	r3, [r3, #32]
 800e8b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	685b      	ldr	r3, [r3, #4]
 800e8c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e8cc:	68fa      	ldr	r2, [r7, #12]
 800e8ce:	4b1c      	ldr	r3, [pc, #112]	@ (800e940 <TIM_OC6_SetConfig+0x9c>)
 800e8d0:	4013      	ands	r3, r2
 800e8d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	021b      	lsls	r3, r3, #8
 800e8da:	68fa      	ldr	r2, [r7, #12]
 800e8dc:	4313      	orrs	r3, r2
 800e8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e8e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	689b      	ldr	r3, [r3, #8]
 800e8ec:	051b      	lsls	r3, r3, #20
 800e8ee:	693a      	ldr	r2, [r7, #16]
 800e8f0:	4313      	orrs	r3, r2
 800e8f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	4a13      	ldr	r2, [pc, #76]	@ (800e944 <TIM_OC6_SetConfig+0xa0>)
 800e8f8:	4293      	cmp	r3, r2
 800e8fa:	d003      	beq.n	800e904 <TIM_OC6_SetConfig+0x60>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	4a12      	ldr	r2, [pc, #72]	@ (800e948 <TIM_OC6_SetConfig+0xa4>)
 800e900:	4293      	cmp	r3, r2
 800e902:	d109      	bne.n	800e918 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e90a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	695b      	ldr	r3, [r3, #20]
 800e910:	029b      	lsls	r3, r3, #10
 800e912:	697a      	ldr	r2, [r7, #20]
 800e914:	4313      	orrs	r3, r2
 800e916:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	697a      	ldr	r2, [r7, #20]
 800e91c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	685a      	ldr	r2, [r3, #4]
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	693a      	ldr	r2, [r7, #16]
 800e930:	621a      	str	r2, [r3, #32]
}
 800e932:	bf00      	nop
 800e934:	371c      	adds	r7, #28
 800e936:	46bd      	mov	sp, r7
 800e938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93c:	4770      	bx	lr
 800e93e:	bf00      	nop
 800e940:	feff8fff 	.word	0xfeff8fff
 800e944:	40010000 	.word	0x40010000
 800e948:	40010400 	.word	0x40010400

0800e94c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b087      	sub	sp, #28
 800e950:	af00      	add	r7, sp, #0
 800e952:	60f8      	str	r0, [r7, #12]
 800e954:	60b9      	str	r1, [r7, #8]
 800e956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	6a1b      	ldr	r3, [r3, #32]
 800e95c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	6a1b      	ldr	r3, [r3, #32]
 800e962:	f023 0201 	bic.w	r2, r3, #1
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	699b      	ldr	r3, [r3, #24]
 800e96e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e970:	693b      	ldr	r3, [r7, #16]
 800e972:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	011b      	lsls	r3, r3, #4
 800e97c:	693a      	ldr	r2, [r7, #16]
 800e97e:	4313      	orrs	r3, r2
 800e980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	f023 030a 	bic.w	r3, r3, #10
 800e988:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e98a:	697a      	ldr	r2, [r7, #20]
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	4313      	orrs	r3, r2
 800e990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	693a      	ldr	r2, [r7, #16]
 800e996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	697a      	ldr	r2, [r7, #20]
 800e99c:	621a      	str	r2, [r3, #32]
}
 800e99e:	bf00      	nop
 800e9a0:	371c      	adds	r7, #28
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a8:	4770      	bx	lr

0800e9aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e9aa:	b480      	push	{r7}
 800e9ac:	b087      	sub	sp, #28
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	60f8      	str	r0, [r7, #12]
 800e9b2:	60b9      	str	r1, [r7, #8]
 800e9b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	6a1b      	ldr	r3, [r3, #32]
 800e9ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	6a1b      	ldr	r3, [r3, #32]
 800e9c0:	f023 0210 	bic.w	r2, r3, #16
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	699b      	ldr	r3, [r3, #24]
 800e9cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e9d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	031b      	lsls	r3, r3, #12
 800e9da:	693a      	ldr	r2, [r7, #16]
 800e9dc:	4313      	orrs	r3, r2
 800e9de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e9e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	011b      	lsls	r3, r3, #4
 800e9ec:	697a      	ldr	r2, [r7, #20]
 800e9ee:	4313      	orrs	r3, r2
 800e9f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	693a      	ldr	r2, [r7, #16]
 800e9f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	697a      	ldr	r2, [r7, #20]
 800e9fc:	621a      	str	r2, [r3, #32]
}
 800e9fe:	bf00      	nop
 800ea00:	371c      	adds	r7, #28
 800ea02:	46bd      	mov	sp, r7
 800ea04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea08:	4770      	bx	lr

0800ea0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ea0a:	b480      	push	{r7}
 800ea0c:	b085      	sub	sp, #20
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
 800ea12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	689b      	ldr	r3, [r3, #8]
 800ea18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ea22:	683a      	ldr	r2, [r7, #0]
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	4313      	orrs	r3, r2
 800ea28:	f043 0307 	orr.w	r3, r3, #7
 800ea2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	68fa      	ldr	r2, [r7, #12]
 800ea32:	609a      	str	r2, [r3, #8]
}
 800ea34:	bf00      	nop
 800ea36:	3714      	adds	r7, #20
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3e:	4770      	bx	lr

0800ea40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ea40:	b480      	push	{r7}
 800ea42:	b087      	sub	sp, #28
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	60b9      	str	r1, [r7, #8]
 800ea4a:	607a      	str	r2, [r7, #4]
 800ea4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	689b      	ldr	r3, [r3, #8]
 800ea52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ea5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	021a      	lsls	r2, r3, #8
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	431a      	orrs	r2, r3
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	4313      	orrs	r3, r2
 800ea68:	697a      	ldr	r2, [r7, #20]
 800ea6a:	4313      	orrs	r3, r2
 800ea6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	697a      	ldr	r2, [r7, #20]
 800ea72:	609a      	str	r2, [r3, #8]
}
 800ea74:	bf00      	nop
 800ea76:	371c      	adds	r7, #28
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr

0800ea80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ea80:	b480      	push	{r7}
 800ea82:	b085      	sub	sp, #20
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
 800ea88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d101      	bne.n	800ea98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ea94:	2302      	movs	r3, #2
 800ea96:	e06d      	b.n	800eb74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2201      	movs	r2, #1
 800ea9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2202      	movs	r2, #2
 800eaa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	685b      	ldr	r3, [r3, #4]
 800eaae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	689b      	ldr	r3, [r3, #8]
 800eab6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	4a30      	ldr	r2, [pc, #192]	@ (800eb80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800eabe:	4293      	cmp	r3, r2
 800eac0:	d004      	beq.n	800eacc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	4a2f      	ldr	r2, [pc, #188]	@ (800eb84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800eac8:	4293      	cmp	r3, r2
 800eaca:	d108      	bne.n	800eade <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ead2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	68fa      	ldr	r2, [r7, #12]
 800eada:	4313      	orrs	r3, r2
 800eadc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eae4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	68fa      	ldr	r2, [r7, #12]
 800eaec:	4313      	orrs	r3, r2
 800eaee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	68fa      	ldr	r2, [r7, #12]
 800eaf6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4a20      	ldr	r2, [pc, #128]	@ (800eb80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800eafe:	4293      	cmp	r3, r2
 800eb00:	d022      	beq.n	800eb48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb0a:	d01d      	beq.n	800eb48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	4a1d      	ldr	r2, [pc, #116]	@ (800eb88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800eb12:	4293      	cmp	r3, r2
 800eb14:	d018      	beq.n	800eb48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	4a1c      	ldr	r2, [pc, #112]	@ (800eb8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800eb1c:	4293      	cmp	r3, r2
 800eb1e:	d013      	beq.n	800eb48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	4a1a      	ldr	r2, [pc, #104]	@ (800eb90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800eb26:	4293      	cmp	r3, r2
 800eb28:	d00e      	beq.n	800eb48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	4a15      	ldr	r2, [pc, #84]	@ (800eb84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800eb30:	4293      	cmp	r3, r2
 800eb32:	d009      	beq.n	800eb48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	4a16      	ldr	r2, [pc, #88]	@ (800eb94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d004      	beq.n	800eb48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	4a15      	ldr	r2, [pc, #84]	@ (800eb98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eb44:	4293      	cmp	r3, r2
 800eb46:	d10c      	bne.n	800eb62 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	689b      	ldr	r3, [r3, #8]
 800eb54:	68ba      	ldr	r2, [r7, #8]
 800eb56:	4313      	orrs	r3, r2
 800eb58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	68ba      	ldr	r2, [r7, #8]
 800eb60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2201      	movs	r2, #1
 800eb66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800eb72:	2300      	movs	r3, #0
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3714      	adds	r7, #20
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7e:	4770      	bx	lr
 800eb80:	40010000 	.word	0x40010000
 800eb84:	40010400 	.word	0x40010400
 800eb88:	40000400 	.word	0x40000400
 800eb8c:	40000800 	.word	0x40000800
 800eb90:	40000c00 	.word	0x40000c00
 800eb94:	40014000 	.word	0x40014000
 800eb98:	40001800 	.word	0x40001800

0800eb9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b085      	sub	sp, #20
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800eba6:	2300      	movs	r3, #0
 800eba8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ebb0:	2b01      	cmp	r3, #1
 800ebb2:	d101      	bne.n	800ebb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ebb4:	2302      	movs	r3, #2
 800ebb6:	e065      	b.n	800ec84 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2201      	movs	r2, #1
 800ebbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	68db      	ldr	r3, [r3, #12]
 800ebca:	4313      	orrs	r3, r2
 800ebcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	689b      	ldr	r3, [r3, #8]
 800ebd8:	4313      	orrs	r3, r2
 800ebda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	685b      	ldr	r3, [r3, #4]
 800ebe6:	4313      	orrs	r3, r2
 800ebe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	4313      	orrs	r3, r2
 800ebf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	691b      	ldr	r3, [r3, #16]
 800ec02:	4313      	orrs	r3, r2
 800ec04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	695b      	ldr	r3, [r3, #20]
 800ec10:	4313      	orrs	r3, r2
 800ec12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	699b      	ldr	r3, [r3, #24]
 800ec2c:	041b      	lsls	r3, r3, #16
 800ec2e:	4313      	orrs	r3, r2
 800ec30:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	4a16      	ldr	r2, [pc, #88]	@ (800ec90 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	d004      	beq.n	800ec46 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	4a14      	ldr	r2, [pc, #80]	@ (800ec94 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ec42:	4293      	cmp	r3, r2
 800ec44:	d115      	bne.n	800ec72 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec50:	051b      	lsls	r3, r3, #20
 800ec52:	4313      	orrs	r3, r2
 800ec54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	69db      	ldr	r3, [r3, #28]
 800ec60:	4313      	orrs	r3, r2
 800ec62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	6a1b      	ldr	r3, [r3, #32]
 800ec6e:	4313      	orrs	r3, r2
 800ec70:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	68fa      	ldr	r2, [r7, #12]
 800ec78:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ec82:	2300      	movs	r3, #0
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	3714      	adds	r7, #20
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8e:	4770      	bx	lr
 800ec90:	40010000 	.word	0x40010000
 800ec94:	40010400 	.word	0x40010400

0800ec98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b083      	sub	sp, #12
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eca0:	bf00      	nop
 800eca2:	370c      	adds	r7, #12
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr

0800ecac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ecb4:	bf00      	nop
 800ecb6:	370c      	adds	r7, #12
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr

0800ecc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b083      	sub	sp, #12
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ecc8:	bf00      	nop
 800ecca:	370c      	adds	r7, #12
 800eccc:	46bd      	mov	sp, r7
 800ecce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd2:	4770      	bx	lr

0800ecd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d101      	bne.n	800ece6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ece2:	2301      	movs	r3, #1
 800ece4:	e040      	b.n	800ed68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d106      	bne.n	800ecfc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ecf6:	6878      	ldr	r0, [r7, #4]
 800ecf8:	f7f5 ff6c 	bl	8004bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2224      	movs	r2, #36	@ 0x24
 800ed00:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	f022 0201 	bic.w	r2, r2, #1
 800ed10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d002      	beq.n	800ed20 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f000 ffb6 	bl	800fc8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f000 fd4f 	bl	800f7c4 <UART_SetConfig>
 800ed26:	4603      	mov	r3, r0
 800ed28:	2b01      	cmp	r3, #1
 800ed2a:	d101      	bne.n	800ed30 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	e01b      	b.n	800ed68 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	685a      	ldr	r2, [r3, #4]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ed3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	689a      	ldr	r2, [r3, #8]
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ed4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	f042 0201 	orr.w	r2, r2, #1
 800ed5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f001 f835 	bl	800fdd0 <UART_CheckIdleState>
 800ed66:	4603      	mov	r3, r0
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3708      	adds	r7, #8
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}

0800ed70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b08a      	sub	sp, #40	@ 0x28
 800ed74:	af02      	add	r7, sp, #8
 800ed76:	60f8      	str	r0, [r7, #12]
 800ed78:	60b9      	str	r1, [r7, #8]
 800ed7a:	603b      	str	r3, [r7, #0]
 800ed7c:	4613      	mov	r3, r2
 800ed7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed84:	2b20      	cmp	r3, #32
 800ed86:	d177      	bne.n	800ee78 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d002      	beq.n	800ed94 <HAL_UART_Transmit+0x24>
 800ed8e:	88fb      	ldrh	r3, [r7, #6]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d101      	bne.n	800ed98 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ed94:	2301      	movs	r3, #1
 800ed96:	e070      	b.n	800ee7a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	2221      	movs	r2, #33	@ 0x21
 800eda4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eda6:	f7f7 f8af 	bl	8005f08 <HAL_GetTick>
 800edaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	88fa      	ldrh	r2, [r7, #6]
 800edb0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	88fa      	ldrh	r2, [r7, #6]
 800edb8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	689b      	ldr	r3, [r3, #8]
 800edc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800edc4:	d108      	bne.n	800edd8 <HAL_UART_Transmit+0x68>
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	691b      	ldr	r3, [r3, #16]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d104      	bne.n	800edd8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800edce:	2300      	movs	r3, #0
 800edd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	61bb      	str	r3, [r7, #24]
 800edd6:	e003      	b.n	800ede0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eddc:	2300      	movs	r3, #0
 800edde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ede0:	e02f      	b.n	800ee42 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	9300      	str	r3, [sp, #0]
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	2200      	movs	r2, #0
 800edea:	2180      	movs	r1, #128	@ 0x80
 800edec:	68f8      	ldr	r0, [r7, #12]
 800edee:	f001 f846 	bl	800fe7e <UART_WaitOnFlagUntilTimeout>
 800edf2:	4603      	mov	r3, r0
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d004      	beq.n	800ee02 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	2220      	movs	r2, #32
 800edfc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800edfe:	2303      	movs	r3, #3
 800ee00:	e03b      	b.n	800ee7a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d10b      	bne.n	800ee20 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ee08:	69bb      	ldr	r3, [r7, #24]
 800ee0a:	881b      	ldrh	r3, [r3, #0]
 800ee0c:	461a      	mov	r2, r3
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ee16:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ee18:	69bb      	ldr	r3, [r7, #24]
 800ee1a:	3302      	adds	r3, #2
 800ee1c:	61bb      	str	r3, [r7, #24]
 800ee1e:	e007      	b.n	800ee30 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ee20:	69fb      	ldr	r3, [r7, #28]
 800ee22:	781a      	ldrb	r2, [r3, #0]
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ee2a:	69fb      	ldr	r3, [r7, #28]
 800ee2c:	3301      	adds	r3, #1
 800ee2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ee36:	b29b      	uxth	r3, r3
 800ee38:	3b01      	subs	r3, #1
 800ee3a:	b29a      	uxth	r2, r3
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ee48:	b29b      	uxth	r3, r3
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d1c9      	bne.n	800ede2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	9300      	str	r3, [sp, #0]
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	2200      	movs	r2, #0
 800ee56:	2140      	movs	r1, #64	@ 0x40
 800ee58:	68f8      	ldr	r0, [r7, #12]
 800ee5a:	f001 f810 	bl	800fe7e <UART_WaitOnFlagUntilTimeout>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d004      	beq.n	800ee6e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	2220      	movs	r2, #32
 800ee68:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800ee6a:	2303      	movs	r3, #3
 800ee6c:	e005      	b.n	800ee7a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	2220      	movs	r2, #32
 800ee72:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800ee74:	2300      	movs	r3, #0
 800ee76:	e000      	b.n	800ee7a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800ee78:	2302      	movs	r3, #2
  }
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3720      	adds	r7, #32
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}

0800ee82 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ee82:	b580      	push	{r7, lr}
 800ee84:	b08a      	sub	sp, #40	@ 0x28
 800ee86:	af02      	add	r7, sp, #8
 800ee88:	60f8      	str	r0, [r7, #12]
 800ee8a:	60b9      	str	r1, [r7, #8]
 800ee8c:	603b      	str	r3, [r7, #0]
 800ee8e:	4613      	mov	r3, r2
 800ee90:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee98:	2b20      	cmp	r3, #32
 800ee9a:	f040 80b5 	bne.w	800f008 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d002      	beq.n	800eeaa <HAL_UART_Receive+0x28>
 800eea4:	88fb      	ldrh	r3, [r7, #6]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d101      	bne.n	800eeae <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800eeaa:	2301      	movs	r3, #1
 800eeac:	e0ad      	b.n	800f00a <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2222      	movs	r2, #34	@ 0x22
 800eeba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	2200      	movs	r2, #0
 800eec2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eec4:	f7f7 f820 	bl	8005f08 <HAL_GetTick>
 800eec8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	88fa      	ldrh	r2, [r7, #6]
 800eece:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	88fa      	ldrh	r2, [r7, #6]
 800eed6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eee2:	d10e      	bne.n	800ef02 <HAL_UART_Receive+0x80>
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	691b      	ldr	r3, [r3, #16]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d105      	bne.n	800eef8 <HAL_UART_Receive+0x76>
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800eef2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800eef6:	e02d      	b.n	800ef54 <HAL_UART_Receive+0xd2>
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	22ff      	movs	r2, #255	@ 0xff
 800eefc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ef00:	e028      	b.n	800ef54 <HAL_UART_Receive+0xd2>
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	689b      	ldr	r3, [r3, #8]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d10d      	bne.n	800ef26 <HAL_UART_Receive+0xa4>
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	691b      	ldr	r3, [r3, #16]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d104      	bne.n	800ef1c <HAL_UART_Receive+0x9a>
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	22ff      	movs	r2, #255	@ 0xff
 800ef16:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ef1a:	e01b      	b.n	800ef54 <HAL_UART_Receive+0xd2>
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	227f      	movs	r2, #127	@ 0x7f
 800ef20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ef24:	e016      	b.n	800ef54 <HAL_UART_Receive+0xd2>
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	689b      	ldr	r3, [r3, #8]
 800ef2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ef2e:	d10d      	bne.n	800ef4c <HAL_UART_Receive+0xca>
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	691b      	ldr	r3, [r3, #16]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d104      	bne.n	800ef42 <HAL_UART_Receive+0xc0>
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	227f      	movs	r2, #127	@ 0x7f
 800ef3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ef40:	e008      	b.n	800ef54 <HAL_UART_Receive+0xd2>
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	223f      	movs	r2, #63	@ 0x3f
 800ef46:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ef4a:	e003      	b.n	800ef54 <HAL_UART_Receive+0xd2>
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ef5a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	689b      	ldr	r3, [r3, #8]
 800ef60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ef64:	d108      	bne.n	800ef78 <HAL_UART_Receive+0xf6>
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	691b      	ldr	r3, [r3, #16]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d104      	bne.n	800ef78 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	61bb      	str	r3, [r7, #24]
 800ef76:	e003      	b.n	800ef80 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ef80:	e036      	b.n	800eff0 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	9300      	str	r3, [sp, #0]
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	2120      	movs	r1, #32
 800ef8c:	68f8      	ldr	r0, [r7, #12]
 800ef8e:	f000 ff76 	bl	800fe7e <UART_WaitOnFlagUntilTimeout>
 800ef92:	4603      	mov	r3, r0
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d005      	beq.n	800efa4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	2220      	movs	r2, #32
 800ef9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800efa0:	2303      	movs	r3, #3
 800efa2:	e032      	b.n	800f00a <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800efa4:	69fb      	ldr	r3, [r7, #28]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d10c      	bne.n	800efc4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efb0:	b29a      	uxth	r2, r3
 800efb2:	8a7b      	ldrh	r3, [r7, #18]
 800efb4:	4013      	ands	r3, r2
 800efb6:	b29a      	uxth	r2, r3
 800efb8:	69bb      	ldr	r3, [r7, #24]
 800efba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800efbc:	69bb      	ldr	r3, [r7, #24]
 800efbe:	3302      	adds	r3, #2
 800efc0:	61bb      	str	r3, [r7, #24]
 800efc2:	e00c      	b.n	800efde <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efca:	b2da      	uxtb	r2, r3
 800efcc:	8a7b      	ldrh	r3, [r7, #18]
 800efce:	b2db      	uxtb	r3, r3
 800efd0:	4013      	ands	r3, r2
 800efd2:	b2da      	uxtb	r2, r3
 800efd4:	69fb      	ldr	r3, [r7, #28]
 800efd6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800efd8:	69fb      	ldr	r3, [r7, #28]
 800efda:	3301      	adds	r3, #1
 800efdc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800efe4:	b29b      	uxth	r3, r3
 800efe6:	3b01      	subs	r3, #1
 800efe8:	b29a      	uxth	r2, r3
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800eff6:	b29b      	uxth	r3, r3
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d1c2      	bne.n	800ef82 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	2220      	movs	r2, #32
 800f000:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800f004:	2300      	movs	r3, #0
 800f006:	e000      	b.n	800f00a <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800f008:	2302      	movs	r3, #2
  }
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3720      	adds	r7, #32
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}

0800f012 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f012:	b580      	push	{r7, lr}
 800f014:	b08a      	sub	sp, #40	@ 0x28
 800f016:	af00      	add	r7, sp, #0
 800f018:	60f8      	str	r0, [r7, #12]
 800f01a:	60b9      	str	r1, [r7, #8]
 800f01c:	4613      	mov	r3, r2
 800f01e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f026:	2b20      	cmp	r3, #32
 800f028:	d132      	bne.n	800f090 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d002      	beq.n	800f036 <HAL_UART_Receive_DMA+0x24>
 800f030:	88fb      	ldrh	r3, [r7, #6]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d101      	bne.n	800f03a <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f036:	2301      	movs	r3, #1
 800f038:	e02b      	b.n	800f092 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	2200      	movs	r2, #0
 800f03e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	685b      	ldr	r3, [r3, #4]
 800f046:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d018      	beq.n	800f080 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	e853 3f00 	ldrex	r3, [r3]
 800f05a:	613b      	str	r3, [r7, #16]
   return(result);
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f062:	627b      	str	r3, [r7, #36]	@ 0x24
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	461a      	mov	r2, r3
 800f06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f06c:	623b      	str	r3, [r7, #32]
 800f06e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f070:	69f9      	ldr	r1, [r7, #28]
 800f072:	6a3a      	ldr	r2, [r7, #32]
 800f074:	e841 2300 	strex	r3, r2, [r1]
 800f078:	61bb      	str	r3, [r7, #24]
   return(result);
 800f07a:	69bb      	ldr	r3, [r7, #24]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d1e6      	bne.n	800f04e <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f080:	88fb      	ldrh	r3, [r7, #6]
 800f082:	461a      	mov	r2, r3
 800f084:	68b9      	ldr	r1, [r7, #8]
 800f086:	68f8      	ldr	r0, [r7, #12]
 800f088:	f000 ff66 	bl	800ff58 <UART_Start_Receive_DMA>
 800f08c:	4603      	mov	r3, r0
 800f08e:	e000      	b.n	800f092 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800f090:	2302      	movs	r3, #2
  }
}
 800f092:	4618      	mov	r0, r3
 800f094:	3728      	adds	r7, #40	@ 0x28
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}

0800f09a <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800f09a:	b580      	push	{r7, lr}
 800f09c:	b090      	sub	sp, #64	@ 0x40
 800f09e:	af00      	add	r7, sp, #0
 800f0a0:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0ae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	689b      	ldr	r3, [r3, #8]
 800f0b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0ba:	2b80      	cmp	r3, #128	@ 0x80
 800f0bc:	d139      	bne.n	800f132 <HAL_UART_DMAStop+0x98>
 800f0be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0c0:	2b21      	cmp	r3, #33	@ 0x21
 800f0c2:	d136      	bne.n	800f132 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	3308      	adds	r3, #8
 800f0ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0cc:	6a3b      	ldr	r3, [r7, #32]
 800f0ce:	e853 3f00 	ldrex	r3, [r3]
 800f0d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800f0d4:	69fb      	ldr	r3, [r7, #28]
 800f0d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f0da:	637b      	str	r3, [r7, #52]	@ 0x34
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	3308      	adds	r3, #8
 800f0e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f0e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f0e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f0ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f0ec:	e841 2300 	strex	r3, r2, [r1]
 800f0f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d1e5      	bne.n	800f0c4 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d015      	beq.n	800f12c <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f104:	4618      	mov	r0, r3
 800f106:	f7f7 fd81 	bl	8006c0c <HAL_DMA_Abort>
 800f10a:	4603      	mov	r3, r0
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d00d      	beq.n	800f12c <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f114:	4618      	mov	r0, r3
 800f116:	f7f7 ff95 	bl	8007044 <HAL_DMA_GetError>
 800f11a:	4603      	mov	r3, r0
 800f11c:	2b20      	cmp	r3, #32
 800f11e:	d105      	bne.n	800f12c <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2210      	movs	r2, #16
 800f124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f128:	2303      	movs	r3, #3
 800f12a:	e044      	b.n	800f1b6 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f000 ffb3 	bl	8010098 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	689b      	ldr	r3, [r3, #8]
 800f138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f13c:	2b40      	cmp	r3, #64	@ 0x40
 800f13e:	d139      	bne.n	800f1b4 <HAL_UART_DMAStop+0x11a>
 800f140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f142:	2b22      	cmp	r3, #34	@ 0x22
 800f144:	d136      	bne.n	800f1b4 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	3308      	adds	r3, #8
 800f14c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	e853 3f00 	ldrex	r3, [r3]
 800f154:	60bb      	str	r3, [r7, #8]
   return(result);
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f15c:	633b      	str	r3, [r7, #48]	@ 0x30
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	3308      	adds	r3, #8
 800f164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f166:	61ba      	str	r2, [r7, #24]
 800f168:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f16a:	6979      	ldr	r1, [r7, #20]
 800f16c:	69ba      	ldr	r2, [r7, #24]
 800f16e:	e841 2300 	strex	r3, r2, [r1]
 800f172:	613b      	str	r3, [r7, #16]
   return(result);
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d1e5      	bne.n	800f146 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d015      	beq.n	800f1ae <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f186:	4618      	mov	r0, r3
 800f188:	f7f7 fd40 	bl	8006c0c <HAL_DMA_Abort>
 800f18c:	4603      	mov	r3, r0
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d00d      	beq.n	800f1ae <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f196:	4618      	mov	r0, r3
 800f198:	f7f7 ff54 	bl	8007044 <HAL_DMA_GetError>
 800f19c:	4603      	mov	r3, r0
 800f19e:	2b20      	cmp	r3, #32
 800f1a0:	d105      	bne.n	800f1ae <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2210      	movs	r2, #16
 800f1a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f1aa:	2303      	movs	r3, #3
 800f1ac:	e003      	b.n	800f1b6 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f000 ff98 	bl	80100e4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800f1b4:	2300      	movs	r3, #0
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3740      	adds	r7, #64	@ 0x40
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
	...

0800f1c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b0ba      	sub	sp, #232	@ 0xe8
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	69db      	ldr	r3, [r3, #28]
 800f1ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	689b      	ldr	r3, [r3, #8]
 800f1e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f1e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f1ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f1ee:	4013      	ands	r3, r2
 800f1f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f1f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d115      	bne.n	800f228 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f1fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f200:	f003 0320 	and.w	r3, r3, #32
 800f204:	2b00      	cmp	r3, #0
 800f206:	d00f      	beq.n	800f228 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f20c:	f003 0320 	and.w	r3, r3, #32
 800f210:	2b00      	cmp	r3, #0
 800f212:	d009      	beq.n	800f228 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f218:	2b00      	cmp	r3, #0
 800f21a:	f000 82b1 	beq.w	800f780 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	4798      	blx	r3
      }
      return;
 800f226:	e2ab      	b.n	800f780 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f228:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	f000 8117 	beq.w	800f460 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f236:	f003 0301 	and.w	r3, r3, #1
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d106      	bne.n	800f24c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800f23e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f242:	4b85      	ldr	r3, [pc, #532]	@ (800f458 <HAL_UART_IRQHandler+0x298>)
 800f244:	4013      	ands	r3, r2
 800f246:	2b00      	cmp	r3, #0
 800f248:	f000 810a 	beq.w	800f460 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f24c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f250:	f003 0301 	and.w	r3, r3, #1
 800f254:	2b00      	cmp	r3, #0
 800f256:	d011      	beq.n	800f27c <HAL_UART_IRQHandler+0xbc>
 800f258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f25c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f260:	2b00      	cmp	r3, #0
 800f262:	d00b      	beq.n	800f27c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	2201      	movs	r2, #1
 800f26a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f272:	f043 0201 	orr.w	r2, r3, #1
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f27c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f280:	f003 0302 	and.w	r3, r3, #2
 800f284:	2b00      	cmp	r3, #0
 800f286:	d011      	beq.n	800f2ac <HAL_UART_IRQHandler+0xec>
 800f288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f28c:	f003 0301 	and.w	r3, r3, #1
 800f290:	2b00      	cmp	r3, #0
 800f292:	d00b      	beq.n	800f2ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	2202      	movs	r2, #2
 800f29a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2a2:	f043 0204 	orr.w	r2, r3, #4
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f2ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f2b0:	f003 0304 	and.w	r3, r3, #4
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d011      	beq.n	800f2dc <HAL_UART_IRQHandler+0x11c>
 800f2b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f2bc:	f003 0301 	and.w	r3, r3, #1
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d00b      	beq.n	800f2dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	2204      	movs	r2, #4
 800f2ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2d2:	f043 0202 	orr.w	r2, r3, #2
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f2dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f2e0:	f003 0308 	and.w	r3, r3, #8
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d017      	beq.n	800f318 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f2ec:	f003 0320 	and.w	r3, r3, #32
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d105      	bne.n	800f300 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800f2f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f2f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d00b      	beq.n	800f318 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	2208      	movs	r2, #8
 800f306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f30e:	f043 0208 	orr.w	r2, r3, #8
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f31c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f320:	2b00      	cmp	r3, #0
 800f322:	d012      	beq.n	800f34a <HAL_UART_IRQHandler+0x18a>
 800f324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f328:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d00c      	beq.n	800f34a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f338:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f340:	f043 0220 	orr.w	r2, r3, #32
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f350:	2b00      	cmp	r3, #0
 800f352:	f000 8217 	beq.w	800f784 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800f356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f35a:	f003 0320 	and.w	r3, r3, #32
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d00d      	beq.n	800f37e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f366:	f003 0320 	and.w	r3, r3, #32
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d007      	beq.n	800f37e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f372:	2b00      	cmp	r3, #0
 800f374:	d003      	beq.n	800f37e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f384:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	689b      	ldr	r3, [r3, #8]
 800f38e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f392:	2b40      	cmp	r3, #64	@ 0x40
 800f394:	d005      	beq.n	800f3a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f39a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d04f      	beq.n	800f442 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f000 fe9e 	bl	80100e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	689b      	ldr	r3, [r3, #8]
 800f3ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3b2:	2b40      	cmp	r3, #64	@ 0x40
 800f3b4:	d141      	bne.n	800f43a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	3308      	adds	r3, #8
 800f3bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f3c4:	e853 3f00 	ldrex	r3, [r3]
 800f3c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f3cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f3d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f3d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	3308      	adds	r3, #8
 800f3de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f3e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f3e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f3ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f3f2:	e841 2300 	strex	r3, r2, [r1]
 800f3f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f3fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d1d9      	bne.n	800f3b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f406:	2b00      	cmp	r3, #0
 800f408:	d013      	beq.n	800f432 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f40e:	4a13      	ldr	r2, [pc, #76]	@ (800f45c <HAL_UART_IRQHandler+0x29c>)
 800f410:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f416:	4618      	mov	r0, r3
 800f418:	f7f7 fc68 	bl	8006cec <HAL_DMA_Abort_IT>
 800f41c:	4603      	mov	r3, r0
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d017      	beq.n	800f452 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f428:	687a      	ldr	r2, [r7, #4]
 800f42a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800f42c:	4610      	mov	r0, r2
 800f42e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f430:	e00f      	b.n	800f452 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f7f6 fbf6 	bl	8005c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f438:	e00b      	b.n	800f452 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f7f6 fbf2 	bl	8005c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f440:	e007      	b.n	800f452 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	f7f6 fbee 	bl	8005c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2200      	movs	r2, #0
 800f44c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800f450:	e198      	b.n	800f784 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f452:	bf00      	nop
    return;
 800f454:	e196      	b.n	800f784 <HAL_UART_IRQHandler+0x5c4>
 800f456:	bf00      	nop
 800f458:	04000120 	.word	0x04000120
 800f45c:	080103fb 	.word	0x080103fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f464:	2b01      	cmp	r3, #1
 800f466:	f040 8166 	bne.w	800f736 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f46a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f46e:	f003 0310 	and.w	r3, r3, #16
 800f472:	2b00      	cmp	r3, #0
 800f474:	f000 815f 	beq.w	800f736 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f47c:	f003 0310 	and.w	r3, r3, #16
 800f480:	2b00      	cmp	r3, #0
 800f482:	f000 8158 	beq.w	800f736 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	2210      	movs	r2, #16
 800f48c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	689b      	ldr	r3, [r3, #8]
 800f494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f498:	2b40      	cmp	r3, #64	@ 0x40
 800f49a:	f040 80d0 	bne.w	800f63e <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f4aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	f000 80ab 	beq.w	800f60a <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f4ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f4be:	429a      	cmp	r2, r3
 800f4c0:	f080 80a3 	bcs.w	800f60a <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f4ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4d2:	69db      	ldr	r3, [r3, #28]
 800f4d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f4d8:	f000 8086 	beq.w	800f5e8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f4e8:	e853 3f00 	ldrex	r3, [r3]
 800f4ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f4f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f4f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f4f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	461a      	mov	r2, r3
 800f502:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f506:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f50a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f50e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f512:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f516:	e841 2300 	strex	r3, r2, [r1]
 800f51a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f51e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f522:	2b00      	cmp	r3, #0
 800f524:	d1da      	bne.n	800f4dc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	3308      	adds	r3, #8
 800f52c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f52e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f530:	e853 3f00 	ldrex	r3, [r3]
 800f534:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f536:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f538:	f023 0301 	bic.w	r3, r3, #1
 800f53c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	3308      	adds	r3, #8
 800f546:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f54a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f54e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f550:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f552:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f556:	e841 2300 	strex	r3, r2, [r1]
 800f55a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f55c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d1e1      	bne.n	800f526 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	3308      	adds	r3, #8
 800f568:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f56a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f56c:	e853 3f00 	ldrex	r3, [r3]
 800f570:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f572:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f574:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f578:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	3308      	adds	r3, #8
 800f582:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f586:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f588:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f58a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f58c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f58e:	e841 2300 	strex	r3, r2, [r1]
 800f592:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f594:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f596:	2b00      	cmp	r3, #0
 800f598:	d1e3      	bne.n	800f562 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	2220      	movs	r2, #32
 800f59e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f5b0:	e853 3f00 	ldrex	r3, [r3]
 800f5b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f5b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f5b8:	f023 0310 	bic.w	r3, r3, #16
 800f5bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	461a      	mov	r2, r3
 800f5c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f5ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f5cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f5d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f5d2:	e841 2300 	strex	r3, r2, [r1]
 800f5d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f5d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d1e4      	bne.n	800f5a8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7f7 fb12 	bl	8006c0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2202      	movs	r2, #2
 800f5ec:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f5fa:	b29b      	uxth	r3, r3
 800f5fc:	1ad3      	subs	r3, r2, r3
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	4619      	mov	r1, r3
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f000 f8d2 	bl	800f7ac <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800f608:	e0be      	b.n	800f788 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f610:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f614:	429a      	cmp	r2, r3
 800f616:	f040 80b7 	bne.w	800f788 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f61e:	69db      	ldr	r3, [r3, #28]
 800f620:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f624:	f040 80b0 	bne.w	800f788 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2202      	movs	r2, #2
 800f62c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f634:	4619      	mov	r1, r3
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f000 f8b8 	bl	800f7ac <HAL_UARTEx_RxEventCallback>
      return;
 800f63c:	e0a4      	b.n	800f788 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f64a:	b29b      	uxth	r3, r3
 800f64c:	1ad3      	subs	r3, r2, r3
 800f64e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f658:	b29b      	uxth	r3, r3
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	f000 8096 	beq.w	800f78c <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800f660:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f664:	2b00      	cmp	r3, #0
 800f666:	f000 8091 	beq.w	800f78c <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f672:	e853 3f00 	ldrex	r3, [r3]
 800f676:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f67a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f67e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	461a      	mov	r2, r3
 800f688:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f68c:	647b      	str	r3, [r7, #68]	@ 0x44
 800f68e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f690:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f692:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f694:	e841 2300 	strex	r3, r2, [r1]
 800f698:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f69a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d1e4      	bne.n	800f66a <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	3308      	adds	r3, #8
 800f6a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6aa:	e853 3f00 	ldrex	r3, [r3]
 800f6ae:	623b      	str	r3, [r7, #32]
   return(result);
 800f6b0:	6a3b      	ldr	r3, [r7, #32]
 800f6b2:	f023 0301 	bic.w	r3, r3, #1
 800f6b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	3308      	adds	r3, #8
 800f6c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f6c4:	633a      	str	r2, [r7, #48]	@ 0x30
 800f6c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f6ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6cc:	e841 2300 	strex	r3, r2, [r1]
 800f6d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d1e3      	bne.n	800f6a0 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2220      	movs	r2, #32
 800f6dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	e853 3f00 	ldrex	r3, [r3]
 800f6f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	f023 0310 	bic.w	r3, r3, #16
 800f700:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	461a      	mov	r2, r3
 800f70a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f70e:	61fb      	str	r3, [r7, #28]
 800f710:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f712:	69b9      	ldr	r1, [r7, #24]
 800f714:	69fa      	ldr	r2, [r7, #28]
 800f716:	e841 2300 	strex	r3, r2, [r1]
 800f71a:	617b      	str	r3, [r7, #20]
   return(result);
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d1e4      	bne.n	800f6ec <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2202      	movs	r2, #2
 800f726:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f728:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f72c:	4619      	mov	r1, r3
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	f000 f83c 	bl	800f7ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f734:	e02a      	b.n	800f78c <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800f736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f73a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d00e      	beq.n	800f760 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800f742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d008      	beq.n	800f760 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f752:	2b00      	cmp	r3, #0
 800f754:	d01c      	beq.n	800f790 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	4798      	blx	r3
    }
    return;
 800f75e:	e017      	b.n	800f790 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d012      	beq.n	800f792 <HAL_UART_IRQHandler+0x5d2>
 800f76c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f774:	2b00      	cmp	r3, #0
 800f776:	d00c      	beq.n	800f792 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f000 fe50 	bl	801041e <UART_EndTransmit_IT>
    return;
 800f77e:	e008      	b.n	800f792 <HAL_UART_IRQHandler+0x5d2>
      return;
 800f780:	bf00      	nop
 800f782:	e006      	b.n	800f792 <HAL_UART_IRQHandler+0x5d2>
    return;
 800f784:	bf00      	nop
 800f786:	e004      	b.n	800f792 <HAL_UART_IRQHandler+0x5d2>
      return;
 800f788:	bf00      	nop
 800f78a:	e002      	b.n	800f792 <HAL_UART_IRQHandler+0x5d2>
      return;
 800f78c:	bf00      	nop
 800f78e:	e000      	b.n	800f792 <HAL_UART_IRQHandler+0x5d2>
    return;
 800f790:	bf00      	nop
  }

}
 800f792:	37e8      	adds	r7, #232	@ 0xe8
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}

0800f798 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f798:	b480      	push	{r7}
 800f79a:	b083      	sub	sp, #12
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f7a0:	bf00      	nop
 800f7a2:	370c      	adds	r7, #12
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr

0800f7ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b083      	sub	sp, #12
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
 800f7b4:	460b      	mov	r3, r1
 800f7b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f7b8:	bf00      	nop
 800f7ba:	370c      	adds	r7, #12
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c2:	4770      	bx	lr

0800f7c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b088      	sub	sp, #32
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	689a      	ldr	r2, [r3, #8]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	691b      	ldr	r3, [r3, #16]
 800f7d8:	431a      	orrs	r2, r3
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	695b      	ldr	r3, [r3, #20]
 800f7de:	431a      	orrs	r2, r3
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	69db      	ldr	r3, [r3, #28]
 800f7e4:	4313      	orrs	r3, r2
 800f7e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	681a      	ldr	r2, [r3, #0]
 800f7ee:	4ba6      	ldr	r3, [pc, #664]	@ (800fa88 <UART_SetConfig+0x2c4>)
 800f7f0:	4013      	ands	r3, r2
 800f7f2:	687a      	ldr	r2, [r7, #4]
 800f7f4:	6812      	ldr	r2, [r2, #0]
 800f7f6:	6979      	ldr	r1, [r7, #20]
 800f7f8:	430b      	orrs	r3, r1
 800f7fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	685b      	ldr	r3, [r3, #4]
 800f802:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	68da      	ldr	r2, [r3, #12]
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	430a      	orrs	r2, r1
 800f810:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	699b      	ldr	r3, [r3, #24]
 800f816:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	6a1b      	ldr	r3, [r3, #32]
 800f81c:	697a      	ldr	r2, [r7, #20]
 800f81e:	4313      	orrs	r3, r2
 800f820:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	689b      	ldr	r3, [r3, #8]
 800f828:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	697a      	ldr	r2, [r7, #20]
 800f832:	430a      	orrs	r2, r1
 800f834:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	4a94      	ldr	r2, [pc, #592]	@ (800fa8c <UART_SetConfig+0x2c8>)
 800f83c:	4293      	cmp	r3, r2
 800f83e:	d120      	bne.n	800f882 <UART_SetConfig+0xbe>
 800f840:	4b93      	ldr	r3, [pc, #588]	@ (800fa90 <UART_SetConfig+0x2cc>)
 800f842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f846:	f003 0303 	and.w	r3, r3, #3
 800f84a:	2b03      	cmp	r3, #3
 800f84c:	d816      	bhi.n	800f87c <UART_SetConfig+0xb8>
 800f84e:	a201      	add	r2, pc, #4	@ (adr r2, 800f854 <UART_SetConfig+0x90>)
 800f850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f854:	0800f865 	.word	0x0800f865
 800f858:	0800f871 	.word	0x0800f871
 800f85c:	0800f86b 	.word	0x0800f86b
 800f860:	0800f877 	.word	0x0800f877
 800f864:	2301      	movs	r3, #1
 800f866:	77fb      	strb	r3, [r7, #31]
 800f868:	e150      	b.n	800fb0c <UART_SetConfig+0x348>
 800f86a:	2302      	movs	r3, #2
 800f86c:	77fb      	strb	r3, [r7, #31]
 800f86e:	e14d      	b.n	800fb0c <UART_SetConfig+0x348>
 800f870:	2304      	movs	r3, #4
 800f872:	77fb      	strb	r3, [r7, #31]
 800f874:	e14a      	b.n	800fb0c <UART_SetConfig+0x348>
 800f876:	2308      	movs	r3, #8
 800f878:	77fb      	strb	r3, [r7, #31]
 800f87a:	e147      	b.n	800fb0c <UART_SetConfig+0x348>
 800f87c:	2310      	movs	r3, #16
 800f87e:	77fb      	strb	r3, [r7, #31]
 800f880:	e144      	b.n	800fb0c <UART_SetConfig+0x348>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	4a83      	ldr	r2, [pc, #524]	@ (800fa94 <UART_SetConfig+0x2d0>)
 800f888:	4293      	cmp	r3, r2
 800f88a:	d132      	bne.n	800f8f2 <UART_SetConfig+0x12e>
 800f88c:	4b80      	ldr	r3, [pc, #512]	@ (800fa90 <UART_SetConfig+0x2cc>)
 800f88e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f892:	f003 030c 	and.w	r3, r3, #12
 800f896:	2b0c      	cmp	r3, #12
 800f898:	d828      	bhi.n	800f8ec <UART_SetConfig+0x128>
 800f89a:	a201      	add	r2, pc, #4	@ (adr r2, 800f8a0 <UART_SetConfig+0xdc>)
 800f89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8a0:	0800f8d5 	.word	0x0800f8d5
 800f8a4:	0800f8ed 	.word	0x0800f8ed
 800f8a8:	0800f8ed 	.word	0x0800f8ed
 800f8ac:	0800f8ed 	.word	0x0800f8ed
 800f8b0:	0800f8e1 	.word	0x0800f8e1
 800f8b4:	0800f8ed 	.word	0x0800f8ed
 800f8b8:	0800f8ed 	.word	0x0800f8ed
 800f8bc:	0800f8ed 	.word	0x0800f8ed
 800f8c0:	0800f8db 	.word	0x0800f8db
 800f8c4:	0800f8ed 	.word	0x0800f8ed
 800f8c8:	0800f8ed 	.word	0x0800f8ed
 800f8cc:	0800f8ed 	.word	0x0800f8ed
 800f8d0:	0800f8e7 	.word	0x0800f8e7
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	77fb      	strb	r3, [r7, #31]
 800f8d8:	e118      	b.n	800fb0c <UART_SetConfig+0x348>
 800f8da:	2302      	movs	r3, #2
 800f8dc:	77fb      	strb	r3, [r7, #31]
 800f8de:	e115      	b.n	800fb0c <UART_SetConfig+0x348>
 800f8e0:	2304      	movs	r3, #4
 800f8e2:	77fb      	strb	r3, [r7, #31]
 800f8e4:	e112      	b.n	800fb0c <UART_SetConfig+0x348>
 800f8e6:	2308      	movs	r3, #8
 800f8e8:	77fb      	strb	r3, [r7, #31]
 800f8ea:	e10f      	b.n	800fb0c <UART_SetConfig+0x348>
 800f8ec:	2310      	movs	r3, #16
 800f8ee:	77fb      	strb	r3, [r7, #31]
 800f8f0:	e10c      	b.n	800fb0c <UART_SetConfig+0x348>
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	4a68      	ldr	r2, [pc, #416]	@ (800fa98 <UART_SetConfig+0x2d4>)
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d120      	bne.n	800f93e <UART_SetConfig+0x17a>
 800f8fc:	4b64      	ldr	r3, [pc, #400]	@ (800fa90 <UART_SetConfig+0x2cc>)
 800f8fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f902:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f906:	2b30      	cmp	r3, #48	@ 0x30
 800f908:	d013      	beq.n	800f932 <UART_SetConfig+0x16e>
 800f90a:	2b30      	cmp	r3, #48	@ 0x30
 800f90c:	d814      	bhi.n	800f938 <UART_SetConfig+0x174>
 800f90e:	2b20      	cmp	r3, #32
 800f910:	d009      	beq.n	800f926 <UART_SetConfig+0x162>
 800f912:	2b20      	cmp	r3, #32
 800f914:	d810      	bhi.n	800f938 <UART_SetConfig+0x174>
 800f916:	2b00      	cmp	r3, #0
 800f918:	d002      	beq.n	800f920 <UART_SetConfig+0x15c>
 800f91a:	2b10      	cmp	r3, #16
 800f91c:	d006      	beq.n	800f92c <UART_SetConfig+0x168>
 800f91e:	e00b      	b.n	800f938 <UART_SetConfig+0x174>
 800f920:	2300      	movs	r3, #0
 800f922:	77fb      	strb	r3, [r7, #31]
 800f924:	e0f2      	b.n	800fb0c <UART_SetConfig+0x348>
 800f926:	2302      	movs	r3, #2
 800f928:	77fb      	strb	r3, [r7, #31]
 800f92a:	e0ef      	b.n	800fb0c <UART_SetConfig+0x348>
 800f92c:	2304      	movs	r3, #4
 800f92e:	77fb      	strb	r3, [r7, #31]
 800f930:	e0ec      	b.n	800fb0c <UART_SetConfig+0x348>
 800f932:	2308      	movs	r3, #8
 800f934:	77fb      	strb	r3, [r7, #31]
 800f936:	e0e9      	b.n	800fb0c <UART_SetConfig+0x348>
 800f938:	2310      	movs	r3, #16
 800f93a:	77fb      	strb	r3, [r7, #31]
 800f93c:	e0e6      	b.n	800fb0c <UART_SetConfig+0x348>
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	4a56      	ldr	r2, [pc, #344]	@ (800fa9c <UART_SetConfig+0x2d8>)
 800f944:	4293      	cmp	r3, r2
 800f946:	d120      	bne.n	800f98a <UART_SetConfig+0x1c6>
 800f948:	4b51      	ldr	r3, [pc, #324]	@ (800fa90 <UART_SetConfig+0x2cc>)
 800f94a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f94e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800f952:	2bc0      	cmp	r3, #192	@ 0xc0
 800f954:	d013      	beq.n	800f97e <UART_SetConfig+0x1ba>
 800f956:	2bc0      	cmp	r3, #192	@ 0xc0
 800f958:	d814      	bhi.n	800f984 <UART_SetConfig+0x1c0>
 800f95a:	2b80      	cmp	r3, #128	@ 0x80
 800f95c:	d009      	beq.n	800f972 <UART_SetConfig+0x1ae>
 800f95e:	2b80      	cmp	r3, #128	@ 0x80
 800f960:	d810      	bhi.n	800f984 <UART_SetConfig+0x1c0>
 800f962:	2b00      	cmp	r3, #0
 800f964:	d002      	beq.n	800f96c <UART_SetConfig+0x1a8>
 800f966:	2b40      	cmp	r3, #64	@ 0x40
 800f968:	d006      	beq.n	800f978 <UART_SetConfig+0x1b4>
 800f96a:	e00b      	b.n	800f984 <UART_SetConfig+0x1c0>
 800f96c:	2300      	movs	r3, #0
 800f96e:	77fb      	strb	r3, [r7, #31]
 800f970:	e0cc      	b.n	800fb0c <UART_SetConfig+0x348>
 800f972:	2302      	movs	r3, #2
 800f974:	77fb      	strb	r3, [r7, #31]
 800f976:	e0c9      	b.n	800fb0c <UART_SetConfig+0x348>
 800f978:	2304      	movs	r3, #4
 800f97a:	77fb      	strb	r3, [r7, #31]
 800f97c:	e0c6      	b.n	800fb0c <UART_SetConfig+0x348>
 800f97e:	2308      	movs	r3, #8
 800f980:	77fb      	strb	r3, [r7, #31]
 800f982:	e0c3      	b.n	800fb0c <UART_SetConfig+0x348>
 800f984:	2310      	movs	r3, #16
 800f986:	77fb      	strb	r3, [r7, #31]
 800f988:	e0c0      	b.n	800fb0c <UART_SetConfig+0x348>
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	4a44      	ldr	r2, [pc, #272]	@ (800faa0 <UART_SetConfig+0x2dc>)
 800f990:	4293      	cmp	r3, r2
 800f992:	d125      	bne.n	800f9e0 <UART_SetConfig+0x21c>
 800f994:	4b3e      	ldr	r3, [pc, #248]	@ (800fa90 <UART_SetConfig+0x2cc>)
 800f996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f99a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f99e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f9a2:	d017      	beq.n	800f9d4 <UART_SetConfig+0x210>
 800f9a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f9a8:	d817      	bhi.n	800f9da <UART_SetConfig+0x216>
 800f9aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f9ae:	d00b      	beq.n	800f9c8 <UART_SetConfig+0x204>
 800f9b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f9b4:	d811      	bhi.n	800f9da <UART_SetConfig+0x216>
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d003      	beq.n	800f9c2 <UART_SetConfig+0x1fe>
 800f9ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f9be:	d006      	beq.n	800f9ce <UART_SetConfig+0x20a>
 800f9c0:	e00b      	b.n	800f9da <UART_SetConfig+0x216>
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	77fb      	strb	r3, [r7, #31]
 800f9c6:	e0a1      	b.n	800fb0c <UART_SetConfig+0x348>
 800f9c8:	2302      	movs	r3, #2
 800f9ca:	77fb      	strb	r3, [r7, #31]
 800f9cc:	e09e      	b.n	800fb0c <UART_SetConfig+0x348>
 800f9ce:	2304      	movs	r3, #4
 800f9d0:	77fb      	strb	r3, [r7, #31]
 800f9d2:	e09b      	b.n	800fb0c <UART_SetConfig+0x348>
 800f9d4:	2308      	movs	r3, #8
 800f9d6:	77fb      	strb	r3, [r7, #31]
 800f9d8:	e098      	b.n	800fb0c <UART_SetConfig+0x348>
 800f9da:	2310      	movs	r3, #16
 800f9dc:	77fb      	strb	r3, [r7, #31]
 800f9de:	e095      	b.n	800fb0c <UART_SetConfig+0x348>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	4a2f      	ldr	r2, [pc, #188]	@ (800faa4 <UART_SetConfig+0x2e0>)
 800f9e6:	4293      	cmp	r3, r2
 800f9e8:	d125      	bne.n	800fa36 <UART_SetConfig+0x272>
 800f9ea:	4b29      	ldr	r3, [pc, #164]	@ (800fa90 <UART_SetConfig+0x2cc>)
 800f9ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f9f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f9f8:	d017      	beq.n	800fa2a <UART_SetConfig+0x266>
 800f9fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f9fe:	d817      	bhi.n	800fa30 <UART_SetConfig+0x26c>
 800fa00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fa04:	d00b      	beq.n	800fa1e <UART_SetConfig+0x25a>
 800fa06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fa0a:	d811      	bhi.n	800fa30 <UART_SetConfig+0x26c>
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d003      	beq.n	800fa18 <UART_SetConfig+0x254>
 800fa10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fa14:	d006      	beq.n	800fa24 <UART_SetConfig+0x260>
 800fa16:	e00b      	b.n	800fa30 <UART_SetConfig+0x26c>
 800fa18:	2301      	movs	r3, #1
 800fa1a:	77fb      	strb	r3, [r7, #31]
 800fa1c:	e076      	b.n	800fb0c <UART_SetConfig+0x348>
 800fa1e:	2302      	movs	r3, #2
 800fa20:	77fb      	strb	r3, [r7, #31]
 800fa22:	e073      	b.n	800fb0c <UART_SetConfig+0x348>
 800fa24:	2304      	movs	r3, #4
 800fa26:	77fb      	strb	r3, [r7, #31]
 800fa28:	e070      	b.n	800fb0c <UART_SetConfig+0x348>
 800fa2a:	2308      	movs	r3, #8
 800fa2c:	77fb      	strb	r3, [r7, #31]
 800fa2e:	e06d      	b.n	800fb0c <UART_SetConfig+0x348>
 800fa30:	2310      	movs	r3, #16
 800fa32:	77fb      	strb	r3, [r7, #31]
 800fa34:	e06a      	b.n	800fb0c <UART_SetConfig+0x348>
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	4a1b      	ldr	r2, [pc, #108]	@ (800faa8 <UART_SetConfig+0x2e4>)
 800fa3c:	4293      	cmp	r3, r2
 800fa3e:	d138      	bne.n	800fab2 <UART_SetConfig+0x2ee>
 800fa40:	4b13      	ldr	r3, [pc, #76]	@ (800fa90 <UART_SetConfig+0x2cc>)
 800fa42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa46:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800fa4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fa4e:	d017      	beq.n	800fa80 <UART_SetConfig+0x2bc>
 800fa50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fa54:	d82a      	bhi.n	800faac <UART_SetConfig+0x2e8>
 800fa56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fa5a:	d00b      	beq.n	800fa74 <UART_SetConfig+0x2b0>
 800fa5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fa60:	d824      	bhi.n	800faac <UART_SetConfig+0x2e8>
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d003      	beq.n	800fa6e <UART_SetConfig+0x2aa>
 800fa66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fa6a:	d006      	beq.n	800fa7a <UART_SetConfig+0x2b6>
 800fa6c:	e01e      	b.n	800faac <UART_SetConfig+0x2e8>
 800fa6e:	2300      	movs	r3, #0
 800fa70:	77fb      	strb	r3, [r7, #31]
 800fa72:	e04b      	b.n	800fb0c <UART_SetConfig+0x348>
 800fa74:	2302      	movs	r3, #2
 800fa76:	77fb      	strb	r3, [r7, #31]
 800fa78:	e048      	b.n	800fb0c <UART_SetConfig+0x348>
 800fa7a:	2304      	movs	r3, #4
 800fa7c:	77fb      	strb	r3, [r7, #31]
 800fa7e:	e045      	b.n	800fb0c <UART_SetConfig+0x348>
 800fa80:	2308      	movs	r3, #8
 800fa82:	77fb      	strb	r3, [r7, #31]
 800fa84:	e042      	b.n	800fb0c <UART_SetConfig+0x348>
 800fa86:	bf00      	nop
 800fa88:	efff69f3 	.word	0xefff69f3
 800fa8c:	40011000 	.word	0x40011000
 800fa90:	40023800 	.word	0x40023800
 800fa94:	40004400 	.word	0x40004400
 800fa98:	40004800 	.word	0x40004800
 800fa9c:	40004c00 	.word	0x40004c00
 800faa0:	40005000 	.word	0x40005000
 800faa4:	40011400 	.word	0x40011400
 800faa8:	40007800 	.word	0x40007800
 800faac:	2310      	movs	r3, #16
 800faae:	77fb      	strb	r3, [r7, #31]
 800fab0:	e02c      	b.n	800fb0c <UART_SetConfig+0x348>
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	4a72      	ldr	r2, [pc, #456]	@ (800fc80 <UART_SetConfig+0x4bc>)
 800fab8:	4293      	cmp	r3, r2
 800faba:	d125      	bne.n	800fb08 <UART_SetConfig+0x344>
 800fabc:	4b71      	ldr	r3, [pc, #452]	@ (800fc84 <UART_SetConfig+0x4c0>)
 800fabe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fac2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800fac6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800faca:	d017      	beq.n	800fafc <UART_SetConfig+0x338>
 800facc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800fad0:	d817      	bhi.n	800fb02 <UART_SetConfig+0x33e>
 800fad2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fad6:	d00b      	beq.n	800faf0 <UART_SetConfig+0x32c>
 800fad8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fadc:	d811      	bhi.n	800fb02 <UART_SetConfig+0x33e>
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d003      	beq.n	800faea <UART_SetConfig+0x326>
 800fae2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fae6:	d006      	beq.n	800faf6 <UART_SetConfig+0x332>
 800fae8:	e00b      	b.n	800fb02 <UART_SetConfig+0x33e>
 800faea:	2300      	movs	r3, #0
 800faec:	77fb      	strb	r3, [r7, #31]
 800faee:	e00d      	b.n	800fb0c <UART_SetConfig+0x348>
 800faf0:	2302      	movs	r3, #2
 800faf2:	77fb      	strb	r3, [r7, #31]
 800faf4:	e00a      	b.n	800fb0c <UART_SetConfig+0x348>
 800faf6:	2304      	movs	r3, #4
 800faf8:	77fb      	strb	r3, [r7, #31]
 800fafa:	e007      	b.n	800fb0c <UART_SetConfig+0x348>
 800fafc:	2308      	movs	r3, #8
 800fafe:	77fb      	strb	r3, [r7, #31]
 800fb00:	e004      	b.n	800fb0c <UART_SetConfig+0x348>
 800fb02:	2310      	movs	r3, #16
 800fb04:	77fb      	strb	r3, [r7, #31]
 800fb06:	e001      	b.n	800fb0c <UART_SetConfig+0x348>
 800fb08:	2310      	movs	r3, #16
 800fb0a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	69db      	ldr	r3, [r3, #28]
 800fb10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fb14:	d15b      	bne.n	800fbce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800fb16:	7ffb      	ldrb	r3, [r7, #31]
 800fb18:	2b08      	cmp	r3, #8
 800fb1a:	d828      	bhi.n	800fb6e <UART_SetConfig+0x3aa>
 800fb1c:	a201      	add	r2, pc, #4	@ (adr r2, 800fb24 <UART_SetConfig+0x360>)
 800fb1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb22:	bf00      	nop
 800fb24:	0800fb49 	.word	0x0800fb49
 800fb28:	0800fb51 	.word	0x0800fb51
 800fb2c:	0800fb59 	.word	0x0800fb59
 800fb30:	0800fb6f 	.word	0x0800fb6f
 800fb34:	0800fb5f 	.word	0x0800fb5f
 800fb38:	0800fb6f 	.word	0x0800fb6f
 800fb3c:	0800fb6f 	.word	0x0800fb6f
 800fb40:	0800fb6f 	.word	0x0800fb6f
 800fb44:	0800fb67 	.word	0x0800fb67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fb48:	f7fb f9f0 	bl	800af2c <HAL_RCC_GetPCLK1Freq>
 800fb4c:	61b8      	str	r0, [r7, #24]
        break;
 800fb4e:	e013      	b.n	800fb78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fb50:	f7fb fa00 	bl	800af54 <HAL_RCC_GetPCLK2Freq>
 800fb54:	61b8      	str	r0, [r7, #24]
        break;
 800fb56:	e00f      	b.n	800fb78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fb58:	4b4b      	ldr	r3, [pc, #300]	@ (800fc88 <UART_SetConfig+0x4c4>)
 800fb5a:	61bb      	str	r3, [r7, #24]
        break;
 800fb5c:	e00c      	b.n	800fb78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fb5e:	f7fb f913 	bl	800ad88 <HAL_RCC_GetSysClockFreq>
 800fb62:	61b8      	str	r0, [r7, #24]
        break;
 800fb64:	e008      	b.n	800fb78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fb66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fb6a:	61bb      	str	r3, [r7, #24]
        break;
 800fb6c:	e004      	b.n	800fb78 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800fb72:	2301      	movs	r3, #1
 800fb74:	77bb      	strb	r3, [r7, #30]
        break;
 800fb76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fb78:	69bb      	ldr	r3, [r7, #24]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d074      	beq.n	800fc68 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800fb7e:	69bb      	ldr	r3, [r7, #24]
 800fb80:	005a      	lsls	r2, r3, #1
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	685b      	ldr	r3, [r3, #4]
 800fb86:	085b      	lsrs	r3, r3, #1
 800fb88:	441a      	add	r2, r3
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	685b      	ldr	r3, [r3, #4]
 800fb8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	2b0f      	cmp	r3, #15
 800fb98:	d916      	bls.n	800fbc8 <UART_SetConfig+0x404>
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fba0:	d212      	bcs.n	800fbc8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fba2:	693b      	ldr	r3, [r7, #16]
 800fba4:	b29b      	uxth	r3, r3
 800fba6:	f023 030f 	bic.w	r3, r3, #15
 800fbaa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	085b      	lsrs	r3, r3, #1
 800fbb0:	b29b      	uxth	r3, r3
 800fbb2:	f003 0307 	and.w	r3, r3, #7
 800fbb6:	b29a      	uxth	r2, r3
 800fbb8:	89fb      	ldrh	r3, [r7, #14]
 800fbba:	4313      	orrs	r3, r2
 800fbbc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	89fa      	ldrh	r2, [r7, #14]
 800fbc4:	60da      	str	r2, [r3, #12]
 800fbc6:	e04f      	b.n	800fc68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800fbc8:	2301      	movs	r3, #1
 800fbca:	77bb      	strb	r3, [r7, #30]
 800fbcc:	e04c      	b.n	800fc68 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fbce:	7ffb      	ldrb	r3, [r7, #31]
 800fbd0:	2b08      	cmp	r3, #8
 800fbd2:	d828      	bhi.n	800fc26 <UART_SetConfig+0x462>
 800fbd4:	a201      	add	r2, pc, #4	@ (adr r2, 800fbdc <UART_SetConfig+0x418>)
 800fbd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbda:	bf00      	nop
 800fbdc:	0800fc01 	.word	0x0800fc01
 800fbe0:	0800fc09 	.word	0x0800fc09
 800fbe4:	0800fc11 	.word	0x0800fc11
 800fbe8:	0800fc27 	.word	0x0800fc27
 800fbec:	0800fc17 	.word	0x0800fc17
 800fbf0:	0800fc27 	.word	0x0800fc27
 800fbf4:	0800fc27 	.word	0x0800fc27
 800fbf8:	0800fc27 	.word	0x0800fc27
 800fbfc:	0800fc1f 	.word	0x0800fc1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fc00:	f7fb f994 	bl	800af2c <HAL_RCC_GetPCLK1Freq>
 800fc04:	61b8      	str	r0, [r7, #24]
        break;
 800fc06:	e013      	b.n	800fc30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fc08:	f7fb f9a4 	bl	800af54 <HAL_RCC_GetPCLK2Freq>
 800fc0c:	61b8      	str	r0, [r7, #24]
        break;
 800fc0e:	e00f      	b.n	800fc30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fc10:	4b1d      	ldr	r3, [pc, #116]	@ (800fc88 <UART_SetConfig+0x4c4>)
 800fc12:	61bb      	str	r3, [r7, #24]
        break;
 800fc14:	e00c      	b.n	800fc30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fc16:	f7fb f8b7 	bl	800ad88 <HAL_RCC_GetSysClockFreq>
 800fc1a:	61b8      	str	r0, [r7, #24]
        break;
 800fc1c:	e008      	b.n	800fc30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fc1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fc22:	61bb      	str	r3, [r7, #24]
        break;
 800fc24:	e004      	b.n	800fc30 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800fc26:	2300      	movs	r3, #0
 800fc28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800fc2a:	2301      	movs	r3, #1
 800fc2c:	77bb      	strb	r3, [r7, #30]
        break;
 800fc2e:	bf00      	nop
    }

    if (pclk != 0U)
 800fc30:	69bb      	ldr	r3, [r7, #24]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d018      	beq.n	800fc68 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	685b      	ldr	r3, [r3, #4]
 800fc3a:	085a      	lsrs	r2, r3, #1
 800fc3c:	69bb      	ldr	r3, [r7, #24]
 800fc3e:	441a      	add	r2, r3
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	685b      	ldr	r3, [r3, #4]
 800fc44:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fc4a:	693b      	ldr	r3, [r7, #16]
 800fc4c:	2b0f      	cmp	r3, #15
 800fc4e:	d909      	bls.n	800fc64 <UART_SetConfig+0x4a0>
 800fc50:	693b      	ldr	r3, [r7, #16]
 800fc52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fc56:	d205      	bcs.n	800fc64 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fc58:	693b      	ldr	r3, [r7, #16]
 800fc5a:	b29a      	uxth	r2, r3
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	60da      	str	r2, [r3, #12]
 800fc62:	e001      	b.n	800fc68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800fc64:	2301      	movs	r3, #1
 800fc66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	2200      	movs	r2, #0
 800fc72:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800fc74:	7fbb      	ldrb	r3, [r7, #30]
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3720      	adds	r7, #32
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
 800fc7e:	bf00      	nop
 800fc80:	40007c00 	.word	0x40007c00
 800fc84:	40023800 	.word	0x40023800
 800fc88:	00f42400 	.word	0x00f42400

0800fc8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b083      	sub	sp, #12
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc98:	f003 0308 	and.w	r3, r3, #8
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d00a      	beq.n	800fcb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	685b      	ldr	r3, [r3, #4]
 800fca6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	430a      	orrs	r2, r1
 800fcb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcba:	f003 0301 	and.w	r3, r3, #1
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d00a      	beq.n	800fcd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	685b      	ldr	r3, [r3, #4]
 800fcc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	430a      	orrs	r2, r1
 800fcd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcdc:	f003 0302 	and.w	r3, r3, #2
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d00a      	beq.n	800fcfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	685b      	ldr	r3, [r3, #4]
 800fcea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	430a      	orrs	r2, r1
 800fcf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcfe:	f003 0304 	and.w	r3, r3, #4
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d00a      	beq.n	800fd1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	685b      	ldr	r3, [r3, #4]
 800fd0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	430a      	orrs	r2, r1
 800fd1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd20:	f003 0310 	and.w	r3, r3, #16
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d00a      	beq.n	800fd3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	689b      	ldr	r3, [r3, #8]
 800fd2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	430a      	orrs	r2, r1
 800fd3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd42:	f003 0320 	and.w	r3, r3, #32
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d00a      	beq.n	800fd60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	689b      	ldr	r3, [r3, #8]
 800fd50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	430a      	orrs	r2, r1
 800fd5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d01a      	beq.n	800fda2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	430a      	orrs	r2, r1
 800fd80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fd8a:	d10a      	bne.n	800fda2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	685b      	ldr	r3, [r3, #4]
 800fd92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	430a      	orrs	r2, r1
 800fda0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fda6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d00a      	beq.n	800fdc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	685b      	ldr	r3, [r3, #4]
 800fdb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	430a      	orrs	r2, r1
 800fdc2:	605a      	str	r2, [r3, #4]
  }
}
 800fdc4:	bf00      	nop
 800fdc6:	370c      	adds	r7, #12
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdce:	4770      	bx	lr

0800fdd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b08c      	sub	sp, #48	@ 0x30
 800fdd4:	af02      	add	r7, sp, #8
 800fdd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2200      	movs	r2, #0
 800fddc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fde0:	f7f6 f892 	bl	8005f08 <HAL_GetTick>
 800fde4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	f003 0308 	and.w	r3, r3, #8
 800fdf0:	2b08      	cmp	r3, #8
 800fdf2:	d12e      	bne.n	800fe52 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fdf4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fdf8:	9300      	str	r3, [sp, #0]
 800fdfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f000 f83b 	bl	800fe7e <UART_WaitOnFlagUntilTimeout>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d021      	beq.n	800fe52 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe14:	693b      	ldr	r3, [r7, #16]
 800fe16:	e853 3f00 	ldrex	r3, [r3]
 800fe1a:	60fb      	str	r3, [r7, #12]
   return(result);
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fe22:	623b      	str	r3, [r7, #32]
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	461a      	mov	r2, r3
 800fe2a:	6a3b      	ldr	r3, [r7, #32]
 800fe2c:	61fb      	str	r3, [r7, #28]
 800fe2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe30:	69b9      	ldr	r1, [r7, #24]
 800fe32:	69fa      	ldr	r2, [r7, #28]
 800fe34:	e841 2300 	strex	r3, r2, [r1]
 800fe38:	617b      	str	r3, [r7, #20]
   return(result);
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d1e6      	bne.n	800fe0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2220      	movs	r2, #32
 800fe44:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2200      	movs	r2, #0
 800fe4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fe4e:	2303      	movs	r3, #3
 800fe50:	e011      	b.n	800fe76 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2220      	movs	r2, #32
 800fe56:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2220      	movs	r2, #32
 800fe5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2200      	movs	r2, #0
 800fe64:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2200      	movs	r2, #0
 800fe6a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800fe74:	2300      	movs	r3, #0
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	3728      	adds	r7, #40	@ 0x28
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}

0800fe7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fe7e:	b580      	push	{r7, lr}
 800fe80:	b084      	sub	sp, #16
 800fe82:	af00      	add	r7, sp, #0
 800fe84:	60f8      	str	r0, [r7, #12]
 800fe86:	60b9      	str	r1, [r7, #8]
 800fe88:	603b      	str	r3, [r7, #0]
 800fe8a:	4613      	mov	r3, r2
 800fe8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fe8e:	e04f      	b.n	800ff30 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fe90:	69bb      	ldr	r3, [r7, #24]
 800fe92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe96:	d04b      	beq.n	800ff30 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fe98:	f7f6 f836 	bl	8005f08 <HAL_GetTick>
 800fe9c:	4602      	mov	r2, r0
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	1ad3      	subs	r3, r2, r3
 800fea2:	69ba      	ldr	r2, [r7, #24]
 800fea4:	429a      	cmp	r2, r3
 800fea6:	d302      	bcc.n	800feae <UART_WaitOnFlagUntilTimeout+0x30>
 800fea8:	69bb      	ldr	r3, [r7, #24]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d101      	bne.n	800feb2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800feae:	2303      	movs	r3, #3
 800feb0:	e04e      	b.n	800ff50 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	f003 0304 	and.w	r3, r3, #4
 800febc:	2b00      	cmp	r3, #0
 800febe:	d037      	beq.n	800ff30 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	2b80      	cmp	r3, #128	@ 0x80
 800fec4:	d034      	beq.n	800ff30 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	2b40      	cmp	r3, #64	@ 0x40
 800feca:	d031      	beq.n	800ff30 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	69db      	ldr	r3, [r3, #28]
 800fed2:	f003 0308 	and.w	r3, r3, #8
 800fed6:	2b08      	cmp	r3, #8
 800fed8:	d110      	bne.n	800fefc <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	2208      	movs	r2, #8
 800fee0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fee2:	68f8      	ldr	r0, [r7, #12]
 800fee4:	f000 f8fe 	bl	80100e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	2208      	movs	r2, #8
 800feec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	2200      	movs	r2, #0
 800fef4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800fef8:	2301      	movs	r3, #1
 800fefa:	e029      	b.n	800ff50 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	69db      	ldr	r3, [r3, #28]
 800ff02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ff06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ff0a:	d111      	bne.n	800ff30 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ff14:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ff16:	68f8      	ldr	r0, [r7, #12]
 800ff18:	f000 f8e4 	bl	80100e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2220      	movs	r2, #32
 800ff20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	2200      	movs	r2, #0
 800ff28:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ff2c:	2303      	movs	r3, #3
 800ff2e:	e00f      	b.n	800ff50 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	69da      	ldr	r2, [r3, #28]
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	4013      	ands	r3, r2
 800ff3a:	68ba      	ldr	r2, [r7, #8]
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	bf0c      	ite	eq
 800ff40:	2301      	moveq	r3, #1
 800ff42:	2300      	movne	r3, #0
 800ff44:	b2db      	uxtb	r3, r3
 800ff46:	461a      	mov	r2, r3
 800ff48:	79fb      	ldrb	r3, [r7, #7]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d0a0      	beq.n	800fe90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ff4e:	2300      	movs	r3, #0
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3710      	adds	r7, #16
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b096      	sub	sp, #88	@ 0x58
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	60f8      	str	r0, [r7, #12]
 800ff60:	60b9      	str	r1, [r7, #8]
 800ff62:	4613      	mov	r3, r2
 800ff64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	68ba      	ldr	r2, [r7, #8]
 800ff6a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	88fa      	ldrh	r2, [r7, #6]
 800ff70:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	2200      	movs	r2, #0
 800ff78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	2222      	movs	r2, #34	@ 0x22
 800ff80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d028      	beq.n	800ffde <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff90:	4a3e      	ldr	r2, [pc, #248]	@ (801008c <UART_Start_Receive_DMA+0x134>)
 800ff92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff98:	4a3d      	ldr	r2, [pc, #244]	@ (8010090 <UART_Start_Receive_DMA+0x138>)
 800ff9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffa0:	4a3c      	ldr	r2, [pc, #240]	@ (8010094 <UART_Start_Receive_DMA+0x13c>)
 800ffa2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	3324      	adds	r3, #36	@ 0x24
 800ffb6:	4619      	mov	r1, r3
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ffbc:	461a      	mov	r2, r3
 800ffbe:	88fb      	ldrh	r3, [r7, #6]
 800ffc0:	f7f6 fdc4 	bl	8006b4c <HAL_DMA_Start_IT>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d009      	beq.n	800ffde <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	2210      	movs	r2, #16
 800ffce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	2220      	movs	r2, #32
 800ffd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800ffda:	2301      	movs	r3, #1
 800ffdc:	e051      	b.n	8010082 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	691b      	ldr	r3, [r3, #16]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d018      	beq.n	8010018 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffee:	e853 3f00 	ldrex	r3, [r3]
 800fff2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fffa:	657b      	str	r3, [r7, #84]	@ 0x54
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	461a      	mov	r2, r3
 8010002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010004:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010006:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010008:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801000a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801000c:	e841 2300 	strex	r3, r2, [r1]
 8010010:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010014:	2b00      	cmp	r3, #0
 8010016:	d1e6      	bne.n	800ffe6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	3308      	adds	r3, #8
 801001e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010022:	e853 3f00 	ldrex	r3, [r3]
 8010026:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801002a:	f043 0301 	orr.w	r3, r3, #1
 801002e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	3308      	adds	r3, #8
 8010036:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010038:	637a      	str	r2, [r7, #52]	@ 0x34
 801003a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801003c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801003e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010040:	e841 2300 	strex	r3, r2, [r1]
 8010044:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010048:	2b00      	cmp	r3, #0
 801004a:	d1e5      	bne.n	8010018 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	3308      	adds	r3, #8
 8010052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010054:	697b      	ldr	r3, [r7, #20]
 8010056:	e853 3f00 	ldrex	r3, [r3]
 801005a:	613b      	str	r3, [r7, #16]
   return(result);
 801005c:	693b      	ldr	r3, [r7, #16]
 801005e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010062:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	3308      	adds	r3, #8
 801006a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801006c:	623a      	str	r2, [r7, #32]
 801006e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010070:	69f9      	ldr	r1, [r7, #28]
 8010072:	6a3a      	ldr	r2, [r7, #32]
 8010074:	e841 2300 	strex	r3, r2, [r1]
 8010078:	61bb      	str	r3, [r7, #24]
   return(result);
 801007a:	69bb      	ldr	r3, [r7, #24]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d1e5      	bne.n	801004c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8010080:	2300      	movs	r3, #0
}
 8010082:	4618      	mov	r0, r3
 8010084:	3758      	adds	r7, #88	@ 0x58
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}
 801008a:	bf00      	nop
 801008c:	080101ad 	.word	0x080101ad
 8010090:	0801030b 	.word	0x0801030b
 8010094:	0801037d 	.word	0x0801037d

08010098 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010098:	b480      	push	{r7}
 801009a:	b089      	sub	sp, #36	@ 0x24
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	e853 3f00 	ldrex	r3, [r3]
 80100ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80100b4:	61fb      	str	r3, [r7, #28]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	461a      	mov	r2, r3
 80100bc:	69fb      	ldr	r3, [r7, #28]
 80100be:	61bb      	str	r3, [r7, #24]
 80100c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100c2:	6979      	ldr	r1, [r7, #20]
 80100c4:	69ba      	ldr	r2, [r7, #24]
 80100c6:	e841 2300 	strex	r3, r2, [r1]
 80100ca:	613b      	str	r3, [r7, #16]
   return(result);
 80100cc:	693b      	ldr	r3, [r7, #16]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d1e6      	bne.n	80100a0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2220      	movs	r2, #32
 80100d6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80100d8:	bf00      	nop
 80100da:	3724      	adds	r7, #36	@ 0x24
 80100dc:	46bd      	mov	sp, r7
 80100de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e2:	4770      	bx	lr

080100e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80100e4:	b480      	push	{r7}
 80100e6:	b095      	sub	sp, #84	@ 0x54
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100f4:	e853 3f00 	ldrex	r3, [r3]
 80100f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80100fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010100:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	461a      	mov	r2, r3
 8010108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801010a:	643b      	str	r3, [r7, #64]	@ 0x40
 801010c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801010e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010110:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010112:	e841 2300 	strex	r3, r2, [r1]
 8010116:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801011a:	2b00      	cmp	r3, #0
 801011c:	d1e6      	bne.n	80100ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	3308      	adds	r3, #8
 8010124:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010126:	6a3b      	ldr	r3, [r7, #32]
 8010128:	e853 3f00 	ldrex	r3, [r3]
 801012c:	61fb      	str	r3, [r7, #28]
   return(result);
 801012e:	69fb      	ldr	r3, [r7, #28]
 8010130:	f023 0301 	bic.w	r3, r3, #1
 8010134:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	3308      	adds	r3, #8
 801013c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801013e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010140:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010142:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010144:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010146:	e841 2300 	strex	r3, r2, [r1]
 801014a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801014c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801014e:	2b00      	cmp	r3, #0
 8010150:	d1e5      	bne.n	801011e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010156:	2b01      	cmp	r3, #1
 8010158:	d118      	bne.n	801018c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	e853 3f00 	ldrex	r3, [r3]
 8010166:	60bb      	str	r3, [r7, #8]
   return(result);
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	f023 0310 	bic.w	r3, r3, #16
 801016e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	461a      	mov	r2, r3
 8010176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010178:	61bb      	str	r3, [r7, #24]
 801017a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801017c:	6979      	ldr	r1, [r7, #20]
 801017e:	69ba      	ldr	r2, [r7, #24]
 8010180:	e841 2300 	strex	r3, r2, [r1]
 8010184:	613b      	str	r3, [r7, #16]
   return(result);
 8010186:	693b      	ldr	r3, [r7, #16]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d1e6      	bne.n	801015a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2220      	movs	r2, #32
 8010190:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2200      	movs	r2, #0
 8010198:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2200      	movs	r2, #0
 801019e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80101a0:	bf00      	nop
 80101a2:	3754      	adds	r7, #84	@ 0x54
 80101a4:	46bd      	mov	sp, r7
 80101a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101aa:	4770      	bx	lr

080101ac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b09c      	sub	sp, #112	@ 0x70
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101b8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	69db      	ldr	r3, [r3, #28]
 80101be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80101c2:	d071      	beq.n	80102a8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80101c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80101c6:	2200      	movs	r2, #0
 80101c8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80101cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80101d4:	e853 3f00 	ldrex	r3, [r3]
 80101d8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80101da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80101dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80101e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80101e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	461a      	mov	r2, r3
 80101e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80101ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80101ec:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80101f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80101f2:	e841 2300 	strex	r3, r2, [r1]
 80101f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80101f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d1e6      	bne.n	80101cc <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	3308      	adds	r3, #8
 8010204:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010208:	e853 3f00 	ldrex	r3, [r3]
 801020c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801020e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010210:	f023 0301 	bic.w	r3, r3, #1
 8010214:	667b      	str	r3, [r7, #100]	@ 0x64
 8010216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	3308      	adds	r3, #8
 801021c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801021e:	643a      	str	r2, [r7, #64]	@ 0x40
 8010220:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010222:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010224:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010226:	e841 2300 	strex	r3, r2, [r1]
 801022a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801022c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801022e:	2b00      	cmp	r3, #0
 8010230:	d1e5      	bne.n	80101fe <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010232:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	3308      	adds	r3, #8
 8010238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801023a:	6a3b      	ldr	r3, [r7, #32]
 801023c:	e853 3f00 	ldrex	r3, [r3]
 8010240:	61fb      	str	r3, [r7, #28]
   return(result);
 8010242:	69fb      	ldr	r3, [r7, #28]
 8010244:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010248:	663b      	str	r3, [r7, #96]	@ 0x60
 801024a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	3308      	adds	r3, #8
 8010250:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010252:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010254:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010256:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010258:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801025a:	e841 2300 	strex	r3, r2, [r1]
 801025e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010262:	2b00      	cmp	r3, #0
 8010264:	d1e5      	bne.n	8010232 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010266:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010268:	2220      	movs	r2, #32
 801026a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801026e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010272:	2b01      	cmp	r3, #1
 8010274:	d118      	bne.n	80102a8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010276:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	e853 3f00 	ldrex	r3, [r3]
 8010282:	60bb      	str	r3, [r7, #8]
   return(result);
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	f023 0310 	bic.w	r3, r3, #16
 801028a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801028c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	461a      	mov	r2, r3
 8010292:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010294:	61bb      	str	r3, [r7, #24]
 8010296:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010298:	6979      	ldr	r1, [r7, #20]
 801029a:	69ba      	ldr	r2, [r7, #24]
 801029c:	e841 2300 	strex	r3, r2, [r1]
 80102a0:	613b      	str	r3, [r7, #16]
   return(result);
 80102a2:	693b      	ldr	r3, [r7, #16]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d1e6      	bne.n	8010276 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80102a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80102aa:	2200      	movs	r2, #0
 80102ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80102b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80102b2:	2b01      	cmp	r3, #1
 80102b4:	d122      	bne.n	80102fc <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 80102b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80102b8:	2200      	movs	r2, #0
 80102ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	685b      	ldr	r3, [r3, #4]
 80102c4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 80102c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80102ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80102ce:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 80102d2:	429a      	cmp	r2, r3
 80102d4:	d204      	bcs.n	80102e0 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 80102d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80102d8:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 80102dc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80102e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80102e2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80102e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80102e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80102ec:	b29b      	uxth	r3, r3
 80102ee:	1ad3      	subs	r3, r2, r3
 80102f0:	b29b      	uxth	r3, r3
 80102f2:	4619      	mov	r1, r3
 80102f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80102f6:	f7ff fa59 	bl	800f7ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80102fa:	e002      	b.n	8010302 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 80102fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80102fe:	f7f5 fc57 	bl	8005bb0 <HAL_UART_RxCpltCallback>
}
 8010302:	bf00      	nop
 8010304:	3770      	adds	r7, #112	@ 0x70
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}

0801030a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801030a:	b580      	push	{r7, lr}
 801030c:	b084      	sub	sp, #16
 801030e:	af00      	add	r7, sp, #0
 8010310:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010316:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	2201      	movs	r2, #1
 801031c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010322:	2b01      	cmp	r3, #1
 8010324:	d123      	bne.n	801036e <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801032c:	085b      	lsrs	r3, r3, #1
 801032e:	b29a      	uxth	r2, r3
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	685b      	ldr	r3, [r3, #4]
 801033c:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8010344:	897a      	ldrh	r2, [r7, #10]
 8010346:	429a      	cmp	r2, r3
 8010348:	d803      	bhi.n	8010352 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	897a      	ldrh	r2, [r7, #10]
 801034e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801035e:	b29b      	uxth	r3, r3
 8010360:	1ad3      	subs	r3, r2, r3
 8010362:	b29b      	uxth	r3, r3
 8010364:	4619      	mov	r1, r3
 8010366:	68f8      	ldr	r0, [r7, #12]
 8010368:	f7ff fa20 	bl	800f7ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801036c:	e002      	b.n	8010374 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 801036e:	68f8      	ldr	r0, [r7, #12]
 8010370:	f7f5 fc42 	bl	8005bf8 <HAL_UART_RxHalfCpltCallback>
}
 8010374:	bf00      	nop
 8010376:	3710      	adds	r7, #16
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}

0801037c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b086      	sub	sp, #24
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010388:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801038a:	697b      	ldr	r3, [r7, #20]
 801038c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801038e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010396:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	689b      	ldr	r3, [r3, #8]
 801039e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80103a2:	2b80      	cmp	r3, #128	@ 0x80
 80103a4:	d109      	bne.n	80103ba <UART_DMAError+0x3e>
 80103a6:	693b      	ldr	r3, [r7, #16]
 80103a8:	2b21      	cmp	r3, #33	@ 0x21
 80103aa:	d106      	bne.n	80103ba <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	2200      	movs	r2, #0
 80103b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80103b4:	6978      	ldr	r0, [r7, #20]
 80103b6:	f7ff fe6f 	bl	8010098 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	689b      	ldr	r3, [r3, #8]
 80103c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103c4:	2b40      	cmp	r3, #64	@ 0x40
 80103c6:	d109      	bne.n	80103dc <UART_DMAError+0x60>
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	2b22      	cmp	r3, #34	@ 0x22
 80103cc:	d106      	bne.n	80103dc <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	2200      	movs	r2, #0
 80103d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80103d6:	6978      	ldr	r0, [r7, #20]
 80103d8:	f7ff fe84 	bl	80100e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80103e2:	f043 0210 	orr.w	r2, r3, #16
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80103ec:	6978      	ldr	r0, [r7, #20]
 80103ee:	f7f5 fc19 	bl	8005c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80103f2:	bf00      	nop
 80103f4:	3718      	adds	r7, #24
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}

080103fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80103fa:	b580      	push	{r7, lr}
 80103fc:	b084      	sub	sp, #16
 80103fe:	af00      	add	r7, sp, #0
 8010400:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010406:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	2200      	movs	r2, #0
 801040c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010410:	68f8      	ldr	r0, [r7, #12]
 8010412:	f7f5 fc07 	bl	8005c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010416:	bf00      	nop
 8010418:	3710      	adds	r7, #16
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}

0801041e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801041e:	b580      	push	{r7, lr}
 8010420:	b088      	sub	sp, #32
 8010422:	af00      	add	r7, sp, #0
 8010424:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	e853 3f00 	ldrex	r3, [r3]
 8010432:	60bb      	str	r3, [r7, #8]
   return(result);
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801043a:	61fb      	str	r3, [r7, #28]
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	461a      	mov	r2, r3
 8010442:	69fb      	ldr	r3, [r7, #28]
 8010444:	61bb      	str	r3, [r7, #24]
 8010446:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010448:	6979      	ldr	r1, [r7, #20]
 801044a:	69ba      	ldr	r2, [r7, #24]
 801044c:	e841 2300 	strex	r3, r2, [r1]
 8010450:	613b      	str	r3, [r7, #16]
   return(result);
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d1e6      	bne.n	8010426 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2220      	movs	r2, #32
 801045c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	2200      	movs	r2, #0
 8010462:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f7ff f997 	bl	800f798 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801046a:	bf00      	nop
 801046c:	3720      	adds	r7, #32
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}
	...

08010474 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8010474:	b480      	push	{r7}
 8010476:	b083      	sub	sp, #12
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d121      	bne.n	80104ca <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681a      	ldr	r2, [r3, #0]
 801048a:	4b27      	ldr	r3, [pc, #156]	@ (8010528 <FMC_SDRAM_Init+0xb4>)
 801048c:	4013      	ands	r3, r2
 801048e:	683a      	ldr	r2, [r7, #0]
 8010490:	6851      	ldr	r1, [r2, #4]
 8010492:	683a      	ldr	r2, [r7, #0]
 8010494:	6892      	ldr	r2, [r2, #8]
 8010496:	4311      	orrs	r1, r2
 8010498:	683a      	ldr	r2, [r7, #0]
 801049a:	68d2      	ldr	r2, [r2, #12]
 801049c:	4311      	orrs	r1, r2
 801049e:	683a      	ldr	r2, [r7, #0]
 80104a0:	6912      	ldr	r2, [r2, #16]
 80104a2:	4311      	orrs	r1, r2
 80104a4:	683a      	ldr	r2, [r7, #0]
 80104a6:	6952      	ldr	r2, [r2, #20]
 80104a8:	4311      	orrs	r1, r2
 80104aa:	683a      	ldr	r2, [r7, #0]
 80104ac:	6992      	ldr	r2, [r2, #24]
 80104ae:	4311      	orrs	r1, r2
 80104b0:	683a      	ldr	r2, [r7, #0]
 80104b2:	69d2      	ldr	r2, [r2, #28]
 80104b4:	4311      	orrs	r1, r2
 80104b6:	683a      	ldr	r2, [r7, #0]
 80104b8:	6a12      	ldr	r2, [r2, #32]
 80104ba:	4311      	orrs	r1, r2
 80104bc:	683a      	ldr	r2, [r7, #0]
 80104be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80104c0:	430a      	orrs	r2, r1
 80104c2:	431a      	orrs	r2, r3
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	601a      	str	r2, [r3, #0]
 80104c8:	e026      	b.n	8010518 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80104d2:	683b      	ldr	r3, [r7, #0]
 80104d4:	69d9      	ldr	r1, [r3, #28]
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	6a1b      	ldr	r3, [r3, #32]
 80104da:	4319      	orrs	r1, r3
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104e0:	430b      	orrs	r3, r1
 80104e2:	431a      	orrs	r2, r3
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	685a      	ldr	r2, [r3, #4]
 80104ec:	4b0e      	ldr	r3, [pc, #56]	@ (8010528 <FMC_SDRAM_Init+0xb4>)
 80104ee:	4013      	ands	r3, r2
 80104f0:	683a      	ldr	r2, [r7, #0]
 80104f2:	6851      	ldr	r1, [r2, #4]
 80104f4:	683a      	ldr	r2, [r7, #0]
 80104f6:	6892      	ldr	r2, [r2, #8]
 80104f8:	4311      	orrs	r1, r2
 80104fa:	683a      	ldr	r2, [r7, #0]
 80104fc:	68d2      	ldr	r2, [r2, #12]
 80104fe:	4311      	orrs	r1, r2
 8010500:	683a      	ldr	r2, [r7, #0]
 8010502:	6912      	ldr	r2, [r2, #16]
 8010504:	4311      	orrs	r1, r2
 8010506:	683a      	ldr	r2, [r7, #0]
 8010508:	6952      	ldr	r2, [r2, #20]
 801050a:	4311      	orrs	r1, r2
 801050c:	683a      	ldr	r2, [r7, #0]
 801050e:	6992      	ldr	r2, [r2, #24]
 8010510:	430a      	orrs	r2, r1
 8010512:	431a      	orrs	r2, r3
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8010518:	2300      	movs	r3, #0
}
 801051a:	4618      	mov	r0, r3
 801051c:	370c      	adds	r7, #12
 801051e:	46bd      	mov	sp, r7
 8010520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010524:	4770      	bx	lr
 8010526:	bf00      	nop
 8010528:	ffff8000 	.word	0xffff8000

0801052c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 801052c:	b480      	push	{r7}
 801052e:	b085      	sub	sp, #20
 8010530:	af00      	add	r7, sp, #0
 8010532:	60f8      	str	r0, [r7, #12]
 8010534:	60b9      	str	r1, [r7, #8]
 8010536:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d128      	bne.n	8010590 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	689b      	ldr	r3, [r3, #8]
 8010542:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	1e59      	subs	r1, r3, #1
 801054c:	68bb      	ldr	r3, [r7, #8]
 801054e:	685b      	ldr	r3, [r3, #4]
 8010550:	3b01      	subs	r3, #1
 8010552:	011b      	lsls	r3, r3, #4
 8010554:	4319      	orrs	r1, r3
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	689b      	ldr	r3, [r3, #8]
 801055a:	3b01      	subs	r3, #1
 801055c:	021b      	lsls	r3, r3, #8
 801055e:	4319      	orrs	r1, r3
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	68db      	ldr	r3, [r3, #12]
 8010564:	3b01      	subs	r3, #1
 8010566:	031b      	lsls	r3, r3, #12
 8010568:	4319      	orrs	r1, r3
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	691b      	ldr	r3, [r3, #16]
 801056e:	3b01      	subs	r3, #1
 8010570:	041b      	lsls	r3, r3, #16
 8010572:	4319      	orrs	r1, r3
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	695b      	ldr	r3, [r3, #20]
 8010578:	3b01      	subs	r3, #1
 801057a:	051b      	lsls	r3, r3, #20
 801057c:	4319      	orrs	r1, r3
 801057e:	68bb      	ldr	r3, [r7, #8]
 8010580:	699b      	ldr	r3, [r3, #24]
 8010582:	3b01      	subs	r3, #1
 8010584:	061b      	lsls	r3, r3, #24
 8010586:	430b      	orrs	r3, r1
 8010588:	431a      	orrs	r2, r3
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	609a      	str	r2, [r3, #8]
 801058e:	e02d      	b.n	80105ec <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	689a      	ldr	r2, [r3, #8]
 8010594:	4b19      	ldr	r3, [pc, #100]	@ (80105fc <FMC_SDRAM_Timing_Init+0xd0>)
 8010596:	4013      	ands	r3, r2
 8010598:	68ba      	ldr	r2, [r7, #8]
 801059a:	68d2      	ldr	r2, [r2, #12]
 801059c:	3a01      	subs	r2, #1
 801059e:	0311      	lsls	r1, r2, #12
 80105a0:	68ba      	ldr	r2, [r7, #8]
 80105a2:	6952      	ldr	r2, [r2, #20]
 80105a4:	3a01      	subs	r2, #1
 80105a6:	0512      	lsls	r2, r2, #20
 80105a8:	430a      	orrs	r2, r1
 80105aa:	431a      	orrs	r2, r3
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	68db      	ldr	r3, [r3, #12]
 80105b4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	1e59      	subs	r1, r3, #1
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	685b      	ldr	r3, [r3, #4]
 80105c2:	3b01      	subs	r3, #1
 80105c4:	011b      	lsls	r3, r3, #4
 80105c6:	4319      	orrs	r1, r3
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	689b      	ldr	r3, [r3, #8]
 80105cc:	3b01      	subs	r3, #1
 80105ce:	021b      	lsls	r3, r3, #8
 80105d0:	4319      	orrs	r1, r3
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	691b      	ldr	r3, [r3, #16]
 80105d6:	3b01      	subs	r3, #1
 80105d8:	041b      	lsls	r3, r3, #16
 80105da:	4319      	orrs	r1, r3
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	699b      	ldr	r3, [r3, #24]
 80105e0:	3b01      	subs	r3, #1
 80105e2:	061b      	lsls	r3, r3, #24
 80105e4:	430b      	orrs	r3, r1
 80105e6:	431a      	orrs	r2, r3
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80105ec:	2300      	movs	r3, #0
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	3714      	adds	r7, #20
 80105f2:	46bd      	mov	sp, r7
 80105f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f8:	4770      	bx	lr
 80105fa:	bf00      	nop
 80105fc:	ff0f0fff 	.word	0xff0f0fff

08010600 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010600:	b084      	sub	sp, #16
 8010602:	b480      	push	{r7}
 8010604:	b085      	sub	sp, #20
 8010606:	af00      	add	r7, sp, #0
 8010608:	6078      	str	r0, [r7, #4]
 801060a:	f107 001c 	add.w	r0, r7, #28
 801060e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010612:	2300      	movs	r3, #0
 8010614:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010616:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010618:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801061a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 801061c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 801061e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8010622:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8010626:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 801062a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 801062c:	68fa      	ldr	r2, [r7, #12]
 801062e:	4313      	orrs	r3, r2
 8010630:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	685a      	ldr	r2, [r3, #4]
 8010636:	4b07      	ldr	r3, [pc, #28]	@ (8010654 <SDMMC_Init+0x54>)
 8010638:	4013      	ands	r3, r2
 801063a:	68fa      	ldr	r2, [r7, #12]
 801063c:	431a      	orrs	r2, r3
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010642:	2300      	movs	r3, #0
}
 8010644:	4618      	mov	r0, r3
 8010646:	3714      	adds	r7, #20
 8010648:	46bd      	mov	sp, r7
 801064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064e:	b004      	add	sp, #16
 8010650:	4770      	bx	lr
 8010652:	bf00      	nop
 8010654:	ffff8100 	.word	0xffff8100

08010658 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010658:	b480      	push	{r7}
 801065a:	b083      	sub	sp, #12
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8010666:	4618      	mov	r0, r3
 8010668:	370c      	adds	r7, #12
 801066a:	46bd      	mov	sp, r7
 801066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010670:	4770      	bx	lr

08010672 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8010672:	b480      	push	{r7}
 8010674:	b083      	sub	sp, #12
 8010676:	af00      	add	r7, sp, #0
 8010678:	6078      	str	r0, [r7, #4]
 801067a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	681a      	ldr	r2, [r3, #0]
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010686:	2300      	movs	r3, #0
}
 8010688:	4618      	mov	r0, r3
 801068a:	370c      	adds	r7, #12
 801068c:	46bd      	mov	sp, r7
 801068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010692:	4770      	bx	lr

08010694 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8010694:	b480      	push	{r7}
 8010696:	b083      	sub	sp, #12
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2203      	movs	r2, #3
 80106a0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80106a2:	2300      	movs	r3, #0
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	370c      	adds	r7, #12
 80106a8:	46bd      	mov	sp, r7
 80106aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ae:	4770      	bx	lr

080106b0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80106b0:	b480      	push	{r7}
 80106b2:	b083      	sub	sp, #12
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	f003 0303 	and.w	r3, r3, #3
}
 80106c0:	4618      	mov	r0, r3
 80106c2:	370c      	adds	r7, #12
 80106c4:	46bd      	mov	sp, r7
 80106c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ca:	4770      	bx	lr

080106cc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80106cc:	b480      	push	{r7}
 80106ce:	b085      	sub	sp, #20
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80106d6:	2300      	movs	r3, #0
 80106d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	681a      	ldr	r2, [r3, #0]
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80106e6:	683b      	ldr	r3, [r7, #0]
 80106e8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80106ea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80106f0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80106f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80106f8:	68fa      	ldr	r2, [r7, #12]
 80106fa:	4313      	orrs	r3, r2
 80106fc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	68da      	ldr	r2, [r3, #12]
 8010702:	4b06      	ldr	r3, [pc, #24]	@ (801071c <SDMMC_SendCommand+0x50>)
 8010704:	4013      	ands	r3, r2
 8010706:	68fa      	ldr	r2, [r7, #12]
 8010708:	431a      	orrs	r2, r3
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801070e:	2300      	movs	r3, #0
}
 8010710:	4618      	mov	r0, r3
 8010712:	3714      	adds	r7, #20
 8010714:	46bd      	mov	sp, r7
 8010716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071a:	4770      	bx	lr
 801071c:	fffff000 	.word	0xfffff000

08010720 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010720:	b480      	push	{r7}
 8010722:	b083      	sub	sp, #12
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	691b      	ldr	r3, [r3, #16]
 801072c:	b2db      	uxtb	r3, r3
}
 801072e:	4618      	mov	r0, r3
 8010730:	370c      	adds	r7, #12
 8010732:	46bd      	mov	sp, r7
 8010734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010738:	4770      	bx	lr

0801073a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801073a:	b480      	push	{r7}
 801073c:	b085      	sub	sp, #20
 801073e:	af00      	add	r7, sp, #0
 8010740:	6078      	str	r0, [r7, #4]
 8010742:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	3314      	adds	r3, #20
 8010748:	461a      	mov	r2, r3
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	4413      	add	r3, r2
 801074e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	681b      	ldr	r3, [r3, #0]
}  
 8010754:	4618      	mov	r0, r3
 8010756:	3714      	adds	r7, #20
 8010758:	46bd      	mov	sp, r7
 801075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075e:	4770      	bx	lr

08010760 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010760:	b480      	push	{r7}
 8010762:	b085      	sub	sp, #20
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801076a:	2300      	movs	r3, #0
 801076c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	681a      	ldr	r2, [r3, #0]
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	685a      	ldr	r2, [r3, #4]
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010786:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801078c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010792:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010794:	68fa      	ldr	r2, [r7, #12]
 8010796:	4313      	orrs	r3, r2
 8010798:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801079e:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	431a      	orrs	r2, r3
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80107aa:	2300      	movs	r3, #0

}
 80107ac:	4618      	mov	r0, r3
 80107ae:	3714      	adds	r7, #20
 80107b0:	46bd      	mov	sp, r7
 80107b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b6:	4770      	bx	lr

080107b8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b088      	sub	sp, #32
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
 80107c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80107c2:	683b      	ldr	r3, [r7, #0]
 80107c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80107c6:	2310      	movs	r3, #16
 80107c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80107ca:	2340      	movs	r3, #64	@ 0x40
 80107cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80107ce:	2300      	movs	r3, #0
 80107d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80107d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80107d8:	f107 0308 	add.w	r3, r7, #8
 80107dc:	4619      	mov	r1, r3
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f7ff ff74 	bl	80106cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80107e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80107e8:	2110      	movs	r1, #16
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	f000 fa1a 	bl	8010c24 <SDMMC_GetCmdResp1>
 80107f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107f2:	69fb      	ldr	r3, [r7, #28]
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3720      	adds	r7, #32
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}

080107fc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b088      	sub	sp, #32
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
 8010804:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801080a:	2311      	movs	r3, #17
 801080c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801080e:	2340      	movs	r3, #64	@ 0x40
 8010810:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010812:	2300      	movs	r3, #0
 8010814:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010816:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801081a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801081c:	f107 0308 	add.w	r3, r7, #8
 8010820:	4619      	mov	r1, r3
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f7ff ff52 	bl	80106cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010828:	f241 3288 	movw	r2, #5000	@ 0x1388
 801082c:	2111      	movs	r1, #17
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f000 f9f8 	bl	8010c24 <SDMMC_GetCmdResp1>
 8010834:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010836:	69fb      	ldr	r3, [r7, #28]
}
 8010838:	4618      	mov	r0, r3
 801083a:	3720      	adds	r7, #32
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}

08010840 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b088      	sub	sp, #32
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
 8010848:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801084e:	2312      	movs	r3, #18
 8010850:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010852:	2340      	movs	r3, #64	@ 0x40
 8010854:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010856:	2300      	movs	r3, #0
 8010858:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801085a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801085e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010860:	f107 0308 	add.w	r3, r7, #8
 8010864:	4619      	mov	r1, r3
 8010866:	6878      	ldr	r0, [r7, #4]
 8010868:	f7ff ff30 	bl	80106cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801086c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010870:	2112      	movs	r1, #18
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f000 f9d6 	bl	8010c24 <SDMMC_GetCmdResp1>
 8010878:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801087a:	69fb      	ldr	r3, [r7, #28]
}
 801087c:	4618      	mov	r0, r3
 801087e:	3720      	adds	r7, #32
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}

08010884 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b088      	sub	sp, #32
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
 801088c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010892:	2318      	movs	r3, #24
 8010894:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010896:	2340      	movs	r3, #64	@ 0x40
 8010898:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801089a:	2300      	movs	r3, #0
 801089c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801089e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80108a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80108a4:	f107 0308 	add.w	r3, r7, #8
 80108a8:	4619      	mov	r1, r3
 80108aa:	6878      	ldr	r0, [r7, #4]
 80108ac:	f7ff ff0e 	bl	80106cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80108b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80108b4:	2118      	movs	r1, #24
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	f000 f9b4 	bl	8010c24 <SDMMC_GetCmdResp1>
 80108bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108be:	69fb      	ldr	r3, [r7, #28]
}
 80108c0:	4618      	mov	r0, r3
 80108c2:	3720      	adds	r7, #32
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}

080108c8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b088      	sub	sp, #32
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80108d6:	2319      	movs	r3, #25
 80108d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80108da:	2340      	movs	r3, #64	@ 0x40
 80108dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80108de:	2300      	movs	r3, #0
 80108e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80108e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80108e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80108e8:	f107 0308 	add.w	r3, r7, #8
 80108ec:	4619      	mov	r1, r3
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f7ff feec 	bl	80106cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80108f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80108f8:	2119      	movs	r1, #25
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f000 f992 	bl	8010c24 <SDMMC_GetCmdResp1>
 8010900:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010902:	69fb      	ldr	r3, [r7, #28]
}
 8010904:	4618      	mov	r0, r3
 8010906:	3720      	adds	r7, #32
 8010908:	46bd      	mov	sp, r7
 801090a:	bd80      	pop	{r7, pc}

0801090c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b088      	sub	sp, #32
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010914:	2300      	movs	r3, #0
 8010916:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010918:	230c      	movs	r3, #12
 801091a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801091c:	2340      	movs	r3, #64	@ 0x40
 801091e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010920:	2300      	movs	r3, #0
 8010922:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010924:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010928:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801092a:	f107 0308 	add.w	r3, r7, #8
 801092e:	4619      	mov	r1, r3
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f7ff fecb 	bl	80106cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010936:	4a05      	ldr	r2, [pc, #20]	@ (801094c <SDMMC_CmdStopTransfer+0x40>)
 8010938:	210c      	movs	r1, #12
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f000 f972 	bl	8010c24 <SDMMC_GetCmdResp1>
 8010940:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010942:	69fb      	ldr	r3, [r7, #28]
}
 8010944:	4618      	mov	r0, r3
 8010946:	3720      	adds	r7, #32
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}
 801094c:	05f5e100 	.word	0x05f5e100

08010950 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b08a      	sub	sp, #40	@ 0x28
 8010954:	af00      	add	r7, sp, #0
 8010956:	60f8      	str	r0, [r7, #12]
 8010958:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010960:	2307      	movs	r3, #7
 8010962:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010964:	2340      	movs	r3, #64	@ 0x40
 8010966:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010968:	2300      	movs	r3, #0
 801096a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801096c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010970:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010972:	f107 0310 	add.w	r3, r7, #16
 8010976:	4619      	mov	r1, r3
 8010978:	68f8      	ldr	r0, [r7, #12]
 801097a:	f7ff fea7 	bl	80106cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801097e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010982:	2107      	movs	r1, #7
 8010984:	68f8      	ldr	r0, [r7, #12]
 8010986:	f000 f94d 	bl	8010c24 <SDMMC_GetCmdResp1>
 801098a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 801098c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801098e:	4618      	mov	r0, r3
 8010990:	3728      	adds	r7, #40	@ 0x28
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}

08010996 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010996:	b580      	push	{r7, lr}
 8010998:	b088      	sub	sp, #32
 801099a:	af00      	add	r7, sp, #0
 801099c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801099e:	2300      	movs	r3, #0
 80109a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80109a2:	2300      	movs	r3, #0
 80109a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80109a6:	2300      	movs	r3, #0
 80109a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109aa:	2300      	movs	r3, #0
 80109ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80109b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109b4:	f107 0308 	add.w	r3, r7, #8
 80109b8:	4619      	mov	r1, r3
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f7ff fe86 	bl	80106cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	f000 fb67 	bl	8011094 <SDMMC_GetCmdError>
 80109c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109c8:	69fb      	ldr	r3, [r7, #28]
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3720      	adds	r7, #32
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}

080109d2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80109d2:	b580      	push	{r7, lr}
 80109d4:	b088      	sub	sp, #32
 80109d6:	af00      	add	r7, sp, #0
 80109d8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80109da:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80109de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80109e0:	2308      	movs	r3, #8
 80109e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80109e4:	2340      	movs	r3, #64	@ 0x40
 80109e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109e8:	2300      	movs	r3, #0
 80109ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80109f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109f2:	f107 0308 	add.w	r3, r7, #8
 80109f6:	4619      	mov	r1, r3
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f7ff fe67 	bl	80106cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f000 fafa 	bl	8010ff8 <SDMMC_GetCmdResp7>
 8010a04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a06:	69fb      	ldr	r3, [r7, #28]
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3720      	adds	r7, #32
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}

08010a10 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b088      	sub	sp, #32
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
 8010a18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010a1e:	2337      	movs	r3, #55	@ 0x37
 8010a20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a22:	2340      	movs	r3, #64	@ 0x40
 8010a24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a26:	2300      	movs	r3, #0
 8010a28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a30:	f107 0308 	add.w	r3, r7, #8
 8010a34:	4619      	mov	r1, r3
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f7ff fe48 	bl	80106cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a40:	2137      	movs	r1, #55	@ 0x37
 8010a42:	6878      	ldr	r0, [r7, #4]
 8010a44:	f000 f8ee 	bl	8010c24 <SDMMC_GetCmdResp1>
 8010a48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a4a:	69fb      	ldr	r3, [r7, #28]
}
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	3720      	adds	r7, #32
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}

08010a54 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b088      	sub	sp, #32
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010a5e:	683a      	ldr	r2, [r7, #0]
 8010a60:	4b0d      	ldr	r3, [pc, #52]	@ (8010a98 <SDMMC_CmdAppOperCommand+0x44>)
 8010a62:	4313      	orrs	r3, r2
 8010a64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010a66:	2329      	movs	r3, #41	@ 0x29
 8010a68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a6a:	2340      	movs	r3, #64	@ 0x40
 8010a6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a78:	f107 0308 	add.w	r3, r7, #8
 8010a7c:	4619      	mov	r1, r3
 8010a7e:	6878      	ldr	r0, [r7, #4]
 8010a80:	f7ff fe24 	bl	80106cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f000 fa03 	bl	8010e90 <SDMMC_GetCmdResp3>
 8010a8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a8c:	69fb      	ldr	r3, [r7, #28]
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	3720      	adds	r7, #32
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}
 8010a96:	bf00      	nop
 8010a98:	80100000 	.word	0x80100000

08010a9c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b088      	sub	sp, #32
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010aaa:	2306      	movs	r3, #6
 8010aac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010aae:	2340      	movs	r3, #64	@ 0x40
 8010ab0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ab6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010aba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010abc:	f107 0308 	add.w	r3, r7, #8
 8010ac0:	4619      	mov	r1, r3
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f7ff fe02 	bl	80106cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010ac8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010acc:	2106      	movs	r1, #6
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f000 f8a8 	bl	8010c24 <SDMMC_GetCmdResp1>
 8010ad4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ad6:	69fb      	ldr	r3, [r7, #28]
}
 8010ad8:	4618      	mov	r0, r3
 8010ada:	3720      	adds	r7, #32
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}

08010ae0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b088      	sub	sp, #32
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010ae8:	2300      	movs	r3, #0
 8010aea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010aec:	2333      	movs	r3, #51	@ 0x33
 8010aee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010af0:	2340      	movs	r3, #64	@ 0x40
 8010af2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010af4:	2300      	movs	r3, #0
 8010af6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010af8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010afc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010afe:	f107 0308 	add.w	r3, r7, #8
 8010b02:	4619      	mov	r1, r3
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	f7ff fde1 	bl	80106cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010b0e:	2133      	movs	r1, #51	@ 0x33
 8010b10:	6878      	ldr	r0, [r7, #4]
 8010b12:	f000 f887 	bl	8010c24 <SDMMC_GetCmdResp1>
 8010b16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b18:	69fb      	ldr	r3, [r7, #28]
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3720      	adds	r7, #32
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}

08010b22 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010b22:	b580      	push	{r7, lr}
 8010b24:	b088      	sub	sp, #32
 8010b26:	af00      	add	r7, sp, #0
 8010b28:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010b2e:	2302      	movs	r3, #2
 8010b30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010b32:	23c0      	movs	r3, #192	@ 0xc0
 8010b34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b36:	2300      	movs	r3, #0
 8010b38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b40:	f107 0308 	add.w	r3, r7, #8
 8010b44:	4619      	mov	r1, r3
 8010b46:	6878      	ldr	r0, [r7, #4]
 8010b48:	f7ff fdc0 	bl	80106cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f000 f957 	bl	8010e00 <SDMMC_GetCmdResp2>
 8010b52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b54:	69fb      	ldr	r3, [r7, #28]
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3720      	adds	r7, #32
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}

08010b5e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010b5e:	b580      	push	{r7, lr}
 8010b60:	b088      	sub	sp, #32
 8010b62:	af00      	add	r7, sp, #0
 8010b64:	6078      	str	r0, [r7, #4]
 8010b66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010b6c:	2309      	movs	r3, #9
 8010b6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010b70:	23c0      	movs	r3, #192	@ 0xc0
 8010b72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b74:	2300      	movs	r3, #0
 8010b76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b7e:	f107 0308 	add.w	r3, r7, #8
 8010b82:	4619      	mov	r1, r3
 8010b84:	6878      	ldr	r0, [r7, #4]
 8010b86:	f7ff fda1 	bl	80106cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f000 f938 	bl	8010e00 <SDMMC_GetCmdResp2>
 8010b90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b92:	69fb      	ldr	r3, [r7, #28]
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3720      	adds	r7, #32
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b088      	sub	sp, #32
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010baa:	2303      	movs	r3, #3
 8010bac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010bae:	2340      	movs	r3, #64	@ 0x40
 8010bb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010bba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010bbc:	f107 0308 	add.w	r3, r7, #8
 8010bc0:	4619      	mov	r1, r3
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f7ff fd82 	bl	80106cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010bc8:	683a      	ldr	r2, [r7, #0]
 8010bca:	2103      	movs	r1, #3
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f000 f99d 	bl	8010f0c <SDMMC_GetCmdResp6>
 8010bd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bd4:	69fb      	ldr	r3, [r7, #28]
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	3720      	adds	r7, #32
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}

08010bde <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010bde:	b580      	push	{r7, lr}
 8010be0:	b088      	sub	sp, #32
 8010be2:	af00      	add	r7, sp, #0
 8010be4:	6078      	str	r0, [r7, #4]
 8010be6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010bec:	230d      	movs	r3, #13
 8010bee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010bf0:	2340      	movs	r3, #64	@ 0x40
 8010bf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bf8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010bfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010bfe:	f107 0308 	add.w	r3, r7, #8
 8010c02:	4619      	mov	r1, r3
 8010c04:	6878      	ldr	r0, [r7, #4]
 8010c06:	f7ff fd61 	bl	80106cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010c0e:	210d      	movs	r1, #13
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f000 f807 	bl	8010c24 <SDMMC_GetCmdResp1>
 8010c16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c18:	69fb      	ldr	r3, [r7, #28]
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3720      	adds	r7, #32
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
	...

08010c24 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b088      	sub	sp, #32
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	60f8      	str	r0, [r7, #12]
 8010c2c:	460b      	mov	r3, r1
 8010c2e:	607a      	str	r2, [r7, #4]
 8010c30:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010c32:	4b70      	ldr	r3, [pc, #448]	@ (8010df4 <SDMMC_GetCmdResp1+0x1d0>)
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	4a70      	ldr	r2, [pc, #448]	@ (8010df8 <SDMMC_GetCmdResp1+0x1d4>)
 8010c38:	fba2 2303 	umull	r2, r3, r2, r3
 8010c3c:	0a5a      	lsrs	r2, r3, #9
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	fb02 f303 	mul.w	r3, r2, r3
 8010c44:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010c46:	69fb      	ldr	r3, [r7, #28]
 8010c48:	1e5a      	subs	r2, r3, #1
 8010c4a:	61fa      	str	r2, [r7, #28]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d102      	bne.n	8010c56 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c50:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010c54:	e0c9      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c5a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010c5c:	69bb      	ldr	r3, [r7, #24]
 8010c5e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d0ef      	beq.n	8010c46 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010c66:	69bb      	ldr	r3, [r7, #24]
 8010c68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d1ea      	bne.n	8010c46 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c74:	f003 0304 	and.w	r3, r3, #4
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d004      	beq.n	8010c86 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	2204      	movs	r2, #4
 8010c80:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c82:	2304      	movs	r3, #4
 8010c84:	e0b1      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c8a:	f003 0301 	and.w	r3, r3, #1
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d004      	beq.n	8010c9c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	2201      	movs	r2, #1
 8010c96:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c98:	2301      	movs	r3, #1
 8010c9a:	e0a6      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	22c5      	movs	r2, #197	@ 0xc5
 8010ca0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010ca2:	68f8      	ldr	r0, [r7, #12]
 8010ca4:	f7ff fd3c 	bl	8010720 <SDMMC_GetCommandResponse>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	461a      	mov	r2, r3
 8010cac:	7afb      	ldrb	r3, [r7, #11]
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	d001      	beq.n	8010cb6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010cb2:	2301      	movs	r3, #1
 8010cb4:	e099      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010cb6:	2100      	movs	r1, #0
 8010cb8:	68f8      	ldr	r0, [r7, #12]
 8010cba:	f7ff fd3e 	bl	801073a <SDMMC_GetResponse>
 8010cbe:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010cc0:	697a      	ldr	r2, [r7, #20]
 8010cc2:	4b4e      	ldr	r3, [pc, #312]	@ (8010dfc <SDMMC_GetCmdResp1+0x1d8>)
 8010cc4:	4013      	ands	r3, r2
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d101      	bne.n	8010cce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010cca:	2300      	movs	r3, #0
 8010ccc:	e08d      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010cce:	697b      	ldr	r3, [r7, #20]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	da02      	bge.n	8010cda <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010cd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010cd8:	e087      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d001      	beq.n	8010ce8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010ce4:	2340      	movs	r3, #64	@ 0x40
 8010ce6:	e080      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010ce8:	697b      	ldr	r3, [r7, #20]
 8010cea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d001      	beq.n	8010cf6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010cf2:	2380      	movs	r3, #128	@ 0x80
 8010cf4:	e079      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010cf6:	697b      	ldr	r3, [r7, #20]
 8010cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d002      	beq.n	8010d06 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010d00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010d04:	e071      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d002      	beq.n	8010d16 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010d10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010d14:	e069      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d002      	beq.n	8010d26 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010d20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010d24:	e061      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010d26:	697b      	ldr	r3, [r7, #20]
 8010d28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d002      	beq.n	8010d36 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010d30:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010d34:	e059      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010d36:	697b      	ldr	r3, [r7, #20]
 8010d38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d002      	beq.n	8010d46 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010d40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010d44:	e051      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010d46:	697b      	ldr	r3, [r7, #20]
 8010d48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d002      	beq.n	8010d56 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010d50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010d54:	e049      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010d56:	697b      	ldr	r3, [r7, #20]
 8010d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d002      	beq.n	8010d66 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010d60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010d64:	e041      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d002      	beq.n	8010d76 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010d70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010d74:	e039      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d002      	beq.n	8010d86 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010d80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010d84:	e031      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010d86:	697b      	ldr	r3, [r7, #20]
 8010d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d002      	beq.n	8010d96 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010d90:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010d94:	e029      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010d96:	697b      	ldr	r3, [r7, #20]
 8010d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d002      	beq.n	8010da6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010da0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010da4:	e021      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010da6:	697b      	ldr	r3, [r7, #20]
 8010da8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d002      	beq.n	8010db6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010db0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010db4:	e019      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010db6:	697b      	ldr	r3, [r7, #20]
 8010db8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d002      	beq.n	8010dc6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010dc0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010dc4:	e011      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010dc6:	697b      	ldr	r3, [r7, #20]
 8010dc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d002      	beq.n	8010dd6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010dd0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8010dd4:	e009      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010dd6:	697b      	ldr	r3, [r7, #20]
 8010dd8:	f003 0308 	and.w	r3, r3, #8
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d002      	beq.n	8010de6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010de0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010de4:	e001      	b.n	8010dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010de6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010dea:	4618      	mov	r0, r3
 8010dec:	3720      	adds	r7, #32
 8010dee:	46bd      	mov	sp, r7
 8010df0:	bd80      	pop	{r7, pc}
 8010df2:	bf00      	nop
 8010df4:	2000001c 	.word	0x2000001c
 8010df8:	10624dd3 	.word	0x10624dd3
 8010dfc:	fdffe008 	.word	0xfdffe008

08010e00 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010e00:	b480      	push	{r7}
 8010e02:	b085      	sub	sp, #20
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010e08:	4b1f      	ldr	r3, [pc, #124]	@ (8010e88 <SDMMC_GetCmdResp2+0x88>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8010e8c <SDMMC_GetCmdResp2+0x8c>)
 8010e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8010e12:	0a5b      	lsrs	r3, r3, #9
 8010e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010e18:	fb02 f303 	mul.w	r3, r2, r3
 8010e1c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	1e5a      	subs	r2, r3, #1
 8010e22:	60fa      	str	r2, [r7, #12]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d102      	bne.n	8010e2e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e28:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010e2c:	e026      	b.n	8010e7c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e32:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010e34:	68bb      	ldr	r3, [r7, #8]
 8010e36:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d0ef      	beq.n	8010e1e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d1ea      	bne.n	8010e1e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e4c:	f003 0304 	and.w	r3, r3, #4
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d004      	beq.n	8010e5e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2204      	movs	r2, #4
 8010e58:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e5a:	2304      	movs	r3, #4
 8010e5c:	e00e      	b.n	8010e7c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e62:	f003 0301 	and.w	r3, r3, #1
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d004      	beq.n	8010e74 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2201      	movs	r2, #1
 8010e6e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e70:	2301      	movs	r3, #1
 8010e72:	e003      	b.n	8010e7c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	22c5      	movs	r2, #197	@ 0xc5
 8010e78:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010e7a:	2300      	movs	r3, #0
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3714      	adds	r7, #20
 8010e80:	46bd      	mov	sp, r7
 8010e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e86:	4770      	bx	lr
 8010e88:	2000001c 	.word	0x2000001c
 8010e8c:	10624dd3 	.word	0x10624dd3

08010e90 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010e90:	b480      	push	{r7}
 8010e92:	b085      	sub	sp, #20
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010e98:	4b1a      	ldr	r3, [pc, #104]	@ (8010f04 <SDMMC_GetCmdResp3+0x74>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8010f08 <SDMMC_GetCmdResp3+0x78>)
 8010e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8010ea2:	0a5b      	lsrs	r3, r3, #9
 8010ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ea8:	fb02 f303 	mul.w	r3, r2, r3
 8010eac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	1e5a      	subs	r2, r3, #1
 8010eb2:	60fa      	str	r2, [r7, #12]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d102      	bne.n	8010ebe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010eb8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010ebc:	e01b      	b.n	8010ef6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ec2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d0ef      	beq.n	8010eae <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d1ea      	bne.n	8010eae <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010edc:	f003 0304 	and.w	r3, r3, #4
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d004      	beq.n	8010eee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	2204      	movs	r2, #4
 8010ee8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010eea:	2304      	movs	r3, #4
 8010eec:	e003      	b.n	8010ef6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	22c5      	movs	r2, #197	@ 0xc5
 8010ef2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010ef4:	2300      	movs	r3, #0
}
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	3714      	adds	r7, #20
 8010efa:	46bd      	mov	sp, r7
 8010efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f00:	4770      	bx	lr
 8010f02:	bf00      	nop
 8010f04:	2000001c 	.word	0x2000001c
 8010f08:	10624dd3 	.word	0x10624dd3

08010f0c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b088      	sub	sp, #32
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	60f8      	str	r0, [r7, #12]
 8010f14:	460b      	mov	r3, r1
 8010f16:	607a      	str	r2, [r7, #4]
 8010f18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010f1a:	4b35      	ldr	r3, [pc, #212]	@ (8010ff0 <SDMMC_GetCmdResp6+0xe4>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	4a35      	ldr	r2, [pc, #212]	@ (8010ff4 <SDMMC_GetCmdResp6+0xe8>)
 8010f20:	fba2 2303 	umull	r2, r3, r2, r3
 8010f24:	0a5b      	lsrs	r3, r3, #9
 8010f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010f2a:	fb02 f303 	mul.w	r3, r2, r3
 8010f2e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010f30:	69fb      	ldr	r3, [r7, #28]
 8010f32:	1e5a      	subs	r2, r3, #1
 8010f34:	61fa      	str	r2, [r7, #28]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d102      	bne.n	8010f40 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f3a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010f3e:	e052      	b.n	8010fe6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f44:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f46:	69bb      	ldr	r3, [r7, #24]
 8010f48:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d0ef      	beq.n	8010f30 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010f50:	69bb      	ldr	r3, [r7, #24]
 8010f52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d1ea      	bne.n	8010f30 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f5e:	f003 0304 	and.w	r3, r3, #4
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d004      	beq.n	8010f70 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	2204      	movs	r2, #4
 8010f6a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f6c:	2304      	movs	r3, #4
 8010f6e:	e03a      	b.n	8010fe6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f74:	f003 0301 	and.w	r3, r3, #1
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d004      	beq.n	8010f86 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	2201      	movs	r2, #1
 8010f80:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f82:	2301      	movs	r3, #1
 8010f84:	e02f      	b.n	8010fe6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010f86:	68f8      	ldr	r0, [r7, #12]
 8010f88:	f7ff fbca 	bl	8010720 <SDMMC_GetCommandResponse>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	461a      	mov	r2, r3
 8010f90:	7afb      	ldrb	r3, [r7, #11]
 8010f92:	4293      	cmp	r3, r2
 8010f94:	d001      	beq.n	8010f9a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f96:	2301      	movs	r3, #1
 8010f98:	e025      	b.n	8010fe6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	22c5      	movs	r2, #197	@ 0xc5
 8010f9e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010fa0:	2100      	movs	r1, #0
 8010fa2:	68f8      	ldr	r0, [r7, #12]
 8010fa4:	f7ff fbc9 	bl	801073a <SDMMC_GetResponse>
 8010fa8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d106      	bne.n	8010fc2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	0c1b      	lsrs	r3, r3, #16
 8010fb8:	b29a      	uxth	r2, r3
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	e011      	b.n	8010fe6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010fc2:	697b      	ldr	r3, [r7, #20]
 8010fc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d002      	beq.n	8010fd2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010fcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010fd0:	e009      	b.n	8010fe6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010fd2:	697b      	ldr	r3, [r7, #20]
 8010fd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d002      	beq.n	8010fe2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010fdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010fe0:	e001      	b.n	8010fe6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010fe2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	3720      	adds	r7, #32
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}
 8010fee:	bf00      	nop
 8010ff0:	2000001c 	.word	0x2000001c
 8010ff4:	10624dd3 	.word	0x10624dd3

08010ff8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010ff8:	b480      	push	{r7}
 8010ffa:	b085      	sub	sp, #20
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011000:	4b22      	ldr	r3, [pc, #136]	@ (801108c <SDMMC_GetCmdResp7+0x94>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	4a22      	ldr	r2, [pc, #136]	@ (8011090 <SDMMC_GetCmdResp7+0x98>)
 8011006:	fba2 2303 	umull	r2, r3, r2, r3
 801100a:	0a5b      	lsrs	r3, r3, #9
 801100c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011010:	fb02 f303 	mul.w	r3, r2, r3
 8011014:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	1e5a      	subs	r2, r3, #1
 801101a:	60fa      	str	r2, [r7, #12]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d102      	bne.n	8011026 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011020:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011024:	e02c      	b.n	8011080 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801102a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011032:	2b00      	cmp	r3, #0
 8011034:	d0ef      	beq.n	8011016 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011036:	68bb      	ldr	r3, [r7, #8]
 8011038:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801103c:	2b00      	cmp	r3, #0
 801103e:	d1ea      	bne.n	8011016 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011044:	f003 0304 	and.w	r3, r3, #4
 8011048:	2b00      	cmp	r3, #0
 801104a:	d004      	beq.n	8011056 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2204      	movs	r2, #4
 8011050:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011052:	2304      	movs	r3, #4
 8011054:	e014      	b.n	8011080 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801105a:	f003 0301 	and.w	r3, r3, #1
 801105e:	2b00      	cmp	r3, #0
 8011060:	d004      	beq.n	801106c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	2201      	movs	r2, #1
 8011066:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011068:	2301      	movs	r3, #1
 801106a:	e009      	b.n	8011080 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011074:	2b00      	cmp	r3, #0
 8011076:	d002      	beq.n	801107e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2240      	movs	r2, #64	@ 0x40
 801107c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801107e:	2300      	movs	r3, #0
  
}
 8011080:	4618      	mov	r0, r3
 8011082:	3714      	adds	r7, #20
 8011084:	46bd      	mov	sp, r7
 8011086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108a:	4770      	bx	lr
 801108c:	2000001c 	.word	0x2000001c
 8011090:	10624dd3 	.word	0x10624dd3

08011094 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011094:	b480      	push	{r7}
 8011096:	b085      	sub	sp, #20
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801109c:	4b11      	ldr	r3, [pc, #68]	@ (80110e4 <SDMMC_GetCmdError+0x50>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	4a11      	ldr	r2, [pc, #68]	@ (80110e8 <SDMMC_GetCmdError+0x54>)
 80110a2:	fba2 2303 	umull	r2, r3, r2, r3
 80110a6:	0a5b      	lsrs	r3, r3, #9
 80110a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80110ac:	fb02 f303 	mul.w	r3, r2, r3
 80110b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	1e5a      	subs	r2, r3, #1
 80110b6:	60fa      	str	r2, [r7, #12]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d102      	bne.n	80110c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80110c0:	e009      	b.n	80110d6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d0f1      	beq.n	80110b2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	22c5      	movs	r2, #197	@ 0xc5
 80110d2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80110d4:	2300      	movs	r3, #0
}
 80110d6:	4618      	mov	r0, r3
 80110d8:	3714      	adds	r7, #20
 80110da:	46bd      	mov	sp, r7
 80110dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e0:	4770      	bx	lr
 80110e2:	bf00      	nop
 80110e4:	2000001c 	.word	0x2000001c
 80110e8:	10624dd3 	.word	0x10624dd3

080110ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80110ec:	b480      	push	{r7}
 80110ee:	b083      	sub	sp, #12
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	689b      	ldr	r3, [r3, #8]
 80110f8:	f043 0201 	orr.w	r2, r3, #1
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011100:	2300      	movs	r3, #0
}
 8011102:	4618      	mov	r0, r3
 8011104:	370c      	adds	r7, #12
 8011106:	46bd      	mov	sp, r7
 8011108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110c:	4770      	bx	lr

0801110e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801110e:	b480      	push	{r7}
 8011110:	b083      	sub	sp, #12
 8011112:	af00      	add	r7, sp, #0
 8011114:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	689b      	ldr	r3, [r3, #8]
 801111a:	f023 0201 	bic.w	r2, r3, #1
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011122:	2300      	movs	r3, #0
}
 8011124:	4618      	mov	r0, r3
 8011126:	370c      	adds	r7, #12
 8011128:	46bd      	mov	sp, r7
 801112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112e:	4770      	bx	lr

08011130 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011130:	b480      	push	{r7}
 8011132:	b085      	sub	sp, #20
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
 8011138:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801113a:	2300      	movs	r3, #0
 801113c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	3301      	adds	r3, #1
 8011142:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801114a:	d901      	bls.n	8011150 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801114c:	2303      	movs	r3, #3
 801114e:	e01b      	b.n	8011188 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	691b      	ldr	r3, [r3, #16]
 8011154:	2b00      	cmp	r3, #0
 8011156:	daf2      	bge.n	801113e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011158:	2300      	movs	r3, #0
 801115a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	019b      	lsls	r3, r3, #6
 8011160:	f043 0220 	orr.w	r2, r3, #32
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	3301      	adds	r3, #1
 801116c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011174:	d901      	bls.n	801117a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011176:	2303      	movs	r3, #3
 8011178:	e006      	b.n	8011188 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	691b      	ldr	r3, [r3, #16]
 801117e:	f003 0320 	and.w	r3, r3, #32
 8011182:	2b20      	cmp	r3, #32
 8011184:	d0f0      	beq.n	8011168 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011186:	2300      	movs	r3, #0
}
 8011188:	4618      	mov	r0, r3
 801118a:	3714      	adds	r7, #20
 801118c:	46bd      	mov	sp, r7
 801118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011192:	4770      	bx	lr

08011194 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011194:	b480      	push	{r7}
 8011196:	b085      	sub	sp, #20
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801119c:	2300      	movs	r3, #0
 801119e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	3301      	adds	r3, #1
 80111a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80111ac:	d901      	bls.n	80111b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80111ae:	2303      	movs	r3, #3
 80111b0:	e018      	b.n	80111e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	691b      	ldr	r3, [r3, #16]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	daf2      	bge.n	80111a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80111ba:	2300      	movs	r3, #0
 80111bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	2210      	movs	r2, #16
 80111c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	3301      	adds	r3, #1
 80111c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80111d0:	d901      	bls.n	80111d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80111d2:	2303      	movs	r3, #3
 80111d4:	e006      	b.n	80111e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	691b      	ldr	r3, [r3, #16]
 80111da:	f003 0310 	and.w	r3, r3, #16
 80111de:	2b10      	cmp	r3, #16
 80111e0:	d0f0      	beq.n	80111c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80111e2:	2300      	movs	r3, #0
}
 80111e4:	4618      	mov	r0, r3
 80111e6:	3714      	adds	r7, #20
 80111e8:	46bd      	mov	sp, r7
 80111ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ee:	4770      	bx	lr

080111f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80111f0:	b480      	push	{r7}
 80111f2:	b08b      	sub	sp, #44	@ 0x2c
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	60f8      	str	r0, [r7, #12]
 80111f8:	60b9      	str	r1, [r7, #8]
 80111fa:	4613      	mov	r3, r2
 80111fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011206:	88fb      	ldrh	r3, [r7, #6]
 8011208:	089b      	lsrs	r3, r3, #2
 801120a:	b29b      	uxth	r3, r3
 801120c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801120e:	88fb      	ldrh	r3, [r7, #6]
 8011210:	f003 0303 	and.w	r3, r3, #3
 8011214:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011216:	2300      	movs	r3, #0
 8011218:	623b      	str	r3, [r7, #32]
 801121a:	e014      	b.n	8011246 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801121c:	69bb      	ldr	r3, [r7, #24]
 801121e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011222:	681a      	ldr	r2, [r3, #0]
 8011224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011226:	601a      	str	r2, [r3, #0]
    pDest++;
 8011228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801122a:	3301      	adds	r3, #1
 801122c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011230:	3301      	adds	r3, #1
 8011232:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011236:	3301      	adds	r3, #1
 8011238:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801123a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801123c:	3301      	adds	r3, #1
 801123e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8011240:	6a3b      	ldr	r3, [r7, #32]
 8011242:	3301      	adds	r3, #1
 8011244:	623b      	str	r3, [r7, #32]
 8011246:	6a3a      	ldr	r2, [r7, #32]
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	429a      	cmp	r2, r3
 801124c:	d3e6      	bcc.n	801121c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801124e:	8bfb      	ldrh	r3, [r7, #30]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d01e      	beq.n	8011292 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011254:	2300      	movs	r3, #0
 8011256:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011258:	69bb      	ldr	r3, [r7, #24]
 801125a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801125e:	461a      	mov	r2, r3
 8011260:	f107 0310 	add.w	r3, r7, #16
 8011264:	6812      	ldr	r2, [r2, #0]
 8011266:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011268:	693a      	ldr	r2, [r7, #16]
 801126a:	6a3b      	ldr	r3, [r7, #32]
 801126c:	b2db      	uxtb	r3, r3
 801126e:	00db      	lsls	r3, r3, #3
 8011270:	fa22 f303 	lsr.w	r3, r2, r3
 8011274:	b2da      	uxtb	r2, r3
 8011276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011278:	701a      	strb	r2, [r3, #0]
      i++;
 801127a:	6a3b      	ldr	r3, [r7, #32]
 801127c:	3301      	adds	r3, #1
 801127e:	623b      	str	r3, [r7, #32]
      pDest++;
 8011280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011282:	3301      	adds	r3, #1
 8011284:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8011286:	8bfb      	ldrh	r3, [r7, #30]
 8011288:	3b01      	subs	r3, #1
 801128a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801128c:	8bfb      	ldrh	r3, [r7, #30]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d1ea      	bne.n	8011268 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011294:	4618      	mov	r0, r3
 8011296:	372c      	adds	r7, #44	@ 0x2c
 8011298:	46bd      	mov	sp, r7
 801129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129e:	4770      	bx	lr

080112a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80112a0:	b480      	push	{r7}
 80112a2:	b085      	sub	sp, #20
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	695b      	ldr	r3, [r3, #20]
 80112ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	699b      	ldr	r3, [r3, #24]
 80112b2:	68fa      	ldr	r2, [r7, #12]
 80112b4:	4013      	ands	r3, r2
 80112b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80112b8:	68fb      	ldr	r3, [r7, #12]
}
 80112ba:	4618      	mov	r0, r3
 80112bc:	3714      	adds	r7, #20
 80112be:	46bd      	mov	sp, r7
 80112c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c4:	4770      	bx	lr

080112c6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80112c6:	b480      	push	{r7}
 80112c8:	b085      	sub	sp, #20
 80112ca:	af00      	add	r7, sp, #0
 80112cc:	6078      	str	r0, [r7, #4]
 80112ce:	460b      	mov	r3, r1
 80112d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80112d6:	78fb      	ldrb	r3, [r7, #3]
 80112d8:	015a      	lsls	r2, r3, #5
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	4413      	add	r3, r2
 80112de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80112e2:	689b      	ldr	r3, [r3, #8]
 80112e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80112e6:	78fb      	ldrb	r3, [r7, #3]
 80112e8:	015a      	lsls	r2, r3, #5
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	4413      	add	r3, r2
 80112ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80112f2:	68db      	ldr	r3, [r3, #12]
 80112f4:	68ba      	ldr	r2, [r7, #8]
 80112f6:	4013      	ands	r3, r2
 80112f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80112fa:	68bb      	ldr	r3, [r7, #8]
}
 80112fc:	4618      	mov	r0, r3
 80112fe:	3714      	adds	r7, #20
 8011300:	46bd      	mov	sp, r7
 8011302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011306:	4770      	bx	lr

08011308 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011308:	b480      	push	{r7}
 801130a:	b083      	sub	sp, #12
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	695b      	ldr	r3, [r3, #20]
 8011314:	f003 0301 	and.w	r3, r3, #1
}
 8011318:	4618      	mov	r0, r3
 801131a:	370c      	adds	r7, #12
 801131c:	46bd      	mov	sp, r7
 801131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011322:	4770      	bx	lr

08011324 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8011324:	b480      	push	{r7}
 8011326:	b085      	sub	sp, #20
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
 801132c:	460b      	mov	r3, r1
 801132e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	68fa      	ldr	r2, [r7, #12]
 801133e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8011342:	f023 0303 	bic.w	r3, r3, #3
 8011346:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801134e:	681a      	ldr	r2, [r3, #0]
 8011350:	78fb      	ldrb	r3, [r7, #3]
 8011352:	f003 0303 	and.w	r3, r3, #3
 8011356:	68f9      	ldr	r1, [r7, #12]
 8011358:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 801135c:	4313      	orrs	r3, r2
 801135e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8011360:	78fb      	ldrb	r3, [r7, #3]
 8011362:	2b01      	cmp	r3, #1
 8011364:	d107      	bne.n	8011376 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801136c:	461a      	mov	r2, r3
 801136e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8011372:	6053      	str	r3, [r2, #4]
 8011374:	e00c      	b.n	8011390 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8011376:	78fb      	ldrb	r3, [r7, #3]
 8011378:	2b02      	cmp	r3, #2
 801137a:	d107      	bne.n	801138c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011382:	461a      	mov	r2, r3
 8011384:	f241 7370 	movw	r3, #6000	@ 0x1770
 8011388:	6053      	str	r3, [r2, #4]
 801138a:	e001      	b.n	8011390 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 801138c:	2301      	movs	r3, #1
 801138e:	e000      	b.n	8011392 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8011390:	2300      	movs	r3, #0
}
 8011392:	4618      	mov	r0, r3
 8011394:	3714      	adds	r7, #20
 8011396:	46bd      	mov	sp, r7
 8011398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139c:	4770      	bx	lr

0801139e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801139e:	b480      	push	{r7}
 80113a0:	b085      	sub	sp, #20
 80113a2:	af00      	add	r7, sp, #0
 80113a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80113b0:	695b      	ldr	r3, [r3, #20]
 80113b2:	b29b      	uxth	r3, r3
}
 80113b4:	4618      	mov	r0, r3
 80113b6:	3714      	adds	r7, #20
 80113b8:	46bd      	mov	sp, r7
 80113ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113be:	4770      	bx	lr

080113c0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80113c0:	b480      	push	{r7}
 80113c2:	b089      	sub	sp, #36	@ 0x24
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
 80113c8:	460b      	mov	r3, r1
 80113ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80113d0:	78fb      	ldrb	r3, [r7, #3]
 80113d2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80113d4:	2300      	movs	r3, #0
 80113d6:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80113d8:	69bb      	ldr	r3, [r7, #24]
 80113da:	015a      	lsls	r2, r3, #5
 80113dc:	69fb      	ldr	r3, [r7, #28]
 80113de:	4413      	add	r3, r2
 80113e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	0c9b      	lsrs	r3, r3, #18
 80113e8:	f003 0303 	and.w	r3, r3, #3
 80113ec:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80113ee:	69bb      	ldr	r3, [r7, #24]
 80113f0:	015a      	lsls	r2, r3, #5
 80113f2:	69fb      	ldr	r3, [r7, #28]
 80113f4:	4413      	add	r3, r2
 80113f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	0fdb      	lsrs	r3, r3, #31
 80113fe:	f003 0301 	and.w	r3, r3, #1
 8011402:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8011404:	69bb      	ldr	r3, [r7, #24]
 8011406:	015a      	lsls	r2, r3, #5
 8011408:	69fb      	ldr	r3, [r7, #28]
 801140a:	4413      	add	r3, r2
 801140c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	0fdb      	lsrs	r3, r3, #31
 8011414:	f003 0301 	and.w	r3, r3, #1
 8011418:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	689b      	ldr	r3, [r3, #8]
 801141e:	f003 0320 	and.w	r3, r3, #32
 8011422:	2b20      	cmp	r3, #32
 8011424:	d10d      	bne.n	8011442 <USB_HC_Halt+0x82>
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d10a      	bne.n	8011442 <USB_HC_Halt+0x82>
 801142c:	693b      	ldr	r3, [r7, #16]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d005      	beq.n	801143e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8011432:	697b      	ldr	r3, [r7, #20]
 8011434:	2b01      	cmp	r3, #1
 8011436:	d002      	beq.n	801143e <USB_HC_Halt+0x7e>
 8011438:	697b      	ldr	r3, [r7, #20]
 801143a:	2b03      	cmp	r3, #3
 801143c:	d101      	bne.n	8011442 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 801143e:	2300      	movs	r3, #0
 8011440:	e0d8      	b.n	80115f4 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d002      	beq.n	801144e <USB_HC_Halt+0x8e>
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	2b02      	cmp	r3, #2
 801144c:	d173      	bne.n	8011536 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801144e:	69bb      	ldr	r3, [r7, #24]
 8011450:	015a      	lsls	r2, r3, #5
 8011452:	69fb      	ldr	r3, [r7, #28]
 8011454:	4413      	add	r3, r2
 8011456:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	69ba      	ldr	r2, [r7, #24]
 801145e:	0151      	lsls	r1, r2, #5
 8011460:	69fa      	ldr	r2, [r7, #28]
 8011462:	440a      	add	r2, r1
 8011464:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011468:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801146c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	689b      	ldr	r3, [r3, #8]
 8011472:	f003 0320 	and.w	r3, r3, #32
 8011476:	2b00      	cmp	r3, #0
 8011478:	d14a      	bne.n	8011510 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801147e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011482:	2b00      	cmp	r3, #0
 8011484:	d133      	bne.n	80114ee <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8011486:	69bb      	ldr	r3, [r7, #24]
 8011488:	015a      	lsls	r2, r3, #5
 801148a:	69fb      	ldr	r3, [r7, #28]
 801148c:	4413      	add	r3, r2
 801148e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	69ba      	ldr	r2, [r7, #24]
 8011496:	0151      	lsls	r1, r2, #5
 8011498:	69fa      	ldr	r2, [r7, #28]
 801149a:	440a      	add	r2, r1
 801149c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80114a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80114a4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80114a6:	69bb      	ldr	r3, [r7, #24]
 80114a8:	015a      	lsls	r2, r3, #5
 80114aa:	69fb      	ldr	r3, [r7, #28]
 80114ac:	4413      	add	r3, r2
 80114ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	69ba      	ldr	r2, [r7, #24]
 80114b6:	0151      	lsls	r1, r2, #5
 80114b8:	69fa      	ldr	r2, [r7, #28]
 80114ba:	440a      	add	r2, r1
 80114bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80114c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80114c4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80114c6:	68bb      	ldr	r3, [r7, #8]
 80114c8:	3301      	adds	r3, #1
 80114ca:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80114d2:	d82e      	bhi.n	8011532 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80114d4:	69bb      	ldr	r3, [r7, #24]
 80114d6:	015a      	lsls	r2, r3, #5
 80114d8:	69fb      	ldr	r3, [r7, #28]
 80114da:	4413      	add	r3, r2
 80114dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80114e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80114ea:	d0ec      	beq.n	80114c6 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80114ec:	e081      	b.n	80115f2 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80114ee:	69bb      	ldr	r3, [r7, #24]
 80114f0:	015a      	lsls	r2, r3, #5
 80114f2:	69fb      	ldr	r3, [r7, #28]
 80114f4:	4413      	add	r3, r2
 80114f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	69ba      	ldr	r2, [r7, #24]
 80114fe:	0151      	lsls	r1, r2, #5
 8011500:	69fa      	ldr	r2, [r7, #28]
 8011502:	440a      	add	r2, r1
 8011504:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011508:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801150c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801150e:	e070      	b.n	80115f2 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011510:	69bb      	ldr	r3, [r7, #24]
 8011512:	015a      	lsls	r2, r3, #5
 8011514:	69fb      	ldr	r3, [r7, #28]
 8011516:	4413      	add	r3, r2
 8011518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	69ba      	ldr	r2, [r7, #24]
 8011520:	0151      	lsls	r1, r2, #5
 8011522:	69fa      	ldr	r2, [r7, #28]
 8011524:	440a      	add	r2, r1
 8011526:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801152a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801152e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011530:	e05f      	b.n	80115f2 <USB_HC_Halt+0x232>
            break;
 8011532:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011534:	e05d      	b.n	80115f2 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8011536:	69bb      	ldr	r3, [r7, #24]
 8011538:	015a      	lsls	r2, r3, #5
 801153a:	69fb      	ldr	r3, [r7, #28]
 801153c:	4413      	add	r3, r2
 801153e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	69ba      	ldr	r2, [r7, #24]
 8011546:	0151      	lsls	r1, r2, #5
 8011548:	69fa      	ldr	r2, [r7, #28]
 801154a:	440a      	add	r2, r1
 801154c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011550:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011554:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8011556:	69fb      	ldr	r3, [r7, #28]
 8011558:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801155c:	691b      	ldr	r3, [r3, #16]
 801155e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011562:	2b00      	cmp	r3, #0
 8011564:	d133      	bne.n	80115ce <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8011566:	69bb      	ldr	r3, [r7, #24]
 8011568:	015a      	lsls	r2, r3, #5
 801156a:	69fb      	ldr	r3, [r7, #28]
 801156c:	4413      	add	r3, r2
 801156e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	69ba      	ldr	r2, [r7, #24]
 8011576:	0151      	lsls	r1, r2, #5
 8011578:	69fa      	ldr	r2, [r7, #28]
 801157a:	440a      	add	r2, r1
 801157c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011580:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011584:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011586:	69bb      	ldr	r3, [r7, #24]
 8011588:	015a      	lsls	r2, r3, #5
 801158a:	69fb      	ldr	r3, [r7, #28]
 801158c:	4413      	add	r3, r2
 801158e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	69ba      	ldr	r2, [r7, #24]
 8011596:	0151      	lsls	r1, r2, #5
 8011598:	69fa      	ldr	r2, [r7, #28]
 801159a:	440a      	add	r2, r1
 801159c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80115a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80115a4:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80115a6:	68bb      	ldr	r3, [r7, #8]
 80115a8:	3301      	adds	r3, #1
 80115aa:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80115ac:	68bb      	ldr	r3, [r7, #8]
 80115ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80115b2:	d81d      	bhi.n	80115f0 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80115b4:	69bb      	ldr	r3, [r7, #24]
 80115b6:	015a      	lsls	r2, r3, #5
 80115b8:	69fb      	ldr	r3, [r7, #28]
 80115ba:	4413      	add	r3, r2
 80115bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80115c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80115ca:	d0ec      	beq.n	80115a6 <USB_HC_Halt+0x1e6>
 80115cc:	e011      	b.n	80115f2 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80115ce:	69bb      	ldr	r3, [r7, #24]
 80115d0:	015a      	lsls	r2, r3, #5
 80115d2:	69fb      	ldr	r3, [r7, #28]
 80115d4:	4413      	add	r3, r2
 80115d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	69ba      	ldr	r2, [r7, #24]
 80115de:	0151      	lsls	r1, r2, #5
 80115e0:	69fa      	ldr	r2, [r7, #28]
 80115e2:	440a      	add	r2, r1
 80115e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80115e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80115ec:	6013      	str	r3, [r2, #0]
 80115ee:	e000      	b.n	80115f2 <USB_HC_Halt+0x232>
          break;
 80115f0:	bf00      	nop
    }
  }

  return HAL_OK;
 80115f2:	2300      	movs	r3, #0
}
 80115f4:	4618      	mov	r0, r3
 80115f6:	3724      	adds	r7, #36	@ 0x24
 80115f8:	46bd      	mov	sp, r7
 80115fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fe:	4770      	bx	lr

08011600 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b088      	sub	sp, #32
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8011608:	2300      	movs	r3, #0
 801160a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8011610:	2300      	movs	r3, #0
 8011612:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	f7ff fd7a 	bl	801110e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801161a:	2110      	movs	r1, #16
 801161c:	6878      	ldr	r0, [r7, #4]
 801161e:	f7ff fd87 	bl	8011130 <USB_FlushTxFifo>
 8011622:	4603      	mov	r3, r0
 8011624:	2b00      	cmp	r3, #0
 8011626:	d001      	beq.n	801162c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8011628:	2301      	movs	r3, #1
 801162a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f7ff fdb1 	bl	8011194 <USB_FlushRxFifo>
 8011632:	4603      	mov	r3, r0
 8011634:	2b00      	cmp	r3, #0
 8011636:	d001      	beq.n	801163c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8011638:	2301      	movs	r3, #1
 801163a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 801163c:	2300      	movs	r3, #0
 801163e:	61bb      	str	r3, [r7, #24]
 8011640:	e01f      	b.n	8011682 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8011642:	69bb      	ldr	r3, [r7, #24]
 8011644:	015a      	lsls	r2, r3, #5
 8011646:	697b      	ldr	r3, [r7, #20]
 8011648:	4413      	add	r3, r2
 801164a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011658:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 801165a:	693b      	ldr	r3, [r7, #16]
 801165c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011660:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8011662:	693b      	ldr	r3, [r7, #16]
 8011664:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011668:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 801166a:	69bb      	ldr	r3, [r7, #24]
 801166c:	015a      	lsls	r2, r3, #5
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	4413      	add	r3, r2
 8011672:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011676:	461a      	mov	r2, r3
 8011678:	693b      	ldr	r3, [r7, #16]
 801167a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 801167c:	69bb      	ldr	r3, [r7, #24]
 801167e:	3301      	adds	r3, #1
 8011680:	61bb      	str	r3, [r7, #24]
 8011682:	69bb      	ldr	r3, [r7, #24]
 8011684:	2b0f      	cmp	r3, #15
 8011686:	d9dc      	bls.n	8011642 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8011688:	2300      	movs	r3, #0
 801168a:	61bb      	str	r3, [r7, #24]
 801168c:	e034      	b.n	80116f8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 801168e:	69bb      	ldr	r3, [r7, #24]
 8011690:	015a      	lsls	r2, r3, #5
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	4413      	add	r3, r2
 8011696:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 801169e:	693b      	ldr	r3, [r7, #16]
 80116a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80116a4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80116a6:	693b      	ldr	r3, [r7, #16]
 80116a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80116ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80116ae:	693b      	ldr	r3, [r7, #16]
 80116b0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80116b4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80116b6:	69bb      	ldr	r3, [r7, #24]
 80116b8:	015a      	lsls	r2, r3, #5
 80116ba:	697b      	ldr	r3, [r7, #20]
 80116bc:	4413      	add	r3, r2
 80116be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80116c2:	461a      	mov	r2, r3
 80116c4:	693b      	ldr	r3, [r7, #16]
 80116c6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	3301      	adds	r3, #1
 80116cc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80116d4:	d80c      	bhi.n	80116f0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80116d6:	69bb      	ldr	r3, [r7, #24]
 80116d8:	015a      	lsls	r2, r3, #5
 80116da:	697b      	ldr	r3, [r7, #20]
 80116dc:	4413      	add	r3, r2
 80116de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80116e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80116ec:	d0ec      	beq.n	80116c8 <USB_StopHost+0xc8>
 80116ee:	e000      	b.n	80116f2 <USB_StopHost+0xf2>
        break;
 80116f0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80116f2:	69bb      	ldr	r3, [r7, #24]
 80116f4:	3301      	adds	r3, #1
 80116f6:	61bb      	str	r3, [r7, #24]
 80116f8:	69bb      	ldr	r3, [r7, #24]
 80116fa:	2b0f      	cmp	r3, #15
 80116fc:	d9c7      	bls.n	801168e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80116fe:	697b      	ldr	r3, [r7, #20]
 8011700:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011704:	461a      	mov	r2, r3
 8011706:	f04f 33ff 	mov.w	r3, #4294967295
 801170a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f04f 32ff 	mov.w	r2, #4294967295
 8011712:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f7ff fce9 	bl	80110ec <USB_EnableGlobalInt>

  return ret;
 801171a:	7ffb      	ldrb	r3, [r7, #31]
}
 801171c:	4618      	mov	r0, r3
 801171e:	3720      	adds	r7, #32
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}

08011724 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011728:	4904      	ldr	r1, [pc, #16]	@ (801173c <MX_FATFS_Init+0x18>)
 801172a:	4805      	ldr	r0, [pc, #20]	@ (8011740 <MX_FATFS_Init+0x1c>)
 801172c:	f003 f91e 	bl	801496c <FATFS_LinkDriver>
 8011730:	4603      	mov	r3, r0
 8011732:	461a      	mov	r2, r3
 8011734:	4b03      	ldr	r3, [pc, #12]	@ (8011744 <MX_FATFS_Init+0x20>)
 8011736:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011738:	bf00      	nop
 801173a:	bd80      	pop	{r7, pc}
 801173c:	2000268c 	.word	0x2000268c
 8011740:	0801b9ac 	.word	0x0801b9ac
 8011744:	20002688 	.word	0x20002688

08011748 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011748:	b480      	push	{r7}
 801174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801174c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801174e:	4618      	mov	r0, r3
 8011750:	46bd      	mov	sp, r7
 8011752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011756:	4770      	bx	lr

08011758 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b082      	sub	sp, #8
 801175c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801175e:	2300      	movs	r3, #0
 8011760:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011762:	f000 f879 	bl	8011858 <BSP_SD_IsDetected>
 8011766:	4603      	mov	r3, r0
 8011768:	2b01      	cmp	r3, #1
 801176a:	d001      	beq.n	8011770 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 801176c:	2302      	movs	r3, #2
 801176e:	e012      	b.n	8011796 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011770:	480b      	ldr	r0, [pc, #44]	@ (80117a0 <BSP_SD_Init+0x48>)
 8011772:	f7fa feed 	bl	800c550 <HAL_SD_Init>
 8011776:	4603      	mov	r3, r0
 8011778:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801177a:	79fb      	ldrb	r3, [r7, #7]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d109      	bne.n	8011794 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011780:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8011784:	4806      	ldr	r0, [pc, #24]	@ (80117a0 <BSP_SD_Init+0x48>)
 8011786:	f7fb fcc7 	bl	800d118 <HAL_SD_ConfigWideBusOperation>
 801178a:	4603      	mov	r3, r0
 801178c:	2b00      	cmp	r3, #0
 801178e:	d001      	beq.n	8011794 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011790:	2301      	movs	r3, #1
 8011792:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011794:	79fb      	ldrb	r3, [r7, #7]
}
 8011796:	4618      	mov	r0, r3
 8011798:	3708      	adds	r7, #8
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}
 801179e:	bf00      	nop
 80117a0:	20001d50 	.word	0x20001d50

080117a4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b088      	sub	sp, #32
 80117a8:	af02      	add	r7, sp, #8
 80117aa:	60f8      	str	r0, [r7, #12]
 80117ac:	60b9      	str	r1, [r7, #8]
 80117ae:	607a      	str	r2, [r7, #4]
 80117b0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80117b2:	2300      	movs	r3, #0
 80117b4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	9300      	str	r3, [sp, #0]
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	68ba      	ldr	r2, [r7, #8]
 80117be:	68f9      	ldr	r1, [r7, #12]
 80117c0:	4806      	ldr	r0, [pc, #24]	@ (80117dc <BSP_SD_ReadBlocks+0x38>)
 80117c2:	f7fa ff75 	bl	800c6b0 <HAL_SD_ReadBlocks>
 80117c6:	4603      	mov	r3, r0
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d001      	beq.n	80117d0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80117cc:	2301      	movs	r3, #1
 80117ce:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80117d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	3718      	adds	r7, #24
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd80      	pop	{r7, pc}
 80117da:	bf00      	nop
 80117dc:	20001d50 	.word	0x20001d50

080117e0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b088      	sub	sp, #32
 80117e4:	af02      	add	r7, sp, #8
 80117e6:	60f8      	str	r0, [r7, #12]
 80117e8:	60b9      	str	r1, [r7, #8]
 80117ea:	607a      	str	r2, [r7, #4]
 80117ec:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80117ee:	2300      	movs	r3, #0
 80117f0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80117f2:	683b      	ldr	r3, [r7, #0]
 80117f4:	9300      	str	r3, [sp, #0]
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	68ba      	ldr	r2, [r7, #8]
 80117fa:	68f9      	ldr	r1, [r7, #12]
 80117fc:	4806      	ldr	r0, [pc, #24]	@ (8011818 <BSP_SD_WriteBlocks+0x38>)
 80117fe:	f7fb f935 	bl	800ca6c <HAL_SD_WriteBlocks>
 8011802:	4603      	mov	r3, r0
 8011804:	2b00      	cmp	r3, #0
 8011806:	d001      	beq.n	801180c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011808:	2301      	movs	r3, #1
 801180a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801180c:	7dfb      	ldrb	r3, [r7, #23]
}
 801180e:	4618      	mov	r0, r3
 8011810:	3718      	adds	r7, #24
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}
 8011816:	bf00      	nop
 8011818:	20001d50 	.word	0x20001d50

0801181c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011820:	4805      	ldr	r0, [pc, #20]	@ (8011838 <BSP_SD_GetCardState+0x1c>)
 8011822:	f7fb fd13 	bl	800d24c <HAL_SD_GetCardState>
 8011826:	4603      	mov	r3, r0
 8011828:	2b04      	cmp	r3, #4
 801182a:	bf14      	ite	ne
 801182c:	2301      	movne	r3, #1
 801182e:	2300      	moveq	r3, #0
 8011830:	b2db      	uxtb	r3, r3
}
 8011832:	4618      	mov	r0, r3
 8011834:	bd80      	pop	{r7, pc}
 8011836:	bf00      	nop
 8011838:	20001d50 	.word	0x20001d50

0801183c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b082      	sub	sp, #8
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011844:	6879      	ldr	r1, [r7, #4]
 8011846:	4803      	ldr	r0, [pc, #12]	@ (8011854 <BSP_SD_GetCardInfo+0x18>)
 8011848:	f7fb fc3a 	bl	800d0c0 <HAL_SD_GetCardInfo>
}
 801184c:	bf00      	nop
 801184e:	3708      	adds	r7, #8
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}
 8011854:	20001d50 	.word	0x20001d50

08011858 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b082      	sub	sp, #8
 801185c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801185e:	2301      	movs	r3, #1
 8011860:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011862:	f000 f80b 	bl	801187c <BSP_PlatformIsDetected>
 8011866:	4603      	mov	r3, r0
 8011868:	2b00      	cmp	r3, #0
 801186a:	d101      	bne.n	8011870 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801186c:	2300      	movs	r3, #0
 801186e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011870:	79fb      	ldrb	r3, [r7, #7]
 8011872:	b2db      	uxtb	r3, r3
}
 8011874:	4618      	mov	r0, r3
 8011876:	3708      	adds	r7, #8
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801187c:	b580      	push	{r7, lr}
 801187e:	b082      	sub	sp, #8
 8011880:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011882:	2301      	movs	r3, #1
 8011884:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011886:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801188a:	4806      	ldr	r0, [pc, #24]	@ (80118a4 <BSP_PlatformIsDetected+0x28>)
 801188c:	f7f6 fbac 	bl	8007fe8 <HAL_GPIO_ReadPin>
 8011890:	4603      	mov	r3, r0
 8011892:	2b00      	cmp	r3, #0
 8011894:	d001      	beq.n	801189a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011896:	2300      	movs	r3, #0
 8011898:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801189a:	79fb      	ldrb	r3, [r7, #7]
}
 801189c:	4618      	mov	r0, r3
 801189e:	3708      	adds	r7, #8
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}
 80118a4:	40020800 	.word	0x40020800

080118a8 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80118a8:	b480      	push	{r7}
 80118aa:	b087      	sub	sp, #28
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
 80118b0:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80118b2:	683b      	ldr	r3, [r7, #0]
 80118b4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80118ba:	2320      	movs	r3, #32
 80118bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80118be:	f3bf 8f4f 	dsb	sy
}
 80118c2:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 80118c4:	e00b      	b.n	80118de <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80118c6:	4a0d      	ldr	r2, [pc, #52]	@ (80118fc <SCB_InvalidateDCache_by_Addr+0x54>)
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	693a      	ldr	r2, [r7, #16]
 80118d2:	4413      	add	r3, r2
 80118d4:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80118d6:	697a      	ldr	r2, [r7, #20]
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	1ad3      	subs	r3, r2, r3
 80118dc:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80118de:	697b      	ldr	r3, [r7, #20]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	dcf0      	bgt.n	80118c6 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80118e4:	f3bf 8f4f 	dsb	sy
}
 80118e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80118ea:	f3bf 8f6f 	isb	sy
}
 80118ee:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80118f0:	bf00      	nop
 80118f2:	371c      	adds	r7, #28
 80118f4:	46bd      	mov	sp, r7
 80118f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fa:	4770      	bx	lr
 80118fc:	e000ed00 	.word	0xe000ed00

08011900 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8011900:	b480      	push	{r7}
 8011902:	b087      	sub	sp, #28
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
 8011908:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8011912:	2320      	movs	r3, #32
 8011914:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8011916:	f3bf 8f4f 	dsb	sy
}
 801191a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 801191c:	e00b      	b.n	8011936 <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 801191e:	4a0d      	ldr	r2, [pc, #52]	@ (8011954 <SCB_CleanDCache_by_Addr+0x54>)
 8011920:	693b      	ldr	r3, [r7, #16]
 8011922:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	693a      	ldr	r2, [r7, #16]
 801192a:	4413      	add	r3, r2
 801192c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 801192e:	697a      	ldr	r2, [r7, #20]
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	1ad3      	subs	r3, r2, r3
 8011934:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8011936:	697b      	ldr	r3, [r7, #20]
 8011938:	2b00      	cmp	r3, #0
 801193a:	dcf0      	bgt.n	801191e <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 801193c:	f3bf 8f4f 	dsb	sy
}
 8011940:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011942:	f3bf 8f6f 	isb	sy
}
 8011946:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8011948:	bf00      	nop
 801194a:	371c      	adds	r7, #28
 801194c:	46bd      	mov	sp, r7
 801194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011952:	4770      	bx	lr
 8011954:	e000ed00 	.word	0xe000ed00

08011958 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b084      	sub	sp, #16
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8011960:	f003 f850 	bl	8014a04 <osKernelSysTick>
 8011964:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8011966:	e006      	b.n	8011976 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011968:	f7ff ff58 	bl	801181c <BSP_SD_GetCardState>
 801196c:	4603      	mov	r3, r0
 801196e:	2b00      	cmp	r3, #0
 8011970:	d101      	bne.n	8011976 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011972:	2300      	movs	r3, #0
 8011974:	e009      	b.n	801198a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8011976:	f003 f845 	bl	8014a04 <osKernelSysTick>
 801197a:	4602      	mov	r2, r0
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	1ad3      	subs	r3, r2, r3
 8011980:	687a      	ldr	r2, [r7, #4]
 8011982:	429a      	cmp	r2, r3
 8011984:	d8f0      	bhi.n	8011968 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011986:	f04f 33ff 	mov.w	r3, #4294967295
}
 801198a:	4618      	mov	r0, r3
 801198c:	3710      	adds	r7, #16
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}
	...

08011994 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b082      	sub	sp, #8
 8011998:	af00      	add	r7, sp, #0
 801199a:	4603      	mov	r3, r0
 801199c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801199e:	4b0b      	ldr	r3, [pc, #44]	@ (80119cc <SD_CheckStatus+0x38>)
 80119a0:	2201      	movs	r2, #1
 80119a2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80119a4:	f7ff ff3a 	bl	801181c <BSP_SD_GetCardState>
 80119a8:	4603      	mov	r3, r0
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d107      	bne.n	80119be <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80119ae:	4b07      	ldr	r3, [pc, #28]	@ (80119cc <SD_CheckStatus+0x38>)
 80119b0:	781b      	ldrb	r3, [r3, #0]
 80119b2:	b2db      	uxtb	r3, r3
 80119b4:	f023 0301 	bic.w	r3, r3, #1
 80119b8:	b2da      	uxtb	r2, r3
 80119ba:	4b04      	ldr	r3, [pc, #16]	@ (80119cc <SD_CheckStatus+0x38>)
 80119bc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80119be:	4b03      	ldr	r3, [pc, #12]	@ (80119cc <SD_CheckStatus+0x38>)
 80119c0:	781b      	ldrb	r3, [r3, #0]
 80119c2:	b2db      	uxtb	r3, r3
}
 80119c4:	4618      	mov	r0, r3
 80119c6:	3708      	adds	r7, #8
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}
 80119cc:	2000006d 	.word	0x2000006d

080119d0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80119d0:	b590      	push	{r4, r7, lr}
 80119d2:	b087      	sub	sp, #28
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	4603      	mov	r3, r0
 80119d8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80119da:	4b1d      	ldr	r3, [pc, #116]	@ (8011a50 <SD_initialize+0x80>)
 80119dc:	2201      	movs	r2, #1
 80119de:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 80119e0:	f003 f804 	bl	80149ec <osKernelRunning>
 80119e4:	4603      	mov	r3, r0
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d02b      	beq.n	8011a42 <SD_initialize+0x72>
    {
      Stat = SD_CheckStatus(lun);
    }

#else
    Stat = SD_CheckStatus(lun);
 80119ea:	79fb      	ldrb	r3, [r7, #7]
 80119ec:	4618      	mov	r0, r3
 80119ee:	f7ff ffd1 	bl	8011994 <SD_CheckStatus>
 80119f2:	4603      	mov	r3, r0
 80119f4:	461a      	mov	r2, r3
 80119f6:	4b16      	ldr	r3, [pc, #88]	@ (8011a50 <SD_initialize+0x80>)
 80119f8:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80119fa:	4b15      	ldr	r3, [pc, #84]	@ (8011a50 <SD_initialize+0x80>)
 80119fc:	781b      	ldrb	r3, [r3, #0]
 80119fe:	b2db      	uxtb	r3, r3
 8011a00:	2b01      	cmp	r3, #1
 8011a02:	d01e      	beq.n	8011a42 <SD_initialize+0x72>
    {
      if (SDQueueID == NULL)
 8011a04:	4b13      	ldr	r3, [pc, #76]	@ (8011a54 <SD_initialize+0x84>)
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d10e      	bne.n	8011a2a <SD_initialize+0x5a>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8011a0c:	4b12      	ldr	r3, [pc, #72]	@ (8011a58 <SD_initialize+0x88>)
 8011a0e:	f107 0408 	add.w	r4, r7, #8
 8011a12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011a14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8011a18:	f107 0308 	add.w	r3, r7, #8
 8011a1c:	2100      	movs	r1, #0
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f003 f860 	bl	8014ae4 <osMessageCreate>
 8011a24:	4603      	mov	r3, r0
 8011a26:	4a0b      	ldr	r2, [pc, #44]	@ (8011a54 <SD_initialize+0x84>)
 8011a28:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8011a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8011a54 <SD_initialize+0x84>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d107      	bne.n	8011a42 <SD_initialize+0x72>
      {
        Stat |= STA_NOINIT;
 8011a32:	4b07      	ldr	r3, [pc, #28]	@ (8011a50 <SD_initialize+0x80>)
 8011a34:	781b      	ldrb	r3, [r3, #0]
 8011a36:	b2db      	uxtb	r3, r3
 8011a38:	f043 0301 	orr.w	r3, r3, #1
 8011a3c:	b2da      	uxtb	r2, r3
 8011a3e:	4b04      	ldr	r3, [pc, #16]	@ (8011a50 <SD_initialize+0x80>)
 8011a40:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8011a42:	4b03      	ldr	r3, [pc, #12]	@ (8011a50 <SD_initialize+0x80>)
 8011a44:	781b      	ldrb	r3, [r3, #0]
 8011a46:	b2db      	uxtb	r3, r3
}
 8011a48:	4618      	mov	r0, r3
 8011a4a:	371c      	adds	r7, #28
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd90      	pop	{r4, r7, pc}
 8011a50:	2000006d 	.word	0x2000006d
 8011a54:	20002ac0 	.word	0x20002ac0
 8011a58:	0801b930 	.word	0x0801b930

08011a5c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b082      	sub	sp, #8
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	4603      	mov	r3, r0
 8011a64:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011a66:	79fb      	ldrb	r3, [r7, #7]
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f7ff ff93 	bl	8011994 <SD_CheckStatus>
 8011a6e:	4603      	mov	r3, r0
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	3708      	adds	r7, #8
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}

08011a78 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b08a      	sub	sp, #40	@ 0x28
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	60b9      	str	r1, [r7, #8]
 8011a80:	607a      	str	r2, [r7, #4]
 8011a82:	603b      	str	r3, [r7, #0]
 8011a84:	4603      	mov	r3, r0
 8011a86:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8011a88:	2301      	movs	r3, #1
 8011a8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011a8e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8011a92:	f7ff ff61 	bl	8011958 <SD_CheckStatusWithTimeout>
 8011a96:	4603      	mov	r3, r0
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	da02      	bge.n	8011aa2 <SD_read+0x2a>
  {
    return res;
 8011a9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011aa0:	e051      	b.n	8011b46 <SD_read+0xce>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8011aa2:	68bb      	ldr	r3, [r7, #8]
 8011aa4:	f003 0303 	and.w	r3, r3, #3
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d111      	bne.n	8011ad0 <SD_read+0x58>
  {
#endif
    /* Use polling mode instead of DMA to avoid callback issues */
    ret = BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_TIMEOUT);
 8011aac:	f247 5330 	movw	r3, #30000	@ 0x7530
 8011ab0:	683a      	ldr	r2, [r7, #0]
 8011ab2:	6879      	ldr	r1, [r7, #4]
 8011ab4:	68b8      	ldr	r0, [r7, #8]
 8011ab6:	f7ff fe75 	bl	80117a4 <BSP_SD_ReadBlocks>
 8011aba:	4603      	mov	r3, r0
 8011abc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (ret == MSD_OK) {
 8011ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d13c      	bne.n	8011b42 <SD_read+0xca>
      /* Polling mode - no need for message queue */
      res = RES_OK;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011ace:	e038      	b.n	8011b42 <SD_read+0xca>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++)
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	623b      	str	r3, [r7, #32]
 8011ad4:	e024      	b.n	8011b20 <SD_read+0xa8>
      {
        ret = BSP_SD_ReadBlocks((uint32_t*)scratch, (uint32_t)sector++, 1, SD_TIMEOUT);
 8011ad6:	6879      	ldr	r1, [r7, #4]
 8011ad8:	1c4b      	adds	r3, r1, #1
 8011ada:	607b      	str	r3, [r7, #4]
 8011adc:	f247 5330 	movw	r3, #30000	@ 0x7530
 8011ae0:	2201      	movs	r2, #1
 8011ae2:	481b      	ldr	r0, [pc, #108]	@ (8011b50 <SD_read+0xd8>)
 8011ae4:	f7ff fe5e 	bl	80117a4 <BSP_SD_ReadBlocks>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (ret == MSD_OK )
 8011aee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d119      	bne.n	8011b2a <SD_read+0xb2>
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
          /*
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
 8011af6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011afa:	4815      	ldr	r0, [pc, #84]	@ (8011b50 <SD_read+0xd8>)
 8011afc:	f7ff fed4 	bl	80118a8 <SCB_InvalidateDCache_by_Addr>
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8011b00:	68bb      	ldr	r3, [r7, #8]
 8011b02:	4a13      	ldr	r2, [pc, #76]	@ (8011b50 <SD_read+0xd8>)
 8011b04:	4618      	mov	r0, r3
 8011b06:	4611      	mov	r1, r2
 8011b08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011b0c:	461a      	mov	r2, r3
 8011b0e:	f005 fe88 	bl	8017822 <memcpy>
          buff += BLOCKSIZE;
 8011b12:	68bb      	ldr	r3, [r7, #8]
 8011b14:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8011b18:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 8011b1a:	6a3b      	ldr	r3, [r7, #32]
 8011b1c:	3301      	adds	r3, #1
 8011b1e:	623b      	str	r3, [r7, #32]
 8011b20:	6a3b      	ldr	r3, [r7, #32]
 8011b22:	683a      	ldr	r2, [r7, #0]
 8011b24:	429a      	cmp	r2, r3
 8011b26:	d8d6      	bhi.n	8011ad6 <SD_read+0x5e>
 8011b28:	e000      	b.n	8011b2c <SD_read+0xb4>
        }
        else
        {
          break;
 8011b2a:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK ))
 8011b2c:	6a3b      	ldr	r3, [r7, #32]
 8011b2e:	683a      	ldr	r2, [r7, #0]
 8011b30:	429a      	cmp	r2, r3
 8011b32:	d106      	bne.n	8011b42 <SD_read+0xca>
 8011b34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d102      	bne.n	8011b42 <SD_read+0xca>
        res = RES_OK;
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }
#endif
  return res;
 8011b42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
}
 8011b46:	4618      	mov	r0, r3
 8011b48:	3728      	adds	r7, #40	@ 0x28
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd80      	pop	{r7, pc}
 8011b4e:	bf00      	nop
 8011b50:	200028c0 	.word	0x200028c0

08011b54 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b08c      	sub	sp, #48	@ 0x30
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	60b9      	str	r1, [r7, #8]
 8011b5c:	607a      	str	r2, [r7, #4]
 8011b5e:	603b      	str	r3, [r7, #0]
 8011b60:	4603      	mov	r3, r0
 8011b62:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011b64:	2301      	movs	r3, #1
 8011b66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011b6a:	f247 5030 	movw	r0, #30000	@ 0x7530
 8011b6e:	f7ff fef3 	bl	8011958 <SD_CheckStatusWithTimeout>
 8011b72:	4603      	mov	r3, r0
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	da02      	bge.n	8011b7e <SD_write+0x2a>
  {
    return res;
 8011b78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011b7c:	e082      	b.n	8011c84 <SD_write+0x130>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8011b7e:	68bb      	ldr	r3, [r7, #8]
 8011b80:	f003 0303 	and.w	r3, r3, #3
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d17b      	bne.n	8011c80 <SD_write+0x12c>
  uint32_t alignedAddr;
  /*
    the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
    adjust the address and the D-Cache size to clean accordingly.
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	f023 031f 	bic.w	r3, r3, #31
 8011b8e:	623b      	str	r3, [r7, #32]
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 8011b90:	6a38      	ldr	r0, [r7, #32]
 8011b92:	683b      	ldr	r3, [r7, #0]
 8011b94:	025a      	lsls	r2, r3, #9
 8011b96:	68b9      	ldr	r1, [r7, #8]
 8011b98:	6a3b      	ldr	r3, [r7, #32]
 8011b9a:	1acb      	subs	r3, r1, r3
 8011b9c:	4413      	add	r3, r2
 8011b9e:	4619      	mov	r1, r3
 8011ba0:	f7ff feae 	bl	8011900 <SCB_CleanDCache_by_Addr>
#endif

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8011ba4:	f247 5330 	movw	r3, #30000	@ 0x7530
 8011ba8:	683a      	ldr	r2, [r7, #0]
 8011baa:	6879      	ldr	r1, [r7, #4]
 8011bac:	68b8      	ldr	r0, [r7, #8]
 8011bae:	f7ff fe17 	bl	80117e0 <BSP_SD_WriteBlocks>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d103      	bne.n	8011bc0 <SD_write+0x6c>
                        (uint32_t) (sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
    /* Polling mode - no need for message queue */
    res = RES_OK;
 8011bb8:	2300      	movs	r3, #0
 8011bba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011bbe:	e05f      	b.n	8011c80 <SD_write+0x12c>

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
    /*
     * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
     */
     SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
 8011bc0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011bc4:	4831      	ldr	r0, [pc, #196]	@ (8011c8c <SD_write+0x138>)
 8011bc6:	f7ff fe6f 	bl	80118a8 <SCB_InvalidateDCache_by_Addr>
#endif
      for (i = 0; i < count; i++)
 8011bca:	2300      	movs	r3, #0
 8011bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8011bce:	e045      	b.n	8011c5c <SD_write+0x108>
      {
        memcpy((void *)scratch, buff, BLOCKSIZE);
 8011bd0:	4a2e      	ldr	r2, [pc, #184]	@ (8011c8c <SD_write+0x138>)
 8011bd2:	68bb      	ldr	r3, [r7, #8]
 8011bd4:	4610      	mov	r0, r2
 8011bd6:	4619      	mov	r1, r3
 8011bd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011bdc:	461a      	mov	r2, r3
 8011bde:	f005 fe20 	bl	8017822 <memcpy>
        buff += BLOCKSIZE;
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8011be8:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks((uint32_t*)scratch, (uint32_t)sector++, 1, SD_TIMEOUT);
 8011bea:	6879      	ldr	r1, [r7, #4]
 8011bec:	1c4b      	adds	r3, r1, #1
 8011bee:	607b      	str	r3, [r7, #4]
 8011bf0:	f247 5330 	movw	r3, #30000	@ 0x7530
 8011bf4:	2201      	movs	r2, #1
 8011bf6:	4825      	ldr	r0, [pc, #148]	@ (8011c8c <SD_write+0x138>)
 8011bf8:	f7ff fdf2 	bl	80117e0 <BSP_SD_WriteBlocks>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (ret == MSD_OK )
 8011c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d12f      	bne.n	8011c66 <SD_write+0x112>
        {
          /* Polling mode - operation already completed */
#if (osCMSIS < 0x20000U)
          /* wait for a message from the queue or a timeout */
          event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8011c06:	4b22      	ldr	r3, [pc, #136]	@ (8011c90 <SD_write+0x13c>)
 8011c08:	6819      	ldr	r1, [r3, #0]
 8011c0a:	f107 0310 	add.w	r3, r7, #16
 8011c0e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8011c12:	4618      	mov	r0, r3
 8011c14:	f002 ffce 	bl	8014bb4 <osMessageGet>

          if (event.status == osEventMessage)
 8011c18:	693b      	ldr	r3, [r7, #16]
 8011c1a:	2b10      	cmp	r3, #16
 8011c1c:	d11b      	bne.n	8011c56 <SD_write+0x102>
          {
            if (event.value.v == READ_CPLT_MSG)
 8011c1e:	697b      	ldr	r3, [r7, #20]
 8011c20:	2b01      	cmp	r3, #1
 8011c22:	d118      	bne.n	8011c56 <SD_write+0x102>
            {
              timer = osKernelSysTick();
 8011c24:	f002 feee 	bl	8014a04 <osKernelSysTick>
 8011c28:	61f8      	str	r0, [r7, #28]
              /* block until SDIO IP is ready or a timeout occur */
              while(osKernelSysTick() - timer <SD_TIMEOUT)
 8011c2a:	e006      	b.n	8011c3a <SD_write+0xe6>
                /* block until SDIO IP is ready or a timeout occur */
                ret = MSD_ERROR;
                while(osKernelGetTickCount() - timer < SD_TIMEOUT)
#endif
                {
                  ret = BSP_SD_GetCardState();
 8011c2c:	f7ff fdf6 	bl	801181c <BSP_SD_GetCardState>
 8011c30:	4603      	mov	r3, r0
 8011c32:	62bb      	str	r3, [r7, #40]	@ 0x28

                  if (ret == MSD_OK)
 8011c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d009      	beq.n	8011c4e <SD_write+0xfa>
              while(osKernelSysTick() - timer <SD_TIMEOUT)
 8011c3a:	f002 fee3 	bl	8014a04 <osKernelSysTick>
 8011c3e:	4602      	mov	r2, r0
 8011c40:	69fb      	ldr	r3, [r7, #28]
 8011c42:	1ad3      	subs	r3, r2, r3
 8011c44:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011c48:	4293      	cmp	r3, r2
 8011c4a:	d9ef      	bls.n	8011c2c <SD_write+0xd8>
 8011c4c:	e000      	b.n	8011c50 <SD_write+0xfc>
                  {
                    break;
 8011c4e:	bf00      	nop
                  }
                }

                if (ret != MSD_OK)
 8011c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d109      	bne.n	8011c6a <SD_write+0x116>
      for (i = 0; i < count; i++)
 8011c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c58:	3301      	adds	r3, #1
 8011c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8011c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c5e:	683a      	ldr	r2, [r7, #0]
 8011c60:	429a      	cmp	r2, r3
 8011c62:	d8b5      	bhi.n	8011bd0 <SD_write+0x7c>
 8011c64:	e002      	b.n	8011c6c <SD_write+0x118>
          }
#endif
        }
        else
        {
          break;
 8011c66:	bf00      	nop
 8011c68:	e000      	b.n	8011c6c <SD_write+0x118>
                  break;
 8011c6a:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK ))
 8011c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c6e:	683a      	ldr	r2, [r7, #0]
 8011c70:	429a      	cmp	r2, r3
 8011c72:	d105      	bne.n	8011c80 <SD_write+0x12c>
 8011c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d102      	bne.n	8011c80 <SD_write+0x12c>
        res = RES_OK;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

  }
#endif

  return res;
 8011c80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011c84:	4618      	mov	r0, r3
 8011c86:	3730      	adds	r7, #48	@ 0x30
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}
 8011c8c:	200028c0 	.word	0x200028c0
 8011c90:	20002ac0 	.word	0x20002ac0

08011c94 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b08c      	sub	sp, #48	@ 0x30
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	603a      	str	r2, [r7, #0]
 8011c9e:	71fb      	strb	r3, [r7, #7]
 8011ca0:	460b      	mov	r3, r1
 8011ca2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011caa:	4b25      	ldr	r3, [pc, #148]	@ (8011d40 <SD_ioctl+0xac>)
 8011cac:	781b      	ldrb	r3, [r3, #0]
 8011cae:	b2db      	uxtb	r3, r3
 8011cb0:	f003 0301 	and.w	r3, r3, #1
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d001      	beq.n	8011cbc <SD_ioctl+0x28>
 8011cb8:	2303      	movs	r3, #3
 8011cba:	e03c      	b.n	8011d36 <SD_ioctl+0xa2>

  switch (cmd)
 8011cbc:	79bb      	ldrb	r3, [r7, #6]
 8011cbe:	2b03      	cmp	r3, #3
 8011cc0:	d834      	bhi.n	8011d2c <SD_ioctl+0x98>
 8011cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8011cc8 <SD_ioctl+0x34>)
 8011cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cc8:	08011cd9 	.word	0x08011cd9
 8011ccc:	08011ce1 	.word	0x08011ce1
 8011cd0:	08011cf9 	.word	0x08011cf9
 8011cd4:	08011d13 	.word	0x08011d13
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011cd8:	2300      	movs	r3, #0
 8011cda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011cde:	e028      	b.n	8011d32 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011ce0:	f107 030c 	add.w	r3, r7, #12
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f7ff fda9 	bl	801183c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011cf6:	e01c      	b.n	8011d32 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011cf8:	f107 030c 	add.w	r3, r7, #12
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f7ff fd9d 	bl	801183c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d04:	b29a      	uxth	r2, r3
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011d10:	e00f      	b.n	8011d32 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011d12:	f107 030c 	add.w	r3, r7, #12
 8011d16:	4618      	mov	r0, r3
 8011d18:	f7ff fd90 	bl	801183c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d1e:	0a5a      	lsrs	r2, r3, #9
 8011d20:	683b      	ldr	r3, [r7, #0]
 8011d22:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011d24:	2300      	movs	r3, #0
 8011d26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011d2a:	e002      	b.n	8011d32 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011d2c:	2304      	movs	r3, #4
 8011d2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8011d32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011d36:	4618      	mov	r0, r3
 8011d38:	3730      	adds	r7, #48	@ 0x30
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	bd80      	pop	{r7, pc}
 8011d3e:	bf00      	nop
 8011d40:	2000006d 	.word	0x2000006d

08011d44 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b082      	sub	sp, #8
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8011d52:	1c5a      	adds	r2, r3, #1
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8011d5a:	6878      	ldr	r0, [r7, #4]
 8011d5c:	f000 f804 	bl	8011d68 <USBH_HandleSof>
}
 8011d60:	bf00      	nop
 8011d62:	3708      	adds	r7, #8
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}

08011d68 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b082      	sub	sp, #8
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	781b      	ldrb	r3, [r3, #0]
 8011d74:	b2db      	uxtb	r3, r3
 8011d76:	2b0b      	cmp	r3, #11
 8011d78:	d10a      	bne.n	8011d90 <USBH_HandleSof+0x28>
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d005      	beq.n	8011d90 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011d8a:	699b      	ldr	r3, [r3, #24]
 8011d8c:	6878      	ldr	r0, [r7, #4]
 8011d8e:	4798      	blx	r3
  }
}
 8011d90:	bf00      	nop
 8011d92:	3708      	adds	r7, #8
 8011d94:	46bd      	mov	sp, r7
 8011d96:	bd80      	pop	{r7, pc}

08011d98 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b082      	sub	sp, #8
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	2201      	movs	r2, #1
 8011da4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8011da8:	2300      	movs	r3, #0
 8011daa:	2200      	movs	r2, #0
 8011dac:	2101      	movs	r1, #1
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f000 f85b 	bl	8011e6a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 8011db4:	bf00      	nop
}
 8011db6:	3708      	adds	r7, #8
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}

08011dbc <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8011dbc:	b480      	push	{r7}
 8011dbe:	b083      	sub	sp, #12
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2201      	movs	r2, #1
 8011dd0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8011dd4:	bf00      	nop
}
 8011dd6:	370c      	adds	r7, #12
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dde:	4770      	bx	lr

08011de0 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b082      	sub	sp, #8
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2201      	movs	r2, #1
 8011dec:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	2200      	movs	r2, #0
 8011df4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8011e00:	2300      	movs	r3, #0
 8011e02:	2200      	movs	r2, #0
 8011e04:	2101      	movs	r1, #1
 8011e06:	6878      	ldr	r0, [r7, #4]
 8011e08:	f000 f82f 	bl	8011e6a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8011e0c:	2300      	movs	r3, #0
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	3708      	adds	r7, #8
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}

08011e16 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8011e16:	b580      	push	{r7, lr}
 8011e18:	b082      	sub	sp, #8
 8011e1a:	af00      	add	r7, sp, #0
 8011e1c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	2201      	movs	r2, #1
 8011e22:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	2200      	movs	r2, #0
 8011e2a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	2200      	movs	r2, #0
 8011e32:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8011e36:	6878      	ldr	r0, [r7, #4]
 8011e38:	f005 f99c 	bl	8017174 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	791b      	ldrb	r3, [r3, #4]
 8011e40:	4619      	mov	r1, r3
 8011e42:	6878      	ldr	r0, [r7, #4]
 8011e44:	f000 f847 	bl	8011ed6 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	795b      	ldrb	r3, [r3, #5]
 8011e4c:	4619      	mov	r1, r3
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f000 f841 	bl	8011ed6 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8011e54:	2300      	movs	r3, #0
 8011e56:	2200      	movs	r2, #0
 8011e58:	2101      	movs	r1, #1
 8011e5a:	6878      	ldr	r0, [r7, #4]
 8011e5c:	f000 f805 	bl	8011e6a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8011e60:	2300      	movs	r3, #0
}
 8011e62:	4618      	mov	r0, r3
 8011e64:	3708      	adds	r7, #8
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd80      	pop	{r7, pc}

08011e6a <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 8011e6a:	b580      	push	{r7, lr}
 8011e6c:	b086      	sub	sp, #24
 8011e6e:	af00      	add	r7, sp, #0
 8011e70:	60f8      	str	r0, [r7, #12]
 8011e72:	607a      	str	r2, [r7, #4]
 8011e74:	603b      	str	r3, [r7, #0]
 8011e76:	460b      	mov	r3, r1
 8011e78:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 8011e7a:	7afa      	ldrb	r2, [r7, #11]
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f002 ff07 	bl	8014c9c <osMessageWaiting>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	f1c3 0310 	rsb	r3, r3, #16
 8011e94:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 8011e96:	697b      	ldr	r3, [r7, #20]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d009      	beq.n	8011eb0 <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011ea8:	687a      	ldr	r2, [r7, #4]
 8011eaa:	4619      	mov	r1, r3
 8011eac:	f002 fe42 	bl	8014b34 <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 8011eb0:	bf00      	nop
 8011eb2:	3718      	adds	r7, #24
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}

08011eb8 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b082      	sub	sp, #8
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	2101      	movs	r1, #1
 8011ec6:	6878      	ldr	r0, [r7, #4]
 8011ec8:	f7ff ffcf 	bl	8011e6a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8011ecc:	2300      	movs	r3, #0
}
 8011ece:	4618      	mov	r0, r3
 8011ed0:	3708      	adds	r7, #8
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	bd80      	pop	{r7, pc}

08011ed6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8011ed6:	b480      	push	{r7}
 8011ed8:	b083      	sub	sp, #12
 8011eda:	af00      	add	r7, sp, #0
 8011edc:	6078      	str	r0, [r7, #4]
 8011ede:	460b      	mov	r3, r1
 8011ee0:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8011ee2:	78fb      	ldrb	r3, [r7, #3]
 8011ee4:	2b0f      	cmp	r3, #15
 8011ee6:	d80d      	bhi.n	8011f04 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8011ee8:	78fb      	ldrb	r3, [r7, #3]
 8011eea:	687a      	ldr	r2, [r7, #4]
 8011eec:	33e0      	adds	r3, #224	@ 0xe0
 8011eee:	009b      	lsls	r3, r3, #2
 8011ef0:	4413      	add	r3, r2
 8011ef2:	685a      	ldr	r2, [r3, #4]
 8011ef4:	78fb      	ldrb	r3, [r7, #3]
 8011ef6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8011efa:	6879      	ldr	r1, [r7, #4]
 8011efc:	33e0      	adds	r3, #224	@ 0xe0
 8011efe:	009b      	lsls	r3, r3, #2
 8011f00:	440b      	add	r3, r1
 8011f02:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8011f04:	2300      	movs	r3, #0
}
 8011f06:	4618      	mov	r0, r3
 8011f08:	370c      	adds	r7, #12
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f10:	4770      	bx	lr
	...

08011f14 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b084      	sub	sp, #16
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011f1e:	79fb      	ldrb	r3, [r7, #7]
 8011f20:	4a08      	ldr	r2, [pc, #32]	@ (8011f44 <disk_status+0x30>)
 8011f22:	009b      	lsls	r3, r3, #2
 8011f24:	4413      	add	r3, r2
 8011f26:	685b      	ldr	r3, [r3, #4]
 8011f28:	685b      	ldr	r3, [r3, #4]
 8011f2a:	79fa      	ldrb	r2, [r7, #7]
 8011f2c:	4905      	ldr	r1, [pc, #20]	@ (8011f44 <disk_status+0x30>)
 8011f2e:	440a      	add	r2, r1
 8011f30:	7a12      	ldrb	r2, [r2, #8]
 8011f32:	4610      	mov	r0, r2
 8011f34:	4798      	blx	r3
 8011f36:	4603      	mov	r3, r0
 8011f38:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	3710      	adds	r7, #16
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bd80      	pop	{r7, pc}
 8011f44:	20002acc 	.word	0x20002acc

08011f48 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b084      	sub	sp, #16
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	4603      	mov	r3, r0
 8011f50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011f52:	2300      	movs	r3, #0
 8011f54:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011f56:	79fb      	ldrb	r3, [r7, #7]
 8011f58:	4a0d      	ldr	r2, [pc, #52]	@ (8011f90 <disk_initialize+0x48>)
 8011f5a:	5cd3      	ldrb	r3, [r2, r3]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d111      	bne.n	8011f84 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011f60:	79fb      	ldrb	r3, [r7, #7]
 8011f62:	4a0b      	ldr	r2, [pc, #44]	@ (8011f90 <disk_initialize+0x48>)
 8011f64:	2101      	movs	r1, #1
 8011f66:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011f68:	79fb      	ldrb	r3, [r7, #7]
 8011f6a:	4a09      	ldr	r2, [pc, #36]	@ (8011f90 <disk_initialize+0x48>)
 8011f6c:	009b      	lsls	r3, r3, #2
 8011f6e:	4413      	add	r3, r2
 8011f70:	685b      	ldr	r3, [r3, #4]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	79fa      	ldrb	r2, [r7, #7]
 8011f76:	4906      	ldr	r1, [pc, #24]	@ (8011f90 <disk_initialize+0x48>)
 8011f78:	440a      	add	r2, r1
 8011f7a:	7a12      	ldrb	r2, [r2, #8]
 8011f7c:	4610      	mov	r0, r2
 8011f7e:	4798      	blx	r3
 8011f80:	4603      	mov	r3, r0
 8011f82:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	3710      	adds	r7, #16
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}
 8011f8e:	bf00      	nop
 8011f90:	20002acc 	.word	0x20002acc

08011f94 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011f94:	b590      	push	{r4, r7, lr}
 8011f96:	b087      	sub	sp, #28
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	60b9      	str	r1, [r7, #8]
 8011f9c:	607a      	str	r2, [r7, #4]
 8011f9e:	603b      	str	r3, [r7, #0]
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011fa4:	7bfb      	ldrb	r3, [r7, #15]
 8011fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8011fd0 <disk_read+0x3c>)
 8011fa8:	009b      	lsls	r3, r3, #2
 8011faa:	4413      	add	r3, r2
 8011fac:	685b      	ldr	r3, [r3, #4]
 8011fae:	689c      	ldr	r4, [r3, #8]
 8011fb0:	7bfb      	ldrb	r3, [r7, #15]
 8011fb2:	4a07      	ldr	r2, [pc, #28]	@ (8011fd0 <disk_read+0x3c>)
 8011fb4:	4413      	add	r3, r2
 8011fb6:	7a18      	ldrb	r0, [r3, #8]
 8011fb8:	683b      	ldr	r3, [r7, #0]
 8011fba:	687a      	ldr	r2, [r7, #4]
 8011fbc:	68b9      	ldr	r1, [r7, #8]
 8011fbe:	47a0      	blx	r4
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	75fb      	strb	r3, [r7, #23]
  return res;
 8011fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	371c      	adds	r7, #28
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd90      	pop	{r4, r7, pc}
 8011fce:	bf00      	nop
 8011fd0:	20002acc 	.word	0x20002acc

08011fd4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011fd4:	b590      	push	{r4, r7, lr}
 8011fd6:	b087      	sub	sp, #28
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	60b9      	str	r1, [r7, #8]
 8011fdc:	607a      	str	r2, [r7, #4]
 8011fde:	603b      	str	r3, [r7, #0]
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011fe4:	7bfb      	ldrb	r3, [r7, #15]
 8011fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8012010 <disk_write+0x3c>)
 8011fe8:	009b      	lsls	r3, r3, #2
 8011fea:	4413      	add	r3, r2
 8011fec:	685b      	ldr	r3, [r3, #4]
 8011fee:	68dc      	ldr	r4, [r3, #12]
 8011ff0:	7bfb      	ldrb	r3, [r7, #15]
 8011ff2:	4a07      	ldr	r2, [pc, #28]	@ (8012010 <disk_write+0x3c>)
 8011ff4:	4413      	add	r3, r2
 8011ff6:	7a18      	ldrb	r0, [r3, #8]
 8011ff8:	683b      	ldr	r3, [r7, #0]
 8011ffa:	687a      	ldr	r2, [r7, #4]
 8011ffc:	68b9      	ldr	r1, [r7, #8]
 8011ffe:	47a0      	blx	r4
 8012000:	4603      	mov	r3, r0
 8012002:	75fb      	strb	r3, [r7, #23]
  return res;
 8012004:	7dfb      	ldrb	r3, [r7, #23]
}
 8012006:	4618      	mov	r0, r3
 8012008:	371c      	adds	r7, #28
 801200a:	46bd      	mov	sp, r7
 801200c:	bd90      	pop	{r4, r7, pc}
 801200e:	bf00      	nop
 8012010:	20002acc 	.word	0x20002acc

08012014 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b084      	sub	sp, #16
 8012018:	af00      	add	r7, sp, #0
 801201a:	4603      	mov	r3, r0
 801201c:	603a      	str	r2, [r7, #0]
 801201e:	71fb      	strb	r3, [r7, #7]
 8012020:	460b      	mov	r3, r1
 8012022:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012024:	79fb      	ldrb	r3, [r7, #7]
 8012026:	4a09      	ldr	r2, [pc, #36]	@ (801204c <disk_ioctl+0x38>)
 8012028:	009b      	lsls	r3, r3, #2
 801202a:	4413      	add	r3, r2
 801202c:	685b      	ldr	r3, [r3, #4]
 801202e:	691b      	ldr	r3, [r3, #16]
 8012030:	79fa      	ldrb	r2, [r7, #7]
 8012032:	4906      	ldr	r1, [pc, #24]	@ (801204c <disk_ioctl+0x38>)
 8012034:	440a      	add	r2, r1
 8012036:	7a10      	ldrb	r0, [r2, #8]
 8012038:	79b9      	ldrb	r1, [r7, #6]
 801203a:	683a      	ldr	r2, [r7, #0]
 801203c:	4798      	blx	r3
 801203e:	4603      	mov	r3, r0
 8012040:	73fb      	strb	r3, [r7, #15]
  return res;
 8012042:	7bfb      	ldrb	r3, [r7, #15]
}
 8012044:	4618      	mov	r0, r3
 8012046:	3710      	adds	r7, #16
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}
 801204c:	20002acc 	.word	0x20002acc

08012050 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012050:	b480      	push	{r7}
 8012052:	b085      	sub	sp, #20
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	3301      	adds	r3, #1
 801205c:	781b      	ldrb	r3, [r3, #0]
 801205e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012060:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012064:	021b      	lsls	r3, r3, #8
 8012066:	b21a      	sxth	r2, r3
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	781b      	ldrb	r3, [r3, #0]
 801206c:	b21b      	sxth	r3, r3
 801206e:	4313      	orrs	r3, r2
 8012070:	b21b      	sxth	r3, r3
 8012072:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012074:	89fb      	ldrh	r3, [r7, #14]
}
 8012076:	4618      	mov	r0, r3
 8012078:	3714      	adds	r7, #20
 801207a:	46bd      	mov	sp, r7
 801207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012080:	4770      	bx	lr

08012082 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012082:	b480      	push	{r7}
 8012084:	b085      	sub	sp, #20
 8012086:	af00      	add	r7, sp, #0
 8012088:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	3303      	adds	r3, #3
 801208e:	781b      	ldrb	r3, [r3, #0]
 8012090:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	021b      	lsls	r3, r3, #8
 8012096:	687a      	ldr	r2, [r7, #4]
 8012098:	3202      	adds	r2, #2
 801209a:	7812      	ldrb	r2, [r2, #0]
 801209c:	4313      	orrs	r3, r2
 801209e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	021b      	lsls	r3, r3, #8
 80120a4:	687a      	ldr	r2, [r7, #4]
 80120a6:	3201      	adds	r2, #1
 80120a8:	7812      	ldrb	r2, [r2, #0]
 80120aa:	4313      	orrs	r3, r2
 80120ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	021b      	lsls	r3, r3, #8
 80120b2:	687a      	ldr	r2, [r7, #4]
 80120b4:	7812      	ldrb	r2, [r2, #0]
 80120b6:	4313      	orrs	r3, r2
 80120b8:	60fb      	str	r3, [r7, #12]
	return rv;
 80120ba:	68fb      	ldr	r3, [r7, #12]
}
 80120bc:	4618      	mov	r0, r3
 80120be:	3714      	adds	r7, #20
 80120c0:	46bd      	mov	sp, r7
 80120c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c6:	4770      	bx	lr

080120c8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80120c8:	b480      	push	{r7}
 80120ca:	b083      	sub	sp, #12
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	460b      	mov	r3, r1
 80120d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	1c5a      	adds	r2, r3, #1
 80120d8:	607a      	str	r2, [r7, #4]
 80120da:	887a      	ldrh	r2, [r7, #2]
 80120dc:	b2d2      	uxtb	r2, r2
 80120de:	701a      	strb	r2, [r3, #0]
 80120e0:	887b      	ldrh	r3, [r7, #2]
 80120e2:	0a1b      	lsrs	r3, r3, #8
 80120e4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	1c5a      	adds	r2, r3, #1
 80120ea:	607a      	str	r2, [r7, #4]
 80120ec:	887a      	ldrh	r2, [r7, #2]
 80120ee:	b2d2      	uxtb	r2, r2
 80120f0:	701a      	strb	r2, [r3, #0]
}
 80120f2:	bf00      	nop
 80120f4:	370c      	adds	r7, #12
 80120f6:	46bd      	mov	sp, r7
 80120f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fc:	4770      	bx	lr

080120fe <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80120fe:	b480      	push	{r7}
 8012100:	b083      	sub	sp, #12
 8012102:	af00      	add	r7, sp, #0
 8012104:	6078      	str	r0, [r7, #4]
 8012106:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	1c5a      	adds	r2, r3, #1
 801210c:	607a      	str	r2, [r7, #4]
 801210e:	683a      	ldr	r2, [r7, #0]
 8012110:	b2d2      	uxtb	r2, r2
 8012112:	701a      	strb	r2, [r3, #0]
 8012114:	683b      	ldr	r3, [r7, #0]
 8012116:	0a1b      	lsrs	r3, r3, #8
 8012118:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	1c5a      	adds	r2, r3, #1
 801211e:	607a      	str	r2, [r7, #4]
 8012120:	683a      	ldr	r2, [r7, #0]
 8012122:	b2d2      	uxtb	r2, r2
 8012124:	701a      	strb	r2, [r3, #0]
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	0a1b      	lsrs	r3, r3, #8
 801212a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	1c5a      	adds	r2, r3, #1
 8012130:	607a      	str	r2, [r7, #4]
 8012132:	683a      	ldr	r2, [r7, #0]
 8012134:	b2d2      	uxtb	r2, r2
 8012136:	701a      	strb	r2, [r3, #0]
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	0a1b      	lsrs	r3, r3, #8
 801213c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	1c5a      	adds	r2, r3, #1
 8012142:	607a      	str	r2, [r7, #4]
 8012144:	683a      	ldr	r2, [r7, #0]
 8012146:	b2d2      	uxtb	r2, r2
 8012148:	701a      	strb	r2, [r3, #0]
}
 801214a:	bf00      	nop
 801214c:	370c      	adds	r7, #12
 801214e:	46bd      	mov	sp, r7
 8012150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012154:	4770      	bx	lr

08012156 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012156:	b480      	push	{r7}
 8012158:	b087      	sub	sp, #28
 801215a:	af00      	add	r7, sp, #0
 801215c:	60f8      	str	r0, [r7, #12]
 801215e:	60b9      	str	r1, [r7, #8]
 8012160:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d00d      	beq.n	801218c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012170:	693a      	ldr	r2, [r7, #16]
 8012172:	1c53      	adds	r3, r2, #1
 8012174:	613b      	str	r3, [r7, #16]
 8012176:	697b      	ldr	r3, [r7, #20]
 8012178:	1c59      	adds	r1, r3, #1
 801217a:	6179      	str	r1, [r7, #20]
 801217c:	7812      	ldrb	r2, [r2, #0]
 801217e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	3b01      	subs	r3, #1
 8012184:	607b      	str	r3, [r7, #4]
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d1f1      	bne.n	8012170 <mem_cpy+0x1a>
	}
}
 801218c:	bf00      	nop
 801218e:	371c      	adds	r7, #28
 8012190:	46bd      	mov	sp, r7
 8012192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012196:	4770      	bx	lr

08012198 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012198:	b480      	push	{r7}
 801219a:	b087      	sub	sp, #28
 801219c:	af00      	add	r7, sp, #0
 801219e:	60f8      	str	r0, [r7, #12]
 80121a0:	60b9      	str	r1, [r7, #8]
 80121a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80121a8:	697b      	ldr	r3, [r7, #20]
 80121aa:	1c5a      	adds	r2, r3, #1
 80121ac:	617a      	str	r2, [r7, #20]
 80121ae:	68ba      	ldr	r2, [r7, #8]
 80121b0:	b2d2      	uxtb	r2, r2
 80121b2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	3b01      	subs	r3, #1
 80121b8:	607b      	str	r3, [r7, #4]
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d1f3      	bne.n	80121a8 <mem_set+0x10>
}
 80121c0:	bf00      	nop
 80121c2:	bf00      	nop
 80121c4:	371c      	adds	r7, #28
 80121c6:	46bd      	mov	sp, r7
 80121c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121cc:	4770      	bx	lr

080121ce <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80121ce:	b480      	push	{r7}
 80121d0:	b089      	sub	sp, #36	@ 0x24
 80121d2:	af00      	add	r7, sp, #0
 80121d4:	60f8      	str	r0, [r7, #12]
 80121d6:	60b9      	str	r1, [r7, #8]
 80121d8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	61fb      	str	r3, [r7, #28]
 80121de:	68bb      	ldr	r3, [r7, #8]
 80121e0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80121e2:	2300      	movs	r3, #0
 80121e4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80121e6:	69fb      	ldr	r3, [r7, #28]
 80121e8:	1c5a      	adds	r2, r3, #1
 80121ea:	61fa      	str	r2, [r7, #28]
 80121ec:	781b      	ldrb	r3, [r3, #0]
 80121ee:	4619      	mov	r1, r3
 80121f0:	69bb      	ldr	r3, [r7, #24]
 80121f2:	1c5a      	adds	r2, r3, #1
 80121f4:	61ba      	str	r2, [r7, #24]
 80121f6:	781b      	ldrb	r3, [r3, #0]
 80121f8:	1acb      	subs	r3, r1, r3
 80121fa:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	3b01      	subs	r3, #1
 8012200:	607b      	str	r3, [r7, #4]
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d002      	beq.n	801220e <mem_cmp+0x40>
 8012208:	697b      	ldr	r3, [r7, #20]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d0eb      	beq.n	80121e6 <mem_cmp+0x18>

	return r;
 801220e:	697b      	ldr	r3, [r7, #20]
}
 8012210:	4618      	mov	r0, r3
 8012212:	3724      	adds	r7, #36	@ 0x24
 8012214:	46bd      	mov	sp, r7
 8012216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221a:	4770      	bx	lr

0801221c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801221c:	b480      	push	{r7}
 801221e:	b083      	sub	sp, #12
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
 8012224:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012226:	e002      	b.n	801222e <chk_chr+0x12>
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	3301      	adds	r3, #1
 801222c:	607b      	str	r3, [r7, #4]
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	781b      	ldrb	r3, [r3, #0]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d005      	beq.n	8012242 <chk_chr+0x26>
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	781b      	ldrb	r3, [r3, #0]
 801223a:	461a      	mov	r2, r3
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	4293      	cmp	r3, r2
 8012240:	d1f2      	bne.n	8012228 <chk_chr+0xc>
	return *str;
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	781b      	ldrb	r3, [r3, #0]
}
 8012246:	4618      	mov	r0, r3
 8012248:	370c      	adds	r7, #12
 801224a:	46bd      	mov	sp, r7
 801224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012250:	4770      	bx	lr

08012252 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012252:	b580      	push	{r7, lr}
 8012254:	b086      	sub	sp, #24
 8012256:	af00      	add	r7, sp, #0
 8012258:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801225a:	2300      	movs	r3, #0
 801225c:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	78db      	ldrb	r3, [r3, #3]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d034      	beq.n	80122d0 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801226a:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	7858      	ldrb	r0, [r3, #1]
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012276:	2301      	movs	r3, #1
 8012278:	697a      	ldr	r2, [r7, #20]
 801227a:	f7ff feab 	bl	8011fd4 <disk_write>
 801227e:	4603      	mov	r3, r0
 8012280:	2b00      	cmp	r3, #0
 8012282:	d002      	beq.n	801228a <sync_window+0x38>
			res = FR_DISK_ERR;
 8012284:	2301      	movs	r3, #1
 8012286:	73fb      	strb	r3, [r7, #15]
 8012288:	e022      	b.n	80122d0 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	2200      	movs	r2, #0
 801228e:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	6a1b      	ldr	r3, [r3, #32]
 8012294:	697a      	ldr	r2, [r7, #20]
 8012296:	1ad2      	subs	r2, r2, r3
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	699b      	ldr	r3, [r3, #24]
 801229c:	429a      	cmp	r2, r3
 801229e:	d217      	bcs.n	80122d0 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	789b      	ldrb	r3, [r3, #2]
 80122a4:	613b      	str	r3, [r7, #16]
 80122a6:	e010      	b.n	80122ca <sync_window+0x78>
					wsect += fs->fsize;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	699b      	ldr	r3, [r3, #24]
 80122ac:	697a      	ldr	r2, [r7, #20]
 80122ae:	4413      	add	r3, r2
 80122b0:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	7858      	ldrb	r0, [r3, #1]
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80122bc:	2301      	movs	r3, #1
 80122be:	697a      	ldr	r2, [r7, #20]
 80122c0:	f7ff fe88 	bl	8011fd4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80122c4:	693b      	ldr	r3, [r7, #16]
 80122c6:	3b01      	subs	r3, #1
 80122c8:	613b      	str	r3, [r7, #16]
 80122ca:	693b      	ldr	r3, [r7, #16]
 80122cc:	2b01      	cmp	r3, #1
 80122ce:	d8eb      	bhi.n	80122a8 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80122d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80122d2:	4618      	mov	r0, r3
 80122d4:	3718      	adds	r7, #24
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd80      	pop	{r7, pc}

080122da <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80122da:	b580      	push	{r7, lr}
 80122dc:	b084      	sub	sp, #16
 80122de:	af00      	add	r7, sp, #0
 80122e0:	6078      	str	r0, [r7, #4]
 80122e2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80122e4:	2300      	movs	r3, #0
 80122e6:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122ec:	683a      	ldr	r2, [r7, #0]
 80122ee:	429a      	cmp	r2, r3
 80122f0:	d01b      	beq.n	801232a <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80122f2:	6878      	ldr	r0, [r7, #4]
 80122f4:	f7ff ffad 	bl	8012252 <sync_window>
 80122f8:	4603      	mov	r3, r0
 80122fa:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80122fc:	7bfb      	ldrb	r3, [r7, #15]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d113      	bne.n	801232a <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	7858      	ldrb	r0, [r3, #1]
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801230c:	2301      	movs	r3, #1
 801230e:	683a      	ldr	r2, [r7, #0]
 8012310:	f7ff fe40 	bl	8011f94 <disk_read>
 8012314:	4603      	mov	r3, r0
 8012316:	2b00      	cmp	r3, #0
 8012318:	d004      	beq.n	8012324 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801231a:	f04f 33ff 	mov.w	r3, #4294967295
 801231e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012320:	2301      	movs	r3, #1
 8012322:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	683a      	ldr	r2, [r7, #0]
 8012328:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 801232a:	7bfb      	ldrb	r3, [r7, #15]
}
 801232c:	4618      	mov	r0, r3
 801232e:	3710      	adds	r7, #16
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}

08012334 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b084      	sub	sp, #16
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801233c:	6878      	ldr	r0, [r7, #4]
 801233e:	f7ff ff88 	bl	8012252 <sync_window>
 8012342:	4603      	mov	r3, r0
 8012344:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012346:	7bfb      	ldrb	r3, [r7, #15]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d158      	bne.n	80123fe <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	781b      	ldrb	r3, [r3, #0]
 8012350:	2b03      	cmp	r3, #3
 8012352:	d148      	bne.n	80123e6 <sync_fs+0xb2>
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	791b      	ldrb	r3, [r3, #4]
 8012358:	2b01      	cmp	r3, #1
 801235a:	d144      	bne.n	80123e6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	3330      	adds	r3, #48	@ 0x30
 8012360:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012364:	2100      	movs	r1, #0
 8012366:	4618      	mov	r0, r3
 8012368:	f7ff ff16 	bl	8012198 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	3330      	adds	r3, #48	@ 0x30
 8012370:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012374:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8012378:	4618      	mov	r0, r3
 801237a:	f7ff fea5 	bl	80120c8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	3330      	adds	r3, #48	@ 0x30
 8012382:	4921      	ldr	r1, [pc, #132]	@ (8012408 <sync_fs+0xd4>)
 8012384:	4618      	mov	r0, r3
 8012386:	f7ff feba 	bl	80120fe <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	3330      	adds	r3, #48	@ 0x30
 801238e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012392:	491e      	ldr	r1, [pc, #120]	@ (801240c <sync_fs+0xd8>)
 8012394:	4618      	mov	r0, r3
 8012396:	f7ff feb2 	bl	80120fe <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	3330      	adds	r3, #48	@ 0x30
 801239e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	691b      	ldr	r3, [r3, #16]
 80123a6:	4619      	mov	r1, r3
 80123a8:	4610      	mov	r0, r2
 80123aa:	f7ff fea8 	bl	80120fe <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	3330      	adds	r3, #48	@ 0x30
 80123b2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	68db      	ldr	r3, [r3, #12]
 80123ba:	4619      	mov	r1, r3
 80123bc:	4610      	mov	r0, r2
 80123be:	f7ff fe9e 	bl	80120fe <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	69db      	ldr	r3, [r3, #28]
 80123c6:	1c5a      	adds	r2, r3, #1
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	7858      	ldrb	r0, [r3, #1]
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123da:	2301      	movs	r3, #1
 80123dc:	f7ff fdfa 	bl	8011fd4 <disk_write>
			fs->fsi_flag = 0;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2200      	movs	r2, #0
 80123e4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	785b      	ldrb	r3, [r3, #1]
 80123ea:	2200      	movs	r2, #0
 80123ec:	2100      	movs	r1, #0
 80123ee:	4618      	mov	r0, r3
 80123f0:	f7ff fe10 	bl	8012014 <disk_ioctl>
 80123f4:	4603      	mov	r3, r0
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d001      	beq.n	80123fe <sync_fs+0xca>
 80123fa:	2301      	movs	r3, #1
 80123fc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80123fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8012400:	4618      	mov	r0, r3
 8012402:	3710      	adds	r7, #16
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}
 8012408:	41615252 	.word	0x41615252
 801240c:	61417272 	.word	0x61417272

08012410 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012410:	b480      	push	{r7}
 8012412:	b083      	sub	sp, #12
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
 8012418:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801241a:	683b      	ldr	r3, [r7, #0]
 801241c:	3b02      	subs	r3, #2
 801241e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	695b      	ldr	r3, [r3, #20]
 8012424:	3b02      	subs	r3, #2
 8012426:	683a      	ldr	r2, [r7, #0]
 8012428:	429a      	cmp	r2, r3
 801242a:	d301      	bcc.n	8012430 <clust2sect+0x20>
 801242c:	2300      	movs	r3, #0
 801242e:	e008      	b.n	8012442 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	895b      	ldrh	r3, [r3, #10]
 8012434:	461a      	mov	r2, r3
 8012436:	683b      	ldr	r3, [r7, #0]
 8012438:	fb03 f202 	mul.w	r2, r3, r2
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012440:	4413      	add	r3, r2
}
 8012442:	4618      	mov	r0, r3
 8012444:	370c      	adds	r7, #12
 8012446:	46bd      	mov	sp, r7
 8012448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244c:	4770      	bx	lr

0801244e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801244e:	b580      	push	{r7, lr}
 8012450:	b086      	sub	sp, #24
 8012452:	af00      	add	r7, sp, #0
 8012454:	6078      	str	r0, [r7, #4]
 8012456:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	2b01      	cmp	r3, #1
 8012462:	d904      	bls.n	801246e <get_fat+0x20>
 8012464:	693b      	ldr	r3, [r7, #16]
 8012466:	695b      	ldr	r3, [r3, #20]
 8012468:	683a      	ldr	r2, [r7, #0]
 801246a:	429a      	cmp	r2, r3
 801246c:	d302      	bcc.n	8012474 <get_fat+0x26>
		val = 1;	/* Internal error */
 801246e:	2301      	movs	r3, #1
 8012470:	617b      	str	r3, [r7, #20]
 8012472:	e08e      	b.n	8012592 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012474:	f04f 33ff 	mov.w	r3, #4294967295
 8012478:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801247a:	693b      	ldr	r3, [r7, #16]
 801247c:	781b      	ldrb	r3, [r3, #0]
 801247e:	2b03      	cmp	r3, #3
 8012480:	d061      	beq.n	8012546 <get_fat+0xf8>
 8012482:	2b03      	cmp	r3, #3
 8012484:	dc7b      	bgt.n	801257e <get_fat+0x130>
 8012486:	2b01      	cmp	r3, #1
 8012488:	d002      	beq.n	8012490 <get_fat+0x42>
 801248a:	2b02      	cmp	r3, #2
 801248c:	d041      	beq.n	8012512 <get_fat+0xc4>
 801248e:	e076      	b.n	801257e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012490:	683b      	ldr	r3, [r7, #0]
 8012492:	60fb      	str	r3, [r7, #12]
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	085b      	lsrs	r3, r3, #1
 8012498:	68fa      	ldr	r2, [r7, #12]
 801249a:	4413      	add	r3, r2
 801249c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801249e:	693b      	ldr	r3, [r7, #16]
 80124a0:	6a1a      	ldr	r2, [r3, #32]
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	0a5b      	lsrs	r3, r3, #9
 80124a6:	4413      	add	r3, r2
 80124a8:	4619      	mov	r1, r3
 80124aa:	6938      	ldr	r0, [r7, #16]
 80124ac:	f7ff ff15 	bl	80122da <move_window>
 80124b0:	4603      	mov	r3, r0
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d166      	bne.n	8012584 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	1c5a      	adds	r2, r3, #1
 80124ba:	60fa      	str	r2, [r7, #12]
 80124bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124c0:	693a      	ldr	r2, [r7, #16]
 80124c2:	4413      	add	r3, r2
 80124c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80124c8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80124ca:	693b      	ldr	r3, [r7, #16]
 80124cc:	6a1a      	ldr	r2, [r3, #32]
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	0a5b      	lsrs	r3, r3, #9
 80124d2:	4413      	add	r3, r2
 80124d4:	4619      	mov	r1, r3
 80124d6:	6938      	ldr	r0, [r7, #16]
 80124d8:	f7ff feff 	bl	80122da <move_window>
 80124dc:	4603      	mov	r3, r0
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d152      	bne.n	8012588 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124e8:	693a      	ldr	r2, [r7, #16]
 80124ea:	4413      	add	r3, r2
 80124ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80124f0:	021b      	lsls	r3, r3, #8
 80124f2:	68ba      	ldr	r2, [r7, #8]
 80124f4:	4313      	orrs	r3, r2
 80124f6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80124f8:	683b      	ldr	r3, [r7, #0]
 80124fa:	f003 0301 	and.w	r3, r3, #1
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d002      	beq.n	8012508 <get_fat+0xba>
 8012502:	68bb      	ldr	r3, [r7, #8]
 8012504:	091b      	lsrs	r3, r3, #4
 8012506:	e002      	b.n	801250e <get_fat+0xc0>
 8012508:	68bb      	ldr	r3, [r7, #8]
 801250a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801250e:	617b      	str	r3, [r7, #20]
			break;
 8012510:	e03f      	b.n	8012592 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012512:	693b      	ldr	r3, [r7, #16]
 8012514:	6a1a      	ldr	r2, [r3, #32]
 8012516:	683b      	ldr	r3, [r7, #0]
 8012518:	0a1b      	lsrs	r3, r3, #8
 801251a:	4413      	add	r3, r2
 801251c:	4619      	mov	r1, r3
 801251e:	6938      	ldr	r0, [r7, #16]
 8012520:	f7ff fedb 	bl	80122da <move_window>
 8012524:	4603      	mov	r3, r0
 8012526:	2b00      	cmp	r3, #0
 8012528:	d130      	bne.n	801258c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801252a:	693b      	ldr	r3, [r7, #16]
 801252c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	005b      	lsls	r3, r3, #1
 8012534:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012538:	4413      	add	r3, r2
 801253a:	4618      	mov	r0, r3
 801253c:	f7ff fd88 	bl	8012050 <ld_word>
 8012540:	4603      	mov	r3, r0
 8012542:	617b      	str	r3, [r7, #20]
			break;
 8012544:	e025      	b.n	8012592 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012546:	693b      	ldr	r3, [r7, #16]
 8012548:	6a1a      	ldr	r2, [r3, #32]
 801254a:	683b      	ldr	r3, [r7, #0]
 801254c:	09db      	lsrs	r3, r3, #7
 801254e:	4413      	add	r3, r2
 8012550:	4619      	mov	r1, r3
 8012552:	6938      	ldr	r0, [r7, #16]
 8012554:	f7ff fec1 	bl	80122da <move_window>
 8012558:	4603      	mov	r3, r0
 801255a:	2b00      	cmp	r3, #0
 801255c:	d118      	bne.n	8012590 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801255e:	693b      	ldr	r3, [r7, #16]
 8012560:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	009b      	lsls	r3, r3, #2
 8012568:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801256c:	4413      	add	r3, r2
 801256e:	4618      	mov	r0, r3
 8012570:	f7ff fd87 	bl	8012082 <ld_dword>
 8012574:	4603      	mov	r3, r0
 8012576:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801257a:	617b      	str	r3, [r7, #20]
			break;
 801257c:	e009      	b.n	8012592 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801257e:	2301      	movs	r3, #1
 8012580:	617b      	str	r3, [r7, #20]
 8012582:	e006      	b.n	8012592 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012584:	bf00      	nop
 8012586:	e004      	b.n	8012592 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012588:	bf00      	nop
 801258a:	e002      	b.n	8012592 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801258c:	bf00      	nop
 801258e:	e000      	b.n	8012592 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012590:	bf00      	nop
		}
	}

	return val;
 8012592:	697b      	ldr	r3, [r7, #20]
}
 8012594:	4618      	mov	r0, r3
 8012596:	3718      	adds	r7, #24
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}

0801259c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801259c:	b590      	push	{r4, r7, lr}
 801259e:	b089      	sub	sp, #36	@ 0x24
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	60f8      	str	r0, [r7, #12]
 80125a4:	60b9      	str	r1, [r7, #8]
 80125a6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80125a8:	2302      	movs	r3, #2
 80125aa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	2b01      	cmp	r3, #1
 80125b0:	f240 80d9 	bls.w	8012766 <put_fat+0x1ca>
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	695b      	ldr	r3, [r3, #20]
 80125b8:	68ba      	ldr	r2, [r7, #8]
 80125ba:	429a      	cmp	r2, r3
 80125bc:	f080 80d3 	bcs.w	8012766 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	781b      	ldrb	r3, [r3, #0]
 80125c4:	2b03      	cmp	r3, #3
 80125c6:	f000 8096 	beq.w	80126f6 <put_fat+0x15a>
 80125ca:	2b03      	cmp	r3, #3
 80125cc:	f300 80cb 	bgt.w	8012766 <put_fat+0x1ca>
 80125d0:	2b01      	cmp	r3, #1
 80125d2:	d002      	beq.n	80125da <put_fat+0x3e>
 80125d4:	2b02      	cmp	r3, #2
 80125d6:	d06e      	beq.n	80126b6 <put_fat+0x11a>
 80125d8:	e0c5      	b.n	8012766 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80125da:	68bb      	ldr	r3, [r7, #8]
 80125dc:	61bb      	str	r3, [r7, #24]
 80125de:	69bb      	ldr	r3, [r7, #24]
 80125e0:	085b      	lsrs	r3, r3, #1
 80125e2:	69ba      	ldr	r2, [r7, #24]
 80125e4:	4413      	add	r3, r2
 80125e6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	6a1a      	ldr	r2, [r3, #32]
 80125ec:	69bb      	ldr	r3, [r7, #24]
 80125ee:	0a5b      	lsrs	r3, r3, #9
 80125f0:	4413      	add	r3, r2
 80125f2:	4619      	mov	r1, r3
 80125f4:	68f8      	ldr	r0, [r7, #12]
 80125f6:	f7ff fe70 	bl	80122da <move_window>
 80125fa:	4603      	mov	r3, r0
 80125fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80125fe:	7ffb      	ldrb	r3, [r7, #31]
 8012600:	2b00      	cmp	r3, #0
 8012602:	f040 80a9 	bne.w	8012758 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801260c:	69bb      	ldr	r3, [r7, #24]
 801260e:	1c59      	adds	r1, r3, #1
 8012610:	61b9      	str	r1, [r7, #24]
 8012612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012616:	4413      	add	r3, r2
 8012618:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801261a:	68bb      	ldr	r3, [r7, #8]
 801261c:	f003 0301 	and.w	r3, r3, #1
 8012620:	2b00      	cmp	r3, #0
 8012622:	d00d      	beq.n	8012640 <put_fat+0xa4>
 8012624:	697b      	ldr	r3, [r7, #20]
 8012626:	781b      	ldrb	r3, [r3, #0]
 8012628:	b25b      	sxtb	r3, r3
 801262a:	f003 030f 	and.w	r3, r3, #15
 801262e:	b25a      	sxtb	r2, r3
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	b25b      	sxtb	r3, r3
 8012634:	011b      	lsls	r3, r3, #4
 8012636:	b25b      	sxtb	r3, r3
 8012638:	4313      	orrs	r3, r2
 801263a:	b25b      	sxtb	r3, r3
 801263c:	b2db      	uxtb	r3, r3
 801263e:	e001      	b.n	8012644 <put_fat+0xa8>
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	b2db      	uxtb	r3, r3
 8012644:	697a      	ldr	r2, [r7, #20]
 8012646:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	2201      	movs	r2, #1
 801264c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	6a1a      	ldr	r2, [r3, #32]
 8012652:	69bb      	ldr	r3, [r7, #24]
 8012654:	0a5b      	lsrs	r3, r3, #9
 8012656:	4413      	add	r3, r2
 8012658:	4619      	mov	r1, r3
 801265a:	68f8      	ldr	r0, [r7, #12]
 801265c:	f7ff fe3d 	bl	80122da <move_window>
 8012660:	4603      	mov	r3, r0
 8012662:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012664:	7ffb      	ldrb	r3, [r7, #31]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d178      	bne.n	801275c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012670:	69bb      	ldr	r3, [r7, #24]
 8012672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012676:	4413      	add	r3, r2
 8012678:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801267a:	68bb      	ldr	r3, [r7, #8]
 801267c:	f003 0301 	and.w	r3, r3, #1
 8012680:	2b00      	cmp	r3, #0
 8012682:	d003      	beq.n	801268c <put_fat+0xf0>
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	091b      	lsrs	r3, r3, #4
 8012688:	b2db      	uxtb	r3, r3
 801268a:	e00e      	b.n	80126aa <put_fat+0x10e>
 801268c:	697b      	ldr	r3, [r7, #20]
 801268e:	781b      	ldrb	r3, [r3, #0]
 8012690:	b25b      	sxtb	r3, r3
 8012692:	f023 030f 	bic.w	r3, r3, #15
 8012696:	b25a      	sxtb	r2, r3
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	0a1b      	lsrs	r3, r3, #8
 801269c:	b25b      	sxtb	r3, r3
 801269e:	f003 030f 	and.w	r3, r3, #15
 80126a2:	b25b      	sxtb	r3, r3
 80126a4:	4313      	orrs	r3, r2
 80126a6:	b25b      	sxtb	r3, r3
 80126a8:	b2db      	uxtb	r3, r3
 80126aa:	697a      	ldr	r2, [r7, #20]
 80126ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	2201      	movs	r2, #1
 80126b2:	70da      	strb	r2, [r3, #3]
			break;
 80126b4:	e057      	b.n	8012766 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	6a1a      	ldr	r2, [r3, #32]
 80126ba:	68bb      	ldr	r3, [r7, #8]
 80126bc:	0a1b      	lsrs	r3, r3, #8
 80126be:	4413      	add	r3, r2
 80126c0:	4619      	mov	r1, r3
 80126c2:	68f8      	ldr	r0, [r7, #12]
 80126c4:	f7ff fe09 	bl	80122da <move_window>
 80126c8:	4603      	mov	r3, r0
 80126ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80126cc:	7ffb      	ldrb	r3, [r7, #31]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d146      	bne.n	8012760 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80126d8:	68bb      	ldr	r3, [r7, #8]
 80126da:	005b      	lsls	r3, r3, #1
 80126dc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80126e0:	4413      	add	r3, r2
 80126e2:	687a      	ldr	r2, [r7, #4]
 80126e4:	b292      	uxth	r2, r2
 80126e6:	4611      	mov	r1, r2
 80126e8:	4618      	mov	r0, r3
 80126ea:	f7ff fced 	bl	80120c8 <st_word>
			fs->wflag = 1;
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	2201      	movs	r2, #1
 80126f2:	70da      	strb	r2, [r3, #3]
			break;
 80126f4:	e037      	b.n	8012766 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	6a1a      	ldr	r2, [r3, #32]
 80126fa:	68bb      	ldr	r3, [r7, #8]
 80126fc:	09db      	lsrs	r3, r3, #7
 80126fe:	4413      	add	r3, r2
 8012700:	4619      	mov	r1, r3
 8012702:	68f8      	ldr	r0, [r7, #12]
 8012704:	f7ff fde9 	bl	80122da <move_window>
 8012708:	4603      	mov	r3, r0
 801270a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801270c:	7ffb      	ldrb	r3, [r7, #31]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d128      	bne.n	8012764 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801271e:	68bb      	ldr	r3, [r7, #8]
 8012720:	009b      	lsls	r3, r3, #2
 8012722:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012726:	4413      	add	r3, r2
 8012728:	4618      	mov	r0, r3
 801272a:	f7ff fcaa 	bl	8012082 <ld_dword>
 801272e:	4603      	mov	r3, r0
 8012730:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8012734:	4323      	orrs	r3, r4
 8012736:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801273e:	68bb      	ldr	r3, [r7, #8]
 8012740:	009b      	lsls	r3, r3, #2
 8012742:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012746:	4413      	add	r3, r2
 8012748:	6879      	ldr	r1, [r7, #4]
 801274a:	4618      	mov	r0, r3
 801274c:	f7ff fcd7 	bl	80120fe <st_dword>
			fs->wflag = 1;
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	2201      	movs	r2, #1
 8012754:	70da      	strb	r2, [r3, #3]
			break;
 8012756:	e006      	b.n	8012766 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012758:	bf00      	nop
 801275a:	e004      	b.n	8012766 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801275c:	bf00      	nop
 801275e:	e002      	b.n	8012766 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012760:	bf00      	nop
 8012762:	e000      	b.n	8012766 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012764:	bf00      	nop
		}
	}
	return res;
 8012766:	7ffb      	ldrb	r3, [r7, #31]
}
 8012768:	4618      	mov	r0, r3
 801276a:	3724      	adds	r7, #36	@ 0x24
 801276c:	46bd      	mov	sp, r7
 801276e:	bd90      	pop	{r4, r7, pc}

08012770 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b088      	sub	sp, #32
 8012774:	af00      	add	r7, sp, #0
 8012776:	60f8      	str	r0, [r7, #12]
 8012778:	60b9      	str	r1, [r7, #8]
 801277a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801277c:	2300      	movs	r3, #0
 801277e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012786:	68bb      	ldr	r3, [r7, #8]
 8012788:	2b01      	cmp	r3, #1
 801278a:	d904      	bls.n	8012796 <remove_chain+0x26>
 801278c:	69bb      	ldr	r3, [r7, #24]
 801278e:	695b      	ldr	r3, [r3, #20]
 8012790:	68ba      	ldr	r2, [r7, #8]
 8012792:	429a      	cmp	r2, r3
 8012794:	d301      	bcc.n	801279a <remove_chain+0x2a>
 8012796:	2302      	movs	r3, #2
 8012798:	e04b      	b.n	8012832 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d00c      	beq.n	80127ba <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80127a0:	f04f 32ff 	mov.w	r2, #4294967295
 80127a4:	6879      	ldr	r1, [r7, #4]
 80127a6:	69b8      	ldr	r0, [r7, #24]
 80127a8:	f7ff fef8 	bl	801259c <put_fat>
 80127ac:	4603      	mov	r3, r0
 80127ae:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80127b0:	7ffb      	ldrb	r3, [r7, #31]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d001      	beq.n	80127ba <remove_chain+0x4a>
 80127b6:	7ffb      	ldrb	r3, [r7, #31]
 80127b8:	e03b      	b.n	8012832 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80127ba:	68b9      	ldr	r1, [r7, #8]
 80127bc:	68f8      	ldr	r0, [r7, #12]
 80127be:	f7ff fe46 	bl	801244e <get_fat>
 80127c2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80127c4:	697b      	ldr	r3, [r7, #20]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d031      	beq.n	801282e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80127ca:	697b      	ldr	r3, [r7, #20]
 80127cc:	2b01      	cmp	r3, #1
 80127ce:	d101      	bne.n	80127d4 <remove_chain+0x64>
 80127d0:	2302      	movs	r3, #2
 80127d2:	e02e      	b.n	8012832 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127da:	d101      	bne.n	80127e0 <remove_chain+0x70>
 80127dc:	2301      	movs	r3, #1
 80127de:	e028      	b.n	8012832 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80127e0:	2200      	movs	r2, #0
 80127e2:	68b9      	ldr	r1, [r7, #8]
 80127e4:	69b8      	ldr	r0, [r7, #24]
 80127e6:	f7ff fed9 	bl	801259c <put_fat>
 80127ea:	4603      	mov	r3, r0
 80127ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80127ee:	7ffb      	ldrb	r3, [r7, #31]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d001      	beq.n	80127f8 <remove_chain+0x88>
 80127f4:	7ffb      	ldrb	r3, [r7, #31]
 80127f6:	e01c      	b.n	8012832 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80127f8:	69bb      	ldr	r3, [r7, #24]
 80127fa:	691a      	ldr	r2, [r3, #16]
 80127fc:	69bb      	ldr	r3, [r7, #24]
 80127fe:	695b      	ldr	r3, [r3, #20]
 8012800:	3b02      	subs	r3, #2
 8012802:	429a      	cmp	r2, r3
 8012804:	d20b      	bcs.n	801281e <remove_chain+0xae>
			fs->free_clst++;
 8012806:	69bb      	ldr	r3, [r7, #24]
 8012808:	691b      	ldr	r3, [r3, #16]
 801280a:	1c5a      	adds	r2, r3, #1
 801280c:	69bb      	ldr	r3, [r7, #24]
 801280e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8012810:	69bb      	ldr	r3, [r7, #24]
 8012812:	791b      	ldrb	r3, [r3, #4]
 8012814:	f043 0301 	orr.w	r3, r3, #1
 8012818:	b2da      	uxtb	r2, r3
 801281a:	69bb      	ldr	r3, [r7, #24]
 801281c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012822:	69bb      	ldr	r3, [r7, #24]
 8012824:	695b      	ldr	r3, [r3, #20]
 8012826:	68ba      	ldr	r2, [r7, #8]
 8012828:	429a      	cmp	r2, r3
 801282a:	d3c6      	bcc.n	80127ba <remove_chain+0x4a>
 801282c:	e000      	b.n	8012830 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801282e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012830:	2300      	movs	r3, #0
}
 8012832:	4618      	mov	r0, r3
 8012834:	3720      	adds	r7, #32
 8012836:	46bd      	mov	sp, r7
 8012838:	bd80      	pop	{r7, pc}

0801283a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801283a:	b580      	push	{r7, lr}
 801283c:	b088      	sub	sp, #32
 801283e:	af00      	add	r7, sp, #0
 8012840:	6078      	str	r0, [r7, #4]
 8012842:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d10d      	bne.n	801286c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012850:	693b      	ldr	r3, [r7, #16]
 8012852:	68db      	ldr	r3, [r3, #12]
 8012854:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012856:	69bb      	ldr	r3, [r7, #24]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d004      	beq.n	8012866 <create_chain+0x2c>
 801285c:	693b      	ldr	r3, [r7, #16]
 801285e:	695b      	ldr	r3, [r3, #20]
 8012860:	69ba      	ldr	r2, [r7, #24]
 8012862:	429a      	cmp	r2, r3
 8012864:	d31b      	bcc.n	801289e <create_chain+0x64>
 8012866:	2301      	movs	r3, #1
 8012868:	61bb      	str	r3, [r7, #24]
 801286a:	e018      	b.n	801289e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801286c:	6839      	ldr	r1, [r7, #0]
 801286e:	6878      	ldr	r0, [r7, #4]
 8012870:	f7ff fded 	bl	801244e <get_fat>
 8012874:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	2b01      	cmp	r3, #1
 801287a:	d801      	bhi.n	8012880 <create_chain+0x46>
 801287c:	2301      	movs	r3, #1
 801287e:	e070      	b.n	8012962 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012886:	d101      	bne.n	801288c <create_chain+0x52>
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	e06a      	b.n	8012962 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801288c:	693b      	ldr	r3, [r7, #16]
 801288e:	695b      	ldr	r3, [r3, #20]
 8012890:	68fa      	ldr	r2, [r7, #12]
 8012892:	429a      	cmp	r2, r3
 8012894:	d201      	bcs.n	801289a <create_chain+0x60>
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	e063      	b.n	8012962 <create_chain+0x128>
		scl = clst;
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801289e:	69bb      	ldr	r3, [r7, #24]
 80128a0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80128a2:	69fb      	ldr	r3, [r7, #28]
 80128a4:	3301      	adds	r3, #1
 80128a6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80128a8:	693b      	ldr	r3, [r7, #16]
 80128aa:	695b      	ldr	r3, [r3, #20]
 80128ac:	69fa      	ldr	r2, [r7, #28]
 80128ae:	429a      	cmp	r2, r3
 80128b0:	d307      	bcc.n	80128c2 <create_chain+0x88>
				ncl = 2;
 80128b2:	2302      	movs	r3, #2
 80128b4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80128b6:	69fa      	ldr	r2, [r7, #28]
 80128b8:	69bb      	ldr	r3, [r7, #24]
 80128ba:	429a      	cmp	r2, r3
 80128bc:	d901      	bls.n	80128c2 <create_chain+0x88>
 80128be:	2300      	movs	r3, #0
 80128c0:	e04f      	b.n	8012962 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80128c2:	69f9      	ldr	r1, [r7, #28]
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f7ff fdc2 	bl	801244e <get_fat>
 80128ca:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d00e      	beq.n	80128f0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	2b01      	cmp	r3, #1
 80128d6:	d003      	beq.n	80128e0 <create_chain+0xa6>
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128de:	d101      	bne.n	80128e4 <create_chain+0xaa>
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	e03e      	b.n	8012962 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80128e4:	69fa      	ldr	r2, [r7, #28]
 80128e6:	69bb      	ldr	r3, [r7, #24]
 80128e8:	429a      	cmp	r2, r3
 80128ea:	d1da      	bne.n	80128a2 <create_chain+0x68>
 80128ec:	2300      	movs	r3, #0
 80128ee:	e038      	b.n	8012962 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80128f0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80128f2:	f04f 32ff 	mov.w	r2, #4294967295
 80128f6:	69f9      	ldr	r1, [r7, #28]
 80128f8:	6938      	ldr	r0, [r7, #16]
 80128fa:	f7ff fe4f 	bl	801259c <put_fat>
 80128fe:	4603      	mov	r3, r0
 8012900:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012902:	7dfb      	ldrb	r3, [r7, #23]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d109      	bne.n	801291c <create_chain+0xe2>
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d006      	beq.n	801291c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801290e:	69fa      	ldr	r2, [r7, #28]
 8012910:	6839      	ldr	r1, [r7, #0]
 8012912:	6938      	ldr	r0, [r7, #16]
 8012914:	f7ff fe42 	bl	801259c <put_fat>
 8012918:	4603      	mov	r3, r0
 801291a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801291c:	7dfb      	ldrb	r3, [r7, #23]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d116      	bne.n	8012950 <create_chain+0x116>
		fs->last_clst = ncl;
 8012922:	693b      	ldr	r3, [r7, #16]
 8012924:	69fa      	ldr	r2, [r7, #28]
 8012926:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012928:	693b      	ldr	r3, [r7, #16]
 801292a:	691a      	ldr	r2, [r3, #16]
 801292c:	693b      	ldr	r3, [r7, #16]
 801292e:	695b      	ldr	r3, [r3, #20]
 8012930:	3b02      	subs	r3, #2
 8012932:	429a      	cmp	r2, r3
 8012934:	d804      	bhi.n	8012940 <create_chain+0x106>
 8012936:	693b      	ldr	r3, [r7, #16]
 8012938:	691b      	ldr	r3, [r3, #16]
 801293a:	1e5a      	subs	r2, r3, #1
 801293c:	693b      	ldr	r3, [r7, #16]
 801293e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8012940:	693b      	ldr	r3, [r7, #16]
 8012942:	791b      	ldrb	r3, [r3, #4]
 8012944:	f043 0301 	orr.w	r3, r3, #1
 8012948:	b2da      	uxtb	r2, r3
 801294a:	693b      	ldr	r3, [r7, #16]
 801294c:	711a      	strb	r2, [r3, #4]
 801294e:	e007      	b.n	8012960 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012950:	7dfb      	ldrb	r3, [r7, #23]
 8012952:	2b01      	cmp	r3, #1
 8012954:	d102      	bne.n	801295c <create_chain+0x122>
 8012956:	f04f 33ff 	mov.w	r3, #4294967295
 801295a:	e000      	b.n	801295e <create_chain+0x124>
 801295c:	2301      	movs	r3, #1
 801295e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012960:	69fb      	ldr	r3, [r7, #28]
}
 8012962:	4618      	mov	r0, r3
 8012964:	3720      	adds	r7, #32
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}

0801296a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801296a:	b480      	push	{r7}
 801296c:	b087      	sub	sp, #28
 801296e:	af00      	add	r7, sp, #0
 8012970:	6078      	str	r0, [r7, #4]
 8012972:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801297e:	3304      	adds	r3, #4
 8012980:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	0a5b      	lsrs	r3, r3, #9
 8012986:	68fa      	ldr	r2, [r7, #12]
 8012988:	8952      	ldrh	r2, [r2, #10]
 801298a:	fbb3 f3f2 	udiv	r3, r3, r2
 801298e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012990:	693b      	ldr	r3, [r7, #16]
 8012992:	1d1a      	adds	r2, r3, #4
 8012994:	613a      	str	r2, [r7, #16]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d101      	bne.n	80129a4 <clmt_clust+0x3a>
 80129a0:	2300      	movs	r3, #0
 80129a2:	e010      	b.n	80129c6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80129a4:	697a      	ldr	r2, [r7, #20]
 80129a6:	68bb      	ldr	r3, [r7, #8]
 80129a8:	429a      	cmp	r2, r3
 80129aa:	d307      	bcc.n	80129bc <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80129ac:	697a      	ldr	r2, [r7, #20]
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	1ad3      	subs	r3, r2, r3
 80129b2:	617b      	str	r3, [r7, #20]
 80129b4:	693b      	ldr	r3, [r7, #16]
 80129b6:	3304      	adds	r3, #4
 80129b8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80129ba:	e7e9      	b.n	8012990 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80129bc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80129be:	693b      	ldr	r3, [r7, #16]
 80129c0:	681a      	ldr	r2, [r3, #0]
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	4413      	add	r3, r2
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	371c      	adds	r7, #28
 80129ca:	46bd      	mov	sp, r7
 80129cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d0:	4770      	bx	lr

080129d2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80129d2:	b580      	push	{r7, lr}
 80129d4:	b086      	sub	sp, #24
 80129d6:	af00      	add	r7, sp, #0
 80129d8:	6078      	str	r0, [r7, #4]
 80129da:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80129e2:	683b      	ldr	r3, [r7, #0]
 80129e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80129e8:	d204      	bcs.n	80129f4 <dir_sdi+0x22>
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	f003 031f 	and.w	r3, r3, #31
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d001      	beq.n	80129f8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80129f4:	2302      	movs	r3, #2
 80129f6:	e063      	b.n	8012ac0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	683a      	ldr	r2, [r7, #0]
 80129fc:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	689b      	ldr	r3, [r3, #8]
 8012a02:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012a04:	697b      	ldr	r3, [r7, #20]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d106      	bne.n	8012a18 <dir_sdi+0x46>
 8012a0a:	693b      	ldr	r3, [r7, #16]
 8012a0c:	781b      	ldrb	r3, [r3, #0]
 8012a0e:	2b02      	cmp	r3, #2
 8012a10:	d902      	bls.n	8012a18 <dir_sdi+0x46>
		clst = fs->dirbase;
 8012a12:	693b      	ldr	r3, [r7, #16]
 8012a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a16:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d10c      	bne.n	8012a38 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	095b      	lsrs	r3, r3, #5
 8012a22:	693a      	ldr	r2, [r7, #16]
 8012a24:	8912      	ldrh	r2, [r2, #8]
 8012a26:	4293      	cmp	r3, r2
 8012a28:	d301      	bcc.n	8012a2e <dir_sdi+0x5c>
 8012a2a:	2302      	movs	r3, #2
 8012a2c:	e048      	b.n	8012ac0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8012a2e:	693b      	ldr	r3, [r7, #16]
 8012a30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	619a      	str	r2, [r3, #24]
 8012a36:	e029      	b.n	8012a8c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012a38:	693b      	ldr	r3, [r7, #16]
 8012a3a:	895b      	ldrh	r3, [r3, #10]
 8012a3c:	025b      	lsls	r3, r3, #9
 8012a3e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012a40:	e019      	b.n	8012a76 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	6979      	ldr	r1, [r7, #20]
 8012a46:	4618      	mov	r0, r3
 8012a48:	f7ff fd01 	bl	801244e <get_fat>
 8012a4c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012a4e:	697b      	ldr	r3, [r7, #20]
 8012a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a54:	d101      	bne.n	8012a5a <dir_sdi+0x88>
 8012a56:	2301      	movs	r3, #1
 8012a58:	e032      	b.n	8012ac0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012a5a:	697b      	ldr	r3, [r7, #20]
 8012a5c:	2b01      	cmp	r3, #1
 8012a5e:	d904      	bls.n	8012a6a <dir_sdi+0x98>
 8012a60:	693b      	ldr	r3, [r7, #16]
 8012a62:	695b      	ldr	r3, [r3, #20]
 8012a64:	697a      	ldr	r2, [r7, #20]
 8012a66:	429a      	cmp	r2, r3
 8012a68:	d301      	bcc.n	8012a6e <dir_sdi+0x9c>
 8012a6a:	2302      	movs	r3, #2
 8012a6c:	e028      	b.n	8012ac0 <dir_sdi+0xee>
			ofs -= csz;
 8012a6e:	683a      	ldr	r2, [r7, #0]
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	1ad3      	subs	r3, r2, r3
 8012a74:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012a76:	683a      	ldr	r2, [r7, #0]
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	429a      	cmp	r2, r3
 8012a7c:	d2e1      	bcs.n	8012a42 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8012a7e:	6979      	ldr	r1, [r7, #20]
 8012a80:	6938      	ldr	r0, [r7, #16]
 8012a82:	f7ff fcc5 	bl	8012410 <clust2sect>
 8012a86:	4602      	mov	r2, r0
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	697a      	ldr	r2, [r7, #20]
 8012a90:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	699b      	ldr	r3, [r3, #24]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d101      	bne.n	8012a9e <dir_sdi+0xcc>
 8012a9a:	2302      	movs	r3, #2
 8012a9c:	e010      	b.n	8012ac0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	699a      	ldr	r2, [r3, #24]
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	0a5b      	lsrs	r3, r3, #9
 8012aa6:	441a      	add	r2, r3
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012aac:	693b      	ldr	r3, [r7, #16]
 8012aae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012ab2:	683b      	ldr	r3, [r7, #0]
 8012ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ab8:	441a      	add	r2, r3
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8012abe:	2300      	movs	r3, #0
}
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	3718      	adds	r7, #24
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bd80      	pop	{r7, pc}

08012ac8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b086      	sub	sp, #24
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
 8012ad0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	691b      	ldr	r3, [r3, #16]
 8012adc:	3320      	adds	r3, #32
 8012ade:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	699b      	ldr	r3, [r3, #24]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d003      	beq.n	8012af0 <dir_next+0x28>
 8012ae8:	68bb      	ldr	r3, [r7, #8]
 8012aea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012aee:	d301      	bcc.n	8012af4 <dir_next+0x2c>
 8012af0:	2304      	movs	r3, #4
 8012af2:	e0aa      	b.n	8012c4a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012af4:	68bb      	ldr	r3, [r7, #8]
 8012af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	f040 8098 	bne.w	8012c30 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	699b      	ldr	r3, [r3, #24]
 8012b04:	1c5a      	adds	r2, r3, #1
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	695b      	ldr	r3, [r3, #20]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d10b      	bne.n	8012b2a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012b12:	68bb      	ldr	r3, [r7, #8]
 8012b14:	095b      	lsrs	r3, r3, #5
 8012b16:	68fa      	ldr	r2, [r7, #12]
 8012b18:	8912      	ldrh	r2, [r2, #8]
 8012b1a:	4293      	cmp	r3, r2
 8012b1c:	f0c0 8088 	bcc.w	8012c30 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2200      	movs	r2, #0
 8012b24:	619a      	str	r2, [r3, #24]
 8012b26:	2304      	movs	r3, #4
 8012b28:	e08f      	b.n	8012c4a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012b2a:	68bb      	ldr	r3, [r7, #8]
 8012b2c:	0a5b      	lsrs	r3, r3, #9
 8012b2e:	68fa      	ldr	r2, [r7, #12]
 8012b30:	8952      	ldrh	r2, [r2, #10]
 8012b32:	3a01      	subs	r2, #1
 8012b34:	4013      	ands	r3, r2
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d17a      	bne.n	8012c30 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012b3a:	687a      	ldr	r2, [r7, #4]
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	695b      	ldr	r3, [r3, #20]
 8012b40:	4619      	mov	r1, r3
 8012b42:	4610      	mov	r0, r2
 8012b44:	f7ff fc83 	bl	801244e <get_fat>
 8012b48:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012b4a:	697b      	ldr	r3, [r7, #20]
 8012b4c:	2b01      	cmp	r3, #1
 8012b4e:	d801      	bhi.n	8012b54 <dir_next+0x8c>
 8012b50:	2302      	movs	r3, #2
 8012b52:	e07a      	b.n	8012c4a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012b54:	697b      	ldr	r3, [r7, #20]
 8012b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b5a:	d101      	bne.n	8012b60 <dir_next+0x98>
 8012b5c:	2301      	movs	r3, #1
 8012b5e:	e074      	b.n	8012c4a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	695b      	ldr	r3, [r3, #20]
 8012b64:	697a      	ldr	r2, [r7, #20]
 8012b66:	429a      	cmp	r2, r3
 8012b68:	d358      	bcc.n	8012c1c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012b6a:	683b      	ldr	r3, [r7, #0]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d104      	bne.n	8012b7a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	2200      	movs	r2, #0
 8012b74:	619a      	str	r2, [r3, #24]
 8012b76:	2304      	movs	r3, #4
 8012b78:	e067      	b.n	8012c4a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012b7a:	687a      	ldr	r2, [r7, #4]
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	695b      	ldr	r3, [r3, #20]
 8012b80:	4619      	mov	r1, r3
 8012b82:	4610      	mov	r0, r2
 8012b84:	f7ff fe59 	bl	801283a <create_chain>
 8012b88:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012b8a:	697b      	ldr	r3, [r7, #20]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d101      	bne.n	8012b94 <dir_next+0xcc>
 8012b90:	2307      	movs	r3, #7
 8012b92:	e05a      	b.n	8012c4a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012b94:	697b      	ldr	r3, [r7, #20]
 8012b96:	2b01      	cmp	r3, #1
 8012b98:	d101      	bne.n	8012b9e <dir_next+0xd6>
 8012b9a:	2302      	movs	r3, #2
 8012b9c:	e055      	b.n	8012c4a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012b9e:	697b      	ldr	r3, [r7, #20]
 8012ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ba4:	d101      	bne.n	8012baa <dir_next+0xe2>
 8012ba6:	2301      	movs	r3, #1
 8012ba8:	e04f      	b.n	8012c4a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012baa:	68f8      	ldr	r0, [r7, #12]
 8012bac:	f7ff fb51 	bl	8012252 <sync_window>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d001      	beq.n	8012bba <dir_next+0xf2>
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	e047      	b.n	8012c4a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	3330      	adds	r3, #48	@ 0x30
 8012bbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012bc2:	2100      	movs	r1, #0
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f7ff fae7 	bl	8012198 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012bca:	2300      	movs	r3, #0
 8012bcc:	613b      	str	r3, [r7, #16]
 8012bce:	6979      	ldr	r1, [r7, #20]
 8012bd0:	68f8      	ldr	r0, [r7, #12]
 8012bd2:	f7ff fc1d 	bl	8012410 <clust2sect>
 8012bd6:	4602      	mov	r2, r0
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012bdc:	e012      	b.n	8012c04 <dir_next+0x13c>
						fs->wflag = 1;
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	2201      	movs	r2, #1
 8012be2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012be4:	68f8      	ldr	r0, [r7, #12]
 8012be6:	f7ff fb34 	bl	8012252 <sync_window>
 8012bea:	4603      	mov	r3, r0
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d001      	beq.n	8012bf4 <dir_next+0x12c>
 8012bf0:	2301      	movs	r3, #1
 8012bf2:	e02a      	b.n	8012c4a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012bf4:	693b      	ldr	r3, [r7, #16]
 8012bf6:	3301      	adds	r3, #1
 8012bf8:	613b      	str	r3, [r7, #16]
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bfe:	1c5a      	adds	r2, r3, #1
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	895b      	ldrh	r3, [r3, #10]
 8012c08:	461a      	mov	r2, r3
 8012c0a:	693b      	ldr	r3, [r7, #16]
 8012c0c:	4293      	cmp	r3, r2
 8012c0e:	d3e6      	bcc.n	8012bde <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c14:	693b      	ldr	r3, [r7, #16]
 8012c16:	1ad2      	subs	r2, r2, r3
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	697a      	ldr	r2, [r7, #20]
 8012c20:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 8012c22:	6979      	ldr	r1, [r7, #20]
 8012c24:	68f8      	ldr	r0, [r7, #12]
 8012c26:	f7ff fbf3 	bl	8012410 <clust2sect>
 8012c2a:	4602      	mov	r2, r0
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	68ba      	ldr	r2, [r7, #8]
 8012c34:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012c3c:	68bb      	ldr	r3, [r7, #8]
 8012c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c42:	441a      	add	r2, r3
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8012c48:	2300      	movs	r3, #0
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	3718      	adds	r7, #24
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bd80      	pop	{r7, pc}

08012c52 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012c52:	b580      	push	{r7, lr}
 8012c54:	b086      	sub	sp, #24
 8012c56:	af00      	add	r7, sp, #0
 8012c58:	6078      	str	r0, [r7, #4]
 8012c5a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012c62:	2100      	movs	r1, #0
 8012c64:	6878      	ldr	r0, [r7, #4]
 8012c66:	f7ff feb4 	bl	80129d2 <dir_sdi>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012c6e:	7dfb      	ldrb	r3, [r7, #23]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d12b      	bne.n	8012ccc <dir_alloc+0x7a>
		n = 0;
 8012c74:	2300      	movs	r3, #0
 8012c76:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	699b      	ldr	r3, [r3, #24]
 8012c7c:	4619      	mov	r1, r3
 8012c7e:	68f8      	ldr	r0, [r7, #12]
 8012c80:	f7ff fb2b 	bl	80122da <move_window>
 8012c84:	4603      	mov	r3, r0
 8012c86:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012c88:	7dfb      	ldrb	r3, [r7, #23]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d11d      	bne.n	8012cca <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	69db      	ldr	r3, [r3, #28]
 8012c92:	781b      	ldrb	r3, [r3, #0]
 8012c94:	2be5      	cmp	r3, #229	@ 0xe5
 8012c96:	d004      	beq.n	8012ca2 <dir_alloc+0x50>
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	69db      	ldr	r3, [r3, #28]
 8012c9c:	781b      	ldrb	r3, [r3, #0]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d107      	bne.n	8012cb2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012ca2:	693b      	ldr	r3, [r7, #16]
 8012ca4:	3301      	adds	r3, #1
 8012ca6:	613b      	str	r3, [r7, #16]
 8012ca8:	693a      	ldr	r2, [r7, #16]
 8012caa:	683b      	ldr	r3, [r7, #0]
 8012cac:	429a      	cmp	r2, r3
 8012cae:	d102      	bne.n	8012cb6 <dir_alloc+0x64>
 8012cb0:	e00c      	b.n	8012ccc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012cb6:	2101      	movs	r1, #1
 8012cb8:	6878      	ldr	r0, [r7, #4]
 8012cba:	f7ff ff05 	bl	8012ac8 <dir_next>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012cc2:	7dfb      	ldrb	r3, [r7, #23]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d0d7      	beq.n	8012c78 <dir_alloc+0x26>
 8012cc8:	e000      	b.n	8012ccc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012cca:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012ccc:	7dfb      	ldrb	r3, [r7, #23]
 8012cce:	2b04      	cmp	r3, #4
 8012cd0:	d101      	bne.n	8012cd6 <dir_alloc+0x84>
 8012cd2:	2307      	movs	r3, #7
 8012cd4:	75fb      	strb	r3, [r7, #23]
	return res;
 8012cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cd8:	4618      	mov	r0, r3
 8012cda:	3718      	adds	r7, #24
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	bd80      	pop	{r7, pc}

08012ce0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b084      	sub	sp, #16
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
 8012ce8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	331a      	adds	r3, #26
 8012cee:	4618      	mov	r0, r3
 8012cf0:	f7ff f9ae 	bl	8012050 <ld_word>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	781b      	ldrb	r3, [r3, #0]
 8012cfc:	2b03      	cmp	r3, #3
 8012cfe:	d109      	bne.n	8012d14 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012d00:	683b      	ldr	r3, [r7, #0]
 8012d02:	3314      	adds	r3, #20
 8012d04:	4618      	mov	r0, r3
 8012d06:	f7ff f9a3 	bl	8012050 <ld_word>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	041b      	lsls	r3, r3, #16
 8012d0e:	68fa      	ldr	r2, [r7, #12]
 8012d10:	4313      	orrs	r3, r2
 8012d12:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012d14:	68fb      	ldr	r3, [r7, #12]
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	3710      	adds	r7, #16
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}

08012d1e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012d1e:	b580      	push	{r7, lr}
 8012d20:	b084      	sub	sp, #16
 8012d22:	af00      	add	r7, sp, #0
 8012d24:	60f8      	str	r0, [r7, #12]
 8012d26:	60b9      	str	r1, [r7, #8]
 8012d28:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012d2a:	68bb      	ldr	r3, [r7, #8]
 8012d2c:	331a      	adds	r3, #26
 8012d2e:	687a      	ldr	r2, [r7, #4]
 8012d30:	b292      	uxth	r2, r2
 8012d32:	4611      	mov	r1, r2
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7ff f9c7 	bl	80120c8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	781b      	ldrb	r3, [r3, #0]
 8012d3e:	2b03      	cmp	r3, #3
 8012d40:	d109      	bne.n	8012d56 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012d42:	68bb      	ldr	r3, [r7, #8]
 8012d44:	f103 0214 	add.w	r2, r3, #20
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	0c1b      	lsrs	r3, r3, #16
 8012d4c:	b29b      	uxth	r3, r3
 8012d4e:	4619      	mov	r1, r3
 8012d50:	4610      	mov	r0, r2
 8012d52:	f7ff f9b9 	bl	80120c8 <st_word>
	}
}
 8012d56:	bf00      	nop
 8012d58:	3710      	adds	r7, #16
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}

08012d5e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012d5e:	b580      	push	{r7, lr}
 8012d60:	b086      	sub	sp, #24
 8012d62:	af00      	add	r7, sp, #0
 8012d64:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012d6c:	2100      	movs	r1, #0
 8012d6e:	6878      	ldr	r0, [r7, #4]
 8012d70:	f7ff fe2f 	bl	80129d2 <dir_sdi>
 8012d74:	4603      	mov	r3, r0
 8012d76:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012d78:	7dfb      	ldrb	r3, [r7, #23]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d001      	beq.n	8012d82 <dir_find+0x24>
 8012d7e:	7dfb      	ldrb	r3, [r7, #23]
 8012d80:	e03e      	b.n	8012e00 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	699b      	ldr	r3, [r3, #24]
 8012d86:	4619      	mov	r1, r3
 8012d88:	6938      	ldr	r0, [r7, #16]
 8012d8a:	f7ff faa6 	bl	80122da <move_window>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012d92:	7dfb      	ldrb	r3, [r7, #23]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d12f      	bne.n	8012df8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	69db      	ldr	r3, [r3, #28]
 8012d9c:	781b      	ldrb	r3, [r3, #0]
 8012d9e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012da0:	7bfb      	ldrb	r3, [r7, #15]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d102      	bne.n	8012dac <dir_find+0x4e>
 8012da6:	2304      	movs	r3, #4
 8012da8:	75fb      	strb	r3, [r7, #23]
 8012daa:	e028      	b.n	8012dfe <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	69db      	ldr	r3, [r3, #28]
 8012db0:	330b      	adds	r3, #11
 8012db2:	781b      	ldrb	r3, [r3, #0]
 8012db4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012db8:	b2da      	uxtb	r2, r3
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	69db      	ldr	r3, [r3, #28]
 8012dc2:	330b      	adds	r3, #11
 8012dc4:	781b      	ldrb	r3, [r3, #0]
 8012dc6:	f003 0308 	and.w	r3, r3, #8
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d10a      	bne.n	8012de4 <dir_find+0x86>
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	69d8      	ldr	r0, [r3, #28]
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	3320      	adds	r3, #32
 8012dd6:	220b      	movs	r2, #11
 8012dd8:	4619      	mov	r1, r3
 8012dda:	f7ff f9f8 	bl	80121ce <mem_cmp>
 8012dde:	4603      	mov	r3, r0
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d00b      	beq.n	8012dfc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012de4:	2100      	movs	r1, #0
 8012de6:	6878      	ldr	r0, [r7, #4]
 8012de8:	f7ff fe6e 	bl	8012ac8 <dir_next>
 8012dec:	4603      	mov	r3, r0
 8012dee:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012df0:	7dfb      	ldrb	r3, [r7, #23]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d0c5      	beq.n	8012d82 <dir_find+0x24>
 8012df6:	e002      	b.n	8012dfe <dir_find+0xa0>
		if (res != FR_OK) break;
 8012df8:	bf00      	nop
 8012dfa:	e000      	b.n	8012dfe <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012dfc:	bf00      	nop

	return res;
 8012dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e00:	4618      	mov	r0, r3
 8012e02:	3718      	adds	r7, #24
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd80      	pop	{r7, pc}

08012e08 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b084      	sub	sp, #16
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012e16:	2101      	movs	r1, #1
 8012e18:	6878      	ldr	r0, [r7, #4]
 8012e1a:	f7ff ff1a 	bl	8012c52 <dir_alloc>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012e22:	7bfb      	ldrb	r3, [r7, #15]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d11c      	bne.n	8012e62 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	699b      	ldr	r3, [r3, #24]
 8012e2c:	4619      	mov	r1, r3
 8012e2e:	68b8      	ldr	r0, [r7, #8]
 8012e30:	f7ff fa53 	bl	80122da <move_window>
 8012e34:	4603      	mov	r3, r0
 8012e36:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012e38:	7bfb      	ldrb	r3, [r7, #15]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d111      	bne.n	8012e62 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	69db      	ldr	r3, [r3, #28]
 8012e42:	2220      	movs	r2, #32
 8012e44:	2100      	movs	r1, #0
 8012e46:	4618      	mov	r0, r3
 8012e48:	f7ff f9a6 	bl	8012198 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	69d8      	ldr	r0, [r3, #28]
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	3320      	adds	r3, #32
 8012e54:	220b      	movs	r2, #11
 8012e56:	4619      	mov	r1, r3
 8012e58:	f7ff f97d 	bl	8012156 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012e5c:	68bb      	ldr	r3, [r7, #8]
 8012e5e:	2201      	movs	r2, #1
 8012e60:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e64:	4618      	mov	r0, r3
 8012e66:	3710      	adds	r7, #16
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	bd80      	pop	{r7, pc}

08012e6c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b088      	sub	sp, #32
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
 8012e74:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	60fb      	str	r3, [r7, #12]
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	3320      	adds	r3, #32
 8012e80:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012e82:	220b      	movs	r2, #11
 8012e84:	2120      	movs	r1, #32
 8012e86:	68b8      	ldr	r0, [r7, #8]
 8012e88:	f7ff f986 	bl	8012198 <mem_set>
	si = i = 0; ni = 8;
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	613b      	str	r3, [r7, #16]
 8012e90:	693b      	ldr	r3, [r7, #16]
 8012e92:	61fb      	str	r3, [r7, #28]
 8012e94:	2308      	movs	r3, #8
 8012e96:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012e98:	69fb      	ldr	r3, [r7, #28]
 8012e9a:	1c5a      	adds	r2, r3, #1
 8012e9c:	61fa      	str	r2, [r7, #28]
 8012e9e:	68fa      	ldr	r2, [r7, #12]
 8012ea0:	4413      	add	r3, r2
 8012ea2:	781b      	ldrb	r3, [r3, #0]
 8012ea4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012ea6:	7efb      	ldrb	r3, [r7, #27]
 8012ea8:	2b20      	cmp	r3, #32
 8012eaa:	d94e      	bls.n	8012f4a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012eac:	7efb      	ldrb	r3, [r7, #27]
 8012eae:	2b2f      	cmp	r3, #47	@ 0x2f
 8012eb0:	d006      	beq.n	8012ec0 <create_name+0x54>
 8012eb2:	7efb      	ldrb	r3, [r7, #27]
 8012eb4:	2b5c      	cmp	r3, #92	@ 0x5c
 8012eb6:	d110      	bne.n	8012eda <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012eb8:	e002      	b.n	8012ec0 <create_name+0x54>
 8012eba:	69fb      	ldr	r3, [r7, #28]
 8012ebc:	3301      	adds	r3, #1
 8012ebe:	61fb      	str	r3, [r7, #28]
 8012ec0:	68fa      	ldr	r2, [r7, #12]
 8012ec2:	69fb      	ldr	r3, [r7, #28]
 8012ec4:	4413      	add	r3, r2
 8012ec6:	781b      	ldrb	r3, [r3, #0]
 8012ec8:	2b2f      	cmp	r3, #47	@ 0x2f
 8012eca:	d0f6      	beq.n	8012eba <create_name+0x4e>
 8012ecc:	68fa      	ldr	r2, [r7, #12]
 8012ece:	69fb      	ldr	r3, [r7, #28]
 8012ed0:	4413      	add	r3, r2
 8012ed2:	781b      	ldrb	r3, [r3, #0]
 8012ed4:	2b5c      	cmp	r3, #92	@ 0x5c
 8012ed6:	d0f0      	beq.n	8012eba <create_name+0x4e>
			break;
 8012ed8:	e038      	b.n	8012f4c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012eda:	7efb      	ldrb	r3, [r7, #27]
 8012edc:	2b2e      	cmp	r3, #46	@ 0x2e
 8012ede:	d003      	beq.n	8012ee8 <create_name+0x7c>
 8012ee0:	693a      	ldr	r2, [r7, #16]
 8012ee2:	697b      	ldr	r3, [r7, #20]
 8012ee4:	429a      	cmp	r2, r3
 8012ee6:	d30c      	bcc.n	8012f02 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012ee8:	697b      	ldr	r3, [r7, #20]
 8012eea:	2b0b      	cmp	r3, #11
 8012eec:	d002      	beq.n	8012ef4 <create_name+0x88>
 8012eee:	7efb      	ldrb	r3, [r7, #27]
 8012ef0:	2b2e      	cmp	r3, #46	@ 0x2e
 8012ef2:	d001      	beq.n	8012ef8 <create_name+0x8c>
 8012ef4:	2306      	movs	r3, #6
 8012ef6:	e044      	b.n	8012f82 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8012ef8:	2308      	movs	r3, #8
 8012efa:	613b      	str	r3, [r7, #16]
 8012efc:	230b      	movs	r3, #11
 8012efe:	617b      	str	r3, [r7, #20]
			continue;
 8012f00:	e022      	b.n	8012f48 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012f02:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	da04      	bge.n	8012f14 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012f0a:	7efb      	ldrb	r3, [r7, #27]
 8012f0c:	3b80      	subs	r3, #128	@ 0x80
 8012f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8012f8c <create_name+0x120>)
 8012f10:	5cd3      	ldrb	r3, [r2, r3]
 8012f12:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012f14:	7efb      	ldrb	r3, [r7, #27]
 8012f16:	4619      	mov	r1, r3
 8012f18:	481d      	ldr	r0, [pc, #116]	@ (8012f90 <create_name+0x124>)
 8012f1a:	f7ff f97f 	bl	801221c <chk_chr>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d001      	beq.n	8012f28 <create_name+0xbc>
 8012f24:	2306      	movs	r3, #6
 8012f26:	e02c      	b.n	8012f82 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012f28:	7efb      	ldrb	r3, [r7, #27]
 8012f2a:	2b60      	cmp	r3, #96	@ 0x60
 8012f2c:	d905      	bls.n	8012f3a <create_name+0xce>
 8012f2e:	7efb      	ldrb	r3, [r7, #27]
 8012f30:	2b7a      	cmp	r3, #122	@ 0x7a
 8012f32:	d802      	bhi.n	8012f3a <create_name+0xce>
 8012f34:	7efb      	ldrb	r3, [r7, #27]
 8012f36:	3b20      	subs	r3, #32
 8012f38:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8012f3a:	693b      	ldr	r3, [r7, #16]
 8012f3c:	1c5a      	adds	r2, r3, #1
 8012f3e:	613a      	str	r2, [r7, #16]
 8012f40:	68ba      	ldr	r2, [r7, #8]
 8012f42:	4413      	add	r3, r2
 8012f44:	7efa      	ldrb	r2, [r7, #27]
 8012f46:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012f48:	e7a6      	b.n	8012e98 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012f4a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012f4c:	68fa      	ldr	r2, [r7, #12]
 8012f4e:	69fb      	ldr	r3, [r7, #28]
 8012f50:	441a      	add	r2, r3
 8012f52:	683b      	ldr	r3, [r7, #0]
 8012f54:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012f56:	693b      	ldr	r3, [r7, #16]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d101      	bne.n	8012f60 <create_name+0xf4>
 8012f5c:	2306      	movs	r3, #6
 8012f5e:	e010      	b.n	8012f82 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012f60:	68bb      	ldr	r3, [r7, #8]
 8012f62:	781b      	ldrb	r3, [r3, #0]
 8012f64:	2be5      	cmp	r3, #229	@ 0xe5
 8012f66:	d102      	bne.n	8012f6e <create_name+0x102>
 8012f68:	68bb      	ldr	r3, [r7, #8]
 8012f6a:	2205      	movs	r2, #5
 8012f6c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012f6e:	7efb      	ldrb	r3, [r7, #27]
 8012f70:	2b20      	cmp	r3, #32
 8012f72:	d801      	bhi.n	8012f78 <create_name+0x10c>
 8012f74:	2204      	movs	r2, #4
 8012f76:	e000      	b.n	8012f7a <create_name+0x10e>
 8012f78:	2200      	movs	r2, #0
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	330b      	adds	r3, #11
 8012f7e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012f80:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012f82:	4618      	mov	r0, r3
 8012f84:	3720      	adds	r7, #32
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd80      	pop	{r7, pc}
 8012f8a:	bf00      	nop
 8012f8c:	0801b9c0 	.word	0x0801b9c0
 8012f90:	0801b940 	.word	0x0801b940

08012f94 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b086      	sub	sp, #24
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
 8012f9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012fa2:	693b      	ldr	r3, [r7, #16]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012fa8:	e002      	b.n	8012fb0 <follow_path+0x1c>
 8012faa:	683b      	ldr	r3, [r7, #0]
 8012fac:	3301      	adds	r3, #1
 8012fae:	603b      	str	r3, [r7, #0]
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	781b      	ldrb	r3, [r3, #0]
 8012fb4:	2b2f      	cmp	r3, #47	@ 0x2f
 8012fb6:	d0f8      	beq.n	8012faa <follow_path+0x16>
 8012fb8:	683b      	ldr	r3, [r7, #0]
 8012fba:	781b      	ldrb	r3, [r3, #0]
 8012fbc:	2b5c      	cmp	r3, #92	@ 0x5c
 8012fbe:	d0f4      	beq.n	8012faa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012fc0:	693b      	ldr	r3, [r7, #16]
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	781b      	ldrb	r3, [r3, #0]
 8012fca:	2b1f      	cmp	r3, #31
 8012fcc:	d80a      	bhi.n	8012fe4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	2280      	movs	r2, #128	@ 0x80
 8012fd2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 8012fd6:	2100      	movs	r1, #0
 8012fd8:	6878      	ldr	r0, [r7, #4]
 8012fda:	f7ff fcfa 	bl	80129d2 <dir_sdi>
 8012fde:	4603      	mov	r3, r0
 8012fe0:	75fb      	strb	r3, [r7, #23]
 8012fe2:	e043      	b.n	801306c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012fe4:	463b      	mov	r3, r7
 8012fe6:	4619      	mov	r1, r3
 8012fe8:	6878      	ldr	r0, [r7, #4]
 8012fea:	f7ff ff3f 	bl	8012e6c <create_name>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012ff2:	7dfb      	ldrb	r3, [r7, #23]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d134      	bne.n	8013062 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012ff8:	6878      	ldr	r0, [r7, #4]
 8012ffa:	f7ff feb0 	bl	8012d5e <dir_find>
 8012ffe:	4603      	mov	r3, r0
 8013000:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8013008:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801300a:	7dfb      	ldrb	r3, [r7, #23]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d00a      	beq.n	8013026 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013010:	7dfb      	ldrb	r3, [r7, #23]
 8013012:	2b04      	cmp	r3, #4
 8013014:	d127      	bne.n	8013066 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013016:	7afb      	ldrb	r3, [r7, #11]
 8013018:	f003 0304 	and.w	r3, r3, #4
 801301c:	2b00      	cmp	r3, #0
 801301e:	d122      	bne.n	8013066 <follow_path+0xd2>
 8013020:	2305      	movs	r3, #5
 8013022:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013024:	e01f      	b.n	8013066 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013026:	7afb      	ldrb	r3, [r7, #11]
 8013028:	f003 0304 	and.w	r3, r3, #4
 801302c:	2b00      	cmp	r3, #0
 801302e:	d11c      	bne.n	801306a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013030:	693b      	ldr	r3, [r7, #16]
 8013032:	799b      	ldrb	r3, [r3, #6]
 8013034:	f003 0310 	and.w	r3, r3, #16
 8013038:	2b00      	cmp	r3, #0
 801303a:	d102      	bne.n	8013042 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801303c:	2305      	movs	r3, #5
 801303e:	75fb      	strb	r3, [r7, #23]
 8013040:	e014      	b.n	801306c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	691b      	ldr	r3, [r3, #16]
 801304c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013050:	4413      	add	r3, r2
 8013052:	4619      	mov	r1, r3
 8013054:	68f8      	ldr	r0, [r7, #12]
 8013056:	f7ff fe43 	bl	8012ce0 <ld_clust>
 801305a:	4602      	mov	r2, r0
 801305c:	693b      	ldr	r3, [r7, #16]
 801305e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013060:	e7c0      	b.n	8012fe4 <follow_path+0x50>
			if (res != FR_OK) break;
 8013062:	bf00      	nop
 8013064:	e002      	b.n	801306c <follow_path+0xd8>
				break;
 8013066:	bf00      	nop
 8013068:	e000      	b.n	801306c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801306a:	bf00      	nop
			}
		}
	}

	return res;
 801306c:	7dfb      	ldrb	r3, [r7, #23]
}
 801306e:	4618      	mov	r0, r3
 8013070:	3718      	adds	r7, #24
 8013072:	46bd      	mov	sp, r7
 8013074:	bd80      	pop	{r7, pc}

08013076 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013076:	b480      	push	{r7}
 8013078:	b087      	sub	sp, #28
 801307a:	af00      	add	r7, sp, #0
 801307c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801307e:	f04f 33ff 	mov.w	r3, #4294967295
 8013082:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d031      	beq.n	80130f0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	617b      	str	r3, [r7, #20]
 8013092:	e002      	b.n	801309a <get_ldnumber+0x24>
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	3301      	adds	r3, #1
 8013098:	617b      	str	r3, [r7, #20]
 801309a:	697b      	ldr	r3, [r7, #20]
 801309c:	781b      	ldrb	r3, [r3, #0]
 801309e:	2b20      	cmp	r3, #32
 80130a0:	d903      	bls.n	80130aa <get_ldnumber+0x34>
 80130a2:	697b      	ldr	r3, [r7, #20]
 80130a4:	781b      	ldrb	r3, [r3, #0]
 80130a6:	2b3a      	cmp	r3, #58	@ 0x3a
 80130a8:	d1f4      	bne.n	8013094 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80130aa:	697b      	ldr	r3, [r7, #20]
 80130ac:	781b      	ldrb	r3, [r3, #0]
 80130ae:	2b3a      	cmp	r3, #58	@ 0x3a
 80130b0:	d11c      	bne.n	80130ec <get_ldnumber+0x76>
			tp = *path;
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	1c5a      	adds	r2, r3, #1
 80130bc:	60fa      	str	r2, [r7, #12]
 80130be:	781b      	ldrb	r3, [r3, #0]
 80130c0:	3b30      	subs	r3, #48	@ 0x30
 80130c2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80130c4:	68bb      	ldr	r3, [r7, #8]
 80130c6:	2b09      	cmp	r3, #9
 80130c8:	d80e      	bhi.n	80130e8 <get_ldnumber+0x72>
 80130ca:	68fa      	ldr	r2, [r7, #12]
 80130cc:	697b      	ldr	r3, [r7, #20]
 80130ce:	429a      	cmp	r2, r3
 80130d0:	d10a      	bne.n	80130e8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80130d2:	68bb      	ldr	r3, [r7, #8]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d107      	bne.n	80130e8 <get_ldnumber+0x72>
					vol = (int)i;
 80130d8:	68bb      	ldr	r3, [r7, #8]
 80130da:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	3301      	adds	r3, #1
 80130e0:	617b      	str	r3, [r7, #20]
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	697a      	ldr	r2, [r7, #20]
 80130e6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80130e8:	693b      	ldr	r3, [r7, #16]
 80130ea:	e002      	b.n	80130f2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80130ec:	2300      	movs	r3, #0
 80130ee:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80130f0:	693b      	ldr	r3, [r7, #16]
}
 80130f2:	4618      	mov	r0, r3
 80130f4:	371c      	adds	r7, #28
 80130f6:	46bd      	mov	sp, r7
 80130f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fc:	4770      	bx	lr
	...

08013100 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013100:	b580      	push	{r7, lr}
 8013102:	b082      	sub	sp, #8
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
 8013108:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	2200      	movs	r2, #0
 801310e:	70da      	strb	r2, [r3, #3]
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	f04f 32ff 	mov.w	r2, #4294967295
 8013116:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013118:	6839      	ldr	r1, [r7, #0]
 801311a:	6878      	ldr	r0, [r7, #4]
 801311c:	f7ff f8dd 	bl	80122da <move_window>
 8013120:	4603      	mov	r3, r0
 8013122:	2b00      	cmp	r3, #0
 8013124:	d001      	beq.n	801312a <check_fs+0x2a>
 8013126:	2304      	movs	r3, #4
 8013128:	e038      	b.n	801319c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	3330      	adds	r3, #48	@ 0x30
 801312e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013132:	4618      	mov	r0, r3
 8013134:	f7fe ff8c 	bl	8012050 <ld_word>
 8013138:	4603      	mov	r3, r0
 801313a:	461a      	mov	r2, r3
 801313c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013140:	429a      	cmp	r2, r3
 8013142:	d001      	beq.n	8013148 <check_fs+0x48>
 8013144:	2303      	movs	r3, #3
 8013146:	e029      	b.n	801319c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801314e:	2be9      	cmp	r3, #233	@ 0xe9
 8013150:	d009      	beq.n	8013166 <check_fs+0x66>
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013158:	2beb      	cmp	r3, #235	@ 0xeb
 801315a:	d11e      	bne.n	801319a <check_fs+0x9a>
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8013162:	2b90      	cmp	r3, #144	@ 0x90
 8013164:	d119      	bne.n	801319a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	3330      	adds	r3, #48	@ 0x30
 801316a:	3336      	adds	r3, #54	@ 0x36
 801316c:	4618      	mov	r0, r3
 801316e:	f7fe ff88 	bl	8012082 <ld_dword>
 8013172:	4603      	mov	r3, r0
 8013174:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8013178:	4a0a      	ldr	r2, [pc, #40]	@ (80131a4 <check_fs+0xa4>)
 801317a:	4293      	cmp	r3, r2
 801317c:	d101      	bne.n	8013182 <check_fs+0x82>
 801317e:	2300      	movs	r3, #0
 8013180:	e00c      	b.n	801319c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	3330      	adds	r3, #48	@ 0x30
 8013186:	3352      	adds	r3, #82	@ 0x52
 8013188:	4618      	mov	r0, r3
 801318a:	f7fe ff7a 	bl	8012082 <ld_dword>
 801318e:	4603      	mov	r3, r0
 8013190:	4a05      	ldr	r2, [pc, #20]	@ (80131a8 <check_fs+0xa8>)
 8013192:	4293      	cmp	r3, r2
 8013194:	d101      	bne.n	801319a <check_fs+0x9a>
 8013196:	2300      	movs	r3, #0
 8013198:	e000      	b.n	801319c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801319a:	2302      	movs	r3, #2
}
 801319c:	4618      	mov	r0, r3
 801319e:	3708      	adds	r7, #8
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}
 80131a4:	00544146 	.word	0x00544146
 80131a8:	33544146 	.word	0x33544146

080131ac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b096      	sub	sp, #88	@ 0x58
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	60f8      	str	r0, [r7, #12]
 80131b4:	60b9      	str	r1, [r7, #8]
 80131b6:	4613      	mov	r3, r2
 80131b8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80131ba:	68bb      	ldr	r3, [r7, #8]
 80131bc:	2200      	movs	r2, #0
 80131be:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80131c0:	68f8      	ldr	r0, [r7, #12]
 80131c2:	f7ff ff58 	bl	8013076 <get_ldnumber>
 80131c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80131c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	da01      	bge.n	80131d2 <find_volume+0x26>
 80131ce:	230b      	movs	r3, #11
 80131d0:	e22a      	b.n	8013628 <find_volume+0x47c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80131d2:	4aa1      	ldr	r2, [pc, #644]	@ (8013458 <find_volume+0x2ac>)
 80131d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80131d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80131da:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80131dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d101      	bne.n	80131e6 <find_volume+0x3a>
 80131e2:	230c      	movs	r3, #12
 80131e4:	e220      	b.n	8013628 <find_volume+0x47c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80131e6:	68bb      	ldr	r3, [r7, #8]
 80131e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80131ea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80131ec:	79fb      	ldrb	r3, [r7, #7]
 80131ee:	f023 0301 	bic.w	r3, r3, #1
 80131f2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80131f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131f6:	781b      	ldrb	r3, [r3, #0]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d01a      	beq.n	8013232 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80131fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131fe:	785b      	ldrb	r3, [r3, #1]
 8013200:	4618      	mov	r0, r3
 8013202:	f7fe fe87 	bl	8011f14 <disk_status>
 8013206:	4603      	mov	r3, r0
 8013208:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801320c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013210:	f003 0301 	and.w	r3, r3, #1
 8013214:	2b00      	cmp	r3, #0
 8013216:	d10c      	bne.n	8013232 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013218:	79fb      	ldrb	r3, [r7, #7]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d007      	beq.n	801322e <find_volume+0x82>
 801321e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013222:	f003 0304 	and.w	r3, r3, #4
 8013226:	2b00      	cmp	r3, #0
 8013228:	d001      	beq.n	801322e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801322a:	230a      	movs	r3, #10
 801322c:	e1fc      	b.n	8013628 <find_volume+0x47c>
			}
			return FR_OK;				/* The file system object is valid */
 801322e:	2300      	movs	r3, #0
 8013230:	e1fa      	b.n	8013628 <find_volume+0x47c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013234:	2200      	movs	r2, #0
 8013236:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801323a:	b2da      	uxtb	r2, r3
 801323c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801323e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013242:	785b      	ldrb	r3, [r3, #1]
 8013244:	4618      	mov	r0, r3
 8013246:	f7fe fe7f 	bl	8011f48 <disk_initialize>
 801324a:	4603      	mov	r3, r0
 801324c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013250:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013254:	f003 0301 	and.w	r3, r3, #1
 8013258:	2b00      	cmp	r3, #0
 801325a:	d001      	beq.n	8013260 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801325c:	2303      	movs	r3, #3
 801325e:	e1e3      	b.n	8013628 <find_volume+0x47c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013260:	79fb      	ldrb	r3, [r7, #7]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d007      	beq.n	8013276 <find_volume+0xca>
 8013266:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801326a:	f003 0304 	and.w	r3, r3, #4
 801326e:	2b00      	cmp	r3, #0
 8013270:	d001      	beq.n	8013276 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013272:	230a      	movs	r3, #10
 8013274:	e1d8      	b.n	8013628 <find_volume+0x47c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013276:	2300      	movs	r3, #0
 8013278:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801327a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801327c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801327e:	f7ff ff3f 	bl	8013100 <check_fs>
 8013282:	4603      	mov	r3, r0
 8013284:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013288:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801328c:	2b02      	cmp	r3, #2
 801328e:	d149      	bne.n	8013324 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013290:	2300      	movs	r3, #0
 8013292:	643b      	str	r3, [r7, #64]	@ 0x40
 8013294:	e01e      	b.n	80132d4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013298:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801329c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801329e:	011b      	lsls	r3, r3, #4
 80132a0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80132a4:	4413      	add	r3, r2
 80132a6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80132a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132aa:	3304      	adds	r3, #4
 80132ac:	781b      	ldrb	r3, [r3, #0]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d006      	beq.n	80132c0 <find_volume+0x114>
 80132b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132b4:	3308      	adds	r3, #8
 80132b6:	4618      	mov	r0, r3
 80132b8:	f7fe fee3 	bl	8012082 <ld_dword>
 80132bc:	4602      	mov	r2, r0
 80132be:	e000      	b.n	80132c2 <find_volume+0x116>
 80132c0:	2200      	movs	r2, #0
 80132c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132c4:	009b      	lsls	r3, r3, #2
 80132c6:	3358      	adds	r3, #88	@ 0x58
 80132c8:	443b      	add	r3, r7
 80132ca:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80132ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132d0:	3301      	adds	r3, #1
 80132d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80132d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132d6:	2b03      	cmp	r3, #3
 80132d8:	d9dd      	bls.n	8013296 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80132da:	2300      	movs	r3, #0
 80132dc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80132de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d002      	beq.n	80132ea <find_volume+0x13e>
 80132e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132e6:	3b01      	subs	r3, #1
 80132e8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80132ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132ec:	009b      	lsls	r3, r3, #2
 80132ee:	3358      	adds	r3, #88	@ 0x58
 80132f0:	443b      	add	r3, r7
 80132f2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80132f6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80132f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d005      	beq.n	801330a <find_volume+0x15e>
 80132fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013300:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013302:	f7ff fefd 	bl	8013100 <check_fs>
 8013306:	4603      	mov	r3, r0
 8013308:	e000      	b.n	801330c <find_volume+0x160>
 801330a:	2303      	movs	r3, #3
 801330c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013310:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013314:	2b01      	cmp	r3, #1
 8013316:	d905      	bls.n	8013324 <find_volume+0x178>
 8013318:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801331a:	3301      	adds	r3, #1
 801331c:	643b      	str	r3, [r7, #64]	@ 0x40
 801331e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013320:	2b03      	cmp	r3, #3
 8013322:	d9e2      	bls.n	80132ea <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013324:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013328:	2b04      	cmp	r3, #4
 801332a:	d101      	bne.n	8013330 <find_volume+0x184>
 801332c:	2301      	movs	r3, #1
 801332e:	e17b      	b.n	8013628 <find_volume+0x47c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013330:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013334:	2b01      	cmp	r3, #1
 8013336:	d901      	bls.n	801333c <find_volume+0x190>
 8013338:	230d      	movs	r3, #13
 801333a:	e175      	b.n	8013628 <find_volume+0x47c>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801333c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801333e:	3330      	adds	r3, #48	@ 0x30
 8013340:	330b      	adds	r3, #11
 8013342:	4618      	mov	r0, r3
 8013344:	f7fe fe84 	bl	8012050 <ld_word>
 8013348:	4603      	mov	r3, r0
 801334a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801334e:	d001      	beq.n	8013354 <find_volume+0x1a8>
 8013350:	230d      	movs	r3, #13
 8013352:	e169      	b.n	8013628 <find_volume+0x47c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013356:	3330      	adds	r3, #48	@ 0x30
 8013358:	3316      	adds	r3, #22
 801335a:	4618      	mov	r0, r3
 801335c:	f7fe fe78 	bl	8012050 <ld_word>
 8013360:	4603      	mov	r3, r0
 8013362:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013366:	2b00      	cmp	r3, #0
 8013368:	d106      	bne.n	8013378 <find_volume+0x1cc>
 801336a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801336c:	3330      	adds	r3, #48	@ 0x30
 801336e:	3324      	adds	r3, #36	@ 0x24
 8013370:	4618      	mov	r0, r3
 8013372:	f7fe fe86 	bl	8012082 <ld_dword>
 8013376:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8013378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801337a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801337c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801337e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013380:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8013384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013386:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801338a:	789b      	ldrb	r3, [r3, #2]
 801338c:	2b01      	cmp	r3, #1
 801338e:	d005      	beq.n	801339c <find_volume+0x1f0>
 8013390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013392:	789b      	ldrb	r3, [r3, #2]
 8013394:	2b02      	cmp	r3, #2
 8013396:	d001      	beq.n	801339c <find_volume+0x1f0>
 8013398:	230d      	movs	r3, #13
 801339a:	e145      	b.n	8013628 <find_volume+0x47c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801339c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801339e:	789b      	ldrb	r3, [r3, #2]
 80133a0:	461a      	mov	r2, r3
 80133a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80133a4:	fb02 f303 	mul.w	r3, r2, r3
 80133a8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80133aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80133b0:	461a      	mov	r2, r3
 80133b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133b4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80133b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133b8:	895b      	ldrh	r3, [r3, #10]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d008      	beq.n	80133d0 <find_volume+0x224>
 80133be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133c0:	895b      	ldrh	r3, [r3, #10]
 80133c2:	461a      	mov	r2, r3
 80133c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133c6:	895b      	ldrh	r3, [r3, #10]
 80133c8:	3b01      	subs	r3, #1
 80133ca:	4013      	ands	r3, r2
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d001      	beq.n	80133d4 <find_volume+0x228>
 80133d0:	230d      	movs	r3, #13
 80133d2:	e129      	b.n	8013628 <find_volume+0x47c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80133d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133d6:	3330      	adds	r3, #48	@ 0x30
 80133d8:	3311      	adds	r3, #17
 80133da:	4618      	mov	r0, r3
 80133dc:	f7fe fe38 	bl	8012050 <ld_word>
 80133e0:	4603      	mov	r3, r0
 80133e2:	461a      	mov	r2, r3
 80133e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133e6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80133e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133ea:	891b      	ldrh	r3, [r3, #8]
 80133ec:	f003 030f 	and.w	r3, r3, #15
 80133f0:	b29b      	uxth	r3, r3
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d001      	beq.n	80133fa <find_volume+0x24e>
 80133f6:	230d      	movs	r3, #13
 80133f8:	e116      	b.n	8013628 <find_volume+0x47c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80133fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133fc:	3330      	adds	r3, #48	@ 0x30
 80133fe:	3313      	adds	r3, #19
 8013400:	4618      	mov	r0, r3
 8013402:	f7fe fe25 	bl	8012050 <ld_word>
 8013406:	4603      	mov	r3, r0
 8013408:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801340a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801340c:	2b00      	cmp	r3, #0
 801340e:	d106      	bne.n	801341e <find_volume+0x272>
 8013410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013412:	3330      	adds	r3, #48	@ 0x30
 8013414:	3320      	adds	r3, #32
 8013416:	4618      	mov	r0, r3
 8013418:	f7fe fe33 	bl	8012082 <ld_dword>
 801341c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801341e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013420:	3330      	adds	r3, #48	@ 0x30
 8013422:	330e      	adds	r3, #14
 8013424:	4618      	mov	r0, r3
 8013426:	f7fe fe13 	bl	8012050 <ld_word>
 801342a:	4603      	mov	r3, r0
 801342c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801342e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013430:	2b00      	cmp	r3, #0
 8013432:	d101      	bne.n	8013438 <find_volume+0x28c>
 8013434:	230d      	movs	r3, #13
 8013436:	e0f7      	b.n	8013628 <find_volume+0x47c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013438:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801343a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801343c:	4413      	add	r3, r2
 801343e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013440:	8912      	ldrh	r2, [r2, #8]
 8013442:	0912      	lsrs	r2, r2, #4
 8013444:	b292      	uxth	r2, r2
 8013446:	4413      	add	r3, r2
 8013448:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801344a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801344c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801344e:	429a      	cmp	r2, r3
 8013450:	d204      	bcs.n	801345c <find_volume+0x2b0>
 8013452:	230d      	movs	r3, #13
 8013454:	e0e8      	b.n	8013628 <find_volume+0x47c>
 8013456:	bf00      	nop
 8013458:	20002ac4 	.word	0x20002ac4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801345c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801345e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013460:	1ad3      	subs	r3, r2, r3
 8013462:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013464:	8952      	ldrh	r2, [r2, #10]
 8013466:	fbb3 f3f2 	udiv	r3, r3, r2
 801346a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801346c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801346e:	2b00      	cmp	r3, #0
 8013470:	d101      	bne.n	8013476 <find_volume+0x2ca>
 8013472:	230d      	movs	r3, #13
 8013474:	e0d8      	b.n	8013628 <find_volume+0x47c>
		fmt = FS_FAT32;
 8013476:	2303      	movs	r3, #3
 8013478:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801347c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801347e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8013482:	4293      	cmp	r3, r2
 8013484:	d802      	bhi.n	801348c <find_volume+0x2e0>
 8013486:	2302      	movs	r3, #2
 8013488:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801348c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801348e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8013492:	4293      	cmp	r3, r2
 8013494:	d802      	bhi.n	801349c <find_volume+0x2f0>
 8013496:	2301      	movs	r3, #1
 8013498:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801349c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801349e:	1c9a      	adds	r2, r3, #2
 80134a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134a2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80134a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80134a8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80134aa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80134ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80134ae:	441a      	add	r2, r3
 80134b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134b2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80134b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80134b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134b8:	441a      	add	r2, r3
 80134ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134bc:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80134be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80134c2:	2b03      	cmp	r3, #3
 80134c4:	d11e      	bne.n	8013504 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80134c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134c8:	3330      	adds	r3, #48	@ 0x30
 80134ca:	332a      	adds	r3, #42	@ 0x2a
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7fe fdbf 	bl	8012050 <ld_word>
 80134d2:	4603      	mov	r3, r0
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d001      	beq.n	80134dc <find_volume+0x330>
 80134d8:	230d      	movs	r3, #13
 80134da:	e0a5      	b.n	8013628 <find_volume+0x47c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80134dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134de:	891b      	ldrh	r3, [r3, #8]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d001      	beq.n	80134e8 <find_volume+0x33c>
 80134e4:	230d      	movs	r3, #13
 80134e6:	e09f      	b.n	8013628 <find_volume+0x47c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80134e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134ea:	3330      	adds	r3, #48	@ 0x30
 80134ec:	332c      	adds	r3, #44	@ 0x2c
 80134ee:	4618      	mov	r0, r3
 80134f0:	f7fe fdc7 	bl	8012082 <ld_dword>
 80134f4:	4602      	mov	r2, r0
 80134f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134f8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80134fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134fc:	695b      	ldr	r3, [r3, #20]
 80134fe:	009b      	lsls	r3, r3, #2
 8013500:	647b      	str	r3, [r7, #68]	@ 0x44
 8013502:	e01f      	b.n	8013544 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013506:	891b      	ldrh	r3, [r3, #8]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d101      	bne.n	8013510 <find_volume+0x364>
 801350c:	230d      	movs	r3, #13
 801350e:	e08b      	b.n	8013628 <find_volume+0x47c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013512:	6a1a      	ldr	r2, [r3, #32]
 8013514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013516:	441a      	add	r2, r3
 8013518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801351a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801351c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013520:	2b02      	cmp	r3, #2
 8013522:	d103      	bne.n	801352c <find_volume+0x380>
 8013524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013526:	695b      	ldr	r3, [r3, #20]
 8013528:	005b      	lsls	r3, r3, #1
 801352a:	e00a      	b.n	8013542 <find_volume+0x396>
 801352c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801352e:	695a      	ldr	r2, [r3, #20]
 8013530:	4613      	mov	r3, r2
 8013532:	005b      	lsls	r3, r3, #1
 8013534:	4413      	add	r3, r2
 8013536:	085a      	lsrs	r2, r3, #1
 8013538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801353a:	695b      	ldr	r3, [r3, #20]
 801353c:	f003 0301 	and.w	r3, r3, #1
 8013540:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013542:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013546:	699a      	ldr	r2, [r3, #24]
 8013548:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801354a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801354e:	0a5b      	lsrs	r3, r3, #9
 8013550:	429a      	cmp	r2, r3
 8013552:	d201      	bcs.n	8013558 <find_volume+0x3ac>
 8013554:	230d      	movs	r3, #13
 8013556:	e067      	b.n	8013628 <find_volume+0x47c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801355a:	f04f 32ff 	mov.w	r2, #4294967295
 801355e:	611a      	str	r2, [r3, #16]
 8013560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013562:	691a      	ldr	r2, [r3, #16]
 8013564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013566:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8013568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801356a:	2280      	movs	r2, #128	@ 0x80
 801356c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801356e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013572:	2b03      	cmp	r3, #3
 8013574:	d149      	bne.n	801360a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013578:	3330      	adds	r3, #48	@ 0x30
 801357a:	3330      	adds	r3, #48	@ 0x30
 801357c:	4618      	mov	r0, r3
 801357e:	f7fe fd67 	bl	8012050 <ld_word>
 8013582:	4603      	mov	r3, r0
 8013584:	2b01      	cmp	r3, #1
 8013586:	d140      	bne.n	801360a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013588:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801358a:	3301      	adds	r3, #1
 801358c:	4619      	mov	r1, r3
 801358e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013590:	f7fe fea3 	bl	80122da <move_window>
 8013594:	4603      	mov	r3, r0
 8013596:	2b00      	cmp	r3, #0
 8013598:	d137      	bne.n	801360a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801359a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801359c:	2200      	movs	r2, #0
 801359e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80135a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135a2:	3330      	adds	r3, #48	@ 0x30
 80135a4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80135a8:	4618      	mov	r0, r3
 80135aa:	f7fe fd51 	bl	8012050 <ld_word>
 80135ae:	4603      	mov	r3, r0
 80135b0:	461a      	mov	r2, r3
 80135b2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80135b6:	429a      	cmp	r2, r3
 80135b8:	d127      	bne.n	801360a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80135ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135bc:	3330      	adds	r3, #48	@ 0x30
 80135be:	4618      	mov	r0, r3
 80135c0:	f7fe fd5f 	bl	8012082 <ld_dword>
 80135c4:	4603      	mov	r3, r0
 80135c6:	4a1a      	ldr	r2, [pc, #104]	@ (8013630 <find_volume+0x484>)
 80135c8:	4293      	cmp	r3, r2
 80135ca:	d11e      	bne.n	801360a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80135cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135ce:	3330      	adds	r3, #48	@ 0x30
 80135d0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80135d4:	4618      	mov	r0, r3
 80135d6:	f7fe fd54 	bl	8012082 <ld_dword>
 80135da:	4603      	mov	r3, r0
 80135dc:	4a15      	ldr	r2, [pc, #84]	@ (8013634 <find_volume+0x488>)
 80135de:	4293      	cmp	r3, r2
 80135e0:	d113      	bne.n	801360a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80135e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135e4:	3330      	adds	r3, #48	@ 0x30
 80135e6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80135ea:	4618      	mov	r0, r3
 80135ec:	f7fe fd49 	bl	8012082 <ld_dword>
 80135f0:	4602      	mov	r2, r0
 80135f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135f4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80135f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135f8:	3330      	adds	r3, #48	@ 0x30
 80135fa:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80135fe:	4618      	mov	r0, r3
 8013600:	f7fe fd3f 	bl	8012082 <ld_dword>
 8013604:	4602      	mov	r2, r0
 8013606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013608:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801360a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801360c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8013610:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013612:	4b09      	ldr	r3, [pc, #36]	@ (8013638 <find_volume+0x48c>)
 8013614:	881b      	ldrh	r3, [r3, #0]
 8013616:	3301      	adds	r3, #1
 8013618:	b29a      	uxth	r2, r3
 801361a:	4b07      	ldr	r3, [pc, #28]	@ (8013638 <find_volume+0x48c>)
 801361c:	801a      	strh	r2, [r3, #0]
 801361e:	4b06      	ldr	r3, [pc, #24]	@ (8013638 <find_volume+0x48c>)
 8013620:	881a      	ldrh	r2, [r3, #0]
 8013622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013624:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8013626:	2300      	movs	r3, #0
}
 8013628:	4618      	mov	r0, r3
 801362a:	3758      	adds	r7, #88	@ 0x58
 801362c:	46bd      	mov	sp, r7
 801362e:	bd80      	pop	{r7, pc}
 8013630:	41615252 	.word	0x41615252
 8013634:	61417272 	.word	0x61417272
 8013638:	20002ac8 	.word	0x20002ac8

0801363c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b084      	sub	sp, #16
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
 8013644:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013646:	2309      	movs	r3, #9
 8013648:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d01c      	beq.n	801368a <validate+0x4e>
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d018      	beq.n	801368a <validate+0x4e>
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	781b      	ldrb	r3, [r3, #0]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d013      	beq.n	801368a <validate+0x4e>
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	889a      	ldrh	r2, [r3, #4]
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	88db      	ldrh	r3, [r3, #6]
 801366c:	429a      	cmp	r2, r3
 801366e:	d10c      	bne.n	801368a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	785b      	ldrb	r3, [r3, #1]
 8013676:	4618      	mov	r0, r3
 8013678:	f7fe fc4c 	bl	8011f14 <disk_status>
 801367c:	4603      	mov	r3, r0
 801367e:	f003 0301 	and.w	r3, r3, #1
 8013682:	2b00      	cmp	r3, #0
 8013684:	d101      	bne.n	801368a <validate+0x4e>
			res = FR_OK;
 8013686:	2300      	movs	r3, #0
 8013688:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801368a:	7bfb      	ldrb	r3, [r7, #15]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d102      	bne.n	8013696 <validate+0x5a>
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	e000      	b.n	8013698 <validate+0x5c>
 8013696:	2300      	movs	r3, #0
 8013698:	683a      	ldr	r2, [r7, #0]
 801369a:	6013      	str	r3, [r2, #0]
	return res;
 801369c:	7bfb      	ldrb	r3, [r7, #15]
}
 801369e:	4618      	mov	r0, r3
 80136a0:	3710      	adds	r7, #16
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bd80      	pop	{r7, pc}
	...

080136a8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b088      	sub	sp, #32
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	60f8      	str	r0, [r7, #12]
 80136b0:	60b9      	str	r1, [r7, #8]
 80136b2:	4613      	mov	r3, r2
 80136b4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80136b6:	68bb      	ldr	r3, [r7, #8]
 80136b8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80136ba:	f107 0310 	add.w	r3, r7, #16
 80136be:	4618      	mov	r0, r3
 80136c0:	f7ff fcd9 	bl	8013076 <get_ldnumber>
 80136c4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80136c6:	69fb      	ldr	r3, [r7, #28]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	da01      	bge.n	80136d0 <f_mount+0x28>
 80136cc:	230b      	movs	r3, #11
 80136ce:	e028      	b.n	8013722 <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80136d0:	4a16      	ldr	r2, [pc, #88]	@ (801372c <f_mount+0x84>)
 80136d2:	69fb      	ldr	r3, [r7, #28]
 80136d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136d8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80136da:	69bb      	ldr	r3, [r7, #24]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d002      	beq.n	80136e6 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80136e0:	69bb      	ldr	r3, [r7, #24]
 80136e2:	2200      	movs	r2, #0
 80136e4:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d002      	beq.n	80136f2 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	2200      	movs	r2, #0
 80136f0:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80136f2:	68fa      	ldr	r2, [r7, #12]
 80136f4:	490d      	ldr	r1, [pc, #52]	@ (801372c <f_mount+0x84>)
 80136f6:	69fb      	ldr	r3, [r7, #28]
 80136f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d002      	beq.n	8013708 <f_mount+0x60>
 8013702:	79fb      	ldrb	r3, [r7, #7]
 8013704:	2b01      	cmp	r3, #1
 8013706:	d001      	beq.n	801370c <f_mount+0x64>
 8013708:	2300      	movs	r3, #0
 801370a:	e00a      	b.n	8013722 <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801370c:	f107 010c 	add.w	r1, r7, #12
 8013710:	f107 0308 	add.w	r3, r7, #8
 8013714:	2200      	movs	r2, #0
 8013716:	4618      	mov	r0, r3
 8013718:	f7ff fd48 	bl	80131ac <find_volume>
 801371c:	4603      	mov	r3, r0
 801371e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013720:	7dfb      	ldrb	r3, [r7, #23]
}
 8013722:	4618      	mov	r0, r3
 8013724:	3720      	adds	r7, #32
 8013726:	46bd      	mov	sp, r7
 8013728:	bd80      	pop	{r7, pc}
 801372a:	bf00      	nop
 801372c:	20002ac4 	.word	0x20002ac4

08013730 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b098      	sub	sp, #96	@ 0x60
 8013734:	af00      	add	r7, sp, #0
 8013736:	60f8      	str	r0, [r7, #12]
 8013738:	60b9      	str	r1, [r7, #8]
 801373a:	4613      	mov	r3, r2
 801373c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d101      	bne.n	8013748 <f_open+0x18>
 8013744:	2309      	movs	r3, #9
 8013746:	e17a      	b.n	8013a3e <f_open+0x30e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013748:	79fb      	ldrb	r3, [r7, #7]
 801374a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801374e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013750:	79fa      	ldrb	r2, [r7, #7]
 8013752:	f107 0114 	add.w	r1, r7, #20
 8013756:	f107 0308 	add.w	r3, r7, #8
 801375a:	4618      	mov	r0, r3
 801375c:	f7ff fd26 	bl	80131ac <find_volume>
 8013760:	4603      	mov	r3, r0
 8013762:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8013766:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801376a:	2b00      	cmp	r3, #0
 801376c:	f040 815e 	bne.w	8013a2c <f_open+0x2fc>
		dj.obj.fs = fs;
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013774:	68ba      	ldr	r2, [r7, #8]
 8013776:	f107 0318 	add.w	r3, r7, #24
 801377a:	4611      	mov	r1, r2
 801377c:	4618      	mov	r0, r3
 801377e:	f7ff fc09 	bl	8012f94 <follow_path>
 8013782:	4603      	mov	r3, r0
 8013784:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013788:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801378c:	2b00      	cmp	r3, #0
 801378e:	d107      	bne.n	80137a0 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013790:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013794:	b25b      	sxtb	r3, r3
 8013796:	2b00      	cmp	r3, #0
 8013798:	da02      	bge.n	80137a0 <f_open+0x70>
				res = FR_INVALID_NAME;
 801379a:	2306      	movs	r3, #6
 801379c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80137a0:	79fb      	ldrb	r3, [r7, #7]
 80137a2:	f003 031c 	and.w	r3, r3, #28
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d078      	beq.n	801389c <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 80137aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d010      	beq.n	80137d4 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80137b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80137b6:	2b04      	cmp	r3, #4
 80137b8:	d107      	bne.n	80137ca <f_open+0x9a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 80137ba:	f107 0318 	add.w	r3, r7, #24
 80137be:	4618      	mov	r0, r3
 80137c0:	f7ff fb22 	bl	8012e08 <dir_register>
 80137c4:	4603      	mov	r3, r0
 80137c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80137ca:	79fb      	ldrb	r3, [r7, #7]
 80137cc:	f043 0308 	orr.w	r3, r3, #8
 80137d0:	71fb      	strb	r3, [r7, #7]
 80137d2:	e010      	b.n	80137f6 <f_open+0xc6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80137d4:	7fbb      	ldrb	r3, [r7, #30]
 80137d6:	f003 0311 	and.w	r3, r3, #17
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d003      	beq.n	80137e6 <f_open+0xb6>
					res = FR_DENIED;
 80137de:	2307      	movs	r3, #7
 80137e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80137e4:	e007      	b.n	80137f6 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80137e6:	79fb      	ldrb	r3, [r7, #7]
 80137e8:	f003 0304 	and.w	r3, r3, #4
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d002      	beq.n	80137f6 <f_open+0xc6>
 80137f0:	2308      	movs	r3, #8
 80137f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80137f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d168      	bne.n	80138d0 <f_open+0x1a0>
 80137fe:	79fb      	ldrb	r3, [r7, #7]
 8013800:	f003 0308 	and.w	r3, r3, #8
 8013804:	2b00      	cmp	r3, #0
 8013806:	d063      	beq.n	80138d0 <f_open+0x1a0>
				dw = GET_FATTIME();
 8013808:	f7fd ff9e 	bl	8011748 <get_fattime>
 801380c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801380e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013810:	330e      	adds	r3, #14
 8013812:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013814:	4618      	mov	r0, r3
 8013816:	f7fe fc72 	bl	80120fe <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801381a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801381c:	3316      	adds	r3, #22
 801381e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013820:	4618      	mov	r0, r3
 8013822:	f7fe fc6c 	bl	80120fe <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013828:	330b      	adds	r3, #11
 801382a:	2220      	movs	r2, #32
 801382c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801382e:	697b      	ldr	r3, [r7, #20]
 8013830:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013832:	4611      	mov	r1, r2
 8013834:	4618      	mov	r0, r3
 8013836:	f7ff fa53 	bl	8012ce0 <ld_clust>
 801383a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801383c:	697b      	ldr	r3, [r7, #20]
 801383e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013840:	2200      	movs	r2, #0
 8013842:	4618      	mov	r0, r3
 8013844:	f7ff fa6b 	bl	8012d1e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801384a:	331c      	adds	r3, #28
 801384c:	2100      	movs	r1, #0
 801384e:	4618      	mov	r0, r3
 8013850:	f7fe fc55 	bl	80120fe <st_dword>
					fs->wflag = 1;
 8013854:	697b      	ldr	r3, [r7, #20]
 8013856:	2201      	movs	r2, #1
 8013858:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801385a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801385c:	2b00      	cmp	r3, #0
 801385e:	d037      	beq.n	80138d0 <f_open+0x1a0>
						dw = fs->winsect;
 8013860:	697b      	ldr	r3, [r7, #20]
 8013862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013864:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013866:	f107 0318 	add.w	r3, r7, #24
 801386a:	2200      	movs	r2, #0
 801386c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801386e:	4618      	mov	r0, r3
 8013870:	f7fe ff7e 	bl	8012770 <remove_chain>
 8013874:	4603      	mov	r3, r0
 8013876:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801387a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801387e:	2b00      	cmp	r3, #0
 8013880:	d126      	bne.n	80138d0 <f_open+0x1a0>
							res = move_window(fs, dw);
 8013882:	697b      	ldr	r3, [r7, #20]
 8013884:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013886:	4618      	mov	r0, r3
 8013888:	f7fe fd27 	bl	80122da <move_window>
 801388c:	4603      	mov	r3, r0
 801388e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013892:	697b      	ldr	r3, [r7, #20]
 8013894:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013896:	3a01      	subs	r2, #1
 8013898:	60da      	str	r2, [r3, #12]
 801389a:	e019      	b.n	80138d0 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801389c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d115      	bne.n	80138d0 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80138a4:	7fbb      	ldrb	r3, [r7, #30]
 80138a6:	f003 0310 	and.w	r3, r3, #16
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d003      	beq.n	80138b6 <f_open+0x186>
					res = FR_NO_FILE;
 80138ae:	2304      	movs	r3, #4
 80138b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80138b4:	e00c      	b.n	80138d0 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80138b6:	79fb      	ldrb	r3, [r7, #7]
 80138b8:	f003 0302 	and.w	r3, r3, #2
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d007      	beq.n	80138d0 <f_open+0x1a0>
 80138c0:	7fbb      	ldrb	r3, [r7, #30]
 80138c2:	f003 0301 	and.w	r3, r3, #1
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d002      	beq.n	80138d0 <f_open+0x1a0>
						res = FR_DENIED;
 80138ca:	2307      	movs	r3, #7
 80138cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80138d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d10f      	bne.n	80138f8 <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80138d8:	79fb      	ldrb	r3, [r7, #7]
 80138da:	f003 0308 	and.w	r3, r3, #8
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d003      	beq.n	80138ea <f_open+0x1ba>
				mode |= FA_MODIFIED;
 80138e2:	79fb      	ldrb	r3, [r7, #7]
 80138e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80138e8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80138ea:	697b      	ldr	r3, [r7, #20]
 80138ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 80138f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 80138f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	f040 8095 	bne.w	8013a2c <f_open+0x2fc>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013902:	697b      	ldr	r3, [r7, #20]
 8013904:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013906:	4611      	mov	r1, r2
 8013908:	4618      	mov	r0, r3
 801390a:	f7ff f9e9 	bl	8012ce0 <ld_clust>
 801390e:	4602      	mov	r2, r0
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013916:	331c      	adds	r3, #28
 8013918:	4618      	mov	r0, r3
 801391a:	f7fe fbb2 	bl	8012082 <ld_dword>
 801391e:	4602      	mov	r2, r0
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	2200      	movs	r2, #0
 8013928:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801392a:	697a      	ldr	r2, [r7, #20]
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013930:	697b      	ldr	r3, [r7, #20]
 8013932:	88da      	ldrh	r2, [r3, #6]
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	79fa      	ldrb	r2, [r7, #7]
 801393c:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	2200      	movs	r2, #0
 8013942:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	2200      	movs	r2, #0
 8013948:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	2200      	movs	r2, #0
 801394e:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	332c      	adds	r3, #44	@ 0x2c
 8013954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013958:	2100      	movs	r1, #0
 801395a:	4618      	mov	r0, r3
 801395c:	f7fe fc1c 	bl	8012198 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013960:	79fb      	ldrb	r3, [r7, #7]
 8013962:	f003 0320 	and.w	r3, r3, #32
 8013966:	2b00      	cmp	r3, #0
 8013968:	d060      	beq.n	8013a2c <f_open+0x2fc>
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	68db      	ldr	r3, [r3, #12]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d05c      	beq.n	8013a2c <f_open+0x2fc>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	68da      	ldr	r2, [r3, #12]
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801397a:	697b      	ldr	r3, [r7, #20]
 801397c:	895b      	ldrh	r3, [r3, #10]
 801397e:	025b      	lsls	r3, r3, #9
 8013980:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	689b      	ldr	r3, [r3, #8]
 8013986:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	68db      	ldr	r3, [r3, #12]
 801398c:	657b      	str	r3, [r7, #84]	@ 0x54
 801398e:	e016      	b.n	80139be <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013994:	4618      	mov	r0, r3
 8013996:	f7fe fd5a 	bl	801244e <get_fat>
 801399a:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801399c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801399e:	2b01      	cmp	r3, #1
 80139a0:	d802      	bhi.n	80139a8 <f_open+0x278>
 80139a2:	2302      	movs	r3, #2
 80139a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80139a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80139aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139ae:	d102      	bne.n	80139b6 <f_open+0x286>
 80139b0:	2301      	movs	r3, #1
 80139b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80139b6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80139b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80139ba:	1ad3      	subs	r3, r2, r3
 80139bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80139be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d103      	bne.n	80139ce <f_open+0x29e>
 80139c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80139c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80139ca:	429a      	cmp	r2, r3
 80139cc:	d8e0      	bhi.n	8013990 <f_open+0x260>
				}
				fp->clust = clst;
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80139d2:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80139d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d127      	bne.n	8013a2c <f_open+0x2fc>
 80139dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d022      	beq.n	8013a2c <f_open+0x2fc>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80139e6:	697b      	ldr	r3, [r7, #20]
 80139e8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80139ea:	4618      	mov	r0, r3
 80139ec:	f7fe fd10 	bl	8012410 <clust2sect>
 80139f0:	6478      	str	r0, [r7, #68]	@ 0x44
 80139f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d103      	bne.n	8013a00 <f_open+0x2d0>
						res = FR_INT_ERR;
 80139f8:	2302      	movs	r3, #2
 80139fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80139fe:	e015      	b.n	8013a2c <f_open+0x2fc>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a02:	0a5a      	lsrs	r2, r3, #9
 8013a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013a06:	441a      	add	r2, r3
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013a0c:	697b      	ldr	r3, [r7, #20]
 8013a0e:	7858      	ldrb	r0, [r3, #1]
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	69da      	ldr	r2, [r3, #28]
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	f7fe faba 	bl	8011f94 <disk_read>
 8013a20:	4603      	mov	r3, r0
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d002      	beq.n	8013a2c <f_open+0x2fc>
 8013a26:	2301      	movs	r3, #1
 8013a28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013a2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d002      	beq.n	8013a3a <f_open+0x30a>
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	2200      	movs	r2, #0
 8013a38:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013a3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8013a3e:	4618      	mov	r0, r3
 8013a40:	3760      	adds	r7, #96	@ 0x60
 8013a42:	46bd      	mov	sp, r7
 8013a44:	bd80      	pop	{r7, pc}

08013a46 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013a46:	b580      	push	{r7, lr}
 8013a48:	b08c      	sub	sp, #48	@ 0x30
 8013a4a:	af00      	add	r7, sp, #0
 8013a4c:	60f8      	str	r0, [r7, #12]
 8013a4e:	60b9      	str	r1, [r7, #8]
 8013a50:	607a      	str	r2, [r7, #4]
 8013a52:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013a54:	68bb      	ldr	r3, [r7, #8]
 8013a56:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013a58:	683b      	ldr	r3, [r7, #0]
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	f107 0210 	add.w	r2, r7, #16
 8013a64:	4611      	mov	r1, r2
 8013a66:	4618      	mov	r0, r3
 8013a68:	f7ff fde8 	bl	801363c <validate>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013a72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d107      	bne.n	8013a8a <f_write+0x44>
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	7c5b      	ldrb	r3, [r3, #17]
 8013a7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8013a82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d002      	beq.n	8013a90 <f_write+0x4a>
 8013a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013a8e:	e14b      	b.n	8013d28 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	7c1b      	ldrb	r3, [r3, #16]
 8013a94:	f003 0302 	and.w	r3, r3, #2
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d101      	bne.n	8013aa0 <f_write+0x5a>
 8013a9c:	2307      	movs	r3, #7
 8013a9e:	e143      	b.n	8013d28 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	695a      	ldr	r2, [r3, #20]
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	441a      	add	r2, r3
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	695b      	ldr	r3, [r3, #20]
 8013aac:	429a      	cmp	r2, r3
 8013aae:	f080 812d 	bcs.w	8013d0c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	695b      	ldr	r3, [r3, #20]
 8013ab6:	43db      	mvns	r3, r3
 8013ab8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013aba:	e127      	b.n	8013d0c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	695b      	ldr	r3, [r3, #20]
 8013ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	f040 80e3 	bne.w	8013c90 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	695b      	ldr	r3, [r3, #20]
 8013ace:	0a5b      	lsrs	r3, r3, #9
 8013ad0:	693a      	ldr	r2, [r7, #16]
 8013ad2:	8952      	ldrh	r2, [r2, #10]
 8013ad4:	3a01      	subs	r2, #1
 8013ad6:	4013      	ands	r3, r2
 8013ad8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013ada:	69bb      	ldr	r3, [r7, #24]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d143      	bne.n	8013b68 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	695b      	ldr	r3, [r3, #20]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d10c      	bne.n	8013b02 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	689b      	ldr	r3, [r3, #8]
 8013aec:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d11a      	bne.n	8013b2a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	2100      	movs	r1, #0
 8013af8:	4618      	mov	r0, r3
 8013afa:	f7fe fe9e 	bl	801283a <create_chain>
 8013afe:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013b00:	e013      	b.n	8013b2a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d007      	beq.n	8013b1a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	695b      	ldr	r3, [r3, #20]
 8013b0e:	4619      	mov	r1, r3
 8013b10:	68f8      	ldr	r0, [r7, #12]
 8013b12:	f7fe ff2a 	bl	801296a <clmt_clust>
 8013b16:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013b18:	e007      	b.n	8013b2a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013b1a:	68fa      	ldr	r2, [r7, #12]
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	699b      	ldr	r3, [r3, #24]
 8013b20:	4619      	mov	r1, r3
 8013b22:	4610      	mov	r0, r2
 8013b24:	f7fe fe89 	bl	801283a <create_chain>
 8013b28:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	f000 80f2 	beq.w	8013d16 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b34:	2b01      	cmp	r3, #1
 8013b36:	d104      	bne.n	8013b42 <f_write+0xfc>
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	2202      	movs	r2, #2
 8013b3c:	745a      	strb	r2, [r3, #17]
 8013b3e:	2302      	movs	r3, #2
 8013b40:	e0f2      	b.n	8013d28 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b48:	d104      	bne.n	8013b54 <f_write+0x10e>
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	2201      	movs	r2, #1
 8013b4e:	745a      	strb	r2, [r3, #17]
 8013b50:	2301      	movs	r3, #1
 8013b52:	e0e9      	b.n	8013d28 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013b58:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	689b      	ldr	r3, [r3, #8]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d102      	bne.n	8013b68 <f_write+0x122>
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013b66:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	7c1b      	ldrb	r3, [r3, #16]
 8013b6c:	b25b      	sxtb	r3, r3
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	da18      	bge.n	8013ba4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013b72:	693b      	ldr	r3, [r7, #16]
 8013b74:	7858      	ldrb	r0, [r3, #1]
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	69da      	ldr	r2, [r3, #28]
 8013b80:	2301      	movs	r3, #1
 8013b82:	f7fe fa27 	bl	8011fd4 <disk_write>
 8013b86:	4603      	mov	r3, r0
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d004      	beq.n	8013b96 <f_write+0x150>
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	2201      	movs	r2, #1
 8013b90:	745a      	strb	r2, [r3, #17]
 8013b92:	2301      	movs	r3, #1
 8013b94:	e0c8      	b.n	8013d28 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	7c1b      	ldrb	r3, [r3, #16]
 8013b9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013b9e:	b2da      	uxtb	r2, r3
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013ba4:	693a      	ldr	r2, [r7, #16]
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	699b      	ldr	r3, [r3, #24]
 8013baa:	4619      	mov	r1, r3
 8013bac:	4610      	mov	r0, r2
 8013bae:	f7fe fc2f 	bl	8012410 <clust2sect>
 8013bb2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013bb4:	697b      	ldr	r3, [r7, #20]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d104      	bne.n	8013bc4 <f_write+0x17e>
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	2202      	movs	r2, #2
 8013bbe:	745a      	strb	r2, [r3, #17]
 8013bc0:	2302      	movs	r3, #2
 8013bc2:	e0b1      	b.n	8013d28 <f_write+0x2e2>
			sect += csect;
 8013bc4:	697a      	ldr	r2, [r7, #20]
 8013bc6:	69bb      	ldr	r3, [r7, #24]
 8013bc8:	4413      	add	r3, r2
 8013bca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	0a5b      	lsrs	r3, r3, #9
 8013bd0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013bd2:	6a3b      	ldr	r3, [r7, #32]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d03c      	beq.n	8013c52 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013bd8:	69ba      	ldr	r2, [r7, #24]
 8013bda:	6a3b      	ldr	r3, [r7, #32]
 8013bdc:	4413      	add	r3, r2
 8013bde:	693a      	ldr	r2, [r7, #16]
 8013be0:	8952      	ldrh	r2, [r2, #10]
 8013be2:	4293      	cmp	r3, r2
 8013be4:	d905      	bls.n	8013bf2 <f_write+0x1ac>
					cc = fs->csize - csect;
 8013be6:	693b      	ldr	r3, [r7, #16]
 8013be8:	895b      	ldrh	r3, [r3, #10]
 8013bea:	461a      	mov	r2, r3
 8013bec:	69bb      	ldr	r3, [r7, #24]
 8013bee:	1ad3      	subs	r3, r2, r3
 8013bf0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013bf2:	693b      	ldr	r3, [r7, #16]
 8013bf4:	7858      	ldrb	r0, [r3, #1]
 8013bf6:	6a3b      	ldr	r3, [r7, #32]
 8013bf8:	697a      	ldr	r2, [r7, #20]
 8013bfa:	69f9      	ldr	r1, [r7, #28]
 8013bfc:	f7fe f9ea 	bl	8011fd4 <disk_write>
 8013c00:	4603      	mov	r3, r0
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d004      	beq.n	8013c10 <f_write+0x1ca>
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	2201      	movs	r2, #1
 8013c0a:	745a      	strb	r2, [r3, #17]
 8013c0c:	2301      	movs	r3, #1
 8013c0e:	e08b      	b.n	8013d28 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	69da      	ldr	r2, [r3, #28]
 8013c14:	697b      	ldr	r3, [r7, #20]
 8013c16:	1ad3      	subs	r3, r2, r3
 8013c18:	6a3a      	ldr	r2, [r7, #32]
 8013c1a:	429a      	cmp	r2, r3
 8013c1c:	d915      	bls.n	8013c4a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	69da      	ldr	r2, [r3, #28]
 8013c28:	697b      	ldr	r3, [r7, #20]
 8013c2a:	1ad3      	subs	r3, r2, r3
 8013c2c:	025b      	lsls	r3, r3, #9
 8013c2e:	69fa      	ldr	r2, [r7, #28]
 8013c30:	4413      	add	r3, r2
 8013c32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013c36:	4619      	mov	r1, r3
 8013c38:	f7fe fa8d 	bl	8012156 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	7c1b      	ldrb	r3, [r3, #16]
 8013c40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013c44:	b2da      	uxtb	r2, r3
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013c4a:	6a3b      	ldr	r3, [r7, #32]
 8013c4c:	025b      	lsls	r3, r3, #9
 8013c4e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8013c50:	e03f      	b.n	8013cd2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	69db      	ldr	r3, [r3, #28]
 8013c56:	697a      	ldr	r2, [r7, #20]
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	d016      	beq.n	8013c8a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	695a      	ldr	r2, [r3, #20]
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013c64:	429a      	cmp	r2, r3
 8013c66:	d210      	bcs.n	8013c8a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013c68:	693b      	ldr	r3, [r7, #16]
 8013c6a:	7858      	ldrb	r0, [r3, #1]
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8013c72:	2301      	movs	r3, #1
 8013c74:	697a      	ldr	r2, [r7, #20]
 8013c76:	f7fe f98d 	bl	8011f94 <disk_read>
 8013c7a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d004      	beq.n	8013c8a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	2201      	movs	r2, #1
 8013c84:	745a      	strb	r2, [r3, #17]
 8013c86:	2301      	movs	r3, #1
 8013c88:	e04e      	b.n	8013d28 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	697a      	ldr	r2, [r7, #20]
 8013c8e:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	695b      	ldr	r3, [r3, #20]
 8013c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c98:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8013c9c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	429a      	cmp	r2, r3
 8013ca4:	d901      	bls.n	8013caa <f_write+0x264>
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	695b      	ldr	r3, [r3, #20]
 8013cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013cb8:	4413      	add	r3, r2
 8013cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013cbc:	69f9      	ldr	r1, [r7, #28]
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	f7fe fa49 	bl	8012156 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	7c1b      	ldrb	r3, [r3, #16]
 8013cc8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013ccc:	b2da      	uxtb	r2, r3
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013cd2:	69fa      	ldr	r2, [r7, #28]
 8013cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cd6:	4413      	add	r3, r2
 8013cd8:	61fb      	str	r3, [r7, #28]
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	695a      	ldr	r2, [r3, #20]
 8013cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ce0:	441a      	add	r2, r3
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	615a      	str	r2, [r3, #20]
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	68da      	ldr	r2, [r3, #12]
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	695b      	ldr	r3, [r3, #20]
 8013cee:	429a      	cmp	r2, r3
 8013cf0:	bf38      	it	cc
 8013cf2:	461a      	movcc	r2, r3
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	60da      	str	r2, [r3, #12]
 8013cf8:	683b      	ldr	r3, [r7, #0]
 8013cfa:	681a      	ldr	r2, [r3, #0]
 8013cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cfe:	441a      	add	r2, r3
 8013d00:	683b      	ldr	r3, [r7, #0]
 8013d02:	601a      	str	r2, [r3, #0]
 8013d04:	687a      	ldr	r2, [r7, #4]
 8013d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d08:	1ad3      	subs	r3, r2, r3
 8013d0a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	f47f aed4 	bne.w	8013abc <f_write+0x76>
 8013d14:	e000      	b.n	8013d18 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013d16:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	7c1b      	ldrb	r3, [r3, #16]
 8013d1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d20:	b2da      	uxtb	r2, r3
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8013d26:	2300      	movs	r3, #0
}
 8013d28:	4618      	mov	r0, r3
 8013d2a:	3730      	adds	r7, #48	@ 0x30
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bd80      	pop	{r7, pc}

08013d30 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b086      	sub	sp, #24
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	f107 0208 	add.w	r2, r7, #8
 8013d3e:	4611      	mov	r1, r2
 8013d40:	4618      	mov	r0, r3
 8013d42:	f7ff fc7b 	bl	801363c <validate>
 8013d46:	4603      	mov	r3, r0
 8013d48:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013d4a:	7dfb      	ldrb	r3, [r7, #23]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d168      	bne.n	8013e22 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	7c1b      	ldrb	r3, [r3, #16]
 8013d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d062      	beq.n	8013e22 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	7c1b      	ldrb	r3, [r3, #16]
 8013d60:	b25b      	sxtb	r3, r3
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	da15      	bge.n	8013d92 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013d66:	68bb      	ldr	r3, [r7, #8]
 8013d68:	7858      	ldrb	r0, [r3, #1]
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	69da      	ldr	r2, [r3, #28]
 8013d74:	2301      	movs	r3, #1
 8013d76:	f7fe f92d 	bl	8011fd4 <disk_write>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d001      	beq.n	8013d84 <f_sync+0x54>
 8013d80:	2301      	movs	r3, #1
 8013d82:	e04f      	b.n	8013e24 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	7c1b      	ldrb	r3, [r3, #16]
 8013d88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013d8c:	b2da      	uxtb	r2, r3
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013d92:	f7fd fcd9 	bl	8011748 <get_fattime>
 8013d96:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013d98:	68ba      	ldr	r2, [r7, #8]
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	6a1b      	ldr	r3, [r3, #32]
 8013d9e:	4619      	mov	r1, r3
 8013da0:	4610      	mov	r0, r2
 8013da2:	f7fe fa9a 	bl	80122da <move_window>
 8013da6:	4603      	mov	r3, r0
 8013da8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013daa:	7dfb      	ldrb	r3, [r7, #23]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d138      	bne.n	8013e22 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013db4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	330b      	adds	r3, #11
 8013dba:	781a      	ldrb	r2, [r3, #0]
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	330b      	adds	r3, #11
 8013dc0:	f042 0220 	orr.w	r2, r2, #32
 8013dc4:	b2d2      	uxtb	r2, r2
 8013dc6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6818      	ldr	r0, [r3, #0]
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	689b      	ldr	r3, [r3, #8]
 8013dd0:	461a      	mov	r2, r3
 8013dd2:	68f9      	ldr	r1, [r7, #12]
 8013dd4:	f7fe ffa3 	bl	8012d1e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	f103 021c 	add.w	r2, r3, #28
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	68db      	ldr	r3, [r3, #12]
 8013de2:	4619      	mov	r1, r3
 8013de4:	4610      	mov	r0, r2
 8013de6:	f7fe f98a 	bl	80120fe <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	3316      	adds	r3, #22
 8013dee:	6939      	ldr	r1, [r7, #16]
 8013df0:	4618      	mov	r0, r3
 8013df2:	f7fe f984 	bl	80120fe <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	3312      	adds	r3, #18
 8013dfa:	2100      	movs	r1, #0
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	f7fe f963 	bl	80120c8 <st_word>
					fs->wflag = 1;
 8013e02:	68bb      	ldr	r3, [r7, #8]
 8013e04:	2201      	movs	r2, #1
 8013e06:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013e08:	68bb      	ldr	r3, [r7, #8]
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f7fe fa92 	bl	8012334 <sync_fs>
 8013e10:	4603      	mov	r3, r0
 8013e12:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	7c1b      	ldrb	r3, [r3, #16]
 8013e18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013e1c:	b2da      	uxtb	r2, r3
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e24:	4618      	mov	r0, r3
 8013e26:	3718      	adds	r7, #24
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd80      	pop	{r7, pc}

08013e2c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b084      	sub	sp, #16
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013e34:	6878      	ldr	r0, [r7, #4]
 8013e36:	f7ff ff7b 	bl	8013d30 <f_sync>
 8013e3a:	4603      	mov	r3, r0
 8013e3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013e3e:	7bfb      	ldrb	r3, [r7, #15]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d10e      	bne.n	8013e62 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	f107 0208 	add.w	r2, r7, #8
 8013e4a:	4611      	mov	r1, r2
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f7ff fbf5 	bl	801363c <validate>
 8013e52:	4603      	mov	r3, r0
 8013e54:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013e56:	7bfb      	ldrb	r3, [r7, #15]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d102      	bne.n	8013e62 <f_close+0x36>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	2200      	movs	r2, #0
 8013e60:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e64:	4618      	mov	r0, r3
 8013e66:	3710      	adds	r7, #16
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}

08013e6c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b096      	sub	sp, #88	@ 0x58
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013e74:	f107 010c 	add.w	r1, r7, #12
 8013e78:	1d3b      	adds	r3, r7, #4
 8013e7a:	2202      	movs	r2, #2
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	f7ff f995 	bl	80131ac <find_volume>
 8013e82:	4603      	mov	r3, r0
 8013e84:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8013e8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	f040 80ec 	bne.w	801406e <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8013e96:	687a      	ldr	r2, [r7, #4]
 8013e98:	f107 0310 	add.w	r3, r7, #16
 8013e9c:	4611      	mov	r1, r2
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f7ff f878 	bl	8012f94 <follow_path>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8013eaa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d102      	bne.n	8013eb8 <f_mkdir+0x4c>
 8013eb2:	2308      	movs	r3, #8
 8013eb4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8013eb8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013ebc:	2b04      	cmp	r3, #4
 8013ebe:	f040 80d6 	bne.w	801406e <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013ec2:	f107 0310 	add.w	r3, r7, #16
 8013ec6:	2100      	movs	r1, #0
 8013ec8:	4618      	mov	r0, r3
 8013eca:	f7fe fcb6 	bl	801283a <create_chain>
 8013ece:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	895b      	ldrh	r3, [r3, #10]
 8013ed4:	025b      	lsls	r3, r3, #9
 8013ed6:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8013ed8:	2300      	movs	r3, #0
 8013eda:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d102      	bne.n	8013eea <f_mkdir+0x7e>
 8013ee4:	2307      	movs	r3, #7
 8013ee6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8013eea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013eec:	2b01      	cmp	r3, #1
 8013eee:	d102      	bne.n	8013ef6 <f_mkdir+0x8a>
 8013ef0:	2302      	movs	r3, #2
 8013ef2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013ef6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013efc:	d102      	bne.n	8013f04 <f_mkdir+0x98>
 8013efe:	2301      	movs	r3, #1
 8013f00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8013f04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d106      	bne.n	8013f1a <f_mkdir+0xae>
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	4618      	mov	r0, r3
 8013f10:	f7fe f99f 	bl	8012252 <sync_window>
 8013f14:	4603      	mov	r3, r0
 8013f16:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 8013f1a:	f7fd fc15 	bl	8011748 <get_fattime>
 8013f1e:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013f20:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d16a      	bne.n	8013ffe <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7fe fa6f 	bl	8012410 <clust2sect>
 8013f32:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	3330      	adds	r3, #48	@ 0x30
 8013f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 8013f3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013f3e:	2100      	movs	r1, #0
 8013f40:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8013f42:	f7fe f929 	bl	8012198 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013f46:	220b      	movs	r2, #11
 8013f48:	2120      	movs	r1, #32
 8013f4a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8013f4c:	f7fe f924 	bl	8012198 <mem_set>
					dir[DIR_Name] = '.';
 8013f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f52:	222e      	movs	r2, #46	@ 0x2e
 8013f54:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f58:	330b      	adds	r3, #11
 8013f5a:	2210      	movs	r2, #16
 8013f5c:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f60:	3316      	adds	r3, #22
 8013f62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013f64:	4618      	mov	r0, r3
 8013f66:	f7fe f8ca 	bl	80120fe <st_dword>
					st_clust(fs, dir, dcl);
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013f6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013f70:	4618      	mov	r0, r3
 8013f72:	f7fe fed4 	bl	8012d1e <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f78:	3320      	adds	r3, #32
 8013f7a:	2220      	movs	r2, #32
 8013f7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013f7e:	4618      	mov	r0, r3
 8013f80:	f7fe f8e9 	bl	8012156 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f86:	3321      	adds	r3, #33	@ 0x21
 8013f88:	222e      	movs	r2, #46	@ 0x2e
 8013f8a:	701a      	strb	r2, [r3, #0]
 8013f8c:	69bb      	ldr	r3, [r7, #24]
 8013f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	781b      	ldrb	r3, [r3, #0]
 8013f94:	2b03      	cmp	r3, #3
 8013f96:	d106      	bne.n	8013fa6 <f_mkdir+0x13a>
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	d101      	bne.n	8013fa6 <f_mkdir+0x13a>
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8013fa6:	68f8      	ldr	r0, [r7, #12]
 8013fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013faa:	3320      	adds	r3, #32
 8013fac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013fae:	4619      	mov	r1, r3
 8013fb0:	f7fe feb5 	bl	8012d1e <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	895b      	ldrh	r3, [r3, #10]
 8013fb8:	653b      	str	r3, [r7, #80]	@ 0x50
 8013fba:	e01b      	b.n	8013ff4 <f_mkdir+0x188>
					fs->winsect = dsc++;
 8013fbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013fbe:	1c5a      	adds	r2, r3, #1
 8013fc0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8013fc2:	68fa      	ldr	r2, [r7, #12]
 8013fc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
					fs->wflag = 1;
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	2201      	movs	r2, #1
 8013fca:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	4618      	mov	r0, r3
 8013fd0:	f7fe f93f 	bl	8012252 <sync_window>
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 8013fda:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d10c      	bne.n	8013ffc <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8013fe2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013fe6:	2100      	movs	r1, #0
 8013fe8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8013fea:	f7fe f8d5 	bl	8012198 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013fee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ff0:	3b01      	subs	r3, #1
 8013ff2:	653b      	str	r3, [r7, #80]	@ 0x50
 8013ff4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d1e0      	bne.n	8013fbc <f_mkdir+0x150>
 8013ffa:	e000      	b.n	8013ffe <f_mkdir+0x192>
					if (res != FR_OK) break;
 8013ffc:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013ffe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014002:	2b00      	cmp	r3, #0
 8014004:	d107      	bne.n	8014016 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8014006:	f107 0310 	add.w	r3, r7, #16
 801400a:	4618      	mov	r0, r3
 801400c:	f7fe fefc 	bl	8012e08 <dir_register>
 8014010:	4603      	mov	r3, r0
 8014012:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 8014016:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801401a:	2b00      	cmp	r3, #0
 801401c:	d120      	bne.n	8014060 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801401e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014020:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8014022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014024:	3316      	adds	r3, #22
 8014026:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014028:	4618      	mov	r0, r3
 801402a:	f7fe f868 	bl	80120fe <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014032:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014034:	4618      	mov	r0, r3
 8014036:	f7fe fe72 	bl	8012d1e <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801403a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801403c:	330b      	adds	r3, #11
 801403e:	2210      	movs	r2, #16
 8014040:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	2201      	movs	r2, #1
 8014046:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014048:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801404c:	2b00      	cmp	r3, #0
 801404e:	d10e      	bne.n	801406e <f_mkdir+0x202>
					res = sync_fs(fs);
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	4618      	mov	r0, r3
 8014054:	f7fe f96e 	bl	8012334 <sync_fs>
 8014058:	4603      	mov	r3, r0
 801405a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 801405e:	e006      	b.n	801406e <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014060:	f107 0310 	add.w	r3, r7, #16
 8014064:	2200      	movs	r2, #0
 8014066:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014068:	4618      	mov	r0, r3
 801406a:	f7fe fb81 	bl	8012770 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801406e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8014072:	4618      	mov	r0, r3
 8014074:	3758      	adds	r7, #88	@ 0x58
 8014076:	46bd      	mov	sp, r7
 8014078:	bd80      	pop	{r7, pc}
	...

0801407c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 801407c:	b590      	push	{r4, r7, lr}
 801407e:	b09d      	sub	sp, #116	@ 0x74
 8014080:	af00      	add	r7, sp, #0
 8014082:	60f8      	str	r0, [r7, #12]
 8014084:	607a      	str	r2, [r7, #4]
 8014086:	603b      	str	r3, [r7, #0]
 8014088:	460b      	mov	r3, r1
 801408a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 801408c:	2301      	movs	r3, #1
 801408e:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8014090:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014094:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8014096:	f107 030c 	add.w	r3, r7, #12
 801409a:	4618      	mov	r0, r3
 801409c:	f7fe ffeb 	bl	8013076 <get_ldnumber>
 80140a0:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80140a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	da02      	bge.n	80140ae <f_mkfs+0x32>
 80140a8:	230b      	movs	r3, #11
 80140aa:	f000 bc0d 	b.w	80148c8 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80140ae:	4a94      	ldr	r2, [pc, #592]	@ (8014300 <f_mkfs+0x284>)
 80140b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80140b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d005      	beq.n	80140c6 <f_mkfs+0x4a>
 80140ba:	4a91      	ldr	r2, [pc, #580]	@ (8014300 <f_mkfs+0x284>)
 80140bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80140be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80140c2:	2200      	movs	r2, #0
 80140c4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80140c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80140c8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80140cc:	2300      	movs	r3, #0
 80140ce:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80140d2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80140d6:	4618      	mov	r0, r3
 80140d8:	f7fd ff36 	bl	8011f48 <disk_initialize>
 80140dc:	4603      	mov	r3, r0
 80140de:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 80140e2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80140e6:	f003 0301 	and.w	r3, r3, #1
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d001      	beq.n	80140f2 <f_mkfs+0x76>
 80140ee:	2303      	movs	r3, #3
 80140f0:	e3ea      	b.n	80148c8 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 80140f2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80140f6:	f003 0304 	and.w	r3, r3, #4
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d001      	beq.n	8014102 <f_mkfs+0x86>
 80140fe:	230a      	movs	r3, #10
 8014100:	e3e2      	b.n	80148c8 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8014102:	f107 0214 	add.w	r2, r7, #20
 8014106:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801410a:	2103      	movs	r1, #3
 801410c:	4618      	mov	r0, r3
 801410e:	f7fd ff81 	bl	8012014 <disk_ioctl>
 8014112:	4603      	mov	r3, r0
 8014114:	2b00      	cmp	r3, #0
 8014116:	d10c      	bne.n	8014132 <f_mkfs+0xb6>
 8014118:	697b      	ldr	r3, [r7, #20]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d009      	beq.n	8014132 <f_mkfs+0xb6>
 801411e:	697b      	ldr	r3, [r7, #20]
 8014120:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014124:	d805      	bhi.n	8014132 <f_mkfs+0xb6>
 8014126:	697b      	ldr	r3, [r7, #20]
 8014128:	1e5a      	subs	r2, r3, #1
 801412a:	697b      	ldr	r3, [r7, #20]
 801412c:	4013      	ands	r3, r2
 801412e:	2b00      	cmp	r3, #0
 8014130:	d001      	beq.n	8014136 <f_mkfs+0xba>
 8014132:	2301      	movs	r3, #1
 8014134:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8014136:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801413a:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d003      	beq.n	801414a <f_mkfs+0xce>
 8014142:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014144:	687a      	ldr	r2, [r7, #4]
 8014146:	429a      	cmp	r2, r3
 8014148:	d309      	bcc.n	801415e <f_mkfs+0xe2>
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014150:	d805      	bhi.n	801415e <f_mkfs+0xe2>
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	1e5a      	subs	r2, r3, #1
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	4013      	ands	r3, r2
 801415a:	2b00      	cmp	r3, #0
 801415c:	d001      	beq.n	8014162 <f_mkfs+0xe6>
 801415e:	2313      	movs	r3, #19
 8014160:	e3b2      	b.n	80148c8 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8014162:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014164:	687a      	ldr	r2, [r7, #4]
 8014166:	fbb2 f3f3 	udiv	r3, r2, r3
 801416a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 801416c:	683b      	ldr	r3, [r7, #0]
 801416e:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8014170:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014172:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014176:	fbb2 f3f3 	udiv	r3, r2, r3
 801417a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 801417c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801417e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014180:	fb02 f303 	mul.w	r3, r2, r3
 8014184:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8014186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014188:	2b00      	cmp	r3, #0
 801418a:	d101      	bne.n	8014190 <f_mkfs+0x114>
 801418c:	230e      	movs	r3, #14
 801418e:	e39b      	b.n	80148c8 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8014190:	f107 0210 	add.w	r2, r7, #16
 8014194:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8014198:	2101      	movs	r1, #1
 801419a:	4618      	mov	r0, r3
 801419c:	f7fd ff3a 	bl	8012014 <disk_ioctl>
 80141a0:	4603      	mov	r3, r0
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d001      	beq.n	80141aa <f_mkfs+0x12e>
 80141a6:	2301      	movs	r3, #1
 80141a8:	e38e      	b.n	80148c8 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80141aa:	7afb      	ldrb	r3, [r7, #11]
 80141ac:	f003 0308 	and.w	r3, r3, #8
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d001      	beq.n	80141b8 <f_mkfs+0x13c>
 80141b4:	2300      	movs	r3, #0
 80141b6:	e000      	b.n	80141ba <f_mkfs+0x13e>
 80141b8:	233f      	movs	r3, #63	@ 0x3f
 80141ba:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80141bc:	693b      	ldr	r3, [r7, #16]
 80141be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80141c0:	429a      	cmp	r2, r3
 80141c2:	d901      	bls.n	80141c8 <f_mkfs+0x14c>
 80141c4:	230e      	movs	r3, #14
 80141c6:	e37f      	b.n	80148c8 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 80141c8:	693a      	ldr	r2, [r7, #16]
 80141ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141cc:	1ad3      	subs	r3, r2, r3
 80141ce:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80141d0:	693b      	ldr	r3, [r7, #16]
 80141d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80141d4:	d801      	bhi.n	80141da <f_mkfs+0x15e>
 80141d6:	230e      	movs	r3, #14
 80141d8:	e376      	b.n	80148c8 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	2b80      	cmp	r3, #128	@ 0x80
 80141de:	d901      	bls.n	80141e4 <f_mkfs+0x168>
 80141e0:	2313      	movs	r3, #19
 80141e2:	e371      	b.n	80148c8 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80141e4:	7afb      	ldrb	r3, [r7, #11]
 80141e6:	f003 0302 	and.w	r3, r3, #2
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d00d      	beq.n	801420a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80141ee:	7afb      	ldrb	r3, [r7, #11]
 80141f0:	f003 0307 	and.w	r3, r3, #7
 80141f4:	2b02      	cmp	r3, #2
 80141f6:	d004      	beq.n	8014202 <f_mkfs+0x186>
 80141f8:	7afb      	ldrb	r3, [r7, #11]
 80141fa:	f003 0301 	and.w	r3, r3, #1
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d103      	bne.n	801420a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8014202:	2303      	movs	r3, #3
 8014204:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8014208:	e009      	b.n	801421e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 801420a:	7afb      	ldrb	r3, [r7, #11]
 801420c:	f003 0301 	and.w	r3, r3, #1
 8014210:	2b00      	cmp	r3, #0
 8014212:	d101      	bne.n	8014218 <f_mkfs+0x19c>
 8014214:	2313      	movs	r3, #19
 8014216:	e357      	b.n	80148c8 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8014218:	2302      	movs	r3, #2
 801421a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8014222:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014226:	2b03      	cmp	r3, #3
 8014228:	d13c      	bne.n	80142a4 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 801422a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801422c:	2b00      	cmp	r3, #0
 801422e:	d11b      	bne.n	8014268 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8014230:	693b      	ldr	r3, [r7, #16]
 8014232:	0c5b      	lsrs	r3, r3, #17
 8014234:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8014236:	2300      	movs	r3, #0
 8014238:	64bb      	str	r3, [r7, #72]	@ 0x48
 801423a:	2301      	movs	r3, #1
 801423c:	653b      	str	r3, [r7, #80]	@ 0x50
 801423e:	e005      	b.n	801424c <f_mkfs+0x1d0>
 8014240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014242:	3301      	adds	r3, #1
 8014244:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014246:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014248:	005b      	lsls	r3, r3, #1
 801424a:	653b      	str	r3, [r7, #80]	@ 0x50
 801424c:	4a2d      	ldr	r2, [pc, #180]	@ (8014304 <f_mkfs+0x288>)
 801424e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d007      	beq.n	8014268 <f_mkfs+0x1ec>
 8014258:	4a2a      	ldr	r2, [pc, #168]	@ (8014304 <f_mkfs+0x288>)
 801425a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801425c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014260:	461a      	mov	r2, r3
 8014262:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014264:	4293      	cmp	r3, r2
 8014266:	d2eb      	bcs.n	8014240 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8014268:	693a      	ldr	r2, [r7, #16]
 801426a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801426c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014270:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8014272:	6a3b      	ldr	r3, [r7, #32]
 8014274:	3302      	adds	r3, #2
 8014276:	009a      	lsls	r2, r3, #2
 8014278:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801427a:	4413      	add	r3, r2
 801427c:	1e5a      	subs	r2, r3, #1
 801427e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014280:	fbb2 f3f3 	udiv	r3, r2, r3
 8014284:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8014286:	2320      	movs	r3, #32
 8014288:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 801428a:	2300      	movs	r3, #0
 801428c:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 801428e:	6a3b      	ldr	r3, [r7, #32]
 8014290:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8014294:	4293      	cmp	r3, r2
 8014296:	d903      	bls.n	80142a0 <f_mkfs+0x224>
 8014298:	6a3b      	ldr	r3, [r7, #32]
 801429a:	4a1b      	ldr	r2, [pc, #108]	@ (8014308 <f_mkfs+0x28c>)
 801429c:	4293      	cmp	r3, r2
 801429e:	d952      	bls.n	8014346 <f_mkfs+0x2ca>
 80142a0:	230e      	movs	r3, #14
 80142a2:	e311      	b.n	80148c8 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80142a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d11b      	bne.n	80142e2 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80142aa:	693b      	ldr	r3, [r7, #16]
 80142ac:	0b1b      	lsrs	r3, r3, #12
 80142ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80142b0:	2300      	movs	r3, #0
 80142b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80142b4:	2301      	movs	r3, #1
 80142b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80142b8:	e005      	b.n	80142c6 <f_mkfs+0x24a>
 80142ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80142bc:	3301      	adds	r3, #1
 80142be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80142c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142c2:	005b      	lsls	r3, r3, #1
 80142c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80142c6:	4a11      	ldr	r2, [pc, #68]	@ (801430c <f_mkfs+0x290>)
 80142c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80142ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d007      	beq.n	80142e2 <f_mkfs+0x266>
 80142d2:	4a0e      	ldr	r2, [pc, #56]	@ (801430c <f_mkfs+0x290>)
 80142d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80142d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80142da:	461a      	mov	r2, r3
 80142dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80142de:	4293      	cmp	r3, r2
 80142e0:	d2eb      	bcs.n	80142ba <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 80142e2:	693a      	ldr	r2, [r7, #16]
 80142e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80142ea:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80142ec:	6a3b      	ldr	r3, [r7, #32]
 80142ee:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80142f2:	4293      	cmp	r3, r2
 80142f4:	d90c      	bls.n	8014310 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80142f6:	6a3b      	ldr	r3, [r7, #32]
 80142f8:	3302      	adds	r3, #2
 80142fa:	005b      	lsls	r3, r3, #1
 80142fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80142fe:	e012      	b.n	8014326 <f_mkfs+0x2aa>
 8014300:	20002ac4 	.word	0x20002ac4
 8014304:	0801ba40 	.word	0x0801ba40
 8014308:	0ffffff5 	.word	0x0ffffff5
 801430c:	0801ba50 	.word	0x0801ba50
				} else {
					fmt = FS_FAT12;
 8014310:	2301      	movs	r3, #1
 8014312:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8014316:	6a3a      	ldr	r2, [r7, #32]
 8014318:	4613      	mov	r3, r2
 801431a:	005b      	lsls	r3, r3, #1
 801431c:	4413      	add	r3, r2
 801431e:	3301      	adds	r3, #1
 8014320:	085b      	lsrs	r3, r3, #1
 8014322:	3303      	adds	r3, #3
 8014324:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8014326:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014328:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801432a:	4413      	add	r3, r2
 801432c:	1e5a      	subs	r2, r3, #1
 801432e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014330:	fbb2 f3f3 	udiv	r3, r2, r3
 8014334:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8014336:	2301      	movs	r3, #1
 8014338:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 801433a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801433c:	015a      	lsls	r2, r3, #5
 801433e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014340:	fbb2 f3f3 	udiv	r3, r2, r3
 8014344:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8014346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801434a:	4413      	add	r3, r2
 801434c:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 801434e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014350:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014352:	fb03 f202 	mul.w	r2, r3, r2
 8014356:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014358:	4413      	add	r3, r2
 801435a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801435c:	4413      	add	r3, r2
 801435e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8014360:	697a      	ldr	r2, [r7, #20]
 8014362:	69fb      	ldr	r3, [r7, #28]
 8014364:	4413      	add	r3, r2
 8014366:	1e5a      	subs	r2, r3, #1
 8014368:	697b      	ldr	r3, [r7, #20]
 801436a:	425b      	negs	r3, r3
 801436c:	401a      	ands	r2, r3
 801436e:	69fb      	ldr	r3, [r7, #28]
 8014370:	1ad3      	subs	r3, r2, r3
 8014372:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8014374:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014378:	2b03      	cmp	r3, #3
 801437a:	d108      	bne.n	801438e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 801437c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801437e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014380:	4413      	add	r3, r2
 8014382:	657b      	str	r3, [r7, #84]	@ 0x54
 8014384:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014386:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014388:	4413      	add	r3, r2
 801438a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801438c:	e006      	b.n	801439c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 801438e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014390:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014392:	fbb2 f3f3 	udiv	r3, r2, r3
 8014396:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8014398:	4413      	add	r3, r2
 801439a:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 801439c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801439e:	011a      	lsls	r2, r3, #4
 80143a0:	69fb      	ldr	r3, [r7, #28]
 80143a2:	441a      	add	r2, r3
 80143a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143a6:	1ad2      	subs	r2, r2, r3
 80143a8:	693b      	ldr	r3, [r7, #16]
 80143aa:	429a      	cmp	r2, r3
 80143ac:	d901      	bls.n	80143b2 <f_mkfs+0x336>
 80143ae:	230e      	movs	r3, #14
 80143b0:	e28a      	b.n	80148c8 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80143b2:	693a      	ldr	r2, [r7, #16]
 80143b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143b6:	1ad2      	subs	r2, r2, r3
 80143b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80143ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80143bc:	fb01 f303 	mul.w	r3, r1, r3
 80143c0:	1ad2      	subs	r2, r2, r3
 80143c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80143c4:	1ad2      	subs	r2, r2, r3
 80143c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80143c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80143cc:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 80143ce:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80143d2:	2b03      	cmp	r3, #3
 80143d4:	d10f      	bne.n	80143f6 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80143d6:	6a3b      	ldr	r3, [r7, #32]
 80143d8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80143dc:	4293      	cmp	r3, r2
 80143de:	d80a      	bhi.n	80143f6 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d105      	bne.n	80143f2 <f_mkfs+0x376>
 80143e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80143e8:	085b      	lsrs	r3, r3, #1
 80143ea:	607b      	str	r3, [r7, #4]
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d144      	bne.n	801447c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 80143f2:	230e      	movs	r3, #14
 80143f4:	e268      	b.n	80148c8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 80143f6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80143fa:	2b02      	cmp	r3, #2
 80143fc:	d133      	bne.n	8014466 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 80143fe:	6a3b      	ldr	r3, [r7, #32]
 8014400:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8014404:	4293      	cmp	r3, r2
 8014406:	d91e      	bls.n	8014446 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d107      	bne.n	801441e <f_mkfs+0x3a2>
 801440e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014410:	005b      	lsls	r3, r3, #1
 8014412:	2b40      	cmp	r3, #64	@ 0x40
 8014414:	d803      	bhi.n	801441e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8014416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014418:	005b      	lsls	r3, r3, #1
 801441a:	607b      	str	r3, [r7, #4]
 801441c:	e033      	b.n	8014486 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 801441e:	7afb      	ldrb	r3, [r7, #11]
 8014420:	f003 0302 	and.w	r3, r3, #2
 8014424:	2b00      	cmp	r3, #0
 8014426:	d003      	beq.n	8014430 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8014428:	2303      	movs	r3, #3
 801442a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 801442e:	e02a      	b.n	8014486 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d105      	bne.n	8014442 <f_mkfs+0x3c6>
 8014436:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014438:	005b      	lsls	r3, r3, #1
 801443a:	607b      	str	r3, [r7, #4]
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	2b80      	cmp	r3, #128	@ 0x80
 8014440:	d91e      	bls.n	8014480 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8014442:	230e      	movs	r3, #14
 8014444:	e240      	b.n	80148c8 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8014446:	6a3b      	ldr	r3, [r7, #32]
 8014448:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801444c:	4293      	cmp	r3, r2
 801444e:	d80a      	bhi.n	8014466 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d105      	bne.n	8014462 <f_mkfs+0x3e6>
 8014456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014458:	005b      	lsls	r3, r3, #1
 801445a:	607b      	str	r3, [r7, #4]
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	2b80      	cmp	r3, #128	@ 0x80
 8014460:	d910      	bls.n	8014484 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8014462:	230e      	movs	r3, #14
 8014464:	e230      	b.n	80148c8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8014466:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801446a:	2b01      	cmp	r3, #1
 801446c:	d10c      	bne.n	8014488 <f_mkfs+0x40c>
 801446e:	6a3b      	ldr	r3, [r7, #32]
 8014470:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8014474:	4293      	cmp	r3, r2
 8014476:	d907      	bls.n	8014488 <f_mkfs+0x40c>
 8014478:	230e      	movs	r3, #14
 801447a:	e225      	b.n	80148c8 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 801447c:	bf00      	nop
 801447e:	e6ce      	b.n	801421e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014480:	bf00      	nop
 8014482:	e6cc      	b.n	801421e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014484:	bf00      	nop
			pau = au;
 8014486:	e6ca      	b.n	801421e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8014488:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 801448a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801448c:	461a      	mov	r2, r3
 801448e:	2100      	movs	r1, #0
 8014490:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014492:	f7fd fe81 	bl	8012198 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8014496:	220b      	movs	r2, #11
 8014498:	49b2      	ldr	r1, [pc, #712]	@ (8014764 <f_mkfs+0x6e8>)
 801449a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801449c:	f7fd fe5b 	bl	8012156 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80144a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144a2:	330b      	adds	r3, #11
 80144a4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80144a6:	4611      	mov	r1, r2
 80144a8:	4618      	mov	r0, r3
 80144aa:	f7fd fe0d 	bl	80120c8 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80144ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144b0:	330d      	adds	r3, #13
 80144b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80144b4:	b2d2      	uxtb	r2, r2
 80144b6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80144b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144ba:	330e      	adds	r3, #14
 80144bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80144be:	b292      	uxth	r2, r2
 80144c0:	4611      	mov	r1, r2
 80144c2:	4618      	mov	r0, r3
 80144c4:	f7fd fe00 	bl	80120c8 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80144c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144ca:	3310      	adds	r3, #16
 80144cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80144ce:	b2d2      	uxtb	r2, r2
 80144d0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80144d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144d4:	f103 0211 	add.w	r2, r3, #17
 80144d8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80144dc:	2b03      	cmp	r3, #3
 80144de:	d002      	beq.n	80144e6 <f_mkfs+0x46a>
 80144e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80144e2:	b29b      	uxth	r3, r3
 80144e4:	e000      	b.n	80144e8 <f_mkfs+0x46c>
 80144e6:	2300      	movs	r3, #0
 80144e8:	4619      	mov	r1, r3
 80144ea:	4610      	mov	r0, r2
 80144ec:	f7fd fdec 	bl	80120c8 <st_word>
		if (sz_vol < 0x10000) {
 80144f0:	693b      	ldr	r3, [r7, #16]
 80144f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80144f6:	d208      	bcs.n	801450a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80144f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144fa:	3313      	adds	r3, #19
 80144fc:	693a      	ldr	r2, [r7, #16]
 80144fe:	b292      	uxth	r2, r2
 8014500:	4611      	mov	r1, r2
 8014502:	4618      	mov	r0, r3
 8014504:	f7fd fde0 	bl	80120c8 <st_word>
 8014508:	e006      	b.n	8014518 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 801450a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801450c:	3320      	adds	r3, #32
 801450e:	693a      	ldr	r2, [r7, #16]
 8014510:	4611      	mov	r1, r2
 8014512:	4618      	mov	r0, r3
 8014514:	f7fd fdf3 	bl	80120fe <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8014518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801451a:	3315      	adds	r3, #21
 801451c:	22f8      	movs	r2, #248	@ 0xf8
 801451e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8014520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014522:	3318      	adds	r3, #24
 8014524:	213f      	movs	r1, #63	@ 0x3f
 8014526:	4618      	mov	r0, r3
 8014528:	f7fd fdce 	bl	80120c8 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 801452c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801452e:	331a      	adds	r3, #26
 8014530:	21ff      	movs	r1, #255	@ 0xff
 8014532:	4618      	mov	r0, r3
 8014534:	f7fd fdc8 	bl	80120c8 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8014538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801453a:	331c      	adds	r3, #28
 801453c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801453e:	4618      	mov	r0, r3
 8014540:	f7fd fddd 	bl	80120fe <st_dword>
		if (fmt == FS_FAT32) {
 8014544:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014548:	2b03      	cmp	r3, #3
 801454a:	d131      	bne.n	80145b0 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 801454c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801454e:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 8014552:	f7fd f8f9 	bl	8011748 <get_fattime>
 8014556:	4603      	mov	r3, r0
 8014558:	4619      	mov	r1, r3
 801455a:	4620      	mov	r0, r4
 801455c:	f7fd fdcf 	bl	80120fe <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8014560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014562:	3324      	adds	r3, #36	@ 0x24
 8014564:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014566:	4618      	mov	r0, r3
 8014568:	f7fd fdc9 	bl	80120fe <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 801456c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801456e:	332c      	adds	r3, #44	@ 0x2c
 8014570:	2102      	movs	r1, #2
 8014572:	4618      	mov	r0, r3
 8014574:	f7fd fdc3 	bl	80120fe <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8014578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801457a:	3330      	adds	r3, #48	@ 0x30
 801457c:	2101      	movs	r1, #1
 801457e:	4618      	mov	r0, r3
 8014580:	f7fd fda2 	bl	80120c8 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8014584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014586:	3332      	adds	r3, #50	@ 0x32
 8014588:	2106      	movs	r1, #6
 801458a:	4618      	mov	r0, r3
 801458c:	f7fd fd9c 	bl	80120c8 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8014590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014592:	3340      	adds	r3, #64	@ 0x40
 8014594:	2280      	movs	r2, #128	@ 0x80
 8014596:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8014598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801459a:	3342      	adds	r3, #66	@ 0x42
 801459c:	2229      	movs	r2, #41	@ 0x29
 801459e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80145a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145a2:	3347      	adds	r3, #71	@ 0x47
 80145a4:	2213      	movs	r2, #19
 80145a6:	4970      	ldr	r1, [pc, #448]	@ (8014768 <f_mkfs+0x6ec>)
 80145a8:	4618      	mov	r0, r3
 80145aa:	f7fd fdd4 	bl	8012156 <mem_cpy>
 80145ae:	e020      	b.n	80145f2 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80145b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145b2:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 80145b6:	f7fd f8c7 	bl	8011748 <get_fattime>
 80145ba:	4603      	mov	r3, r0
 80145bc:	4619      	mov	r1, r3
 80145be:	4620      	mov	r0, r4
 80145c0:	f7fd fd9d 	bl	80120fe <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80145c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145c6:	3316      	adds	r3, #22
 80145c8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80145ca:	b292      	uxth	r2, r2
 80145cc:	4611      	mov	r1, r2
 80145ce:	4618      	mov	r0, r3
 80145d0:	f7fd fd7a 	bl	80120c8 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80145d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145d6:	3324      	adds	r3, #36	@ 0x24
 80145d8:	2280      	movs	r2, #128	@ 0x80
 80145da:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80145dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145de:	3326      	adds	r3, #38	@ 0x26
 80145e0:	2229      	movs	r2, #41	@ 0x29
 80145e2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80145e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145e6:	332b      	adds	r3, #43	@ 0x2b
 80145e8:	2213      	movs	r2, #19
 80145ea:	4960      	ldr	r1, [pc, #384]	@ (801476c <f_mkfs+0x6f0>)
 80145ec:	4618      	mov	r0, r3
 80145ee:	f7fd fdb2 	bl	8012156 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80145f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145f4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80145f8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80145fc:	4618      	mov	r0, r3
 80145fe:	f7fd fd63 	bl	80120c8 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8014602:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014606:	2301      	movs	r3, #1
 8014608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801460a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801460c:	f7fd fce2 	bl	8011fd4 <disk_write>
 8014610:	4603      	mov	r3, r0
 8014612:	2b00      	cmp	r3, #0
 8014614:	d001      	beq.n	801461a <f_mkfs+0x59e>
 8014616:	2301      	movs	r3, #1
 8014618:	e156      	b.n	80148c8 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 801461a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801461e:	2b03      	cmp	r3, #3
 8014620:	d140      	bne.n	80146a4 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8014622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014624:	1d9a      	adds	r2, r3, #6
 8014626:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801462a:	2301      	movs	r3, #1
 801462c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801462e:	f7fd fcd1 	bl	8011fd4 <disk_write>
			mem_set(buf, 0, ss);
 8014632:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014634:	461a      	mov	r2, r3
 8014636:	2100      	movs	r1, #0
 8014638:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801463a:	f7fd fdad 	bl	8012198 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 801463e:	494c      	ldr	r1, [pc, #304]	@ (8014770 <f_mkfs+0x6f4>)
 8014640:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014642:	f7fd fd5c 	bl	80120fe <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8014646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014648:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801464c:	4949      	ldr	r1, [pc, #292]	@ (8014774 <f_mkfs+0x6f8>)
 801464e:	4618      	mov	r0, r3
 8014650:	f7fd fd55 	bl	80120fe <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8014654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014656:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801465a:	6a3b      	ldr	r3, [r7, #32]
 801465c:	3b01      	subs	r3, #1
 801465e:	4619      	mov	r1, r3
 8014660:	4610      	mov	r0, r2
 8014662:	f7fd fd4c 	bl	80120fe <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8014666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014668:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801466c:	2102      	movs	r1, #2
 801466e:	4618      	mov	r0, r3
 8014670:	f7fd fd45 	bl	80120fe <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8014674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014676:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801467a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801467e:	4618      	mov	r0, r3
 8014680:	f7fd fd22 	bl	80120c8 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8014684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014686:	1dda      	adds	r2, r3, #7
 8014688:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801468c:	2301      	movs	r3, #1
 801468e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014690:	f7fd fca0 	bl	8011fd4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8014694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014696:	1c5a      	adds	r2, r3, #1
 8014698:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801469c:	2301      	movs	r3, #1
 801469e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80146a0:	f7fd fc98 	bl	8011fd4 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 80146a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80146a6:	2100      	movs	r1, #0
 80146a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80146aa:	f7fd fd75 	bl	8012198 <mem_set>
		sect = b_fat;		/* FAT start sector */
 80146ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80146b0:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80146b2:	2300      	movs	r3, #0
 80146b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80146b6:	e04b      	b.n	8014750 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 80146b8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80146bc:	2b03      	cmp	r3, #3
 80146be:	d113      	bne.n	80146e8 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 80146c0:	f06f 0107 	mvn.w	r1, #7
 80146c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80146c6:	f7fd fd1a 	bl	80120fe <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 80146ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146cc:	3304      	adds	r3, #4
 80146ce:	f04f 31ff 	mov.w	r1, #4294967295
 80146d2:	4618      	mov	r0, r3
 80146d4:	f7fd fd13 	bl	80120fe <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 80146d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146da:	3308      	adds	r3, #8
 80146dc:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80146e0:	4618      	mov	r0, r3
 80146e2:	f7fd fd0c 	bl	80120fe <st_dword>
 80146e6:	e00b      	b.n	8014700 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80146e8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80146ec:	2b01      	cmp	r3, #1
 80146ee:	d101      	bne.n	80146f4 <f_mkfs+0x678>
 80146f0:	4b21      	ldr	r3, [pc, #132]	@ (8014778 <f_mkfs+0x6fc>)
 80146f2:	e001      	b.n	80146f8 <f_mkfs+0x67c>
 80146f4:	f06f 0307 	mvn.w	r3, #7
 80146f8:	4619      	mov	r1, r3
 80146fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80146fc:	f7fd fcff 	bl	80120fe <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8014700:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014702:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8014704:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014708:	4293      	cmp	r3, r2
 801470a:	bf28      	it	cs
 801470c:	4613      	movcs	r3, r2
 801470e:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8014710:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014714:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014716:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014718:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801471a:	f7fd fc5b 	bl	8011fd4 <disk_write>
 801471e:	4603      	mov	r3, r0
 8014720:	2b00      	cmp	r3, #0
 8014722:	d001      	beq.n	8014728 <f_mkfs+0x6ac>
 8014724:	2301      	movs	r3, #1
 8014726:	e0cf      	b.n	80148c8 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8014728:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801472a:	461a      	mov	r2, r3
 801472c:	2100      	movs	r1, #0
 801472e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014730:	f7fd fd32 	bl	8012198 <mem_set>
				sect += n; nsect -= n;
 8014734:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014738:	4413      	add	r3, r2
 801473a:	667b      	str	r3, [r7, #100]	@ 0x64
 801473c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801473e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014740:	1ad3      	subs	r3, r2, r3
 8014742:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 8014744:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014746:	2b00      	cmp	r3, #0
 8014748:	d1dc      	bne.n	8014704 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 801474a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801474c:	3301      	adds	r3, #1
 801474e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014750:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014754:	429a      	cmp	r2, r3
 8014756:	d3af      	bcc.n	80146b8 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8014758:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801475c:	2b03      	cmp	r3, #3
 801475e:	d10d      	bne.n	801477c <f_mkfs+0x700>
 8014760:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014762:	e00c      	b.n	801477e <f_mkfs+0x702>
 8014764:	0801b950 	.word	0x0801b950
 8014768:	0801b95c 	.word	0x0801b95c
 801476c:	0801b970 	.word	0x0801b970
 8014770:	41615252 	.word	0x41615252
 8014774:	61417272 	.word	0x61417272
 8014778:	00fffff8 	.word	0x00fffff8
 801477c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801477e:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8014780:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014784:	4293      	cmp	r3, r2
 8014786:	bf28      	it	cs
 8014788:	4613      	movcs	r3, r2
 801478a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 801478c:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014790:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014792:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014794:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014796:	f7fd fc1d 	bl	8011fd4 <disk_write>
 801479a:	4603      	mov	r3, r0
 801479c:	2b00      	cmp	r3, #0
 801479e:	d001      	beq.n	80147a4 <f_mkfs+0x728>
 80147a0:	2301      	movs	r3, #1
 80147a2:	e091      	b.n	80148c8 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 80147a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80147a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80147a8:	4413      	add	r3, r2
 80147aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80147ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80147ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80147b0:	1ad3      	subs	r3, r2, r3
 80147b2:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 80147b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d1e2      	bne.n	8014780 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80147ba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80147be:	2b03      	cmp	r3, #3
 80147c0:	d103      	bne.n	80147ca <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 80147c2:	230c      	movs	r3, #12
 80147c4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80147c8:	e010      	b.n	80147ec <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 80147ca:	693b      	ldr	r3, [r7, #16]
 80147cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80147d0:	d303      	bcc.n	80147da <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80147d2:	2306      	movs	r3, #6
 80147d4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80147d8:	e008      	b.n	80147ec <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80147da:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80147de:	2b02      	cmp	r3, #2
 80147e0:	d101      	bne.n	80147e6 <f_mkfs+0x76a>
 80147e2:	2304      	movs	r3, #4
 80147e4:	e000      	b.n	80147e8 <f_mkfs+0x76c>
 80147e6:	2301      	movs	r3, #1
 80147e8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80147ec:	7afb      	ldrb	r3, [r7, #11]
 80147ee:	f003 0308 	and.w	r3, r3, #8
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d15b      	bne.n	80148ae <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 80147f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80147f8:	461a      	mov	r2, r3
 80147fa:	2100      	movs	r1, #0
 80147fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80147fe:	f7fd fccb 	bl	8012198 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8014802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014804:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014808:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801480c:	4618      	mov	r0, r3
 801480e:	f7fd fc5b 	bl	80120c8 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8014812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014814:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8014818:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 801481a:	69bb      	ldr	r3, [r7, #24]
 801481c:	2200      	movs	r2, #0
 801481e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8014820:	69bb      	ldr	r3, [r7, #24]
 8014822:	3301      	adds	r3, #1
 8014824:	2201      	movs	r2, #1
 8014826:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8014828:	69bb      	ldr	r3, [r7, #24]
 801482a:	3302      	adds	r3, #2
 801482c:	2201      	movs	r2, #1
 801482e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8014830:	69bb      	ldr	r3, [r7, #24]
 8014832:	3303      	adds	r3, #3
 8014834:	2200      	movs	r2, #0
 8014836:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8014838:	69bb      	ldr	r3, [r7, #24]
 801483a:	3304      	adds	r3, #4
 801483c:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8014840:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8014842:	693a      	ldr	r2, [r7, #16]
 8014844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014846:	441a      	add	r2, r3
 8014848:	4b21      	ldr	r3, [pc, #132]	@ (80148d0 <f_mkfs+0x854>)
 801484a:	fba3 1302 	umull	r1, r3, r3, r2
 801484e:	1ad2      	subs	r2, r2, r3
 8014850:	0852      	lsrs	r2, r2, #1
 8014852:	4413      	add	r3, r2
 8014854:	0b5b      	lsrs	r3, r3, #13
 8014856:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8014858:	69bb      	ldr	r3, [r7, #24]
 801485a:	3305      	adds	r3, #5
 801485c:	22fe      	movs	r2, #254	@ 0xfe
 801485e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8014860:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014862:	089b      	lsrs	r3, r3, #2
 8014864:	b2da      	uxtb	r2, r3
 8014866:	69bb      	ldr	r3, [r7, #24]
 8014868:	3306      	adds	r3, #6
 801486a:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 801486e:	b2d2      	uxtb	r2, r2
 8014870:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8014872:	69bb      	ldr	r3, [r7, #24]
 8014874:	3307      	adds	r3, #7
 8014876:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014878:	b2d2      	uxtb	r2, r2
 801487a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 801487c:	69bb      	ldr	r3, [r7, #24]
 801487e:	3308      	adds	r3, #8
 8014880:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014882:	4618      	mov	r0, r3
 8014884:	f7fd fc3b 	bl	80120fe <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8014888:	69bb      	ldr	r3, [r7, #24]
 801488a:	330c      	adds	r3, #12
 801488c:	693a      	ldr	r2, [r7, #16]
 801488e:	4611      	mov	r1, r2
 8014890:	4618      	mov	r0, r3
 8014892:	f7fd fc34 	bl	80120fe <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8014896:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801489a:	2301      	movs	r3, #1
 801489c:	2200      	movs	r2, #0
 801489e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80148a0:	f7fd fb98 	bl	8011fd4 <disk_write>
 80148a4:	4603      	mov	r3, r0
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d001      	beq.n	80148ae <f_mkfs+0x832>
 80148aa:	2301      	movs	r3, #1
 80148ac:	e00c      	b.n	80148c8 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80148ae:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80148b2:	2200      	movs	r2, #0
 80148b4:	2100      	movs	r1, #0
 80148b6:	4618      	mov	r0, r3
 80148b8:	f7fd fbac 	bl	8012014 <disk_ioctl>
 80148bc:	4603      	mov	r3, r0
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d001      	beq.n	80148c6 <f_mkfs+0x84a>
 80148c2:	2301      	movs	r3, #1
 80148c4:	e000      	b.n	80148c8 <f_mkfs+0x84c>

	return FR_OK;
 80148c6:	2300      	movs	r3, #0
}
 80148c8:	4618      	mov	r0, r3
 80148ca:	3774      	adds	r7, #116	@ 0x74
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd90      	pop	{r4, r7, pc}
 80148d0:	0515565b 	.word	0x0515565b

080148d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80148d4:	b480      	push	{r7}
 80148d6:	b087      	sub	sp, #28
 80148d8:	af00      	add	r7, sp, #0
 80148da:	60f8      	str	r0, [r7, #12]
 80148dc:	60b9      	str	r1, [r7, #8]
 80148de:	4613      	mov	r3, r2
 80148e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80148e2:	2301      	movs	r3, #1
 80148e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80148e6:	2300      	movs	r3, #0
 80148e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80148ea:	4b1f      	ldr	r3, [pc, #124]	@ (8014968 <FATFS_LinkDriverEx+0x94>)
 80148ec:	7a5b      	ldrb	r3, [r3, #9]
 80148ee:	b2db      	uxtb	r3, r3
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d131      	bne.n	8014958 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80148f4:	4b1c      	ldr	r3, [pc, #112]	@ (8014968 <FATFS_LinkDriverEx+0x94>)
 80148f6:	7a5b      	ldrb	r3, [r3, #9]
 80148f8:	b2db      	uxtb	r3, r3
 80148fa:	461a      	mov	r2, r3
 80148fc:	4b1a      	ldr	r3, [pc, #104]	@ (8014968 <FATFS_LinkDriverEx+0x94>)
 80148fe:	2100      	movs	r1, #0
 8014900:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014902:	4b19      	ldr	r3, [pc, #100]	@ (8014968 <FATFS_LinkDriverEx+0x94>)
 8014904:	7a5b      	ldrb	r3, [r3, #9]
 8014906:	b2db      	uxtb	r3, r3
 8014908:	4a17      	ldr	r2, [pc, #92]	@ (8014968 <FATFS_LinkDriverEx+0x94>)
 801490a:	009b      	lsls	r3, r3, #2
 801490c:	4413      	add	r3, r2
 801490e:	68fa      	ldr	r2, [r7, #12]
 8014910:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014912:	4b15      	ldr	r3, [pc, #84]	@ (8014968 <FATFS_LinkDriverEx+0x94>)
 8014914:	7a5b      	ldrb	r3, [r3, #9]
 8014916:	b2db      	uxtb	r3, r3
 8014918:	461a      	mov	r2, r3
 801491a:	4b13      	ldr	r3, [pc, #76]	@ (8014968 <FATFS_LinkDriverEx+0x94>)
 801491c:	4413      	add	r3, r2
 801491e:	79fa      	ldrb	r2, [r7, #7]
 8014920:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014922:	4b11      	ldr	r3, [pc, #68]	@ (8014968 <FATFS_LinkDriverEx+0x94>)
 8014924:	7a5b      	ldrb	r3, [r3, #9]
 8014926:	b2db      	uxtb	r3, r3
 8014928:	1c5a      	adds	r2, r3, #1
 801492a:	b2d1      	uxtb	r1, r2
 801492c:	4a0e      	ldr	r2, [pc, #56]	@ (8014968 <FATFS_LinkDriverEx+0x94>)
 801492e:	7251      	strb	r1, [r2, #9]
 8014930:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014932:	7dbb      	ldrb	r3, [r7, #22]
 8014934:	3330      	adds	r3, #48	@ 0x30
 8014936:	b2da      	uxtb	r2, r3
 8014938:	68bb      	ldr	r3, [r7, #8]
 801493a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801493c:	68bb      	ldr	r3, [r7, #8]
 801493e:	3301      	adds	r3, #1
 8014940:	223a      	movs	r2, #58	@ 0x3a
 8014942:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014944:	68bb      	ldr	r3, [r7, #8]
 8014946:	3302      	adds	r3, #2
 8014948:	222f      	movs	r2, #47	@ 0x2f
 801494a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801494c:	68bb      	ldr	r3, [r7, #8]
 801494e:	3303      	adds	r3, #3
 8014950:	2200      	movs	r2, #0
 8014952:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014954:	2300      	movs	r3, #0
 8014956:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014958:	7dfb      	ldrb	r3, [r7, #23]
}
 801495a:	4618      	mov	r0, r3
 801495c:	371c      	adds	r7, #28
 801495e:	46bd      	mov	sp, r7
 8014960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014964:	4770      	bx	lr
 8014966:	bf00      	nop
 8014968:	20002acc 	.word	0x20002acc

0801496c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801496c:	b580      	push	{r7, lr}
 801496e:	b082      	sub	sp, #8
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
 8014974:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014976:	2200      	movs	r2, #0
 8014978:	6839      	ldr	r1, [r7, #0]
 801497a:	6878      	ldr	r0, [r7, #4]
 801497c:	f7ff ffaa 	bl	80148d4 <FATFS_LinkDriverEx>
 8014980:	4603      	mov	r3, r0
}
 8014982:	4618      	mov	r0, r3
 8014984:	3708      	adds	r7, #8
 8014986:	46bd      	mov	sp, r7
 8014988:	bd80      	pop	{r7, pc}

0801498a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801498a:	b480      	push	{r7}
 801498c:	b085      	sub	sp, #20
 801498e:	af00      	add	r7, sp, #0
 8014990:	4603      	mov	r3, r0
 8014992:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014994:	2300      	movs	r3, #0
 8014996:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014998:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801499c:	2b84      	cmp	r3, #132	@ 0x84
 801499e:	d005      	beq.n	80149ac <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80149a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	4413      	add	r3, r2
 80149a8:	3303      	adds	r3, #3
 80149aa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80149ac:	68fb      	ldr	r3, [r7, #12]
}
 80149ae:	4618      	mov	r0, r3
 80149b0:	3714      	adds	r7, #20
 80149b2:	46bd      	mov	sp, r7
 80149b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b8:	4770      	bx	lr

080149ba <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80149ba:	b480      	push	{r7}
 80149bc:	b083      	sub	sp, #12
 80149be:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80149c0:	f3ef 8305 	mrs	r3, IPSR
 80149c4:	607b      	str	r3, [r7, #4]
  return(result);
 80149c6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	bf14      	ite	ne
 80149cc:	2301      	movne	r3, #1
 80149ce:	2300      	moveq	r3, #0
 80149d0:	b2db      	uxtb	r3, r3
}
 80149d2:	4618      	mov	r0, r3
 80149d4:	370c      	adds	r7, #12
 80149d6:	46bd      	mov	sp, r7
 80149d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149dc:	4770      	bx	lr

080149de <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80149de:	b580      	push	{r7, lr}
 80149e0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80149e2:	f001 f9cd 	bl	8015d80 <vTaskStartScheduler>
  
  return osOK;
 80149e6:	2300      	movs	r3, #0
}
 80149e8:	4618      	mov	r0, r3
 80149ea:	bd80      	pop	{r7, pc}

080149ec <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80149ec:	b580      	push	{r7, lr}
 80149ee:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80149f0:	f001 fe2e 	bl	8016650 <xTaskGetSchedulerState>
 80149f4:	4603      	mov	r3, r0
 80149f6:	2b01      	cmp	r3, #1
 80149f8:	d101      	bne.n	80149fe <osKernelRunning+0x12>
    return 0;
 80149fa:	2300      	movs	r3, #0
 80149fc:	e000      	b.n	8014a00 <osKernelRunning+0x14>
  else
    return 1;
 80149fe:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8014a00:	4618      	mov	r0, r3
 8014a02:	bd80      	pop	{r7, pc}

08014a04 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8014a08:	f7ff ffd7 	bl	80149ba <inHandlerMode>
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d003      	beq.n	8014a1a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8014a12:	f001 fad9 	bl	8015fc8 <xTaskGetTickCountFromISR>
 8014a16:	4603      	mov	r3, r0
 8014a18:	e002      	b.n	8014a20 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8014a1a:	f001 fac5 	bl	8015fa8 <xTaskGetTickCount>
 8014a1e:	4603      	mov	r3, r0
  }
}
 8014a20:	4618      	mov	r0, r3
 8014a22:	bd80      	pop	{r7, pc}

08014a24 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a26:	b089      	sub	sp, #36	@ 0x24
 8014a28:	af04      	add	r7, sp, #16
 8014a2a:	6078      	str	r0, [r7, #4]
 8014a2c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	695b      	ldr	r3, [r3, #20]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d020      	beq.n	8014a78 <osThreadCreate+0x54>
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	699b      	ldr	r3, [r3, #24]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d01c      	beq.n	8014a78 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	685c      	ldr	r4, [r3, #4]
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	691e      	ldr	r6, [r3, #16]
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014a50:	4618      	mov	r0, r3
 8014a52:	f7ff ff9a 	bl	801498a <makeFreeRtosPriority>
 8014a56:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	695b      	ldr	r3, [r3, #20]
 8014a5c:	687a      	ldr	r2, [r7, #4]
 8014a5e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014a60:	9202      	str	r2, [sp, #8]
 8014a62:	9301      	str	r3, [sp, #4]
 8014a64:	9100      	str	r1, [sp, #0]
 8014a66:	683b      	ldr	r3, [r7, #0]
 8014a68:	4632      	mov	r2, r6
 8014a6a:	4629      	mov	r1, r5
 8014a6c:	4620      	mov	r0, r4
 8014a6e:	f000 ffa5 	bl	80159bc <xTaskCreateStatic>
 8014a72:	4603      	mov	r3, r0
 8014a74:	60fb      	str	r3, [r7, #12]
 8014a76:	e01c      	b.n	8014ab2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	685c      	ldr	r4, [r3, #4]
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014a84:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	f7ff ff7c 	bl	801498a <makeFreeRtosPriority>
 8014a92:	4602      	mov	r2, r0
 8014a94:	f107 030c 	add.w	r3, r7, #12
 8014a98:	9301      	str	r3, [sp, #4]
 8014a9a:	9200      	str	r2, [sp, #0]
 8014a9c:	683b      	ldr	r3, [r7, #0]
 8014a9e:	4632      	mov	r2, r6
 8014aa0:	4629      	mov	r1, r5
 8014aa2:	4620      	mov	r0, r4
 8014aa4:	f000 fff0 	bl	8015a88 <xTaskCreate>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	2b01      	cmp	r3, #1
 8014aac:	d001      	beq.n	8014ab2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8014aae:	2300      	movs	r3, #0
 8014ab0:	e000      	b.n	8014ab4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8014ab2:	68fb      	ldr	r3, [r7, #12]
}
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	3714      	adds	r7, #20
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014abc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b084      	sub	sp, #16
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d001      	beq.n	8014ad2 <osDelay+0x16>
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	e000      	b.n	8014ad4 <osDelay+0x18>
 8014ad2:	2301      	movs	r3, #1
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	f001 f91b 	bl	8015d10 <vTaskDelay>
  
  return osOK;
 8014ada:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014adc:	4618      	mov	r0, r3
 8014ade:	3710      	adds	r7, #16
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bd80      	pop	{r7, pc}

08014ae4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8014ae4:	b590      	push	{r4, r7, lr}
 8014ae6:	b085      	sub	sp, #20
 8014ae8:	af02      	add	r7, sp, #8
 8014aea:	6078      	str	r0, [r7, #4]
 8014aec:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	689b      	ldr	r3, [r3, #8]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d011      	beq.n	8014b1a <osMessageCreate+0x36>
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	68db      	ldr	r3, [r3, #12]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d00d      	beq.n	8014b1a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	6818      	ldr	r0, [r3, #0]
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	6859      	ldr	r1, [r3, #4]
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	689a      	ldr	r2, [r3, #8]
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	68db      	ldr	r3, [r3, #12]
 8014b0e:	2400      	movs	r4, #0
 8014b10:	9400      	str	r4, [sp, #0]
 8014b12:	f000 f9f9 	bl	8014f08 <xQueueGenericCreateStatic>
 8014b16:	4603      	mov	r3, r0
 8014b18:	e008      	b.n	8014b2c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	6818      	ldr	r0, [r3, #0]
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	685b      	ldr	r3, [r3, #4]
 8014b22:	2200      	movs	r2, #0
 8014b24:	4619      	mov	r1, r3
 8014b26:	f000 fa76 	bl	8015016 <xQueueGenericCreate>
 8014b2a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	370c      	adds	r7, #12
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bd90      	pop	{r4, r7, pc}

08014b34 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b086      	sub	sp, #24
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	60f8      	str	r0, [r7, #12]
 8014b3c:	60b9      	str	r1, [r7, #8]
 8014b3e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8014b40:	2300      	movs	r3, #0
 8014b42:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8014b48:	697b      	ldr	r3, [r7, #20]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d101      	bne.n	8014b52 <osMessagePut+0x1e>
    ticks = 1;
 8014b4e:	2301      	movs	r3, #1
 8014b50:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8014b52:	f7ff ff32 	bl	80149ba <inHandlerMode>
 8014b56:	4603      	mov	r3, r0
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d018      	beq.n	8014b8e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8014b5c:	f107 0210 	add.w	r2, r7, #16
 8014b60:	f107 0108 	add.w	r1, r7, #8
 8014b64:	2300      	movs	r3, #0
 8014b66:	68f8      	ldr	r0, [r7, #12]
 8014b68:	f000 fbc2 	bl	80152f0 <xQueueGenericSendFromISR>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	2b01      	cmp	r3, #1
 8014b70:	d001      	beq.n	8014b76 <osMessagePut+0x42>
      return osErrorOS;
 8014b72:	23ff      	movs	r3, #255	@ 0xff
 8014b74:	e018      	b.n	8014ba8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014b76:	693b      	ldr	r3, [r7, #16]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d014      	beq.n	8014ba6 <osMessagePut+0x72>
 8014b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8014bb0 <osMessagePut+0x7c>)
 8014b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014b82:	601a      	str	r2, [r3, #0]
 8014b84:	f3bf 8f4f 	dsb	sy
 8014b88:	f3bf 8f6f 	isb	sy
 8014b8c:	e00b      	b.n	8014ba6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8014b8e:	f107 0108 	add.w	r1, r7, #8
 8014b92:	2300      	movs	r3, #0
 8014b94:	697a      	ldr	r2, [r7, #20]
 8014b96:	68f8      	ldr	r0, [r7, #12]
 8014b98:	f000 faa0 	bl	80150dc <xQueueGenericSend>
 8014b9c:	4603      	mov	r3, r0
 8014b9e:	2b01      	cmp	r3, #1
 8014ba0:	d001      	beq.n	8014ba6 <osMessagePut+0x72>
      return osErrorOS;
 8014ba2:	23ff      	movs	r3, #255	@ 0xff
 8014ba4:	e000      	b.n	8014ba8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8014ba6:	2300      	movs	r3, #0
}
 8014ba8:	4618      	mov	r0, r3
 8014baa:	3718      	adds	r7, #24
 8014bac:	46bd      	mov	sp, r7
 8014bae:	bd80      	pop	{r7, pc}
 8014bb0:	e000ed04 	.word	0xe000ed04

08014bb4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8014bb4:	b590      	push	{r4, r7, lr}
 8014bb6:	b08b      	sub	sp, #44	@ 0x2c
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	60f8      	str	r0, [r7, #12]
 8014bbc:	60b9      	str	r1, [r7, #8]
 8014bbe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8014bc0:	68bb      	ldr	r3, [r7, #8]
 8014bc2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8014bc8:	68bb      	ldr	r3, [r7, #8]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d10a      	bne.n	8014be4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8014bce:	2380      	movs	r3, #128	@ 0x80
 8014bd0:	617b      	str	r3, [r7, #20]
    return event;
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	461c      	mov	r4, r3
 8014bd6:	f107 0314 	add.w	r3, r7, #20
 8014bda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014bde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014be2:	e054      	b.n	8014c8e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8014be4:	2300      	movs	r3, #0
 8014be6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8014be8:	2300      	movs	r3, #0
 8014bea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bf2:	d103      	bne.n	8014bfc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8014bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8014bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8014bfa:	e009      	b.n	8014c10 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d006      	beq.n	8014c10 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8014c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d101      	bne.n	8014c10 <osMessageGet+0x5c>
      ticks = 1;
 8014c0c:	2301      	movs	r3, #1
 8014c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8014c10:	f7ff fed3 	bl	80149ba <inHandlerMode>
 8014c14:	4603      	mov	r3, r0
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d01c      	beq.n	8014c54 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8014c1a:	f107 0220 	add.w	r2, r7, #32
 8014c1e:	f107 0314 	add.w	r3, r7, #20
 8014c22:	3304      	adds	r3, #4
 8014c24:	4619      	mov	r1, r3
 8014c26:	68b8      	ldr	r0, [r7, #8]
 8014c28:	f000 fcee 	bl	8015608 <xQueueReceiveFromISR>
 8014c2c:	4603      	mov	r3, r0
 8014c2e:	2b01      	cmp	r3, #1
 8014c30:	d102      	bne.n	8014c38 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8014c32:	2310      	movs	r3, #16
 8014c34:	617b      	str	r3, [r7, #20]
 8014c36:	e001      	b.n	8014c3c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8014c38:	2300      	movs	r3, #0
 8014c3a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014c3c:	6a3b      	ldr	r3, [r7, #32]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d01d      	beq.n	8014c7e <osMessageGet+0xca>
 8014c42:	4b15      	ldr	r3, [pc, #84]	@ (8014c98 <osMessageGet+0xe4>)
 8014c44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014c48:	601a      	str	r2, [r3, #0]
 8014c4a:	f3bf 8f4f 	dsb	sy
 8014c4e:	f3bf 8f6f 	isb	sy
 8014c52:	e014      	b.n	8014c7e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8014c54:	f107 0314 	add.w	r3, r7, #20
 8014c58:	3304      	adds	r3, #4
 8014c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014c5c:	4619      	mov	r1, r3
 8014c5e:	68b8      	ldr	r0, [r7, #8]
 8014c60:	f000 fbea 	bl	8015438 <xQueueReceive>
 8014c64:	4603      	mov	r3, r0
 8014c66:	2b01      	cmp	r3, #1
 8014c68:	d102      	bne.n	8014c70 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8014c6a:	2310      	movs	r3, #16
 8014c6c:	617b      	str	r3, [r7, #20]
 8014c6e:	e006      	b.n	8014c7e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8014c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d101      	bne.n	8014c7a <osMessageGet+0xc6>
 8014c76:	2300      	movs	r3, #0
 8014c78:	e000      	b.n	8014c7c <osMessageGet+0xc8>
 8014c7a:	2340      	movs	r3, #64	@ 0x40
 8014c7c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	461c      	mov	r4, r3
 8014c82:	f107 0314 	add.w	r3, r7, #20
 8014c86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014c8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8014c8e:	68f8      	ldr	r0, [r7, #12]
 8014c90:	372c      	adds	r7, #44	@ 0x2c
 8014c92:	46bd      	mov	sp, r7
 8014c94:	bd90      	pop	{r4, r7, pc}
 8014c96:	bf00      	nop
 8014c98:	e000ed04 	.word	0xe000ed04

08014c9c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8014c9c:	b580      	push	{r7, lr}
 8014c9e:	b082      	sub	sp, #8
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8014ca4:	f7ff fe89 	bl	80149ba <inHandlerMode>
 8014ca8:	4603      	mov	r3, r0
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d004      	beq.n	8014cb8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8014cae:	6878      	ldr	r0, [r7, #4]
 8014cb0:	f000 fd53 	bl	801575a <uxQueueMessagesWaitingFromISR>
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	e003      	b.n	8014cc0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8014cb8:	6878      	ldr	r0, [r7, #4]
 8014cba:	f000 fd2d 	bl	8015718 <uxQueueMessagesWaiting>
 8014cbe:	4603      	mov	r3, r0
  }
}
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	3708      	adds	r7, #8
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bd80      	pop	{r7, pc}

08014cc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014cc8:	b480      	push	{r7}
 8014cca:	b083      	sub	sp, #12
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	f103 0208 	add.w	r2, r3, #8
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8014ce0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	f103 0208 	add.w	r2, r3, #8
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	f103 0208 	add.w	r2, r3, #8
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014cfc:	bf00      	nop
 8014cfe:	370c      	adds	r7, #12
 8014d00:	46bd      	mov	sp, r7
 8014d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d06:	4770      	bx	lr

08014d08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014d08:	b480      	push	{r7}
 8014d0a:	b083      	sub	sp, #12
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	2200      	movs	r2, #0
 8014d14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014d16:	bf00      	nop
 8014d18:	370c      	adds	r7, #12
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d20:	4770      	bx	lr

08014d22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014d22:	b480      	push	{r7}
 8014d24:	b085      	sub	sp, #20
 8014d26:	af00      	add	r7, sp, #0
 8014d28:	6078      	str	r0, [r7, #4]
 8014d2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	685b      	ldr	r3, [r3, #4]
 8014d30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014d32:	683b      	ldr	r3, [r7, #0]
 8014d34:	68fa      	ldr	r2, [r7, #12]
 8014d36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	689a      	ldr	r2, [r3, #8]
 8014d3c:	683b      	ldr	r3, [r7, #0]
 8014d3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	689b      	ldr	r3, [r3, #8]
 8014d44:	683a      	ldr	r2, [r7, #0]
 8014d46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	683a      	ldr	r2, [r7, #0]
 8014d4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014d4e:	683b      	ldr	r3, [r7, #0]
 8014d50:	687a      	ldr	r2, [r7, #4]
 8014d52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	1c5a      	adds	r2, r3, #1
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	601a      	str	r2, [r3, #0]
}
 8014d5e:	bf00      	nop
 8014d60:	3714      	adds	r7, #20
 8014d62:	46bd      	mov	sp, r7
 8014d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d68:	4770      	bx	lr

08014d6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014d6a:	b480      	push	{r7}
 8014d6c:	b085      	sub	sp, #20
 8014d6e:	af00      	add	r7, sp, #0
 8014d70:	6078      	str	r0, [r7, #4]
 8014d72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014d74:	683b      	ldr	r3, [r7, #0]
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014d7a:	68bb      	ldr	r3, [r7, #8]
 8014d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d80:	d103      	bne.n	8014d8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	691b      	ldr	r3, [r3, #16]
 8014d86:	60fb      	str	r3, [r7, #12]
 8014d88:	e00c      	b.n	8014da4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	3308      	adds	r3, #8
 8014d8e:	60fb      	str	r3, [r7, #12]
 8014d90:	e002      	b.n	8014d98 <vListInsert+0x2e>
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	685b      	ldr	r3, [r3, #4]
 8014d96:	60fb      	str	r3, [r7, #12]
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	685b      	ldr	r3, [r3, #4]
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	68ba      	ldr	r2, [r7, #8]
 8014da0:	429a      	cmp	r2, r3
 8014da2:	d2f6      	bcs.n	8014d92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	685a      	ldr	r2, [r3, #4]
 8014da8:	683b      	ldr	r3, [r7, #0]
 8014daa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014dac:	683b      	ldr	r3, [r7, #0]
 8014dae:	685b      	ldr	r3, [r3, #4]
 8014db0:	683a      	ldr	r2, [r7, #0]
 8014db2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014db4:	683b      	ldr	r3, [r7, #0]
 8014db6:	68fa      	ldr	r2, [r7, #12]
 8014db8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	683a      	ldr	r2, [r7, #0]
 8014dbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014dc0:	683b      	ldr	r3, [r7, #0]
 8014dc2:	687a      	ldr	r2, [r7, #4]
 8014dc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	1c5a      	adds	r2, r3, #1
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	601a      	str	r2, [r3, #0]
}
 8014dd0:	bf00      	nop
 8014dd2:	3714      	adds	r7, #20
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dda:	4770      	bx	lr

08014ddc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014ddc:	b480      	push	{r7}
 8014dde:	b085      	sub	sp, #20
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	691b      	ldr	r3, [r3, #16]
 8014de8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	685b      	ldr	r3, [r3, #4]
 8014dee:	687a      	ldr	r2, [r7, #4]
 8014df0:	6892      	ldr	r2, [r2, #8]
 8014df2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	689b      	ldr	r3, [r3, #8]
 8014df8:	687a      	ldr	r2, [r7, #4]
 8014dfa:	6852      	ldr	r2, [r2, #4]
 8014dfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	685b      	ldr	r3, [r3, #4]
 8014e02:	687a      	ldr	r2, [r7, #4]
 8014e04:	429a      	cmp	r2, r3
 8014e06:	d103      	bne.n	8014e10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	689a      	ldr	r2, [r3, #8]
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	2200      	movs	r2, #0
 8014e14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	1e5a      	subs	r2, r3, #1
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	681b      	ldr	r3, [r3, #0]
}
 8014e24:	4618      	mov	r0, r3
 8014e26:	3714      	adds	r7, #20
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e2e:	4770      	bx	lr

08014e30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014e30:	b580      	push	{r7, lr}
 8014e32:	b084      	sub	sp, #16
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
 8014e38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d10d      	bne.n	8014e60 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e48:	b672      	cpsid	i
 8014e4a:	f383 8811 	msr	BASEPRI, r3
 8014e4e:	f3bf 8f6f 	isb	sy
 8014e52:	f3bf 8f4f 	dsb	sy
 8014e56:	b662      	cpsie	i
 8014e58:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014e5a:	bf00      	nop
 8014e5c:	bf00      	nop
 8014e5e:	e7fd      	b.n	8014e5c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8014e60:	f001 fe14 	bl	8016a8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	681a      	ldr	r2, [r3, #0]
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014e6c:	68f9      	ldr	r1, [r7, #12]
 8014e6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8014e70:	fb01 f303 	mul.w	r3, r1, r3
 8014e74:	441a      	add	r2, r3
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	681a      	ldr	r2, [r3, #0]
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	681a      	ldr	r2, [r3, #0]
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014e90:	3b01      	subs	r3, #1
 8014e92:	68f9      	ldr	r1, [r7, #12]
 8014e94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8014e96:	fb01 f303 	mul.w	r3, r1, r3
 8014e9a:	441a      	add	r2, r3
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	22ff      	movs	r2, #255	@ 0xff
 8014ea4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	22ff      	movs	r2, #255	@ 0xff
 8014eac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8014eb0:	683b      	ldr	r3, [r7, #0]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d114      	bne.n	8014ee0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	691b      	ldr	r3, [r3, #16]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d01a      	beq.n	8014ef4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	3310      	adds	r3, #16
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	f001 f9fa 	bl	80162bc <xTaskRemoveFromEventList>
 8014ec8:	4603      	mov	r3, r0
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d012      	beq.n	8014ef4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014ece:	4b0d      	ldr	r3, [pc, #52]	@ (8014f04 <xQueueGenericReset+0xd4>)
 8014ed0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014ed4:	601a      	str	r2, [r3, #0]
 8014ed6:	f3bf 8f4f 	dsb	sy
 8014eda:	f3bf 8f6f 	isb	sy
 8014ede:	e009      	b.n	8014ef4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	3310      	adds	r3, #16
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	f7ff feef 	bl	8014cc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	3324      	adds	r3, #36	@ 0x24
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f7ff feea 	bl	8014cc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014ef4:	f001 fe00 	bl	8016af8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014ef8:	2301      	movs	r3, #1
}
 8014efa:	4618      	mov	r0, r3
 8014efc:	3710      	adds	r7, #16
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}
 8014f02:	bf00      	nop
 8014f04:	e000ed04 	.word	0xe000ed04

08014f08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b08e      	sub	sp, #56	@ 0x38
 8014f0c:	af02      	add	r7, sp, #8
 8014f0e:	60f8      	str	r0, [r7, #12]
 8014f10:	60b9      	str	r1, [r7, #8]
 8014f12:	607a      	str	r2, [r7, #4]
 8014f14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d10d      	bne.n	8014f38 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8014f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f20:	b672      	cpsid	i
 8014f22:	f383 8811 	msr	BASEPRI, r3
 8014f26:	f3bf 8f6f 	isb	sy
 8014f2a:	f3bf 8f4f 	dsb	sy
 8014f2e:	b662      	cpsie	i
 8014f30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014f32:	bf00      	nop
 8014f34:	bf00      	nop
 8014f36:	e7fd      	b.n	8014f34 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014f38:	683b      	ldr	r3, [r7, #0]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d10d      	bne.n	8014f5a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8014f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f42:	b672      	cpsid	i
 8014f44:	f383 8811 	msr	BASEPRI, r3
 8014f48:	f3bf 8f6f 	isb	sy
 8014f4c:	f3bf 8f4f 	dsb	sy
 8014f50:	b662      	cpsie	i
 8014f52:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014f54:	bf00      	nop
 8014f56:	bf00      	nop
 8014f58:	e7fd      	b.n	8014f56 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d002      	beq.n	8014f66 <xQueueGenericCreateStatic+0x5e>
 8014f60:	68bb      	ldr	r3, [r7, #8]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d001      	beq.n	8014f6a <xQueueGenericCreateStatic+0x62>
 8014f66:	2301      	movs	r3, #1
 8014f68:	e000      	b.n	8014f6c <xQueueGenericCreateStatic+0x64>
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d10d      	bne.n	8014f8c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8014f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f74:	b672      	cpsid	i
 8014f76:	f383 8811 	msr	BASEPRI, r3
 8014f7a:	f3bf 8f6f 	isb	sy
 8014f7e:	f3bf 8f4f 	dsb	sy
 8014f82:	b662      	cpsie	i
 8014f84:	623b      	str	r3, [r7, #32]
}
 8014f86:	bf00      	nop
 8014f88:	bf00      	nop
 8014f8a:	e7fd      	b.n	8014f88 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d102      	bne.n	8014f98 <xQueueGenericCreateStatic+0x90>
 8014f92:	68bb      	ldr	r3, [r7, #8]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d101      	bne.n	8014f9c <xQueueGenericCreateStatic+0x94>
 8014f98:	2301      	movs	r3, #1
 8014f9a:	e000      	b.n	8014f9e <xQueueGenericCreateStatic+0x96>
 8014f9c:	2300      	movs	r3, #0
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d10d      	bne.n	8014fbe <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8014fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fa6:	b672      	cpsid	i
 8014fa8:	f383 8811 	msr	BASEPRI, r3
 8014fac:	f3bf 8f6f 	isb	sy
 8014fb0:	f3bf 8f4f 	dsb	sy
 8014fb4:	b662      	cpsie	i
 8014fb6:	61fb      	str	r3, [r7, #28]
}
 8014fb8:	bf00      	nop
 8014fba:	bf00      	nop
 8014fbc:	e7fd      	b.n	8014fba <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014fbe:	2348      	movs	r3, #72	@ 0x48
 8014fc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014fc2:	697b      	ldr	r3, [r7, #20]
 8014fc4:	2b48      	cmp	r3, #72	@ 0x48
 8014fc6:	d00d      	beq.n	8014fe4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8014fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fcc:	b672      	cpsid	i
 8014fce:	f383 8811 	msr	BASEPRI, r3
 8014fd2:	f3bf 8f6f 	isb	sy
 8014fd6:	f3bf 8f4f 	dsb	sy
 8014fda:	b662      	cpsie	i
 8014fdc:	61bb      	str	r3, [r7, #24]
}
 8014fde:	bf00      	nop
 8014fe0:	bf00      	nop
 8014fe2:	e7fd      	b.n	8014fe0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014fe4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014fe6:	683b      	ldr	r3, [r7, #0]
 8014fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8014fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d00d      	beq.n	801500c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ff2:	2201      	movs	r2, #1
 8014ff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014ff8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8014ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ffe:	9300      	str	r3, [sp, #0]
 8015000:	4613      	mov	r3, r2
 8015002:	687a      	ldr	r2, [r7, #4]
 8015004:	68b9      	ldr	r1, [r7, #8]
 8015006:	68f8      	ldr	r0, [r7, #12]
 8015008:	f000 f848 	bl	801509c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801500c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801500e:	4618      	mov	r0, r3
 8015010:	3730      	adds	r7, #48	@ 0x30
 8015012:	46bd      	mov	sp, r7
 8015014:	bd80      	pop	{r7, pc}

08015016 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015016:	b580      	push	{r7, lr}
 8015018:	b08a      	sub	sp, #40	@ 0x28
 801501a:	af02      	add	r7, sp, #8
 801501c:	60f8      	str	r0, [r7, #12]
 801501e:	60b9      	str	r1, [r7, #8]
 8015020:	4613      	mov	r3, r2
 8015022:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d10d      	bne.n	8015046 <xQueueGenericCreate+0x30>
	__asm volatile
 801502a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801502e:	b672      	cpsid	i
 8015030:	f383 8811 	msr	BASEPRI, r3
 8015034:	f3bf 8f6f 	isb	sy
 8015038:	f3bf 8f4f 	dsb	sy
 801503c:	b662      	cpsie	i
 801503e:	613b      	str	r3, [r7, #16]
}
 8015040:	bf00      	nop
 8015042:	bf00      	nop
 8015044:	e7fd      	b.n	8015042 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8015046:	68bb      	ldr	r3, [r7, #8]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d102      	bne.n	8015052 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801504c:	2300      	movs	r3, #0
 801504e:	61fb      	str	r3, [r7, #28]
 8015050:	e004      	b.n	801505c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	68ba      	ldr	r2, [r7, #8]
 8015056:	fb02 f303 	mul.w	r3, r2, r3
 801505a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801505c:	69fb      	ldr	r3, [r7, #28]
 801505e:	3348      	adds	r3, #72	@ 0x48
 8015060:	4618      	mov	r0, r3
 8015062:	f001 fe41 	bl	8016ce8 <pvPortMalloc>
 8015066:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015068:	69bb      	ldr	r3, [r7, #24]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d011      	beq.n	8015092 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801506e:	69bb      	ldr	r3, [r7, #24]
 8015070:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015072:	697b      	ldr	r3, [r7, #20]
 8015074:	3348      	adds	r3, #72	@ 0x48
 8015076:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015078:	69bb      	ldr	r3, [r7, #24]
 801507a:	2200      	movs	r2, #0
 801507c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015080:	79fa      	ldrb	r2, [r7, #7]
 8015082:	69bb      	ldr	r3, [r7, #24]
 8015084:	9300      	str	r3, [sp, #0]
 8015086:	4613      	mov	r3, r2
 8015088:	697a      	ldr	r2, [r7, #20]
 801508a:	68b9      	ldr	r1, [r7, #8]
 801508c:	68f8      	ldr	r0, [r7, #12]
 801508e:	f000 f805 	bl	801509c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015092:	69bb      	ldr	r3, [r7, #24]
	}
 8015094:	4618      	mov	r0, r3
 8015096:	3720      	adds	r7, #32
 8015098:	46bd      	mov	sp, r7
 801509a:	bd80      	pop	{r7, pc}

0801509c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801509c:	b580      	push	{r7, lr}
 801509e:	b084      	sub	sp, #16
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	60f8      	str	r0, [r7, #12]
 80150a4:	60b9      	str	r1, [r7, #8]
 80150a6:	607a      	str	r2, [r7, #4]
 80150a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80150aa:	68bb      	ldr	r3, [r7, #8]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d103      	bne.n	80150b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80150b0:	69bb      	ldr	r3, [r7, #24]
 80150b2:	69ba      	ldr	r2, [r7, #24]
 80150b4:	601a      	str	r2, [r3, #0]
 80150b6:	e002      	b.n	80150be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80150b8:	69bb      	ldr	r3, [r7, #24]
 80150ba:	687a      	ldr	r2, [r7, #4]
 80150bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80150be:	69bb      	ldr	r3, [r7, #24]
 80150c0:	68fa      	ldr	r2, [r7, #12]
 80150c2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80150c4:	69bb      	ldr	r3, [r7, #24]
 80150c6:	68ba      	ldr	r2, [r7, #8]
 80150c8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80150ca:	2101      	movs	r1, #1
 80150cc:	69b8      	ldr	r0, [r7, #24]
 80150ce:	f7ff feaf 	bl	8014e30 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80150d2:	bf00      	nop
 80150d4:	3710      	adds	r7, #16
 80150d6:	46bd      	mov	sp, r7
 80150d8:	bd80      	pop	{r7, pc}
	...

080150dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b08e      	sub	sp, #56	@ 0x38
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	60f8      	str	r0, [r7, #12]
 80150e4:	60b9      	str	r1, [r7, #8]
 80150e6:	607a      	str	r2, [r7, #4]
 80150e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80150ea:	2300      	movs	r3, #0
 80150ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80150f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d10d      	bne.n	8015114 <xQueueGenericSend+0x38>
	__asm volatile
 80150f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150fc:	b672      	cpsid	i
 80150fe:	f383 8811 	msr	BASEPRI, r3
 8015102:	f3bf 8f6f 	isb	sy
 8015106:	f3bf 8f4f 	dsb	sy
 801510a:	b662      	cpsie	i
 801510c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801510e:	bf00      	nop
 8015110:	bf00      	nop
 8015112:	e7fd      	b.n	8015110 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015114:	68bb      	ldr	r3, [r7, #8]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d103      	bne.n	8015122 <xQueueGenericSend+0x46>
 801511a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801511c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801511e:	2b00      	cmp	r3, #0
 8015120:	d101      	bne.n	8015126 <xQueueGenericSend+0x4a>
 8015122:	2301      	movs	r3, #1
 8015124:	e000      	b.n	8015128 <xQueueGenericSend+0x4c>
 8015126:	2300      	movs	r3, #0
 8015128:	2b00      	cmp	r3, #0
 801512a:	d10d      	bne.n	8015148 <xQueueGenericSend+0x6c>
	__asm volatile
 801512c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015130:	b672      	cpsid	i
 8015132:	f383 8811 	msr	BASEPRI, r3
 8015136:	f3bf 8f6f 	isb	sy
 801513a:	f3bf 8f4f 	dsb	sy
 801513e:	b662      	cpsie	i
 8015140:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015142:	bf00      	nop
 8015144:	bf00      	nop
 8015146:	e7fd      	b.n	8015144 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015148:	683b      	ldr	r3, [r7, #0]
 801514a:	2b02      	cmp	r3, #2
 801514c:	d103      	bne.n	8015156 <xQueueGenericSend+0x7a>
 801514e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015152:	2b01      	cmp	r3, #1
 8015154:	d101      	bne.n	801515a <xQueueGenericSend+0x7e>
 8015156:	2301      	movs	r3, #1
 8015158:	e000      	b.n	801515c <xQueueGenericSend+0x80>
 801515a:	2300      	movs	r3, #0
 801515c:	2b00      	cmp	r3, #0
 801515e:	d10d      	bne.n	801517c <xQueueGenericSend+0xa0>
	__asm volatile
 8015160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015164:	b672      	cpsid	i
 8015166:	f383 8811 	msr	BASEPRI, r3
 801516a:	f3bf 8f6f 	isb	sy
 801516e:	f3bf 8f4f 	dsb	sy
 8015172:	b662      	cpsie	i
 8015174:	623b      	str	r3, [r7, #32]
}
 8015176:	bf00      	nop
 8015178:	bf00      	nop
 801517a:	e7fd      	b.n	8015178 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801517c:	f001 fa68 	bl	8016650 <xTaskGetSchedulerState>
 8015180:	4603      	mov	r3, r0
 8015182:	2b00      	cmp	r3, #0
 8015184:	d102      	bne.n	801518c <xQueueGenericSend+0xb0>
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d101      	bne.n	8015190 <xQueueGenericSend+0xb4>
 801518c:	2301      	movs	r3, #1
 801518e:	e000      	b.n	8015192 <xQueueGenericSend+0xb6>
 8015190:	2300      	movs	r3, #0
 8015192:	2b00      	cmp	r3, #0
 8015194:	d10d      	bne.n	80151b2 <xQueueGenericSend+0xd6>
	__asm volatile
 8015196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801519a:	b672      	cpsid	i
 801519c:	f383 8811 	msr	BASEPRI, r3
 80151a0:	f3bf 8f6f 	isb	sy
 80151a4:	f3bf 8f4f 	dsb	sy
 80151a8:	b662      	cpsie	i
 80151aa:	61fb      	str	r3, [r7, #28]
}
 80151ac:	bf00      	nop
 80151ae:	bf00      	nop
 80151b0:	e7fd      	b.n	80151ae <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80151b2:	f001 fc6b 	bl	8016a8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80151b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80151ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80151be:	429a      	cmp	r2, r3
 80151c0:	d302      	bcc.n	80151c8 <xQueueGenericSend+0xec>
 80151c2:	683b      	ldr	r3, [r7, #0]
 80151c4:	2b02      	cmp	r3, #2
 80151c6:	d129      	bne.n	801521c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80151c8:	683a      	ldr	r2, [r7, #0]
 80151ca:	68b9      	ldr	r1, [r7, #8]
 80151cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80151ce:	f000 fae5 	bl	801579c <prvCopyDataToQueue>
 80151d2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80151d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d010      	beq.n	80151fe <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80151dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151de:	3324      	adds	r3, #36	@ 0x24
 80151e0:	4618      	mov	r0, r3
 80151e2:	f001 f86b 	bl	80162bc <xTaskRemoveFromEventList>
 80151e6:	4603      	mov	r3, r0
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d013      	beq.n	8015214 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80151ec:	4b3f      	ldr	r3, [pc, #252]	@ (80152ec <xQueueGenericSend+0x210>)
 80151ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80151f2:	601a      	str	r2, [r3, #0]
 80151f4:	f3bf 8f4f 	dsb	sy
 80151f8:	f3bf 8f6f 	isb	sy
 80151fc:	e00a      	b.n	8015214 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80151fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015200:	2b00      	cmp	r3, #0
 8015202:	d007      	beq.n	8015214 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015204:	4b39      	ldr	r3, [pc, #228]	@ (80152ec <xQueueGenericSend+0x210>)
 8015206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801520a:	601a      	str	r2, [r3, #0]
 801520c:	f3bf 8f4f 	dsb	sy
 8015210:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015214:	f001 fc70 	bl	8016af8 <vPortExitCritical>
				return pdPASS;
 8015218:	2301      	movs	r3, #1
 801521a:	e063      	b.n	80152e4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d103      	bne.n	801522a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015222:	f001 fc69 	bl	8016af8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015226:	2300      	movs	r3, #0
 8015228:	e05c      	b.n	80152e4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 801522a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801522c:	2b00      	cmp	r3, #0
 801522e:	d106      	bne.n	801523e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015230:	f107 0314 	add.w	r3, r7, #20
 8015234:	4618      	mov	r0, r3
 8015236:	f001 f8a7 	bl	8016388 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801523a:	2301      	movs	r3, #1
 801523c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801523e:	f001 fc5b 	bl	8016af8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015242:	f000 fe03 	bl	8015e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015246:	f001 fc21 	bl	8016a8c <vPortEnterCritical>
 801524a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801524c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015250:	b25b      	sxtb	r3, r3
 8015252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015256:	d103      	bne.n	8015260 <xQueueGenericSend+0x184>
 8015258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801525a:	2200      	movs	r2, #0
 801525c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015262:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015266:	b25b      	sxtb	r3, r3
 8015268:	f1b3 3fff 	cmp.w	r3, #4294967295
 801526c:	d103      	bne.n	8015276 <xQueueGenericSend+0x19a>
 801526e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015270:	2200      	movs	r2, #0
 8015272:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015276:	f001 fc3f 	bl	8016af8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801527a:	1d3a      	adds	r2, r7, #4
 801527c:	f107 0314 	add.w	r3, r7, #20
 8015280:	4611      	mov	r1, r2
 8015282:	4618      	mov	r0, r3
 8015284:	f001 f896 	bl	80163b4 <xTaskCheckForTimeOut>
 8015288:	4603      	mov	r3, r0
 801528a:	2b00      	cmp	r3, #0
 801528c:	d124      	bne.n	80152d8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801528e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015290:	f000 fb7c 	bl	801598c <prvIsQueueFull>
 8015294:	4603      	mov	r3, r0
 8015296:	2b00      	cmp	r3, #0
 8015298:	d018      	beq.n	80152cc <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801529a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801529c:	3310      	adds	r3, #16
 801529e:	687a      	ldr	r2, [r7, #4]
 80152a0:	4611      	mov	r1, r2
 80152a2:	4618      	mov	r0, r3
 80152a4:	f000 ffe2 	bl	801626c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80152a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80152aa:	f000 fb07 	bl	80158bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80152ae:	f000 fddb 	bl	8015e68 <xTaskResumeAll>
 80152b2:	4603      	mov	r3, r0
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	f47f af7c 	bne.w	80151b2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80152ba:	4b0c      	ldr	r3, [pc, #48]	@ (80152ec <xQueueGenericSend+0x210>)
 80152bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80152c0:	601a      	str	r2, [r3, #0]
 80152c2:	f3bf 8f4f 	dsb	sy
 80152c6:	f3bf 8f6f 	isb	sy
 80152ca:	e772      	b.n	80151b2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80152cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80152ce:	f000 faf5 	bl	80158bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80152d2:	f000 fdc9 	bl	8015e68 <xTaskResumeAll>
 80152d6:	e76c      	b.n	80151b2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80152d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80152da:	f000 faef 	bl	80158bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80152de:	f000 fdc3 	bl	8015e68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80152e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80152e4:	4618      	mov	r0, r3
 80152e6:	3738      	adds	r7, #56	@ 0x38
 80152e8:	46bd      	mov	sp, r7
 80152ea:	bd80      	pop	{r7, pc}
 80152ec:	e000ed04 	.word	0xe000ed04

080152f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80152f0:	b580      	push	{r7, lr}
 80152f2:	b08e      	sub	sp, #56	@ 0x38
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	60f8      	str	r0, [r7, #12]
 80152f8:	60b9      	str	r1, [r7, #8]
 80152fa:	607a      	str	r2, [r7, #4]
 80152fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015304:	2b00      	cmp	r3, #0
 8015306:	d10d      	bne.n	8015324 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8015308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801530c:	b672      	cpsid	i
 801530e:	f383 8811 	msr	BASEPRI, r3
 8015312:	f3bf 8f6f 	isb	sy
 8015316:	f3bf 8f4f 	dsb	sy
 801531a:	b662      	cpsie	i
 801531c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801531e:	bf00      	nop
 8015320:	bf00      	nop
 8015322:	e7fd      	b.n	8015320 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015324:	68bb      	ldr	r3, [r7, #8]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d103      	bne.n	8015332 <xQueueGenericSendFromISR+0x42>
 801532a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801532c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801532e:	2b00      	cmp	r3, #0
 8015330:	d101      	bne.n	8015336 <xQueueGenericSendFromISR+0x46>
 8015332:	2301      	movs	r3, #1
 8015334:	e000      	b.n	8015338 <xQueueGenericSendFromISR+0x48>
 8015336:	2300      	movs	r3, #0
 8015338:	2b00      	cmp	r3, #0
 801533a:	d10d      	bne.n	8015358 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 801533c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015340:	b672      	cpsid	i
 8015342:	f383 8811 	msr	BASEPRI, r3
 8015346:	f3bf 8f6f 	isb	sy
 801534a:	f3bf 8f4f 	dsb	sy
 801534e:	b662      	cpsie	i
 8015350:	623b      	str	r3, [r7, #32]
}
 8015352:	bf00      	nop
 8015354:	bf00      	nop
 8015356:	e7fd      	b.n	8015354 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015358:	683b      	ldr	r3, [r7, #0]
 801535a:	2b02      	cmp	r3, #2
 801535c:	d103      	bne.n	8015366 <xQueueGenericSendFromISR+0x76>
 801535e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015362:	2b01      	cmp	r3, #1
 8015364:	d101      	bne.n	801536a <xQueueGenericSendFromISR+0x7a>
 8015366:	2301      	movs	r3, #1
 8015368:	e000      	b.n	801536c <xQueueGenericSendFromISR+0x7c>
 801536a:	2300      	movs	r3, #0
 801536c:	2b00      	cmp	r3, #0
 801536e:	d10d      	bne.n	801538c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8015370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015374:	b672      	cpsid	i
 8015376:	f383 8811 	msr	BASEPRI, r3
 801537a:	f3bf 8f6f 	isb	sy
 801537e:	f3bf 8f4f 	dsb	sy
 8015382:	b662      	cpsie	i
 8015384:	61fb      	str	r3, [r7, #28]
}
 8015386:	bf00      	nop
 8015388:	bf00      	nop
 801538a:	e7fd      	b.n	8015388 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801538c:	f001 fc66 	bl	8016c5c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015390:	f3ef 8211 	mrs	r2, BASEPRI
 8015394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015398:	b672      	cpsid	i
 801539a:	f383 8811 	msr	BASEPRI, r3
 801539e:	f3bf 8f6f 	isb	sy
 80153a2:	f3bf 8f4f 	dsb	sy
 80153a6:	b662      	cpsie	i
 80153a8:	61ba      	str	r2, [r7, #24]
 80153aa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80153ac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80153ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80153b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80153b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80153b8:	429a      	cmp	r2, r3
 80153ba:	d302      	bcc.n	80153c2 <xQueueGenericSendFromISR+0xd2>
 80153bc:	683b      	ldr	r3, [r7, #0]
 80153be:	2b02      	cmp	r3, #2
 80153c0:	d12c      	bne.n	801541c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80153c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80153c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80153cc:	683a      	ldr	r2, [r7, #0]
 80153ce:	68b9      	ldr	r1, [r7, #8]
 80153d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80153d2:	f000 f9e3 	bl	801579c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80153d6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80153da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153de:	d112      	bne.n	8015406 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80153e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d016      	beq.n	8015416 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80153e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153ea:	3324      	adds	r3, #36	@ 0x24
 80153ec:	4618      	mov	r0, r3
 80153ee:	f000 ff65 	bl	80162bc <xTaskRemoveFromEventList>
 80153f2:	4603      	mov	r3, r0
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d00e      	beq.n	8015416 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d00b      	beq.n	8015416 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	2201      	movs	r2, #1
 8015402:	601a      	str	r2, [r3, #0]
 8015404:	e007      	b.n	8015416 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015406:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801540a:	3301      	adds	r3, #1
 801540c:	b2db      	uxtb	r3, r3
 801540e:	b25a      	sxtb	r2, r3
 8015410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015412:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8015416:	2301      	movs	r3, #1
 8015418:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 801541a:	e001      	b.n	8015420 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801541c:	2300      	movs	r3, #0
 801541e:	637b      	str	r3, [r7, #52]	@ 0x34
 8015420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015422:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015424:	693b      	ldr	r3, [r7, #16]
 8015426:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801542a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801542c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801542e:	4618      	mov	r0, r3
 8015430:	3738      	adds	r7, #56	@ 0x38
 8015432:	46bd      	mov	sp, r7
 8015434:	bd80      	pop	{r7, pc}
	...

08015438 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b08c      	sub	sp, #48	@ 0x30
 801543c:	af00      	add	r7, sp, #0
 801543e:	60f8      	str	r0, [r7, #12]
 8015440:	60b9      	str	r1, [r7, #8]
 8015442:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015444:	2300      	movs	r3, #0
 8015446:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801544c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801544e:	2b00      	cmp	r3, #0
 8015450:	d10d      	bne.n	801546e <xQueueReceive+0x36>
	__asm volatile
 8015452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015456:	b672      	cpsid	i
 8015458:	f383 8811 	msr	BASEPRI, r3
 801545c:	f3bf 8f6f 	isb	sy
 8015460:	f3bf 8f4f 	dsb	sy
 8015464:	b662      	cpsie	i
 8015466:	623b      	str	r3, [r7, #32]
}
 8015468:	bf00      	nop
 801546a:	bf00      	nop
 801546c:	e7fd      	b.n	801546a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801546e:	68bb      	ldr	r3, [r7, #8]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d103      	bne.n	801547c <xQueueReceive+0x44>
 8015474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015478:	2b00      	cmp	r3, #0
 801547a:	d101      	bne.n	8015480 <xQueueReceive+0x48>
 801547c:	2301      	movs	r3, #1
 801547e:	e000      	b.n	8015482 <xQueueReceive+0x4a>
 8015480:	2300      	movs	r3, #0
 8015482:	2b00      	cmp	r3, #0
 8015484:	d10d      	bne.n	80154a2 <xQueueReceive+0x6a>
	__asm volatile
 8015486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801548a:	b672      	cpsid	i
 801548c:	f383 8811 	msr	BASEPRI, r3
 8015490:	f3bf 8f6f 	isb	sy
 8015494:	f3bf 8f4f 	dsb	sy
 8015498:	b662      	cpsie	i
 801549a:	61fb      	str	r3, [r7, #28]
}
 801549c:	bf00      	nop
 801549e:	bf00      	nop
 80154a0:	e7fd      	b.n	801549e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80154a2:	f001 f8d5 	bl	8016650 <xTaskGetSchedulerState>
 80154a6:	4603      	mov	r3, r0
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d102      	bne.n	80154b2 <xQueueReceive+0x7a>
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d101      	bne.n	80154b6 <xQueueReceive+0x7e>
 80154b2:	2301      	movs	r3, #1
 80154b4:	e000      	b.n	80154b8 <xQueueReceive+0x80>
 80154b6:	2300      	movs	r3, #0
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d10d      	bne.n	80154d8 <xQueueReceive+0xa0>
	__asm volatile
 80154bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154c0:	b672      	cpsid	i
 80154c2:	f383 8811 	msr	BASEPRI, r3
 80154c6:	f3bf 8f6f 	isb	sy
 80154ca:	f3bf 8f4f 	dsb	sy
 80154ce:	b662      	cpsie	i
 80154d0:	61bb      	str	r3, [r7, #24]
}
 80154d2:	bf00      	nop
 80154d4:	bf00      	nop
 80154d6:	e7fd      	b.n	80154d4 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80154d8:	f001 fad8 	bl	8016a8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80154dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80154e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80154e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d01f      	beq.n	8015528 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80154e8:	68b9      	ldr	r1, [r7, #8]
 80154ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80154ec:	f000 f9c0 	bl	8015870 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80154f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154f2:	1e5a      	subs	r2, r3, #1
 80154f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80154f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154fa:	691b      	ldr	r3, [r3, #16]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d00f      	beq.n	8015520 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015502:	3310      	adds	r3, #16
 8015504:	4618      	mov	r0, r3
 8015506:	f000 fed9 	bl	80162bc <xTaskRemoveFromEventList>
 801550a:	4603      	mov	r3, r0
 801550c:	2b00      	cmp	r3, #0
 801550e:	d007      	beq.n	8015520 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015510:	4b3c      	ldr	r3, [pc, #240]	@ (8015604 <xQueueReceive+0x1cc>)
 8015512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015516:	601a      	str	r2, [r3, #0]
 8015518:	f3bf 8f4f 	dsb	sy
 801551c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015520:	f001 faea 	bl	8016af8 <vPortExitCritical>
				return pdPASS;
 8015524:	2301      	movs	r3, #1
 8015526:	e069      	b.n	80155fc <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d103      	bne.n	8015536 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801552e:	f001 fae3 	bl	8016af8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015532:	2300      	movs	r3, #0
 8015534:	e062      	b.n	80155fc <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015538:	2b00      	cmp	r3, #0
 801553a:	d106      	bne.n	801554a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801553c:	f107 0310 	add.w	r3, r7, #16
 8015540:	4618      	mov	r0, r3
 8015542:	f000 ff21 	bl	8016388 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015546:	2301      	movs	r3, #1
 8015548:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801554a:	f001 fad5 	bl	8016af8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801554e:	f000 fc7d 	bl	8015e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015552:	f001 fa9b 	bl	8016a8c <vPortEnterCritical>
 8015556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015558:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801555c:	b25b      	sxtb	r3, r3
 801555e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015562:	d103      	bne.n	801556c <xQueueReceive+0x134>
 8015564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015566:	2200      	movs	r2, #0
 8015568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801556c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801556e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015572:	b25b      	sxtb	r3, r3
 8015574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015578:	d103      	bne.n	8015582 <xQueueReceive+0x14a>
 801557a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801557c:	2200      	movs	r2, #0
 801557e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015582:	f001 fab9 	bl	8016af8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015586:	1d3a      	adds	r2, r7, #4
 8015588:	f107 0310 	add.w	r3, r7, #16
 801558c:	4611      	mov	r1, r2
 801558e:	4618      	mov	r0, r3
 8015590:	f000 ff10 	bl	80163b4 <xTaskCheckForTimeOut>
 8015594:	4603      	mov	r3, r0
 8015596:	2b00      	cmp	r3, #0
 8015598:	d123      	bne.n	80155e2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801559a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801559c:	f000 f9e0 	bl	8015960 <prvIsQueueEmpty>
 80155a0:	4603      	mov	r3, r0
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d017      	beq.n	80155d6 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80155a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155a8:	3324      	adds	r3, #36	@ 0x24
 80155aa:	687a      	ldr	r2, [r7, #4]
 80155ac:	4611      	mov	r1, r2
 80155ae:	4618      	mov	r0, r3
 80155b0:	f000 fe5c 	bl	801626c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80155b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80155b6:	f000 f981 	bl	80158bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80155ba:	f000 fc55 	bl	8015e68 <xTaskResumeAll>
 80155be:	4603      	mov	r3, r0
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d189      	bne.n	80154d8 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80155c4:	4b0f      	ldr	r3, [pc, #60]	@ (8015604 <xQueueReceive+0x1cc>)
 80155c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80155ca:	601a      	str	r2, [r3, #0]
 80155cc:	f3bf 8f4f 	dsb	sy
 80155d0:	f3bf 8f6f 	isb	sy
 80155d4:	e780      	b.n	80154d8 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80155d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80155d8:	f000 f970 	bl	80158bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80155dc:	f000 fc44 	bl	8015e68 <xTaskResumeAll>
 80155e0:	e77a      	b.n	80154d8 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80155e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80155e4:	f000 f96a 	bl	80158bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80155e8:	f000 fc3e 	bl	8015e68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80155ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80155ee:	f000 f9b7 	bl	8015960 <prvIsQueueEmpty>
 80155f2:	4603      	mov	r3, r0
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	f43f af6f 	beq.w	80154d8 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80155fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80155fc:	4618      	mov	r0, r3
 80155fe:	3730      	adds	r7, #48	@ 0x30
 8015600:	46bd      	mov	sp, r7
 8015602:	bd80      	pop	{r7, pc}
 8015604:	e000ed04 	.word	0xe000ed04

08015608 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b08e      	sub	sp, #56	@ 0x38
 801560c:	af00      	add	r7, sp, #0
 801560e:	60f8      	str	r0, [r7, #12]
 8015610:	60b9      	str	r1, [r7, #8]
 8015612:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801561a:	2b00      	cmp	r3, #0
 801561c:	d10d      	bne.n	801563a <xQueueReceiveFromISR+0x32>
	__asm volatile
 801561e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015622:	b672      	cpsid	i
 8015624:	f383 8811 	msr	BASEPRI, r3
 8015628:	f3bf 8f6f 	isb	sy
 801562c:	f3bf 8f4f 	dsb	sy
 8015630:	b662      	cpsie	i
 8015632:	623b      	str	r3, [r7, #32]
}
 8015634:	bf00      	nop
 8015636:	bf00      	nop
 8015638:	e7fd      	b.n	8015636 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801563a:	68bb      	ldr	r3, [r7, #8]
 801563c:	2b00      	cmp	r3, #0
 801563e:	d103      	bne.n	8015648 <xQueueReceiveFromISR+0x40>
 8015640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015644:	2b00      	cmp	r3, #0
 8015646:	d101      	bne.n	801564c <xQueueReceiveFromISR+0x44>
 8015648:	2301      	movs	r3, #1
 801564a:	e000      	b.n	801564e <xQueueReceiveFromISR+0x46>
 801564c:	2300      	movs	r3, #0
 801564e:	2b00      	cmp	r3, #0
 8015650:	d10d      	bne.n	801566e <xQueueReceiveFromISR+0x66>
	__asm volatile
 8015652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015656:	b672      	cpsid	i
 8015658:	f383 8811 	msr	BASEPRI, r3
 801565c:	f3bf 8f6f 	isb	sy
 8015660:	f3bf 8f4f 	dsb	sy
 8015664:	b662      	cpsie	i
 8015666:	61fb      	str	r3, [r7, #28]
}
 8015668:	bf00      	nop
 801566a:	bf00      	nop
 801566c:	e7fd      	b.n	801566a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801566e:	f001 faf5 	bl	8016c5c <vPortValidateInterruptPriority>
	__asm volatile
 8015672:	f3ef 8211 	mrs	r2, BASEPRI
 8015676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801567a:	b672      	cpsid	i
 801567c:	f383 8811 	msr	BASEPRI, r3
 8015680:	f3bf 8f6f 	isb	sy
 8015684:	f3bf 8f4f 	dsb	sy
 8015688:	b662      	cpsie	i
 801568a:	61ba      	str	r2, [r7, #24]
 801568c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801568e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015690:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015696:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801569a:	2b00      	cmp	r3, #0
 801569c:	d02f      	beq.n	80156fe <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801569e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80156a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80156a8:	68b9      	ldr	r1, [r7, #8]
 80156aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80156ac:	f000 f8e0 	bl	8015870 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80156b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156b2:	1e5a      	subs	r2, r3, #1
 80156b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156b6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80156b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80156bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156c0:	d112      	bne.n	80156e8 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80156c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156c4:	691b      	ldr	r3, [r3, #16]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d016      	beq.n	80156f8 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80156ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156cc:	3310      	adds	r3, #16
 80156ce:	4618      	mov	r0, r3
 80156d0:	f000 fdf4 	bl	80162bc <xTaskRemoveFromEventList>
 80156d4:	4603      	mov	r3, r0
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d00e      	beq.n	80156f8 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d00b      	beq.n	80156f8 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	2201      	movs	r2, #1
 80156e4:	601a      	str	r2, [r3, #0]
 80156e6:	e007      	b.n	80156f8 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80156e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80156ec:	3301      	adds	r3, #1
 80156ee:	b2db      	uxtb	r3, r3
 80156f0:	b25a      	sxtb	r2, r3
 80156f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80156f8:	2301      	movs	r3, #1
 80156fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80156fc:	e001      	b.n	8015702 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80156fe:	2300      	movs	r3, #0
 8015700:	637b      	str	r3, [r7, #52]	@ 0x34
 8015702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015704:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015706:	693b      	ldr	r3, [r7, #16]
 8015708:	f383 8811 	msr	BASEPRI, r3
}
 801570c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801570e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8015710:	4618      	mov	r0, r3
 8015712:	3738      	adds	r7, #56	@ 0x38
 8015714:	46bd      	mov	sp, r7
 8015716:	bd80      	pop	{r7, pc}

08015718 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8015718:	b580      	push	{r7, lr}
 801571a:	b084      	sub	sp, #16
 801571c:	af00      	add	r7, sp, #0
 801571e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d10d      	bne.n	8015742 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8015726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801572a:	b672      	cpsid	i
 801572c:	f383 8811 	msr	BASEPRI, r3
 8015730:	f3bf 8f6f 	isb	sy
 8015734:	f3bf 8f4f 	dsb	sy
 8015738:	b662      	cpsie	i
 801573a:	60bb      	str	r3, [r7, #8]
}
 801573c:	bf00      	nop
 801573e:	bf00      	nop
 8015740:	e7fd      	b.n	801573e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8015742:	f001 f9a3 	bl	8016a8c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801574a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 801574c:	f001 f9d4 	bl	8016af8 <vPortExitCritical>

	return uxReturn;
 8015750:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015752:	4618      	mov	r0, r3
 8015754:	3710      	adds	r7, #16
 8015756:	46bd      	mov	sp, r7
 8015758:	bd80      	pop	{r7, pc}

0801575a <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 801575a:	b480      	push	{r7}
 801575c:	b087      	sub	sp, #28
 801575e:	af00      	add	r7, sp, #0
 8015760:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8015766:	697b      	ldr	r3, [r7, #20]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d10d      	bne.n	8015788 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 801576c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015770:	b672      	cpsid	i
 8015772:	f383 8811 	msr	BASEPRI, r3
 8015776:	f3bf 8f6f 	isb	sy
 801577a:	f3bf 8f4f 	dsb	sy
 801577e:	b662      	cpsie	i
 8015780:	60fb      	str	r3, [r7, #12]
}
 8015782:	bf00      	nop
 8015784:	bf00      	nop
 8015786:	e7fd      	b.n	8015784 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8015788:	697b      	ldr	r3, [r7, #20]
 801578a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801578c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801578e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015790:	4618      	mov	r0, r3
 8015792:	371c      	adds	r7, #28
 8015794:	46bd      	mov	sp, r7
 8015796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801579a:	4770      	bx	lr

0801579c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b086      	sub	sp, #24
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	60f8      	str	r0, [r7, #12]
 80157a4:	60b9      	str	r1, [r7, #8]
 80157a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80157a8:	2300      	movs	r3, #0
 80157aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d10d      	bne.n	80157d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d14d      	bne.n	801585e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	689b      	ldr	r3, [r3, #8]
 80157c6:	4618      	mov	r0, r3
 80157c8:	f000 ff60 	bl	801668c <xTaskPriorityDisinherit>
 80157cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	2200      	movs	r2, #0
 80157d2:	609a      	str	r2, [r3, #8]
 80157d4:	e043      	b.n	801585e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d119      	bne.n	8015810 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	6858      	ldr	r0, [r3, #4]
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80157e4:	461a      	mov	r2, r3
 80157e6:	68b9      	ldr	r1, [r7, #8]
 80157e8:	f002 f81b 	bl	8017822 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	685a      	ldr	r2, [r3, #4]
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80157f4:	441a      	add	r2, r3
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	685a      	ldr	r2, [r3, #4]
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	689b      	ldr	r3, [r3, #8]
 8015802:	429a      	cmp	r2, r3
 8015804:	d32b      	bcc.n	801585e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	681a      	ldr	r2, [r3, #0]
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	605a      	str	r2, [r3, #4]
 801580e:	e026      	b.n	801585e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	68d8      	ldr	r0, [r3, #12]
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015818:	461a      	mov	r2, r3
 801581a:	68b9      	ldr	r1, [r7, #8]
 801581c:	f002 f801 	bl	8017822 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	68da      	ldr	r2, [r3, #12]
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015828:	425b      	negs	r3, r3
 801582a:	441a      	add	r2, r3
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	68da      	ldr	r2, [r3, #12]
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	429a      	cmp	r2, r3
 801583a:	d207      	bcs.n	801584c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	689a      	ldr	r2, [r3, #8]
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015844:	425b      	negs	r3, r3
 8015846:	441a      	add	r2, r3
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	2b02      	cmp	r3, #2
 8015850:	d105      	bne.n	801585e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015852:	693b      	ldr	r3, [r7, #16]
 8015854:	2b00      	cmp	r3, #0
 8015856:	d002      	beq.n	801585e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015858:	693b      	ldr	r3, [r7, #16]
 801585a:	3b01      	subs	r3, #1
 801585c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801585e:	693b      	ldr	r3, [r7, #16]
 8015860:	1c5a      	adds	r2, r3, #1
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8015866:	697b      	ldr	r3, [r7, #20]
}
 8015868:	4618      	mov	r0, r3
 801586a:	3718      	adds	r7, #24
 801586c:	46bd      	mov	sp, r7
 801586e:	bd80      	pop	{r7, pc}

08015870 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015870:	b580      	push	{r7, lr}
 8015872:	b082      	sub	sp, #8
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
 8015878:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801587e:	2b00      	cmp	r3, #0
 8015880:	d018      	beq.n	80158b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	68da      	ldr	r2, [r3, #12]
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801588a:	441a      	add	r2, r3
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	68da      	ldr	r2, [r3, #12]
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	689b      	ldr	r3, [r3, #8]
 8015898:	429a      	cmp	r2, r3
 801589a:	d303      	bcc.n	80158a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	681a      	ldr	r2, [r3, #0]
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	68d9      	ldr	r1, [r3, #12]
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80158ac:	461a      	mov	r2, r3
 80158ae:	6838      	ldr	r0, [r7, #0]
 80158b0:	f001 ffb7 	bl	8017822 <memcpy>
	}
}
 80158b4:	bf00      	nop
 80158b6:	3708      	adds	r7, #8
 80158b8:	46bd      	mov	sp, r7
 80158ba:	bd80      	pop	{r7, pc}

080158bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80158bc:	b580      	push	{r7, lr}
 80158be:	b084      	sub	sp, #16
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80158c4:	f001 f8e2 	bl	8016a8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80158ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80158d0:	e011      	b.n	80158f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d012      	beq.n	8015900 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	3324      	adds	r3, #36	@ 0x24
 80158de:	4618      	mov	r0, r3
 80158e0:	f000 fcec 	bl	80162bc <xTaskRemoveFromEventList>
 80158e4:	4603      	mov	r3, r0
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d001      	beq.n	80158ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80158ea:	f000 fdcb 	bl	8016484 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80158ee:	7bfb      	ldrb	r3, [r7, #15]
 80158f0:	3b01      	subs	r3, #1
 80158f2:	b2db      	uxtb	r3, r3
 80158f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80158f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	dce9      	bgt.n	80158d2 <prvUnlockQueue+0x16>
 80158fe:	e000      	b.n	8015902 <prvUnlockQueue+0x46>
					break;
 8015900:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	22ff      	movs	r2, #255	@ 0xff
 8015906:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801590a:	f001 f8f5 	bl	8016af8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801590e:	f001 f8bd 	bl	8016a8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015918:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801591a:	e011      	b.n	8015940 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	691b      	ldr	r3, [r3, #16]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d012      	beq.n	801594a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	3310      	adds	r3, #16
 8015928:	4618      	mov	r0, r3
 801592a:	f000 fcc7 	bl	80162bc <xTaskRemoveFromEventList>
 801592e:	4603      	mov	r3, r0
 8015930:	2b00      	cmp	r3, #0
 8015932:	d001      	beq.n	8015938 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015934:	f000 fda6 	bl	8016484 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015938:	7bbb      	ldrb	r3, [r7, #14]
 801593a:	3b01      	subs	r3, #1
 801593c:	b2db      	uxtb	r3, r3
 801593e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015940:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015944:	2b00      	cmp	r3, #0
 8015946:	dce9      	bgt.n	801591c <prvUnlockQueue+0x60>
 8015948:	e000      	b.n	801594c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801594a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	22ff      	movs	r2, #255	@ 0xff
 8015950:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8015954:	f001 f8d0 	bl	8016af8 <vPortExitCritical>
}
 8015958:	bf00      	nop
 801595a:	3710      	adds	r7, #16
 801595c:	46bd      	mov	sp, r7
 801595e:	bd80      	pop	{r7, pc}

08015960 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b084      	sub	sp, #16
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015968:	f001 f890 	bl	8016a8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015970:	2b00      	cmp	r3, #0
 8015972:	d102      	bne.n	801597a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015974:	2301      	movs	r3, #1
 8015976:	60fb      	str	r3, [r7, #12]
 8015978:	e001      	b.n	801597e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801597a:	2300      	movs	r3, #0
 801597c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801597e:	f001 f8bb 	bl	8016af8 <vPortExitCritical>

	return xReturn;
 8015982:	68fb      	ldr	r3, [r7, #12]
}
 8015984:	4618      	mov	r0, r3
 8015986:	3710      	adds	r7, #16
 8015988:	46bd      	mov	sp, r7
 801598a:	bd80      	pop	{r7, pc}

0801598c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801598c:	b580      	push	{r7, lr}
 801598e:	b084      	sub	sp, #16
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015994:	f001 f87a 	bl	8016a8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159a0:	429a      	cmp	r2, r3
 80159a2:	d102      	bne.n	80159aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80159a4:	2301      	movs	r3, #1
 80159a6:	60fb      	str	r3, [r7, #12]
 80159a8:	e001      	b.n	80159ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80159aa:	2300      	movs	r3, #0
 80159ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80159ae:	f001 f8a3 	bl	8016af8 <vPortExitCritical>

	return xReturn;
 80159b2:	68fb      	ldr	r3, [r7, #12]
}
 80159b4:	4618      	mov	r0, r3
 80159b6:	3710      	adds	r7, #16
 80159b8:	46bd      	mov	sp, r7
 80159ba:	bd80      	pop	{r7, pc}

080159bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80159bc:	b580      	push	{r7, lr}
 80159be:	b08e      	sub	sp, #56	@ 0x38
 80159c0:	af04      	add	r7, sp, #16
 80159c2:	60f8      	str	r0, [r7, #12]
 80159c4:	60b9      	str	r1, [r7, #8]
 80159c6:	607a      	str	r2, [r7, #4]
 80159c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80159ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d10d      	bne.n	80159ec <xTaskCreateStatic+0x30>
	__asm volatile
 80159d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159d4:	b672      	cpsid	i
 80159d6:	f383 8811 	msr	BASEPRI, r3
 80159da:	f3bf 8f6f 	isb	sy
 80159de:	f3bf 8f4f 	dsb	sy
 80159e2:	b662      	cpsie	i
 80159e4:	623b      	str	r3, [r7, #32]
}
 80159e6:	bf00      	nop
 80159e8:	bf00      	nop
 80159ea:	e7fd      	b.n	80159e8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80159ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d10d      	bne.n	8015a0e <xTaskCreateStatic+0x52>
	__asm volatile
 80159f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159f6:	b672      	cpsid	i
 80159f8:	f383 8811 	msr	BASEPRI, r3
 80159fc:	f3bf 8f6f 	isb	sy
 8015a00:	f3bf 8f4f 	dsb	sy
 8015a04:	b662      	cpsie	i
 8015a06:	61fb      	str	r3, [r7, #28]
}
 8015a08:	bf00      	nop
 8015a0a:	bf00      	nop
 8015a0c:	e7fd      	b.n	8015a0a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015a0e:	2358      	movs	r3, #88	@ 0x58
 8015a10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015a12:	693b      	ldr	r3, [r7, #16]
 8015a14:	2b58      	cmp	r3, #88	@ 0x58
 8015a16:	d00d      	beq.n	8015a34 <xTaskCreateStatic+0x78>
	__asm volatile
 8015a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a1c:	b672      	cpsid	i
 8015a1e:	f383 8811 	msr	BASEPRI, r3
 8015a22:	f3bf 8f6f 	isb	sy
 8015a26:	f3bf 8f4f 	dsb	sy
 8015a2a:	b662      	cpsie	i
 8015a2c:	61bb      	str	r3, [r7, #24]
}
 8015a2e:	bf00      	nop
 8015a30:	bf00      	nop
 8015a32:	e7fd      	b.n	8015a30 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015a34:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d01e      	beq.n	8015a7a <xTaskCreateStatic+0xbe>
 8015a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d01b      	beq.n	8015a7a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a44:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015a4a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a4e:	2202      	movs	r2, #2
 8015a50:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015a54:	2300      	movs	r3, #0
 8015a56:	9303      	str	r3, [sp, #12]
 8015a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a5a:	9302      	str	r3, [sp, #8]
 8015a5c:	f107 0314 	add.w	r3, r7, #20
 8015a60:	9301      	str	r3, [sp, #4]
 8015a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a64:	9300      	str	r3, [sp, #0]
 8015a66:	683b      	ldr	r3, [r7, #0]
 8015a68:	687a      	ldr	r2, [r7, #4]
 8015a6a:	68b9      	ldr	r1, [r7, #8]
 8015a6c:	68f8      	ldr	r0, [r7, #12]
 8015a6e:	f000 f850 	bl	8015b12 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015a72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015a74:	f000 f8e2 	bl	8015c3c <prvAddNewTaskToReadyList>
 8015a78:	e001      	b.n	8015a7e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8015a7e:	697b      	ldr	r3, [r7, #20]
	}
 8015a80:	4618      	mov	r0, r3
 8015a82:	3728      	adds	r7, #40	@ 0x28
 8015a84:	46bd      	mov	sp, r7
 8015a86:	bd80      	pop	{r7, pc}

08015a88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b08c      	sub	sp, #48	@ 0x30
 8015a8c:	af04      	add	r7, sp, #16
 8015a8e:	60f8      	str	r0, [r7, #12]
 8015a90:	60b9      	str	r1, [r7, #8]
 8015a92:	603b      	str	r3, [r7, #0]
 8015a94:	4613      	mov	r3, r2
 8015a96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015a98:	88fb      	ldrh	r3, [r7, #6]
 8015a9a:	009b      	lsls	r3, r3, #2
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	f001 f923 	bl	8016ce8 <pvPortMalloc>
 8015aa2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015aa4:	697b      	ldr	r3, [r7, #20]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d00e      	beq.n	8015ac8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015aaa:	2058      	movs	r0, #88	@ 0x58
 8015aac:	f001 f91c 	bl	8016ce8 <pvPortMalloc>
 8015ab0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015ab2:	69fb      	ldr	r3, [r7, #28]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d003      	beq.n	8015ac0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015ab8:	69fb      	ldr	r3, [r7, #28]
 8015aba:	697a      	ldr	r2, [r7, #20]
 8015abc:	631a      	str	r2, [r3, #48]	@ 0x30
 8015abe:	e005      	b.n	8015acc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015ac0:	6978      	ldr	r0, [r7, #20]
 8015ac2:	f001 f9e3 	bl	8016e8c <vPortFree>
 8015ac6:	e001      	b.n	8015acc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015ac8:	2300      	movs	r3, #0
 8015aca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015acc:	69fb      	ldr	r3, [r7, #28]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d017      	beq.n	8015b02 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015ad2:	69fb      	ldr	r3, [r7, #28]
 8015ad4:	2200      	movs	r2, #0
 8015ad6:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015ada:	88fa      	ldrh	r2, [r7, #6]
 8015adc:	2300      	movs	r3, #0
 8015ade:	9303      	str	r3, [sp, #12]
 8015ae0:	69fb      	ldr	r3, [r7, #28]
 8015ae2:	9302      	str	r3, [sp, #8]
 8015ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ae6:	9301      	str	r3, [sp, #4]
 8015ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015aea:	9300      	str	r3, [sp, #0]
 8015aec:	683b      	ldr	r3, [r7, #0]
 8015aee:	68b9      	ldr	r1, [r7, #8]
 8015af0:	68f8      	ldr	r0, [r7, #12]
 8015af2:	f000 f80e 	bl	8015b12 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015af6:	69f8      	ldr	r0, [r7, #28]
 8015af8:	f000 f8a0 	bl	8015c3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015afc:	2301      	movs	r3, #1
 8015afe:	61bb      	str	r3, [r7, #24]
 8015b00:	e002      	b.n	8015b08 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015b02:	f04f 33ff 	mov.w	r3, #4294967295
 8015b06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015b08:	69bb      	ldr	r3, [r7, #24]
	}
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	3720      	adds	r7, #32
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	bd80      	pop	{r7, pc}

08015b12 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015b12:	b580      	push	{r7, lr}
 8015b14:	b088      	sub	sp, #32
 8015b16:	af00      	add	r7, sp, #0
 8015b18:	60f8      	str	r0, [r7, #12]
 8015b1a:	60b9      	str	r1, [r7, #8]
 8015b1c:	607a      	str	r2, [r7, #4]
 8015b1e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b22:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	009b      	lsls	r3, r3, #2
 8015b28:	461a      	mov	r2, r3
 8015b2a:	21a5      	movs	r1, #165	@ 0xa5
 8015b2c:	f001 fdc4 	bl	80176b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015b34:	6879      	ldr	r1, [r7, #4]
 8015b36:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8015b3a:	440b      	add	r3, r1
 8015b3c:	009b      	lsls	r3, r3, #2
 8015b3e:	4413      	add	r3, r2
 8015b40:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015b42:	69bb      	ldr	r3, [r7, #24]
 8015b44:	f023 0307 	bic.w	r3, r3, #7
 8015b48:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015b4a:	69bb      	ldr	r3, [r7, #24]
 8015b4c:	f003 0307 	and.w	r3, r3, #7
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d00d      	beq.n	8015b70 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8015b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b58:	b672      	cpsid	i
 8015b5a:	f383 8811 	msr	BASEPRI, r3
 8015b5e:	f3bf 8f6f 	isb	sy
 8015b62:	f3bf 8f4f 	dsb	sy
 8015b66:	b662      	cpsie	i
 8015b68:	617b      	str	r3, [r7, #20]
}
 8015b6a:	bf00      	nop
 8015b6c:	bf00      	nop
 8015b6e:	e7fd      	b.n	8015b6c <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015b70:	68bb      	ldr	r3, [r7, #8]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d01f      	beq.n	8015bb6 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015b76:	2300      	movs	r3, #0
 8015b78:	61fb      	str	r3, [r7, #28]
 8015b7a:	e012      	b.n	8015ba2 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015b7c:	68ba      	ldr	r2, [r7, #8]
 8015b7e:	69fb      	ldr	r3, [r7, #28]
 8015b80:	4413      	add	r3, r2
 8015b82:	7819      	ldrb	r1, [r3, #0]
 8015b84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015b86:	69fb      	ldr	r3, [r7, #28]
 8015b88:	4413      	add	r3, r2
 8015b8a:	3334      	adds	r3, #52	@ 0x34
 8015b8c:	460a      	mov	r2, r1
 8015b8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015b90:	68ba      	ldr	r2, [r7, #8]
 8015b92:	69fb      	ldr	r3, [r7, #28]
 8015b94:	4413      	add	r3, r2
 8015b96:	781b      	ldrb	r3, [r3, #0]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d006      	beq.n	8015baa <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015b9c:	69fb      	ldr	r3, [r7, #28]
 8015b9e:	3301      	adds	r3, #1
 8015ba0:	61fb      	str	r3, [r7, #28]
 8015ba2:	69fb      	ldr	r3, [r7, #28]
 8015ba4:	2b0f      	cmp	r3, #15
 8015ba6:	d9e9      	bls.n	8015b7c <prvInitialiseNewTask+0x6a>
 8015ba8:	e000      	b.n	8015bac <prvInitialiseNewTask+0x9a>
			{
				break;
 8015baa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bae:	2200      	movs	r2, #0
 8015bb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015bb4:	e003      	b.n	8015bbe <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bb8:	2200      	movs	r2, #0
 8015bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bc0:	2b06      	cmp	r3, #6
 8015bc2:	d901      	bls.n	8015bc8 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015bc4:	2306      	movs	r3, #6
 8015bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015bd2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8015bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bdc:	3304      	adds	r3, #4
 8015bde:	4618      	mov	r0, r3
 8015be0:	f7ff f892 	bl	8014d08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015be6:	3318      	adds	r3, #24
 8015be8:	4618      	mov	r0, r3
 8015bea:	f7ff f88d 	bl	8014d08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015bf2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bf6:	f1c3 0207 	rsb	r2, r3, #7
 8015bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bfc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015c02:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8015c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c06:	2200      	movs	r2, #0
 8015c08:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c0c:	2200      	movs	r2, #0
 8015c0e:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c12:	2200      	movs	r2, #0
 8015c14:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015c18:	683a      	ldr	r2, [r7, #0]
 8015c1a:	68f9      	ldr	r1, [r7, #12]
 8015c1c:	69b8      	ldr	r0, [r7, #24]
 8015c1e:	f000 fe27 	bl	8016870 <pxPortInitialiseStack>
 8015c22:	4602      	mov	r2, r0
 8015c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d002      	beq.n	8015c34 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015c32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015c34:	bf00      	nop
 8015c36:	3720      	adds	r7, #32
 8015c38:	46bd      	mov	sp, r7
 8015c3a:	bd80      	pop	{r7, pc}

08015c3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	b082      	sub	sp, #8
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015c44:	f000 ff22 	bl	8016a8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015c48:	4b2a      	ldr	r3, [pc, #168]	@ (8015cf4 <prvAddNewTaskToReadyList+0xb8>)
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	3301      	adds	r3, #1
 8015c4e:	4a29      	ldr	r2, [pc, #164]	@ (8015cf4 <prvAddNewTaskToReadyList+0xb8>)
 8015c50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015c52:	4b29      	ldr	r3, [pc, #164]	@ (8015cf8 <prvAddNewTaskToReadyList+0xbc>)
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d109      	bne.n	8015c6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015c5a:	4a27      	ldr	r2, [pc, #156]	@ (8015cf8 <prvAddNewTaskToReadyList+0xbc>)
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015c60:	4b24      	ldr	r3, [pc, #144]	@ (8015cf4 <prvAddNewTaskToReadyList+0xb8>)
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	2b01      	cmp	r3, #1
 8015c66:	d110      	bne.n	8015c8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015c68:	f000 fc32 	bl	80164d0 <prvInitialiseTaskLists>
 8015c6c:	e00d      	b.n	8015c8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015c6e:	4b23      	ldr	r3, [pc, #140]	@ (8015cfc <prvAddNewTaskToReadyList+0xc0>)
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d109      	bne.n	8015c8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015c76:	4b20      	ldr	r3, [pc, #128]	@ (8015cf8 <prvAddNewTaskToReadyList+0xbc>)
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c80:	429a      	cmp	r2, r3
 8015c82:	d802      	bhi.n	8015c8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015c84:	4a1c      	ldr	r2, [pc, #112]	@ (8015cf8 <prvAddNewTaskToReadyList+0xbc>)
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8015d00 <prvAddNewTaskToReadyList+0xc4>)
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	3301      	adds	r3, #1
 8015c90:	4a1b      	ldr	r2, [pc, #108]	@ (8015d00 <prvAddNewTaskToReadyList+0xc4>)
 8015c92:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c98:	2201      	movs	r2, #1
 8015c9a:	409a      	lsls	r2, r3
 8015c9c:	4b19      	ldr	r3, [pc, #100]	@ (8015d04 <prvAddNewTaskToReadyList+0xc8>)
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	4313      	orrs	r3, r2
 8015ca2:	4a18      	ldr	r2, [pc, #96]	@ (8015d04 <prvAddNewTaskToReadyList+0xc8>)
 8015ca4:	6013      	str	r3, [r2, #0]
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015caa:	4613      	mov	r3, r2
 8015cac:	009b      	lsls	r3, r3, #2
 8015cae:	4413      	add	r3, r2
 8015cb0:	009b      	lsls	r3, r3, #2
 8015cb2:	4a15      	ldr	r2, [pc, #84]	@ (8015d08 <prvAddNewTaskToReadyList+0xcc>)
 8015cb4:	441a      	add	r2, r3
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	3304      	adds	r3, #4
 8015cba:	4619      	mov	r1, r3
 8015cbc:	4610      	mov	r0, r2
 8015cbe:	f7ff f830 	bl	8014d22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015cc2:	f000 ff19 	bl	8016af8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8015cfc <prvAddNewTaskToReadyList+0xc0>)
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d00e      	beq.n	8015cec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015cce:	4b0a      	ldr	r3, [pc, #40]	@ (8015cf8 <prvAddNewTaskToReadyList+0xbc>)
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015cd8:	429a      	cmp	r2, r3
 8015cda:	d207      	bcs.n	8015cec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8015d0c <prvAddNewTaskToReadyList+0xd0>)
 8015cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015ce2:	601a      	str	r2, [r3, #0]
 8015ce4:	f3bf 8f4f 	dsb	sy
 8015ce8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015cec:	bf00      	nop
 8015cee:	3708      	adds	r7, #8
 8015cf0:	46bd      	mov	sp, r7
 8015cf2:	bd80      	pop	{r7, pc}
 8015cf4:	20002bd8 	.word	0x20002bd8
 8015cf8:	20002ad8 	.word	0x20002ad8
 8015cfc:	20002be4 	.word	0x20002be4
 8015d00:	20002bf4 	.word	0x20002bf4
 8015d04:	20002be0 	.word	0x20002be0
 8015d08:	20002adc 	.word	0x20002adc
 8015d0c:	e000ed04 	.word	0xe000ed04

08015d10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b084      	sub	sp, #16
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015d18:	2300      	movs	r3, #0
 8015d1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d01a      	beq.n	8015d58 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015d22:	4b15      	ldr	r3, [pc, #84]	@ (8015d78 <vTaskDelay+0x68>)
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d00d      	beq.n	8015d46 <vTaskDelay+0x36>
	__asm volatile
 8015d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d2e:	b672      	cpsid	i
 8015d30:	f383 8811 	msr	BASEPRI, r3
 8015d34:	f3bf 8f6f 	isb	sy
 8015d38:	f3bf 8f4f 	dsb	sy
 8015d3c:	b662      	cpsie	i
 8015d3e:	60bb      	str	r3, [r7, #8]
}
 8015d40:	bf00      	nop
 8015d42:	bf00      	nop
 8015d44:	e7fd      	b.n	8015d42 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8015d46:	f000 f881 	bl	8015e4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015d4a:	2100      	movs	r1, #0
 8015d4c:	6878      	ldr	r0, [r7, #4]
 8015d4e:	f000 fd29 	bl	80167a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015d52:	f000 f889 	bl	8015e68 <xTaskResumeAll>
 8015d56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d107      	bne.n	8015d6e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8015d5e:	4b07      	ldr	r3, [pc, #28]	@ (8015d7c <vTaskDelay+0x6c>)
 8015d60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015d64:	601a      	str	r2, [r3, #0]
 8015d66:	f3bf 8f4f 	dsb	sy
 8015d6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015d6e:	bf00      	nop
 8015d70:	3710      	adds	r7, #16
 8015d72:	46bd      	mov	sp, r7
 8015d74:	bd80      	pop	{r7, pc}
 8015d76:	bf00      	nop
 8015d78:	20002c00 	.word	0x20002c00
 8015d7c:	e000ed04 	.word	0xe000ed04

08015d80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015d80:	b580      	push	{r7, lr}
 8015d82:	b08a      	sub	sp, #40	@ 0x28
 8015d84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015d86:	2300      	movs	r3, #0
 8015d88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015d8e:	463a      	mov	r2, r7
 8015d90:	1d39      	adds	r1, r7, #4
 8015d92:	f107 0308 	add.w	r3, r7, #8
 8015d96:	4618      	mov	r0, r3
 8015d98:	f7ec f822 	bl	8001de0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015d9c:	6839      	ldr	r1, [r7, #0]
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	68ba      	ldr	r2, [r7, #8]
 8015da2:	9202      	str	r2, [sp, #8]
 8015da4:	9301      	str	r3, [sp, #4]
 8015da6:	2300      	movs	r3, #0
 8015da8:	9300      	str	r3, [sp, #0]
 8015daa:	2300      	movs	r3, #0
 8015dac:	460a      	mov	r2, r1
 8015dae:	4921      	ldr	r1, [pc, #132]	@ (8015e34 <vTaskStartScheduler+0xb4>)
 8015db0:	4821      	ldr	r0, [pc, #132]	@ (8015e38 <vTaskStartScheduler+0xb8>)
 8015db2:	f7ff fe03 	bl	80159bc <xTaskCreateStatic>
 8015db6:	4603      	mov	r3, r0
 8015db8:	4a20      	ldr	r2, [pc, #128]	@ (8015e3c <vTaskStartScheduler+0xbc>)
 8015dba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8015e3c <vTaskStartScheduler+0xbc>)
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d002      	beq.n	8015dca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015dc4:	2301      	movs	r3, #1
 8015dc6:	617b      	str	r3, [r7, #20]
 8015dc8:	e001      	b.n	8015dce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8015dca:	2300      	movs	r3, #0
 8015dcc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015dce:	697b      	ldr	r3, [r7, #20]
 8015dd0:	2b01      	cmp	r3, #1
 8015dd2:	d118      	bne.n	8015e06 <vTaskStartScheduler+0x86>
	__asm volatile
 8015dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015dd8:	b672      	cpsid	i
 8015dda:	f383 8811 	msr	BASEPRI, r3
 8015dde:	f3bf 8f6f 	isb	sy
 8015de2:	f3bf 8f4f 	dsb	sy
 8015de6:	b662      	cpsie	i
 8015de8:	613b      	str	r3, [r7, #16]
}
 8015dea:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015dec:	4b14      	ldr	r3, [pc, #80]	@ (8015e40 <vTaskStartScheduler+0xc0>)
 8015dee:	f04f 32ff 	mov.w	r2, #4294967295
 8015df2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015df4:	4b13      	ldr	r3, [pc, #76]	@ (8015e44 <vTaskStartScheduler+0xc4>)
 8015df6:	2201      	movs	r2, #1
 8015df8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015dfa:	4b13      	ldr	r3, [pc, #76]	@ (8015e48 <vTaskStartScheduler+0xc8>)
 8015dfc:	2200      	movs	r2, #0
 8015dfe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015e00:	f000 fdc6 	bl	8016990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015e04:	e011      	b.n	8015e2a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015e06:	697b      	ldr	r3, [r7, #20]
 8015e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e0c:	d10d      	bne.n	8015e2a <vTaskStartScheduler+0xaa>
	__asm volatile
 8015e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e12:	b672      	cpsid	i
 8015e14:	f383 8811 	msr	BASEPRI, r3
 8015e18:	f3bf 8f6f 	isb	sy
 8015e1c:	f3bf 8f4f 	dsb	sy
 8015e20:	b662      	cpsie	i
 8015e22:	60fb      	str	r3, [r7, #12]
}
 8015e24:	bf00      	nop
 8015e26:	bf00      	nop
 8015e28:	e7fd      	b.n	8015e26 <vTaskStartScheduler+0xa6>
}
 8015e2a:	bf00      	nop
 8015e2c:	3718      	adds	r7, #24
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	bd80      	pop	{r7, pc}
 8015e32:	bf00      	nop
 8015e34:	0801b984 	.word	0x0801b984
 8015e38:	0801649d 	.word	0x0801649d
 8015e3c:	20002bfc 	.word	0x20002bfc
 8015e40:	20002bf8 	.word	0x20002bf8
 8015e44:	20002be4 	.word	0x20002be4
 8015e48:	20002bdc 	.word	0x20002bdc

08015e4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015e4c:	b480      	push	{r7}
 8015e4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8015e50:	4b04      	ldr	r3, [pc, #16]	@ (8015e64 <vTaskSuspendAll+0x18>)
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	3301      	adds	r3, #1
 8015e56:	4a03      	ldr	r2, [pc, #12]	@ (8015e64 <vTaskSuspendAll+0x18>)
 8015e58:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8015e5a:	bf00      	nop
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e62:	4770      	bx	lr
 8015e64:	20002c00 	.word	0x20002c00

08015e68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b084      	sub	sp, #16
 8015e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015e6e:	2300      	movs	r3, #0
 8015e70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015e72:	2300      	movs	r3, #0
 8015e74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015e76:	4b43      	ldr	r3, [pc, #268]	@ (8015f84 <xTaskResumeAll+0x11c>)
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d10d      	bne.n	8015e9a <xTaskResumeAll+0x32>
	__asm volatile
 8015e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e82:	b672      	cpsid	i
 8015e84:	f383 8811 	msr	BASEPRI, r3
 8015e88:	f3bf 8f6f 	isb	sy
 8015e8c:	f3bf 8f4f 	dsb	sy
 8015e90:	b662      	cpsie	i
 8015e92:	603b      	str	r3, [r7, #0]
}
 8015e94:	bf00      	nop
 8015e96:	bf00      	nop
 8015e98:	e7fd      	b.n	8015e96 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015e9a:	f000 fdf7 	bl	8016a8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015e9e:	4b39      	ldr	r3, [pc, #228]	@ (8015f84 <xTaskResumeAll+0x11c>)
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	3b01      	subs	r3, #1
 8015ea4:	4a37      	ldr	r2, [pc, #220]	@ (8015f84 <xTaskResumeAll+0x11c>)
 8015ea6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015ea8:	4b36      	ldr	r3, [pc, #216]	@ (8015f84 <xTaskResumeAll+0x11c>)
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d161      	bne.n	8015f74 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015eb0:	4b35      	ldr	r3, [pc, #212]	@ (8015f88 <xTaskResumeAll+0x120>)
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d05d      	beq.n	8015f74 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015eb8:	e02e      	b.n	8015f18 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015eba:	4b34      	ldr	r3, [pc, #208]	@ (8015f8c <xTaskResumeAll+0x124>)
 8015ebc:	68db      	ldr	r3, [r3, #12]
 8015ebe:	68db      	ldr	r3, [r3, #12]
 8015ec0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	3318      	adds	r3, #24
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f7fe ff88 	bl	8014ddc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	3304      	adds	r3, #4
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f7fe ff83 	bl	8014ddc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015eda:	2201      	movs	r2, #1
 8015edc:	409a      	lsls	r2, r3
 8015ede:	4b2c      	ldr	r3, [pc, #176]	@ (8015f90 <xTaskResumeAll+0x128>)
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	4313      	orrs	r3, r2
 8015ee4:	4a2a      	ldr	r2, [pc, #168]	@ (8015f90 <xTaskResumeAll+0x128>)
 8015ee6:	6013      	str	r3, [r2, #0]
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015eec:	4613      	mov	r3, r2
 8015eee:	009b      	lsls	r3, r3, #2
 8015ef0:	4413      	add	r3, r2
 8015ef2:	009b      	lsls	r3, r3, #2
 8015ef4:	4a27      	ldr	r2, [pc, #156]	@ (8015f94 <xTaskResumeAll+0x12c>)
 8015ef6:	441a      	add	r2, r3
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	3304      	adds	r3, #4
 8015efc:	4619      	mov	r1, r3
 8015efe:	4610      	mov	r0, r2
 8015f00:	f7fe ff0f 	bl	8014d22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015f08:	4b23      	ldr	r3, [pc, #140]	@ (8015f98 <xTaskResumeAll+0x130>)
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f0e:	429a      	cmp	r2, r3
 8015f10:	d302      	bcc.n	8015f18 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8015f12:	4b22      	ldr	r3, [pc, #136]	@ (8015f9c <xTaskResumeAll+0x134>)
 8015f14:	2201      	movs	r2, #1
 8015f16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015f18:	4b1c      	ldr	r3, [pc, #112]	@ (8015f8c <xTaskResumeAll+0x124>)
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d1cc      	bne.n	8015eba <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d001      	beq.n	8015f2a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015f26:	f000 fb73 	bl	8016610 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8015f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8015fa0 <xTaskResumeAll+0x138>)
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d010      	beq.n	8015f58 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015f36:	f000 f859 	bl	8015fec <xTaskIncrementTick>
 8015f3a:	4603      	mov	r3, r0
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d002      	beq.n	8015f46 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8015f40:	4b16      	ldr	r3, [pc, #88]	@ (8015f9c <xTaskResumeAll+0x134>)
 8015f42:	2201      	movs	r2, #1
 8015f44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	3b01      	subs	r3, #1
 8015f4a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d1f1      	bne.n	8015f36 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8015f52:	4b13      	ldr	r3, [pc, #76]	@ (8015fa0 <xTaskResumeAll+0x138>)
 8015f54:	2200      	movs	r2, #0
 8015f56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015f58:	4b10      	ldr	r3, [pc, #64]	@ (8015f9c <xTaskResumeAll+0x134>)
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d009      	beq.n	8015f74 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015f60:	2301      	movs	r3, #1
 8015f62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015f64:	4b0f      	ldr	r3, [pc, #60]	@ (8015fa4 <xTaskResumeAll+0x13c>)
 8015f66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015f6a:	601a      	str	r2, [r3, #0]
 8015f6c:	f3bf 8f4f 	dsb	sy
 8015f70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015f74:	f000 fdc0 	bl	8016af8 <vPortExitCritical>

	return xAlreadyYielded;
 8015f78:	68bb      	ldr	r3, [r7, #8]
}
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	3710      	adds	r7, #16
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	bd80      	pop	{r7, pc}
 8015f82:	bf00      	nop
 8015f84:	20002c00 	.word	0x20002c00
 8015f88:	20002bd8 	.word	0x20002bd8
 8015f8c:	20002b98 	.word	0x20002b98
 8015f90:	20002be0 	.word	0x20002be0
 8015f94:	20002adc 	.word	0x20002adc
 8015f98:	20002ad8 	.word	0x20002ad8
 8015f9c:	20002bec 	.word	0x20002bec
 8015fa0:	20002be8 	.word	0x20002be8
 8015fa4:	e000ed04 	.word	0xe000ed04

08015fa8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015fa8:	b480      	push	{r7}
 8015faa:	b083      	sub	sp, #12
 8015fac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015fae:	4b05      	ldr	r3, [pc, #20]	@ (8015fc4 <xTaskGetTickCount+0x1c>)
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015fb4:	687b      	ldr	r3, [r7, #4]
}
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	370c      	adds	r7, #12
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fc0:	4770      	bx	lr
 8015fc2:	bf00      	nop
 8015fc4:	20002bdc 	.word	0x20002bdc

08015fc8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b082      	sub	sp, #8
 8015fcc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015fce:	f000 fe45 	bl	8016c5c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8015fd6:	4b04      	ldr	r3, [pc, #16]	@ (8015fe8 <xTaskGetTickCountFromISR+0x20>)
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015fdc:	683b      	ldr	r3, [r7, #0]
}
 8015fde:	4618      	mov	r0, r3
 8015fe0:	3708      	adds	r7, #8
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	bd80      	pop	{r7, pc}
 8015fe6:	bf00      	nop
 8015fe8:	20002bdc 	.word	0x20002bdc

08015fec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015fec:	b580      	push	{r7, lr}
 8015fee:	b086      	sub	sp, #24
 8015ff0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015ff2:	2300      	movs	r3, #0
 8015ff4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015ff6:	4b50      	ldr	r3, [pc, #320]	@ (8016138 <xTaskIncrementTick+0x14c>)
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	f040 808b 	bne.w	8016116 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016000:	4b4e      	ldr	r3, [pc, #312]	@ (801613c <xTaskIncrementTick+0x150>)
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	3301      	adds	r3, #1
 8016006:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016008:	4a4c      	ldr	r2, [pc, #304]	@ (801613c <xTaskIncrementTick+0x150>)
 801600a:	693b      	ldr	r3, [r7, #16]
 801600c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801600e:	693b      	ldr	r3, [r7, #16]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d123      	bne.n	801605c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8016014:	4b4a      	ldr	r3, [pc, #296]	@ (8016140 <xTaskIncrementTick+0x154>)
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d00d      	beq.n	801603a <xTaskIncrementTick+0x4e>
	__asm volatile
 801601e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016022:	b672      	cpsid	i
 8016024:	f383 8811 	msr	BASEPRI, r3
 8016028:	f3bf 8f6f 	isb	sy
 801602c:	f3bf 8f4f 	dsb	sy
 8016030:	b662      	cpsie	i
 8016032:	603b      	str	r3, [r7, #0]
}
 8016034:	bf00      	nop
 8016036:	bf00      	nop
 8016038:	e7fd      	b.n	8016036 <xTaskIncrementTick+0x4a>
 801603a:	4b41      	ldr	r3, [pc, #260]	@ (8016140 <xTaskIncrementTick+0x154>)
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	60fb      	str	r3, [r7, #12]
 8016040:	4b40      	ldr	r3, [pc, #256]	@ (8016144 <xTaskIncrementTick+0x158>)
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	4a3e      	ldr	r2, [pc, #248]	@ (8016140 <xTaskIncrementTick+0x154>)
 8016046:	6013      	str	r3, [r2, #0]
 8016048:	4a3e      	ldr	r2, [pc, #248]	@ (8016144 <xTaskIncrementTick+0x158>)
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	6013      	str	r3, [r2, #0]
 801604e:	4b3e      	ldr	r3, [pc, #248]	@ (8016148 <xTaskIncrementTick+0x15c>)
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	3301      	adds	r3, #1
 8016054:	4a3c      	ldr	r2, [pc, #240]	@ (8016148 <xTaskIncrementTick+0x15c>)
 8016056:	6013      	str	r3, [r2, #0]
 8016058:	f000 fada 	bl	8016610 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801605c:	4b3b      	ldr	r3, [pc, #236]	@ (801614c <xTaskIncrementTick+0x160>)
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	693a      	ldr	r2, [r7, #16]
 8016062:	429a      	cmp	r2, r3
 8016064:	d348      	bcc.n	80160f8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016066:	4b36      	ldr	r3, [pc, #216]	@ (8016140 <xTaskIncrementTick+0x154>)
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d104      	bne.n	801607a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016070:	4b36      	ldr	r3, [pc, #216]	@ (801614c <xTaskIncrementTick+0x160>)
 8016072:	f04f 32ff 	mov.w	r2, #4294967295
 8016076:	601a      	str	r2, [r3, #0]
					break;
 8016078:	e03e      	b.n	80160f8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801607a:	4b31      	ldr	r3, [pc, #196]	@ (8016140 <xTaskIncrementTick+0x154>)
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	68db      	ldr	r3, [r3, #12]
 8016080:	68db      	ldr	r3, [r3, #12]
 8016082:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016084:	68bb      	ldr	r3, [r7, #8]
 8016086:	685b      	ldr	r3, [r3, #4]
 8016088:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801608a:	693a      	ldr	r2, [r7, #16]
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	429a      	cmp	r2, r3
 8016090:	d203      	bcs.n	801609a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016092:	4a2e      	ldr	r2, [pc, #184]	@ (801614c <xTaskIncrementTick+0x160>)
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016098:	e02e      	b.n	80160f8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801609a:	68bb      	ldr	r3, [r7, #8]
 801609c:	3304      	adds	r3, #4
 801609e:	4618      	mov	r0, r3
 80160a0:	f7fe fe9c 	bl	8014ddc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80160a4:	68bb      	ldr	r3, [r7, #8]
 80160a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d004      	beq.n	80160b6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80160ac:	68bb      	ldr	r3, [r7, #8]
 80160ae:	3318      	adds	r3, #24
 80160b0:	4618      	mov	r0, r3
 80160b2:	f7fe fe93 	bl	8014ddc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80160b6:	68bb      	ldr	r3, [r7, #8]
 80160b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160ba:	2201      	movs	r2, #1
 80160bc:	409a      	lsls	r2, r3
 80160be:	4b24      	ldr	r3, [pc, #144]	@ (8016150 <xTaskIncrementTick+0x164>)
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	4313      	orrs	r3, r2
 80160c4:	4a22      	ldr	r2, [pc, #136]	@ (8016150 <xTaskIncrementTick+0x164>)
 80160c6:	6013      	str	r3, [r2, #0]
 80160c8:	68bb      	ldr	r3, [r7, #8]
 80160ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80160cc:	4613      	mov	r3, r2
 80160ce:	009b      	lsls	r3, r3, #2
 80160d0:	4413      	add	r3, r2
 80160d2:	009b      	lsls	r3, r3, #2
 80160d4:	4a1f      	ldr	r2, [pc, #124]	@ (8016154 <xTaskIncrementTick+0x168>)
 80160d6:	441a      	add	r2, r3
 80160d8:	68bb      	ldr	r3, [r7, #8]
 80160da:	3304      	adds	r3, #4
 80160dc:	4619      	mov	r1, r3
 80160de:	4610      	mov	r0, r2
 80160e0:	f7fe fe1f 	bl	8014d22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80160e4:	68bb      	ldr	r3, [r7, #8]
 80160e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80160e8:	4b1b      	ldr	r3, [pc, #108]	@ (8016158 <xTaskIncrementTick+0x16c>)
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160ee:	429a      	cmp	r2, r3
 80160f0:	d3b9      	bcc.n	8016066 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80160f2:	2301      	movs	r3, #1
 80160f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80160f6:	e7b6      	b.n	8016066 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80160f8:	4b17      	ldr	r3, [pc, #92]	@ (8016158 <xTaskIncrementTick+0x16c>)
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80160fe:	4915      	ldr	r1, [pc, #84]	@ (8016154 <xTaskIncrementTick+0x168>)
 8016100:	4613      	mov	r3, r2
 8016102:	009b      	lsls	r3, r3, #2
 8016104:	4413      	add	r3, r2
 8016106:	009b      	lsls	r3, r3, #2
 8016108:	440b      	add	r3, r1
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	2b01      	cmp	r3, #1
 801610e:	d907      	bls.n	8016120 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8016110:	2301      	movs	r3, #1
 8016112:	617b      	str	r3, [r7, #20]
 8016114:	e004      	b.n	8016120 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8016116:	4b11      	ldr	r3, [pc, #68]	@ (801615c <xTaskIncrementTick+0x170>)
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	3301      	adds	r3, #1
 801611c:	4a0f      	ldr	r2, [pc, #60]	@ (801615c <xTaskIncrementTick+0x170>)
 801611e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8016120:	4b0f      	ldr	r3, [pc, #60]	@ (8016160 <xTaskIncrementTick+0x174>)
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d001      	beq.n	801612c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8016128:	2301      	movs	r3, #1
 801612a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801612c:	697b      	ldr	r3, [r7, #20]
}
 801612e:	4618      	mov	r0, r3
 8016130:	3718      	adds	r7, #24
 8016132:	46bd      	mov	sp, r7
 8016134:	bd80      	pop	{r7, pc}
 8016136:	bf00      	nop
 8016138:	20002c00 	.word	0x20002c00
 801613c:	20002bdc 	.word	0x20002bdc
 8016140:	20002b90 	.word	0x20002b90
 8016144:	20002b94 	.word	0x20002b94
 8016148:	20002bf0 	.word	0x20002bf0
 801614c:	20002bf8 	.word	0x20002bf8
 8016150:	20002be0 	.word	0x20002be0
 8016154:	20002adc 	.word	0x20002adc
 8016158:	20002ad8 	.word	0x20002ad8
 801615c:	20002be8 	.word	0x20002be8
 8016160:	20002bec 	.word	0x20002bec

08016164 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016164:	b580      	push	{r7, lr}
 8016166:	b088      	sub	sp, #32
 8016168:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801616a:	4b3b      	ldr	r3, [pc, #236]	@ (8016258 <vTaskSwitchContext+0xf4>)
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d003      	beq.n	801617a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016172:	4b3a      	ldr	r3, [pc, #232]	@ (801625c <vTaskSwitchContext+0xf8>)
 8016174:	2201      	movs	r2, #1
 8016176:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016178:	e069      	b.n	801624e <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 801617a:	4b38      	ldr	r3, [pc, #224]	@ (801625c <vTaskSwitchContext+0xf8>)
 801617c:	2200      	movs	r2, #0
 801617e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8016180:	4b37      	ldr	r3, [pc, #220]	@ (8016260 <vTaskSwitchContext+0xfc>)
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016186:	61fb      	str	r3, [r7, #28]
 8016188:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 801618c:	61bb      	str	r3, [r7, #24]
 801618e:	69fb      	ldr	r3, [r7, #28]
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	69ba      	ldr	r2, [r7, #24]
 8016194:	429a      	cmp	r2, r3
 8016196:	d111      	bne.n	80161bc <vTaskSwitchContext+0x58>
 8016198:	69fb      	ldr	r3, [r7, #28]
 801619a:	3304      	adds	r3, #4
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	69ba      	ldr	r2, [r7, #24]
 80161a0:	429a      	cmp	r2, r3
 80161a2:	d10b      	bne.n	80161bc <vTaskSwitchContext+0x58>
 80161a4:	69fb      	ldr	r3, [r7, #28]
 80161a6:	3308      	adds	r3, #8
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	69ba      	ldr	r2, [r7, #24]
 80161ac:	429a      	cmp	r2, r3
 80161ae:	d105      	bne.n	80161bc <vTaskSwitchContext+0x58>
 80161b0:	69fb      	ldr	r3, [r7, #28]
 80161b2:	330c      	adds	r3, #12
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	69ba      	ldr	r2, [r7, #24]
 80161b8:	429a      	cmp	r2, r3
 80161ba:	d008      	beq.n	80161ce <vTaskSwitchContext+0x6a>
 80161bc:	4b28      	ldr	r3, [pc, #160]	@ (8016260 <vTaskSwitchContext+0xfc>)
 80161be:	681a      	ldr	r2, [r3, #0]
 80161c0:	4b27      	ldr	r3, [pc, #156]	@ (8016260 <vTaskSwitchContext+0xfc>)
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	3334      	adds	r3, #52	@ 0x34
 80161c6:	4619      	mov	r1, r3
 80161c8:	4610      	mov	r0, r2
 80161ca:	f7eb fdf6 	bl	8001dba <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80161ce:	4b25      	ldr	r3, [pc, #148]	@ (8016264 <vTaskSwitchContext+0x100>)
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	fab3 f383 	clz	r3, r3
 80161da:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80161dc:	7afb      	ldrb	r3, [r7, #11]
 80161de:	f1c3 031f 	rsb	r3, r3, #31
 80161e2:	617b      	str	r3, [r7, #20]
 80161e4:	4920      	ldr	r1, [pc, #128]	@ (8016268 <vTaskSwitchContext+0x104>)
 80161e6:	697a      	ldr	r2, [r7, #20]
 80161e8:	4613      	mov	r3, r2
 80161ea:	009b      	lsls	r3, r3, #2
 80161ec:	4413      	add	r3, r2
 80161ee:	009b      	lsls	r3, r3, #2
 80161f0:	440b      	add	r3, r1
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d10d      	bne.n	8016214 <vTaskSwitchContext+0xb0>
	__asm volatile
 80161f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80161fc:	b672      	cpsid	i
 80161fe:	f383 8811 	msr	BASEPRI, r3
 8016202:	f3bf 8f6f 	isb	sy
 8016206:	f3bf 8f4f 	dsb	sy
 801620a:	b662      	cpsie	i
 801620c:	607b      	str	r3, [r7, #4]
}
 801620e:	bf00      	nop
 8016210:	bf00      	nop
 8016212:	e7fd      	b.n	8016210 <vTaskSwitchContext+0xac>
 8016214:	697a      	ldr	r2, [r7, #20]
 8016216:	4613      	mov	r3, r2
 8016218:	009b      	lsls	r3, r3, #2
 801621a:	4413      	add	r3, r2
 801621c:	009b      	lsls	r3, r3, #2
 801621e:	4a12      	ldr	r2, [pc, #72]	@ (8016268 <vTaskSwitchContext+0x104>)
 8016220:	4413      	add	r3, r2
 8016222:	613b      	str	r3, [r7, #16]
 8016224:	693b      	ldr	r3, [r7, #16]
 8016226:	685b      	ldr	r3, [r3, #4]
 8016228:	685a      	ldr	r2, [r3, #4]
 801622a:	693b      	ldr	r3, [r7, #16]
 801622c:	605a      	str	r2, [r3, #4]
 801622e:	693b      	ldr	r3, [r7, #16]
 8016230:	685a      	ldr	r2, [r3, #4]
 8016232:	693b      	ldr	r3, [r7, #16]
 8016234:	3308      	adds	r3, #8
 8016236:	429a      	cmp	r2, r3
 8016238:	d104      	bne.n	8016244 <vTaskSwitchContext+0xe0>
 801623a:	693b      	ldr	r3, [r7, #16]
 801623c:	685b      	ldr	r3, [r3, #4]
 801623e:	685a      	ldr	r2, [r3, #4]
 8016240:	693b      	ldr	r3, [r7, #16]
 8016242:	605a      	str	r2, [r3, #4]
 8016244:	693b      	ldr	r3, [r7, #16]
 8016246:	685b      	ldr	r3, [r3, #4]
 8016248:	68db      	ldr	r3, [r3, #12]
 801624a:	4a05      	ldr	r2, [pc, #20]	@ (8016260 <vTaskSwitchContext+0xfc>)
 801624c:	6013      	str	r3, [r2, #0]
}
 801624e:	bf00      	nop
 8016250:	3720      	adds	r7, #32
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}
 8016256:	bf00      	nop
 8016258:	20002c00 	.word	0x20002c00
 801625c:	20002bec 	.word	0x20002bec
 8016260:	20002ad8 	.word	0x20002ad8
 8016264:	20002be0 	.word	0x20002be0
 8016268:	20002adc 	.word	0x20002adc

0801626c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801626c:	b580      	push	{r7, lr}
 801626e:	b084      	sub	sp, #16
 8016270:	af00      	add	r7, sp, #0
 8016272:	6078      	str	r0, [r7, #4]
 8016274:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	2b00      	cmp	r3, #0
 801627a:	d10d      	bne.n	8016298 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 801627c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016280:	b672      	cpsid	i
 8016282:	f383 8811 	msr	BASEPRI, r3
 8016286:	f3bf 8f6f 	isb	sy
 801628a:	f3bf 8f4f 	dsb	sy
 801628e:	b662      	cpsie	i
 8016290:	60fb      	str	r3, [r7, #12]
}
 8016292:	bf00      	nop
 8016294:	bf00      	nop
 8016296:	e7fd      	b.n	8016294 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016298:	4b07      	ldr	r3, [pc, #28]	@ (80162b8 <vTaskPlaceOnEventList+0x4c>)
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	3318      	adds	r3, #24
 801629e:	4619      	mov	r1, r3
 80162a0:	6878      	ldr	r0, [r7, #4]
 80162a2:	f7fe fd62 	bl	8014d6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80162a6:	2101      	movs	r1, #1
 80162a8:	6838      	ldr	r0, [r7, #0]
 80162aa:	f000 fa7b 	bl	80167a4 <prvAddCurrentTaskToDelayedList>
}
 80162ae:	bf00      	nop
 80162b0:	3710      	adds	r7, #16
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}
 80162b6:	bf00      	nop
 80162b8:	20002ad8 	.word	0x20002ad8

080162bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	b086      	sub	sp, #24
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	68db      	ldr	r3, [r3, #12]
 80162c8:	68db      	ldr	r3, [r3, #12]
 80162ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80162cc:	693b      	ldr	r3, [r7, #16]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d10d      	bne.n	80162ee <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80162d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162d6:	b672      	cpsid	i
 80162d8:	f383 8811 	msr	BASEPRI, r3
 80162dc:	f3bf 8f6f 	isb	sy
 80162e0:	f3bf 8f4f 	dsb	sy
 80162e4:	b662      	cpsie	i
 80162e6:	60fb      	str	r3, [r7, #12]
}
 80162e8:	bf00      	nop
 80162ea:	bf00      	nop
 80162ec:	e7fd      	b.n	80162ea <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80162ee:	693b      	ldr	r3, [r7, #16]
 80162f0:	3318      	adds	r3, #24
 80162f2:	4618      	mov	r0, r3
 80162f4:	f7fe fd72 	bl	8014ddc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80162f8:	4b1d      	ldr	r3, [pc, #116]	@ (8016370 <xTaskRemoveFromEventList+0xb4>)
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d11c      	bne.n	801633a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016300:	693b      	ldr	r3, [r7, #16]
 8016302:	3304      	adds	r3, #4
 8016304:	4618      	mov	r0, r3
 8016306:	f7fe fd69 	bl	8014ddc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801630a:	693b      	ldr	r3, [r7, #16]
 801630c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801630e:	2201      	movs	r2, #1
 8016310:	409a      	lsls	r2, r3
 8016312:	4b18      	ldr	r3, [pc, #96]	@ (8016374 <xTaskRemoveFromEventList+0xb8>)
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	4313      	orrs	r3, r2
 8016318:	4a16      	ldr	r2, [pc, #88]	@ (8016374 <xTaskRemoveFromEventList+0xb8>)
 801631a:	6013      	str	r3, [r2, #0]
 801631c:	693b      	ldr	r3, [r7, #16]
 801631e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016320:	4613      	mov	r3, r2
 8016322:	009b      	lsls	r3, r3, #2
 8016324:	4413      	add	r3, r2
 8016326:	009b      	lsls	r3, r3, #2
 8016328:	4a13      	ldr	r2, [pc, #76]	@ (8016378 <xTaskRemoveFromEventList+0xbc>)
 801632a:	441a      	add	r2, r3
 801632c:	693b      	ldr	r3, [r7, #16]
 801632e:	3304      	adds	r3, #4
 8016330:	4619      	mov	r1, r3
 8016332:	4610      	mov	r0, r2
 8016334:	f7fe fcf5 	bl	8014d22 <vListInsertEnd>
 8016338:	e005      	b.n	8016346 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801633a:	693b      	ldr	r3, [r7, #16]
 801633c:	3318      	adds	r3, #24
 801633e:	4619      	mov	r1, r3
 8016340:	480e      	ldr	r0, [pc, #56]	@ (801637c <xTaskRemoveFromEventList+0xc0>)
 8016342:	f7fe fcee 	bl	8014d22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016346:	693b      	ldr	r3, [r7, #16]
 8016348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801634a:	4b0d      	ldr	r3, [pc, #52]	@ (8016380 <xTaskRemoveFromEventList+0xc4>)
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016350:	429a      	cmp	r2, r3
 8016352:	d905      	bls.n	8016360 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016354:	2301      	movs	r3, #1
 8016356:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016358:	4b0a      	ldr	r3, [pc, #40]	@ (8016384 <xTaskRemoveFromEventList+0xc8>)
 801635a:	2201      	movs	r2, #1
 801635c:	601a      	str	r2, [r3, #0]
 801635e:	e001      	b.n	8016364 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8016360:	2300      	movs	r3, #0
 8016362:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016364:	697b      	ldr	r3, [r7, #20]
}
 8016366:	4618      	mov	r0, r3
 8016368:	3718      	adds	r7, #24
 801636a:	46bd      	mov	sp, r7
 801636c:	bd80      	pop	{r7, pc}
 801636e:	bf00      	nop
 8016370:	20002c00 	.word	0x20002c00
 8016374:	20002be0 	.word	0x20002be0
 8016378:	20002adc 	.word	0x20002adc
 801637c:	20002b98 	.word	0x20002b98
 8016380:	20002ad8 	.word	0x20002ad8
 8016384:	20002bec 	.word	0x20002bec

08016388 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016388:	b480      	push	{r7}
 801638a:	b083      	sub	sp, #12
 801638c:	af00      	add	r7, sp, #0
 801638e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016390:	4b06      	ldr	r3, [pc, #24]	@ (80163ac <vTaskInternalSetTimeOutState+0x24>)
 8016392:	681a      	ldr	r2, [r3, #0]
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016398:	4b05      	ldr	r3, [pc, #20]	@ (80163b0 <vTaskInternalSetTimeOutState+0x28>)
 801639a:	681a      	ldr	r2, [r3, #0]
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	605a      	str	r2, [r3, #4]
}
 80163a0:	bf00      	nop
 80163a2:	370c      	adds	r7, #12
 80163a4:	46bd      	mov	sp, r7
 80163a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163aa:	4770      	bx	lr
 80163ac:	20002bf0 	.word	0x20002bf0
 80163b0:	20002bdc 	.word	0x20002bdc

080163b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80163b4:	b580      	push	{r7, lr}
 80163b6:	b088      	sub	sp, #32
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	6078      	str	r0, [r7, #4]
 80163bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d10d      	bne.n	80163e0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80163c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163c8:	b672      	cpsid	i
 80163ca:	f383 8811 	msr	BASEPRI, r3
 80163ce:	f3bf 8f6f 	isb	sy
 80163d2:	f3bf 8f4f 	dsb	sy
 80163d6:	b662      	cpsie	i
 80163d8:	613b      	str	r3, [r7, #16]
}
 80163da:	bf00      	nop
 80163dc:	bf00      	nop
 80163de:	e7fd      	b.n	80163dc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80163e0:	683b      	ldr	r3, [r7, #0]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d10d      	bne.n	8016402 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80163e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163ea:	b672      	cpsid	i
 80163ec:	f383 8811 	msr	BASEPRI, r3
 80163f0:	f3bf 8f6f 	isb	sy
 80163f4:	f3bf 8f4f 	dsb	sy
 80163f8:	b662      	cpsie	i
 80163fa:	60fb      	str	r3, [r7, #12]
}
 80163fc:	bf00      	nop
 80163fe:	bf00      	nop
 8016400:	e7fd      	b.n	80163fe <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8016402:	f000 fb43 	bl	8016a8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016406:	4b1d      	ldr	r3, [pc, #116]	@ (801647c <xTaskCheckForTimeOut+0xc8>)
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	685b      	ldr	r3, [r3, #4]
 8016410:	69ba      	ldr	r2, [r7, #24]
 8016412:	1ad3      	subs	r3, r2, r3
 8016414:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016416:	683b      	ldr	r3, [r7, #0]
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801641e:	d102      	bne.n	8016426 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016420:	2300      	movs	r3, #0
 8016422:	61fb      	str	r3, [r7, #28]
 8016424:	e023      	b.n	801646e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	681a      	ldr	r2, [r3, #0]
 801642a:	4b15      	ldr	r3, [pc, #84]	@ (8016480 <xTaskCheckForTimeOut+0xcc>)
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	429a      	cmp	r2, r3
 8016430:	d007      	beq.n	8016442 <xTaskCheckForTimeOut+0x8e>
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	685b      	ldr	r3, [r3, #4]
 8016436:	69ba      	ldr	r2, [r7, #24]
 8016438:	429a      	cmp	r2, r3
 801643a:	d302      	bcc.n	8016442 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801643c:	2301      	movs	r3, #1
 801643e:	61fb      	str	r3, [r7, #28]
 8016440:	e015      	b.n	801646e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016442:	683b      	ldr	r3, [r7, #0]
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	697a      	ldr	r2, [r7, #20]
 8016448:	429a      	cmp	r2, r3
 801644a:	d20b      	bcs.n	8016464 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801644c:	683b      	ldr	r3, [r7, #0]
 801644e:	681a      	ldr	r2, [r3, #0]
 8016450:	697b      	ldr	r3, [r7, #20]
 8016452:	1ad2      	subs	r2, r2, r3
 8016454:	683b      	ldr	r3, [r7, #0]
 8016456:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016458:	6878      	ldr	r0, [r7, #4]
 801645a:	f7ff ff95 	bl	8016388 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801645e:	2300      	movs	r3, #0
 8016460:	61fb      	str	r3, [r7, #28]
 8016462:	e004      	b.n	801646e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8016464:	683b      	ldr	r3, [r7, #0]
 8016466:	2200      	movs	r2, #0
 8016468:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801646a:	2301      	movs	r3, #1
 801646c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801646e:	f000 fb43 	bl	8016af8 <vPortExitCritical>

	return xReturn;
 8016472:	69fb      	ldr	r3, [r7, #28]
}
 8016474:	4618      	mov	r0, r3
 8016476:	3720      	adds	r7, #32
 8016478:	46bd      	mov	sp, r7
 801647a:	bd80      	pop	{r7, pc}
 801647c:	20002bdc 	.word	0x20002bdc
 8016480:	20002bf0 	.word	0x20002bf0

08016484 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016484:	b480      	push	{r7}
 8016486:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016488:	4b03      	ldr	r3, [pc, #12]	@ (8016498 <vTaskMissedYield+0x14>)
 801648a:	2201      	movs	r2, #1
 801648c:	601a      	str	r2, [r3, #0]
}
 801648e:	bf00      	nop
 8016490:	46bd      	mov	sp, r7
 8016492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016496:	4770      	bx	lr
 8016498:	20002bec 	.word	0x20002bec

0801649c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801649c:	b580      	push	{r7, lr}
 801649e:	b082      	sub	sp, #8
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80164a4:	f000 f854 	bl	8016550 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80164a8:	4b07      	ldr	r3, [pc, #28]	@ (80164c8 <prvIdleTask+0x2c>)
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	2b01      	cmp	r3, #1
 80164ae:	d907      	bls.n	80164c0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80164b0:	4b06      	ldr	r3, [pc, #24]	@ (80164cc <prvIdleTask+0x30>)
 80164b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80164b6:	601a      	str	r2, [r3, #0]
 80164b8:	f3bf 8f4f 	dsb	sy
 80164bc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80164c0:	f7eb fc74 	bl	8001dac <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80164c4:	e7ee      	b.n	80164a4 <prvIdleTask+0x8>
 80164c6:	bf00      	nop
 80164c8:	20002adc 	.word	0x20002adc
 80164cc:	e000ed04 	.word	0xe000ed04

080164d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80164d0:	b580      	push	{r7, lr}
 80164d2:	b082      	sub	sp, #8
 80164d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80164d6:	2300      	movs	r3, #0
 80164d8:	607b      	str	r3, [r7, #4]
 80164da:	e00c      	b.n	80164f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80164dc:	687a      	ldr	r2, [r7, #4]
 80164de:	4613      	mov	r3, r2
 80164e0:	009b      	lsls	r3, r3, #2
 80164e2:	4413      	add	r3, r2
 80164e4:	009b      	lsls	r3, r3, #2
 80164e6:	4a12      	ldr	r2, [pc, #72]	@ (8016530 <prvInitialiseTaskLists+0x60>)
 80164e8:	4413      	add	r3, r2
 80164ea:	4618      	mov	r0, r3
 80164ec:	f7fe fbec 	bl	8014cc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	3301      	adds	r3, #1
 80164f4:	607b      	str	r3, [r7, #4]
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	2b06      	cmp	r3, #6
 80164fa:	d9ef      	bls.n	80164dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80164fc:	480d      	ldr	r0, [pc, #52]	@ (8016534 <prvInitialiseTaskLists+0x64>)
 80164fe:	f7fe fbe3 	bl	8014cc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016502:	480d      	ldr	r0, [pc, #52]	@ (8016538 <prvInitialiseTaskLists+0x68>)
 8016504:	f7fe fbe0 	bl	8014cc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016508:	480c      	ldr	r0, [pc, #48]	@ (801653c <prvInitialiseTaskLists+0x6c>)
 801650a:	f7fe fbdd 	bl	8014cc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801650e:	480c      	ldr	r0, [pc, #48]	@ (8016540 <prvInitialiseTaskLists+0x70>)
 8016510:	f7fe fbda 	bl	8014cc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016514:	480b      	ldr	r0, [pc, #44]	@ (8016544 <prvInitialiseTaskLists+0x74>)
 8016516:	f7fe fbd7 	bl	8014cc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801651a:	4b0b      	ldr	r3, [pc, #44]	@ (8016548 <prvInitialiseTaskLists+0x78>)
 801651c:	4a05      	ldr	r2, [pc, #20]	@ (8016534 <prvInitialiseTaskLists+0x64>)
 801651e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016520:	4b0a      	ldr	r3, [pc, #40]	@ (801654c <prvInitialiseTaskLists+0x7c>)
 8016522:	4a05      	ldr	r2, [pc, #20]	@ (8016538 <prvInitialiseTaskLists+0x68>)
 8016524:	601a      	str	r2, [r3, #0]
}
 8016526:	bf00      	nop
 8016528:	3708      	adds	r7, #8
 801652a:	46bd      	mov	sp, r7
 801652c:	bd80      	pop	{r7, pc}
 801652e:	bf00      	nop
 8016530:	20002adc 	.word	0x20002adc
 8016534:	20002b68 	.word	0x20002b68
 8016538:	20002b7c 	.word	0x20002b7c
 801653c:	20002b98 	.word	0x20002b98
 8016540:	20002bac 	.word	0x20002bac
 8016544:	20002bc4 	.word	0x20002bc4
 8016548:	20002b90 	.word	0x20002b90
 801654c:	20002b94 	.word	0x20002b94

08016550 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016550:	b580      	push	{r7, lr}
 8016552:	b082      	sub	sp, #8
 8016554:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016556:	e019      	b.n	801658c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016558:	f000 fa98 	bl	8016a8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801655c:	4b10      	ldr	r3, [pc, #64]	@ (80165a0 <prvCheckTasksWaitingTermination+0x50>)
 801655e:	68db      	ldr	r3, [r3, #12]
 8016560:	68db      	ldr	r3, [r3, #12]
 8016562:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	3304      	adds	r3, #4
 8016568:	4618      	mov	r0, r3
 801656a:	f7fe fc37 	bl	8014ddc <uxListRemove>
				--uxCurrentNumberOfTasks;
 801656e:	4b0d      	ldr	r3, [pc, #52]	@ (80165a4 <prvCheckTasksWaitingTermination+0x54>)
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	3b01      	subs	r3, #1
 8016574:	4a0b      	ldr	r2, [pc, #44]	@ (80165a4 <prvCheckTasksWaitingTermination+0x54>)
 8016576:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016578:	4b0b      	ldr	r3, [pc, #44]	@ (80165a8 <prvCheckTasksWaitingTermination+0x58>)
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	3b01      	subs	r3, #1
 801657e:	4a0a      	ldr	r2, [pc, #40]	@ (80165a8 <prvCheckTasksWaitingTermination+0x58>)
 8016580:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016582:	f000 fab9 	bl	8016af8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016586:	6878      	ldr	r0, [r7, #4]
 8016588:	f000 f810 	bl	80165ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801658c:	4b06      	ldr	r3, [pc, #24]	@ (80165a8 <prvCheckTasksWaitingTermination+0x58>)
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	2b00      	cmp	r3, #0
 8016592:	d1e1      	bne.n	8016558 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016594:	bf00      	nop
 8016596:	bf00      	nop
 8016598:	3708      	adds	r7, #8
 801659a:	46bd      	mov	sp, r7
 801659c:	bd80      	pop	{r7, pc}
 801659e:	bf00      	nop
 80165a0:	20002bac 	.word	0x20002bac
 80165a4:	20002bd8 	.word	0x20002bd8
 80165a8:	20002bc0 	.word	0x20002bc0

080165ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80165ac:	b580      	push	{r7, lr}
 80165ae:	b084      	sub	sp, #16
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d108      	bne.n	80165d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80165c2:	4618      	mov	r0, r3
 80165c4:	f000 fc62 	bl	8016e8c <vPortFree>
				vPortFree( pxTCB );
 80165c8:	6878      	ldr	r0, [r7, #4]
 80165ca:	f000 fc5f 	bl	8016e8c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80165ce:	e01b      	b.n	8016608 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80165d6:	2b01      	cmp	r3, #1
 80165d8:	d103      	bne.n	80165e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80165da:	6878      	ldr	r0, [r7, #4]
 80165dc:	f000 fc56 	bl	8016e8c <vPortFree>
	}
 80165e0:	e012      	b.n	8016608 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80165e8:	2b02      	cmp	r3, #2
 80165ea:	d00d      	beq.n	8016608 <prvDeleteTCB+0x5c>
	__asm volatile
 80165ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165f0:	b672      	cpsid	i
 80165f2:	f383 8811 	msr	BASEPRI, r3
 80165f6:	f3bf 8f6f 	isb	sy
 80165fa:	f3bf 8f4f 	dsb	sy
 80165fe:	b662      	cpsie	i
 8016600:	60fb      	str	r3, [r7, #12]
}
 8016602:	bf00      	nop
 8016604:	bf00      	nop
 8016606:	e7fd      	b.n	8016604 <prvDeleteTCB+0x58>
	}
 8016608:	bf00      	nop
 801660a:	3710      	adds	r7, #16
 801660c:	46bd      	mov	sp, r7
 801660e:	bd80      	pop	{r7, pc}

08016610 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016610:	b480      	push	{r7}
 8016612:	b083      	sub	sp, #12
 8016614:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016616:	4b0c      	ldr	r3, [pc, #48]	@ (8016648 <prvResetNextTaskUnblockTime+0x38>)
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d104      	bne.n	801662a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016620:	4b0a      	ldr	r3, [pc, #40]	@ (801664c <prvResetNextTaskUnblockTime+0x3c>)
 8016622:	f04f 32ff 	mov.w	r2, #4294967295
 8016626:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016628:	e008      	b.n	801663c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801662a:	4b07      	ldr	r3, [pc, #28]	@ (8016648 <prvResetNextTaskUnblockTime+0x38>)
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	68db      	ldr	r3, [r3, #12]
 8016630:	68db      	ldr	r3, [r3, #12]
 8016632:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	685b      	ldr	r3, [r3, #4]
 8016638:	4a04      	ldr	r2, [pc, #16]	@ (801664c <prvResetNextTaskUnblockTime+0x3c>)
 801663a:	6013      	str	r3, [r2, #0]
}
 801663c:	bf00      	nop
 801663e:	370c      	adds	r7, #12
 8016640:	46bd      	mov	sp, r7
 8016642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016646:	4770      	bx	lr
 8016648:	20002b90 	.word	0x20002b90
 801664c:	20002bf8 	.word	0x20002bf8

08016650 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016650:	b480      	push	{r7}
 8016652:	b083      	sub	sp, #12
 8016654:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016656:	4b0b      	ldr	r3, [pc, #44]	@ (8016684 <xTaskGetSchedulerState+0x34>)
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d102      	bne.n	8016664 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801665e:	2301      	movs	r3, #1
 8016660:	607b      	str	r3, [r7, #4]
 8016662:	e008      	b.n	8016676 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016664:	4b08      	ldr	r3, [pc, #32]	@ (8016688 <xTaskGetSchedulerState+0x38>)
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	2b00      	cmp	r3, #0
 801666a:	d102      	bne.n	8016672 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801666c:	2302      	movs	r3, #2
 801666e:	607b      	str	r3, [r7, #4]
 8016670:	e001      	b.n	8016676 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016672:	2300      	movs	r3, #0
 8016674:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016676:	687b      	ldr	r3, [r7, #4]
	}
 8016678:	4618      	mov	r0, r3
 801667a:	370c      	adds	r7, #12
 801667c:	46bd      	mov	sp, r7
 801667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016682:	4770      	bx	lr
 8016684:	20002be4 	.word	0x20002be4
 8016688:	20002c00 	.word	0x20002c00

0801668c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801668c:	b580      	push	{r7, lr}
 801668e:	b086      	sub	sp, #24
 8016690:	af00      	add	r7, sp, #0
 8016692:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016698:	2300      	movs	r3, #0
 801669a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d074      	beq.n	801678c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80166a2:	4b3d      	ldr	r3, [pc, #244]	@ (8016798 <xTaskPriorityDisinherit+0x10c>)
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	693a      	ldr	r2, [r7, #16]
 80166a8:	429a      	cmp	r2, r3
 80166aa:	d00d      	beq.n	80166c8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80166ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166b0:	b672      	cpsid	i
 80166b2:	f383 8811 	msr	BASEPRI, r3
 80166b6:	f3bf 8f6f 	isb	sy
 80166ba:	f3bf 8f4f 	dsb	sy
 80166be:	b662      	cpsie	i
 80166c0:	60fb      	str	r3, [r7, #12]
}
 80166c2:	bf00      	nop
 80166c4:	bf00      	nop
 80166c6:	e7fd      	b.n	80166c4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80166c8:	693b      	ldr	r3, [r7, #16]
 80166ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d10d      	bne.n	80166ec <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80166d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166d4:	b672      	cpsid	i
 80166d6:	f383 8811 	msr	BASEPRI, r3
 80166da:	f3bf 8f6f 	isb	sy
 80166de:	f3bf 8f4f 	dsb	sy
 80166e2:	b662      	cpsie	i
 80166e4:	60bb      	str	r3, [r7, #8]
}
 80166e6:	bf00      	nop
 80166e8:	bf00      	nop
 80166ea:	e7fd      	b.n	80166e8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80166ec:	693b      	ldr	r3, [r7, #16]
 80166ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80166f0:	1e5a      	subs	r2, r3, #1
 80166f2:	693b      	ldr	r3, [r7, #16]
 80166f4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80166f6:	693b      	ldr	r3, [r7, #16]
 80166f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80166fa:	693b      	ldr	r3, [r7, #16]
 80166fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80166fe:	429a      	cmp	r2, r3
 8016700:	d044      	beq.n	801678c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016702:	693b      	ldr	r3, [r7, #16]
 8016704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016706:	2b00      	cmp	r3, #0
 8016708:	d140      	bne.n	801678c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801670a:	693b      	ldr	r3, [r7, #16]
 801670c:	3304      	adds	r3, #4
 801670e:	4618      	mov	r0, r3
 8016710:	f7fe fb64 	bl	8014ddc <uxListRemove>
 8016714:	4603      	mov	r3, r0
 8016716:	2b00      	cmp	r3, #0
 8016718:	d115      	bne.n	8016746 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801671a:	693b      	ldr	r3, [r7, #16]
 801671c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801671e:	491f      	ldr	r1, [pc, #124]	@ (801679c <xTaskPriorityDisinherit+0x110>)
 8016720:	4613      	mov	r3, r2
 8016722:	009b      	lsls	r3, r3, #2
 8016724:	4413      	add	r3, r2
 8016726:	009b      	lsls	r3, r3, #2
 8016728:	440b      	add	r3, r1
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	2b00      	cmp	r3, #0
 801672e:	d10a      	bne.n	8016746 <xTaskPriorityDisinherit+0xba>
 8016730:	693b      	ldr	r3, [r7, #16]
 8016732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016734:	2201      	movs	r2, #1
 8016736:	fa02 f303 	lsl.w	r3, r2, r3
 801673a:	43da      	mvns	r2, r3
 801673c:	4b18      	ldr	r3, [pc, #96]	@ (80167a0 <xTaskPriorityDisinherit+0x114>)
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	4013      	ands	r3, r2
 8016742:	4a17      	ldr	r2, [pc, #92]	@ (80167a0 <xTaskPriorityDisinherit+0x114>)
 8016744:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016746:	693b      	ldr	r3, [r7, #16]
 8016748:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801674a:	693b      	ldr	r3, [r7, #16]
 801674c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801674e:	693b      	ldr	r3, [r7, #16]
 8016750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016752:	f1c3 0207 	rsb	r2, r3, #7
 8016756:	693b      	ldr	r3, [r7, #16]
 8016758:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801675a:	693b      	ldr	r3, [r7, #16]
 801675c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801675e:	2201      	movs	r2, #1
 8016760:	409a      	lsls	r2, r3
 8016762:	4b0f      	ldr	r3, [pc, #60]	@ (80167a0 <xTaskPriorityDisinherit+0x114>)
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	4313      	orrs	r3, r2
 8016768:	4a0d      	ldr	r2, [pc, #52]	@ (80167a0 <xTaskPriorityDisinherit+0x114>)
 801676a:	6013      	str	r3, [r2, #0]
 801676c:	693b      	ldr	r3, [r7, #16]
 801676e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016770:	4613      	mov	r3, r2
 8016772:	009b      	lsls	r3, r3, #2
 8016774:	4413      	add	r3, r2
 8016776:	009b      	lsls	r3, r3, #2
 8016778:	4a08      	ldr	r2, [pc, #32]	@ (801679c <xTaskPriorityDisinherit+0x110>)
 801677a:	441a      	add	r2, r3
 801677c:	693b      	ldr	r3, [r7, #16]
 801677e:	3304      	adds	r3, #4
 8016780:	4619      	mov	r1, r3
 8016782:	4610      	mov	r0, r2
 8016784:	f7fe facd 	bl	8014d22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016788:	2301      	movs	r3, #1
 801678a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801678c:	697b      	ldr	r3, [r7, #20]
	}
 801678e:	4618      	mov	r0, r3
 8016790:	3718      	adds	r7, #24
 8016792:	46bd      	mov	sp, r7
 8016794:	bd80      	pop	{r7, pc}
 8016796:	bf00      	nop
 8016798:	20002ad8 	.word	0x20002ad8
 801679c:	20002adc 	.word	0x20002adc
 80167a0:	20002be0 	.word	0x20002be0

080167a4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b084      	sub	sp, #16
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	6078      	str	r0, [r7, #4]
 80167ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80167ae:	4b29      	ldr	r3, [pc, #164]	@ (8016854 <prvAddCurrentTaskToDelayedList+0xb0>)
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80167b4:	4b28      	ldr	r3, [pc, #160]	@ (8016858 <prvAddCurrentTaskToDelayedList+0xb4>)
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	3304      	adds	r3, #4
 80167ba:	4618      	mov	r0, r3
 80167bc:	f7fe fb0e 	bl	8014ddc <uxListRemove>
 80167c0:	4603      	mov	r3, r0
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d10b      	bne.n	80167de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80167c6:	4b24      	ldr	r3, [pc, #144]	@ (8016858 <prvAddCurrentTaskToDelayedList+0xb4>)
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80167cc:	2201      	movs	r2, #1
 80167ce:	fa02 f303 	lsl.w	r3, r2, r3
 80167d2:	43da      	mvns	r2, r3
 80167d4:	4b21      	ldr	r3, [pc, #132]	@ (801685c <prvAddCurrentTaskToDelayedList+0xb8>)
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	4013      	ands	r3, r2
 80167da:	4a20      	ldr	r2, [pc, #128]	@ (801685c <prvAddCurrentTaskToDelayedList+0xb8>)
 80167dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167e4:	d10a      	bne.n	80167fc <prvAddCurrentTaskToDelayedList+0x58>
 80167e6:	683b      	ldr	r3, [r7, #0]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d007      	beq.n	80167fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80167ec:	4b1a      	ldr	r3, [pc, #104]	@ (8016858 <prvAddCurrentTaskToDelayedList+0xb4>)
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	3304      	adds	r3, #4
 80167f2:	4619      	mov	r1, r3
 80167f4:	481a      	ldr	r0, [pc, #104]	@ (8016860 <prvAddCurrentTaskToDelayedList+0xbc>)
 80167f6:	f7fe fa94 	bl	8014d22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80167fa:	e026      	b.n	801684a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80167fc:	68fa      	ldr	r2, [r7, #12]
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	4413      	add	r3, r2
 8016802:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016804:	4b14      	ldr	r3, [pc, #80]	@ (8016858 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	68ba      	ldr	r2, [r7, #8]
 801680a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801680c:	68ba      	ldr	r2, [r7, #8]
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	429a      	cmp	r2, r3
 8016812:	d209      	bcs.n	8016828 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016814:	4b13      	ldr	r3, [pc, #76]	@ (8016864 <prvAddCurrentTaskToDelayedList+0xc0>)
 8016816:	681a      	ldr	r2, [r3, #0]
 8016818:	4b0f      	ldr	r3, [pc, #60]	@ (8016858 <prvAddCurrentTaskToDelayedList+0xb4>)
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	3304      	adds	r3, #4
 801681e:	4619      	mov	r1, r3
 8016820:	4610      	mov	r0, r2
 8016822:	f7fe faa2 	bl	8014d6a <vListInsert>
}
 8016826:	e010      	b.n	801684a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016828:	4b0f      	ldr	r3, [pc, #60]	@ (8016868 <prvAddCurrentTaskToDelayedList+0xc4>)
 801682a:	681a      	ldr	r2, [r3, #0]
 801682c:	4b0a      	ldr	r3, [pc, #40]	@ (8016858 <prvAddCurrentTaskToDelayedList+0xb4>)
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	3304      	adds	r3, #4
 8016832:	4619      	mov	r1, r3
 8016834:	4610      	mov	r0, r2
 8016836:	f7fe fa98 	bl	8014d6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801683a:	4b0c      	ldr	r3, [pc, #48]	@ (801686c <prvAddCurrentTaskToDelayedList+0xc8>)
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	68ba      	ldr	r2, [r7, #8]
 8016840:	429a      	cmp	r2, r3
 8016842:	d202      	bcs.n	801684a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016844:	4a09      	ldr	r2, [pc, #36]	@ (801686c <prvAddCurrentTaskToDelayedList+0xc8>)
 8016846:	68bb      	ldr	r3, [r7, #8]
 8016848:	6013      	str	r3, [r2, #0]
}
 801684a:	bf00      	nop
 801684c:	3710      	adds	r7, #16
 801684e:	46bd      	mov	sp, r7
 8016850:	bd80      	pop	{r7, pc}
 8016852:	bf00      	nop
 8016854:	20002bdc 	.word	0x20002bdc
 8016858:	20002ad8 	.word	0x20002ad8
 801685c:	20002be0 	.word	0x20002be0
 8016860:	20002bc4 	.word	0x20002bc4
 8016864:	20002b94 	.word	0x20002b94
 8016868:	20002b90 	.word	0x20002b90
 801686c:	20002bf8 	.word	0x20002bf8

08016870 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016870:	b480      	push	{r7}
 8016872:	b085      	sub	sp, #20
 8016874:	af00      	add	r7, sp, #0
 8016876:	60f8      	str	r0, [r7, #12]
 8016878:	60b9      	str	r1, [r7, #8]
 801687a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	3b04      	subs	r3, #4
 8016880:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8016888:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	3b04      	subs	r3, #4
 801688e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016890:	68bb      	ldr	r3, [r7, #8]
 8016892:	f023 0201 	bic.w	r2, r3, #1
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	3b04      	subs	r3, #4
 801689e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80168a0:	4a0c      	ldr	r2, [pc, #48]	@ (80168d4 <pxPortInitialiseStack+0x64>)
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	3b14      	subs	r3, #20
 80168aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80168ac:	687a      	ldr	r2, [r7, #4]
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	3b04      	subs	r3, #4
 80168b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	f06f 0202 	mvn.w	r2, #2
 80168be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	3b20      	subs	r3, #32
 80168c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80168c6:	68fb      	ldr	r3, [r7, #12]
}
 80168c8:	4618      	mov	r0, r3
 80168ca:	3714      	adds	r7, #20
 80168cc:	46bd      	mov	sp, r7
 80168ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d2:	4770      	bx	lr
 80168d4:	080168d9 	.word	0x080168d9

080168d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80168d8:	b480      	push	{r7}
 80168da:	b085      	sub	sp, #20
 80168dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80168de:	2300      	movs	r3, #0
 80168e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80168e2:	4b15      	ldr	r3, [pc, #84]	@ (8016938 <prvTaskExitError+0x60>)
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168ea:	d00d      	beq.n	8016908 <prvTaskExitError+0x30>
	__asm volatile
 80168ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80168f0:	b672      	cpsid	i
 80168f2:	f383 8811 	msr	BASEPRI, r3
 80168f6:	f3bf 8f6f 	isb	sy
 80168fa:	f3bf 8f4f 	dsb	sy
 80168fe:	b662      	cpsie	i
 8016900:	60fb      	str	r3, [r7, #12]
}
 8016902:	bf00      	nop
 8016904:	bf00      	nop
 8016906:	e7fd      	b.n	8016904 <prvTaskExitError+0x2c>
	__asm volatile
 8016908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801690c:	b672      	cpsid	i
 801690e:	f383 8811 	msr	BASEPRI, r3
 8016912:	f3bf 8f6f 	isb	sy
 8016916:	f3bf 8f4f 	dsb	sy
 801691a:	b662      	cpsie	i
 801691c:	60bb      	str	r3, [r7, #8]
}
 801691e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016920:	bf00      	nop
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d0fc      	beq.n	8016922 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016928:	bf00      	nop
 801692a:	bf00      	nop
 801692c:	3714      	adds	r7, #20
 801692e:	46bd      	mov	sp, r7
 8016930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016934:	4770      	bx	lr
 8016936:	bf00      	nop
 8016938:	20000070 	.word	0x20000070
 801693c:	00000000 	.word	0x00000000

08016940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016940:	4b07      	ldr	r3, [pc, #28]	@ (8016960 <pxCurrentTCBConst2>)
 8016942:	6819      	ldr	r1, [r3, #0]
 8016944:	6808      	ldr	r0, [r1, #0]
 8016946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801694a:	f380 8809 	msr	PSP, r0
 801694e:	f3bf 8f6f 	isb	sy
 8016952:	f04f 0000 	mov.w	r0, #0
 8016956:	f380 8811 	msr	BASEPRI, r0
 801695a:	4770      	bx	lr
 801695c:	f3af 8000 	nop.w

08016960 <pxCurrentTCBConst2>:
 8016960:	20002ad8 	.word	0x20002ad8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016964:	bf00      	nop
 8016966:	bf00      	nop

08016968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016968:	4808      	ldr	r0, [pc, #32]	@ (801698c <prvPortStartFirstTask+0x24>)
 801696a:	6800      	ldr	r0, [r0, #0]
 801696c:	6800      	ldr	r0, [r0, #0]
 801696e:	f380 8808 	msr	MSP, r0
 8016972:	f04f 0000 	mov.w	r0, #0
 8016976:	f380 8814 	msr	CONTROL, r0
 801697a:	b662      	cpsie	i
 801697c:	b661      	cpsie	f
 801697e:	f3bf 8f4f 	dsb	sy
 8016982:	f3bf 8f6f 	isb	sy
 8016986:	df00      	svc	0
 8016988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801698a:	bf00      	nop
 801698c:	e000ed08 	.word	0xe000ed08

08016990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016990:	b580      	push	{r7, lr}
 8016992:	b084      	sub	sp, #16
 8016994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016996:	4b37      	ldr	r3, [pc, #220]	@ (8016a74 <xPortStartScheduler+0xe4>)
 8016998:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	781b      	ldrb	r3, [r3, #0]
 801699e:	b2db      	uxtb	r3, r3
 80169a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	22ff      	movs	r2, #255	@ 0xff
 80169a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	781b      	ldrb	r3, [r3, #0]
 80169ac:	b2db      	uxtb	r3, r3
 80169ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80169b0:	78fb      	ldrb	r3, [r7, #3]
 80169b2:	b2db      	uxtb	r3, r3
 80169b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80169b8:	b2da      	uxtb	r2, r3
 80169ba:	4b2f      	ldr	r3, [pc, #188]	@ (8016a78 <xPortStartScheduler+0xe8>)
 80169bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80169be:	4b2f      	ldr	r3, [pc, #188]	@ (8016a7c <xPortStartScheduler+0xec>)
 80169c0:	2207      	movs	r2, #7
 80169c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80169c4:	e009      	b.n	80169da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80169c6:	4b2d      	ldr	r3, [pc, #180]	@ (8016a7c <xPortStartScheduler+0xec>)
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	3b01      	subs	r3, #1
 80169cc:	4a2b      	ldr	r2, [pc, #172]	@ (8016a7c <xPortStartScheduler+0xec>)
 80169ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80169d0:	78fb      	ldrb	r3, [r7, #3]
 80169d2:	b2db      	uxtb	r3, r3
 80169d4:	005b      	lsls	r3, r3, #1
 80169d6:	b2db      	uxtb	r3, r3
 80169d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80169da:	78fb      	ldrb	r3, [r7, #3]
 80169dc:	b2db      	uxtb	r3, r3
 80169de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80169e2:	2b80      	cmp	r3, #128	@ 0x80
 80169e4:	d0ef      	beq.n	80169c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80169e6:	4b25      	ldr	r3, [pc, #148]	@ (8016a7c <xPortStartScheduler+0xec>)
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	f1c3 0307 	rsb	r3, r3, #7
 80169ee:	2b04      	cmp	r3, #4
 80169f0:	d00d      	beq.n	8016a0e <xPortStartScheduler+0x7e>
	__asm volatile
 80169f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169f6:	b672      	cpsid	i
 80169f8:	f383 8811 	msr	BASEPRI, r3
 80169fc:	f3bf 8f6f 	isb	sy
 8016a00:	f3bf 8f4f 	dsb	sy
 8016a04:	b662      	cpsie	i
 8016a06:	60bb      	str	r3, [r7, #8]
}
 8016a08:	bf00      	nop
 8016a0a:	bf00      	nop
 8016a0c:	e7fd      	b.n	8016a0a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8016a7c <xPortStartScheduler+0xec>)
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	021b      	lsls	r3, r3, #8
 8016a14:	4a19      	ldr	r2, [pc, #100]	@ (8016a7c <xPortStartScheduler+0xec>)
 8016a16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016a18:	4b18      	ldr	r3, [pc, #96]	@ (8016a7c <xPortStartScheduler+0xec>)
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016a20:	4a16      	ldr	r2, [pc, #88]	@ (8016a7c <xPortStartScheduler+0xec>)
 8016a22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	b2da      	uxtb	r2, r3
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016a2c:	4b14      	ldr	r3, [pc, #80]	@ (8016a80 <xPortStartScheduler+0xf0>)
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	4a13      	ldr	r2, [pc, #76]	@ (8016a80 <xPortStartScheduler+0xf0>)
 8016a32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8016a36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016a38:	4b11      	ldr	r3, [pc, #68]	@ (8016a80 <xPortStartScheduler+0xf0>)
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	4a10      	ldr	r2, [pc, #64]	@ (8016a80 <xPortStartScheduler+0xf0>)
 8016a3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8016a42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016a44:	f000 f8dc 	bl	8016c00 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016a48:	4b0e      	ldr	r3, [pc, #56]	@ (8016a84 <xPortStartScheduler+0xf4>)
 8016a4a:	2200      	movs	r2, #0
 8016a4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016a4e:	f000 f8fb 	bl	8016c48 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016a52:	4b0d      	ldr	r3, [pc, #52]	@ (8016a88 <xPortStartScheduler+0xf8>)
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	4a0c      	ldr	r2, [pc, #48]	@ (8016a88 <xPortStartScheduler+0xf8>)
 8016a58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8016a5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016a5e:	f7ff ff83 	bl	8016968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016a62:	f7ff fb7f 	bl	8016164 <vTaskSwitchContext>
	prvTaskExitError();
 8016a66:	f7ff ff37 	bl	80168d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016a6a:	2300      	movs	r3, #0
}
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	3710      	adds	r7, #16
 8016a70:	46bd      	mov	sp, r7
 8016a72:	bd80      	pop	{r7, pc}
 8016a74:	e000e400 	.word	0xe000e400
 8016a78:	20002c04 	.word	0x20002c04
 8016a7c:	20002c08 	.word	0x20002c08
 8016a80:	e000ed20 	.word	0xe000ed20
 8016a84:	20000070 	.word	0x20000070
 8016a88:	e000ef34 	.word	0xe000ef34

08016a8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016a8c:	b480      	push	{r7}
 8016a8e:	b083      	sub	sp, #12
 8016a90:	af00      	add	r7, sp, #0
	__asm volatile
 8016a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a96:	b672      	cpsid	i
 8016a98:	f383 8811 	msr	BASEPRI, r3
 8016a9c:	f3bf 8f6f 	isb	sy
 8016aa0:	f3bf 8f4f 	dsb	sy
 8016aa4:	b662      	cpsie	i
 8016aa6:	607b      	str	r3, [r7, #4]
}
 8016aa8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016aaa:	4b11      	ldr	r3, [pc, #68]	@ (8016af0 <vPortEnterCritical+0x64>)
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	3301      	adds	r3, #1
 8016ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8016af0 <vPortEnterCritical+0x64>)
 8016ab2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8016af0 <vPortEnterCritical+0x64>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	2b01      	cmp	r3, #1
 8016aba:	d112      	bne.n	8016ae2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016abc:	4b0d      	ldr	r3, [pc, #52]	@ (8016af4 <vPortEnterCritical+0x68>)
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	b2db      	uxtb	r3, r3
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d00d      	beq.n	8016ae2 <vPortEnterCritical+0x56>
	__asm volatile
 8016ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016aca:	b672      	cpsid	i
 8016acc:	f383 8811 	msr	BASEPRI, r3
 8016ad0:	f3bf 8f6f 	isb	sy
 8016ad4:	f3bf 8f4f 	dsb	sy
 8016ad8:	b662      	cpsie	i
 8016ada:	603b      	str	r3, [r7, #0]
}
 8016adc:	bf00      	nop
 8016ade:	bf00      	nop
 8016ae0:	e7fd      	b.n	8016ade <vPortEnterCritical+0x52>
	}
}
 8016ae2:	bf00      	nop
 8016ae4:	370c      	adds	r7, #12
 8016ae6:	46bd      	mov	sp, r7
 8016ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aec:	4770      	bx	lr
 8016aee:	bf00      	nop
 8016af0:	20000070 	.word	0x20000070
 8016af4:	e000ed04 	.word	0xe000ed04

08016af8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016af8:	b480      	push	{r7}
 8016afa:	b083      	sub	sp, #12
 8016afc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016afe:	4b13      	ldr	r3, [pc, #76]	@ (8016b4c <vPortExitCritical+0x54>)
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d10d      	bne.n	8016b22 <vPortExitCritical+0x2a>
	__asm volatile
 8016b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b0a:	b672      	cpsid	i
 8016b0c:	f383 8811 	msr	BASEPRI, r3
 8016b10:	f3bf 8f6f 	isb	sy
 8016b14:	f3bf 8f4f 	dsb	sy
 8016b18:	b662      	cpsie	i
 8016b1a:	607b      	str	r3, [r7, #4]
}
 8016b1c:	bf00      	nop
 8016b1e:	bf00      	nop
 8016b20:	e7fd      	b.n	8016b1e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8016b22:	4b0a      	ldr	r3, [pc, #40]	@ (8016b4c <vPortExitCritical+0x54>)
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	3b01      	subs	r3, #1
 8016b28:	4a08      	ldr	r2, [pc, #32]	@ (8016b4c <vPortExitCritical+0x54>)
 8016b2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016b2c:	4b07      	ldr	r3, [pc, #28]	@ (8016b4c <vPortExitCritical+0x54>)
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d105      	bne.n	8016b40 <vPortExitCritical+0x48>
 8016b34:	2300      	movs	r3, #0
 8016b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016b38:	683b      	ldr	r3, [r7, #0]
 8016b3a:	f383 8811 	msr	BASEPRI, r3
}
 8016b3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016b40:	bf00      	nop
 8016b42:	370c      	adds	r7, #12
 8016b44:	46bd      	mov	sp, r7
 8016b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b4a:	4770      	bx	lr
 8016b4c:	20000070 	.word	0x20000070

08016b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016b50:	f3ef 8009 	mrs	r0, PSP
 8016b54:	f3bf 8f6f 	isb	sy
 8016b58:	4b15      	ldr	r3, [pc, #84]	@ (8016bb0 <pxCurrentTCBConst>)
 8016b5a:	681a      	ldr	r2, [r3, #0]
 8016b5c:	f01e 0f10 	tst.w	lr, #16
 8016b60:	bf08      	it	eq
 8016b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b6a:	6010      	str	r0, [r2, #0]
 8016b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016b70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8016b74:	b672      	cpsid	i
 8016b76:	f380 8811 	msr	BASEPRI, r0
 8016b7a:	f3bf 8f4f 	dsb	sy
 8016b7e:	f3bf 8f6f 	isb	sy
 8016b82:	b662      	cpsie	i
 8016b84:	f7ff faee 	bl	8016164 <vTaskSwitchContext>
 8016b88:	f04f 0000 	mov.w	r0, #0
 8016b8c:	f380 8811 	msr	BASEPRI, r0
 8016b90:	bc09      	pop	{r0, r3}
 8016b92:	6819      	ldr	r1, [r3, #0]
 8016b94:	6808      	ldr	r0, [r1, #0]
 8016b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b9a:	f01e 0f10 	tst.w	lr, #16
 8016b9e:	bf08      	it	eq
 8016ba0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016ba4:	f380 8809 	msr	PSP, r0
 8016ba8:	f3bf 8f6f 	isb	sy
 8016bac:	4770      	bx	lr
 8016bae:	bf00      	nop

08016bb0 <pxCurrentTCBConst>:
 8016bb0:	20002ad8 	.word	0x20002ad8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016bb4:	bf00      	nop
 8016bb6:	bf00      	nop

08016bb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b082      	sub	sp, #8
 8016bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8016bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016bc2:	b672      	cpsid	i
 8016bc4:	f383 8811 	msr	BASEPRI, r3
 8016bc8:	f3bf 8f6f 	isb	sy
 8016bcc:	f3bf 8f4f 	dsb	sy
 8016bd0:	b662      	cpsie	i
 8016bd2:	607b      	str	r3, [r7, #4]
}
 8016bd4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016bd6:	f7ff fa09 	bl	8015fec <xTaskIncrementTick>
 8016bda:	4603      	mov	r3, r0
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d003      	beq.n	8016be8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016be0:	4b06      	ldr	r3, [pc, #24]	@ (8016bfc <SysTick_Handler+0x44>)
 8016be2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016be6:	601a      	str	r2, [r3, #0]
 8016be8:	2300      	movs	r3, #0
 8016bea:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016bec:	683b      	ldr	r3, [r7, #0]
 8016bee:	f383 8811 	msr	BASEPRI, r3
}
 8016bf2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016bf4:	bf00      	nop
 8016bf6:	3708      	adds	r7, #8
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bd80      	pop	{r7, pc}
 8016bfc:	e000ed04 	.word	0xe000ed04

08016c00 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016c00:	b480      	push	{r7}
 8016c02:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016c04:	4b0b      	ldr	r3, [pc, #44]	@ (8016c34 <vPortSetupTimerInterrupt+0x34>)
 8016c06:	2200      	movs	r2, #0
 8016c08:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8016c38 <vPortSetupTimerInterrupt+0x38>)
 8016c0c:	2200      	movs	r2, #0
 8016c0e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016c10:	4b0a      	ldr	r3, [pc, #40]	@ (8016c3c <vPortSetupTimerInterrupt+0x3c>)
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	4a0a      	ldr	r2, [pc, #40]	@ (8016c40 <vPortSetupTimerInterrupt+0x40>)
 8016c16:	fba2 2303 	umull	r2, r3, r2, r3
 8016c1a:	099b      	lsrs	r3, r3, #6
 8016c1c:	4a09      	ldr	r2, [pc, #36]	@ (8016c44 <vPortSetupTimerInterrupt+0x44>)
 8016c1e:	3b01      	subs	r3, #1
 8016c20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016c22:	4b04      	ldr	r3, [pc, #16]	@ (8016c34 <vPortSetupTimerInterrupt+0x34>)
 8016c24:	2207      	movs	r2, #7
 8016c26:	601a      	str	r2, [r3, #0]
}
 8016c28:	bf00      	nop
 8016c2a:	46bd      	mov	sp, r7
 8016c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c30:	4770      	bx	lr
 8016c32:	bf00      	nop
 8016c34:	e000e010 	.word	0xe000e010
 8016c38:	e000e018 	.word	0xe000e018
 8016c3c:	2000001c 	.word	0x2000001c
 8016c40:	10624dd3 	.word	0x10624dd3
 8016c44:	e000e014 	.word	0xe000e014

08016c48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016c48:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8016c58 <vPortEnableVFP+0x10>
 8016c4c:	6801      	ldr	r1, [r0, #0]
 8016c4e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8016c52:	6001      	str	r1, [r0, #0]
 8016c54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016c56:	bf00      	nop
 8016c58:	e000ed88 	.word	0xe000ed88

08016c5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016c5c:	b480      	push	{r7}
 8016c5e:	b085      	sub	sp, #20
 8016c60:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016c62:	f3ef 8305 	mrs	r3, IPSR
 8016c66:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	2b0f      	cmp	r3, #15
 8016c6c:	d917      	bls.n	8016c9e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016c6e:	4a1a      	ldr	r2, [pc, #104]	@ (8016cd8 <vPortValidateInterruptPriority+0x7c>)
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	4413      	add	r3, r2
 8016c74:	781b      	ldrb	r3, [r3, #0]
 8016c76:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016c78:	4b18      	ldr	r3, [pc, #96]	@ (8016cdc <vPortValidateInterruptPriority+0x80>)
 8016c7a:	781b      	ldrb	r3, [r3, #0]
 8016c7c:	7afa      	ldrb	r2, [r7, #11]
 8016c7e:	429a      	cmp	r2, r3
 8016c80:	d20d      	bcs.n	8016c9e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8016c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c86:	b672      	cpsid	i
 8016c88:	f383 8811 	msr	BASEPRI, r3
 8016c8c:	f3bf 8f6f 	isb	sy
 8016c90:	f3bf 8f4f 	dsb	sy
 8016c94:	b662      	cpsie	i
 8016c96:	607b      	str	r3, [r7, #4]
}
 8016c98:	bf00      	nop
 8016c9a:	bf00      	nop
 8016c9c:	e7fd      	b.n	8016c9a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016c9e:	4b10      	ldr	r3, [pc, #64]	@ (8016ce0 <vPortValidateInterruptPriority+0x84>)
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8016ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8016ce4 <vPortValidateInterruptPriority+0x88>)
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	429a      	cmp	r2, r3
 8016cac:	d90d      	bls.n	8016cca <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8016cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016cb2:	b672      	cpsid	i
 8016cb4:	f383 8811 	msr	BASEPRI, r3
 8016cb8:	f3bf 8f6f 	isb	sy
 8016cbc:	f3bf 8f4f 	dsb	sy
 8016cc0:	b662      	cpsie	i
 8016cc2:	603b      	str	r3, [r7, #0]
}
 8016cc4:	bf00      	nop
 8016cc6:	bf00      	nop
 8016cc8:	e7fd      	b.n	8016cc6 <vPortValidateInterruptPriority+0x6a>
	}
 8016cca:	bf00      	nop
 8016ccc:	3714      	adds	r7, #20
 8016cce:	46bd      	mov	sp, r7
 8016cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd4:	4770      	bx	lr
 8016cd6:	bf00      	nop
 8016cd8:	e000e3f0 	.word	0xe000e3f0
 8016cdc:	20002c04 	.word	0x20002c04
 8016ce0:	e000ed0c 	.word	0xe000ed0c
 8016ce4:	20002c08 	.word	0x20002c08

08016ce8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b08a      	sub	sp, #40	@ 0x28
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016cf4:	f7ff f8aa 	bl	8015e4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016cf8:	4b5f      	ldr	r3, [pc, #380]	@ (8016e78 <pvPortMalloc+0x190>)
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d101      	bne.n	8016d04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016d00:	f000 f924 	bl	8016f4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016d04:	4b5d      	ldr	r3, [pc, #372]	@ (8016e7c <pvPortMalloc+0x194>)
 8016d06:	681a      	ldr	r2, [r3, #0]
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	4013      	ands	r3, r2
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	f040 8094 	bne.w	8016e3a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d020      	beq.n	8016d5a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8016d18:	2208      	movs	r2, #8
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	4413      	add	r3, r2
 8016d1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	f003 0307 	and.w	r3, r3, #7
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d017      	beq.n	8016d5a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	f023 0307 	bic.w	r3, r3, #7
 8016d30:	3308      	adds	r3, #8
 8016d32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	f003 0307 	and.w	r3, r3, #7
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d00d      	beq.n	8016d5a <pvPortMalloc+0x72>
	__asm volatile
 8016d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d42:	b672      	cpsid	i
 8016d44:	f383 8811 	msr	BASEPRI, r3
 8016d48:	f3bf 8f6f 	isb	sy
 8016d4c:	f3bf 8f4f 	dsb	sy
 8016d50:	b662      	cpsie	i
 8016d52:	617b      	str	r3, [r7, #20]
}
 8016d54:	bf00      	nop
 8016d56:	bf00      	nop
 8016d58:	e7fd      	b.n	8016d56 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d06c      	beq.n	8016e3a <pvPortMalloc+0x152>
 8016d60:	4b47      	ldr	r3, [pc, #284]	@ (8016e80 <pvPortMalloc+0x198>)
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	687a      	ldr	r2, [r7, #4]
 8016d66:	429a      	cmp	r2, r3
 8016d68:	d867      	bhi.n	8016e3a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016d6a:	4b46      	ldr	r3, [pc, #280]	@ (8016e84 <pvPortMalloc+0x19c>)
 8016d6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016d6e:	4b45      	ldr	r3, [pc, #276]	@ (8016e84 <pvPortMalloc+0x19c>)
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016d74:	e004      	b.n	8016d80 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8016d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d82:	685b      	ldr	r3, [r3, #4]
 8016d84:	687a      	ldr	r2, [r7, #4]
 8016d86:	429a      	cmp	r2, r3
 8016d88:	d903      	bls.n	8016d92 <pvPortMalloc+0xaa>
 8016d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d1f1      	bne.n	8016d76 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016d92:	4b39      	ldr	r3, [pc, #228]	@ (8016e78 <pvPortMalloc+0x190>)
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016d98:	429a      	cmp	r2, r3
 8016d9a:	d04e      	beq.n	8016e3a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016d9c:	6a3b      	ldr	r3, [r7, #32]
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	2208      	movs	r2, #8
 8016da2:	4413      	add	r3, r2
 8016da4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016da8:	681a      	ldr	r2, [r3, #0]
 8016daa:	6a3b      	ldr	r3, [r7, #32]
 8016dac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016db0:	685a      	ldr	r2, [r3, #4]
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	1ad2      	subs	r2, r2, r3
 8016db6:	2308      	movs	r3, #8
 8016db8:	005b      	lsls	r3, r3, #1
 8016dba:	429a      	cmp	r2, r3
 8016dbc:	d922      	bls.n	8016e04 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	4413      	add	r3, r2
 8016dc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016dc6:	69bb      	ldr	r3, [r7, #24]
 8016dc8:	f003 0307 	and.w	r3, r3, #7
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d00d      	beq.n	8016dec <pvPortMalloc+0x104>
	__asm volatile
 8016dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016dd4:	b672      	cpsid	i
 8016dd6:	f383 8811 	msr	BASEPRI, r3
 8016dda:	f3bf 8f6f 	isb	sy
 8016dde:	f3bf 8f4f 	dsb	sy
 8016de2:	b662      	cpsie	i
 8016de4:	613b      	str	r3, [r7, #16]
}
 8016de6:	bf00      	nop
 8016de8:	bf00      	nop
 8016dea:	e7fd      	b.n	8016de8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dee:	685a      	ldr	r2, [r3, #4]
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	1ad2      	subs	r2, r2, r3
 8016df4:	69bb      	ldr	r3, [r7, #24]
 8016df6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dfa:	687a      	ldr	r2, [r7, #4]
 8016dfc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016dfe:	69b8      	ldr	r0, [r7, #24]
 8016e00:	f000 f906 	bl	8017010 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016e04:	4b1e      	ldr	r3, [pc, #120]	@ (8016e80 <pvPortMalloc+0x198>)
 8016e06:	681a      	ldr	r2, [r3, #0]
 8016e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e0a:	685b      	ldr	r3, [r3, #4]
 8016e0c:	1ad3      	subs	r3, r2, r3
 8016e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8016e80 <pvPortMalloc+0x198>)
 8016e10:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016e12:	4b1b      	ldr	r3, [pc, #108]	@ (8016e80 <pvPortMalloc+0x198>)
 8016e14:	681a      	ldr	r2, [r3, #0]
 8016e16:	4b1c      	ldr	r3, [pc, #112]	@ (8016e88 <pvPortMalloc+0x1a0>)
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	429a      	cmp	r2, r3
 8016e1c:	d203      	bcs.n	8016e26 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016e1e:	4b18      	ldr	r3, [pc, #96]	@ (8016e80 <pvPortMalloc+0x198>)
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	4a19      	ldr	r2, [pc, #100]	@ (8016e88 <pvPortMalloc+0x1a0>)
 8016e24:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e28:	685a      	ldr	r2, [r3, #4]
 8016e2a:	4b14      	ldr	r3, [pc, #80]	@ (8016e7c <pvPortMalloc+0x194>)
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	431a      	orrs	r2, r3
 8016e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e32:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e36:	2200      	movs	r2, #0
 8016e38:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016e3a:	f7ff f815 	bl	8015e68 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8016e3e:	69fb      	ldr	r3, [r7, #28]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d101      	bne.n	8016e48 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8016e44:	f7ea ffc4 	bl	8001dd0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016e48:	69fb      	ldr	r3, [r7, #28]
 8016e4a:	f003 0307 	and.w	r3, r3, #7
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d00d      	beq.n	8016e6e <pvPortMalloc+0x186>
	__asm volatile
 8016e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e56:	b672      	cpsid	i
 8016e58:	f383 8811 	msr	BASEPRI, r3
 8016e5c:	f3bf 8f6f 	isb	sy
 8016e60:	f3bf 8f4f 	dsb	sy
 8016e64:	b662      	cpsie	i
 8016e66:	60fb      	str	r3, [r7, #12]
}
 8016e68:	bf00      	nop
 8016e6a:	bf00      	nop
 8016e6c:	e7fd      	b.n	8016e6a <pvPortMalloc+0x182>
	return pvReturn;
 8016e6e:	69fb      	ldr	r3, [r7, #28]
}
 8016e70:	4618      	mov	r0, r3
 8016e72:	3728      	adds	r7, #40	@ 0x28
 8016e74:	46bd      	mov	sp, r7
 8016e76:	bd80      	pop	{r7, pc}
 8016e78:	20012c14 	.word	0x20012c14
 8016e7c:	20012c20 	.word	0x20012c20
 8016e80:	20012c18 	.word	0x20012c18
 8016e84:	20012c0c 	.word	0x20012c0c
 8016e88:	20012c1c 	.word	0x20012c1c

08016e8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b086      	sub	sp, #24
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d04e      	beq.n	8016f3c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016e9e:	2308      	movs	r3, #8
 8016ea0:	425b      	negs	r3, r3
 8016ea2:	697a      	ldr	r2, [r7, #20]
 8016ea4:	4413      	add	r3, r2
 8016ea6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016ea8:	697b      	ldr	r3, [r7, #20]
 8016eaa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016eac:	693b      	ldr	r3, [r7, #16]
 8016eae:	685a      	ldr	r2, [r3, #4]
 8016eb0:	4b24      	ldr	r3, [pc, #144]	@ (8016f44 <vPortFree+0xb8>)
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	4013      	ands	r3, r2
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d10d      	bne.n	8016ed6 <vPortFree+0x4a>
	__asm volatile
 8016eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ebe:	b672      	cpsid	i
 8016ec0:	f383 8811 	msr	BASEPRI, r3
 8016ec4:	f3bf 8f6f 	isb	sy
 8016ec8:	f3bf 8f4f 	dsb	sy
 8016ecc:	b662      	cpsie	i
 8016ece:	60fb      	str	r3, [r7, #12]
}
 8016ed0:	bf00      	nop
 8016ed2:	bf00      	nop
 8016ed4:	e7fd      	b.n	8016ed2 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016ed6:	693b      	ldr	r3, [r7, #16]
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d00d      	beq.n	8016efa <vPortFree+0x6e>
	__asm volatile
 8016ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ee2:	b672      	cpsid	i
 8016ee4:	f383 8811 	msr	BASEPRI, r3
 8016ee8:	f3bf 8f6f 	isb	sy
 8016eec:	f3bf 8f4f 	dsb	sy
 8016ef0:	b662      	cpsie	i
 8016ef2:	60bb      	str	r3, [r7, #8]
}
 8016ef4:	bf00      	nop
 8016ef6:	bf00      	nop
 8016ef8:	e7fd      	b.n	8016ef6 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016efa:	693b      	ldr	r3, [r7, #16]
 8016efc:	685a      	ldr	r2, [r3, #4]
 8016efe:	4b11      	ldr	r3, [pc, #68]	@ (8016f44 <vPortFree+0xb8>)
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	4013      	ands	r3, r2
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d019      	beq.n	8016f3c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016f08:	693b      	ldr	r3, [r7, #16]
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d115      	bne.n	8016f3c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016f10:	693b      	ldr	r3, [r7, #16]
 8016f12:	685a      	ldr	r2, [r3, #4]
 8016f14:	4b0b      	ldr	r3, [pc, #44]	@ (8016f44 <vPortFree+0xb8>)
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	43db      	mvns	r3, r3
 8016f1a:	401a      	ands	r2, r3
 8016f1c:	693b      	ldr	r3, [r7, #16]
 8016f1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016f20:	f7fe ff94 	bl	8015e4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016f24:	693b      	ldr	r3, [r7, #16]
 8016f26:	685a      	ldr	r2, [r3, #4]
 8016f28:	4b07      	ldr	r3, [pc, #28]	@ (8016f48 <vPortFree+0xbc>)
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	4413      	add	r3, r2
 8016f2e:	4a06      	ldr	r2, [pc, #24]	@ (8016f48 <vPortFree+0xbc>)
 8016f30:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016f32:	6938      	ldr	r0, [r7, #16]
 8016f34:	f000 f86c 	bl	8017010 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8016f38:	f7fe ff96 	bl	8015e68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016f3c:	bf00      	nop
 8016f3e:	3718      	adds	r7, #24
 8016f40:	46bd      	mov	sp, r7
 8016f42:	bd80      	pop	{r7, pc}
 8016f44:	20012c20 	.word	0x20012c20
 8016f48:	20012c18 	.word	0x20012c18

08016f4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016f4c:	b480      	push	{r7}
 8016f4e:	b085      	sub	sp, #20
 8016f50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016f52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8016f56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016f58:	4b27      	ldr	r3, [pc, #156]	@ (8016ff8 <prvHeapInit+0xac>)
 8016f5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	f003 0307 	and.w	r3, r3, #7
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d00c      	beq.n	8016f80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	3307      	adds	r3, #7
 8016f6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	f023 0307 	bic.w	r3, r3, #7
 8016f72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016f74:	68ba      	ldr	r2, [r7, #8]
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	1ad3      	subs	r3, r2, r3
 8016f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8016ff8 <prvHeapInit+0xac>)
 8016f7c:	4413      	add	r3, r2
 8016f7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016f84:	4a1d      	ldr	r2, [pc, #116]	@ (8016ffc <prvHeapInit+0xb0>)
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8016ffc <prvHeapInit+0xb0>)
 8016f8c:	2200      	movs	r2, #0
 8016f8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	68ba      	ldr	r2, [r7, #8]
 8016f94:	4413      	add	r3, r2
 8016f96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016f98:	2208      	movs	r2, #8
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	1a9b      	subs	r3, r3, r2
 8016f9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	f023 0307 	bic.w	r3, r3, #7
 8016fa6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	4a15      	ldr	r2, [pc, #84]	@ (8017000 <prvHeapInit+0xb4>)
 8016fac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016fae:	4b14      	ldr	r3, [pc, #80]	@ (8017000 <prvHeapInit+0xb4>)
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	2200      	movs	r2, #0
 8016fb4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016fb6:	4b12      	ldr	r3, [pc, #72]	@ (8017000 <prvHeapInit+0xb4>)
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	2200      	movs	r2, #0
 8016fbc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016fc2:	683b      	ldr	r3, [r7, #0]
 8016fc4:	68fa      	ldr	r2, [r7, #12]
 8016fc6:	1ad2      	subs	r2, r2, r3
 8016fc8:	683b      	ldr	r3, [r7, #0]
 8016fca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8017000 <prvHeapInit+0xb4>)
 8016fce:	681a      	ldr	r2, [r3, #0]
 8016fd0:	683b      	ldr	r3, [r7, #0]
 8016fd2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016fd4:	683b      	ldr	r3, [r7, #0]
 8016fd6:	685b      	ldr	r3, [r3, #4]
 8016fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8017004 <prvHeapInit+0xb8>)
 8016fda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016fdc:	683b      	ldr	r3, [r7, #0]
 8016fde:	685b      	ldr	r3, [r3, #4]
 8016fe0:	4a09      	ldr	r2, [pc, #36]	@ (8017008 <prvHeapInit+0xbc>)
 8016fe2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016fe4:	4b09      	ldr	r3, [pc, #36]	@ (801700c <prvHeapInit+0xc0>)
 8016fe6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8016fea:	601a      	str	r2, [r3, #0]
}
 8016fec:	bf00      	nop
 8016fee:	3714      	adds	r7, #20
 8016ff0:	46bd      	mov	sp, r7
 8016ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ff6:	4770      	bx	lr
 8016ff8:	20002c0c 	.word	0x20002c0c
 8016ffc:	20012c0c 	.word	0x20012c0c
 8017000:	20012c14 	.word	0x20012c14
 8017004:	20012c1c 	.word	0x20012c1c
 8017008:	20012c18 	.word	0x20012c18
 801700c:	20012c20 	.word	0x20012c20

08017010 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017010:	b480      	push	{r7}
 8017012:	b085      	sub	sp, #20
 8017014:	af00      	add	r7, sp, #0
 8017016:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017018:	4b28      	ldr	r3, [pc, #160]	@ (80170bc <prvInsertBlockIntoFreeList+0xac>)
 801701a:	60fb      	str	r3, [r7, #12]
 801701c:	e002      	b.n	8017024 <prvInsertBlockIntoFreeList+0x14>
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	60fb      	str	r3, [r7, #12]
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	687a      	ldr	r2, [r7, #4]
 801702a:	429a      	cmp	r2, r3
 801702c:	d8f7      	bhi.n	801701e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	685b      	ldr	r3, [r3, #4]
 8017036:	68ba      	ldr	r2, [r7, #8]
 8017038:	4413      	add	r3, r2
 801703a:	687a      	ldr	r2, [r7, #4]
 801703c:	429a      	cmp	r2, r3
 801703e:	d108      	bne.n	8017052 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017040:	68fb      	ldr	r3, [r7, #12]
 8017042:	685a      	ldr	r2, [r3, #4]
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	685b      	ldr	r3, [r3, #4]
 8017048:	441a      	add	r2, r3
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	685b      	ldr	r3, [r3, #4]
 801705a:	68ba      	ldr	r2, [r7, #8]
 801705c:	441a      	add	r2, r3
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	429a      	cmp	r2, r3
 8017064:	d118      	bne.n	8017098 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	681a      	ldr	r2, [r3, #0]
 801706a:	4b15      	ldr	r3, [pc, #84]	@ (80170c0 <prvInsertBlockIntoFreeList+0xb0>)
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	429a      	cmp	r2, r3
 8017070:	d00d      	beq.n	801708e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	685a      	ldr	r2, [r3, #4]
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	685b      	ldr	r3, [r3, #4]
 801707c:	441a      	add	r2, r3
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	681a      	ldr	r2, [r3, #0]
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	601a      	str	r2, [r3, #0]
 801708c:	e008      	b.n	80170a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801708e:	4b0c      	ldr	r3, [pc, #48]	@ (80170c0 <prvInsertBlockIntoFreeList+0xb0>)
 8017090:	681a      	ldr	r2, [r3, #0]
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	601a      	str	r2, [r3, #0]
 8017096:	e003      	b.n	80170a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	681a      	ldr	r2, [r3, #0]
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80170a0:	68fa      	ldr	r2, [r7, #12]
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	429a      	cmp	r2, r3
 80170a6:	d002      	beq.n	80170ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	687a      	ldr	r2, [r7, #4]
 80170ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80170ae:	bf00      	nop
 80170b0:	3714      	adds	r7, #20
 80170b2:	46bd      	mov	sp, r7
 80170b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b8:	4770      	bx	lr
 80170ba:	bf00      	nop
 80170bc:	20012c0c 	.word	0x20012c0c
 80170c0:	20012c14 	.word	0x20012c14

080170c4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b082      	sub	sp, #8
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80170d2:	4618      	mov	r0, r3
 80170d4:	f7fa fe36 	bl	8011d44 <USBH_LL_IncTimer>
}
 80170d8:	bf00      	nop
 80170da:	3708      	adds	r7, #8
 80170dc:	46bd      	mov	sp, r7
 80170de:	bd80      	pop	{r7, pc}

080170e0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b082      	sub	sp, #8
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80170ee:	4618      	mov	r0, r3
 80170f0:	f7fa fe76 	bl	8011de0 <USBH_LL_Connect>
}
 80170f4:	bf00      	nop
 80170f6:	3708      	adds	r7, #8
 80170f8:	46bd      	mov	sp, r7
 80170fa:	bd80      	pop	{r7, pc}

080170fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b082      	sub	sp, #8
 8017100:	af00      	add	r7, sp, #0
 8017102:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801710a:	4618      	mov	r0, r3
 801710c:	f7fa fe83 	bl	8011e16 <USBH_LL_Disconnect>
}
 8017110:	bf00      	nop
 8017112:	3708      	adds	r7, #8
 8017114:	46bd      	mov	sp, r7
 8017116:	bd80      	pop	{r7, pc}

08017118 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8017118:	b580      	push	{r7, lr}
 801711a:	b082      	sub	sp, #8
 801711c:	af00      	add	r7, sp, #0
 801711e:	6078      	str	r0, [r7, #4]
 8017120:	460b      	mov	r3, r1
 8017122:	70fb      	strb	r3, [r7, #3]
 8017124:	4613      	mov	r3, r2
 8017126:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801712e:	4618      	mov	r0, r3
 8017130:	f7fa fec2 	bl	8011eb8 <USBH_LL_NotifyURBChange>
#endif
}
 8017134:	bf00      	nop
 8017136:	3708      	adds	r7, #8
 8017138:	46bd      	mov	sp, r7
 801713a:	bd80      	pop	{r7, pc}

0801713c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801713c:	b580      	push	{r7, lr}
 801713e:	b082      	sub	sp, #8
 8017140:	af00      	add	r7, sp, #0
 8017142:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801714a:	4618      	mov	r0, r3
 801714c:	f7fa fe24 	bl	8011d98 <USBH_LL_PortEnabled>
}
 8017150:	bf00      	nop
 8017152:	3708      	adds	r7, #8
 8017154:	46bd      	mov	sp, r7
 8017156:	bd80      	pop	{r7, pc}

08017158 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017158:	b580      	push	{r7, lr}
 801715a:	b082      	sub	sp, #8
 801715c:	af00      	add	r7, sp, #0
 801715e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8017166:	4618      	mov	r0, r3
 8017168:	f7fa fe28 	bl	8011dbc <USBH_LL_PortDisabled>
}
 801716c:	bf00      	nop
 801716e:	3708      	adds	r7, #8
 8017170:	46bd      	mov	sp, r7
 8017172:	bd80      	pop	{r7, pc}

08017174 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8017174:	b580      	push	{r7, lr}
 8017176:	b084      	sub	sp, #16
 8017178:	af00      	add	r7, sp, #0
 801717a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801717c:	2300      	movs	r3, #0
 801717e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017180:	2300      	movs	r3, #0
 8017182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801718a:	4618      	mov	r0, r3
 801718c:	f7f1 f86d 	bl	800826a <HAL_HCD_Stop>
 8017190:	4603      	mov	r3, r0
 8017192:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017194:	7bfb      	ldrb	r3, [r7, #15]
 8017196:	4618      	mov	r0, r3
 8017198:	f000 f808 	bl	80171ac <USBH_Get_USB_Status>
 801719c:	4603      	mov	r3, r0
 801719e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80171a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80171a2:	4618      	mov	r0, r3
 80171a4:	3710      	adds	r7, #16
 80171a6:	46bd      	mov	sp, r7
 80171a8:	bd80      	pop	{r7, pc}
	...

080171ac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80171ac:	b480      	push	{r7}
 80171ae:	b085      	sub	sp, #20
 80171b0:	af00      	add	r7, sp, #0
 80171b2:	4603      	mov	r3, r0
 80171b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80171b6:	2300      	movs	r3, #0
 80171b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80171ba:	79fb      	ldrb	r3, [r7, #7]
 80171bc:	2b03      	cmp	r3, #3
 80171be:	d817      	bhi.n	80171f0 <USBH_Get_USB_Status+0x44>
 80171c0:	a201      	add	r2, pc, #4	@ (adr r2, 80171c8 <USBH_Get_USB_Status+0x1c>)
 80171c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171c6:	bf00      	nop
 80171c8:	080171d9 	.word	0x080171d9
 80171cc:	080171df 	.word	0x080171df
 80171d0:	080171e5 	.word	0x080171e5
 80171d4:	080171eb 	.word	0x080171eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80171d8:	2300      	movs	r3, #0
 80171da:	73fb      	strb	r3, [r7, #15]
    break;
 80171dc:	e00b      	b.n	80171f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80171de:	2302      	movs	r3, #2
 80171e0:	73fb      	strb	r3, [r7, #15]
    break;
 80171e2:	e008      	b.n	80171f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80171e4:	2301      	movs	r3, #1
 80171e6:	73fb      	strb	r3, [r7, #15]
    break;
 80171e8:	e005      	b.n	80171f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80171ea:	2302      	movs	r3, #2
 80171ec:	73fb      	strb	r3, [r7, #15]
    break;
 80171ee:	e002      	b.n	80171f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80171f0:	2302      	movs	r3, #2
 80171f2:	73fb      	strb	r3, [r7, #15]
    break;
 80171f4:	bf00      	nop
  }
  return usb_status;
 80171f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80171f8:	4618      	mov	r0, r3
 80171fa:	3714      	adds	r7, #20
 80171fc:	46bd      	mov	sp, r7
 80171fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017202:	4770      	bx	lr

08017204 <sbrk_aligned>:
 8017204:	b570      	push	{r4, r5, r6, lr}
 8017206:	4e0f      	ldr	r6, [pc, #60]	@ (8017244 <sbrk_aligned+0x40>)
 8017208:	460c      	mov	r4, r1
 801720a:	6831      	ldr	r1, [r6, #0]
 801720c:	4605      	mov	r5, r0
 801720e:	b911      	cbnz	r1, 8017216 <sbrk_aligned+0x12>
 8017210:	f000 fab8 	bl	8017784 <_sbrk_r>
 8017214:	6030      	str	r0, [r6, #0]
 8017216:	4621      	mov	r1, r4
 8017218:	4628      	mov	r0, r5
 801721a:	f000 fab3 	bl	8017784 <_sbrk_r>
 801721e:	1c43      	adds	r3, r0, #1
 8017220:	d103      	bne.n	801722a <sbrk_aligned+0x26>
 8017222:	f04f 34ff 	mov.w	r4, #4294967295
 8017226:	4620      	mov	r0, r4
 8017228:	bd70      	pop	{r4, r5, r6, pc}
 801722a:	1cc4      	adds	r4, r0, #3
 801722c:	f024 0403 	bic.w	r4, r4, #3
 8017230:	42a0      	cmp	r0, r4
 8017232:	d0f8      	beq.n	8017226 <sbrk_aligned+0x22>
 8017234:	1a21      	subs	r1, r4, r0
 8017236:	4628      	mov	r0, r5
 8017238:	f000 faa4 	bl	8017784 <_sbrk_r>
 801723c:	3001      	adds	r0, #1
 801723e:	d1f2      	bne.n	8017226 <sbrk_aligned+0x22>
 8017240:	e7ef      	b.n	8017222 <sbrk_aligned+0x1e>
 8017242:	bf00      	nop
 8017244:	20013004 	.word	0x20013004

08017248 <_malloc_r>:
 8017248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801724c:	1ccd      	adds	r5, r1, #3
 801724e:	f025 0503 	bic.w	r5, r5, #3
 8017252:	3508      	adds	r5, #8
 8017254:	2d0c      	cmp	r5, #12
 8017256:	bf38      	it	cc
 8017258:	250c      	movcc	r5, #12
 801725a:	2d00      	cmp	r5, #0
 801725c:	4606      	mov	r6, r0
 801725e:	db01      	blt.n	8017264 <_malloc_r+0x1c>
 8017260:	42a9      	cmp	r1, r5
 8017262:	d904      	bls.n	801726e <_malloc_r+0x26>
 8017264:	230c      	movs	r3, #12
 8017266:	6033      	str	r3, [r6, #0]
 8017268:	2000      	movs	r0, #0
 801726a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801726e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017344 <_malloc_r+0xfc>
 8017272:	f000 f869 	bl	8017348 <__malloc_lock>
 8017276:	f8d8 3000 	ldr.w	r3, [r8]
 801727a:	461c      	mov	r4, r3
 801727c:	bb44      	cbnz	r4, 80172d0 <_malloc_r+0x88>
 801727e:	4629      	mov	r1, r5
 8017280:	4630      	mov	r0, r6
 8017282:	f7ff ffbf 	bl	8017204 <sbrk_aligned>
 8017286:	1c43      	adds	r3, r0, #1
 8017288:	4604      	mov	r4, r0
 801728a:	d158      	bne.n	801733e <_malloc_r+0xf6>
 801728c:	f8d8 4000 	ldr.w	r4, [r8]
 8017290:	4627      	mov	r7, r4
 8017292:	2f00      	cmp	r7, #0
 8017294:	d143      	bne.n	801731e <_malloc_r+0xd6>
 8017296:	2c00      	cmp	r4, #0
 8017298:	d04b      	beq.n	8017332 <_malloc_r+0xea>
 801729a:	6823      	ldr	r3, [r4, #0]
 801729c:	4639      	mov	r1, r7
 801729e:	4630      	mov	r0, r6
 80172a0:	eb04 0903 	add.w	r9, r4, r3
 80172a4:	f000 fa6e 	bl	8017784 <_sbrk_r>
 80172a8:	4581      	cmp	r9, r0
 80172aa:	d142      	bne.n	8017332 <_malloc_r+0xea>
 80172ac:	6821      	ldr	r1, [r4, #0]
 80172ae:	1a6d      	subs	r5, r5, r1
 80172b0:	4629      	mov	r1, r5
 80172b2:	4630      	mov	r0, r6
 80172b4:	f7ff ffa6 	bl	8017204 <sbrk_aligned>
 80172b8:	3001      	adds	r0, #1
 80172ba:	d03a      	beq.n	8017332 <_malloc_r+0xea>
 80172bc:	6823      	ldr	r3, [r4, #0]
 80172be:	442b      	add	r3, r5
 80172c0:	6023      	str	r3, [r4, #0]
 80172c2:	f8d8 3000 	ldr.w	r3, [r8]
 80172c6:	685a      	ldr	r2, [r3, #4]
 80172c8:	bb62      	cbnz	r2, 8017324 <_malloc_r+0xdc>
 80172ca:	f8c8 7000 	str.w	r7, [r8]
 80172ce:	e00f      	b.n	80172f0 <_malloc_r+0xa8>
 80172d0:	6822      	ldr	r2, [r4, #0]
 80172d2:	1b52      	subs	r2, r2, r5
 80172d4:	d420      	bmi.n	8017318 <_malloc_r+0xd0>
 80172d6:	2a0b      	cmp	r2, #11
 80172d8:	d917      	bls.n	801730a <_malloc_r+0xc2>
 80172da:	1961      	adds	r1, r4, r5
 80172dc:	42a3      	cmp	r3, r4
 80172de:	6025      	str	r5, [r4, #0]
 80172e0:	bf18      	it	ne
 80172e2:	6059      	strne	r1, [r3, #4]
 80172e4:	6863      	ldr	r3, [r4, #4]
 80172e6:	bf08      	it	eq
 80172e8:	f8c8 1000 	streq.w	r1, [r8]
 80172ec:	5162      	str	r2, [r4, r5]
 80172ee:	604b      	str	r3, [r1, #4]
 80172f0:	4630      	mov	r0, r6
 80172f2:	f000 f82f 	bl	8017354 <__malloc_unlock>
 80172f6:	f104 000b 	add.w	r0, r4, #11
 80172fa:	1d23      	adds	r3, r4, #4
 80172fc:	f020 0007 	bic.w	r0, r0, #7
 8017300:	1ac2      	subs	r2, r0, r3
 8017302:	bf1c      	itt	ne
 8017304:	1a1b      	subne	r3, r3, r0
 8017306:	50a3      	strne	r3, [r4, r2]
 8017308:	e7af      	b.n	801726a <_malloc_r+0x22>
 801730a:	6862      	ldr	r2, [r4, #4]
 801730c:	42a3      	cmp	r3, r4
 801730e:	bf0c      	ite	eq
 8017310:	f8c8 2000 	streq.w	r2, [r8]
 8017314:	605a      	strne	r2, [r3, #4]
 8017316:	e7eb      	b.n	80172f0 <_malloc_r+0xa8>
 8017318:	4623      	mov	r3, r4
 801731a:	6864      	ldr	r4, [r4, #4]
 801731c:	e7ae      	b.n	801727c <_malloc_r+0x34>
 801731e:	463c      	mov	r4, r7
 8017320:	687f      	ldr	r7, [r7, #4]
 8017322:	e7b6      	b.n	8017292 <_malloc_r+0x4a>
 8017324:	461a      	mov	r2, r3
 8017326:	685b      	ldr	r3, [r3, #4]
 8017328:	42a3      	cmp	r3, r4
 801732a:	d1fb      	bne.n	8017324 <_malloc_r+0xdc>
 801732c:	2300      	movs	r3, #0
 801732e:	6053      	str	r3, [r2, #4]
 8017330:	e7de      	b.n	80172f0 <_malloc_r+0xa8>
 8017332:	230c      	movs	r3, #12
 8017334:	6033      	str	r3, [r6, #0]
 8017336:	4630      	mov	r0, r6
 8017338:	f000 f80c 	bl	8017354 <__malloc_unlock>
 801733c:	e794      	b.n	8017268 <_malloc_r+0x20>
 801733e:	6005      	str	r5, [r0, #0]
 8017340:	e7d6      	b.n	80172f0 <_malloc_r+0xa8>
 8017342:	bf00      	nop
 8017344:	20013008 	.word	0x20013008

08017348 <__malloc_lock>:
 8017348:	4801      	ldr	r0, [pc, #4]	@ (8017350 <__malloc_lock+0x8>)
 801734a:	f000 ba68 	b.w	801781e <__retarget_lock_acquire_recursive>
 801734e:	bf00      	nop
 8017350:	2001314c 	.word	0x2001314c

08017354 <__malloc_unlock>:
 8017354:	4801      	ldr	r0, [pc, #4]	@ (801735c <__malloc_unlock+0x8>)
 8017356:	f000 ba63 	b.w	8017820 <__retarget_lock_release_recursive>
 801735a:	bf00      	nop
 801735c:	2001314c 	.word	0x2001314c

08017360 <std>:
 8017360:	2300      	movs	r3, #0
 8017362:	b510      	push	{r4, lr}
 8017364:	4604      	mov	r4, r0
 8017366:	e9c0 3300 	strd	r3, r3, [r0]
 801736a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801736e:	6083      	str	r3, [r0, #8]
 8017370:	8181      	strh	r1, [r0, #12]
 8017372:	6643      	str	r3, [r0, #100]	@ 0x64
 8017374:	81c2      	strh	r2, [r0, #14]
 8017376:	6183      	str	r3, [r0, #24]
 8017378:	4619      	mov	r1, r3
 801737a:	2208      	movs	r2, #8
 801737c:	305c      	adds	r0, #92	@ 0x5c
 801737e:	f000 f99b 	bl	80176b8 <memset>
 8017382:	4b0d      	ldr	r3, [pc, #52]	@ (80173b8 <std+0x58>)
 8017384:	6263      	str	r3, [r4, #36]	@ 0x24
 8017386:	4b0d      	ldr	r3, [pc, #52]	@ (80173bc <std+0x5c>)
 8017388:	62a3      	str	r3, [r4, #40]	@ 0x28
 801738a:	4b0d      	ldr	r3, [pc, #52]	@ (80173c0 <std+0x60>)
 801738c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801738e:	4b0d      	ldr	r3, [pc, #52]	@ (80173c4 <std+0x64>)
 8017390:	6323      	str	r3, [r4, #48]	@ 0x30
 8017392:	4b0d      	ldr	r3, [pc, #52]	@ (80173c8 <std+0x68>)
 8017394:	6224      	str	r4, [r4, #32]
 8017396:	429c      	cmp	r4, r3
 8017398:	d006      	beq.n	80173a8 <std+0x48>
 801739a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801739e:	4294      	cmp	r4, r2
 80173a0:	d002      	beq.n	80173a8 <std+0x48>
 80173a2:	33d0      	adds	r3, #208	@ 0xd0
 80173a4:	429c      	cmp	r4, r3
 80173a6:	d105      	bne.n	80173b4 <std+0x54>
 80173a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80173ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173b0:	f000 ba34 	b.w	801781c <__retarget_lock_init_recursive>
 80173b4:	bd10      	pop	{r4, pc}
 80173b6:	bf00      	nop
 80173b8:	080175b9 	.word	0x080175b9
 80173bc:	080175db 	.word	0x080175db
 80173c0:	08017613 	.word	0x08017613
 80173c4:	08017637 	.word	0x08017637
 80173c8:	2001300c 	.word	0x2001300c

080173cc <stdio_exit_handler>:
 80173cc:	4a02      	ldr	r2, [pc, #8]	@ (80173d8 <stdio_exit_handler+0xc>)
 80173ce:	4903      	ldr	r1, [pc, #12]	@ (80173dc <stdio_exit_handler+0x10>)
 80173d0:	4803      	ldr	r0, [pc, #12]	@ (80173e0 <stdio_exit_handler+0x14>)
 80173d2:	f000 b869 	b.w	80174a8 <_fwalk_sglue>
 80173d6:	bf00      	nop
 80173d8:	20000074 	.word	0x20000074
 80173dc:	08018229 	.word	0x08018229
 80173e0:	20000084 	.word	0x20000084

080173e4 <cleanup_stdio>:
 80173e4:	6841      	ldr	r1, [r0, #4]
 80173e6:	4b0c      	ldr	r3, [pc, #48]	@ (8017418 <cleanup_stdio+0x34>)
 80173e8:	4299      	cmp	r1, r3
 80173ea:	b510      	push	{r4, lr}
 80173ec:	4604      	mov	r4, r0
 80173ee:	d001      	beq.n	80173f4 <cleanup_stdio+0x10>
 80173f0:	f000 ff1a 	bl	8018228 <_fflush_r>
 80173f4:	68a1      	ldr	r1, [r4, #8]
 80173f6:	4b09      	ldr	r3, [pc, #36]	@ (801741c <cleanup_stdio+0x38>)
 80173f8:	4299      	cmp	r1, r3
 80173fa:	d002      	beq.n	8017402 <cleanup_stdio+0x1e>
 80173fc:	4620      	mov	r0, r4
 80173fe:	f000 ff13 	bl	8018228 <_fflush_r>
 8017402:	68e1      	ldr	r1, [r4, #12]
 8017404:	4b06      	ldr	r3, [pc, #24]	@ (8017420 <cleanup_stdio+0x3c>)
 8017406:	4299      	cmp	r1, r3
 8017408:	d004      	beq.n	8017414 <cleanup_stdio+0x30>
 801740a:	4620      	mov	r0, r4
 801740c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017410:	f000 bf0a 	b.w	8018228 <_fflush_r>
 8017414:	bd10      	pop	{r4, pc}
 8017416:	bf00      	nop
 8017418:	2001300c 	.word	0x2001300c
 801741c:	20013074 	.word	0x20013074
 8017420:	200130dc 	.word	0x200130dc

08017424 <global_stdio_init.part.0>:
 8017424:	b510      	push	{r4, lr}
 8017426:	4b0b      	ldr	r3, [pc, #44]	@ (8017454 <global_stdio_init.part.0+0x30>)
 8017428:	4c0b      	ldr	r4, [pc, #44]	@ (8017458 <global_stdio_init.part.0+0x34>)
 801742a:	4a0c      	ldr	r2, [pc, #48]	@ (801745c <global_stdio_init.part.0+0x38>)
 801742c:	601a      	str	r2, [r3, #0]
 801742e:	4620      	mov	r0, r4
 8017430:	2200      	movs	r2, #0
 8017432:	2104      	movs	r1, #4
 8017434:	f7ff ff94 	bl	8017360 <std>
 8017438:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801743c:	2201      	movs	r2, #1
 801743e:	2109      	movs	r1, #9
 8017440:	f7ff ff8e 	bl	8017360 <std>
 8017444:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017448:	2202      	movs	r2, #2
 801744a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801744e:	2112      	movs	r1, #18
 8017450:	f7ff bf86 	b.w	8017360 <std>
 8017454:	20013144 	.word	0x20013144
 8017458:	2001300c 	.word	0x2001300c
 801745c:	080173cd 	.word	0x080173cd

08017460 <__sfp_lock_acquire>:
 8017460:	4801      	ldr	r0, [pc, #4]	@ (8017468 <__sfp_lock_acquire+0x8>)
 8017462:	f000 b9dc 	b.w	801781e <__retarget_lock_acquire_recursive>
 8017466:	bf00      	nop
 8017468:	2001314d 	.word	0x2001314d

0801746c <__sfp_lock_release>:
 801746c:	4801      	ldr	r0, [pc, #4]	@ (8017474 <__sfp_lock_release+0x8>)
 801746e:	f000 b9d7 	b.w	8017820 <__retarget_lock_release_recursive>
 8017472:	bf00      	nop
 8017474:	2001314d 	.word	0x2001314d

08017478 <__sinit>:
 8017478:	b510      	push	{r4, lr}
 801747a:	4604      	mov	r4, r0
 801747c:	f7ff fff0 	bl	8017460 <__sfp_lock_acquire>
 8017480:	6a23      	ldr	r3, [r4, #32]
 8017482:	b11b      	cbz	r3, 801748c <__sinit+0x14>
 8017484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017488:	f7ff bff0 	b.w	801746c <__sfp_lock_release>
 801748c:	4b04      	ldr	r3, [pc, #16]	@ (80174a0 <__sinit+0x28>)
 801748e:	6223      	str	r3, [r4, #32]
 8017490:	4b04      	ldr	r3, [pc, #16]	@ (80174a4 <__sinit+0x2c>)
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	2b00      	cmp	r3, #0
 8017496:	d1f5      	bne.n	8017484 <__sinit+0xc>
 8017498:	f7ff ffc4 	bl	8017424 <global_stdio_init.part.0>
 801749c:	e7f2      	b.n	8017484 <__sinit+0xc>
 801749e:	bf00      	nop
 80174a0:	080173e5 	.word	0x080173e5
 80174a4:	20013144 	.word	0x20013144

080174a8 <_fwalk_sglue>:
 80174a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174ac:	4607      	mov	r7, r0
 80174ae:	4688      	mov	r8, r1
 80174b0:	4614      	mov	r4, r2
 80174b2:	2600      	movs	r6, #0
 80174b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80174b8:	f1b9 0901 	subs.w	r9, r9, #1
 80174bc:	d505      	bpl.n	80174ca <_fwalk_sglue+0x22>
 80174be:	6824      	ldr	r4, [r4, #0]
 80174c0:	2c00      	cmp	r4, #0
 80174c2:	d1f7      	bne.n	80174b4 <_fwalk_sglue+0xc>
 80174c4:	4630      	mov	r0, r6
 80174c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174ca:	89ab      	ldrh	r3, [r5, #12]
 80174cc:	2b01      	cmp	r3, #1
 80174ce:	d907      	bls.n	80174e0 <_fwalk_sglue+0x38>
 80174d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80174d4:	3301      	adds	r3, #1
 80174d6:	d003      	beq.n	80174e0 <_fwalk_sglue+0x38>
 80174d8:	4629      	mov	r1, r5
 80174da:	4638      	mov	r0, r7
 80174dc:	47c0      	blx	r8
 80174de:	4306      	orrs	r6, r0
 80174e0:	3568      	adds	r5, #104	@ 0x68
 80174e2:	e7e9      	b.n	80174b8 <_fwalk_sglue+0x10>

080174e4 <iprintf>:
 80174e4:	b40f      	push	{r0, r1, r2, r3}
 80174e6:	b507      	push	{r0, r1, r2, lr}
 80174e8:	4906      	ldr	r1, [pc, #24]	@ (8017504 <iprintf+0x20>)
 80174ea:	ab04      	add	r3, sp, #16
 80174ec:	6808      	ldr	r0, [r1, #0]
 80174ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80174f2:	6881      	ldr	r1, [r0, #8]
 80174f4:	9301      	str	r3, [sp, #4]
 80174f6:	f000 fb6f 	bl	8017bd8 <_vfiprintf_r>
 80174fa:	b003      	add	sp, #12
 80174fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8017500:	b004      	add	sp, #16
 8017502:	4770      	bx	lr
 8017504:	20000080 	.word	0x20000080

08017508 <sniprintf>:
 8017508:	b40c      	push	{r2, r3}
 801750a:	b530      	push	{r4, r5, lr}
 801750c:	4b18      	ldr	r3, [pc, #96]	@ (8017570 <sniprintf+0x68>)
 801750e:	1e0c      	subs	r4, r1, #0
 8017510:	681d      	ldr	r5, [r3, #0]
 8017512:	b09d      	sub	sp, #116	@ 0x74
 8017514:	da08      	bge.n	8017528 <sniprintf+0x20>
 8017516:	238b      	movs	r3, #139	@ 0x8b
 8017518:	602b      	str	r3, [r5, #0]
 801751a:	f04f 30ff 	mov.w	r0, #4294967295
 801751e:	b01d      	add	sp, #116	@ 0x74
 8017520:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017524:	b002      	add	sp, #8
 8017526:	4770      	bx	lr
 8017528:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801752c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017530:	f04f 0300 	mov.w	r3, #0
 8017534:	931b      	str	r3, [sp, #108]	@ 0x6c
 8017536:	bf14      	ite	ne
 8017538:	f104 33ff 	addne.w	r3, r4, #4294967295
 801753c:	4623      	moveq	r3, r4
 801753e:	9304      	str	r3, [sp, #16]
 8017540:	9307      	str	r3, [sp, #28]
 8017542:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017546:	9002      	str	r0, [sp, #8]
 8017548:	9006      	str	r0, [sp, #24]
 801754a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801754e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017550:	ab21      	add	r3, sp, #132	@ 0x84
 8017552:	a902      	add	r1, sp, #8
 8017554:	4628      	mov	r0, r5
 8017556:	9301      	str	r3, [sp, #4]
 8017558:	f000 fa18 	bl	801798c <_svfiprintf_r>
 801755c:	1c43      	adds	r3, r0, #1
 801755e:	bfbc      	itt	lt
 8017560:	238b      	movlt	r3, #139	@ 0x8b
 8017562:	602b      	strlt	r3, [r5, #0]
 8017564:	2c00      	cmp	r4, #0
 8017566:	d0da      	beq.n	801751e <sniprintf+0x16>
 8017568:	9b02      	ldr	r3, [sp, #8]
 801756a:	2200      	movs	r2, #0
 801756c:	701a      	strb	r2, [r3, #0]
 801756e:	e7d6      	b.n	801751e <sniprintf+0x16>
 8017570:	20000080 	.word	0x20000080

08017574 <siprintf>:
 8017574:	b40e      	push	{r1, r2, r3}
 8017576:	b510      	push	{r4, lr}
 8017578:	b09d      	sub	sp, #116	@ 0x74
 801757a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801757c:	9002      	str	r0, [sp, #8]
 801757e:	9006      	str	r0, [sp, #24]
 8017580:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017584:	480a      	ldr	r0, [pc, #40]	@ (80175b0 <siprintf+0x3c>)
 8017586:	9107      	str	r1, [sp, #28]
 8017588:	9104      	str	r1, [sp, #16]
 801758a:	490a      	ldr	r1, [pc, #40]	@ (80175b4 <siprintf+0x40>)
 801758c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017590:	9105      	str	r1, [sp, #20]
 8017592:	2400      	movs	r4, #0
 8017594:	a902      	add	r1, sp, #8
 8017596:	6800      	ldr	r0, [r0, #0]
 8017598:	9301      	str	r3, [sp, #4]
 801759a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801759c:	f000 f9f6 	bl	801798c <_svfiprintf_r>
 80175a0:	9b02      	ldr	r3, [sp, #8]
 80175a2:	701c      	strb	r4, [r3, #0]
 80175a4:	b01d      	add	sp, #116	@ 0x74
 80175a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80175aa:	b003      	add	sp, #12
 80175ac:	4770      	bx	lr
 80175ae:	bf00      	nop
 80175b0:	20000080 	.word	0x20000080
 80175b4:	ffff0208 	.word	0xffff0208

080175b8 <__sread>:
 80175b8:	b510      	push	{r4, lr}
 80175ba:	460c      	mov	r4, r1
 80175bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175c0:	f000 f8ce 	bl	8017760 <_read_r>
 80175c4:	2800      	cmp	r0, #0
 80175c6:	bfab      	itete	ge
 80175c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80175ca:	89a3      	ldrhlt	r3, [r4, #12]
 80175cc:	181b      	addge	r3, r3, r0
 80175ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80175d2:	bfac      	ite	ge
 80175d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80175d6:	81a3      	strhlt	r3, [r4, #12]
 80175d8:	bd10      	pop	{r4, pc}

080175da <__swrite>:
 80175da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175de:	461f      	mov	r7, r3
 80175e0:	898b      	ldrh	r3, [r1, #12]
 80175e2:	05db      	lsls	r3, r3, #23
 80175e4:	4605      	mov	r5, r0
 80175e6:	460c      	mov	r4, r1
 80175e8:	4616      	mov	r6, r2
 80175ea:	d505      	bpl.n	80175f8 <__swrite+0x1e>
 80175ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175f0:	2302      	movs	r3, #2
 80175f2:	2200      	movs	r2, #0
 80175f4:	f000 f8a2 	bl	801773c <_lseek_r>
 80175f8:	89a3      	ldrh	r3, [r4, #12]
 80175fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80175fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017602:	81a3      	strh	r3, [r4, #12]
 8017604:	4632      	mov	r2, r6
 8017606:	463b      	mov	r3, r7
 8017608:	4628      	mov	r0, r5
 801760a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801760e:	f000 b8c9 	b.w	80177a4 <_write_r>

08017612 <__sseek>:
 8017612:	b510      	push	{r4, lr}
 8017614:	460c      	mov	r4, r1
 8017616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801761a:	f000 f88f 	bl	801773c <_lseek_r>
 801761e:	1c43      	adds	r3, r0, #1
 8017620:	89a3      	ldrh	r3, [r4, #12]
 8017622:	bf15      	itete	ne
 8017624:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017626:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801762a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801762e:	81a3      	strheq	r3, [r4, #12]
 8017630:	bf18      	it	ne
 8017632:	81a3      	strhne	r3, [r4, #12]
 8017634:	bd10      	pop	{r4, pc}

08017636 <__sclose>:
 8017636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801763a:	f000 b86f 	b.w	801771c <_close_r>

0801763e <_vsniprintf_r>:
 801763e:	b530      	push	{r4, r5, lr}
 8017640:	4614      	mov	r4, r2
 8017642:	2c00      	cmp	r4, #0
 8017644:	b09b      	sub	sp, #108	@ 0x6c
 8017646:	4605      	mov	r5, r0
 8017648:	461a      	mov	r2, r3
 801764a:	da05      	bge.n	8017658 <_vsniprintf_r+0x1a>
 801764c:	238b      	movs	r3, #139	@ 0x8b
 801764e:	6003      	str	r3, [r0, #0]
 8017650:	f04f 30ff 	mov.w	r0, #4294967295
 8017654:	b01b      	add	sp, #108	@ 0x6c
 8017656:	bd30      	pop	{r4, r5, pc}
 8017658:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801765c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017660:	f04f 0300 	mov.w	r3, #0
 8017664:	9319      	str	r3, [sp, #100]	@ 0x64
 8017666:	bf14      	ite	ne
 8017668:	f104 33ff 	addne.w	r3, r4, #4294967295
 801766c:	4623      	moveq	r3, r4
 801766e:	9302      	str	r3, [sp, #8]
 8017670:	9305      	str	r3, [sp, #20]
 8017672:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017676:	9100      	str	r1, [sp, #0]
 8017678:	9104      	str	r1, [sp, #16]
 801767a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801767e:	4669      	mov	r1, sp
 8017680:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017682:	f000 f983 	bl	801798c <_svfiprintf_r>
 8017686:	1c43      	adds	r3, r0, #1
 8017688:	bfbc      	itt	lt
 801768a:	238b      	movlt	r3, #139	@ 0x8b
 801768c:	602b      	strlt	r3, [r5, #0]
 801768e:	2c00      	cmp	r4, #0
 8017690:	d0e0      	beq.n	8017654 <_vsniprintf_r+0x16>
 8017692:	9b00      	ldr	r3, [sp, #0]
 8017694:	2200      	movs	r2, #0
 8017696:	701a      	strb	r2, [r3, #0]
 8017698:	e7dc      	b.n	8017654 <_vsniprintf_r+0x16>
	...

0801769c <vsniprintf>:
 801769c:	b507      	push	{r0, r1, r2, lr}
 801769e:	9300      	str	r3, [sp, #0]
 80176a0:	4613      	mov	r3, r2
 80176a2:	460a      	mov	r2, r1
 80176a4:	4601      	mov	r1, r0
 80176a6:	4803      	ldr	r0, [pc, #12]	@ (80176b4 <vsniprintf+0x18>)
 80176a8:	6800      	ldr	r0, [r0, #0]
 80176aa:	f7ff ffc8 	bl	801763e <_vsniprintf_r>
 80176ae:	b003      	add	sp, #12
 80176b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80176b4:	20000080 	.word	0x20000080

080176b8 <memset>:
 80176b8:	4402      	add	r2, r0
 80176ba:	4603      	mov	r3, r0
 80176bc:	4293      	cmp	r3, r2
 80176be:	d100      	bne.n	80176c2 <memset+0xa>
 80176c0:	4770      	bx	lr
 80176c2:	f803 1b01 	strb.w	r1, [r3], #1
 80176c6:	e7f9      	b.n	80176bc <memset+0x4>

080176c8 <strncpy>:
 80176c8:	b510      	push	{r4, lr}
 80176ca:	3901      	subs	r1, #1
 80176cc:	4603      	mov	r3, r0
 80176ce:	b132      	cbz	r2, 80176de <strncpy+0x16>
 80176d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80176d4:	f803 4b01 	strb.w	r4, [r3], #1
 80176d8:	3a01      	subs	r2, #1
 80176da:	2c00      	cmp	r4, #0
 80176dc:	d1f7      	bne.n	80176ce <strncpy+0x6>
 80176de:	441a      	add	r2, r3
 80176e0:	2100      	movs	r1, #0
 80176e2:	4293      	cmp	r3, r2
 80176e4:	d100      	bne.n	80176e8 <strncpy+0x20>
 80176e6:	bd10      	pop	{r4, pc}
 80176e8:	f803 1b01 	strb.w	r1, [r3], #1
 80176ec:	e7f9      	b.n	80176e2 <strncpy+0x1a>

080176ee <strstr>:
 80176ee:	780a      	ldrb	r2, [r1, #0]
 80176f0:	b570      	push	{r4, r5, r6, lr}
 80176f2:	b96a      	cbnz	r2, 8017710 <strstr+0x22>
 80176f4:	bd70      	pop	{r4, r5, r6, pc}
 80176f6:	429a      	cmp	r2, r3
 80176f8:	d109      	bne.n	801770e <strstr+0x20>
 80176fa:	460c      	mov	r4, r1
 80176fc:	4605      	mov	r5, r0
 80176fe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017702:	2b00      	cmp	r3, #0
 8017704:	d0f6      	beq.n	80176f4 <strstr+0x6>
 8017706:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801770a:	429e      	cmp	r6, r3
 801770c:	d0f7      	beq.n	80176fe <strstr+0x10>
 801770e:	3001      	adds	r0, #1
 8017710:	7803      	ldrb	r3, [r0, #0]
 8017712:	2b00      	cmp	r3, #0
 8017714:	d1ef      	bne.n	80176f6 <strstr+0x8>
 8017716:	4618      	mov	r0, r3
 8017718:	e7ec      	b.n	80176f4 <strstr+0x6>
	...

0801771c <_close_r>:
 801771c:	b538      	push	{r3, r4, r5, lr}
 801771e:	4d06      	ldr	r5, [pc, #24]	@ (8017738 <_close_r+0x1c>)
 8017720:	2300      	movs	r3, #0
 8017722:	4604      	mov	r4, r0
 8017724:	4608      	mov	r0, r1
 8017726:	602b      	str	r3, [r5, #0]
 8017728:	f7ed fd39 	bl	800519e <_close>
 801772c:	1c43      	adds	r3, r0, #1
 801772e:	d102      	bne.n	8017736 <_close_r+0x1a>
 8017730:	682b      	ldr	r3, [r5, #0]
 8017732:	b103      	cbz	r3, 8017736 <_close_r+0x1a>
 8017734:	6023      	str	r3, [r4, #0]
 8017736:	bd38      	pop	{r3, r4, r5, pc}
 8017738:	20013148 	.word	0x20013148

0801773c <_lseek_r>:
 801773c:	b538      	push	{r3, r4, r5, lr}
 801773e:	4d07      	ldr	r5, [pc, #28]	@ (801775c <_lseek_r+0x20>)
 8017740:	4604      	mov	r4, r0
 8017742:	4608      	mov	r0, r1
 8017744:	4611      	mov	r1, r2
 8017746:	2200      	movs	r2, #0
 8017748:	602a      	str	r2, [r5, #0]
 801774a:	461a      	mov	r2, r3
 801774c:	f7ed fd4e 	bl	80051ec <_lseek>
 8017750:	1c43      	adds	r3, r0, #1
 8017752:	d102      	bne.n	801775a <_lseek_r+0x1e>
 8017754:	682b      	ldr	r3, [r5, #0]
 8017756:	b103      	cbz	r3, 801775a <_lseek_r+0x1e>
 8017758:	6023      	str	r3, [r4, #0]
 801775a:	bd38      	pop	{r3, r4, r5, pc}
 801775c:	20013148 	.word	0x20013148

08017760 <_read_r>:
 8017760:	b538      	push	{r3, r4, r5, lr}
 8017762:	4d07      	ldr	r5, [pc, #28]	@ (8017780 <_read_r+0x20>)
 8017764:	4604      	mov	r4, r0
 8017766:	4608      	mov	r0, r1
 8017768:	4611      	mov	r1, r2
 801776a:	2200      	movs	r2, #0
 801776c:	602a      	str	r2, [r5, #0]
 801776e:	461a      	mov	r2, r3
 8017770:	f7ed fcdc 	bl	800512c <_read>
 8017774:	1c43      	adds	r3, r0, #1
 8017776:	d102      	bne.n	801777e <_read_r+0x1e>
 8017778:	682b      	ldr	r3, [r5, #0]
 801777a:	b103      	cbz	r3, 801777e <_read_r+0x1e>
 801777c:	6023      	str	r3, [r4, #0]
 801777e:	bd38      	pop	{r3, r4, r5, pc}
 8017780:	20013148 	.word	0x20013148

08017784 <_sbrk_r>:
 8017784:	b538      	push	{r3, r4, r5, lr}
 8017786:	4d06      	ldr	r5, [pc, #24]	@ (80177a0 <_sbrk_r+0x1c>)
 8017788:	2300      	movs	r3, #0
 801778a:	4604      	mov	r4, r0
 801778c:	4608      	mov	r0, r1
 801778e:	602b      	str	r3, [r5, #0]
 8017790:	f7ed fd3a 	bl	8005208 <_sbrk>
 8017794:	1c43      	adds	r3, r0, #1
 8017796:	d102      	bne.n	801779e <_sbrk_r+0x1a>
 8017798:	682b      	ldr	r3, [r5, #0]
 801779a:	b103      	cbz	r3, 801779e <_sbrk_r+0x1a>
 801779c:	6023      	str	r3, [r4, #0]
 801779e:	bd38      	pop	{r3, r4, r5, pc}
 80177a0:	20013148 	.word	0x20013148

080177a4 <_write_r>:
 80177a4:	b538      	push	{r3, r4, r5, lr}
 80177a6:	4d07      	ldr	r5, [pc, #28]	@ (80177c4 <_write_r+0x20>)
 80177a8:	4604      	mov	r4, r0
 80177aa:	4608      	mov	r0, r1
 80177ac:	4611      	mov	r1, r2
 80177ae:	2200      	movs	r2, #0
 80177b0:	602a      	str	r2, [r5, #0]
 80177b2:	461a      	mov	r2, r3
 80177b4:	f7ed fcd7 	bl	8005166 <_write>
 80177b8:	1c43      	adds	r3, r0, #1
 80177ba:	d102      	bne.n	80177c2 <_write_r+0x1e>
 80177bc:	682b      	ldr	r3, [r5, #0]
 80177be:	b103      	cbz	r3, 80177c2 <_write_r+0x1e>
 80177c0:	6023      	str	r3, [r4, #0]
 80177c2:	bd38      	pop	{r3, r4, r5, pc}
 80177c4:	20013148 	.word	0x20013148

080177c8 <__errno>:
 80177c8:	4b01      	ldr	r3, [pc, #4]	@ (80177d0 <__errno+0x8>)
 80177ca:	6818      	ldr	r0, [r3, #0]
 80177cc:	4770      	bx	lr
 80177ce:	bf00      	nop
 80177d0:	20000080 	.word	0x20000080

080177d4 <__libc_init_array>:
 80177d4:	b570      	push	{r4, r5, r6, lr}
 80177d6:	4d0d      	ldr	r5, [pc, #52]	@ (801780c <__libc_init_array+0x38>)
 80177d8:	4c0d      	ldr	r4, [pc, #52]	@ (8017810 <__libc_init_array+0x3c>)
 80177da:	1b64      	subs	r4, r4, r5
 80177dc:	10a4      	asrs	r4, r4, #2
 80177de:	2600      	movs	r6, #0
 80177e0:	42a6      	cmp	r6, r4
 80177e2:	d109      	bne.n	80177f8 <__libc_init_array+0x24>
 80177e4:	4d0b      	ldr	r5, [pc, #44]	@ (8017814 <__libc_init_array+0x40>)
 80177e6:	4c0c      	ldr	r4, [pc, #48]	@ (8017818 <__libc_init_array+0x44>)
 80177e8:	f000 feae 	bl	8018548 <_init>
 80177ec:	1b64      	subs	r4, r4, r5
 80177ee:	10a4      	asrs	r4, r4, #2
 80177f0:	2600      	movs	r6, #0
 80177f2:	42a6      	cmp	r6, r4
 80177f4:	d105      	bne.n	8017802 <__libc_init_array+0x2e>
 80177f6:	bd70      	pop	{r4, r5, r6, pc}
 80177f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80177fc:	4798      	blx	r3
 80177fe:	3601      	adds	r6, #1
 8017800:	e7ee      	b.n	80177e0 <__libc_init_array+0xc>
 8017802:	f855 3b04 	ldr.w	r3, [r5], #4
 8017806:	4798      	blx	r3
 8017808:	3601      	adds	r6, #1
 801780a:	e7f2      	b.n	80177f2 <__libc_init_array+0x1e>
 801780c:	0801ba9c 	.word	0x0801ba9c
 8017810:	0801ba9c 	.word	0x0801ba9c
 8017814:	0801ba9c 	.word	0x0801ba9c
 8017818:	0801baa0 	.word	0x0801baa0

0801781c <__retarget_lock_init_recursive>:
 801781c:	4770      	bx	lr

0801781e <__retarget_lock_acquire_recursive>:
 801781e:	4770      	bx	lr

08017820 <__retarget_lock_release_recursive>:
 8017820:	4770      	bx	lr

08017822 <memcpy>:
 8017822:	440a      	add	r2, r1
 8017824:	4291      	cmp	r1, r2
 8017826:	f100 33ff 	add.w	r3, r0, #4294967295
 801782a:	d100      	bne.n	801782e <memcpy+0xc>
 801782c:	4770      	bx	lr
 801782e:	b510      	push	{r4, lr}
 8017830:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017834:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017838:	4291      	cmp	r1, r2
 801783a:	d1f9      	bne.n	8017830 <memcpy+0xe>
 801783c:	bd10      	pop	{r4, pc}
	...

08017840 <_free_r>:
 8017840:	b538      	push	{r3, r4, r5, lr}
 8017842:	4605      	mov	r5, r0
 8017844:	2900      	cmp	r1, #0
 8017846:	d041      	beq.n	80178cc <_free_r+0x8c>
 8017848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801784c:	1f0c      	subs	r4, r1, #4
 801784e:	2b00      	cmp	r3, #0
 8017850:	bfb8      	it	lt
 8017852:	18e4      	addlt	r4, r4, r3
 8017854:	f7ff fd78 	bl	8017348 <__malloc_lock>
 8017858:	4a1d      	ldr	r2, [pc, #116]	@ (80178d0 <_free_r+0x90>)
 801785a:	6813      	ldr	r3, [r2, #0]
 801785c:	b933      	cbnz	r3, 801786c <_free_r+0x2c>
 801785e:	6063      	str	r3, [r4, #4]
 8017860:	6014      	str	r4, [r2, #0]
 8017862:	4628      	mov	r0, r5
 8017864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017868:	f7ff bd74 	b.w	8017354 <__malloc_unlock>
 801786c:	42a3      	cmp	r3, r4
 801786e:	d908      	bls.n	8017882 <_free_r+0x42>
 8017870:	6820      	ldr	r0, [r4, #0]
 8017872:	1821      	adds	r1, r4, r0
 8017874:	428b      	cmp	r3, r1
 8017876:	bf01      	itttt	eq
 8017878:	6819      	ldreq	r1, [r3, #0]
 801787a:	685b      	ldreq	r3, [r3, #4]
 801787c:	1809      	addeq	r1, r1, r0
 801787e:	6021      	streq	r1, [r4, #0]
 8017880:	e7ed      	b.n	801785e <_free_r+0x1e>
 8017882:	461a      	mov	r2, r3
 8017884:	685b      	ldr	r3, [r3, #4]
 8017886:	b10b      	cbz	r3, 801788c <_free_r+0x4c>
 8017888:	42a3      	cmp	r3, r4
 801788a:	d9fa      	bls.n	8017882 <_free_r+0x42>
 801788c:	6811      	ldr	r1, [r2, #0]
 801788e:	1850      	adds	r0, r2, r1
 8017890:	42a0      	cmp	r0, r4
 8017892:	d10b      	bne.n	80178ac <_free_r+0x6c>
 8017894:	6820      	ldr	r0, [r4, #0]
 8017896:	4401      	add	r1, r0
 8017898:	1850      	adds	r0, r2, r1
 801789a:	4283      	cmp	r3, r0
 801789c:	6011      	str	r1, [r2, #0]
 801789e:	d1e0      	bne.n	8017862 <_free_r+0x22>
 80178a0:	6818      	ldr	r0, [r3, #0]
 80178a2:	685b      	ldr	r3, [r3, #4]
 80178a4:	6053      	str	r3, [r2, #4]
 80178a6:	4408      	add	r0, r1
 80178a8:	6010      	str	r0, [r2, #0]
 80178aa:	e7da      	b.n	8017862 <_free_r+0x22>
 80178ac:	d902      	bls.n	80178b4 <_free_r+0x74>
 80178ae:	230c      	movs	r3, #12
 80178b0:	602b      	str	r3, [r5, #0]
 80178b2:	e7d6      	b.n	8017862 <_free_r+0x22>
 80178b4:	6820      	ldr	r0, [r4, #0]
 80178b6:	1821      	adds	r1, r4, r0
 80178b8:	428b      	cmp	r3, r1
 80178ba:	bf04      	itt	eq
 80178bc:	6819      	ldreq	r1, [r3, #0]
 80178be:	685b      	ldreq	r3, [r3, #4]
 80178c0:	6063      	str	r3, [r4, #4]
 80178c2:	bf04      	itt	eq
 80178c4:	1809      	addeq	r1, r1, r0
 80178c6:	6021      	streq	r1, [r4, #0]
 80178c8:	6054      	str	r4, [r2, #4]
 80178ca:	e7ca      	b.n	8017862 <_free_r+0x22>
 80178cc:	bd38      	pop	{r3, r4, r5, pc}
 80178ce:	bf00      	nop
 80178d0:	20013008 	.word	0x20013008

080178d4 <__ssputs_r>:
 80178d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178d8:	688e      	ldr	r6, [r1, #8]
 80178da:	461f      	mov	r7, r3
 80178dc:	42be      	cmp	r6, r7
 80178de:	680b      	ldr	r3, [r1, #0]
 80178e0:	4682      	mov	sl, r0
 80178e2:	460c      	mov	r4, r1
 80178e4:	4690      	mov	r8, r2
 80178e6:	d82d      	bhi.n	8017944 <__ssputs_r+0x70>
 80178e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80178ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80178f0:	d026      	beq.n	8017940 <__ssputs_r+0x6c>
 80178f2:	6965      	ldr	r5, [r4, #20]
 80178f4:	6909      	ldr	r1, [r1, #16]
 80178f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80178fa:	eba3 0901 	sub.w	r9, r3, r1
 80178fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017902:	1c7b      	adds	r3, r7, #1
 8017904:	444b      	add	r3, r9
 8017906:	106d      	asrs	r5, r5, #1
 8017908:	429d      	cmp	r5, r3
 801790a:	bf38      	it	cc
 801790c:	461d      	movcc	r5, r3
 801790e:	0553      	lsls	r3, r2, #21
 8017910:	d527      	bpl.n	8017962 <__ssputs_r+0x8e>
 8017912:	4629      	mov	r1, r5
 8017914:	f7ff fc98 	bl	8017248 <_malloc_r>
 8017918:	4606      	mov	r6, r0
 801791a:	b360      	cbz	r0, 8017976 <__ssputs_r+0xa2>
 801791c:	6921      	ldr	r1, [r4, #16]
 801791e:	464a      	mov	r2, r9
 8017920:	f7ff ff7f 	bl	8017822 <memcpy>
 8017924:	89a3      	ldrh	r3, [r4, #12]
 8017926:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801792a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801792e:	81a3      	strh	r3, [r4, #12]
 8017930:	6126      	str	r6, [r4, #16]
 8017932:	6165      	str	r5, [r4, #20]
 8017934:	444e      	add	r6, r9
 8017936:	eba5 0509 	sub.w	r5, r5, r9
 801793a:	6026      	str	r6, [r4, #0]
 801793c:	60a5      	str	r5, [r4, #8]
 801793e:	463e      	mov	r6, r7
 8017940:	42be      	cmp	r6, r7
 8017942:	d900      	bls.n	8017946 <__ssputs_r+0x72>
 8017944:	463e      	mov	r6, r7
 8017946:	6820      	ldr	r0, [r4, #0]
 8017948:	4632      	mov	r2, r6
 801794a:	4641      	mov	r1, r8
 801794c:	f000 fd28 	bl	80183a0 <memmove>
 8017950:	68a3      	ldr	r3, [r4, #8]
 8017952:	1b9b      	subs	r3, r3, r6
 8017954:	60a3      	str	r3, [r4, #8]
 8017956:	6823      	ldr	r3, [r4, #0]
 8017958:	4433      	add	r3, r6
 801795a:	6023      	str	r3, [r4, #0]
 801795c:	2000      	movs	r0, #0
 801795e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017962:	462a      	mov	r2, r5
 8017964:	f000 fd36 	bl	80183d4 <_realloc_r>
 8017968:	4606      	mov	r6, r0
 801796a:	2800      	cmp	r0, #0
 801796c:	d1e0      	bne.n	8017930 <__ssputs_r+0x5c>
 801796e:	6921      	ldr	r1, [r4, #16]
 8017970:	4650      	mov	r0, sl
 8017972:	f7ff ff65 	bl	8017840 <_free_r>
 8017976:	230c      	movs	r3, #12
 8017978:	f8ca 3000 	str.w	r3, [sl]
 801797c:	89a3      	ldrh	r3, [r4, #12]
 801797e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017982:	81a3      	strh	r3, [r4, #12]
 8017984:	f04f 30ff 	mov.w	r0, #4294967295
 8017988:	e7e9      	b.n	801795e <__ssputs_r+0x8a>
	...

0801798c <_svfiprintf_r>:
 801798c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017990:	4698      	mov	r8, r3
 8017992:	898b      	ldrh	r3, [r1, #12]
 8017994:	061b      	lsls	r3, r3, #24
 8017996:	b09d      	sub	sp, #116	@ 0x74
 8017998:	4607      	mov	r7, r0
 801799a:	460d      	mov	r5, r1
 801799c:	4614      	mov	r4, r2
 801799e:	d510      	bpl.n	80179c2 <_svfiprintf_r+0x36>
 80179a0:	690b      	ldr	r3, [r1, #16]
 80179a2:	b973      	cbnz	r3, 80179c2 <_svfiprintf_r+0x36>
 80179a4:	2140      	movs	r1, #64	@ 0x40
 80179a6:	f7ff fc4f 	bl	8017248 <_malloc_r>
 80179aa:	6028      	str	r0, [r5, #0]
 80179ac:	6128      	str	r0, [r5, #16]
 80179ae:	b930      	cbnz	r0, 80179be <_svfiprintf_r+0x32>
 80179b0:	230c      	movs	r3, #12
 80179b2:	603b      	str	r3, [r7, #0]
 80179b4:	f04f 30ff 	mov.w	r0, #4294967295
 80179b8:	b01d      	add	sp, #116	@ 0x74
 80179ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179be:	2340      	movs	r3, #64	@ 0x40
 80179c0:	616b      	str	r3, [r5, #20]
 80179c2:	2300      	movs	r3, #0
 80179c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80179c6:	2320      	movs	r3, #32
 80179c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80179cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80179d0:	2330      	movs	r3, #48	@ 0x30
 80179d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017b70 <_svfiprintf_r+0x1e4>
 80179d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80179da:	f04f 0901 	mov.w	r9, #1
 80179de:	4623      	mov	r3, r4
 80179e0:	469a      	mov	sl, r3
 80179e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80179e6:	b10a      	cbz	r2, 80179ec <_svfiprintf_r+0x60>
 80179e8:	2a25      	cmp	r2, #37	@ 0x25
 80179ea:	d1f9      	bne.n	80179e0 <_svfiprintf_r+0x54>
 80179ec:	ebba 0b04 	subs.w	fp, sl, r4
 80179f0:	d00b      	beq.n	8017a0a <_svfiprintf_r+0x7e>
 80179f2:	465b      	mov	r3, fp
 80179f4:	4622      	mov	r2, r4
 80179f6:	4629      	mov	r1, r5
 80179f8:	4638      	mov	r0, r7
 80179fa:	f7ff ff6b 	bl	80178d4 <__ssputs_r>
 80179fe:	3001      	adds	r0, #1
 8017a00:	f000 80a7 	beq.w	8017b52 <_svfiprintf_r+0x1c6>
 8017a04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017a06:	445a      	add	r2, fp
 8017a08:	9209      	str	r2, [sp, #36]	@ 0x24
 8017a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	f000 809f 	beq.w	8017b52 <_svfiprintf_r+0x1c6>
 8017a14:	2300      	movs	r3, #0
 8017a16:	f04f 32ff 	mov.w	r2, #4294967295
 8017a1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017a1e:	f10a 0a01 	add.w	sl, sl, #1
 8017a22:	9304      	str	r3, [sp, #16]
 8017a24:	9307      	str	r3, [sp, #28]
 8017a26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017a2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8017a2c:	4654      	mov	r4, sl
 8017a2e:	2205      	movs	r2, #5
 8017a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a34:	484e      	ldr	r0, [pc, #312]	@ (8017b70 <_svfiprintf_r+0x1e4>)
 8017a36:	f7e8 fc03 	bl	8000240 <memchr>
 8017a3a:	9a04      	ldr	r2, [sp, #16]
 8017a3c:	b9d8      	cbnz	r0, 8017a76 <_svfiprintf_r+0xea>
 8017a3e:	06d0      	lsls	r0, r2, #27
 8017a40:	bf44      	itt	mi
 8017a42:	2320      	movmi	r3, #32
 8017a44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017a48:	0711      	lsls	r1, r2, #28
 8017a4a:	bf44      	itt	mi
 8017a4c:	232b      	movmi	r3, #43	@ 0x2b
 8017a4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017a52:	f89a 3000 	ldrb.w	r3, [sl]
 8017a56:	2b2a      	cmp	r3, #42	@ 0x2a
 8017a58:	d015      	beq.n	8017a86 <_svfiprintf_r+0xfa>
 8017a5a:	9a07      	ldr	r2, [sp, #28]
 8017a5c:	4654      	mov	r4, sl
 8017a5e:	2000      	movs	r0, #0
 8017a60:	f04f 0c0a 	mov.w	ip, #10
 8017a64:	4621      	mov	r1, r4
 8017a66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017a6a:	3b30      	subs	r3, #48	@ 0x30
 8017a6c:	2b09      	cmp	r3, #9
 8017a6e:	d94b      	bls.n	8017b08 <_svfiprintf_r+0x17c>
 8017a70:	b1b0      	cbz	r0, 8017aa0 <_svfiprintf_r+0x114>
 8017a72:	9207      	str	r2, [sp, #28]
 8017a74:	e014      	b.n	8017aa0 <_svfiprintf_r+0x114>
 8017a76:	eba0 0308 	sub.w	r3, r0, r8
 8017a7a:	fa09 f303 	lsl.w	r3, r9, r3
 8017a7e:	4313      	orrs	r3, r2
 8017a80:	9304      	str	r3, [sp, #16]
 8017a82:	46a2      	mov	sl, r4
 8017a84:	e7d2      	b.n	8017a2c <_svfiprintf_r+0xa0>
 8017a86:	9b03      	ldr	r3, [sp, #12]
 8017a88:	1d19      	adds	r1, r3, #4
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	9103      	str	r1, [sp, #12]
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	bfbb      	ittet	lt
 8017a92:	425b      	neglt	r3, r3
 8017a94:	f042 0202 	orrlt.w	r2, r2, #2
 8017a98:	9307      	strge	r3, [sp, #28]
 8017a9a:	9307      	strlt	r3, [sp, #28]
 8017a9c:	bfb8      	it	lt
 8017a9e:	9204      	strlt	r2, [sp, #16]
 8017aa0:	7823      	ldrb	r3, [r4, #0]
 8017aa2:	2b2e      	cmp	r3, #46	@ 0x2e
 8017aa4:	d10a      	bne.n	8017abc <_svfiprintf_r+0x130>
 8017aa6:	7863      	ldrb	r3, [r4, #1]
 8017aa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8017aaa:	d132      	bne.n	8017b12 <_svfiprintf_r+0x186>
 8017aac:	9b03      	ldr	r3, [sp, #12]
 8017aae:	1d1a      	adds	r2, r3, #4
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	9203      	str	r2, [sp, #12]
 8017ab4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017ab8:	3402      	adds	r4, #2
 8017aba:	9305      	str	r3, [sp, #20]
 8017abc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017b80 <_svfiprintf_r+0x1f4>
 8017ac0:	7821      	ldrb	r1, [r4, #0]
 8017ac2:	2203      	movs	r2, #3
 8017ac4:	4650      	mov	r0, sl
 8017ac6:	f7e8 fbbb 	bl	8000240 <memchr>
 8017aca:	b138      	cbz	r0, 8017adc <_svfiprintf_r+0x150>
 8017acc:	9b04      	ldr	r3, [sp, #16]
 8017ace:	eba0 000a 	sub.w	r0, r0, sl
 8017ad2:	2240      	movs	r2, #64	@ 0x40
 8017ad4:	4082      	lsls	r2, r0
 8017ad6:	4313      	orrs	r3, r2
 8017ad8:	3401      	adds	r4, #1
 8017ada:	9304      	str	r3, [sp, #16]
 8017adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ae0:	4824      	ldr	r0, [pc, #144]	@ (8017b74 <_svfiprintf_r+0x1e8>)
 8017ae2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017ae6:	2206      	movs	r2, #6
 8017ae8:	f7e8 fbaa 	bl	8000240 <memchr>
 8017aec:	2800      	cmp	r0, #0
 8017aee:	d036      	beq.n	8017b5e <_svfiprintf_r+0x1d2>
 8017af0:	4b21      	ldr	r3, [pc, #132]	@ (8017b78 <_svfiprintf_r+0x1ec>)
 8017af2:	bb1b      	cbnz	r3, 8017b3c <_svfiprintf_r+0x1b0>
 8017af4:	9b03      	ldr	r3, [sp, #12]
 8017af6:	3307      	adds	r3, #7
 8017af8:	f023 0307 	bic.w	r3, r3, #7
 8017afc:	3308      	adds	r3, #8
 8017afe:	9303      	str	r3, [sp, #12]
 8017b00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017b02:	4433      	add	r3, r6
 8017b04:	9309      	str	r3, [sp, #36]	@ 0x24
 8017b06:	e76a      	b.n	80179de <_svfiprintf_r+0x52>
 8017b08:	fb0c 3202 	mla	r2, ip, r2, r3
 8017b0c:	460c      	mov	r4, r1
 8017b0e:	2001      	movs	r0, #1
 8017b10:	e7a8      	b.n	8017a64 <_svfiprintf_r+0xd8>
 8017b12:	2300      	movs	r3, #0
 8017b14:	3401      	adds	r4, #1
 8017b16:	9305      	str	r3, [sp, #20]
 8017b18:	4619      	mov	r1, r3
 8017b1a:	f04f 0c0a 	mov.w	ip, #10
 8017b1e:	4620      	mov	r0, r4
 8017b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017b24:	3a30      	subs	r2, #48	@ 0x30
 8017b26:	2a09      	cmp	r2, #9
 8017b28:	d903      	bls.n	8017b32 <_svfiprintf_r+0x1a6>
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d0c6      	beq.n	8017abc <_svfiprintf_r+0x130>
 8017b2e:	9105      	str	r1, [sp, #20]
 8017b30:	e7c4      	b.n	8017abc <_svfiprintf_r+0x130>
 8017b32:	fb0c 2101 	mla	r1, ip, r1, r2
 8017b36:	4604      	mov	r4, r0
 8017b38:	2301      	movs	r3, #1
 8017b3a:	e7f0      	b.n	8017b1e <_svfiprintf_r+0x192>
 8017b3c:	ab03      	add	r3, sp, #12
 8017b3e:	9300      	str	r3, [sp, #0]
 8017b40:	462a      	mov	r2, r5
 8017b42:	4b0e      	ldr	r3, [pc, #56]	@ (8017b7c <_svfiprintf_r+0x1f0>)
 8017b44:	a904      	add	r1, sp, #16
 8017b46:	4638      	mov	r0, r7
 8017b48:	f3af 8000 	nop.w
 8017b4c:	1c42      	adds	r2, r0, #1
 8017b4e:	4606      	mov	r6, r0
 8017b50:	d1d6      	bne.n	8017b00 <_svfiprintf_r+0x174>
 8017b52:	89ab      	ldrh	r3, [r5, #12]
 8017b54:	065b      	lsls	r3, r3, #25
 8017b56:	f53f af2d 	bmi.w	80179b4 <_svfiprintf_r+0x28>
 8017b5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017b5c:	e72c      	b.n	80179b8 <_svfiprintf_r+0x2c>
 8017b5e:	ab03      	add	r3, sp, #12
 8017b60:	9300      	str	r3, [sp, #0]
 8017b62:	462a      	mov	r2, r5
 8017b64:	4b05      	ldr	r3, [pc, #20]	@ (8017b7c <_svfiprintf_r+0x1f0>)
 8017b66:	a904      	add	r1, sp, #16
 8017b68:	4638      	mov	r0, r7
 8017b6a:	f000 f9bb 	bl	8017ee4 <_printf_i>
 8017b6e:	e7ed      	b.n	8017b4c <_svfiprintf_r+0x1c0>
 8017b70:	0801ba5e 	.word	0x0801ba5e
 8017b74:	0801ba68 	.word	0x0801ba68
 8017b78:	00000000 	.word	0x00000000
 8017b7c:	080178d5 	.word	0x080178d5
 8017b80:	0801ba64 	.word	0x0801ba64

08017b84 <__sfputc_r>:
 8017b84:	6893      	ldr	r3, [r2, #8]
 8017b86:	3b01      	subs	r3, #1
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	b410      	push	{r4}
 8017b8c:	6093      	str	r3, [r2, #8]
 8017b8e:	da08      	bge.n	8017ba2 <__sfputc_r+0x1e>
 8017b90:	6994      	ldr	r4, [r2, #24]
 8017b92:	42a3      	cmp	r3, r4
 8017b94:	db01      	blt.n	8017b9a <__sfputc_r+0x16>
 8017b96:	290a      	cmp	r1, #10
 8017b98:	d103      	bne.n	8017ba2 <__sfputc_r+0x1e>
 8017b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017b9e:	f000 bb6b 	b.w	8018278 <__swbuf_r>
 8017ba2:	6813      	ldr	r3, [r2, #0]
 8017ba4:	1c58      	adds	r0, r3, #1
 8017ba6:	6010      	str	r0, [r2, #0]
 8017ba8:	7019      	strb	r1, [r3, #0]
 8017baa:	4608      	mov	r0, r1
 8017bac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bb0:	4770      	bx	lr

08017bb2 <__sfputs_r>:
 8017bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bb4:	4606      	mov	r6, r0
 8017bb6:	460f      	mov	r7, r1
 8017bb8:	4614      	mov	r4, r2
 8017bba:	18d5      	adds	r5, r2, r3
 8017bbc:	42ac      	cmp	r4, r5
 8017bbe:	d101      	bne.n	8017bc4 <__sfputs_r+0x12>
 8017bc0:	2000      	movs	r0, #0
 8017bc2:	e007      	b.n	8017bd4 <__sfputs_r+0x22>
 8017bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017bc8:	463a      	mov	r2, r7
 8017bca:	4630      	mov	r0, r6
 8017bcc:	f7ff ffda 	bl	8017b84 <__sfputc_r>
 8017bd0:	1c43      	adds	r3, r0, #1
 8017bd2:	d1f3      	bne.n	8017bbc <__sfputs_r+0xa>
 8017bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017bd8 <_vfiprintf_r>:
 8017bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bdc:	460d      	mov	r5, r1
 8017bde:	b09d      	sub	sp, #116	@ 0x74
 8017be0:	4614      	mov	r4, r2
 8017be2:	4698      	mov	r8, r3
 8017be4:	4606      	mov	r6, r0
 8017be6:	b118      	cbz	r0, 8017bf0 <_vfiprintf_r+0x18>
 8017be8:	6a03      	ldr	r3, [r0, #32]
 8017bea:	b90b      	cbnz	r3, 8017bf0 <_vfiprintf_r+0x18>
 8017bec:	f7ff fc44 	bl	8017478 <__sinit>
 8017bf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017bf2:	07d9      	lsls	r1, r3, #31
 8017bf4:	d405      	bmi.n	8017c02 <_vfiprintf_r+0x2a>
 8017bf6:	89ab      	ldrh	r3, [r5, #12]
 8017bf8:	059a      	lsls	r2, r3, #22
 8017bfa:	d402      	bmi.n	8017c02 <_vfiprintf_r+0x2a>
 8017bfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017bfe:	f7ff fe0e 	bl	801781e <__retarget_lock_acquire_recursive>
 8017c02:	89ab      	ldrh	r3, [r5, #12]
 8017c04:	071b      	lsls	r3, r3, #28
 8017c06:	d501      	bpl.n	8017c0c <_vfiprintf_r+0x34>
 8017c08:	692b      	ldr	r3, [r5, #16]
 8017c0a:	b99b      	cbnz	r3, 8017c34 <_vfiprintf_r+0x5c>
 8017c0c:	4629      	mov	r1, r5
 8017c0e:	4630      	mov	r0, r6
 8017c10:	f000 fb70 	bl	80182f4 <__swsetup_r>
 8017c14:	b170      	cbz	r0, 8017c34 <_vfiprintf_r+0x5c>
 8017c16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017c18:	07dc      	lsls	r4, r3, #31
 8017c1a:	d504      	bpl.n	8017c26 <_vfiprintf_r+0x4e>
 8017c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8017c20:	b01d      	add	sp, #116	@ 0x74
 8017c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c26:	89ab      	ldrh	r3, [r5, #12]
 8017c28:	0598      	lsls	r0, r3, #22
 8017c2a:	d4f7      	bmi.n	8017c1c <_vfiprintf_r+0x44>
 8017c2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017c2e:	f7ff fdf7 	bl	8017820 <__retarget_lock_release_recursive>
 8017c32:	e7f3      	b.n	8017c1c <_vfiprintf_r+0x44>
 8017c34:	2300      	movs	r3, #0
 8017c36:	9309      	str	r3, [sp, #36]	@ 0x24
 8017c38:	2320      	movs	r3, #32
 8017c3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017c3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017c42:	2330      	movs	r3, #48	@ 0x30
 8017c44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017df4 <_vfiprintf_r+0x21c>
 8017c48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017c4c:	f04f 0901 	mov.w	r9, #1
 8017c50:	4623      	mov	r3, r4
 8017c52:	469a      	mov	sl, r3
 8017c54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c58:	b10a      	cbz	r2, 8017c5e <_vfiprintf_r+0x86>
 8017c5a:	2a25      	cmp	r2, #37	@ 0x25
 8017c5c:	d1f9      	bne.n	8017c52 <_vfiprintf_r+0x7a>
 8017c5e:	ebba 0b04 	subs.w	fp, sl, r4
 8017c62:	d00b      	beq.n	8017c7c <_vfiprintf_r+0xa4>
 8017c64:	465b      	mov	r3, fp
 8017c66:	4622      	mov	r2, r4
 8017c68:	4629      	mov	r1, r5
 8017c6a:	4630      	mov	r0, r6
 8017c6c:	f7ff ffa1 	bl	8017bb2 <__sfputs_r>
 8017c70:	3001      	adds	r0, #1
 8017c72:	f000 80a7 	beq.w	8017dc4 <_vfiprintf_r+0x1ec>
 8017c76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017c78:	445a      	add	r2, fp
 8017c7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8017c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	f000 809f 	beq.w	8017dc4 <_vfiprintf_r+0x1ec>
 8017c86:	2300      	movs	r3, #0
 8017c88:	f04f 32ff 	mov.w	r2, #4294967295
 8017c8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017c90:	f10a 0a01 	add.w	sl, sl, #1
 8017c94:	9304      	str	r3, [sp, #16]
 8017c96:	9307      	str	r3, [sp, #28]
 8017c98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017c9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8017c9e:	4654      	mov	r4, sl
 8017ca0:	2205      	movs	r2, #5
 8017ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ca6:	4853      	ldr	r0, [pc, #332]	@ (8017df4 <_vfiprintf_r+0x21c>)
 8017ca8:	f7e8 faca 	bl	8000240 <memchr>
 8017cac:	9a04      	ldr	r2, [sp, #16]
 8017cae:	b9d8      	cbnz	r0, 8017ce8 <_vfiprintf_r+0x110>
 8017cb0:	06d1      	lsls	r1, r2, #27
 8017cb2:	bf44      	itt	mi
 8017cb4:	2320      	movmi	r3, #32
 8017cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017cba:	0713      	lsls	r3, r2, #28
 8017cbc:	bf44      	itt	mi
 8017cbe:	232b      	movmi	r3, #43	@ 0x2b
 8017cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8017cc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8017cca:	d015      	beq.n	8017cf8 <_vfiprintf_r+0x120>
 8017ccc:	9a07      	ldr	r2, [sp, #28]
 8017cce:	4654      	mov	r4, sl
 8017cd0:	2000      	movs	r0, #0
 8017cd2:	f04f 0c0a 	mov.w	ip, #10
 8017cd6:	4621      	mov	r1, r4
 8017cd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017cdc:	3b30      	subs	r3, #48	@ 0x30
 8017cde:	2b09      	cmp	r3, #9
 8017ce0:	d94b      	bls.n	8017d7a <_vfiprintf_r+0x1a2>
 8017ce2:	b1b0      	cbz	r0, 8017d12 <_vfiprintf_r+0x13a>
 8017ce4:	9207      	str	r2, [sp, #28]
 8017ce6:	e014      	b.n	8017d12 <_vfiprintf_r+0x13a>
 8017ce8:	eba0 0308 	sub.w	r3, r0, r8
 8017cec:	fa09 f303 	lsl.w	r3, r9, r3
 8017cf0:	4313      	orrs	r3, r2
 8017cf2:	9304      	str	r3, [sp, #16]
 8017cf4:	46a2      	mov	sl, r4
 8017cf6:	e7d2      	b.n	8017c9e <_vfiprintf_r+0xc6>
 8017cf8:	9b03      	ldr	r3, [sp, #12]
 8017cfa:	1d19      	adds	r1, r3, #4
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	9103      	str	r1, [sp, #12]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	bfbb      	ittet	lt
 8017d04:	425b      	neglt	r3, r3
 8017d06:	f042 0202 	orrlt.w	r2, r2, #2
 8017d0a:	9307      	strge	r3, [sp, #28]
 8017d0c:	9307      	strlt	r3, [sp, #28]
 8017d0e:	bfb8      	it	lt
 8017d10:	9204      	strlt	r2, [sp, #16]
 8017d12:	7823      	ldrb	r3, [r4, #0]
 8017d14:	2b2e      	cmp	r3, #46	@ 0x2e
 8017d16:	d10a      	bne.n	8017d2e <_vfiprintf_r+0x156>
 8017d18:	7863      	ldrb	r3, [r4, #1]
 8017d1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8017d1c:	d132      	bne.n	8017d84 <_vfiprintf_r+0x1ac>
 8017d1e:	9b03      	ldr	r3, [sp, #12]
 8017d20:	1d1a      	adds	r2, r3, #4
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	9203      	str	r2, [sp, #12]
 8017d26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017d2a:	3402      	adds	r4, #2
 8017d2c:	9305      	str	r3, [sp, #20]
 8017d2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017e04 <_vfiprintf_r+0x22c>
 8017d32:	7821      	ldrb	r1, [r4, #0]
 8017d34:	2203      	movs	r2, #3
 8017d36:	4650      	mov	r0, sl
 8017d38:	f7e8 fa82 	bl	8000240 <memchr>
 8017d3c:	b138      	cbz	r0, 8017d4e <_vfiprintf_r+0x176>
 8017d3e:	9b04      	ldr	r3, [sp, #16]
 8017d40:	eba0 000a 	sub.w	r0, r0, sl
 8017d44:	2240      	movs	r2, #64	@ 0x40
 8017d46:	4082      	lsls	r2, r0
 8017d48:	4313      	orrs	r3, r2
 8017d4a:	3401      	adds	r4, #1
 8017d4c:	9304      	str	r3, [sp, #16]
 8017d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d52:	4829      	ldr	r0, [pc, #164]	@ (8017df8 <_vfiprintf_r+0x220>)
 8017d54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017d58:	2206      	movs	r2, #6
 8017d5a:	f7e8 fa71 	bl	8000240 <memchr>
 8017d5e:	2800      	cmp	r0, #0
 8017d60:	d03f      	beq.n	8017de2 <_vfiprintf_r+0x20a>
 8017d62:	4b26      	ldr	r3, [pc, #152]	@ (8017dfc <_vfiprintf_r+0x224>)
 8017d64:	bb1b      	cbnz	r3, 8017dae <_vfiprintf_r+0x1d6>
 8017d66:	9b03      	ldr	r3, [sp, #12]
 8017d68:	3307      	adds	r3, #7
 8017d6a:	f023 0307 	bic.w	r3, r3, #7
 8017d6e:	3308      	adds	r3, #8
 8017d70:	9303      	str	r3, [sp, #12]
 8017d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017d74:	443b      	add	r3, r7
 8017d76:	9309      	str	r3, [sp, #36]	@ 0x24
 8017d78:	e76a      	b.n	8017c50 <_vfiprintf_r+0x78>
 8017d7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8017d7e:	460c      	mov	r4, r1
 8017d80:	2001      	movs	r0, #1
 8017d82:	e7a8      	b.n	8017cd6 <_vfiprintf_r+0xfe>
 8017d84:	2300      	movs	r3, #0
 8017d86:	3401      	adds	r4, #1
 8017d88:	9305      	str	r3, [sp, #20]
 8017d8a:	4619      	mov	r1, r3
 8017d8c:	f04f 0c0a 	mov.w	ip, #10
 8017d90:	4620      	mov	r0, r4
 8017d92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017d96:	3a30      	subs	r2, #48	@ 0x30
 8017d98:	2a09      	cmp	r2, #9
 8017d9a:	d903      	bls.n	8017da4 <_vfiprintf_r+0x1cc>
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d0c6      	beq.n	8017d2e <_vfiprintf_r+0x156>
 8017da0:	9105      	str	r1, [sp, #20]
 8017da2:	e7c4      	b.n	8017d2e <_vfiprintf_r+0x156>
 8017da4:	fb0c 2101 	mla	r1, ip, r1, r2
 8017da8:	4604      	mov	r4, r0
 8017daa:	2301      	movs	r3, #1
 8017dac:	e7f0      	b.n	8017d90 <_vfiprintf_r+0x1b8>
 8017dae:	ab03      	add	r3, sp, #12
 8017db0:	9300      	str	r3, [sp, #0]
 8017db2:	462a      	mov	r2, r5
 8017db4:	4b12      	ldr	r3, [pc, #72]	@ (8017e00 <_vfiprintf_r+0x228>)
 8017db6:	a904      	add	r1, sp, #16
 8017db8:	4630      	mov	r0, r6
 8017dba:	f3af 8000 	nop.w
 8017dbe:	4607      	mov	r7, r0
 8017dc0:	1c78      	adds	r0, r7, #1
 8017dc2:	d1d6      	bne.n	8017d72 <_vfiprintf_r+0x19a>
 8017dc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017dc6:	07d9      	lsls	r1, r3, #31
 8017dc8:	d405      	bmi.n	8017dd6 <_vfiprintf_r+0x1fe>
 8017dca:	89ab      	ldrh	r3, [r5, #12]
 8017dcc:	059a      	lsls	r2, r3, #22
 8017dce:	d402      	bmi.n	8017dd6 <_vfiprintf_r+0x1fe>
 8017dd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017dd2:	f7ff fd25 	bl	8017820 <__retarget_lock_release_recursive>
 8017dd6:	89ab      	ldrh	r3, [r5, #12]
 8017dd8:	065b      	lsls	r3, r3, #25
 8017dda:	f53f af1f 	bmi.w	8017c1c <_vfiprintf_r+0x44>
 8017dde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017de0:	e71e      	b.n	8017c20 <_vfiprintf_r+0x48>
 8017de2:	ab03      	add	r3, sp, #12
 8017de4:	9300      	str	r3, [sp, #0]
 8017de6:	462a      	mov	r2, r5
 8017de8:	4b05      	ldr	r3, [pc, #20]	@ (8017e00 <_vfiprintf_r+0x228>)
 8017dea:	a904      	add	r1, sp, #16
 8017dec:	4630      	mov	r0, r6
 8017dee:	f000 f879 	bl	8017ee4 <_printf_i>
 8017df2:	e7e4      	b.n	8017dbe <_vfiprintf_r+0x1e6>
 8017df4:	0801ba5e 	.word	0x0801ba5e
 8017df8:	0801ba68 	.word	0x0801ba68
 8017dfc:	00000000 	.word	0x00000000
 8017e00:	08017bb3 	.word	0x08017bb3
 8017e04:	0801ba64 	.word	0x0801ba64

08017e08 <_printf_common>:
 8017e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e0c:	4616      	mov	r6, r2
 8017e0e:	4698      	mov	r8, r3
 8017e10:	688a      	ldr	r2, [r1, #8]
 8017e12:	690b      	ldr	r3, [r1, #16]
 8017e14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017e18:	4293      	cmp	r3, r2
 8017e1a:	bfb8      	it	lt
 8017e1c:	4613      	movlt	r3, r2
 8017e1e:	6033      	str	r3, [r6, #0]
 8017e20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017e24:	4607      	mov	r7, r0
 8017e26:	460c      	mov	r4, r1
 8017e28:	b10a      	cbz	r2, 8017e2e <_printf_common+0x26>
 8017e2a:	3301      	adds	r3, #1
 8017e2c:	6033      	str	r3, [r6, #0]
 8017e2e:	6823      	ldr	r3, [r4, #0]
 8017e30:	0699      	lsls	r1, r3, #26
 8017e32:	bf42      	ittt	mi
 8017e34:	6833      	ldrmi	r3, [r6, #0]
 8017e36:	3302      	addmi	r3, #2
 8017e38:	6033      	strmi	r3, [r6, #0]
 8017e3a:	6825      	ldr	r5, [r4, #0]
 8017e3c:	f015 0506 	ands.w	r5, r5, #6
 8017e40:	d106      	bne.n	8017e50 <_printf_common+0x48>
 8017e42:	f104 0a19 	add.w	sl, r4, #25
 8017e46:	68e3      	ldr	r3, [r4, #12]
 8017e48:	6832      	ldr	r2, [r6, #0]
 8017e4a:	1a9b      	subs	r3, r3, r2
 8017e4c:	42ab      	cmp	r3, r5
 8017e4e:	dc26      	bgt.n	8017e9e <_printf_common+0x96>
 8017e50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017e54:	6822      	ldr	r2, [r4, #0]
 8017e56:	3b00      	subs	r3, #0
 8017e58:	bf18      	it	ne
 8017e5a:	2301      	movne	r3, #1
 8017e5c:	0692      	lsls	r2, r2, #26
 8017e5e:	d42b      	bmi.n	8017eb8 <_printf_common+0xb0>
 8017e60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017e64:	4641      	mov	r1, r8
 8017e66:	4638      	mov	r0, r7
 8017e68:	47c8      	blx	r9
 8017e6a:	3001      	adds	r0, #1
 8017e6c:	d01e      	beq.n	8017eac <_printf_common+0xa4>
 8017e6e:	6823      	ldr	r3, [r4, #0]
 8017e70:	6922      	ldr	r2, [r4, #16]
 8017e72:	f003 0306 	and.w	r3, r3, #6
 8017e76:	2b04      	cmp	r3, #4
 8017e78:	bf02      	ittt	eq
 8017e7a:	68e5      	ldreq	r5, [r4, #12]
 8017e7c:	6833      	ldreq	r3, [r6, #0]
 8017e7e:	1aed      	subeq	r5, r5, r3
 8017e80:	68a3      	ldr	r3, [r4, #8]
 8017e82:	bf0c      	ite	eq
 8017e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017e88:	2500      	movne	r5, #0
 8017e8a:	4293      	cmp	r3, r2
 8017e8c:	bfc4      	itt	gt
 8017e8e:	1a9b      	subgt	r3, r3, r2
 8017e90:	18ed      	addgt	r5, r5, r3
 8017e92:	2600      	movs	r6, #0
 8017e94:	341a      	adds	r4, #26
 8017e96:	42b5      	cmp	r5, r6
 8017e98:	d11a      	bne.n	8017ed0 <_printf_common+0xc8>
 8017e9a:	2000      	movs	r0, #0
 8017e9c:	e008      	b.n	8017eb0 <_printf_common+0xa8>
 8017e9e:	2301      	movs	r3, #1
 8017ea0:	4652      	mov	r2, sl
 8017ea2:	4641      	mov	r1, r8
 8017ea4:	4638      	mov	r0, r7
 8017ea6:	47c8      	blx	r9
 8017ea8:	3001      	adds	r0, #1
 8017eaa:	d103      	bne.n	8017eb4 <_printf_common+0xac>
 8017eac:	f04f 30ff 	mov.w	r0, #4294967295
 8017eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017eb4:	3501      	adds	r5, #1
 8017eb6:	e7c6      	b.n	8017e46 <_printf_common+0x3e>
 8017eb8:	18e1      	adds	r1, r4, r3
 8017eba:	1c5a      	adds	r2, r3, #1
 8017ebc:	2030      	movs	r0, #48	@ 0x30
 8017ebe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017ec2:	4422      	add	r2, r4
 8017ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017ec8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017ecc:	3302      	adds	r3, #2
 8017ece:	e7c7      	b.n	8017e60 <_printf_common+0x58>
 8017ed0:	2301      	movs	r3, #1
 8017ed2:	4622      	mov	r2, r4
 8017ed4:	4641      	mov	r1, r8
 8017ed6:	4638      	mov	r0, r7
 8017ed8:	47c8      	blx	r9
 8017eda:	3001      	adds	r0, #1
 8017edc:	d0e6      	beq.n	8017eac <_printf_common+0xa4>
 8017ede:	3601      	adds	r6, #1
 8017ee0:	e7d9      	b.n	8017e96 <_printf_common+0x8e>
	...

08017ee4 <_printf_i>:
 8017ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017ee8:	7e0f      	ldrb	r7, [r1, #24]
 8017eea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017eec:	2f78      	cmp	r7, #120	@ 0x78
 8017eee:	4691      	mov	r9, r2
 8017ef0:	4680      	mov	r8, r0
 8017ef2:	460c      	mov	r4, r1
 8017ef4:	469a      	mov	sl, r3
 8017ef6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017efa:	d807      	bhi.n	8017f0c <_printf_i+0x28>
 8017efc:	2f62      	cmp	r7, #98	@ 0x62
 8017efe:	d80a      	bhi.n	8017f16 <_printf_i+0x32>
 8017f00:	2f00      	cmp	r7, #0
 8017f02:	f000 80d1 	beq.w	80180a8 <_printf_i+0x1c4>
 8017f06:	2f58      	cmp	r7, #88	@ 0x58
 8017f08:	f000 80b8 	beq.w	801807c <_printf_i+0x198>
 8017f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017f10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017f14:	e03a      	b.n	8017f8c <_printf_i+0xa8>
 8017f16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017f1a:	2b15      	cmp	r3, #21
 8017f1c:	d8f6      	bhi.n	8017f0c <_printf_i+0x28>
 8017f1e:	a101      	add	r1, pc, #4	@ (adr r1, 8017f24 <_printf_i+0x40>)
 8017f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017f24:	08017f7d 	.word	0x08017f7d
 8017f28:	08017f91 	.word	0x08017f91
 8017f2c:	08017f0d 	.word	0x08017f0d
 8017f30:	08017f0d 	.word	0x08017f0d
 8017f34:	08017f0d 	.word	0x08017f0d
 8017f38:	08017f0d 	.word	0x08017f0d
 8017f3c:	08017f91 	.word	0x08017f91
 8017f40:	08017f0d 	.word	0x08017f0d
 8017f44:	08017f0d 	.word	0x08017f0d
 8017f48:	08017f0d 	.word	0x08017f0d
 8017f4c:	08017f0d 	.word	0x08017f0d
 8017f50:	0801808f 	.word	0x0801808f
 8017f54:	08017fbb 	.word	0x08017fbb
 8017f58:	08018049 	.word	0x08018049
 8017f5c:	08017f0d 	.word	0x08017f0d
 8017f60:	08017f0d 	.word	0x08017f0d
 8017f64:	080180b1 	.word	0x080180b1
 8017f68:	08017f0d 	.word	0x08017f0d
 8017f6c:	08017fbb 	.word	0x08017fbb
 8017f70:	08017f0d 	.word	0x08017f0d
 8017f74:	08017f0d 	.word	0x08017f0d
 8017f78:	08018051 	.word	0x08018051
 8017f7c:	6833      	ldr	r3, [r6, #0]
 8017f7e:	1d1a      	adds	r2, r3, #4
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	6032      	str	r2, [r6, #0]
 8017f84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017f88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017f8c:	2301      	movs	r3, #1
 8017f8e:	e09c      	b.n	80180ca <_printf_i+0x1e6>
 8017f90:	6833      	ldr	r3, [r6, #0]
 8017f92:	6820      	ldr	r0, [r4, #0]
 8017f94:	1d19      	adds	r1, r3, #4
 8017f96:	6031      	str	r1, [r6, #0]
 8017f98:	0606      	lsls	r6, r0, #24
 8017f9a:	d501      	bpl.n	8017fa0 <_printf_i+0xbc>
 8017f9c:	681d      	ldr	r5, [r3, #0]
 8017f9e:	e003      	b.n	8017fa8 <_printf_i+0xc4>
 8017fa0:	0645      	lsls	r5, r0, #25
 8017fa2:	d5fb      	bpl.n	8017f9c <_printf_i+0xb8>
 8017fa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017fa8:	2d00      	cmp	r5, #0
 8017faa:	da03      	bge.n	8017fb4 <_printf_i+0xd0>
 8017fac:	232d      	movs	r3, #45	@ 0x2d
 8017fae:	426d      	negs	r5, r5
 8017fb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017fb4:	4858      	ldr	r0, [pc, #352]	@ (8018118 <_printf_i+0x234>)
 8017fb6:	230a      	movs	r3, #10
 8017fb8:	e011      	b.n	8017fde <_printf_i+0xfa>
 8017fba:	6821      	ldr	r1, [r4, #0]
 8017fbc:	6833      	ldr	r3, [r6, #0]
 8017fbe:	0608      	lsls	r0, r1, #24
 8017fc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8017fc4:	d402      	bmi.n	8017fcc <_printf_i+0xe8>
 8017fc6:	0649      	lsls	r1, r1, #25
 8017fc8:	bf48      	it	mi
 8017fca:	b2ad      	uxthmi	r5, r5
 8017fcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8017fce:	4852      	ldr	r0, [pc, #328]	@ (8018118 <_printf_i+0x234>)
 8017fd0:	6033      	str	r3, [r6, #0]
 8017fd2:	bf14      	ite	ne
 8017fd4:	230a      	movne	r3, #10
 8017fd6:	2308      	moveq	r3, #8
 8017fd8:	2100      	movs	r1, #0
 8017fda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017fde:	6866      	ldr	r6, [r4, #4]
 8017fe0:	60a6      	str	r6, [r4, #8]
 8017fe2:	2e00      	cmp	r6, #0
 8017fe4:	db05      	blt.n	8017ff2 <_printf_i+0x10e>
 8017fe6:	6821      	ldr	r1, [r4, #0]
 8017fe8:	432e      	orrs	r6, r5
 8017fea:	f021 0104 	bic.w	r1, r1, #4
 8017fee:	6021      	str	r1, [r4, #0]
 8017ff0:	d04b      	beq.n	801808a <_printf_i+0x1a6>
 8017ff2:	4616      	mov	r6, r2
 8017ff4:	fbb5 f1f3 	udiv	r1, r5, r3
 8017ff8:	fb03 5711 	mls	r7, r3, r1, r5
 8017ffc:	5dc7      	ldrb	r7, [r0, r7]
 8017ffe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018002:	462f      	mov	r7, r5
 8018004:	42bb      	cmp	r3, r7
 8018006:	460d      	mov	r5, r1
 8018008:	d9f4      	bls.n	8017ff4 <_printf_i+0x110>
 801800a:	2b08      	cmp	r3, #8
 801800c:	d10b      	bne.n	8018026 <_printf_i+0x142>
 801800e:	6823      	ldr	r3, [r4, #0]
 8018010:	07df      	lsls	r7, r3, #31
 8018012:	d508      	bpl.n	8018026 <_printf_i+0x142>
 8018014:	6923      	ldr	r3, [r4, #16]
 8018016:	6861      	ldr	r1, [r4, #4]
 8018018:	4299      	cmp	r1, r3
 801801a:	bfde      	ittt	le
 801801c:	2330      	movle	r3, #48	@ 0x30
 801801e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018022:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018026:	1b92      	subs	r2, r2, r6
 8018028:	6122      	str	r2, [r4, #16]
 801802a:	f8cd a000 	str.w	sl, [sp]
 801802e:	464b      	mov	r3, r9
 8018030:	aa03      	add	r2, sp, #12
 8018032:	4621      	mov	r1, r4
 8018034:	4640      	mov	r0, r8
 8018036:	f7ff fee7 	bl	8017e08 <_printf_common>
 801803a:	3001      	adds	r0, #1
 801803c:	d14a      	bne.n	80180d4 <_printf_i+0x1f0>
 801803e:	f04f 30ff 	mov.w	r0, #4294967295
 8018042:	b004      	add	sp, #16
 8018044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018048:	6823      	ldr	r3, [r4, #0]
 801804a:	f043 0320 	orr.w	r3, r3, #32
 801804e:	6023      	str	r3, [r4, #0]
 8018050:	4832      	ldr	r0, [pc, #200]	@ (801811c <_printf_i+0x238>)
 8018052:	2778      	movs	r7, #120	@ 0x78
 8018054:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018058:	6823      	ldr	r3, [r4, #0]
 801805a:	6831      	ldr	r1, [r6, #0]
 801805c:	061f      	lsls	r7, r3, #24
 801805e:	f851 5b04 	ldr.w	r5, [r1], #4
 8018062:	d402      	bmi.n	801806a <_printf_i+0x186>
 8018064:	065f      	lsls	r7, r3, #25
 8018066:	bf48      	it	mi
 8018068:	b2ad      	uxthmi	r5, r5
 801806a:	6031      	str	r1, [r6, #0]
 801806c:	07d9      	lsls	r1, r3, #31
 801806e:	bf44      	itt	mi
 8018070:	f043 0320 	orrmi.w	r3, r3, #32
 8018074:	6023      	strmi	r3, [r4, #0]
 8018076:	b11d      	cbz	r5, 8018080 <_printf_i+0x19c>
 8018078:	2310      	movs	r3, #16
 801807a:	e7ad      	b.n	8017fd8 <_printf_i+0xf4>
 801807c:	4826      	ldr	r0, [pc, #152]	@ (8018118 <_printf_i+0x234>)
 801807e:	e7e9      	b.n	8018054 <_printf_i+0x170>
 8018080:	6823      	ldr	r3, [r4, #0]
 8018082:	f023 0320 	bic.w	r3, r3, #32
 8018086:	6023      	str	r3, [r4, #0]
 8018088:	e7f6      	b.n	8018078 <_printf_i+0x194>
 801808a:	4616      	mov	r6, r2
 801808c:	e7bd      	b.n	801800a <_printf_i+0x126>
 801808e:	6833      	ldr	r3, [r6, #0]
 8018090:	6825      	ldr	r5, [r4, #0]
 8018092:	6961      	ldr	r1, [r4, #20]
 8018094:	1d18      	adds	r0, r3, #4
 8018096:	6030      	str	r0, [r6, #0]
 8018098:	062e      	lsls	r6, r5, #24
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	d501      	bpl.n	80180a2 <_printf_i+0x1be>
 801809e:	6019      	str	r1, [r3, #0]
 80180a0:	e002      	b.n	80180a8 <_printf_i+0x1c4>
 80180a2:	0668      	lsls	r0, r5, #25
 80180a4:	d5fb      	bpl.n	801809e <_printf_i+0x1ba>
 80180a6:	8019      	strh	r1, [r3, #0]
 80180a8:	2300      	movs	r3, #0
 80180aa:	6123      	str	r3, [r4, #16]
 80180ac:	4616      	mov	r6, r2
 80180ae:	e7bc      	b.n	801802a <_printf_i+0x146>
 80180b0:	6833      	ldr	r3, [r6, #0]
 80180b2:	1d1a      	adds	r2, r3, #4
 80180b4:	6032      	str	r2, [r6, #0]
 80180b6:	681e      	ldr	r6, [r3, #0]
 80180b8:	6862      	ldr	r2, [r4, #4]
 80180ba:	2100      	movs	r1, #0
 80180bc:	4630      	mov	r0, r6
 80180be:	f7e8 f8bf 	bl	8000240 <memchr>
 80180c2:	b108      	cbz	r0, 80180c8 <_printf_i+0x1e4>
 80180c4:	1b80      	subs	r0, r0, r6
 80180c6:	6060      	str	r0, [r4, #4]
 80180c8:	6863      	ldr	r3, [r4, #4]
 80180ca:	6123      	str	r3, [r4, #16]
 80180cc:	2300      	movs	r3, #0
 80180ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80180d2:	e7aa      	b.n	801802a <_printf_i+0x146>
 80180d4:	6923      	ldr	r3, [r4, #16]
 80180d6:	4632      	mov	r2, r6
 80180d8:	4649      	mov	r1, r9
 80180da:	4640      	mov	r0, r8
 80180dc:	47d0      	blx	sl
 80180de:	3001      	adds	r0, #1
 80180e0:	d0ad      	beq.n	801803e <_printf_i+0x15a>
 80180e2:	6823      	ldr	r3, [r4, #0]
 80180e4:	079b      	lsls	r3, r3, #30
 80180e6:	d413      	bmi.n	8018110 <_printf_i+0x22c>
 80180e8:	68e0      	ldr	r0, [r4, #12]
 80180ea:	9b03      	ldr	r3, [sp, #12]
 80180ec:	4298      	cmp	r0, r3
 80180ee:	bfb8      	it	lt
 80180f0:	4618      	movlt	r0, r3
 80180f2:	e7a6      	b.n	8018042 <_printf_i+0x15e>
 80180f4:	2301      	movs	r3, #1
 80180f6:	4632      	mov	r2, r6
 80180f8:	4649      	mov	r1, r9
 80180fa:	4640      	mov	r0, r8
 80180fc:	47d0      	blx	sl
 80180fe:	3001      	adds	r0, #1
 8018100:	d09d      	beq.n	801803e <_printf_i+0x15a>
 8018102:	3501      	adds	r5, #1
 8018104:	68e3      	ldr	r3, [r4, #12]
 8018106:	9903      	ldr	r1, [sp, #12]
 8018108:	1a5b      	subs	r3, r3, r1
 801810a:	42ab      	cmp	r3, r5
 801810c:	dcf2      	bgt.n	80180f4 <_printf_i+0x210>
 801810e:	e7eb      	b.n	80180e8 <_printf_i+0x204>
 8018110:	2500      	movs	r5, #0
 8018112:	f104 0619 	add.w	r6, r4, #25
 8018116:	e7f5      	b.n	8018104 <_printf_i+0x220>
 8018118:	0801ba6f 	.word	0x0801ba6f
 801811c:	0801ba80 	.word	0x0801ba80

08018120 <__sflush_r>:
 8018120:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018128:	0716      	lsls	r6, r2, #28
 801812a:	4605      	mov	r5, r0
 801812c:	460c      	mov	r4, r1
 801812e:	d454      	bmi.n	80181da <__sflush_r+0xba>
 8018130:	684b      	ldr	r3, [r1, #4]
 8018132:	2b00      	cmp	r3, #0
 8018134:	dc02      	bgt.n	801813c <__sflush_r+0x1c>
 8018136:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018138:	2b00      	cmp	r3, #0
 801813a:	dd48      	ble.n	80181ce <__sflush_r+0xae>
 801813c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801813e:	2e00      	cmp	r6, #0
 8018140:	d045      	beq.n	80181ce <__sflush_r+0xae>
 8018142:	2300      	movs	r3, #0
 8018144:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018148:	682f      	ldr	r7, [r5, #0]
 801814a:	6a21      	ldr	r1, [r4, #32]
 801814c:	602b      	str	r3, [r5, #0]
 801814e:	d030      	beq.n	80181b2 <__sflush_r+0x92>
 8018150:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018152:	89a3      	ldrh	r3, [r4, #12]
 8018154:	0759      	lsls	r1, r3, #29
 8018156:	d505      	bpl.n	8018164 <__sflush_r+0x44>
 8018158:	6863      	ldr	r3, [r4, #4]
 801815a:	1ad2      	subs	r2, r2, r3
 801815c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801815e:	b10b      	cbz	r3, 8018164 <__sflush_r+0x44>
 8018160:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018162:	1ad2      	subs	r2, r2, r3
 8018164:	2300      	movs	r3, #0
 8018166:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018168:	6a21      	ldr	r1, [r4, #32]
 801816a:	4628      	mov	r0, r5
 801816c:	47b0      	blx	r6
 801816e:	1c43      	adds	r3, r0, #1
 8018170:	89a3      	ldrh	r3, [r4, #12]
 8018172:	d106      	bne.n	8018182 <__sflush_r+0x62>
 8018174:	6829      	ldr	r1, [r5, #0]
 8018176:	291d      	cmp	r1, #29
 8018178:	d82b      	bhi.n	80181d2 <__sflush_r+0xb2>
 801817a:	4a2a      	ldr	r2, [pc, #168]	@ (8018224 <__sflush_r+0x104>)
 801817c:	40ca      	lsrs	r2, r1
 801817e:	07d6      	lsls	r6, r2, #31
 8018180:	d527      	bpl.n	80181d2 <__sflush_r+0xb2>
 8018182:	2200      	movs	r2, #0
 8018184:	6062      	str	r2, [r4, #4]
 8018186:	04d9      	lsls	r1, r3, #19
 8018188:	6922      	ldr	r2, [r4, #16]
 801818a:	6022      	str	r2, [r4, #0]
 801818c:	d504      	bpl.n	8018198 <__sflush_r+0x78>
 801818e:	1c42      	adds	r2, r0, #1
 8018190:	d101      	bne.n	8018196 <__sflush_r+0x76>
 8018192:	682b      	ldr	r3, [r5, #0]
 8018194:	b903      	cbnz	r3, 8018198 <__sflush_r+0x78>
 8018196:	6560      	str	r0, [r4, #84]	@ 0x54
 8018198:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801819a:	602f      	str	r7, [r5, #0]
 801819c:	b1b9      	cbz	r1, 80181ce <__sflush_r+0xae>
 801819e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80181a2:	4299      	cmp	r1, r3
 80181a4:	d002      	beq.n	80181ac <__sflush_r+0x8c>
 80181a6:	4628      	mov	r0, r5
 80181a8:	f7ff fb4a 	bl	8017840 <_free_r>
 80181ac:	2300      	movs	r3, #0
 80181ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80181b0:	e00d      	b.n	80181ce <__sflush_r+0xae>
 80181b2:	2301      	movs	r3, #1
 80181b4:	4628      	mov	r0, r5
 80181b6:	47b0      	blx	r6
 80181b8:	4602      	mov	r2, r0
 80181ba:	1c50      	adds	r0, r2, #1
 80181bc:	d1c9      	bne.n	8018152 <__sflush_r+0x32>
 80181be:	682b      	ldr	r3, [r5, #0]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d0c6      	beq.n	8018152 <__sflush_r+0x32>
 80181c4:	2b1d      	cmp	r3, #29
 80181c6:	d001      	beq.n	80181cc <__sflush_r+0xac>
 80181c8:	2b16      	cmp	r3, #22
 80181ca:	d11e      	bne.n	801820a <__sflush_r+0xea>
 80181cc:	602f      	str	r7, [r5, #0]
 80181ce:	2000      	movs	r0, #0
 80181d0:	e022      	b.n	8018218 <__sflush_r+0xf8>
 80181d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80181d6:	b21b      	sxth	r3, r3
 80181d8:	e01b      	b.n	8018212 <__sflush_r+0xf2>
 80181da:	690f      	ldr	r7, [r1, #16]
 80181dc:	2f00      	cmp	r7, #0
 80181de:	d0f6      	beq.n	80181ce <__sflush_r+0xae>
 80181e0:	0793      	lsls	r3, r2, #30
 80181e2:	680e      	ldr	r6, [r1, #0]
 80181e4:	bf08      	it	eq
 80181e6:	694b      	ldreq	r3, [r1, #20]
 80181e8:	600f      	str	r7, [r1, #0]
 80181ea:	bf18      	it	ne
 80181ec:	2300      	movne	r3, #0
 80181ee:	eba6 0807 	sub.w	r8, r6, r7
 80181f2:	608b      	str	r3, [r1, #8]
 80181f4:	f1b8 0f00 	cmp.w	r8, #0
 80181f8:	dde9      	ble.n	80181ce <__sflush_r+0xae>
 80181fa:	6a21      	ldr	r1, [r4, #32]
 80181fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80181fe:	4643      	mov	r3, r8
 8018200:	463a      	mov	r2, r7
 8018202:	4628      	mov	r0, r5
 8018204:	47b0      	blx	r6
 8018206:	2800      	cmp	r0, #0
 8018208:	dc08      	bgt.n	801821c <__sflush_r+0xfc>
 801820a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801820e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018212:	81a3      	strh	r3, [r4, #12]
 8018214:	f04f 30ff 	mov.w	r0, #4294967295
 8018218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801821c:	4407      	add	r7, r0
 801821e:	eba8 0800 	sub.w	r8, r8, r0
 8018222:	e7e7      	b.n	80181f4 <__sflush_r+0xd4>
 8018224:	20400001 	.word	0x20400001

08018228 <_fflush_r>:
 8018228:	b538      	push	{r3, r4, r5, lr}
 801822a:	690b      	ldr	r3, [r1, #16]
 801822c:	4605      	mov	r5, r0
 801822e:	460c      	mov	r4, r1
 8018230:	b913      	cbnz	r3, 8018238 <_fflush_r+0x10>
 8018232:	2500      	movs	r5, #0
 8018234:	4628      	mov	r0, r5
 8018236:	bd38      	pop	{r3, r4, r5, pc}
 8018238:	b118      	cbz	r0, 8018242 <_fflush_r+0x1a>
 801823a:	6a03      	ldr	r3, [r0, #32]
 801823c:	b90b      	cbnz	r3, 8018242 <_fflush_r+0x1a>
 801823e:	f7ff f91b 	bl	8017478 <__sinit>
 8018242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018246:	2b00      	cmp	r3, #0
 8018248:	d0f3      	beq.n	8018232 <_fflush_r+0xa>
 801824a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801824c:	07d0      	lsls	r0, r2, #31
 801824e:	d404      	bmi.n	801825a <_fflush_r+0x32>
 8018250:	0599      	lsls	r1, r3, #22
 8018252:	d402      	bmi.n	801825a <_fflush_r+0x32>
 8018254:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018256:	f7ff fae2 	bl	801781e <__retarget_lock_acquire_recursive>
 801825a:	4628      	mov	r0, r5
 801825c:	4621      	mov	r1, r4
 801825e:	f7ff ff5f 	bl	8018120 <__sflush_r>
 8018262:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018264:	07da      	lsls	r2, r3, #31
 8018266:	4605      	mov	r5, r0
 8018268:	d4e4      	bmi.n	8018234 <_fflush_r+0xc>
 801826a:	89a3      	ldrh	r3, [r4, #12]
 801826c:	059b      	lsls	r3, r3, #22
 801826e:	d4e1      	bmi.n	8018234 <_fflush_r+0xc>
 8018270:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018272:	f7ff fad5 	bl	8017820 <__retarget_lock_release_recursive>
 8018276:	e7dd      	b.n	8018234 <_fflush_r+0xc>

08018278 <__swbuf_r>:
 8018278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801827a:	460e      	mov	r6, r1
 801827c:	4614      	mov	r4, r2
 801827e:	4605      	mov	r5, r0
 8018280:	b118      	cbz	r0, 801828a <__swbuf_r+0x12>
 8018282:	6a03      	ldr	r3, [r0, #32]
 8018284:	b90b      	cbnz	r3, 801828a <__swbuf_r+0x12>
 8018286:	f7ff f8f7 	bl	8017478 <__sinit>
 801828a:	69a3      	ldr	r3, [r4, #24]
 801828c:	60a3      	str	r3, [r4, #8]
 801828e:	89a3      	ldrh	r3, [r4, #12]
 8018290:	071a      	lsls	r2, r3, #28
 8018292:	d501      	bpl.n	8018298 <__swbuf_r+0x20>
 8018294:	6923      	ldr	r3, [r4, #16]
 8018296:	b943      	cbnz	r3, 80182aa <__swbuf_r+0x32>
 8018298:	4621      	mov	r1, r4
 801829a:	4628      	mov	r0, r5
 801829c:	f000 f82a 	bl	80182f4 <__swsetup_r>
 80182a0:	b118      	cbz	r0, 80182aa <__swbuf_r+0x32>
 80182a2:	f04f 37ff 	mov.w	r7, #4294967295
 80182a6:	4638      	mov	r0, r7
 80182a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80182aa:	6823      	ldr	r3, [r4, #0]
 80182ac:	6922      	ldr	r2, [r4, #16]
 80182ae:	1a98      	subs	r0, r3, r2
 80182b0:	6963      	ldr	r3, [r4, #20]
 80182b2:	b2f6      	uxtb	r6, r6
 80182b4:	4283      	cmp	r3, r0
 80182b6:	4637      	mov	r7, r6
 80182b8:	dc05      	bgt.n	80182c6 <__swbuf_r+0x4e>
 80182ba:	4621      	mov	r1, r4
 80182bc:	4628      	mov	r0, r5
 80182be:	f7ff ffb3 	bl	8018228 <_fflush_r>
 80182c2:	2800      	cmp	r0, #0
 80182c4:	d1ed      	bne.n	80182a2 <__swbuf_r+0x2a>
 80182c6:	68a3      	ldr	r3, [r4, #8]
 80182c8:	3b01      	subs	r3, #1
 80182ca:	60a3      	str	r3, [r4, #8]
 80182cc:	6823      	ldr	r3, [r4, #0]
 80182ce:	1c5a      	adds	r2, r3, #1
 80182d0:	6022      	str	r2, [r4, #0]
 80182d2:	701e      	strb	r6, [r3, #0]
 80182d4:	6962      	ldr	r2, [r4, #20]
 80182d6:	1c43      	adds	r3, r0, #1
 80182d8:	429a      	cmp	r2, r3
 80182da:	d004      	beq.n	80182e6 <__swbuf_r+0x6e>
 80182dc:	89a3      	ldrh	r3, [r4, #12]
 80182de:	07db      	lsls	r3, r3, #31
 80182e0:	d5e1      	bpl.n	80182a6 <__swbuf_r+0x2e>
 80182e2:	2e0a      	cmp	r6, #10
 80182e4:	d1df      	bne.n	80182a6 <__swbuf_r+0x2e>
 80182e6:	4621      	mov	r1, r4
 80182e8:	4628      	mov	r0, r5
 80182ea:	f7ff ff9d 	bl	8018228 <_fflush_r>
 80182ee:	2800      	cmp	r0, #0
 80182f0:	d0d9      	beq.n	80182a6 <__swbuf_r+0x2e>
 80182f2:	e7d6      	b.n	80182a2 <__swbuf_r+0x2a>

080182f4 <__swsetup_r>:
 80182f4:	b538      	push	{r3, r4, r5, lr}
 80182f6:	4b29      	ldr	r3, [pc, #164]	@ (801839c <__swsetup_r+0xa8>)
 80182f8:	4605      	mov	r5, r0
 80182fa:	6818      	ldr	r0, [r3, #0]
 80182fc:	460c      	mov	r4, r1
 80182fe:	b118      	cbz	r0, 8018308 <__swsetup_r+0x14>
 8018300:	6a03      	ldr	r3, [r0, #32]
 8018302:	b90b      	cbnz	r3, 8018308 <__swsetup_r+0x14>
 8018304:	f7ff f8b8 	bl	8017478 <__sinit>
 8018308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801830c:	0719      	lsls	r1, r3, #28
 801830e:	d422      	bmi.n	8018356 <__swsetup_r+0x62>
 8018310:	06da      	lsls	r2, r3, #27
 8018312:	d407      	bmi.n	8018324 <__swsetup_r+0x30>
 8018314:	2209      	movs	r2, #9
 8018316:	602a      	str	r2, [r5, #0]
 8018318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801831c:	81a3      	strh	r3, [r4, #12]
 801831e:	f04f 30ff 	mov.w	r0, #4294967295
 8018322:	e033      	b.n	801838c <__swsetup_r+0x98>
 8018324:	0758      	lsls	r0, r3, #29
 8018326:	d512      	bpl.n	801834e <__swsetup_r+0x5a>
 8018328:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801832a:	b141      	cbz	r1, 801833e <__swsetup_r+0x4a>
 801832c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018330:	4299      	cmp	r1, r3
 8018332:	d002      	beq.n	801833a <__swsetup_r+0x46>
 8018334:	4628      	mov	r0, r5
 8018336:	f7ff fa83 	bl	8017840 <_free_r>
 801833a:	2300      	movs	r3, #0
 801833c:	6363      	str	r3, [r4, #52]	@ 0x34
 801833e:	89a3      	ldrh	r3, [r4, #12]
 8018340:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018344:	81a3      	strh	r3, [r4, #12]
 8018346:	2300      	movs	r3, #0
 8018348:	6063      	str	r3, [r4, #4]
 801834a:	6923      	ldr	r3, [r4, #16]
 801834c:	6023      	str	r3, [r4, #0]
 801834e:	89a3      	ldrh	r3, [r4, #12]
 8018350:	f043 0308 	orr.w	r3, r3, #8
 8018354:	81a3      	strh	r3, [r4, #12]
 8018356:	6923      	ldr	r3, [r4, #16]
 8018358:	b94b      	cbnz	r3, 801836e <__swsetup_r+0x7a>
 801835a:	89a3      	ldrh	r3, [r4, #12]
 801835c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018364:	d003      	beq.n	801836e <__swsetup_r+0x7a>
 8018366:	4621      	mov	r1, r4
 8018368:	4628      	mov	r0, r5
 801836a:	f000 f887 	bl	801847c <__smakebuf_r>
 801836e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018372:	f013 0201 	ands.w	r2, r3, #1
 8018376:	d00a      	beq.n	801838e <__swsetup_r+0x9a>
 8018378:	2200      	movs	r2, #0
 801837a:	60a2      	str	r2, [r4, #8]
 801837c:	6962      	ldr	r2, [r4, #20]
 801837e:	4252      	negs	r2, r2
 8018380:	61a2      	str	r2, [r4, #24]
 8018382:	6922      	ldr	r2, [r4, #16]
 8018384:	b942      	cbnz	r2, 8018398 <__swsetup_r+0xa4>
 8018386:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801838a:	d1c5      	bne.n	8018318 <__swsetup_r+0x24>
 801838c:	bd38      	pop	{r3, r4, r5, pc}
 801838e:	0799      	lsls	r1, r3, #30
 8018390:	bf58      	it	pl
 8018392:	6962      	ldrpl	r2, [r4, #20]
 8018394:	60a2      	str	r2, [r4, #8]
 8018396:	e7f4      	b.n	8018382 <__swsetup_r+0x8e>
 8018398:	2000      	movs	r0, #0
 801839a:	e7f7      	b.n	801838c <__swsetup_r+0x98>
 801839c:	20000080 	.word	0x20000080

080183a0 <memmove>:
 80183a0:	4288      	cmp	r0, r1
 80183a2:	b510      	push	{r4, lr}
 80183a4:	eb01 0402 	add.w	r4, r1, r2
 80183a8:	d902      	bls.n	80183b0 <memmove+0x10>
 80183aa:	4284      	cmp	r4, r0
 80183ac:	4623      	mov	r3, r4
 80183ae:	d807      	bhi.n	80183c0 <memmove+0x20>
 80183b0:	1e43      	subs	r3, r0, #1
 80183b2:	42a1      	cmp	r1, r4
 80183b4:	d008      	beq.n	80183c8 <memmove+0x28>
 80183b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80183ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80183be:	e7f8      	b.n	80183b2 <memmove+0x12>
 80183c0:	4402      	add	r2, r0
 80183c2:	4601      	mov	r1, r0
 80183c4:	428a      	cmp	r2, r1
 80183c6:	d100      	bne.n	80183ca <memmove+0x2a>
 80183c8:	bd10      	pop	{r4, pc}
 80183ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80183ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80183d2:	e7f7      	b.n	80183c4 <memmove+0x24>

080183d4 <_realloc_r>:
 80183d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183d8:	4607      	mov	r7, r0
 80183da:	4614      	mov	r4, r2
 80183dc:	460d      	mov	r5, r1
 80183de:	b921      	cbnz	r1, 80183ea <_realloc_r+0x16>
 80183e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80183e4:	4611      	mov	r1, r2
 80183e6:	f7fe bf2f 	b.w	8017248 <_malloc_r>
 80183ea:	b92a      	cbnz	r2, 80183f8 <_realloc_r+0x24>
 80183ec:	f7ff fa28 	bl	8017840 <_free_r>
 80183f0:	4625      	mov	r5, r4
 80183f2:	4628      	mov	r0, r5
 80183f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183f8:	f000 f89e 	bl	8018538 <_malloc_usable_size_r>
 80183fc:	4284      	cmp	r4, r0
 80183fe:	4606      	mov	r6, r0
 8018400:	d802      	bhi.n	8018408 <_realloc_r+0x34>
 8018402:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018406:	d8f4      	bhi.n	80183f2 <_realloc_r+0x1e>
 8018408:	4621      	mov	r1, r4
 801840a:	4638      	mov	r0, r7
 801840c:	f7fe ff1c 	bl	8017248 <_malloc_r>
 8018410:	4680      	mov	r8, r0
 8018412:	b908      	cbnz	r0, 8018418 <_realloc_r+0x44>
 8018414:	4645      	mov	r5, r8
 8018416:	e7ec      	b.n	80183f2 <_realloc_r+0x1e>
 8018418:	42b4      	cmp	r4, r6
 801841a:	4622      	mov	r2, r4
 801841c:	4629      	mov	r1, r5
 801841e:	bf28      	it	cs
 8018420:	4632      	movcs	r2, r6
 8018422:	f7ff f9fe 	bl	8017822 <memcpy>
 8018426:	4629      	mov	r1, r5
 8018428:	4638      	mov	r0, r7
 801842a:	f7ff fa09 	bl	8017840 <_free_r>
 801842e:	e7f1      	b.n	8018414 <_realloc_r+0x40>

08018430 <__swhatbuf_r>:
 8018430:	b570      	push	{r4, r5, r6, lr}
 8018432:	460c      	mov	r4, r1
 8018434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018438:	2900      	cmp	r1, #0
 801843a:	b096      	sub	sp, #88	@ 0x58
 801843c:	4615      	mov	r5, r2
 801843e:	461e      	mov	r6, r3
 8018440:	da0d      	bge.n	801845e <__swhatbuf_r+0x2e>
 8018442:	89a3      	ldrh	r3, [r4, #12]
 8018444:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018448:	f04f 0100 	mov.w	r1, #0
 801844c:	bf14      	ite	ne
 801844e:	2340      	movne	r3, #64	@ 0x40
 8018450:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018454:	2000      	movs	r0, #0
 8018456:	6031      	str	r1, [r6, #0]
 8018458:	602b      	str	r3, [r5, #0]
 801845a:	b016      	add	sp, #88	@ 0x58
 801845c:	bd70      	pop	{r4, r5, r6, pc}
 801845e:	466a      	mov	r2, sp
 8018460:	f000 f848 	bl	80184f4 <_fstat_r>
 8018464:	2800      	cmp	r0, #0
 8018466:	dbec      	blt.n	8018442 <__swhatbuf_r+0x12>
 8018468:	9901      	ldr	r1, [sp, #4]
 801846a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801846e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018472:	4259      	negs	r1, r3
 8018474:	4159      	adcs	r1, r3
 8018476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801847a:	e7eb      	b.n	8018454 <__swhatbuf_r+0x24>

0801847c <__smakebuf_r>:
 801847c:	898b      	ldrh	r3, [r1, #12]
 801847e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018480:	079d      	lsls	r5, r3, #30
 8018482:	4606      	mov	r6, r0
 8018484:	460c      	mov	r4, r1
 8018486:	d507      	bpl.n	8018498 <__smakebuf_r+0x1c>
 8018488:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801848c:	6023      	str	r3, [r4, #0]
 801848e:	6123      	str	r3, [r4, #16]
 8018490:	2301      	movs	r3, #1
 8018492:	6163      	str	r3, [r4, #20]
 8018494:	b003      	add	sp, #12
 8018496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018498:	ab01      	add	r3, sp, #4
 801849a:	466a      	mov	r2, sp
 801849c:	f7ff ffc8 	bl	8018430 <__swhatbuf_r>
 80184a0:	9f00      	ldr	r7, [sp, #0]
 80184a2:	4605      	mov	r5, r0
 80184a4:	4639      	mov	r1, r7
 80184a6:	4630      	mov	r0, r6
 80184a8:	f7fe fece 	bl	8017248 <_malloc_r>
 80184ac:	b948      	cbnz	r0, 80184c2 <__smakebuf_r+0x46>
 80184ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184b2:	059a      	lsls	r2, r3, #22
 80184b4:	d4ee      	bmi.n	8018494 <__smakebuf_r+0x18>
 80184b6:	f023 0303 	bic.w	r3, r3, #3
 80184ba:	f043 0302 	orr.w	r3, r3, #2
 80184be:	81a3      	strh	r3, [r4, #12]
 80184c0:	e7e2      	b.n	8018488 <__smakebuf_r+0xc>
 80184c2:	89a3      	ldrh	r3, [r4, #12]
 80184c4:	6020      	str	r0, [r4, #0]
 80184c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80184ca:	81a3      	strh	r3, [r4, #12]
 80184cc:	9b01      	ldr	r3, [sp, #4]
 80184ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80184d2:	b15b      	cbz	r3, 80184ec <__smakebuf_r+0x70>
 80184d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80184d8:	4630      	mov	r0, r6
 80184da:	f000 f81d 	bl	8018518 <_isatty_r>
 80184de:	b128      	cbz	r0, 80184ec <__smakebuf_r+0x70>
 80184e0:	89a3      	ldrh	r3, [r4, #12]
 80184e2:	f023 0303 	bic.w	r3, r3, #3
 80184e6:	f043 0301 	orr.w	r3, r3, #1
 80184ea:	81a3      	strh	r3, [r4, #12]
 80184ec:	89a3      	ldrh	r3, [r4, #12]
 80184ee:	431d      	orrs	r5, r3
 80184f0:	81a5      	strh	r5, [r4, #12]
 80184f2:	e7cf      	b.n	8018494 <__smakebuf_r+0x18>

080184f4 <_fstat_r>:
 80184f4:	b538      	push	{r3, r4, r5, lr}
 80184f6:	4d07      	ldr	r5, [pc, #28]	@ (8018514 <_fstat_r+0x20>)
 80184f8:	2300      	movs	r3, #0
 80184fa:	4604      	mov	r4, r0
 80184fc:	4608      	mov	r0, r1
 80184fe:	4611      	mov	r1, r2
 8018500:	602b      	str	r3, [r5, #0]
 8018502:	f7ec fe58 	bl	80051b6 <_fstat>
 8018506:	1c43      	adds	r3, r0, #1
 8018508:	d102      	bne.n	8018510 <_fstat_r+0x1c>
 801850a:	682b      	ldr	r3, [r5, #0]
 801850c:	b103      	cbz	r3, 8018510 <_fstat_r+0x1c>
 801850e:	6023      	str	r3, [r4, #0]
 8018510:	bd38      	pop	{r3, r4, r5, pc}
 8018512:	bf00      	nop
 8018514:	20013148 	.word	0x20013148

08018518 <_isatty_r>:
 8018518:	b538      	push	{r3, r4, r5, lr}
 801851a:	4d06      	ldr	r5, [pc, #24]	@ (8018534 <_isatty_r+0x1c>)
 801851c:	2300      	movs	r3, #0
 801851e:	4604      	mov	r4, r0
 8018520:	4608      	mov	r0, r1
 8018522:	602b      	str	r3, [r5, #0]
 8018524:	f7ec fe57 	bl	80051d6 <_isatty>
 8018528:	1c43      	adds	r3, r0, #1
 801852a:	d102      	bne.n	8018532 <_isatty_r+0x1a>
 801852c:	682b      	ldr	r3, [r5, #0]
 801852e:	b103      	cbz	r3, 8018532 <_isatty_r+0x1a>
 8018530:	6023      	str	r3, [r4, #0]
 8018532:	bd38      	pop	{r3, r4, r5, pc}
 8018534:	20013148 	.word	0x20013148

08018538 <_malloc_usable_size_r>:
 8018538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801853c:	1f18      	subs	r0, r3, #4
 801853e:	2b00      	cmp	r3, #0
 8018540:	bfbc      	itt	lt
 8018542:	580b      	ldrlt	r3, [r1, r0]
 8018544:	18c0      	addlt	r0, r0, r3
 8018546:	4770      	bx	lr

08018548 <_init>:
 8018548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801854a:	bf00      	nop
 801854c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801854e:	bc08      	pop	{r3}
 8018550:	469e      	mov	lr, r3
 8018552:	4770      	bx	lr

08018554 <_fini>:
 8018554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018556:	bf00      	nop
 8018558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801855a:	bc08      	pop	{r3}
 801855c:	469e      	mov	lr, r3
 801855e:	4770      	bx	lr
